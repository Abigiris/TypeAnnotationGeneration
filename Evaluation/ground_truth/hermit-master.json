{
    "hermit-master/setup.py": {
        "__path": {
            "name": "__path",
            "location": 8,
            "return": [],
            "arguments": {
                "filename": []
            }
        }
    },
    "hermit-master/docs/conf.py": {},
    "hermit-master/hermit/config.py": {
        "HermitConfig.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "config_file": [
                    "str"
                ]
            }
        },
        "HermitConfig.load": {
            "name": "load",
            "location": 81,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "hermit-master/hermit/errors.py": {
        "InvalidSignatureRequest.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        }
    },
    "hermit-master/hermit/plugin.py": {},
    "hermit-master/hermit/rng.py": {
        "self_entropy": {
            "name": "self_entropy",
            "location": 7,
            "return": [
                "float"
            ],
            "arguments": {
                "input": [
                    "str"
                ]
            }
        },
        "compression_entropy": {
            "name": "compression_entropy",
            "location": 26,
            "return": [
                "float"
            ],
            "arguments": {
                "input": [
                    "str"
                ]
            }
        },
        "entropy": {
            "name": "entropy",
            "location": 34,
            "return": [
                "float"
            ],
            "arguments": {
                "input": [
                    "str"
                ]
            }
        },
        "enter_randomness": {
            "name": "enter_randomness",
            "location": 42,
            "return": [
                "bytes"
            ],
            "arguments": {
                "chunks": [
                    "int"
                ]
            }
        },
        "RandomGenerator.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomGenerator.get_more": {
            "name": "get_more",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "count": []
            }
        },
        "RandomGenerator.random": {
            "name": "random",
            "location": 98,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int"
                ]
            }
        },
        "RandomGenerator.ensure_bytes": {
            "name": "ensure_bytes",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "total": []
            }
        }
    },
    "hermit-master/hermit/shamir_share.py": {
        "set_random_bytes": {
            "name": "set_random_bytes",
            "location": 25,
            "return": [],
            "arguments": {
                "rng": []
            }
        },
        "restore_random_bytes": {
            "name": "restore_random_bytes",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "mnemonic_from_bytes": {
            "name": "mnemonic_from_bytes",
            "location": 33,
            "return": [],
            "arguments": {
                "bytes_data": []
            }
        },
        "mnemonic_to_bytes": {
            "name": "mnemonic_to_bytes",
            "location": 40,
            "return": [],
            "arguments": {
                "mnemonic": []
            }
        },
        "encrypt_shard": {
            "name": "encrypt_shard",
            "location": 47,
            "return": [],
            "arguments": {
                "passphrase": [],
                "unencrypted_shard": []
            }
        },
        "decrypt_shard": {
            "name": "decrypt_shard",
            "location": 55,
            "return": [],
            "arguments": {
                "passphrase": [],
                "encrypted_shard": []
            }
        },
        "decrypt_mnemonic": {
            "name": "decrypt_mnemonic",
            "location": 63,
            "return": [],
            "arguments": {
                "mnemonic": [],
                "passphrase": []
            }
        },
        "reencrypt_mnemonic": {
            "name": "reencrypt_mnemonic",
            "location": 68,
            "return": [],
            "arguments": {
                "mnemonic": [],
                "oldpassphrase": [],
                "newpassphrase": []
            }
        },
        "encrypt_mnemonic": {
            "name": "encrypt_mnemonic",
            "location": 74,
            "return": [],
            "arguments": {
                "mnemonic": [],
                "passphrase": []
            }
        }
    },
    "hermit-master/hermit/wallet.py": {
        "compressed_private_key_from_bip32": {
            "name": "compressed_private_key_from_bip32",
            "location": 15,
            "return": [
                "bytes"
            ],
            "arguments": {
                "bip32_xkey": [
                    "str"
                ]
            }
        },
        "compressed_public_key_from_bip32": {
            "name": "compressed_public_key_from_bip32",
            "location": 22,
            "return": [
                "bytes"
            ],
            "arguments": {
                "bip32_xkey": [
                    "str"
                ]
            }
        },
        "_hardened": {
            "name": "_hardened",
            "location": 28,
            "return": [
                "int"
            ],
            "arguments": {
                "id": [
                    "int"
                ]
            }
        },
        "_decode_segment": {
            "name": "_decode_segment",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {
                "segment": [
                    "str"
                ]
            }
        },
        "bip32_sequence": {
            "name": "bip32_sequence",
            "location": 40,
            "return": [
                "Tuple[(int, ...)]"
            ],
            "arguments": {
                "bip32_path": [
                    "str"
                ]
            }
        },
        "HDWallet.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HDWallet.unlocked": {
            "name": "unlocked",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HDWallet.unlock": {
            "name": "unlock",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "passphrase": [
                    "str"
                ]
            }
        },
        "HDWallet.lock": {
            "name": "lock",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HDWallet.extended_public_key": {
            "name": "extended_public_key",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "bip32_path": [
                    "str"
                ]
            }
        },
        "HDWallet.public_key": {
            "name": "public_key",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "bip32_path": [
                    "str"
                ]
            }
        },
        "HDWallet.extended_private_key": {
            "name": "extended_private_key",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "bip32_path": [
                    "str"
                ]
            }
        }
    },
    "hermit-master/hermit/__init__.py": {},
    "hermit-master/hermit/qrcode/displayer.py": {
        "display_qr_code": {
            "name": "display_qr_code",
            "location": 12,
            "return": [
                "asyncio.Task"
            ],
            "arguments": {
                "data": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "create_qr_code_image": {
            "name": "create_qr_code_image",
            "location": 29,
            "return": [
                "PilImage"
            ],
            "arguments": {
                "data": [
                    "str"
                ]
            }
        }
    },
    "hermit-master/hermit/qrcode/format.py": {
        "decode_qr_code_data": {
            "name": "decode_qr_code_data",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "encoded": [
                    "bytes"
                ]
            }
        },
        "encode_qr_code_data": {
            "name": "encode_qr_code_data",
            "location": 29,
            "return": [
                "bytes"
            ],
            "arguments": {
                "decoded": [
                    "str"
                ]
            }
        }
    },
    "hermit-master/hermit/qrcode/reader.py": {
        "read_qr_code": {
            "name": "read_qr_code",
            "location": 14,
            "return": [
                "Optional[str]"
            ],
            "arguments": {}
        },
        "_start_camera": {
            "name": "_start_camera",
            "location": 71,
            "return": [
                "cv2.VideoCapture"
            ],
            "arguments": {}
        }
    },
    "hermit-master/hermit/qrcode/utils.py": {
        "window_is_open": {
            "name": "window_is_open",
            "location": 4,
            "return": [],
            "arguments": {
                "window_name": []
            }
        }
    },
    "hermit-master/hermit/qrcode/__init__.py": {},
    "hermit-master/hermit/shards/interface.py": {
        "ShardWordUserInterface.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShardWordUserInterface.get_line_then_clear": {
            "name": "get_line_then_clear",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShardWordUserInterface.get_password": {
            "name": "get_password",
            "location": 27,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ShardWordUserInterface.confirm_password": {
            "name": "confirm_password",
            "location": 38,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShardWordUserInterface.get_change_password": {
            "name": "get_change_password",
            "location": 51,
            "return": [
                "Tuple[(bytes, bytes)]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ShardWordUserInterface.get_name_for_shard": {
            "name": "get_name_for_shard",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "share_id": [],
                "group_index": [],
                "group_threshold": [],
                "groups": [],
                "member_index": [],
                "member_threshold": [],
                "shards": []
            }
        },
        "ShardWordUserInterface.choose_shard": {
            "name": "choose_shard",
            "location": 85,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "shards": []
            }
        },
        "ShardWordUserInterface.confirm_delete_shard": {
            "name": "confirm_delete_shard",
            "location": 111,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "shard_name": [
                    "str"
                ]
            }
        },
        "ShardWordUserInterface.confirm_initialize_file": {
            "name": "confirm_initialize_file",
            "location": 115,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShardWordUserInterface.choose_shard_name": {
            "name": "choose_shard_name",
            "location": 119,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "int"
                ]
            }
        },
        "ShardWordUserInterface.enter_shard_words": {
            "name": "enter_shard_words",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ShardWordUserInterface.enter_wallet_words": {
            "name": "enter_wallet_words",
            "location": 144,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShardWordUserInterface.enter_group_information": {
            "name": "enter_group_information",
            "location": 165,
            "return": [
                "Tuple[(int, List[Tuple[(int, int)]])]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hermit-master/hermit/shards/shard.py": {
        "Shard.encrypted_mnemonic": {
            "name": "encrypted_mnemonic",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "words": []
            }
        },
        "Shard.share_id": {
            "name": "share_id",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Shard.shard_id": {
            "name": "shard_id",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Shard.group_id": {
            "name": "group_id",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Shard.member_threshold": {
            "name": "member_threshold",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Shard.group_threshold": {
            "name": "group_threshold",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Shard.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "encrypted_mnemonic": [
                    "Optional[str]"
                ],
                "interface": [
                    "ShardWordUserInterface"
                ]
            }
        },
        "Shard.input": {
            "name": "input",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shard.words": {
            "name": "words",
            "location": 103,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shard.change_password": {
            "name": "change_password",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Shard.from_bytes": {
            "name": "from_bytes",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bytes_data": [
                    "bytes"
                ]
            }
        },
        "Shard.to_bytes": {
            "name": "to_bytes",
            "location": 122,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shard.to_qr_bson": {
            "name": "to_qr_bson",
            "location": 126,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shard._unpack_share": {
            "name": "_unpack_share",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shard.to_str": {
            "name": "to_str",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shard._get_password": {
            "name": "_get_password",
            "location": 140,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shard._get_change_password": {
            "name": "_get_change_password",
            "location": 144,
            "return": [
                "Tuple[(bytes, bytes)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hermit-master/hermit/shards/shard_set.py": {
        "check_satisfaction_criteria": {
            "name": "check_satisfaction_criteria",
            "location": 18,
            "return": [],
            "arguments": {
                "shards": []
            }
        },
        "ShardSet.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interface": [
                    "Optional[ShardWordUserInterface]"
                ]
            }
        },
        "ShardSet._ensure_shards": {
            "name": "_ensure_shards",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "shards_expected": [
                    "bool"
                ]
            }
        },
        "ShardSet.initialize_file": {
            "name": "initialize_file",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShardSet.to_bytes": {
            "name": "to_bytes",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ShardSet.save": {
            "name": "save",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShardSet._needed_entropy_bytes": {
            "name": "_needed_entropy_bytes",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "group_threshold": [],
                "groups": []
            }
        },
        "ShardSet.create_share_from_wallet_words": {
            "name": "create_share_from_wallet_words",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "wallet_words": []
            }
        },
        "ShardSet.create_random_share": {
            "name": "create_random_share",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ShardSet._import_share_mnemonic_groups": {
            "name": "_import_share_mnemonic_groups",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mnemonic_groups": [
                    "List[List[str]]"
                ]
            }
        },
        "ShardSet.wallet_words": {
            "name": "wallet_words",
            "location": 164,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShardSet.secret_seed": {
            "name": "secret_seed",
            "location": 174,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShardSet.reveal_shard": {
            "name": "reveal_shard",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "shard_name": [
                    "str"
                ]
            }
        },
        "ShardSet.reveal_wallet_words": {
            "name": "reveal_wallet_words",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShardSet.reshard": {
            "name": "reshard",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShardSet.qr_shard": {
            "name": "qr_shard",
            "location": 251,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "shard_name": [
                    "str"
                ]
            }
        },
        "ShardSet.import_shard_qr": {
            "name": "import_shard_qr",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "shard_data": [
                    "bytes"
                ]
            }
        },
        "ShardSet.input_shard_words": {
            "name": "input_shard_words",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ShardSet.copy_shard": {
            "name": "copy_shard",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "original": [
                    "str"
                ],
                "copy": [
                    "str"
                ]
            }
        },
        "ShardSet.clear_shards": {
            "name": "clear_shards",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShardSet.wallet_words_shard": {
            "name": "wallet_words_shard",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ShardSet.delete_shard": {
            "name": "delete_shard",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "shard_name": [
                    "str"
                ]
            }
        },
        "ShardSet.list_shards": {
            "name": "list_shards",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShardSet.persist": {
            "name": "persist",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShardSet.backup": {
            "name": "backup",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShardSet.restore": {
            "name": "restore",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShardSet.reload": {
            "name": "reload",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hermit-master/hermit/shards/__init__.py": {},
    "hermit-master/hermit/signer/base.py": {
        "Signer.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signing_wallet": [
                    "HDWallet"
                ],
                "session": [
                    "PromptSession"
                ]
            }
        },
        "Signer.sign": {
            "name": "sign",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "testnet": [
                    "bool"
                ]
            }
        },
        "Signer.validate_request": {
            "name": "validate_request",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Signer.validate_bip32_path": {
            "name": "validate_bip32_path",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bip32_path": [
                    "str"
                ]
            }
        },
        "Signer.display_request": {
            "name": "display_request",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Signer.create_signature": {
            "name": "create_signature",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Signer.generate_child_keys": {
            "name": "generate_child_keys",
            "location": 123,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": [],
                "bip32_path": [
                    "str"
                ]
            }
        },
        "Signer._wait_for_request": {
            "name": "_wait_for_request",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Signer._parse_request": {
            "name": "_parse_request",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Signer._confirm_create_signature": {
            "name": "_confirm_create_signature",
            "location": 157,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Signer._show_signature": {
            "name": "_show_signature",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Signer._serialized_signature": {
            "name": "_serialized_signature",
            "location": 176,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Signer._signature_label": {
            "name": "_signature_label",
            "location": 179,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hermit-master/hermit/signer/bitcoin_signer.py": {
        "generate_multisig_address": {
            "name": "generate_multisig_address",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "redeemscript": [
                    "str"
                ],
                "testnet": [
                    "bool"
                ]
            }
        },
        "BitcoinSigner.validate_request": {
            "name": "validate_request",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitcoinSigner._validate_input_groups": {
            "name": "_validate_input_groups",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitcoinSigner._validate_input_group": {
            "name": "_validate_input_group",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_group": [
                    "list"
                ]
            }
        },
        "BitcoinSigner._validate_input": {
            "name": "_validate_input",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "Dict"
                ]
            }
        },
        "BitcoinSigner._validate_redeem_script": {
            "name": "_validate_redeem_script",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "redeem_script": [
                    "bytes"
                ]
            }
        },
        "BitcoinSigner._validate_outputs": {
            "name": "_validate_outputs",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitcoinSigner._validate_output": {
            "name": "_validate_output",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "Dict"
                ]
            }
        },
        "BitcoinSigner._validate_fee": {
            "name": "_validate_fee",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitcoinSigner.display_request": {
            "name": "display_request",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitcoinSigner._formatted_input_groups": {
            "name": "_formatted_input_groups",
            "location": 232,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitcoinSigner._formatted_outputs": {
            "name": "_formatted_outputs",
            "location": 248,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitcoinSigner._format_output": {
            "name": "_format_output",
            "location": 254,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "Dict"
                ]
            }
        },
        "BitcoinSigner._format_amount": {
            "name": "_format_amount",
            "location": 259,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "amount": []
            }
        },
        "BitcoinSigner.create_signature": {
            "name": "create_signature",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hermit-master/hermit/signer/echo_signer.py": {
        "EchoSigner.validate_request": {
            "name": "validate_request",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EchoSigner.display_request": {
            "name": "display_request",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EchoSigner.create_signature": {
            "name": "create_signature",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EchoSigner._signature_label": {
            "name": "_signature_label",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hermit-master/hermit/signer/__init__.py": {},
    "hermit-master/hermit/ui/base.py": {
        "clear_screen": {
            "name": "clear_screen",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "reset_screen": {
            "name": "reset_screen",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "command": {
            "name": "command",
            "location": 18,
            "return": [],
            "arguments": {
                "name": [],
                "commands": [
                    "Dict"
                ]
            }
        },
        "command._command_decorator": {
            "name": "_command_decorator",
            "location": 19,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "command._command_decorator.wrapper": {
            "name": "wrapper",
            "location": 27,
            "return": [],
            "arguments": {}
        }
    },
    "hermit-master/hermit/ui/common.py": {
        "unlock": {
            "name": "unlock",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "lock": {
            "name": "lock",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "clear": {
            "name": "clear",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "toggle_debug": {
            "name": "toggle_debug",
            "location": 52,
            "return": [],
            "arguments": {}
        }
    },
    "hermit-master/hermit/ui/main.py": {
        "main": {
            "name": "main",
            "location": 21,
            "return": [],
            "arguments": {}
        }
    },
    "hermit-master/hermit/ui/relocker.py": {},
    "hermit-master/hermit/ui/repl.py": {
        "repl": {
            "name": "repl",
            "location": 17,
            "return": [],
            "arguments": {
                "commands": [
                    "Dict"
                ],
                "mode": [],
                "help_command": []
            }
        },
        "check_timer": {
            "name": "check_timer",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "escape_binding": {
            "name": "escape_binding",
            "location": 80,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "force_check_timer": {
            "name": "force_check_timer",
            "location": 85,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "force_lock": {
            "name": "force_lock",
            "location": 90,
            "return": [],
            "arguments": {
                "event": []
            }
        }
    },
    "hermit-master/hermit/ui/shards.py": {
        "shard_command": {
            "name": "shard_command",
            "location": 8,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "build_family_from_phrase": {
            "name": "build_family_from_phrase",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "build_family_from_random": {
            "name": "build_family_from_random",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "build_family_from_wallet": {
            "name": "build_family_from_wallet",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "list_shards": {
            "name": "list_shards",
            "location": 99,
            "return": [],
            "arguments": {}
        },
        "import_shard_from_phrase": {
            "name": "import_shard_from_phrase",
            "location": 109,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "import_shard_from_qr": {
            "name": "import_shard_from_qr",
            "location": 130,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "export_shard_as_phrase": {
            "name": "export_shard_as_phrase",
            "location": 151,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "export_shard_as_qr": {
            "name": "export_shard_as_qr",
            "location": 160,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "copy_shard": {
            "name": "copy_shard",
            "location": 171,
            "return": [],
            "arguments": {
                "original": [],
                "copy": []
            }
        },
        "delete_shard": {
            "name": "delete_shard",
            "location": 190,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "write": {
            "name": "write",
            "location": 216,
            "return": [],
            "arguments": {}
        },
        "persist": {
            "name": "persist",
            "location": 233,
            "return": [],
            "arguments": {}
        },
        "backup": {
            "name": "backup",
            "location": 247,
            "return": [],
            "arguments": {}
        },
        "restore": {
            "name": "restore",
            "location": 260,
            "return": [],
            "arguments": {}
        },
        "reload": {
            "name": "reload",
            "location": 270,
            "return": [],
            "arguments": {}
        },
        "quit_shards": {
            "name": "quit_shards",
            "location": 314,
            "return": [],
            "arguments": {}
        },
        "shard_help": {
            "name": "shard_help",
            "location": 324,
            "return": [],
            "arguments": {}
        }
    },
    "hermit-master/hermit/ui/state.py": {},
    "hermit-master/hermit/ui/toolbar.py": {
        "bottom_toolbar": {
            "name": "bottom_toolbar",
            "location": 8,
            "return": [],
            "arguments": {}
        }
    },
    "hermit-master/hermit/ui/wallet.py": {
        "wallet_command": {
            "name": "wallet_command",
            "location": 14,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "echo": {
            "name": "echo",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "sign_bitcoin": {
            "name": "sign_bitcoin",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "export_xpub": {
            "name": "export_xpub",
            "location": 63,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "export_pub": {
            "name": "export_pub",
            "location": 87,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "shard_mode": {
            "name": "shard_mode",
            "location": 110,
            "return": [],
            "arguments": {}
        },
        "quit_hermit": {
            "name": "quit_hermit",
            "location": 122,
            "return": [],
            "arguments": {}
        },
        "toggle_testnet": {
            "name": "toggle_testnet",
            "location": 133,
            "return": [],
            "arguments": {}
        },
        "wallet_help": {
            "name": "wallet_help",
            "location": 148,
            "return": [],
            "arguments": {}
        },
        "wallet_repl": {
            "name": "wallet_repl",
            "location": 202,
            "return": [],
            "arguments": {}
        }
    },
    "hermit-master/hermit/ui/__init__.py": {},
    "hermit-master/hermit/wordlists/__init__.py": {},
    "hermit-master/scripts/create_qr_code.py": {},
    "hermit-master/scripts/generate_fixture_images.py": {
        "generate_fixture_images": {
            "name": "generate_fixture_images",
            "location": 14,
            "return": [],
            "arguments": {
                "json_filename": []
            }
        }
    },
    "hermit-master/scripts/generate_large_bitcoin_request.py": {
        "generate_large_bitcoin_request": {
            "name": "generate_large_bitcoin_request",
            "location": 8,
            "return": [],
            "arguments": {
                "N": []
            }
        }
    },
    "hermit-master/scripts/read_qr_code.py": {},
    "hermit-master/tests/conftest.py": {
        "trezor_bip39_vectors": {
            "name": "trezor_bip39_vectors",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "bip32_vectors": {
            "name": "bip32_vectors",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "unchained_vectors": {
            "name": "unchained_vectors",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "bitcoin_testnet_signature_request": {
            "name": "bitcoin_testnet_signature_request",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "opensource_wallet_words": {
            "name": "opensource_wallet_words",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "fixture_opensource_shards": {
            "name": "fixture_opensource_shards",
            "location": 38,
            "return": [],
            "arguments": {
                "opensource_wallet_words": []
            }
        },
        "fixture_opensource_shard_set": {
            "name": "fixture_opensource_shard_set",
            "location": 65,
            "return": [],
            "arguments": {
                "opensource_wallet_words": []
            }
        },
        "prep_full_vector": {
            "name": "prep_full_vector",
            "location": 71,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "fixture_opensource_bitcoin_vector": {
            "name": "fixture_opensource_bitcoin_vector",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "fixture_opensource_bitcoin_vector_0": {
            "name": "fixture_opensource_bitcoin_vector_0",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "fixture_opensource_bitcoin_vector_1": {
            "name": "fixture_opensource_bitcoin_vector_1",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "fixture_opensource_bitcoin_vectors": {
            "name": "fixture_opensource_bitcoin_vectors",
            "location": 100,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "hermit-master/tests/test_config.py": {
        "TestHermitPaths.test_with_no_config_file": {
            "name": "test_with_no_config_file",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "mock_exists": []
            }
        },
        "TestHermitPaths.test_with_config_file": {
            "name": "test_with_config_file",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "mock_environ_get": []
            }
        },
        "TestHermitPaths.test_paths_can_be_set": {
            "name": "test_paths_can_be_set",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "mock_open": [],
                "mock_safe_load": [],
                "mock_exists": []
            }
        },
        "TestHermitPaths.test_can_set_command": {
            "name": "test_can_set_command",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "mock_open": [],
                "mock_safe_load": [],
                "mock_exists": []
            }
        }
    },
    "hermit-master/tests/test_errors.py": {
        "TestHermitErrors.test_HermitError_raisable": {
            "name": "test_HermitError_raisable",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHermitErrors.test_InvalidSignatureRequest_raisable_with_message": {
            "name": "test_InvalidSignatureRequest_raisable_with_message",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "hermit-master/tests/test_functional_bitcoin_tests.py": {
        "TestBitcoinSigningIntegration.test_opensouce_bitcoin_vector_0": {
            "name": "test_opensouce_bitcoin_vector_0",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": [],
                "mock_input": [],
                "mock_display_qr_code": [],
                "fixture_opensource_shard_set": [],
                "fixture_opensource_bitcoin_vectors": [],
                "capsys": []
            }
        }
    },
    "hermit-master/tests/test_rng.py": {
        "TestSelfEntropy.test_self_entropy": {
            "name": "test_self_entropy",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCompressionEntropy.test_compression_entropy": {
            "name": "test_compression_entropy",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEntropy.test_compression_entropy": {
            "name": "test_compression_entropy",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "hermit-master/tests/test_wallet.py": {
        "FakeShards.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "words": []
            }
        },
        "FakeShards.wallet_words": {
            "name": "wallet_words",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBIP32Sequence.test_invalid_BIP32_paths_raise_error": {
            "name": "test_invalid_BIP32_paths_raise_error",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHDWalletUnlocked.test_unlocked_wallet_is_unlocked": {
            "name": "test_unlocked_wallet_is_unlocked",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "opensource_wallet_words": []
            }
        },
        "TestHDWalletUnlocked.test_init_wallet_is_not_unlocked": {
            "name": "test_init_wallet_is_not_unlocked",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHDWalletUnlocked.test_locked_wallet_is_not_unlocked": {
            "name": "test_locked_wallet_is_not_unlocked",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "opensource_wallet_words": []
            }
        },
        "TestHDWalletUnlock.test_root_priv_from_trezor_vectors": {
            "name": "test_root_priv_from_trezor_vectors",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "trezor_bip39_vectors": []
            }
        },
        "TestHDWalletUnlock.test_root_priv_from_unchained_vectors": {
            "name": "test_root_priv_from_unchained_vectors",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "unchained_vectors": []
            }
        },
        "TestHDWalletUnlock.test_checksum_failed_raises_error": {
            "name": "test_checksum_failed_raises_error",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHDWalletExtendedPublicKey.test_bip32_vectors": {
            "name": "test_bip32_vectors",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "bip32_vectors": []
            }
        },
        "TestHDWalletPublicKey.test_bip32_vectors": {
            "name": "test_bip32_vectors",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "bip32_vectors": []
            }
        },
        "TestHDWalletExtendedPrivateKey.test_bip32_vectors": {
            "name": "test_bip32_vectors",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "bip32_vectors": []
            }
        }
    },
    "hermit-master/tests/qrcode/test_displayer.py": {
        "too_large_bitcoin_signature_request": {
            "name": "too_large_bitcoin_signature_request",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "largest_bitcoin_signature_request": {
            "name": "largest_bitcoin_signature_request",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "opensource_bitcoin_vector_0_array": {
            "name": "opensource_bitcoin_vector_0_array",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "TestCreateQRCode.test_fifty_five_inputs_fails": {
            "name": "test_fifty_five_inputs_fails",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "too_large_bitcoin_signature_request": []
            }
        },
        "TestCreateQRCode.test_fifty_inputs_passes": {
            "name": "test_fifty_inputs_passes",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "largest_bitcoin_signature_request": []
            }
        }
    },
    "hermit-master/tests/qrcode/test_format.py": {
        "TestDecodeQRCodeData.test_valid_format": {
            "name": "test_valid_format",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecodeQRCodeData.test_empty_bytes": {
            "name": "test_empty_bytes",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecodeQRCodeData.test_improper_base32": {
            "name": "test_improper_base32",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecodeQRCodeData.test_base64": {
            "name": "test_base64",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecodeQRCodeData.test_uncompressed": {
            "name": "test_uncompressed",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecodeQRCodeData.test_not_utf8": {
            "name": "test_not_utf8",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncodeQRCodeData.test_recoverability": {
            "name": "test_recoverability",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncodeQRCodeData.test_empty_string": {
            "name": "test_empty_string",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncodeQRCodeData.test_bytes": {
            "name": "test_bytes",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "hermit-master/tests/qrcode/test_limits.py": {
        "TestQRCodeStorage.test_numeric_maximum": {
            "name": "test_numeric_maximum",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestQRCodeStorage.test_numeric_overflow": {
            "name": "test_numeric_overflow",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestQRCodeStorage.test_alphanumeric_maximum": {
            "name": "test_alphanumeric_maximum",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestQRCodeStorage.test_alphanumeric_overflow": {
            "name": "test_alphanumeric_overflow",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestQRCodeStorage.test_binary_maximum": {
            "name": "test_binary_maximum",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestQRCodeStorage.test_binary_overflow": {
            "name": "test_binary_overflow",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestQRCodeStorage.test_bits_maximum": {
            "name": "test_bits_maximum",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestQRCodeStorage.test_bits_overflow": {
            "name": "test_bits_overflow",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestQRCodeStorage.test_alphanumeric_compression_maximum": {
            "name": "test_alphanumeric_compression_maximum",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "hermit-master/tests/qrcode/test_reader.py": {
        "opensource_bitcoin_vector_array": {
            "name": "opensource_bitcoin_vector_array",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "opensource_bitcoin_vector_0_image": {
            "name": "opensource_bitcoin_vector_0_image",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "TestReadQRCode.test_cannot_open_camera_is_error": {
            "name": "test_cannot_open_camera_is_error",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "mock_cv2": []
            }
        },
        "TestReadQRCode.test_valid_qr_code": {
            "name": "test_valid_qr_code",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "mock_window_is_open": [],
                "mock_cv2": [],
                "fixture_opensource_bitcoin_vector": [],
                "opensource_bitcoin_vector_0_image": []
            }
        }
    },
    "hermit-master/tests/shards/conftest.py": {
        "zero_wallet_words": {
            "name": "zero_wallet_words",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "zero_bytes": {
            "name": "zero_bytes",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "unencrypted_mnemonic_1": {
            "name": "unencrypted_mnemonic_1",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "encrypted_mnemonic_1": {
            "name": "encrypted_mnemonic_1",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "password_1": {
            "name": "password_1",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "password_2": {
            "name": "password_2",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "shamir_mnemonic_2_of_2": {
            "name": "shamir_mnemonic_2_of_2",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "shamir_2_of_2_secret": {
            "name": "shamir_2_of_2_secret",
            "location": 38,
            "return": [],
            "arguments": {}
        }
    },
    "hermit-master/tests/shards/test_shard.py": {
        "TestShard.setup": {
            "name": "setup",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestShard.test_create_shard": {
            "name": "test_create_shard",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "encrypted_mnemonic_1": []
            }
        },
        "TestShard.test_null_decrypt_shard": {
            "name": "test_null_decrypt_shard",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "unencrypted_mnemonic_1": []
            }
        },
        "TestShard.test_decrypt_shard": {
            "name": "test_decrypt_shard",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "encrypted_mnemonic_1": [],
                "password_1": [],
                "unencrypted_mnemonic_1": []
            }
        },
        "TestShard.test_reencrypt_shard": {
            "name": "test_reencrypt_shard",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "encrypted_mnemonic_1": [],
                "password_1": [],
                "password_2": [],
                "unencrypted_mnemonic_1": []
            }
        },
        "TestShard.test_none_reencrypt_shard": {
            "name": "test_none_reencrypt_shard",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "encrypted_mnemonic_1": [],
                "password_1": [],
                "unencrypted_mnemonic_1": []
            }
        },
        "TestShard.test_shard_to_bytes": {
            "name": "test_shard_to_bytes",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "encrypted_mnemonic_1": []
            }
        },
        "TestShard.test_shard_from_bytes": {
            "name": "test_shard_from_bytes",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "encrypted_mnemonic_1": []
            }
        },
        "TestShard.test_shard_to_str": {
            "name": "test_shard_to_str",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "encrypted_mnemonic_1": []
            }
        }
    },
    "hermit-master/tests/shards/test_shard_set.py": {
        "TestShardSet.setup": {
            "name": "setup",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestShardSet.teardown": {
            "name": "teardown",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestShardSet.test_init": {
            "name": "test_init",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestShardSet.test_ensure_shards": {
            "name": "test_ensure_shards",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestShardSet.test_save": {
            "name": "test_save",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestShardSet.test_initialize_file": {
            "name": "test_initialize_file",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestShardSet.test_create_from_random": {
            "name": "test_create_from_random",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "password_1": [],
                "password_2": []
            }
        },
        "TestShardSet.test_create_from_random_large_group": {
            "name": "test_create_from_random_large_group",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestShardSet.test_create_from_wallet_words": {
            "name": "test_create_from_wallet_words",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "zero_wallet_words": [],
                "password_1": [],
                "password_2": []
            }
        },
        "TestShardSet.test_get_secret_seed_from_wallet_words": {
            "name": "test_get_secret_seed_from_wallet_words",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "zero_wallet_words": [],
                "password_1": [],
                "password_2": []
            }
        },
        "TestShardSet.test_get_secret_seed_complicated_groups_with_wallet_words": {
            "name": "test_get_secret_seed_complicated_groups_with_wallet_words",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "zero_wallet_words": [],
                "zero_bytes": []
            }
        },
        "TestShardSet.test_enter_shard_words": {
            "name": "test_enter_shard_words",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "encrypted_mnemonic_1": []
            }
        },
        "TestShardSet.setup.mock_random": {
            "name": "mock_random",
            "location": 28,
            "return": [],
            "arguments": {
                "count": []
            }
        },
        "TestShardSet.setup.mock_ensure": {
            "name": "mock_ensure",
            "location": 32,
            "return": [],
            "arguments": {
                "count": []
            }
        }
    },
    "hermit-master/tests/signer/test_base.py": {
        "FakeShards.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "words": []
            }
        },
        "FakeShards.wallet_words": {
            "name": "wallet_words",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSignerValidates.setup_wallet_and_request": {
            "name": "setup_wallet_and_request",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "bitcoin_testnet_signature_request": [],
                "opensource_wallet_words": []
            }
        },
        "TestSignerValidates.test_invalid_json_is_error": {
            "name": "test_invalid_json_is_error",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestSignerValidates.test_BIP32_path_not_string_is_error": {
            "name": "test_BIP32_path_not_string_is_error",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestSignerValidates.test_invalid_BIP32_paths_raise_error": {
            "name": "test_invalid_BIP32_paths_raise_error",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestSignerValidates.test_BIP32_node_too_high_raises_error": {
            "name": "test_BIP32_node_too_high_raises_error",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestSigner.setup_wallet_and_request": {
            "name": "setup_wallet_and_request",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "bitcoin_testnet_signature_request": [],
                "opensource_wallet_words": []
            }
        },
        "TestSigner.test_confirm_signature_prompt": {
            "name": "test_confirm_signature_prompt",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "mock_input": [],
                "mock_display_qr_code": [],
                "mock_request": []
            }
        },
        "TestSigner.test_confirm_signature_prompt_in_session": {
            "name": "test_confirm_signature_prompt_in_session",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "mock_input": [],
                "mock_display_qr_code": [],
                "mock_request": []
            }
        },
        "TestSigner.test_no_request_returned": {
            "name": "test_no_request_returned",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "mock_parse_request": [],
                "mock_input": [],
                "mock_display_qr_code": [],
                "mock_request": []
            }
        },
        "TestSigner.test_no_request_raises_error_parse_request": {
            "name": "test_no_request_raises_error_parse_request",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "mock_parse_request": [],
                "mock_input": [],
                "mock_display_qr_code": []
            }
        },
        "TestSigner.test_decline_signature_prompt": {
            "name": "test_decline_signature_prompt",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "mock_create_signature": [],
                "mock_input": [],
                "mock_display_qr_code": [],
                "mock_request": []
            }
        }
    },
    "hermit-master/tests/signer/test_bitcoin_signer.py": {
        "FakeShards.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "words": []
            }
        },
        "FakeShards.wallet_words": {
            "name": "wallet_words",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBitcoinSignerValidation.setup_wallet_and_request": {
            "name": "setup_wallet_and_request",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "fixture_opensource_bitcoin_vector": [],
                "opensource_wallet_words": []
            }
        },
        "TestBitcoinSignerValidation.test_no_input_groups_is_error": {
            "name": "test_no_input_groups_is_error",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestBitcoinSignerValidation.test_input_groups_not_array_is_error": {
            "name": "test_input_groups_not_array_is_error",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestBitcoinSignerValidation.test_empty_input_groups_is_error": {
            "name": "test_empty_input_groups_is_error",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestBitcoinSignerValidation.test_empty_input_group_is_error": {
            "name": "test_empty_input_group_is_error",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestBitcoinSignerValidation.test_too_short_input_group_is_error": {
            "name": "test_too_short_input_group_is_error",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestBitcoinSignerValidation.test_no_redeem_script_is_error": {
            "name": "test_no_redeem_script_is_error",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestBitcoinSignerValidation.test_non_hex_redeem_script_is_error": {
            "name": "test_non_hex_redeem_script_is_error",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestBitcoinSignerValidation.test_odd_length_hex_redeem_script_is_error": {
            "name": "test_odd_length_hex_redeem_script_is_error",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestBitcoinSignerValidation.test_BIP32_path_not_string_is_error": {
            "name": "test_BIP32_path_not_string_is_error",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestBitcoinSignerValidation.test_invalid_BIP32_paths_raise_error": {
            "name": "test_invalid_BIP32_paths_raise_error",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestBitcoinSignerValidation.test_BIP32_node_too_high_raises_error": {
            "name": "test_BIP32_node_too_high_raises_error",
            "location": 226,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestBitcoinSignerValidation.test_input_amount_required": {
            "name": "test_input_amount_required",
            "location": 247,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestBitcoinSignerValidation.test_input_amount_must_integer": {
            "name": "test_input_amount_must_integer",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestBitcoinSignerValidation.test_input_amount_must_positive": {
            "name": "test_input_amount_must_positive",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestBitcoinSignerValidation.test_input_txid_required": {
            "name": "test_input_txid_required",
            "location": 317,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestBitcoinSignerValidation.test_invalid_length_input_txid_is_error": {
            "name": "test_invalid_length_input_txid_is_error",
            "location": 326,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestBitcoinSignerValidation.test_non_hex_input_txid_is_error": {
            "name": "test_non_hex_input_txid_is_error",
            "location": 343,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestBitcoinSignerValidation.test_input_index_required": {
            "name": "test_input_index_required",
            "location": 358,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestBitcoinSignerValidation.test_input_index_must_integer": {
            "name": "test_input_index_must_integer",
            "location": 367,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestBitcoinSignerValidation.test_input_index_cannot_be_negative": {
            "name": "test_input_index_cannot_be_negative",
            "location": 406,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestBitcoinSignerValidation.test_no_outputs_is_error": {
            "name": "test_no_outputs_is_error",
            "location": 421,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestBitcoinSignerValidation.test_outputs_not_array_is_error": {
            "name": "test_outputs_not_array_is_error",
            "location": 430,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestBitcoinSignerValidation.test_empty_outputs_array_is_error": {
            "name": "test_empty_outputs_array_is_error",
            "location": 463,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestBitcoinSignerValidation.test_output_address_required": {
            "name": "test_output_address_required",
            "location": 478,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestBitcoinSignerValidation.test_output_address_must_be_base58": {
            "name": "test_output_address_must_be_base58",
            "location": 487,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestBitcoinSignerValidation.test_output_address_must_be_base58check": {
            "name": "test_output_address_must_be_base58check",
            "location": 521,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestBitcoinSignerValidation.test_valid_output_address_types": {
            "name": "test_valid_output_address_types",
            "location": 539,
            "return": [],
            "arguments": {
                "self": [],
                "mock_input": [],
                "mock_display_qr_code": [],
                "mock_request": []
            }
        },
        "TestBitcoinSignerValidation.test_valid_segwit_testnet_output_address_types": {
            "name": "test_valid_segwit_testnet_output_address_types",
            "location": 554,
            "return": [],
            "arguments": {
                "self": [],
                "mock_input": [],
                "mock_display_qr_code": [],
                "mock_request": []
            }
        },
        "TestBitcoinSignerValidation.test_valid_segwit_mainnet_output_address_types": {
            "name": "test_valid_segwit_mainnet_output_address_types",
            "location": 570,
            "return": [],
            "arguments": {
                "self": [],
                "mock_input": [],
                "mock_display_qr_code": [],
                "mock_request": []
            }
        },
        "TestBitcoinSignerValidation.test_invalid_output_bech_addresses_error": {
            "name": "test_invalid_output_bech_addresses_error",
            "location": 584,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestBitcoinSignerValidation.test_wrong_network_address_type_errors": {
            "name": "test_wrong_network_address_type_errors",
            "location": 609,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestBitcoinSignerValidation.test_output_amount_required": {
            "name": "test_output_amount_required",
            "location": 630,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestBitcoinSignerValidation.test_output_amount_must_integer": {
            "name": "test_output_amount_must_integer",
            "location": 639,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestBitcoinSignerValidation.test_output_amount_must_positive": {
            "name": "test_output_amount_must_positive",
            "location": 680,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestBitcoinSignerValidation.test_network_fee_must_be_positive": {
            "name": "test_network_fee_must_be_positive",
            "location": 700,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        }
    },
    "hermit-master/tests/signer/test_echo_signer.py": {
        "TestEchoSigner.test_can_create_valid_signature": {
            "name": "test_can_create_valid_signature",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": [],
                "mock_input": [],
                "mock_display_qr_code": [],
                "fixture_opensource_bitcoin_vectors": [],
                "fixture_opensource_shard_set": [],
                "capsys": []
            }
        }
    }
}
{
    "hl-flowing-clean-arch-master/highlevel/conftest.py": {
        "configuration_test": {
            "name": "configuration_test",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "simulation_configuration_test": {
            "name": "simulation_configuration_test",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "simulation_state_mock": {
            "name": "simulation_state_mock",
            "location": 73,
            "return": [],
            "arguments": {}
        },
        "odometry_controller_mock": {
            "name": "odometry_controller_mock",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "symmetry_controller_mock": {
            "name": "symmetry_controller_mock",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "localization_controller_mock": {
            "name": "localization_controller_mock",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "replay_saver_mock": {
            "name": "replay_saver_mock",
            "location": 116,
            "return": [],
            "arguments": {}
        },
        "event_queue_mock": {
            "name": "event_queue_mock",
            "location": 124,
            "return": [],
            "arguments": {}
        },
        "simulation_gateway_mock": {
            "name": "simulation_gateway_mock",
            "location": 134,
            "return": [],
            "arguments": {}
        },
        "motion_gateway_mock": {
            "name": "motion_gateway_mock",
            "location": 146,
            "return": [],
            "arguments": {}
        },
        "simulation_probe_mock": {
            "name": "simulation_probe_mock",
            "location": 163,
            "return": [],
            "arguments": {}
        },
        "simulated_lidar_adapter_mock": {
            "name": "simulated_lidar_adapter_mock",
            "location": 171,
            "return": [],
            "arguments": {}
        },
        "match_action_controller_mock": {
            "name": "match_action_controller_mock",
            "location": 179,
            "return": [],
            "arguments": {}
        },
        "socket_adapter_mock": {
            "name": "socket_adapter_mock",
            "location": 192,
            "return": [],
            "arguments": {}
        }
    },
    "hl-flowing-clean-arch-master/highlevel/logger.py": {},
    "hl-flowing-clean-arch-master/highlevel/main.py": {},
    "hl-flowing-clean-arch-master/highlevel/main_test.py": {},
    "hl-flowing-clean-arch-master/highlevel/__init__.py": {},
    "hl-flowing-clean-arch-master/highlevel/robot/__init__.py": {},
    "hl-flowing-clean-arch-master/highlevel/robot/adapter/__init__.py": {},
    "hl-flowing-clean-arch-master/highlevel/robot/adapter/lidar/rplidar.py": {
        "RPLIDARAdapter.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "rplidar_obj": [
                    "rplidar.RPLidar"
                ]
            }
        },
        "RPLIDARAdapter.register_handler": {
            "name": "register_handler",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Callback"
                ]
            }
        },
        "RPLIDARAdapter._loop": {
            "name": "_loop",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/robot/adapter/lidar/simulated.py": {
        "SimulatedLIDARAdapter.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimulatedLIDARAdapter.register_handler": {
            "name": "register_handler",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Callback"
                ]
            }
        },
        "SimulatedLIDARAdapter.push_simulated_circle_readings": {
            "name": "push_simulated_circle_readings",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimulatedLIDARAdapter.push_simulated_readings": {
            "name": "push_simulated_readings",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "readings": [
                    "Tuple[(Tuple[(Radian, Millimeter)], ...)]"
                ]
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/robot/adapter/lidar/__init__.py": {
        "LIDARAdapter.register_handler": {
            "name": "register_handler",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Callback"
                ]
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/robot/adapter/socket/socket_adapter.py": {
        "TCPSocketAdapter.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "reader": [
                    "StreamReader"
                ],
                "writer": [
                    "StreamWriter"
                ]
            }
        },
        "TCPSocketAdapter.register_handler": {
            "name": "register_handler",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Callable[([bytes], Awaitable[None])]"
                ]
            }
        },
        "LoopbackSocketAdapter.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoopbackSocketAdapter.register_handler": {
            "name": "register_handler",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Callable[([bytes], Awaitable[None])]"
                ]
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/robot/adapter/socket/socket_adapter_test.py": {},
    "hl-flowing-clean-arch-master/highlevel/robot/adapter/socket/__init__.py": {
        "SocketAdapter.register_handler": {
            "name": "register_handler",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Callable[([bytes], Awaitable[None])]"
                ]
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/robot/controller/debug.py": {
        "DebugController.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "configuration": [
                    "Configuration"
                ],
                "simulation_probe": [
                    "SimulationProbe"
                ],
                "event_loop": [
                    "asyncio.AbstractEventLoop"
                ]
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/robot/controller/match_action.py": {
        "MatchActionController.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/robot/controller/strategy.py": {
        "StrategyController.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "motion_controller": [
                    "MotionController"
                ]
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/robot/controller/symmetry.py": {
        "SymmetryController.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "configuration": [
                    "Configuration"
                ]
            }
        },
        "SymmetryController.symmetries_position": {
            "name": "symmetries_position",
            "location": 20,
            "return": [
                "Vector2"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "Vector2"
                ]
            }
        },
        "SymmetryController.symmetries_rotate": {
            "name": "symmetries_rotate",
            "location": 29,
            "return": [
                "Radian"
            ],
            "arguments": {
                "self": [],
                "angle": [
                    "Radian"
                ]
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/robot/controller/symmetry_test.py": {
        "get_symmetry_controller": {
            "name": "get_symmetry_controller",
            "location": 12,
            "return": [
                "SymmetryController"
            ],
            "arguments": {
                "color": [
                    "Color"
                ]
            }
        },
        "test_vector_sym1": {
            "name": "test_vector_sym1",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "test_vector_sym2": {
            "name": "test_vector_sym2",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_angle_sym1": {
            "name": "test_angle_sym1",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "test_angle_sym2": {
            "name": "test_angle_sym2",
            "location": 65,
            "return": [],
            "arguments": {}
        }
    },
    "hl-flowing-clean-arch-master/highlevel/robot/controller/__init__.py": {},
    "hl-flowing-clean-arch-master/highlevel/robot/controller/motion/localization.py": {
        "LocalizationController.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "symmetry_controller": [
                    "SymmetryController"
                ],
                "odometry_controller": [
                    "OdometryController"
                ],
                "configuration": [
                    "Configuration"
                ],
                "motion_gateway": [
                    "MotionGateway"
                ],
                "simulation_probe": [
                    "SimulationProbe"
                ]
            }
        },
        "LocalizationController.update_odometry_position": {
            "name": "update_odometry_position",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "left_tick": [
                    "int"
                ],
                "right_tick": [
                    "int"
                ]
            }
        },
        "LocalizationController.movement_done": {
            "name": "movement_done",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "bool"
                ]
            }
        },
        "LocalizationController.get_angle": {
            "name": "get_angle",
            "location": 130,
            "return": [
                "Radian"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalizationController.get_position": {
            "name": "get_position",
            "location": 136,
            "return": [
                "Vector2"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/robot/controller/motion/localization_test.py": {
        "localization_controller_setup": {
            "name": "localization_controller_setup",
            "location": 17,
            "return": [],
            "arguments": {
                "event_loop": [],
                "odometry_controller_mock": [],
                "symmetry_controller_mock": [],
                "configuration_test": [],
                "motion_gateway_mock": [],
                "simulation_probe_mock": []
            }
        },
        "TestLocalizationController.test_odometry_position": {
            "name": "test_odometry_position",
            "location": 37,
            "return": [],
            "arguments": {
                "localization_controller": [],
                "odometry_controller_mock": []
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/robot/controller/motion/motion.py": {
        "normalize_angle": {
            "name": "normalize_angle",
            "location": 41,
            "return": [
                "float"
            ],
            "arguments": {
                "angle": [
                    "float"
                ]
            }
        },
        "MotionController.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "localization_controller": [
                    "LocalizationController"
                ],
                "symmetry_controller": [
                    "SymmetryController"
                ]
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/robot/controller/motion/motion_test.py": {
        "motion_controller_setup": {
            "name": "motion_controller_setup",
            "location": 14,
            "return": [],
            "arguments": {
                "localization_controller_mock": [],
                "symmetry_controller_mock": []
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/robot/controller/motion/odometry.py": {
        "OdometryController.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "configuration": [
                    "Configuration"
                ]
            }
        },
        "OdometryController.odometry": {
            "name": "odometry",
            "location": 23,
            "return": [
                "Tuple[(Vector2, Radian)]"
            ],
            "arguments": {
                "self": [],
                "left_tick": [
                    "int"
                ],
                "right_tick": [
                    "int"
                ],
                "pos": [
                    "Vector2"
                ],
                "angle": [
                    "Radian"
                ]
            }
        },
        "OdometryController._odometry": {
            "name": "_odometry",
            "location": 34,
            "return": [
                "Tuple[(Vector2, Radian)]"
            ],
            "arguments": {
                "self": [],
                "left_tick": [
                    "int"
                ],
                "right_tick": [
                    "int"
                ],
                "pos": [
                    "Vector2"
                ],
                "angle": [
                    "Radian"
                ]
            }
        },
        "OdometryController._tick_to_millimeter": {
            "name": "_tick_to_millimeter",
            "location": 78,
            "return": [
                "Millimeter"
            ],
            "arguments": {
                "self": [],
                "tick": [
                    "int"
                ]
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/robot/controller/motion/odometry_test.py": {
        "configuration_stub": {
            "name": "configuration_stub",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "odometry_controller": {
            "name": "odometry_controller",
            "location": 37,
            "return": [],
            "arguments": {
                "configuration": []
            }
        },
        "TestOdometry.test_did_not_move": {
            "name": "test_did_not_move",
            "location": 56,
            "return": [],
            "arguments": {
                "controller": []
            }
        },
        "TestOdometry.test_move_straight": {
            "name": "test_move_straight",
            "location": 65,
            "return": [],
            "arguments": {
                "controller": []
            }
        },
        "TestOdometry.test_rotate_without_moving": {
            "name": "test_rotate_without_moving",
            "location": 83,
            "return": [],
            "arguments": {
                "controller": []
            }
        },
        "TestOdometry.test_rotate_and_move_left": {
            "name": "test_rotate_and_move_left",
            "location": 107,
            "return": [],
            "arguments": {
                "controller": []
            }
        },
        "TestOdometry.test_rotate_and_move_right": {
            "name": "test_rotate_and_move_right",
            "location": 117,
            "return": [],
            "arguments": {
                "controller": []
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/robot/controller/motion/__init__.py": {},
    "hl-flowing-clean-arch-master/highlevel/robot/controller/sensor/rplidar.py": {
        "LidarController.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "simulation_probe": [
                    "SimulationProbe"
                ]
            }
        },
        "LidarController.set_detection": {
            "name": "set_detection",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seen_polar": [
                    "Tuple[(Tuple[(Radian, Millimeter)], ...)]"
                ]
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/robot/controller/sensor/__init__.py": {},
    "hl-flowing-clean-arch-master/highlevel/robot/entity/color.py": {},
    "hl-flowing-clean-arch-master/highlevel/robot/entity/configuration.py": {},
    "hl-flowing-clean-arch-master/highlevel/robot/entity/type.py": {},
    "hl-flowing-clean-arch-master/highlevel/robot/entity/__init__.py": {},
    "hl-flowing-clean-arch-master/highlevel/robot/gateway/__init__.py": {},
    "hl-flowing-clean-arch-master/highlevel/robot/gateway/motion/motion.py": {
        "MotionGateway.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "motor_board_adapter": [
                    "SocketAdapter"
                ]
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/robot/gateway/motion/motion_test.py": {},
    "hl-flowing-clean-arch-master/highlevel/robot/gateway/motion/__init__.py": {},
    "hl-flowing-clean-arch-master/highlevel/robot/handler/protobuf.py": {
        "ProtobufHandler.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "match_action_controller": [
                    "MatchActionController"
                ],
                "localization_controller": [
                    "LocalizationController"
                ]
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/robot/handler/protobuf_test.py": {
        "protobuf_handler_setup": {
            "name": "protobuf_handler_setup",
            "location": 13,
            "return": [],
            "arguments": {
                "match_action_controller_mock": [],
                "localization_controller_mock": []
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/robot/handler/__init__.py": {},
    "hl-flowing-clean-arch-master/highlevel/simulation/__init__.py": {},
    "hl-flowing-clean-arch-master/highlevel/simulation/client/http.py": {
        "HTTPClient.post_file": {
            "name": "post_file",
            "location": 13,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "data": [
                    "str"
                ]
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/simulation/client/web_browser.py": {
        "WebBrowserClient.open": {
            "name": "open",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/simulation/client/__init__.py": {},
    "hl-flowing-clean-arch-master/highlevel/simulation/controller/event_queue.py": {
        "EventQueue.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventQueue.push": {
            "name": "push",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_order": [
                    "EventOrder"
                ],
                "tick_offset": [
                    "int"
                ]
            }
        },
        "EventQueue.pop": {
            "name": "pop",
            "location": 30,
            "return": [
                "Iterable[EventOrder]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/simulation/controller/event_queue_test.py": {
        "test_queue_happy_path": {
            "name": "test_queue_happy_path",
            "location": 8,
            "return": [],
            "arguments": {}
        }
    },
    "hl-flowing-clean-arch-master/highlevel/simulation/controller/probe.py": {
        "SimulationProbe.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimulationProbe.attach": {
            "name": "attach",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "func": [
                    "Callable[([], Any)]"
                ]
            }
        },
        "SimulationProbe.probe": {
            "name": "probe",
            "location": 27,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/simulation/controller/replay_saver.py": {
        "ReplaySaver.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "configuration": [
                    "Configuration"
                ],
                "simulation_configuration": [
                    "SimulationConfiguration"
                ],
                "http_client": [
                    "HTTPClient"
                ],
                "web_browser_client": [
                    "WebBrowserClient"
                ]
            }
        },
        "ReplaySaver.on_tick": {
            "name": "on_tick",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "dict"
                ]
            }
        },
        "ReplaySaver.save_replay": {
            "name": "save_replay",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/simulation/controller/replay_saver_test.py": {
        "test_happy_path": {
            "name": "test_happy_path",
            "location": 13,
            "return": [],
            "arguments": {
                "configuration_test": []
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/simulation/controller/runner.py": {
        "SimulationRunner.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "event_queue": [
                    "EventQueue"
                ],
                "simulation_gateway": [
                    "SimulationGateway"
                ],
                "replay_saver": [
                    "ReplaySaver"
                ],
                "simulation_configuration": [
                    "SimulationConfiguration"
                ],
                "simulation_state": [
                    "SimulationState"
                ],
                "simulation_probe": [
                    "SimulationProbe"
                ]
            }
        },
        "SimulationRunner.stop": {
            "name": "stop",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimulationRunner._notify_subscribers": {
            "name": "_notify_subscribers",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/simulation/controller/runner_test.py": {
        "event_queue_setup": {
            "name": "event_queue_setup",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "simulation_runner_factory": {
            "name": "simulation_runner_factory",
            "location": 24,
            "return": [],
            "arguments": {
                "event_queue": [],
                "simulation_gateway_mock": [],
                "simulation_configuration_test": [],
                "replay_saver_mock": [],
                "simulation_state_mock": [],
                "simulation_probe_mock": []
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/simulation/controller/__init__.py": {},
    "hl-flowing-clean-arch-master/highlevel/simulation/entity/event.py": {},
    "hl-flowing-clean-arch-master/highlevel/simulation/entity/replay.py": {},
    "hl-flowing-clean-arch-master/highlevel/simulation/entity/simulation_configuration.py": {},
    "hl-flowing-clean-arch-master/highlevel/simulation/entity/simulation_state.py": {
        "Cup.clone": {
            "name": "clone",
            "location": 33,
            "return": [
                "Cup"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimulationState.clone": {
            "name": "clone",
            "location": 52,
            "return": [
                "SimulationState"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/simulation/entity/__init__.py": {},
    "hl-flowing-clean-arch-master/highlevel/simulation/gateway/simulation.py": {
        "SimulationGateway.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "simulation_configuration": [
                    "SimulationConfiguration"
                ],
                "motor_board_adapter": [
                    "SocketAdapter"
                ],
                "lidar_adapter": [
                    "SimulatedLIDARAdapter"
                ]
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/simulation/gateway/simulation_test.py": {},
    "hl-flowing-clean-arch-master/highlevel/simulation/gateway/__init__.py": {},
    "hl-flowing-clean-arch-master/highlevel/simulation/handler/simulation.py": {
        "_spread_delta_on_ticks": {
            "name": "_spread_delta_on_ticks",
            "location": 18,
            "return": [
                "Iterator[Tuple[(int, int)]]"
            ],
            "arguments": {
                "delta": [
                    "int"
                ],
                "ticks": [
                    "int"
                ]
            }
        },
        "SimulationHandler.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "configuration": [
                    "Configuration"
                ],
                "event_queue": [
                    "EventQueue"
                ],
                "simulation_state": [
                    "SimulationState"
                ],
                "simulation_configuration": [
                    "SimulationConfiguration"
                ]
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/simulation/handler/simulation_test.py": {
        "simulation_handler_setup": {
            "name": "simulation_handler_setup",
            "location": 12,
            "return": [],
            "arguments": {
                "configuration_test": [],
                "event_queue_mock": [],
                "simulation_state_mock": [],
                "simulation_configuration_test": []
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/simulation/handler/__init__.py": {},
    "hl-flowing-clean-arch-master/highlevel/util/dependency_container.py": {
        "DependencyContainer.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyContainer.provide": {
            "name": "provide",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "cls": [
                    "Any"
                ]
            }
        },
        "DependencyContainer.get": {
            "name": "get",
            "location": 59,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/util/dependency_container_test.py": {
        "test_injector_happy_path": {
            "name": "test_injector_happy_path",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "test_injector_double_provide": {
            "name": "test_injector_double_provide",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "test_injector_abstract_class": {
            "name": "test_injector_abstract_class",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "test_injector_not_provided": {
            "name": "test_injector_not_provided",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "test_injector_missing_dependencies": {
            "name": "test_injector_missing_dependencies",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "test_injector_manual_argument_in_constructor": {
            "name": "test_injector_manual_argument_in_constructor",
            "location": 102,
            "return": [],
            "arguments": {}
        },
        "DummyA.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DummyB.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "my_dep": []
            }
        },
        "DummyC.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "my_other_dep": [],
                "my_array": []
            }
        },
        "AbstractClass.do_something": {
            "name": "do_something",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/util/json_encoder.py": {
        "RobotJSONEncoder.default": {
            "name": "default",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "o": []
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/util/json_encoder_test.py": {
        "test_json_encoder_vector2": {
            "name": "test_json_encoder_vector2",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_json_encoder_not_serializable": {
            "name": "test_json_encoder_not_serializable",
            "location": 23,
            "return": [],
            "arguments": {}
        }
    },
    "hl-flowing-clean-arch-master/highlevel/util/tcp.py": {},
    "hl-flowing-clean-arch-master/highlevel/util/__init__.py": {},
    "hl-flowing-clean-arch-master/highlevel/util/geometry/direction.py": {
        "forward": {
            "name": "forward",
            "location": 11,
            "return": [
                "Vector2"
            ],
            "arguments": {
                "angle": [
                    "Radian"
                ]
            }
        },
        "backward": {
            "name": "backward",
            "location": 21,
            "return": [
                "Vector2"
            ],
            "arguments": {
                "angle": [
                    "Radian"
                ]
            }
        },
        "right": {
            "name": "right",
            "location": 28,
            "return": [
                "Vector2"
            ],
            "arguments": {
                "angle": [
                    "Radian"
                ]
            }
        },
        "left": {
            "name": "left",
            "location": 38,
            "return": [
                "Vector2"
            ],
            "arguments": {
                "angle": [
                    "Radian"
                ]
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/util/geometry/direction_test.py": {
        "test_forward": {
            "name": "test_forward",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_left": {
            "name": "test_left",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_backward": {
            "name": "test_backward",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_right": {
            "name": "test_right",
            "location": 33,
            "return": [],
            "arguments": {}
        }
    },
    "hl-flowing-clean-arch-master/highlevel/util/geometry/intersection.py": {
        "ray_segment_intersection": {
            "name": "ray_segment_intersection",
            "location": 14,
            "return": [
                "Tuple[(Optional[Vector2], Optional[float])]"
            ],
            "arguments": {
                "ray": [
                    "Ray"
                ],
                "segment": [
                    "Segment"
                ]
            }
        },
        "ray_segments_intersection": {
            "name": "ray_segments_intersection",
            "location": 71,
            "return": [
                "Tuple[(Optional[Vector2], Optional[float])]"
            ],
            "arguments": {
                "ray": [
                    "Ray"
                ],
                "segments": [
                    "Iterable[Segment]"
                ]
            }
        },
        "segment_segment_intersection": {
            "name": "segment_segment_intersection",
            "location": 94,
            "return": [
                "Optional[Vector2]"
            ],
            "arguments": {
                "sgmt1": [
                    "Segment"
                ],
                "sgmt2": [
                    "Segment"
                ]
            }
        },
        "does_segment_intersect": {
            "name": "does_segment_intersect",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "sgmt1": [
                    "Segment"
                ],
                "segments": [
                    "Iterable[Segment]"
                ]
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/util/geometry/intersection_test.py": {
        "test_ray_segment_intersection_colinear": {
            "name": "test_ray_segment_intersection_colinear",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_ray_segment_intersection_happy_path": {
            "name": "test_ray_segment_intersection_happy_path",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "test_ray_segment_intersection_ray_not_in_the_right_direction": {
            "name": "test_ray_segment_intersection_ray_not_in_the_right_direction",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "test_ray_segment_intersection_out_of_bounds_left": {
            "name": "test_ray_segment_intersection_out_of_bounds_left",
            "location": 84,
            "return": [],
            "arguments": {}
        },
        "test_ray_segment_intersection_out_of_bounds_right": {
            "name": "test_ray_segment_intersection_out_of_bounds_right",
            "location": 109,
            "return": [],
            "arguments": {}
        },
        "test_ray_segment_intersection_0_length_segment": {
            "name": "test_ray_segment_intersection_0_length_segment",
            "location": 134,
            "return": [],
            "arguments": {}
        },
        "test_ray_segments_intersection_intersect_closest": {
            "name": "test_ray_segments_intersection_intersect_closest",
            "location": 159,
            "return": [],
            "arguments": {}
        },
        "test_ray_segments_intersection_does_not_intersect": {
            "name": "test_ray_segments_intersection_does_not_intersect",
            "location": 180,
            "return": [],
            "arguments": {}
        },
        "test_segment_segment_intersection_intersect": {
            "name": "test_segment_segment_intersection_intersect",
            "location": 199,
            "return": [],
            "arguments": {}
        },
        "test_segment_segment_intersection_not_intersect": {
            "name": "test_segment_segment_intersection_not_intersect",
            "location": 220,
            "return": [],
            "arguments": {}
        },
        "test_segment_segment_intersection_not_intersect_colinear": {
            "name": "test_segment_segment_intersection_not_intersect_colinear",
            "location": 239,
            "return": [],
            "arguments": {}
        },
        "test_does_segment_intersect_happy_path": {
            "name": "test_does_segment_intersect_happy_path",
            "location": 256,
            "return": [],
            "arguments": {}
        },
        "test_does_segment_intersect": {
            "name": "test_does_segment_intersect",
            "location": 283,
            "return": [],
            "arguments": {}
        }
    },
    "hl-flowing-clean-arch-master/highlevel/util/geometry/ray.py": {},
    "hl-flowing-clean-arch-master/highlevel/util/geometry/segment.py": {},
    "hl-flowing-clean-arch-master/highlevel/util/geometry/vector.py": {
        "_to_array": {
            "name": "_to_array",
            "location": 91,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "vec": [
                    "Vector2"
                ]
            }
        },
        "_from_array": {
            "name": "_from_array",
            "location": 95,
            "return": [
                "Vector2"
            ],
            "arguments": {
                "arr": [
                    "numpy.ndarray"
                ]
            }
        },
        "Vector2.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "vec_x": [
                    "float"
                ],
                "vec_y": [
                    "float"
                ]
            }
        },
        "Vector2.x": {
            "name": "x",
            "location": 20,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vector2.y": {
            "name": "y",
            "location": 27,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vector2.__hash__": {
            "name": "__hash__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vector2.__eq__": {
            "name": "__eq__",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Vector2.__add__": {
            "name": "__add__",
            "location": 45,
            "return": [
                "Vector2"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Vector2"
                ]
            }
        },
        "Vector2.__sub__": {
            "name": "__sub__",
            "location": 48,
            "return": [
                "Vector2"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Vector2"
                ]
            }
        },
        "Vector2.__str__": {
            "name": "__str__",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vector2.__repr__": {
            "name": "__repr__",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vector2.__mul__": {
            "name": "__mul__",
            "location": 57,
            "return": [
                "Vector2"
            ],
            "arguments": {
                "self": [],
                "scalar": [
                    "float"
                ]
            }
        },
        "Vector2.__truediv__": {
            "name": "__truediv__",
            "location": 60,
            "return": [
                "Vector2"
            ],
            "arguments": {
                "self": [],
                "scalar": [
                    "float"
                ]
            }
        },
        "Vector2.__neg__": {
            "name": "__neg__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vector2.dot": {
            "name": "dot",
            "location": 66,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "vec": [
                    "Vector2"
                ]
            }
        },
        "Vector2.norm2": {
            "name": "norm2",
            "location": 72,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vector2.euclidean_norm": {
            "name": "euclidean_norm",
            "location": 78,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vector2.to_angle": {
            "name": "to_angle",
            "location": 84,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hl-flowing-clean-arch-master/highlevel/util/geometry/vector_test.py": {
        "test_properties": {
            "name": "test_properties",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_string": {
            "name": "test_string",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_addition": {
            "name": "test_addition",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "test_subtraction": {
            "name": "test_subtraction",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "test_norm": {
            "name": "test_norm",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "test_division": {
            "name": "test_division",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "test_multiplication": {
            "name": "test_multiplication",
            "location": 73,
            "return": [],
            "arguments": {}
        },
        "test_negation": {
            "name": "test_negation",
            "location": 82,
            "return": [],
            "arguments": {}
        },
        "test_hash_same_object": {
            "name": "test_hash_same_object",
            "location": 91,
            "return": [],
            "arguments": {}
        },
        "test_hash_different_objects": {
            "name": "test_hash_different_objects",
            "location": 98,
            "return": [],
            "arguments": {}
        },
        "test_equal_different_classes": {
            "name": "test_equal_different_classes",
            "location": 105,
            "return": [],
            "arguments": {}
        },
        "test_dot": {
            "name": "test_dot",
            "location": 112,
            "return": [],
            "arguments": {}
        },
        "test_to_angle": {
            "name": "test_to_angle",
            "location": 119,
            "return": [],
            "arguments": {}
        }
    },
    "hl-flowing-clean-arch-master/highlevel/util/geometry/__init__.py": {},
    "hl-flowing-clean-arch-master/proto/gen/python/outech_pb2.py": {}
}
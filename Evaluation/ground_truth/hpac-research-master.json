{
    "hpac-research-master/knuth-bendix/pavement.py": {
        "print_passed": {
            "name": "print_passed",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "print_failed": {
            "name": "print_failed",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "_doc_make": {
            "name": "_doc_make",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "sdist": {
            "name": "sdist",
            "location": 91,
            "return": [],
            "arguments": {}
        },
        "test": {
            "name": "test",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "typecheck": {
            "name": "typecheck",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "lint": {
            "name": "lint",
            "location": 109,
            "return": [],
            "arguments": {}
        },
        "test_all": {
            "name": "test_all",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 130,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "commit": {
            "name": "commit",
            "location": 143,
            "return": [],
            "arguments": {}
        },
        "coverage": {
            "name": "coverage",
            "location": 152,
            "return": [],
            "arguments": {}
        },
        "doc_watch": {
            "name": "doc_watch",
            "location": 169,
            "return": [],
            "arguments": {}
        },
        "doc_open": {
            "name": "doc_open",
            "location": 222,
            "return": [],
            "arguments": {}
        },
        "get_tasks": {
            "name": "get_tasks",
            "location": 241,
            "return": [],
            "arguments": {}
        },
        "doc_html": {
            "name": "doc_html",
            "location": 249,
            "return": [],
            "arguments": {}
        },
        "doc_clean": {
            "name": "doc_clean",
            "location": 258,
            "return": [],
            "arguments": {}
        },
        "cwd.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "newcwd": []
            }
        },
        "cwd.__enter__": {
            "name": "__enter__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "cwd.__exit__": {
            "name": "__exit__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "type_": [],
                "value": [],
                "traceback": []
            }
        },
        "doc_watch.RebuildDocsEventHandler.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "base_paths": []
            }
        },
        "doc_watch.RebuildDocsEventHandler.dispatch": {
            "name": "dispatch",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "doc_watch.RebuildDocsEventHandler.on_modified": {
            "name": "on_modified",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        }
    },
    "hpac-research-master/knuth-bendix/setup.py": {
        "get_project_files": {
            "name": "get_project_files",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "is_git_project": {
            "name": "is_git_project",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "has_git": {
            "name": "has_git",
            "location": 73,
            "return": [],
            "arguments": {}
        },
        "get_git_project_files": {
            "name": "get_git_project_files",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "git_ls_files": {
            "name": "git_ls_files",
            "location": 96,
            "return": [],
            "arguments": {}
        },
        "print_success_message": {
            "name": "print_success_message",
            "location": 108,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "print_failure_message": {
            "name": "print_failure_message",
            "location": 121,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "read": {
            "name": "read",
            "location": 135,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "_lint": {
            "name": "_lint",
            "location": 147,
            "return": [],
            "arguments": {}
        },
        "_test": {
            "name": "_test",
            "location": 164,
            "return": [],
            "arguments": {}
        },
        "_typecheck": {
            "name": "_typecheck",
            "location": 177,
            "return": [],
            "arguments": {}
        },
        "_test_all": {
            "name": "_test_all",
            "location": 194,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 273,
            "return": [],
            "arguments": {}
        },
        "TestAllCommand.finalize_options": {
            "name": "finalize_options",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAllCommand.run_tests": {
            "name": "run_tests",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "hpac-research-master/knuth-bendix/docs/source/conf.py": {},
    "hpac-research-master/knuth-bendix/knuth_bendix/knuth_bendix_ordering.py": {
        "KnuthBendixOrdering.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "weights": [
                    "Mapping[(Operator, int)]"
                ],
                "var_weight": [
                    "int"
                ],
                "op_gt": [
                    "PartialOrder[Operator]"
                ]
            }
        },
        "KnuthBendixOrdering.weight": {
            "name": "weight",
            "location": 72,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "term": [
                    "Expression"
                ]
            }
        },
        "KnuthBendixOrdering.__call__": {
            "name": "__call__",
            "location": 82,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "Expression"
                ],
                "t": [
                    "Expression"
                ]
            }
        }
    },
    "hpac-research-master/knuth-bendix/knuth_bendix/lex_path_ordering.py": {
        "LexPathOrdering.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "op_gt": [
                    "PartialOrder[Operator]"
                ]
            }
        },
        "LexPathOrdering._lex_gt": {
            "name": "_lex_gt",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "s_ops": [
                    "List[Expression]"
                ],
                "t_ops": [
                    "List[Expression]"
                ]
            }
        },
        "LexPathOrdering.__call__": {
            "name": "__call__",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "Expression"
                ],
                "t": [
                    "Expression"
                ]
            }
        }
    },
    "hpac-research-master/knuth-bendix/knuth_bendix/main.py": {
        "main": {
            "name": "main",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": [
                    "List[str]"
                ]
            }
        },
        "entry_point": {
            "name": "entry_point",
            "location": 90,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    },
    "hpac-research-master/knuth-bendix/knuth_bendix/metadata.py": {},
    "hpac-research-master/knuth-bendix/knuth_bendix/rewrite_rule.py": {
        "RewriteRule.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "left": [
                    "Expression"
                ],
                "right": [
                    "Expression"
                ]
            }
        },
        "RewriteRule.apply_match": {
            "name": "apply_match",
            "location": 51,
            "return": [
                "Expression"
            ],
            "arguments": {
                "self": [],
                "subst": [
                    "matchpy.Substitution"
                ]
            }
        },
        "RewriteRule.__repr__": {
            "name": "__repr__",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RewriteRule.__str__": {
            "name": "__str__",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RewriteRuleList.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RewriteRuleList._rebuild": {
            "name": "_rebuild",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RewriteRuleList.append": {
            "name": "append",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "RewriteRule"
                ]
            }
        },
        "RewriteRuleList.extend": {
            "name": "extend",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rules": [
                    "List[RewriteRule]"
                ]
            }
        },
        "RewriteRuleList.replace": {
            "name": "replace",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int"
                ],
                "rule": [
                    "RewriteRule"
                ]
            }
        },
        "RewriteRuleList.delete": {
            "name": "delete",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int"
                ]
            }
        },
        "RewriteRuleList.__iter__": {
            "name": "__iter__",
            "location": 104,
            "return": [
                "Iterator[RewriteRule]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RewriteRuleList.__len__": {
            "name": "__len__",
            "location": 107,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RewriteRuleList.__getitem__": {
            "name": "__getitem__",
            "location": 110,
            "return": [
                "RewriteRule"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int"
                ]
            }
        },
        "RewriteRuleList.apply_all": {
            "name": "apply_all",
            "location": 113,
            "return": [
                "Expression"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "Expression"
                ],
                "max_count": [
                    "Optional[int]"
                ]
            }
        },
        "RewriteRuleList.apply_each_once": {
            "name": "apply_each_once",
            "location": 140,
            "return": [
                "Iterable[Tuple[(RewriteRule, Expression)]]"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "Expression"
                ],
                "only": [
                    "Optional[Container[RewriteRule]]"
                ]
            }
        }
    },
    "hpac-research-master/knuth-bendix/knuth_bendix/rewrite_system.py": {
        "subexpression_count": {
            "name": "subexpression_count",
            "location": 62,
            "return": [
                "int"
            ],
            "arguments": {
                "expr": [
                    "Expression"
                ]
            }
        },
        "Heap.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Callable[([_T], int)]"
                ]
            }
        },
        "Heap.push": {
            "name": "push",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "_T@@"
                ]
            }
        },
        "Heap.popmin": {
            "name": "popmin",
            "location": 53,
            "return": [
                "_T@@"
            ],
            "arguments": {
                "self": []
            }
        },
        "Heap.__bool__": {
            "name": "__bool__",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RewriteSystem.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rules": [
                    "List[RewriteRule]"
                ]
            }
        },
        "RewriteSystem.normalize": {
            "name": "normalize",
            "location": 90,
            "return": [
                "Expression"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "Expression"
                ]
            }
        },
        "RewriteSystem.orient": {
            "name": "orient",
            "location": 98,
            "return": [
                "Tuple[(Expression, Expression)]"
            ],
            "arguments": {
                "s": [
                    "Expression"
                ],
                "t": [
                    "Expression"
                ],
                "order": [
                    "GtOrder[Expression]"
                ]
            }
        },
        "RewriteSystem.from_equations": {
            "name": "from_equations",
            "location": 116,
            "return": [
                "'RewriteSystem'"
            ],
            "arguments": {
                "cls": [],
                "order": [
                    "GtOrder[Expression]"
                ],
                "equations": [
                    "Iterable[Tuple[(Expression, Expression)]]"
                ]
            }
        },
        "RewriteSystem.extend_rule": {
            "name": "extend_rule",
            "location": 128,
            "return": [
                "Optional[RewriteRule]"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "RewriteRule"
                ]
            }
        },
        "RewriteSystem.append_rule": {
            "name": "append_rule",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "RewriteRule"
                ]
            }
        },
        "RewriteSystem.replace_rule": {
            "name": "replace_rule",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int"
                ],
                "new_rule": [
                    "RewriteRule"
                ]
            }
        },
        "RewriteSystem.delete_rule": {
            "name": "delete_rule",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int"
                ]
            }
        },
        "RewriteSystem.remove_extension": {
            "name": "remove_extension",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "RewriteSystem.trim_redundant_rules": {
            "name": "trim_redundant_rules",
            "location": 208,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RewriteSystem._canonicalize_system_step": {
            "name": "_canonicalize_system_step",
            "location": 245,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "GtOrder[Expression]"
                ]
            }
        },
        "RewriteSystem._add_critical_pairs_with": {
            "name": "_add_critical_pairs_with",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "RewriteRule"
                ]
            }
        },
        "RewriteSystem.complete": {
            "name": "complete",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "GtOrder[Expression]"
                ]
            }
        }
    },
    "hpac-research-master/knuth-bendix/knuth_bendix/unification.py": {
        "unique_variables_map": {
            "name": "unique_variables_map",
            "location": 34,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "expr": [
                    "Expression"
                ],
                "to_avoid": [
                    "Expression"
                ]
            }
        },
        "uniqify_variables": {
            "name": "uniqify_variables",
            "location": 51,
            "return": [
                "Expression"
            ],
            "arguments": {
                "expr": [
                    "Expression"
                ],
                "to_avoid": [
                    "Expression"
                ]
            }
        },
        "maybe_add_substitution": {
            "name": "maybe_add_substitution",
            "location": 62,
            "return": [
                "Optional[Substitution]"
            ],
            "arguments": {
                "sub": [
                    "Substitution"
                ],
                "var": [
                    "str"
                ],
                "replacement": [
                    "Expression"
                ]
            }
        },
        "to_bitfield": {
            "name": "to_bitfield",
            "location": 88,
            "return": [
                "List[bool]"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "n_bits": [
                    "int"
                ]
            }
        },
        "from_bitfield": {
            "name": "from_bitfield",
            "location": 96,
            "return": [
                "int"
            ],
            "arguments": {
                "lst": [
                    "Iterable[bool]"
                ]
            }
        },
        "all_boolean_matrices": {
            "name": "all_boolean_matrices",
            "location": 106,
            "return": [],
            "arguments": {
                "m": [],
                "n": []
            }
        },
        "to_ac_operands": {
            "name": "to_ac_operands",
            "location": 125,
            "return": [],
            "arguments": {
                "ops": []
            }
        },
        "some_pairs_sorted": {
            "name": "some_pairs_sorted",
            "location": 142,
            "return": [
                "bool"
            ],
            "arguments": {
                "lst": [
                    "Sequence[int]"
                ],
                "idxs": [
                    "Sequence[int]"
                ]
            }
        },
        "ints_walking_range": {
            "name": "ints_walking_range",
            "location": 152,
            "return": [
                "Iterator[Tuple[(int, ...)]]"
            ],
            "arguments": {
                "min": [
                    "int"
                ],
                "max": [
                    "int"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "safe_index": {
            "name": "safe_index",
            "location": 161,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "lst": [
                    "List[_T]"
                ],
                "item": [
                    "_T@@"
                ]
            }
        },
        "compare_equal_variable_vectors": {
            "name": "compare_equal_variable_vectors",
            "location": 169,
            "return": [],
            "arguments": {
                "idx": [],
                "my_vec": [],
                "their_vec": [],
                "idxs_from_constants": [],
                "idxs_from_terms": []
            }
        },
        "ac_operand_lists": {
            "name": "ac_operand_lists",
            "location": 202,
            "return": [
                "List[List[Tuple[(Expression, Expression)]]]"
            ],
            "arguments": {
                "t1": [
                    "Operation"
                ],
                "t2": [
                    "Operation"
                ]
            }
        },
        "unify_expressions": {
            "name": "unify_expressions",
            "location": 369,
            "return": [
                "List[Substitution]"
            ],
            "arguments": {
                "left": [
                    "Expression"
                ],
                "right": [
                    "Expression"
                ]
            }
        },
        "find_overlaps": {
            "name": "find_overlaps",
            "location": 456,
            "return": [
                "Iterator[Expression]"
            ],
            "arguments": {
                "term": [
                    "Expression"
                ],
                "within": [
                    "Expression"
                ]
            }
        },
        "equal_mod_renaming": {
            "name": "equal_mod_renaming",
            "location": 481,
            "return": [
                "bool"
            ],
            "arguments": {
                "t1": [
                    "Expression"
                ],
                "t2": [
                    "Expression"
                ]
            }
        },
        "proper_contains": {
            "name": "proper_contains",
            "location": 493,
            "return": [
                "bool"
            ],
            "arguments": {
                "term": [
                    "Expression"
                ],
                "within": [
                    "Expression"
                ]
            }
        }
    },
    "hpac-research-master/knuth-bendix/knuth_bendix/utils.py": {
        "transitive_closure": {
            "name": "transitive_closure",
            "location": 11,
            "return": [
                "PartialOrder[_T]"
            ],
            "arguments": {
                "order": [
                    "PartialOrder[_T]"
                ]
            }
        },
        "substitute": {
            "name": "substitute",
            "location": 25,
            "return": [
                "Expression"
            ],
            "arguments": {
                "term": [
                    "Expression"
                ],
                "substitution": [
                    "Substitution"
                ]
            }
        },
        "to_operator": {
            "name": "to_operator",
            "location": 38,
            "return": [
                "Optional[Operator]"
            ],
            "arguments": {
                "term": [
                    "Expression"
                ]
            }
        },
        "operands": {
            "name": "operands",
            "location": 49,
            "return": [
                "Optional[List[Expression]]"
            ],
            "arguments": {
                "term": [
                    "Expression"
                ]
            }
        }
    },
    "hpac-research-master/knuth-bendix/knuth_bendix/__init__.py": {},
    "hpac-research-master/knuth-bendix/tests/test_knuth_bendix_ordering.py": {
        "test_knuth_bendix_order": {
            "name": "test_knuth_bendix_order",
            "location": 41,
            "return": [],
            "arguments": {
                "left": [],
                "right": []
            }
        }
    },
    "hpac-research-master/knuth-bendix/tests/test_lex_path_ordering.py": {
        "test_knuth_bendix_order": {
            "name": "test_knuth_bendix_order",
            "location": 40,
            "return": [],
            "arguments": {
                "left": [],
                "right": []
            }
        }
    },
    "hpac-research-master/knuth-bendix/tests/test_main.py": {
        "TestMain.test_help": {
            "name": "test_help",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "helparg": [],
                "capsys": []
            }
        },
        "TestMain.test_version": {
            "name": "test_version",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "versionarg": [],
                "capsys": []
            }
        }
    },
    "hpac-research-master/knuth-bendix/tests/test_rewrite_rule.py": {
        "inv_pattern": {
            "name": "inv_pattern",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "test_subst": {
            "name": "test_subst",
            "location": 38,
            "return": [],
            "arguments": {
                "inv_pattern": []
            }
        },
        "test_print": {
            "name": "test_print",
            "location": 45,
            "return": [],
            "arguments": {
                "inv_pattern": [],
                "capsys": []
            }
        },
        "test_apply_once": {
            "name": "test_apply_once",
            "location": 50,
            "return": [],
            "arguments": {
                "inv_pattern": []
            }
        },
        "test_apply_all": {
            "name": "test_apply_all",
            "location": 62,
            "return": [],
            "arguments": {
                "inv_pattern": []
            }
        },
        "test_apply_all_many_rules": {
            "name": "test_apply_all_many_rules",
            "location": 70,
            "return": [],
            "arguments": {
                "inv_pattern": []
            }
        },
        "test_new_variable_failure": {
            "name": "test_new_variable_failure",
            "location": 99,
            "return": [],
            "arguments": {}
        }
    },
    "hpac-research-master/knuth-bendix/tests/test_rewrite_system.py": {
        "test_group_theory_completion": {
            "name": "test_group_theory_completion",
            "location": 37,
            "return": [],
            "arguments": {
                "order": []
            }
        }
    },
    "hpac-research-master/knuth-bendix/tests/test_unification.py": {
        "test_uniqify_variables": {
            "name": "test_uniqify_variables",
            "location": 55,
            "return": [],
            "arguments": {
                "left": [],
                "right": [],
                "is_changed": []
            }
        },
        "test_maybe_add_substitution": {
            "name": "test_maybe_add_substitution",
            "location": 70,
            "return": [],
            "arguments": {
                "subs": [],
                "var": [],
                "rule": [],
                "expected": []
            }
        },
        "test_unify_expressions": {
            "name": "test_unify_expressions",
            "location": 98,
            "return": [],
            "arguments": {
                "left": [],
                "right": [],
                "expected": []
            }
        },
        "test_find_overlaps": {
            "name": "test_find_overlaps",
            "location": 111,
            "return": [],
            "arguments": {
                "term": [],
                "within": [],
                "expected": []
            }
        },
        "test_equal_mod_renaming": {
            "name": "test_equal_mod_renaming",
            "location": 128,
            "return": [],
            "arguments": {
                "t1": [],
                "t2": [],
                "expected": []
            }
        },
        "test_proper_contains": {
            "name": "test_proper_contains",
            "location": 143,
            "return": [],
            "arguments": {
                "term": [],
                "within": [],
                "expected": []
            }
        }
    }
}
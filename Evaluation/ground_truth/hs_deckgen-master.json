{
    "hs_deckgen-master/setup.py": {},
    "hs_deckgen-master/src/hearthstone/api.py": {
        "ReplayAPI.deck_from_url": {
            "name": "deck_from_url",
            "location": 19,
            "return": [
                "typing.Optional[deck.Deck]"
            ],
            "arguments": {
                "cls": [],
                "url": [
                    "str"
                ]
            }
        },
        "HearthpwnAPI.deck_from_url": {
            "name": "deck_from_url",
            "location": 39,
            "return": [
                "typing.Optional[deck.Deck]"
            ],
            "arguments": {
                "cls": [],
                "url": [
                    "str"
                ]
            }
        },
        "HearthstoneAPI._get_cards": {
            "name": "_get_cards",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "HearthstoneAPI.lazy_cards": {
            "name": "lazy_cards",
            "location": 80,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "HearthstoneAPI.card_from_id": {
            "name": "card_from_id",
            "location": 89,
            "return": [
                "typing.Optional[card.Card]"
            ],
            "arguments": {
                "cls": [],
                "card_id": [
                    "int"
                ]
            }
        },
        "HearthstoneAPI.all_cards": {
            "name": "all_cards",
            "location": 94,
            "return": [
                "typing.Set[card.Card]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "HearthstoneAPI.lazy_cards.decorated": {
            "name": "decorated",
            "location": 81,
            "return": [],
            "arguments": {}
        }
    },
    "hs_deckgen-master/src/hearthstone/card.py": {
        "Card.from_id": {
            "name": "from_id",
            "location": 15,
            "return": [
                "'Card'"
            ],
            "arguments": {
                "cls": [],
                "db_id": [
                    "int"
                ]
            }
        },
        "Card.from_json": {
            "name": "from_json",
            "location": 19,
            "return": [
                "'Card'"
            ],
            "arguments": {
                "cls": [],
                "json": [
                    "typing.Dict[(str, typing.Any)]"
                ]
            }
        },
        "Card.to_json": {
            "name": "to_json",
            "location": 27,
            "return": [
                "typing.Dict[(str, typing.Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hs_deckgen-master/src/hearthstone/deck.py": {
        "to_varint": {
            "name": "to_varint",
            "location": 49,
            "return": [
                "bytes"
            ],
            "arguments": {
                "i": [
                    "int"
                ]
            }
        },
        "Deck.from_cards": {
            "name": "from_cards",
            "location": 64,
            "return": [
                "'Deck'"
            ],
            "arguments": {
                "cls": [],
                "cards": [
                    "typing.List[card.Card]"
                ],
                "hs_class": [
                    "typing.Optional[hsdata.HSClass]"
                ]
            }
        },
        "Deck.from_deck_code": {
            "name": "from_deck_code",
            "location": 81,
            "return": [
                "'Deck'"
            ],
            "arguments": {
                "cls": [],
                "code": [
                    "str"
                ]
            }
        },
        "Deck.from_json": {
            "name": "from_json",
            "location": 86,
            "return": [
                "'Deck'"
            ],
            "arguments": {
                "json": [
                    "typing.Dict[(str, typing.Any)]"
                ]
            }
        },
        "Deck.load": {
            "name": "load",
            "location": 93,
            "return": [
                "'Deck'"
            ],
            "arguments": {
                "cls": [],
                "stream": [
                    "typing.IO[str]"
                ]
            }
        },
        "Deck.save": {
            "name": "save",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "typing.IO[str]"
                ],
                "mode": []
            }
        },
        "Deck.unique": {
            "name": "unique",
            "location": 103,
            "return": [
                "typing.Set[card.Card]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deck.doubles": {
            "name": "doubles",
            "location": 107,
            "return": [
                "typing.Set[card.Card]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deck.to_deck_code": {
            "name": "to_deck_code",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deck.__iter__": {
            "name": "__iter__",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "hs_deckgen-master/src/hearthstone/hsdata.py": {},
    "hs_deckgen-master/src/hearthstone/__init__.py": {},
    "hs_deckgen-master/src/hs_deckgen/cli.py": {
        "io_or_std": {
            "name": "io_or_std",
            "location": 15,
            "return": [
                "typing.IO"
            ],
            "arguments": {
                "path": [
                    "typing.Optional[str]"
                ],
                "mode": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "deck": {
            "name": "deck",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "str"
                ],
                "hsclass": [
                    "str"
                ],
                "partial": [
                    "str"
                ],
                "output": [
                    "str"
                ]
            }
        },
        "model": {
            "name": "model",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "outfile": [],
                "training": [],
                "train": []
            }
        }
    },
    "hs_deckgen-master/src/hs_deckgen/model.py": {
        "BijectiveMap.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tuples": [
                    "typing.Optional[typing.List[typing.Tuple[(L, R)]]]"
                ]
            }
        },
        "BijectiveMap.__setitem__": {
            "name": "__setitem__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "left": [
                    "L"
                ],
                "right": [
                    "R"
                ]
            }
        },
        "BijectiveMap.__len__": {
            "name": "__len__",
            "location": 31,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BijectiveMap.left": {
            "name": "left",
            "location": 35,
            "return": [
                "typing.Dict[(L, R)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BijectiveMap.right": {
            "name": "right",
            "location": 39,
            "return": [
                "typing.Dict[(R, L)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HSModel.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HSModel._deck_to_rows": {
            "name": "_deck_to_rows",
            "location": 62,
            "return": [
                "typing.List[int]"
            ],
            "arguments": {
                "self": [],
                "deck": [
                    "typing.List[card.Card]"
                ]
            }
        },
        "HSModel.train": {
            "name": "train",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "deck": [
                    "typing.List[card.Card]"
                ]
            }
        },
        "HSModel.generate_deck": {
            "name": "generate_deck",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "partial": [
                    "typing.List[card.Card]"
                ],
                "hs_class": [
                    "hsdata.HSClass"
                ],
                "deck_size": []
            }
        },
        "HSModel.from_decks": {
            "name": "from_decks",
            "location": 117,
            "return": [
                "'HSModel'"
            ],
            "arguments": {
                "cls": [],
                "decks": [
                    "typing.Iterable[deck.Deck]"
                ]
            }
        },
        "HSModel.load": {
            "name": "load",
            "location": 125,
            "return": [
                "'HSModel'"
            ],
            "arguments": {
                "cls": [],
                "stream": [
                    "typing.IO[bytes]"
                ]
            }
        },
        "HSModel.save": {
            "name": "save",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "typing.IO[bytes]"
                ]
            }
        }
    },
    "hs_deckgen-master/src/hs_deckgen/__init__.py": {},
    "hs_deckgen-master/src/trainer/cli.py": {
        "io_or_std": {
            "name": "io_or_std",
            "location": 12,
            "return": [
                "typing.IO"
            ],
            "arguments": {
                "path": [
                    "typing.Optional[str]"
                ],
                "mode": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "replay": {
            "name": "replay",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "outfile": [
                    "typing.Optional[str]"
                ],
                "input_cards": [
                    "typing.Optional[str]"
                ],
                "pages": [
                    "typing.Optional[int]"
                ]
            }
        }
    },
    "hs_deckgen-master/src/trainer/hearthpwn_trainer.py": {},
    "hs_deckgen-master/src/trainer/replay_trainer.py": {
        "ReplayTrainer._setup_browser": {
            "name": "_setup_browser",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ReplayTrainer.lazy_browser": {
            "name": "lazy_browser",
            "location": 23,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "ReplayTrainer.pull_decks": {
            "name": "pull_decks",
            "location": 32,
            "return": [
                "typing.Iterator[deck.Deck]"
            ],
            "arguments": {
                "cls": [],
                "start": [
                    "str"
                ],
                "max_page": [
                    "typing.Optional[int]"
                ]
            }
        },
        "ReplayTrainer.model_from_cards": {
            "name": "model_from_cards",
            "location": 54,
            "return": [
                "model.HSModel"
            ],
            "arguments": {
                "cls": [],
                "required": [
                    "typing.Iterable[card.Card]"
                ]
            }
        },
        "ReplayTrainer.new_model": {
            "name": "new_model",
            "location": 66,
            "return": [
                "model.HSModel"
            ],
            "arguments": {
                "cls": [],
                "max_page": [
                    "typing.Optional[int]"
                ]
            }
        },
        "ReplayTrainer.lazy_browser.decorated": {
            "name": "decorated",
            "location": 24,
            "return": [],
            "arguments": {}
        }
    },
    "hs_deckgen-master/tests/test_basic.py": {
        "test_nothing": {
            "name": "test_nothing",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "hs_deckgen-master/tests/test_cli.py": {
        "test_main": {
            "name": "test_main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "hs_deckgen-master/tests/test_hearthstone.py": {
        "test_deck": {
            "name": "test_deck",
            "location": 3,
            "return": [],
            "arguments": {}
        }
    },
    "hs_deckgen-master/tests/test_model.py": {
        "deck_one": {
            "name": "deck_one",
            "location": 83,
            "return": [
                "hearthstone.Deck"
            ],
            "arguments": {}
        },
        "deck_two": {
            "name": "deck_two",
            "location": 107,
            "return": [
                "hearthstone.Deck"
            ],
            "arguments": {}
        },
        "test_model": {
            "name": "test_model",
            "location": 129,
            "return": [],
            "arguments": {
                "monkeypatch": [],
                "deck_one": [],
                "deck_two": []
            }
        },
        "MockHearthstoneAPI.card_from_id": {
            "name": "card_from_id",
            "location": 74,
            "return": [
                "typing.Optional[hearthstone.Card]"
            ],
            "arguments": {
                "cls": [],
                "card_id": [
                    "int"
                ]
            }
        },
        "MockHearthstoneAPI.all_cards": {
            "name": "all_cards",
            "location": 78,
            "return": [
                "typing.Set[hearthstone.Card]"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "hs_deckgen-master/tests/__init__.py": {}
}
{
    "impute-master/setup.py": {
        "write_version": {
            "name": "write_version",
            "location": 6,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "setup_package": {
            "name": "setup_package",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "impute-master/impute/base.py": {
        "Dataset.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "op": [
                    "TraceLinearOp"
                ],
                "ys": [
                    "Union[(vector, List[float])]"
                ],
                "xty": [
                    "Optional[vector]"
                ],
                "yty": [
                    "Optional[float]"
                ]
            }
        },
        "Dataset.loss": {
            "name": "loss",
            "location": 31,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "Union[(SVD, vector)]"
                ],
                "alphas": [
                    "Union[(float, List[float], np.ndarray)]"
                ]
            }
        },
        "Dataset.rss": {
            "name": "rss",
            "location": 51,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "vector"
                ]
            }
        },
        "Dataset.rss_grad": {
            "name": "rss_grad",
            "location": 59,
            "return": [
                "vector"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "vector"
                ]
            }
        },
        "Dataset.ensure_freshness": {
            "name": "ensure_freshness",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.refresh": {
            "name": "refresh",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.xs": {
            "name": "xs",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.extend": {
            "name": "extend",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "xs": [],
                "ys": []
            }
        },
        "BaseImpute.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "shape": [
                    "Tuple[(int, int)]"
                ]
            }
        },
        "BaseImpute._init_starting_point": {
            "name": "_init_starting_point",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "np.ndarray"
                ]
            }
        },
        "BaseImpute._init_z": {
            "name": "_init_z",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseImpute.zero": {
            "name": "zero",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseImpute.impute": {
            "name": "impute",
            "location": 116,
            "return": [
                "SVD"
            ],
            "arguments": {
                "self": [],
                "ds": [
                    "Dataset"
                ]
            }
        },
        "LagrangianImpute.update_once": {
            "name": "update_once",
            "location": 123,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "ds": [
                    "Dataset"
                ],
                "alpha": [
                    "float"
                ],
                "prev_rank": [
                    "int"
                ]
            }
        },
        "LagrangianImpute.should_stop": {
            "name": "should_stop",
            "location": 130,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "metrics": [
                    "Any"
                ],
                "goal": [
                    "float"
                ]
            }
        },
        "LagrangianImpute._prefit": {
            "name": "_prefit",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "ds": [
                    "Dataset"
                ],
                "alphas": [
                    "List[float]"
                ],
                "max_iters": [
                    "int"
                ],
                "warm_start": [
                    "bool"
                ]
            }
        },
        "LagrangianImpute.fit": {
            "name": "fit",
            "location": 141,
            "return": [
                "List[SVD]"
            ],
            "arguments": {
                "self": [],
                "ds": [
                    "Dataset"
                ],
                "alphas": [
                    "List[float]"
                ],
                "max_iters": [
                    "int"
                ],
                "warm_start": [
                    "bool"
                ],
                "goals": [
                    "Optional[Union[(List[float], np.ndarray)]]"
                ]
            }
        },
        "LagrangianImpute.impute": {
            "name": "impute",
            "location": 173,
            "return": [
                "SVD"
            ],
            "arguments": {
                "self": [],
                "ds": [
                    "Dataset"
                ]
            }
        },
        "LagrangianImpute.alpha_max": {
            "name": "alpha_max",
            "location": 187,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "ds": [
                    "Dataset"
                ]
            }
        },
        "LagrangianImpute.get_alpha_seq": {
            "name": "get_alpha_seq",
            "location": 192,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "ds": [
                    "Dataset"
                ],
                "alpha_min": [
                    "float"
                ],
                "eta": [
                    "float"
                ]
            }
        },
        "SvtLagrangianImpute.__init__": {
            "name": "__init__",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "shape": [
                    "Tuple[(int, int)]"
                ],
                "svt_op": []
            }
        },
        "SvtLagrangianImpute.svt": {
            "name": "svt",
            "location": 217,
            "return": [
                "SVD"
            ],
            "arguments": {
                "self": [],
                "w": [],
                "alpha": [
                    "float"
                ],
                "prev_rank": [
                    "int"
                ]
            }
        },
        "SvtLagrangianImpute.get_threshold": {
            "name": "get_threshold",
            "location": 226,
            "return": [],
            "arguments": {
                "self": [],
                "alpha": [
                    "float"
                ]
            }
        }
    },
    "impute-master/impute/fpc.py": {
        "FpcImpute.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "shape": [
                    "Tuple[(int, int)]"
                ],
                "svt_op": []
            }
        },
        "FpcImpute.get_threshold": {
            "name": "get_threshold",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "alpha": [
                    "float"
                ]
            }
        },
        "FpcImpute.update_once": {
            "name": "update_once",
            "location": 32,
            "return": [
                "FpcMetrics"
            ],
            "arguments": {
                "self": [],
                "ds": [
                    "Dataset"
                ],
                "alpha": [
                    "float"
                ],
                "prev_rank": [
                    "int"
                ]
            }
        },
        "FpcImpute.debias": {
            "name": "debias",
            "location": 77,
            "return": [
                "SVD"
            ],
            "arguments": {
                "ds": [
                    "Dataset"
                ],
                "u": [
                    "vector"
                ],
                "v": [
                    "vector"
                ]
            }
        },
        "FpcImpute.should_stop": {
            "name": "should_stop",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "metrics": [
                    "Any"
                ],
                "goal": [
                    "float"
                ]
            }
        },
        "FpcImpute._prefit": {
            "name": "_prefit",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "ds": [
                    "Dataset"
                ],
                "alphas": [
                    "List[float]"
                ],
                "max_iters": [
                    "int"
                ],
                "warm_start": [
                    "bool"
                ]
            }
        },
        "FpcImpute.debias.transform_xs": {
            "name": "transform_xs",
            "location": 79,
            "return": [],
            "arguments": {}
        }
    },
    "impute-master/impute/ops.py": {
        "LinearOp.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "adjoint": [
                    "Optional[Union[('LinearOp', str)]]"
                ]
            }
        },
        "LinearOp.i_shape": {
            "name": "i_shape",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinearOp.o_shape": {
            "name": "o_shape",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinearOp.__call__": {
            "name": "__call__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "b": []
            }
        },
        "LinearOp.evaluate": {
            "name": "evaluate",
            "location": 42,
            "return": [
                "vector"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "vector"
                ]
            }
        },
        "LinearOp.evaluate_t": {
            "name": "evaluate_t",
            "location": 46,
            "return": [
                "vector"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "vector"
                ]
            }
        },
        "LinearOp.t": {
            "name": "t",
            "location": 50,
            "return": [
                "'LinearOp'"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearOp.lazy_t": {
            "name": "lazy_t",
            "location": 56,
            "return": [
                "'LinearOp'"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearOp.xtx": {
            "name": "xtx",
            "location": 60,
            "return": [
                "'LinearOp'"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearOp.xxt": {
            "name": "xxt",
            "location": 64,
            "return": [
                "'LinearOp'"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearOp.norm": {
            "name": "norm",
            "location": 68,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeLinearOp.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "ops": [
                    "Tuple[LinearOp]"
                ]
            }
        },
        "CompositeLinearOp.i_shape": {
            "name": "i_shape",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CompositeLinearOp.o_shape": {
            "name": "o_shape",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CompositeLinearOp.evaluate": {
            "name": "evaluate",
            "location": 95,
            "return": [
                "vector"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "vector"
                ]
            }
        },
        "CompositeLinearOp.evaluate_t": {
            "name": "evaluate_t",
            "location": 98,
            "return": [
                "vector"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "vector"
                ]
            }
        },
        "CompositeLinearOp.norm": {
            "name": "norm",
            "location": 101,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelfAdjointOp.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SelfAdjointOp.evaluate_t": {
            "name": "evaluate_t",
            "location": 114,
            "return": [
                "vector"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "vector"
                ]
            }
        },
        "SelfAdjointOp.xtx": {
            "name": "xtx",
            "location": 117,
            "return": [
                "'SelfAdjointOp'"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelfAdjointOp.xxt": {
            "name": "xxt",
            "location": 120,
            "return": [
                "'SelfAdjointOp'"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelfAdjointOp.square": {
            "name": "square",
            "location": 125,
            "return": [
                "'SelfAdjointOp'"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdjointCompositeLinearOp.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "op": [
                    "LinearOp"
                ]
            }
        },
        "AdjointCompositeLinearOp.square": {
            "name": "square",
            "location": 139,
            "return": [
                "'AdjointCompositeLinearOp'"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdjointCompositeLinearOp.norm": {
            "name": "norm",
            "location": 142,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransposeLinearOp.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "adjoint": [
                    "LinearOp"
                ]
            }
        },
        "TransposeLinearOp.i_shape": {
            "name": "i_shape",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransposeLinearOp.o_shape": {
            "name": "o_shape",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransposeLinearOp.evaluate": {
            "name": "evaluate",
            "location": 161,
            "return": [
                "vector"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "vector"
                ]
            }
        },
        "TransposeLinearOp.evaluate_t": {
            "name": "evaluate_t",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "b": [
                    "vector"
                ]
            }
        },
        "TransposeLinearOp.xtx": {
            "name": "xtx",
            "location": 168,
            "return": [
                "LinearOp"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransposeLinearOp.xxt": {
            "name": "xxt",
            "location": 172,
            "return": [
                "LinearOp"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransposeLinearOp.norm": {
            "name": "norm",
            "location": 175,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "HadamardLinearOp.__init__": {
            "name": "__init__",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "coefs": [
                    "vector"
                ]
            }
        },
        "HadamardLinearOp.i_shape": {
            "name": "i_shape",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HadamardLinearOp.o_shape": {
            "name": "o_shape",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HadamardLinearOp.evaluate": {
            "name": "evaluate",
            "location": 194,
            "return": [
                "vector"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "vector"
                ]
            }
        },
        "HadamardLinearOp.norm": {
            "name": "norm",
            "location": 197,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "HadamardLinearOp.square": {
            "name": "square",
            "location": 201,
            "return": [
                "'SelfAdjointOp'"
            ],
            "arguments": {
                "self": []
            }
        },
        "IncrementalData.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IncrementalData.i_shape": {
            "name": "i_shape",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IncrementalData.append": {
            "name": "append",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "X@@"
                ]
            }
        },
        "IncrementalData.extend": {
            "name": "extend",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "xs": [
                    "List[X]"
                ]
            }
        },
        "IncrementalData.preprocess_data": {
            "name": "preprocess_data",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "xs": [
                    "List[X]"
                ]
            }
        },
        "IncrementalData.postprocess_data": {
            "name": "postprocess_data",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "xs": [
                    "List[X]"
                ]
            }
        },
        "IncrementalData.to_matrix_list": {
            "name": "to_matrix_list",
            "location": 237,
            "return": [
                "Iterator[vector]"
            ],
            "arguments": {
                "self": [],
                "left": [
                    "Optional[vector]"
                ],
                "right": [
                    "Optional[vector]"
                ]
            }
        },
        "IncrementalData.to_matrix": {
            "name": "to_matrix",
            "location": 243,
            "return": [
                "vector"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "X@@"
                ],
                "left": [
                    "Optional[vector]"
                ],
                "right": [
                    "Optional[vector]"
                ]
            }
        },
        "DotLinearOp.__init__": {
            "name": "__init__",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "i_shape": [
                    "Union[(int, Tuple[int])]"
                ]
            }
        },
        "DotLinearOp.i_shape": {
            "name": "i_shape",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DotLinearOp.o_shape": {
            "name": "o_shape",
            "location": 276,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DotLinearOp.evaluate": {
            "name": "evaluate",
            "location": 279,
            "return": [
                "vector"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "vector"
                ]
            }
        },
        "DotLinearOp.evaluate_t": {
            "name": "evaluate_t",
            "location": 284,
            "return": [
                "vector"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "vector"
                ]
            }
        },
        "DotLinearOp.norm": {
            "name": "norm",
            "location": 289,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "DotLinearOp.ensure_freshness": {
            "name": "ensure_freshness",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DotLinearOp.refresh": {
            "name": "refresh",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DenseTraceLinearOp.__init__": {
            "name": "__init__",
            "location": 311,
            "return": [],
            "arguments": {
                "self": [],
                "i_shape": [
                    "Tuple[(int, int)]"
                ]
            }
        },
        "DenseTraceLinearOp.i_shape": {
            "name": "i_shape",
            "location": 319,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DenseTraceLinearOp.o_shape": {
            "name": "o_shape",
            "location": 323,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DenseTraceLinearOp.evaluate": {
            "name": "evaluate",
            "location": 326,
            "return": [
                "vector"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "vector"
                ]
            }
        },
        "DenseTraceLinearOp.evaluate_t": {
            "name": "evaluate_t",
            "location": 329,
            "return": [
                "vector"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "vector"
                ]
            }
        },
        "DenseTraceLinearOp.norm": {
            "name": "norm",
            "location": 332,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "DenseTraceLinearOp.refresh": {
            "name": "refresh",
            "location": 338,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RowTraceLinearOp.__init__": {
            "name": "__init__",
            "location": 346,
            "return": [],
            "arguments": {
                "self": [],
                "i_shape": [
                    "Tuple[(int, int)]"
                ]
            }
        },
        "RowTraceLinearOp.postprocess_data": {
            "name": "postprocess_data",
            "location": 358,
            "return": [],
            "arguments": {
                "self": [],
                "xs": [
                    "List[row_matrix]"
                ]
            }
        },
        "RowTraceLinearOp.i_shape": {
            "name": "i_shape",
            "location": 369,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RowTraceLinearOp.n_row": {
            "name": "n_row",
            "location": 373,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RowTraceLinearOp.n_col": {
            "name": "n_col",
            "location": 377,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RowTraceLinearOp.o_shape": {
            "name": "o_shape",
            "location": 381,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RowTraceLinearOp.evaluate": {
            "name": "evaluate",
            "location": 384,
            "return": [
                "vector"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "vector"
                ]
            }
        },
        "RowTraceLinearOp.evaluate_t": {
            "name": "evaluate_t",
            "location": 394,
            "return": [
                "vector"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "vector"
                ]
            }
        },
        "RowTraceLinearOp.norm": {
            "name": "norm",
            "location": 400,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "RowTraceLinearOp.refresh": {
            "name": "refresh",
            "location": 406,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RowTraceLinearOp.to_matrix": {
            "name": "to_matrix",
            "location": 410,
            "return": [
                "vector"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "row_matrix"
                ],
                "left": [
                    "Optional[vector]"
                ],
                "right": [
                    "Optional[vector]"
                ]
            }
        },
        "EntryTraceLinearOp.__init__": {
            "name": "__init__",
            "location": 432,
            "return": [],
            "arguments": {
                "self": [],
                "i_shape": [
                    "Tuple[(int, int)]"
                ]
            }
        },
        "EntryTraceLinearOp.postprocess_data": {
            "name": "postprocess_data",
            "location": 445,
            "return": [],
            "arguments": {
                "self": [],
                "xs": [
                    "List[entry_matrix]"
                ]
            }
        },
        "EntryTraceLinearOp.i_shape": {
            "name": "i_shape",
            "location": 457,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EntryTraceLinearOp.o_shape": {
            "name": "o_shape",
            "location": 461,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EntryTraceLinearOp.evaluate": {
            "name": "evaluate",
            "location": 464,
            "return": [
                "vector"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "vector"
                ]
            }
        },
        "EntryTraceLinearOp.evaluate_t": {
            "name": "evaluate_t",
            "location": 467,
            "return": [
                "vector"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "vector"
                ]
            }
        },
        "EntryTraceLinearOp.xtx": {
            "name": "xtx",
            "location": 475,
            "return": [
                "LinearOp"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntryTraceLinearOp.norm": {
            "name": "norm",
            "location": 478,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntryTraceLinearOp.refresh": {
            "name": "refresh",
            "location": 484,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EntryTraceLinearOp.to_matrix": {
            "name": "to_matrix",
            "location": 488,
            "return": [
                "vector"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "entry_matrix"
                ],
                "left": [
                    "Optional[vector]"
                ],
                "right": [
                    "Optional[vector]"
                ]
            }
        }
    },
    "impute-master/impute/soft.py": {
        "SoftImpute.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "shape": [],
                "svt_op": []
            }
        },
        "SoftImpute.get_threshold": {
            "name": "get_threshold",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "alpha": [
                    "float"
                ]
            }
        },
        "SoftImpute.update_once": {
            "name": "update_once",
            "location": 27,
            "return": [
                "SoftMetrics"
            ],
            "arguments": {
                "self": [],
                "ds": [
                    "Dataset"
                ],
                "alpha": [
                    "float"
                ],
                "prev_rank": [
                    "int"
                ]
            }
        },
        "SoftImpute.should_stop": {
            "name": "should_stop",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "metrics": [
                    "Any"
                ],
                "goal": [
                    "float"
                ]
            }
        },
        "SoftImpute._prefit": {
            "name": "_prefit",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "ds": [
                    "Dataset"
                ],
                "alphas": [
                    "List[float]"
                ],
                "max_iters": [
                    "int"
                ],
                "warm_start": [
                    "bool"
                ]
            }
        },
        "SoftImpute.ensure_entry_op": {
            "name": "ensure_entry_op",
            "location": 77,
            "return": [],
            "arguments": {
                "ds": [
                    "Dataset"
                ]
            }
        }
    },
    "impute-master/impute/svt.py": {
        "soft_thresh": {
            "name": "soft_thresh",
            "location": 8,
            "return": [],
            "arguments": {
                "level": []
            }
        },
        "hard_thresh": {
            "name": "hard_thresh",
            "location": 12,
            "return": [],
            "arguments": {
                "level": []
            }
        },
        "svt": {
            "name": "svt",
            "location": 16,
            "return": [
                "SVD"
            ],
            "arguments": {
                "w": [
                    "np.ndarray"
                ],
                "level": [
                    "float"
                ],
                "guess": [
                    "Optional[int]"
                ],
                "thresh": [
                    "str"
                ],
                "svd": [
                    "Union[(Callable, str)]"
                ]
            }
        },
        "tuned_svt": {
            "name": "tuned_svt",
            "location": 43,
            "return": [],
            "arguments": {
                "thresh": [
                    "str"
                ],
                "svd": [
                    "Union[(Callable, str)]"
                ]
            }
        },
        "tuned_svt._svt": {
            "name": "_svt",
            "location": 45,
            "return": [],
            "arguments": {
                "w": [
                    "np.ndarray"
                ],
                "level": [
                    "float"
                ],
                "guess": [
                    "Optional[int]"
                ]
            }
        }
    },
    "impute-master/impute/utils.py": {
        "one_hot": {
            "name": "one_hot",
            "location": 7,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "shape": [],
                "pos": [],
                "val": [
                    "float"
                ]
            }
        },
        "random_one_hot": {
            "name": "random_one_hot",
            "location": 14,
            "return": [
                "Tuple[(Tuple[(int, ...)], float, np.ndarray)]"
            ],
            "arguments": {
                "shape": []
            }
        }
    },
    "impute-master/impute/version.py": {},
    "impute-master/impute/__init__.py": {},
    "impute-master/impute/decomposition/base.py": {
        "SVD.shape": {
            "name": "shape",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SVD.rank": {
            "name": "rank",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SVD.t": {
            "name": "t",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SVD.to_svd": {
            "name": "to_svd",
            "location": 25,
            "return": [
                "'SVD'"
            ],
            "arguments": {
                "w": [
                    "np.ndarray"
                ]
            }
        },
        "SVD.to_matrix": {
            "name": "to_matrix",
            "location": 30,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "SVD.trim": {
            "name": "trim",
            "location": 33,
            "return": [
                "'SVD'"
            ],
            "arguments": {
                "self": [],
                "thresh": [
                    "float"
                ],
                "rank": [
                    "int"
                ]
            }
        }
    },
    "impute-master/impute/decomposition/exact_svd.py": {
        "exact_svd": {
            "name": "exact_svd",
            "location": 7,
            "return": [
                "SVD"
            ],
            "arguments": {
                "w": [
                    "np.ndarray"
                ]
            }
        }
    },
    "impute-master/impute/decomposition/randomized_svd.py": {
        "sym_eig": {
            "name": "sym_eig",
            "location": 14,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "partial_orthogonalization": {
            "name": "partial_orthogonalization",
            "location": 23,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "y": [
                    "np.ndarray"
                ],
                "q": [
                    "np.ndarray"
                ],
                "overwrite_y": [
                    "bool"
                ]
            }
        },
        "randomized_expander": {
            "name": "randomized_expander",
            "location": 37,
            "return": [
                "Tuple[(np.ndarray, np.ndarray, np.ndarray)]"
            ],
            "arguments": {
                "z": [
                    "np.ndarray"
                ],
                "q": [
                    "np.ndarray"
                ],
                "n_col": [
                    "int"
                ],
                "n_iter": [
                    "int"
                ]
            }
        },
        "_fixed_rank_svd": {
            "name": "_fixed_rank_svd",
            "location": 65,
            "return": [
                "SVD"
            ],
            "arguments": {
                "z": [
                    "np.ndarray"
                ],
                "rank": [
                    "int"
                ],
                "n_oversamples": [
                    "int"
                ],
                "n_iter": []
            }
        },
        "randomized_svd": {
            "name": "randomized_svd",
            "location": 94,
            "return": [
                "SVD"
            ],
            "arguments": {
                "z": [
                    "np.ndarray"
                ],
                "tol": [
                    "float"
                ],
                "guess": [
                    "int"
                ],
                "max_rank": [
                    "Optional[int]"
                ]
            }
        }
    },
    "impute-master/impute/decomposition/__init__.py": {},
    "impute-master/impute/decomposition/tests/conftest.py": {
        "low_rank_matrix_fixture": {
            "name": "low_rank_matrix_fixture",
            "location": 13,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "impute-master/impute/decomposition/tests/test_randomized_svd.py": {
        "TestRandomizedSvd.test_fixed_precision": {
            "name": "test_fixed_precision",
            "location": 12,
            "return": [],
            "arguments": {
                "low_rank_matrix": []
            }
        }
    },
    "impute-master/impute/decomposition/tests/__init__.py": {},
    "impute-master/impute/tests/conftest.py": {
        "create_alternating_entry_dataset": {
            "name": "create_alternating_entry_dataset",
            "location": 14,
            "return": [
                "Dataset"
            ],
            "arguments": {
                "shape": [],
                "b": [],
                "sd": []
            }
        },
        "create_randomized_entry_dot_op": {
            "name": "create_randomized_entry_dot_op",
            "location": 31,
            "return": [],
            "arguments": {
                "shape": [],
                "n_sample": []
            }
        },
        "create_trace_linear_op_test_case": {
            "name": "create_trace_linear_op_test_case",
            "location": 63,
            "return": [],
            "arguments": {
                "seed": [],
                "shape": [],
                "n_sample": []
            }
        },
        "add_to_dense_op": {
            "name": "add_to_dense_op",
            "location": 95,
            "return": [],
            "arguments": {
                "op": [],
                "data": []
            }
        },
        "add_to_row_op": {
            "name": "add_to_row_op",
            "location": 99,
            "return": [],
            "arguments": {
                "op": [],
                "data": []
            }
        },
        "add_to_entry_op": {
            "name": "add_to_entry_op",
            "location": 105,
            "return": [],
            "arguments": {
                "op": [],
                "data": []
            }
        },
        "re_dataset_fixture": {
            "name": "re_dataset_fixture",
            "location": 116,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "nae_dataset_fixture": {
            "name": "nae_dataset_fixture",
            "location": 130,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "rae_dataset_fixture": {
            "name": "rae_dataset_fixture",
            "location": 151,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "alpha_ratio_fixture": {
            "name": "alpha_ratio_fixture",
            "location": 172,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "imputer_cls_fixture": {
            "name": "imputer_cls_fixture",
            "location": 183,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "svt_fixture": {
            "name": "svt_fixture",
            "location": 194,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "trace_op_case_fixture": {
            "name": "trace_op_case_fixture",
            "location": 205,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "op_info_fixture": {
            "name": "op_info_fixture",
            "location": 218,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "TraceLinearOpTestCase.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "shape": []
            }
        }
    },
    "impute-master/impute/tests/test_base.py": {
        "TestDataset.test_op": {
            "name": "test_op",
            "location": 11,
            "return": [],
            "arguments": {
                "nae_case": []
            }
        },
        "TestDataset.test_rss_grad": {
            "name": "test_rss_grad",
            "location": 20,
            "return": [],
            "arguments": {
                "nae_case": []
            }
        }
    },
    "impute-master/impute/tests/test_fpc.py": {
        "TestFpc.test_debias": {
            "name": "test_debias",
            "location": 14,
            "return": [],
            "arguments": {
                "rae_case": []
            }
        }
    },
    "impute-master/impute/tests/test_lagrangian_imputer.py": {
        "create_imputer": {
            "name": "create_imputer",
            "location": 10,
            "return": [],
            "arguments": {
                "imputer_cls": [],
                "svt": [],
                "shape": []
            }
        },
        "TestLagrangianImputer.test_alpha_max": {
            "name": "test_alpha_max",
            "location": 20,
            "return": [],
            "arguments": {
                "imputer_cls": [],
                "svt": [],
                "rae_case": []
            }
        },
        "TestLagrangianImputer.test_strong_optimality": {
            "name": "test_strong_optimality",
            "location": 37,
            "return": [],
            "arguments": {
                "imputer_cls": [],
                "rae_case": [],
                "alpha_ratio": []
            }
        },
        "TestLagrangianImputer.test_weak_optimality": {
            "name": "test_weak_optimality",
            "location": 68,
            "return": [],
            "arguments": {
                "imputer_cls": [],
                "svt": [],
                "rae_case": [],
                "alpha_ratio": []
            }
        }
    },
    "impute-master/impute/tests/test_ops.py": {
        "TestDotLinearOp.test_op_norm": {
            "name": "test_op_norm",
            "location": 11,
            "return": [],
            "arguments": {
                "re_dot_case": []
            }
        },
        "TestDotLinearOp.test_xtx_op_norm": {
            "name": "test_xtx_op_norm",
            "location": 24,
            "return": [],
            "arguments": {
                "re_dot_case": []
            }
        },
        "TestDotLinearOp.test_xxt_op_norm": {
            "name": "test_xxt_op_norm",
            "location": 37,
            "return": [],
            "arguments": {
                "re_dot_case": []
            }
        },
        "TestTraceLinearOp.test_evaluate": {
            "name": "test_evaluate",
            "location": 54,
            "return": [],
            "arguments": {
                "op_info": [],
                "trace_op_case": []
            }
        },
        "TestTraceLinearOp.test_evaluate_t": {
            "name": "test_evaluate_t",
            "location": 64,
            "return": [],
            "arguments": {
                "op_info": [],
                "trace_op_case": []
            }
        },
        "TestTraceLinearOp.test_xtx": {
            "name": "test_xtx",
            "location": 74,
            "return": [],
            "arguments": {
                "op_info": [],
                "trace_op_case": []
            }
        },
        "TestTraceLinearOp.test_xxt": {
            "name": "test_xxt",
            "location": 84,
            "return": [],
            "arguments": {
                "op_info": [],
                "trace_op_case": []
            }
        },
        "TestTraceLinearOp.test_norm": {
            "name": "test_norm",
            "location": 94,
            "return": [],
            "arguments": {
                "op_info": [],
                "trace_op_case": []
            }
        },
        "TestTraceLinearOp.get_loaded_op": {
            "name": "get_loaded_op",
            "location": 104,
            "return": [],
            "arguments": {
                "op_info": [],
                "trace_op_case": []
            }
        }
    },
    "impute-master/impute/tests/__init__.py": {}
}
{
    "infestation_polish_edition-master/downloader.py": {
        "link_directories": {
            "name": "link_directories",
            "location": 13,
            "return": [
                "t.Generator[(BeautifulSoup, None, None)]"
            ],
            "arguments": {}
        },
        "pdf_links": {
            "name": "pdf_links",
            "location": 21,
            "return": [
                "t.Generator[(BeautifulSoup, None, None)]"
            ],
            "arguments": {
                "link": [
                    "str"
                ]
            }
        },
        "all_pdfs": {
            "name": "all_pdfs",
            "location": 32,
            "return": [
                "t.Generator[(t.Tuple[(str, str)], None, None)]"
            ],
            "arguments": {}
        }
    },
    "infestation_polish_edition-master/get_annotations.py": {
        "exception_handler": {
            "name": "exception_handler",
            "location": 13,
            "return": [],
            "arguments": {
                "request": [],
                "exception": []
            }
        },
        "get_token": {
            "name": "get_token",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "auth_headers": {
            "name": "auth_headers",
            "location": 22,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "token": [
                    "str"
                ]
            }
        },
        "storage_file_path": {
            "name": "storage_file_path",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "annotate_file_request": {
            "name": "annotate_file_request",
            "location": 33,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "extract_file_text": {
            "name": "extract_file_text",
            "location": 56,
            "return": [
                "Dict"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 66,
            "return": [],
            "arguments": {}
        }
    },
    "infestation_polish_edition-master/group_json.py": {
        "_get_response": {
            "name": "_get_response",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "_save_response": {
            "name": "_save_response",
            "location": 12,
            "return": [],
            "arguments": {
                "data": [
                    "dict"
                ]
            }
        },
        "by_sickness": {
            "name": "by_sickness",
            "location": 17,
            "return": [
                "dict"
            ],
            "arguments": {
                "values": [
                    "t.Iterable"
                ]
            }
        },
        "sicknesses_by_date": {
            "name": "sicknesses_by_date",
            "location": 21,
            "return": [
                "t.Dict[(str, t.Any)]"
            ],
            "arguments": {
                "entries": [
                    "t.Iterable[dict]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 26,
            "return": [],
            "arguments": {}
        }
    },
    "infestation_polish_edition-master/helpers.py": {
        "stripped": {
            "name": "stripped",
            "location": 4,
            "return": [
                "t.List[t.List[str]]"
            ],
            "arguments": {
                "rows": [
                    "t.Iterable[t.Iterable[str]]"
                ]
            }
        }
    },
    "infestation_polish_edition-master/main.py": {
        "main": {
            "name": "main",
            "location": 112,
            "return": [],
            "arguments": {}
        },
        "ReportPage._is_stat_line": {
            "name": "_is_stat_line",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "line": [
                    "Line"
                ]
            }
        },
        "ReportPage._is_data_entry": {
            "name": "_is_data_entry",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "word": [
                    "Word"
                ]
            }
        },
        "ReportPage.lines": {
            "name": "lines",
            "location": 40,
            "return": [
                "t.Generator[(Line, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportPage.padded_lines": {
            "name": "padded_lines",
            "location": 44,
            "return": [
                "t.Generator[(PaddedLine, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportPage._char_width": {
            "name": "_char_width",
            "location": 48,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportFile._document": {
            "name": "_document",
            "location": 65,
            "return": [
                "DocumentFile"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportFile._pages": {
            "name": "_pages",
            "location": 69,
            "return": [
                "t.List[Page]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportFile.pages": {
            "name": "pages",
            "location": 73,
            "return": [
                "t.List[ReportPage]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportFile.pdf_name": {
            "name": "pdf_name",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportFile._base_name": {
            "name": "_base_name",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportFile._dates_raw": {
            "name": "_dates_raw",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReportFile._date_raw_start": {
            "name": "_date_raw_start",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReportFile._date_raw_end": {
            "name": "_date_raw_end",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReportFile.start_date": {
            "name": "start_date",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReportFile.end_date": {
            "name": "end_date",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReportFile._json_path": {
            "name": "_json_path",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportFile.__repr__": {
            "name": "__repr__",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "infestation_polish_edition-master/models.py": {
        "normalize_number": {
            "name": "normalize_number",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "number": [
                    "str"
                ]
            }
        },
        "remove_nonnumber": {
            "name": "remove_nonnumber",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "number": [
                    "str"
                ]
            }
        },
        "SicknessEntry.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "raw": [
                    "PaddedLine"
                ],
                "start_date": [
                    "datetime"
                ],
                "end_date": [
                    "datetime"
                ],
                "pdf_path": [
                    "str"
                ]
            }
        },
        "SicknessEntry.name": {
            "name": "name",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SicknessEntry._values": {
            "name": "_values",
            "location": 49,
            "return": [
                "[str, str, str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SicknessEntry.values": {
            "name": "values",
            "location": 53,
            "return": [
                "SicknessValues"
            ],
            "arguments": {
                "self": []
            }
        },
        "SicknessEntry.value_for_time_period": {
            "name": "value_for_time_period",
            "location": 59,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SicknessEntry.time_span": {
            "name": "time_span",
            "location": 63,
            "return": [
                "timedelta"
            ],
            "arguments": {
                "self": []
            }
        },
        "SicknessEntry.days_span": {
            "name": "days_span",
            "location": 67,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SicknessEntry.value_per_30_days": {
            "name": "value_per_30_days",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SicknessEntry.__repr__": {
            "name": "__repr__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SicknessEntry.json": {
            "name": "json",
            "location": 78,
            "return": [
                "t.Dict[(str, t.Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "infestation_polish_edition-master/parser.py": {
        "starts_with_index": {
            "name": "starts_with_index",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "word": [
                    "str"
                ]
            }
        },
        "get_valid_lines": {
            "name": "get_valid_lines",
            "location": 56,
            "return": [
                "t.Generator[(t.List[str], None, None)]"
            ],
            "arguments": {
                "lines": [
                    "t.List[t.List[str]]"
                ]
            }
        },
        "reformat_weird_spacing": {
            "name": "reformat_weird_spacing",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "values": [
                    "str"
                ]
            }
        },
        "fix_werid_spacing": {
            "name": "fix_werid_spacing",
            "location": 99,
            "return": [
                "t.Tuple[(str, str)]"
            ],
            "arguments": {
                "values": [
                    "str"
                ]
            }
        },
        "parse_values": {
            "name": "parse_values",
            "location": 108,
            "return": [
                "t.List[float]"
            ],
            "arguments": {
                "values": [
                    "t.List[str]"
                ]
            }
        },
        "parse_line": {
            "name": "parse_line",
            "location": 119,
            "return": [
                "t.Tuple[(int, str, t.Tuple[float])]"
            ],
            "arguments": {
                "line": [
                    "t.List[str]"
                ]
            }
        },
        "skip": {
            "name": "skip",
            "location": 126,
            "return": [
                "t.Iterator"
            ],
            "arguments": {
                "iterable": [
                    "t.Iterator"
                ],
                "times": [
                    "int"
                ]
            }
        },
        "load_sicknesses": {
            "name": "load_sicknesses",
            "location": 133,
            "return": [
                "t.Generator[(Sickness, None, None)]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "write_to_csv": {
            "name": "write_to_csv",
            "location": 153,
            "return": [],
            "arguments": {
                "filename": [
                    "str"
                ],
                "sicknesses": [
                    "t.Generator[(Sickness, None, None)]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 171,
            "return": [],
            "arguments": {}
        },
        "get_valid_lines._valid_lines": {
            "name": "_valid_lines",
            "location": 57,
            "return": [],
            "arguments": {}
        }
    },
    "infestation_polish_edition-master/something_else.py": {},
    "infestation_polish_edition-master/tests.py": {
        "TestCursor.test_werid_spacing": {
            "name": "test_werid_spacing",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "infestation_polish_edition-master/visionary.py": {
        "to_vertices": {
            "name": "to_vertices",
            "location": 15,
            "return": [
                "Vertex"
            ],
            "arguments": {
                "vertex_raw": [
                    "t.Dict[(str, float)]"
                ]
            }
        },
        "parse_date": {
            "name": "parse_date",
            "location": 19,
            "return": [
                "datetime"
            ],
            "arguments": {
                "raw": [
                    "str"
                ]
            }
        },
        "avg": {
            "name": "avg",
            "location": 23,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [
                    "t.Union[(float, int)]"
                ],
                "y": [
                    "t.Union[(float, int)]"
                ]
            }
        },
        "VerticesMixin.vertices": {
            "name": "vertices",
            "location": 32,
            "return": [
                "BoxVertices"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerticesMixin._y_positions": {
            "name": "_y_positions",
            "location": 42,
            "return": [
                "t.Iterable[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerticesMixin._x_positions": {
            "name": "_x_positions",
            "location": 46,
            "return": [
                "t.Iterable[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerticesMixin.pos_top": {
            "name": "pos_top",
            "location": 50,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerticesMixin.pos_bottom": {
            "name": "pos_bottom",
            "location": 54,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerticesMixin.pos_left": {
            "name": "pos_left",
            "location": 58,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerticesMixin.pos_right": {
            "name": "pos_right",
            "location": 62,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerticesMixin.pos_x": {
            "name": "pos_x",
            "location": 66,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerticesMixin.pos_y": {
            "name": "pos_y",
            "location": 70,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerticesMixin.vertex_topleft": {
            "name": "vertex_topleft",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerticesMixin.vertex_bottomleft": {
            "name": "vertex_bottomleft",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerticesMixin.vertex_topright": {
            "name": "vertex_topright",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerticesMixin.vertex_bottomright": {
            "name": "vertex_bottomright",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerticesMixin.width": {
            "name": "width",
            "location": 90,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerticesMixin.height": {
            "name": "height",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerticesMixin.center": {
            "name": "center",
            "location": 98,
            "return": [
                "Vertex"
            ],
            "arguments": {
                "self": []
            }
        },
        "Symbol.confidence": {
            "name": "confidence",
            "location": 107,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Symbol._text": {
            "name": "_text",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Symbol.__repr__": {
            "name": "__repr__",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Symbol.__str__": {
            "name": "__str__",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Word.symbols": {
            "name": "symbols",
            "location": 126,
            "return": [
                "t.List[Symbol]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word._text": {
            "name": "_text",
            "location": 130,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word._char_width": {
            "name": "_char_width",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Word.padding": {
            "name": "padding",
            "location": 138,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word.__repr__": {
            "name": "__repr__",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Word.__str__": {
            "name": "__str__",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Paragraph.words": {
            "name": "words",
            "location": 153,
            "return": [
                "t.List[Word]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Paragraph.confidence": {
            "name": "confidence",
            "location": 157,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Paragraph._text": {
            "name": "_text",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Paragraph.__repr__": {
            "name": "__repr__",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Paragraph.__str__": {
            "name": "__str__",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Block.paragraphs": {
            "name": "paragraphs",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Block.block_type": {
            "name": "block_type",
            "location": 180,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Block.confidence": {
            "name": "confidence",
            "location": 184,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Block.__repr__": {
            "name": "__repr__",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Annotation.width": {
            "name": "width",
            "location": 196,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Annotation.height": {
            "name": "height",
            "location": 200,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Annotation.confidence": {
            "name": "confidence",
            "location": 204,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Annotation.blocks": {
            "name": "blocks",
            "location": 208,
            "return": [
                "t.List[Block]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Annotation.__repr__": {
            "name": "__repr__",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.words": {
            "name": "words",
            "location": 220,
            "return": [
                "t.List[Word]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.vertices": {
            "name": "vertices",
            "location": 224,
            "return": [
                "BoxVertices"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line._char_width": {
            "name": "_char_width",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line._text": {
            "name": "_text",
            "location": 240,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.__repr__": {
            "name": "__repr__",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.__str__": {
            "name": "__str__",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PaddedLine._text": {
            "name": "_text",
            "location": 256,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PaddedLine.__str__": {
            "name": "__str__",
            "location": 259,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Page.__repr__": {
            "name": "__repr__",
            "location": 268,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Page._context": {
            "name": "_context",
            "location": 272,
            "return": [
                "t.Dict[(str, t.Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Page._data": {
            "name": "_data",
            "location": 276,
            "return": [
                "t.Dict[(str, t.Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Page.pagenum": {
            "name": "pagenum",
            "location": 280,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Page.text": {
            "name": "text",
            "location": 284,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Page._annotations": {
            "name": "_annotations",
            "location": 288,
            "return": [
                "t.List[Annotation]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Page.paragraphs": {
            "name": "paragraphs",
            "location": 292,
            "return": [
                "t.List[Paragraph]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Page.words": {
            "name": "words",
            "location": 298,
            "return": [
                "t.List[Word]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Page.lines": {
            "name": "lines",
            "location": 302,
            "return": [
                "t.Generator[(Line, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentFile._json_data": {
            "name": "_json_data",
            "location": 316,
            "return": [
                "t.Dict[(str, t.Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentFile._pages_data": {
            "name": "_pages_data",
            "location": 321,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocumentFile.pages": {
            "name": "pages",
            "location": 325,
            "return": [
                "t.List[Page]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentFile.__repr__": {
            "name": "__repr__",
            "location": 328,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    }
}
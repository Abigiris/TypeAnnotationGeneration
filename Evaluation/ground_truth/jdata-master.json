{
    "jdata-master/setup.py": {},
    "jdata-master/test_environment.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "jdata-master/docs/conf.py": {},
    "jdata-master/src/__init__.py": {
        "to_unix": {
            "name": "to_unix",
            "location": 13,
            "return": [
                "int"
            ],
            "arguments": {
                "dt": []
            }
        },
        "timer": {
            "name": "timer",
            "location": 20,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "drop_duplicated_columns": {
            "name": "drop_duplicated_columns",
            "location": 29,
            "return": [],
            "arguments": {
                "df": []
            }
        }
    },
    "jdata-master/src/data/concat_action_files.py": {
        "main": {
            "name": "main",
            "location": 10,
            "return": [],
            "arguments": {
                "input_dir": [],
                "output_dir": []
            }
        }
    },
    "jdata-master/src/data/drop_duplicated_actions.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "jdata-master/src/data/merge_all_files.py": {
        "load_files": {
            "name": "load_files",
            "location": 8,
            "return": [],
            "arguments": {
                "input_dir": [],
                "output_dir": []
            }
        },
        "add_dt_features": {
            "name": "add_dt_features",
            "location": 68,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "dt_col": [],
                "features": []
            }
        },
        "main": {
            "name": "main",
            "location": 104,
            "return": [],
            "arguments": {
                "input_dir": [],
                "output_dir": []
            }
        }
    },
    "jdata-master/src/data/optimizer.py": {
        "info": {
            "name": "info",
            "location": 7,
            "return": [],
            "arguments": {
                "df": []
            }
        },
        "mem_usage": {
            "name": "mem_usage",
            "location": 11,
            "return": [],
            "arguments": {
                "pd_obj": []
            }
        },
        "compare_mem_usage": {
            "name": "compare_mem_usage",
            "location": 20,
            "return": [],
            "arguments": {
                "b": [],
                "a": []
            }
        },
        "get_column_types": {
            "name": "get_column_types",
            "location": 28,
            "return": [],
            "arguments": {
                "dtypes": []
            }
        },
        "show_dtypes": {
            "name": "show_dtypes",
            "location": 34,
            "return": [],
            "arguments": {
                "df": []
            }
        },
        "optimize_numeric_values": {
            "name": "optimize_numeric_values",
            "location": 45,
            "return": [],
            "arguments": {
                "df": [],
                "fillna": [],
                "as_int": []
            }
        }
    },
    "jdata-master/src/data/readwriter.py": {
        "DataReadWriter.read": {
            "name": "read",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataReadWriter.write": {
            "name": "write",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmptyReadWriter.read": {
            "name": "read",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmptyReadWriter.write": {
            "name": "write",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileReadWriter.extension": {
            "name": "extension",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileReadWriter.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileReadWriter.read": {
            "name": "read",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "dir": [],
                "name": []
            }
        },
        "FileReadWriter.write": {
            "name": "write",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "df": [],
                "dir": [],
                "name": []
            }
        },
        "FileReadWriter.extend_name": {
            "name": "extend_name",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "FileReadWriter.fpath": {
            "name": "fpath",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "dir": [],
                "name": []
            }
        },
        "FileReadWriter.set_path_dict": {
            "name": "set_path_dict",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileReadWriter.create_folder_if_not_exist": {
            "name": "create_folder_if_not_exist",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileReadWriter.create_file_if_not_exist": {
            "name": "create_file_if_not_exist",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CSVReadWriter.extension": {
            "name": "extension",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CSVReadWriter.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CSVReadWriter.read": {
            "name": "read",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "dir": [],
                "name": [],
                "version": []
            }
        },
        "CSVReadWriter.write": {
            "name": "write",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "df": [],
                "dir": [],
                "name": [],
                "version": [],
                "save_dtypes": []
            }
        },
        "CSVReadWriter.save_dtypes": {
            "name": "save_dtypes",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": [],
                "version": []
            }
        },
        "FeatherReadWriter.extension": {
            "name": "extension",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FeatherReadWriter.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FeatherReadWriter.read": {
            "name": "read",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "dir": [],
                "name": [],
                "nthreads": []
            }
        },
        "FeatherReadWriter.write": {
            "name": "write",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "df": [],
                "dir": [],
                "name": []
            }
        },
        "CompositeReadWriter.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "reader": [],
                "writer": []
            }
        },
        "CompositeReadWriter.read": {
            "name": "read",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CompositeReadWriter.write": {
            "name": "write",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "Schema.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Schema.get": {
            "name": "get",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "version": []
            }
        },
        "Schema.save": {
            "name": "save",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": [],
                "version": []
            }
        },
        "TrainTestReadWriter.__init__": {
            "name": "__init__",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainTestReadWriter.read": {
            "name": "read",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "version": []
            }
        },
        "TrainTestReadWriter.write": {
            "name": "write",
            "location": 247,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": [],
                "version": [],
                "force": []
            }
        },
        "TrainTestReadWriter.get_config": {
            "name": "get_config",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "version": []
            }
        },
        "TrainTestReadWriter.show": {
            "name": "show",
            "location": 268,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "version": []
            }
        },
        "JDataTrainTestReadWriter.__init__": {
            "name": "__init__",
            "location": 274,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JDataTrainTestReadWriter.read": {
            "name": "read",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "version": [],
                "encode_type": [],
                "add_feature": []
            }
        }
    },
    "jdata-master/src/data/save_npy.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "jdata-master/src/data/split_train_test.py": {
        "BaseSpliter.parse_dates": {
            "name": "parse_dates",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSpliter.parse_sme_dates": {
            "name": "parse_sme_dates",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "mid": [],
                "end": []
            }
        },
        "BaseSpliter.make_train": {
            "name": "make_train",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "BaseSpliter.make_test": {
            "name": "make_test",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "BaseSpliter.run": {
            "name": "run",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "file_p": [],
                "start": [],
                "mid": [],
                "end": [],
                "time_col": [],
                "unix_time": [],
                "keep_cols": [],
                "only_keep_train_index": [],
                "version": []
            }
        },
        "JDataSpliter.make_test": {
            "name": "make_test",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "JDataSpliter.run": {
            "name": "run",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "file_p": [],
                "start": [],
                "mid": [],
                "end": [],
                "time_col": [],
                "unix_time": [],
                "keep_cols": [],
                "only_keep_train_index": [],
                "version": []
            }
        }
    },
    "jdata-master/src/data/__init__.py": {},
    "jdata-master/src/features/build_features.py": {
        "prepare_train_pair": {
            "name": "prepare_train_pair",
            "location": 70,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ]
            }
        },
        "get_actions": {
            "name": "get_actions",
            "location": 94,
            "return": [],
            "arguments": {
                "df": [],
                "actions": []
            }
        },
        "main": {
            "name": "main",
            "location": 113,
            "return": [],
            "arguments": {
                "name": [],
                "version": []
            }
        },
        "get_actions.get_suffix": {
            "name": "get_suffix",
            "location": 95,
            "return": [],
            "arguments": {
                "key": []
            }
        }
    },
    "jdata-master/src/features/helper.py": {
        "create_group_interval_features": {
            "name": "create_group_interval_features",
            "location": 7,
            "return": [],
            "arguments": {
                "train": [],
                "train_pair": [],
                "gp": [],
                "tc": [],
                "suffix": []
            }
        },
        "merge_time_window_agg": {
            "name": "merge_time_window_agg",
            "location": 16,
            "return": [],
            "arguments": {
                "source": [],
                "target": [],
                "rules": [],
                "windows": [],
                "time_column": [],
                "end_time_unix": [],
                "suffix": []
            }
        }
    },
    "jdata-master/src/features/__init__.py": {
        "drop_duplicated_columns": {
            "name": "drop_duplicated_columns",
            "location": 280,
            "return": [],
            "arguments": {
                "df": []
            }
        },
        "count_unique_ratio": {
            "name": "count_unique_ratio",
            "location": 286,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "Feature.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "pd.DataFrame"
                ]
            }
        },
        "Feature.name": {
            "name": "name",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Feature.create": {
            "name": "create",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Feature.create_and_merge": {
            "name": "create_and_merge",
            "location": 25,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "pd.DataFrame"
                ],
                "how": [],
                "suffix": []
            }
        },
        "Feature.concat": {
            "name": "concat",
            "location": 37,
            "return": [],
            "arguments": {
                "rslt": [
                    "List"
                ],
                "axis": [],
                "join": []
            }
        },
        "Feature.get_rename_mapper": {
            "name": "get_rename_mapper",
            "location": 43,
            "return": [
                "Dict"
            ],
            "arguments": {
                "old": [
                    "List"
                ],
                "new": [
                    "List"
                ],
                "suffix": [
                    "str"
                ]
            }
        },
        "Feature.categorical_features": {
            "name": "categorical_features",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "UserItemCrossTimeFeature.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "pd.DataFrame"
                ],
                "user_column": [
                    "str"
                ],
                "item_column": [
                    "str"
                ],
                "time_column": [
                    "str"
                ],
                "end_time": []
            }
        },
        "UserItemCrossTimeFeature.create": {
            "name": "create",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserItemCrossTimeFeature.add_time_diff_features": {
            "name": "add_time_diff_features",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "df": [],
                "ts": []
            }
        },
        "UserItemCrossTimeFeature.get_columns_dict": {
            "name": "get_columns_dict",
            "location": 123,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserItemCrossTimeFeature.categorical_features": {
            "name": "categorical_features",
            "location": 149,
            "return": [],
            "arguments": {}
        },
        "GroupIntervalTimeFeature.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "pd.DataFrame"
                ],
                "group_column": [
                    "List"
                ],
                "time_column": [
                    "str"
                ],
                "shift": [
                    "int"
                ]
            }
        },
        "GroupIntervalTimeFeature.create": {
            "name": "create",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupIntervalTimeFeature.categorical_features": {
            "name": "categorical_features",
            "location": 186,
            "return": [],
            "arguments": {}
        },
        "AggFeature.__init__": {
            "name": "__init__",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "pd.DataFrame"
                ],
                "target": [
                    "pd.DataFrame"
                ],
                "rules": [
                    "List[Dict]"
                ]
            }
        },
        "AggFeature.create": {
            "name": "create",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AggFeature.categorical_features": {
            "name": "categorical_features",
            "location": 233,
            "return": [],
            "arguments": {}
        }
    },
    "jdata-master/src/models/choose_sampler.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [],
            "arguments": {}
        }
    },
    "jdata-master/src/models/metrics.py": {
        "division": {
            "name": "division",
            "location": 7,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "multidim_intersect": {
            "name": "multidim_intersect",
            "location": 13,
            "return": [],
            "arguments": {
                "arr1": [],
                "arr2": []
            }
        },
        "jdata_fscorer": {
            "name": "jdata_fscorer",
            "location": 19,
            "return": [],
            "arguments": {
                "user_sku_pair": []
            }
        },
        "get_jdata_scoring": {
            "name": "get_jdata_scoring",
            "location": 217,
            "return": [],
            "arguments": {
                "user_sku_pair": []
            }
        },
        "jdata_fscorer.f11": {
            "name": "f11",
            "location": 20,
            "return": [],
            "arguments": {
                "pred_pair": [],
                "y_pair": []
            }
        },
        "jdata_fscorer.f12": {
            "name": "f12",
            "location": 31,
            "return": [],
            "arguments": {
                "pred_pair": [],
                "y_pair": []
            }
        },
        "jdata_fscorer.prepare_y_pair": {
            "name": "prepare_y_pair",
            "location": 42,
            "return": [],
            "arguments": {
                "df": []
            }
        },
        "jdata_fscorer.prepare_pair": {
            "name": "prepare_pair",
            "location": 51,
            "return": [],
            "arguments": {
                "clf": [],
                "X": [],
                "y": [],
                "indices": [],
                "threshold": []
            }
        },
        "jdata_fscorer.score": {
            "name": "score",
            "location": 82,
            "return": [],
            "arguments": {
                "clf": [],
                "X": [],
                "y": [],
                "indices": []
            }
        },
        "JDataScore.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "user_sku_pair": [],
                "verbose": []
            }
        },
        "JDataScore.__call__": {
            "name": "__call__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "clf": [],
                "X": [],
                "y": [],
                "indices": []
            }
        },
        "JDataScore.save": {
            "name": "save",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JDataScore.get": {
            "name": "get",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "filter": []
            }
        },
        "JDataScore.f11": {
            "name": "f11",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "pred_pair": [],
                "y_pair": []
            }
        },
        "JDataScore.f12": {
            "name": "f12",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "pred_pair": [],
                "y_pair": []
            }
        },
        "JDataScore.prepare_y_pair": {
            "name": "prepare_y_pair",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "JDataScore.prepare_pair": {
            "name": "prepare_pair",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "clf": [],
                "X": [],
                "y": [],
                "indices": [],
                "threshold": []
            }
        },
        "JDataScore.score": {
            "name": "score",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "clf": [],
                "X": [],
                "y": [],
                "indices": []
            }
        }
    },
    "jdata-master/src/models/monkey_patch.py": {
        "is_use_index": {
            "name": "is_use_index",
            "location": 15,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "use_or_not": {
            "name": "use_or_not",
            "location": 19,
            "return": [],
            "arguments": {
                "use": [],
                "arr": []
            }
        },
        "_fit_and_score": {
            "name": "_fit_and_score",
            "location": 25,
            "return": [],
            "arguments": {
                "estimator": [],
                "X": [],
                "y": [],
                "scorer": [],
                "train": [],
                "test": [],
                "verbose": [],
                "parameters": [],
                "fit_params": [],
                "return_train_score": [],
                "return_parameters": [],
                "return_n_test_samples": [],
                "return_times": [],
                "return_estimator": [],
                "error_score": []
            }
        },
        "_score": {
            "name": "_score",
            "location": 160,
            "return": [],
            "arguments": {
                "estimator": [],
                "X_test": [],
                "y_test": [],
                "scorer": [],
                "is_multimetric": [],
                "indices": []
            }
        },
        "_multimetric_score": {
            "name": "_multimetric_score",
            "location": 192,
            "return": [],
            "arguments": {
                "estimator": [],
                "X_test": [],
                "y_test": [],
                "scorers": [],
                "indices": []
            }
        },
        "run": {
            "name": "run",
            "location": 221,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 259,
            "return": [],
            "arguments": {}
        }
    },
    "jdata-master/src/models/predict_model.py": {},
    "jdata-master/src/models/sampling.py": {
        "sampler": {
            "name": "sampler",
            "location": 23,
            "return": [],
            "arguments": {
                "name": [],
                "ratio": [],
                "random_state": [],
                "return_indices": []
            }
        },
        "Sampler.name": {
            "name": "name",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sampler.fit_sample": {
            "name": "fit_sample",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "X": [],
                "y": []
            }
        }
    },
    "jdata-master/src/models/train_model.py": {},
    "jdata-master/src/models/__init__.py": {
        "get_X_y": {
            "name": "get_X_y",
            "location": 9,
            "return": [],
            "arguments": {
                "dataset": []
            }
        },
        "merge_scoring_metrics": {
            "name": "merge_scoring_metrics",
            "location": 15,
            "return": [],
            "arguments": {
                "scores": [],
                "scorer": []
            }
        },
        "score_whole_dataset": {
            "name": "score_whole_dataset",
            "location": 24,
            "return": [],
            "arguments": {
                "clf": [],
                "dataset": [],
                "pre_train": []
            }
        },
        "Model.name": {
            "name": "name",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.train": {
            "name": "train",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "X": [],
                "y": []
            }
        },
        "Model.predict": {
            "name": "predict",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "Model.evaluate": {
            "name": "evaluate",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "y": [],
                "pred": []
            }
        },
        "Model.dump": {
            "name": "dump",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.scale_pos_weight": {
            "name": "scale_pos_weight",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeModel.get_tree_feature": {
            "name": "get_tree_feature",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeModel.get_feature_importance": {
            "name": "get_feature_importance",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeModel.plot_importance": {
            "name": "plot_importance",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "jdata-master/src/visualization/visualize.py": {},
    "jdata-master/src/visualization/__init__.py": {},
    "jdata-master/tests/__init__.py": {},
    "jdata-master/tests/models/test_metrics.py": {
        "get_jdata_test_cases": {
            "name": "get_jdata_test_cases",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_jdata_fscorer": {
            "name": "test_jdata_fscorer",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_jdata_fscorer_class": {
            "name": "test_jdata_fscorer_class",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "MockEstimatorWithPredefinedPrediction.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "pred_map": []
            }
        },
        "MockEstimatorWithPredefinedPrediction.fit": {
            "name": "fit",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "X": [],
                "y": []
            }
        },
        "MockEstimatorWithPredefinedPrediction._decision_function": {
            "name": "_decision_function",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "MockEstimatorWithPredefinedPrediction.predict": {
            "name": "predict",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "X": [],
                "threshold": []
            }
        },
        "MockEstimatorWithPredefinedPrediction.predict_proba": {
            "name": "predict_proba",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "MockEstimatorWithPredefinedPrediction.set": {
            "name": "set",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "X": [],
                "pred": []
            }
        },
        "MockEstimatorWithPredefinedPrediction.hash": {
            "name": "hash",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "jdata-master/tests/models/__init__.py": {}
}
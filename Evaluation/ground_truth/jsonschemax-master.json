{
    "jsonschemax-master/setup.py": {},
    "jsonschemax-master/jsonschemax/compilation.py": {
        "compile": {
            "name": "compile",
            "location": 166,
            "return": [],
            "arguments": {
                "schema": []
            }
        },
        "Validation.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Validation.init": {
            "name": "init",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Validation.evaluate": {
            "name": "evaluate",
            "location": 56,
            "return": [
                "Callback"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "base_uri": [
                    "str"
                ],
                "ref_list": [
                    "RefList"
                ],
                "is_root_evaluate": [
                    "bool"
                ]
            }
        },
        "Validation.check_schema": {
            "name": "check_schema",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "schema": []
            }
        },
        "Validation.__call__": {
            "name": "__call__",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "Validation.schema": {
            "name": "schema",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "jsonschemax-master/jsonschemax/errors.py": {},
    "jsonschemax-master/jsonschemax/keywords.py": {
        "kw_deco": {
            "name": "kw_deco",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "_definitions": {
            "name": "_definitions",
            "location": 93,
            "return": [
                "Callback"
            ],
            "arguments": {}
        },
        "_type": {
            "name": "_type",
            "location": 100,
            "return": [
                "Callback"
            ],
            "arguments": {}
        },
        "_enum": {
            "name": "_enum",
            "location": 122,
            "return": [
                "Callback"
            ],
            "arguments": {}
        },
        "_const": {
            "name": "_const",
            "location": 143,
            "return": [
                "Callback"
            ],
            "arguments": {}
        },
        "_multiple_of": {
            "name": "_multiple_of",
            "location": 159,
            "return": [
                "Callback"
            ],
            "arguments": {}
        },
        "_maximum": {
            "name": "_maximum",
            "location": 173,
            "return": [
                "Callback"
            ],
            "arguments": {}
        },
        "_exclusive_maximum": {
            "name": "_exclusive_maximum",
            "location": 186,
            "return": [
                "Callback"
            ],
            "arguments": {}
        },
        "_minimum": {
            "name": "_minimum",
            "location": 199,
            "return": [
                "Callback"
            ],
            "arguments": {}
        },
        "_exclusive_minimum": {
            "name": "_exclusive_minimum",
            "location": 212,
            "return": [
                "Callback"
            ],
            "arguments": {}
        },
        "_max_length": {
            "name": "_max_length",
            "location": 228,
            "return": [
                "Callback"
            ],
            "arguments": {}
        },
        "_min_length": {
            "name": "_min_length",
            "location": 241,
            "return": [
                "Callback"
            ],
            "arguments": {}
        },
        "_pattern": {
            "name": "_pattern",
            "location": 254,
            "return": [
                "Callback"
            ],
            "arguments": {}
        },
        "_items": {
            "name": "_items",
            "location": 270,
            "return": [
                "Callback"
            ],
            "arguments": {}
        },
        "_additional_items": {
            "name": "_additional_items",
            "location": 306,
            "return": [
                "Callback"
            ],
            "arguments": {}
        },
        "_max_items": {
            "name": "_max_items",
            "location": 331,
            "return": [
                "Callback"
            ],
            "arguments": {}
        },
        "_min_items": {
            "name": "_min_items",
            "location": 344,
            "return": [
                "Callback"
            ],
            "arguments": {}
        },
        "_unique_items": {
            "name": "_unique_items",
            "location": 357,
            "return": [
                "Callback"
            ],
            "arguments": {}
        },
        "_contains": {
            "name": "_contains",
            "location": 377,
            "return": [
                "Callback"
            ],
            "arguments": {}
        },
        "_max_properties": {
            "name": "_max_properties",
            "location": 401,
            "return": [
                "Callback"
            ],
            "arguments": {}
        },
        "_min_properties": {
            "name": "_min_properties",
            "location": 414,
            "return": [
                "Callback"
            ],
            "arguments": {}
        },
        "_required": {
            "name": "_required",
            "location": 427,
            "return": [
                "Callback"
            ],
            "arguments": {}
        },
        "_properties": {
            "name": "_properties",
            "location": 445,
            "return": [
                "Callback"
            ],
            "arguments": {}
        },
        "_pattern_properties": {
            "name": "_pattern_properties",
            "location": 470,
            "return": [
                "Callback"
            ],
            "arguments": {}
        },
        "_additional_properties": {
            "name": "_additional_properties",
            "location": 496,
            "return": [
                "Callback"
            ],
            "arguments": {}
        },
        "_dependencies": {
            "name": "_dependencies",
            "location": 531,
            "return": [
                "Callback"
            ],
            "arguments": {}
        },
        "_property_names": {
            "name": "_property_names",
            "location": 572,
            "return": [
                "Callback"
            ],
            "arguments": {}
        },
        "_if": {
            "name": "_if",
            "location": 589,
            "return": [
                "Callback"
            ],
            "arguments": {}
        },
        "_then": {
            "name": "_then",
            "location": 615,
            "return": [
                "Callback"
            ],
            "arguments": {}
        },
        "_else": {
            "name": "_else",
            "location": 629,
            "return": [
                "Callback"
            ],
            "arguments": {}
        },
        "_all_of": {
            "name": "_all_of",
            "location": 646,
            "return": [
                "Callback"
            ],
            "arguments": {}
        },
        "_any_of": {
            "name": "_any_of",
            "location": 664,
            "return": [
                "Callback"
            ],
            "arguments": {}
        },
        "_one_of": {
            "name": "_one_of",
            "location": 682,
            "return": [
                "Callback"
            ],
            "arguments": {}
        },
        "_not": {
            "name": "_not",
            "location": 707,
            "return": [
                "Callback"
            ],
            "arguments": {}
        },
        "kw_deco.wrapper": {
            "name": "wrapper",
            "location": 27,
            "return": [],
            "arguments": {
                "keyword_func": []
            }
        },
        "_enum.callback": {
            "name": "callback",
            "location": 133,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "_additional_items.callback": {
            "name": "callback",
            "location": 319,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "_unique_items.callback": {
            "name": "callback",
            "location": 367,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "_contains.callback": {
            "name": "callback",
            "location": 388,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "_required.callback": {
            "name": "callback",
            "location": 437,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "_properties.final_callback": {
            "name": "final_callback",
            "location": 459,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "_pattern_properties.callback": {
            "name": "callback",
            "location": 484,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "_additional_properties.callback": {
            "name": "callback",
            "location": 508,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "_if.callback": {
            "name": "callback",
            "location": 601,
            "return": [
                "bool"
            ],
            "arguments": {
                "instance": []
            }
        },
        "_one_of.callback": {
            "name": "callback",
            "location": 696,
            "return": [
                "bool"
            ],
            "arguments": {
                "instance": []
            }
        },
        "kw_deco.wrapper.new_keyword_func": {
            "name": "new_keyword_func",
            "location": 28,
            "return": [
                "Callback"
            ],
            "arguments": {}
        },
        "_type.f": {
            "name": "f",
            "location": 112,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "_items.callback": {
            "name": "callback",
            "location": 296,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "_dependencies.inner_callback": {
            "name": "inner_callback",
            "location": 560,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "kw_deco.wrapper.new_keyword_func.new_callback": {
            "name": "new_callback",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {
                "instance": []
            }
        }
    },
    "jsonschemax-master/jsonschemax/meta_validation.py": {},
    "jsonschemax-master/jsonschemax/types.py": {
        "is_integer": {
            "name": "is_integer",
            "location": 9,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "is_null": {
            "name": "is_null",
            "location": 20,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "is_boolean": {
            "name": "is_boolean",
            "location": 24,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "is_object": {
            "name": "is_object",
            "location": 28,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "is_array": {
            "name": "is_array",
            "location": 32,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "is_number": {
            "name": "is_number",
            "location": 36,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "is_string": {
            "name": "is_string",
            "location": 40,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "jsonschemax-master/jsonschemax/uri.py": {
        "is_uri": {
            "name": "is_uri",
            "location": 27,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "is_abs_uri": {
            "name": "is_abs_uri",
            "location": 32,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "resolve_id": {
            "name": "resolve_id",
            "location": 37,
            "return": [],
            "arguments": {
                "base_uri": [],
                "uri_reference": []
            }
        }
    },
    "jsonschemax-master/jsonschemax/utils.py": {
        "get_meta_schema": {
            "name": "get_meta_schema",
            "location": 83,
            "return": [
                "dict"
            ],
            "arguments": {
                "version": [
                    "str"
                ]
            }
        },
        "run_eval_result": {
            "name": "run_eval_result",
            "location": 94,
            "return": [
                "bool"
            ],
            "arguments": {
                "eval_result": [
                    "Union[(bool, Callable[([], bool)])]"
                ]
            }
        },
        "split_uri": {
            "name": "split_uri",
            "location": 99,
            "return": [],
            "arguments": {
                "uri": []
            }
        },
        "always_true_callback": {
            "name": "always_true_callback",
            "location": 116,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "JsonPointer.parse_json_pointer": {
            "name": "parse_json_pointer",
            "location": 31,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": [],
                "json_pointer": [
                    "str"
                ]
            }
        },
        "JsonPointer.evaluate_tokens": {
            "name": "evaluate_tokens",
            "location": 50,
            "return": [
                "Tuple[(bool, Any)]"
            ],
            "arguments": {
                "cls": [],
                "json_doc": [],
                "json_pointer_tokens": [
                    "List[str]"
                ]
            }
        },
        "JsonPointer.evaluate": {
            "name": "evaluate",
            "location": 76,
            "return": [
                "Tuple[(bool, Any)]"
            ],
            "arguments": {
                "cls": [],
                "json_doc": [],
                "json_pointer": [
                    "str"
                ]
            }
        }
    },
    "jsonschemax-master/jsonschemax/__init__.py": {},
    "jsonschemax-master/jsonschemax/meta_schemas/__init__.py": {},
    "jsonschemax-master/tests/test_invalid_schemas.py": {
        "TestInvalidSchemas.assert_invalid_schema": {
            "name": "assert_invalid_schema",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "schema": []
            }
        },
        "TestInvalidSchemas.assert_valid_schema": {
            "name": "assert_valid_schema",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "schema": []
            }
        },
        "TestInvalidSchemas.test_wrong_keyword_value": {
            "name": "test_wrong_keyword_value",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInvalidSchemas.test_wrong_ref": {
            "name": "test_wrong_ref",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "jsonschemax-master/tests/test_jsonschema_test_suite.py": {
        "run": {
            "name": "run",
            "location": 13,
            "return": [],
            "arguments": {
                "cmd": [],
                "check": [],
                "shell": []
            }
        },
        "download_suite": {
            "name": "download_suite",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "load_jsons": {
            "name": "load_jsons",
            "location": 25,
            "return": [],
            "arguments": {
                "version": []
            }
        },
        "load_remote_schemas": {
            "name": "load_remote_schemas",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "get_tests": {
            "name": "get_tests",
            "location": 49,
            "return": [],
            "arguments": {
                "version": []
            }
        },
        "get_remote_schemas": {
            "name": "get_remote_schemas",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "JsonschemaTestCase.setUp": {
            "name": "setUp",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JsonschemaTestCase.run_test_cases": {
            "name": "run_test_cases",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "version": []
            }
        },
        "JsonschemaTestCase.test_draft7": {
            "name": "test_draft7",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "jsonschemax-master/tests/test_json_pointer.py": {
        "JSONPointerTestCase.test_rfc6901": {
            "name": "test_rfc6901",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONPointerTestCase.test_escape": {
            "name": "test_escape",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "jsonschemax-master/tests/test_meta_schemas_compilation.py": {},
    "jsonschemax-master/tests/test_types.py": {
        "TestTypes.test_is_array": {
            "name": "test_is_array",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTypes.test_is_boolean": {
            "name": "test_is_boolean",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTypes.test_is_integer": {
            "name": "test_is_integer",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTypes.test_is_null": {
            "name": "test_is_null",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTypes.test_is_number": {
            "name": "test_is_number",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTypes.test_is_object": {
            "name": "test_is_object",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTypes.test_is_string": {
            "name": "test_is_string",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTypes.test_is_any": {
            "name": "test_is_any",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    }
}
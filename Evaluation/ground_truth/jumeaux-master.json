{
    "jumeaux-master/e2e/conftest.py": {
        "clean_workspace": {
            "name": "clean_workspace",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "clean_ws": {
            "name": "clean_ws",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "boot_server": {
            "name": "boot_server",
            "location": 28,
            "return": [],
            "arguments": {}
        }
    },
    "jumeaux-master/e2e/main.py": {
        "cmd_jumeaux": {
            "name": "cmd_jumeaux",
            "location": 24,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "assert_exists": {
            "name": "assert_exists",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "assert_exists_in_latest": {
            "name": "assert_exists_in_latest",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "assert_not_exists": {
            "name": "assert_not_exists",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "assert_not_exists_in_latest": {
            "name": "assert_not_exists_in_latest",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "ls_recursively": {
            "name": "ls_recursively",
            "location": 54,
            "return": [],
            "arguments": {
                "path": [
                    "str"
                ],
                "depth": [
                    "int"
                ]
            }
        },
        "load_latest_report": {
            "name": "load_latest_report",
            "location": 63,
            "return": [
                "Report"
            ],
            "arguments": {}
        },
        "TestHelp.test_usage": {
            "name": "test_usage",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInit.test_with_no_args": {
            "name": "test_with_no_args",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInit.test_with_invalid_args": {
            "name": "test_with_invalid_args",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInit.test_simple": {
            "name": "test_simple",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_simple": {
            "name": "test_simple",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_path_custom": {
            "name": "test_path_custom",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_query_custom": {
            "name": "test_query_custom",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_all_same": {
            "name": "test_all_same",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_xml": {
            "name": "test_xml",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_html": {
            "name": "test_html",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_ignore_order": {
            "name": "test_ignore_order",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_ignore": {
            "name": "test_ignore",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_force_json": {
            "name": "test_force_json",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_request_headers": {
            "name": "test_request_headers",
            "location": 281,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_judge_response_headers": {
            "name": "test_judge_response_headers",
            "location": 300,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_with_log_level_options": {
            "name": "test_with_log_level_options",
            "location": 314,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_with_threads": {
            "name": "test_with_threads",
            "location": 323,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_with_processes": {
            "name": "test_with_processes",
            "location": 338,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_root_array": {
            "name": "test_root_array",
            "location": 350,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_notifier": {
            "name": "test_notifier",
            "location": 363,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_post": {
            "name": "test_post",
            "location": 377,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_with_empty_path": {
            "name": "test_with_empty_path",
            "location": 415,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_with_notifiers": {
            "name": "test_with_notifiers",
            "location": 432,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_query_custom.time": {
            "name": "time",
            "location": 179,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "jumeaux-master/jumeaux/executor.py": {
        "write_to_file": {
            "name": "write_to_file",
            "location": 128,
            "return": [],
            "arguments": {
                "name": [],
                "dir": [],
                "body": []
            }
        },
        "make_dir": {
            "name": "make_dir",
            "location": 133,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "http_get": {
            "name": "http_get",
            "location": 138,
            "return": [],
            "arguments": {
                "args": [
                    "Tuple[(Any, str, TDict[str], TOption[Proxy])]"
                ]
            }
        },
        "http_post": {
            "name": "http_post",
            "location": 147,
            "return": [],
            "arguments": {
                "args": [
                    "Tuple[(Any, str, TOption[str], TOption[dict], TOption[dict], TDict[str], TOption[Proxy])]"
                ]
            }
        },
        "merge_headers": {
            "name": "merge_headers",
            "location": 164,
            "return": [
                "TDict[str]"
            ],
            "arguments": {
                "access_point_base": [
                    "TDict[str]"
                ],
                "this_request": [
                    "TDict[str]"
                ]
            }
        },
        "has_different": {
            "name": "has_different",
            "location": 172,
            "return": [
                "bool"
            ],
            "arguments": {
                "one_headers": [
                    "dict"
                ],
                "other_headers": [
                    "dict"
                ],
                "ignore_keys": [
                    "List[str]"
                ]
            }
        },
        "concurrent_request": {
            "name": "concurrent_request",
            "location": 178,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "res2res": {
            "name": "res2res",
            "location": 222,
            "return": [
                "Res2ResAddOnPayload"
            ],
            "arguments": {
                "res": [
                    "Response"
                ],
                "req": [
                    "Request"
                ]
            }
        },
        "res2dict": {
            "name": "res2dict",
            "location": 228,
            "return": [
                "TOption[dict]"
            ],
            "arguments": {
                "res": [
                    "Response"
                ]
            }
        },
        "judgement": {
            "name": "judgement",
            "location": 234,
            "return": [
                "Tuple[(Status, TOption[TDict[DiffKeys]])]"
            ],
            "arguments": {
                "r_one": [
                    "Response"
                ],
                "r_other": [
                    "Response"
                ],
                "d_one": [
                    "TOption[DictOrList]"
                ],
                "d_other": [
                    "TOption[DictOrList]"
                ],
                "name": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "qs": [
                    "TDict[TList[str]]"
                ],
                "headers": [
                    "TDict[str]"
                ],
                "diffs_by_cognition": [
                    "Optional[TDict[DiffKeys]]"
                ],
                "judge_response_header": [
                    "bool"
                ],
                "ignore_response_header_keys": [
                    "TList[str]"
                ]
            }
        },
        "store_criterion": {
            "name": "store_criterion",
            "location": 281,
            "return": [],
            "arguments": {
                "status": [
                    "Status"
                ],
                "name": [
                    "str"
                ],
                "req": [
                    "Request"
                ],
                "r_one": [
                    "Response"
                ],
                "r_other": [
                    "Response"
                ]
            }
        },
        "dump": {
            "name": "dump",
            "location": 295,
            "return": [],
            "arguments": {
                "res": [
                    "Response"
                ]
            }
        },
        "to_sec": {
            "name": "to_sec",
            "location": 301,
            "return": [],
            "arguments": {
                "elapsed": []
            }
        },
        "select_key_as_case_insensitive": {
            "name": "select_key_as_case_insensitive",
            "location": 305,
            "return": [
                "str"
            ],
            "arguments": {
                "target_key_pattern": [
                    "str"
                ],
                "qs": [
                    "TDict[TList[str]]"
                ]
            }
        },
        "create_query_string": {
            "name": "create_query_string",
            "location": 315,
            "return": [
                "str"
            ],
            "arguments": {
                "qs": [
                    "TDict[TList[str]]"
                ],
                "cqs": [
                    "TOption[QueryCustomization]"
                ],
                "encoding": [
                    "str"
                ]
            }
        },
        "challenge": {
            "name": "challenge",
            "location": 337,
            "return": [
                "dict"
            ],
            "arguments": {
                "arg_dict": [
                    "dict"
                ]
            }
        },
        "create_concurrent_executor": {
            "name": "create_concurrent_executor",
            "location": 614,
            "return": [
                "Tuple[(Any, Concurrency)]"
            ],
            "arguments": {
                "config": [
                    "Config"
                ]
            }
        },
        "exec": {
            "name": "exec",
            "location": 629,
            "return": [
                "Report"
            ],
            "arguments": {
                "config": [
                    "Config"
                ],
                "reqs": [
                    "TList[Request]"
                ],
                "key": [
                    "str"
                ],
                "retry_hash": [
                    "Optional[str]"
                ]
            }
        },
        "__run": {
            "name": "__run",
            "location": 743,
            "return": [],
            "arguments": {
                "config": [
                    "Config"
                ],
                "origin_reqs": [
                    "TList[Request]"
                ],
                "addon_executor": [
                    "AddOnExecutor"
                ],
                "hash": [
                    "str"
                ],
                "retry_hash": [
                    "Optional[str]"
                ]
            }
        },
        "hash_from_args": {
            "name": "hash_from_args",
            "location": 786,
            "return": [
                "str"
            ],
            "arguments": {
                "args_str": [
                    "str"
                ]
            }
        },
        "retry": {
            "name": "retry",
            "location": 790,
            "return": [],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 810,
            "return": [],
            "arguments": {}
        },
        "select_key_as_case_insensitive.matcher": {
            "name": "matcher",
            "location": 309,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "jumeaux-master/jumeaux/logger.py": {
        "create_logger_config": {
            "name": "create_logger_config",
            "location": 36,
            "return": [],
            "arguments": {
                "level": [
                    "LogLevel"
                ]
            }
        },
        "init_logger": {
            "name": "init_logger",
            "location": 53,
            "return": [],
            "arguments": {
                "v_num": [
                    "int"
                ]
            }
        },
        "Logger.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Logger.info_lv1": {
            "name": "info_lv1",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "Logger.info_lv2": {
            "name": "info_lv2",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "Logger.info_lv3": {
            "name": "info_lv3",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "Logger.warning": {
            "name": "warning",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "Logger.error": {
            "name": "error",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "exit": []
            }
        },
        "Logger.debug": {
            "name": "debug",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        }
    },
    "jumeaux-master/jumeaux/main.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [],
            "arguments": {}
        }
    },
    "jumeaux-master/jumeaux/models.py": {
        "to_json": {
            "name": "to_json",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "DictOrList"
                ]
            }
        },
        "Proxy.from_host": {
            "name": "from_host",
            "location": 63,
            "return": [
                "'Proxy'"
            ],
            "arguments": {
                "cls": [],
                "host": [
                    "TOption[str]"
                ]
            }
        },
        "Response.text": {
            "name": "text",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.byte": {
            "name": "byte",
            "location": 87,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.content_type": {
            "name": "content_type",
            "location": 91,
            "return": [
                "TOption[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.mime_type": {
            "name": "mime_type",
            "location": 95,
            "return": [
                "TOption[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.charset": {
            "name": "charset",
            "location": 99,
            "return": [
                "TOption[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.ok": {
            "name": "ok",
            "location": 103,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.___headers": {
            "name": "___headers",
            "location": 107,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "Response._decide_encoding": {
            "name": "_decide_encoding",
            "location": 111,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "cls": [],
                "res": [
                    "Any"
                ],
                "default_encoding": [
                    "TOption[str]"
                ]
            }
        },
        "Response._to_type": {
            "name": "_to_type",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "res": [
                    "Any"
                ]
            }
        },
        "Response.from_requests": {
            "name": "from_requests",
            "location": 135,
            "return": [
                "'Response'"
            ],
            "arguments": {
                "cls": [],
                "res": [
                    "Any"
                ],
                "default_encoding": [
                    "TOption[str]"
                ]
            }
        },
        "DiffKeys.is_empty": {
            "name": "is_empty",
            "location": 209,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiffKeys.empty": {
            "name": "empty",
            "location": 213,
            "return": [
                "'DiffKeys'"
            ],
            "arguments": {
                "cls": []
            }
        },
        "JudgementAddOnPayload.regard_as_same": {
            "name": "regard_as_same",
            "location": 313,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FinalAddOnPayload.result_path": {
            "name": "result_path",
            "location": 344,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jumeaux-master/jumeaux/utils.py": {
        "exact_match": {
            "name": "exact_match",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "target": [
                    "str"
                ],
                "regexp": [
                    "str"
                ]
            }
        },
        "now": {
            "name": "now",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "mill_seconds_until": {
            "name": "mill_seconds_until",
            "location": 26,
            "return": [
                "float"
            ],
            "arguments": {
                "from_": [
                    "datetime"
                ]
            }
        },
        "to_jumeaux_xpath": {
            "name": "to_jumeaux_xpath",
            "location": 31,
            "return": [],
            "arguments": {
                "xpath": [
                    "str"
                ]
            }
        },
        "get_by_diff_key": {
            "name": "get_by_diff_key",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "dic": [
                    "dict"
                ],
                "diff_key": [
                    "str"
                ]
            }
        },
        "calc_distance_km": {
            "name": "calc_distance_km",
            "location": 46,
            "return": [
                "float"
            ],
            "arguments": {
                "wgs84_deg_lat1": [
                    "float"
                ],
                "wgs84_deg_lon1": [
                    "float"
                ],
                "wgs84_deg_lat2": [
                    "float"
                ],
                "wgs84_deg_lon2": [
                    "float"
                ]
            }
        },
        "equals_without_host": {
            "name": "equals_without_host",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "one": [
                    "str"
                ],
                "other": [
                    "str"
                ]
            }
        },
        "when_filter": {
            "name": "when_filter",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "when": [
                    "str"
                ],
                "data": [
                    "dict"
                ]
            }
        },
        "when_optional_filter": {
            "name": "when_optional_filter",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "when": [
                    "TOption[str]"
                ],
                "data": [
                    "dict"
                ]
            }
        },
        "jinja2_format": {
            "name": "jinja2_format",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "fmt": [
                    "str"
                ],
                "data": [
                    "dict"
                ]
            }
        },
        "get_jinja2_format_error": {
            "name": "get_jinja2_format_error",
            "location": 86,
            "return": [
                "TOption[str]"
            ],
            "arguments": {
                "fmt": [
                    "str"
                ]
            }
        },
        "parse_datetime_dsl": {
            "name": "parse_datetime_dsl",
            "location": 94,
            "return": [],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/__init__.py": {},
    "jumeaux-master/jumeaux/addons/models.py": {},
    "jumeaux-master/jumeaux/addons/parser.py": {
        "HTMLToDictParser.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "raise_exception": []
            }
        },
        "HTMLToDictParser.do": {
            "name": "do",
            "location": 20,
            "return": [],
            "arguments": {
                "content": [],
                "raise_exception": []
            }
        },
        "HTMLToDictParser.handle_starttag": {
            "name": "handle_starttag",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "tag": [],
                "attrs": []
            }
        },
        "HTMLToDictParser.handle_endtag": {
            "name": "handle_endtag",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "tag": []
            }
        },
        "HTMLToDictParser.handle_data": {
            "name": "handle_data",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "HTMLToDictParser.clean": {
            "name": "clean",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "values": []
            }
        }
    },
    "jumeaux-master/jumeaux/addons/__init__.py": {
        "create_addon": {
            "name": "create_addon",
            "location": 28,
            "return": [],
            "arguments": {
                "a": [
                    "Addon"
                ],
                "layer": [
                    "str"
                ]
            }
        },
        "AddOnExecutor.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "addons": [
                    "Addons"
                ]
            }
        },
        "AddOnExecutor.apply_log2reqs": {
            "name": "apply_log2reqs",
            "location": 78,
            "return": [
                "TList[Request]"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Log2ReqsAddOnPayload"
                ]
            }
        },
        "AddOnExecutor.apply_reqs2reqs": {
            "name": "apply_reqs2reqs",
            "location": 81,
            "return": [
                "Reqs2ReqsAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Reqs2ReqsAddOnPayload"
                ],
                "config": [
                    "Config"
                ]
            }
        },
        "AddOnExecutor.apply_res2res": {
            "name": "apply_res2res",
            "location": 86,
            "return": [
                "Res2ResAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Res2ResAddOnPayload"
                ]
            }
        },
        "AddOnExecutor.apply_res2dict": {
            "name": "apply_res2dict",
            "location": 89,
            "return": [
                "Res2DictAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Res2DictAddOnPayload"
                ]
            }
        },
        "AddOnExecutor.apply_judgement": {
            "name": "apply_judgement",
            "location": 92,
            "return": [
                "JudgementAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "JudgementAddOnPayload"
                ],
                "reference": [
                    "JudgementAddOnReference"
                ]
            }
        },
        "AddOnExecutor.apply_store_criterion": {
            "name": "apply_store_criterion",
            "location": 97,
            "return": [
                "StoreCriterionAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "StoreCriterionAddOnPayload"
                ],
                "reference": [
                    "StoreCriterionAddOnReference"
                ]
            }
        },
        "AddOnExecutor.apply_dump": {
            "name": "apply_dump",
            "location": 102,
            "return": [
                "DumpAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "DumpAddOnPayload"
                ]
            }
        },
        "AddOnExecutor.apply_did_challenge": {
            "name": "apply_did_challenge",
            "location": 105,
            "return": [
                "DidChallengeAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "DidChallengeAddOnPayload"
                ],
                "reference": [
                    "DidChallengeAddOnReference"
                ]
            }
        },
        "AddOnExecutor.apply_final": {
            "name": "apply_final",
            "location": 110,
            "return": [
                "FinalAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "FinalAddOnPayload"
                ],
                "reference": [
                    "FinalAddOnReference"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/did_challenge/sleep.py": {
        "Executor.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 24,
            "return": [
                "DidChallengeAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "DidChallengeAddOnPayload"
                ],
                "referenece": [
                    "DidChallengeAddOnReference"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/did_challenge/tag.py": {
        "Executor.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 37,
            "return": [
                "DidChallengeAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "DidChallengeAddOnPayload"
                ],
                "referenece": [
                    "DidChallengeAddOnReference"
                ]
            }
        },
        "Executor.exec.to_dict": {
            "name": "to_dict",
            "location": 40,
            "return": [
                "TDict"
            ],
            "arguments": {
                "trial": [
                    "Trial"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/did_challenge/__init__.py": {
        "DidChallengeExecutor.exec": {
            "name": "exec",
            "location": 6,
            "return": [
                "DidChallengeAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "DidChallengeAddOnPayload"
                ],
                "referenece": [
                    "DidChallengeAddOnReference"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/dump/encoding.py": {
        "Executor.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 22,
            "return": [
                "DumpAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "DumpAddOnPayload"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/dump/html.py": {
        "pretty": {
            "name": "pretty",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "html": [
                    "str"
                ]
            }
        },
        "Executor.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 27,
            "return": [
                "DumpAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "DumpAddOnPayload"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/dump/json.py": {
        "Executor.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 20,
            "return": [
                "DumpAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "DumpAddOnPayload"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/dump/xml.py": {
        "pretty": {
            "name": "pretty",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "xmls": [
                    "str"
                ]
            }
        },
        "Executor.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 37,
            "return": [
                "DumpAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "DumpAddOnPayload"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/dump/__init__.py": {
        "DumpExecutor.exec": {
            "name": "exec",
            "location": 6,
            "return": [
                "DumpAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "DumpAddOnPayload"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/final/csv.py": {
        "Executor.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 24,
            "return": [
                "FinalAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "FinalAddOnPayload"
                ],
                "reference": [
                    "FinalAddOnReference"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/final/json.py": {
        "Executor.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 21,
            "return": [
                "FinalAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "FinalAddOnPayload"
                ],
                "reference": [
                    "FinalAddOnReference"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/final/miroir.py": {
        "Executor.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 55,
            "return": [
                "FinalAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "FinalAddOnPayload"
                ],
                "reference": [
                    "FinalAddOnReference"
                ]
            }
        },
        "Executor.exec.create_endpoint_url": {
            "name": "create_endpoint_url",
            "location": 74,
            "return": [],
            "arguments": {
                "port_as_localstack": [
                    "int"
                ]
            }
        },
        "Executor.exec.upload_responses": {
            "name": "upload_responses",
            "location": 119,
            "return": [],
            "arguments": {
                "which": [
                    "str"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/final/notify.py": {
        "send": {
            "name": "send",
            "location": 28,
            "return": [
                "TOption[str]"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "notifier": [
                    "Notifier"
                ]
            }
        },
        "need_to_notify": {
            "name": "need_to_notify",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "notify": [
                    "Notify"
                ],
                "report": [
                    "Report"
                ]
            }
        },
        "Executor.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 60,
            "return": [
                "FinalAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "FinalAddOnPayload"
                ],
                "reference": [
                    "FinalAddOnReference"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/final/summary.py": {
        "Executor.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 21,
            "return": [
                "FinalAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "FinalAddOnPayload"
                ],
                "reference": [
                    "FinalAddOnReference"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/final/viewer.py": {
        "Executor.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 19,
            "return": [
                "FinalAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "FinalAddOnPayload"
                ],
                "reference": [
                    "FinalAddOnReference"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/final/__init__.py": {
        "FinalExecutor.exec": {
            "name": "exec",
            "location": 6,
            "return": [
                "FinalAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "FinalAddOnPayload"
                ],
                "reference": [
                    "FinalAddOnReference"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/judgement/ignore.py": {
        "match": {
            "name": "match",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "case": [
                    "Case"
                ],
                "one": [
                    "dict"
                ],
                "other": [
                    "dict"
                ]
            }
        },
        "to_matched_unknown": {
            "name": "to_matched_unknown",
            "location": 51,
            "return": [
                "DiffKeys"
            ],
            "arguments": {
                "unknown_diff": [
                    "DiffKeys"
                ],
                "condition": [
                    "Condition"
                ],
                "ref": [
                    "JudgementAddOnReference"
                ]
            }
        },
        "merge_diff_keys": {
            "name": "merge_diff_keys",
            "location": 75,
            "return": [
                "TDict[DiffKeys]"
            ],
            "arguments": {
                "diffs_by_cognition": [
                    "TDict[DiffKeys]"
                ],
                "matched_unknown": [
                    "DiffKeys"
                ],
                "title": [
                    "str"
                ]
            }
        },
        "fold_diffs_by_cognition": {
            "name": "fold_diffs_by_cognition",
            "location": 112,
            "return": [
                "TDict[DiffKeys]"
            ],
            "arguments": {
                "diffs_by_cognition": [
                    "TDict[DiffKeys]"
                ],
                "ignore": [
                    "Ignore"
                ],
                "ref": [
                    "JudgementAddOnReference"
                ]
            }
        },
        "validate_config": {
            "name": "validate_config",
            "location": 138,
            "return": [],
            "arguments": {
                "config": [
                    "Config"
                ]
            }
        },
        "Executor.__init__": {
            "name": "__init__",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 161,
            "return": [
                "JudgementAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "JudgementAddOnPayload"
                ],
                "reference": [
                    "JudgementAddOnReference"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/judgement/same.py": {
        "Config.validate": {
            "name": "validate",
            "location": 18,
            "return": [],
            "arguments": {
                "cls": [],
                "config": []
            }
        },
        "Executor.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 30,
            "return": [
                "JudgementAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "JudgementAddOnPayload"
                ],
                "reference": [
                    "JudgementAddOnReference"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/judgement/__init__.py": {
        "JudgementExecutor.exec": {
            "name": "exec",
            "location": 6,
            "return": [
                "JudgementAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "JudgementAddOnPayload"
                ],
                "reference": [
                    "JudgementAddOnReference"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/log2reqs/csv.py": {
        "Executor.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 24,
            "return": [
                "TList[Request]"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Log2ReqsAddOnPayload"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/log2reqs/json.py": {
        "Executor.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 18,
            "return": [
                "TList[Request]"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Log2ReqsAddOnPayload"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/log2reqs/plain.py": {
        "guess_url_encoding": {
            "name": "guess_url_encoding",
            "location": 23,
            "return": [
                "TOption[str]"
            ],
            "arguments": {
                "query_str": [
                    "str"
                ],
                "encodings": [
                    "TList[str]"
                ]
            }
        },
        "Executor.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 38,
            "return": [
                "TList[Request]"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Log2ReqsAddOnPayload"
                ]
            }
        },
        "Executor.exec.line_to_request": {
            "name": "line_to_request",
            "location": 39,
            "return": [
                "Request"
            ],
            "arguments": {
                "line": [
                    "str"
                ],
                "seq": [
                    "int"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/log2reqs/yaml.py": {
        "Executor.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 18,
            "return": [
                "TList[Request]"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Log2ReqsAddOnPayload"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/log2reqs/__init__.py": {
        "Log2ReqsExecutor.exec": {
            "name": "exec",
            "location": 8,
            "return": [
                "TList[Request]"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Log2ReqsAddOnPayload"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/reqs2reqs/add.py": {
        "Location.join": {
            "name": "join",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Executor.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 28,
            "return": [
                "Reqs2ReqsAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Reqs2ReqsAddOnPayload"
                ],
                "config": [
                    "JumeauxConfig"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/reqs2reqs/empty_guard.py": {
        "send": {
            "name": "send",
            "location": 27,
            "return": [
                "TOption[str]"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "notifier": [
                    "Notifier"
                ]
            }
        },
        "Executor.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 46,
            "return": [
                "Reqs2ReqsAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Reqs2ReqsAddOnPayload"
                ],
                "config": [
                    "JumeauxConfig"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/reqs2reqs/filter.py": {
        "Executor.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 19,
            "return": [
                "Reqs2ReqsAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Reqs2ReqsAddOnPayload"
                ],
                "config": [
                    "JumeauxConfig"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/reqs2reqs/head.py": {
        "Executor.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 18,
            "return": [
                "Reqs2ReqsAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Reqs2ReqsAddOnPayload"
                ],
                "config": [
                    "JumeauxConfig"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/reqs2reqs/rename.py": {
        "apply_first_condition": {
            "name": "apply_first_condition",
            "location": 25,
            "return": [
                "Request"
            ],
            "arguments": {
                "request": [
                    "Request"
                ],
                "conditions": [
                    "TList[Condition]"
                ]
            }
        },
        "Executor.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 53,
            "return": [
                "Reqs2ReqsAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Reqs2ReqsAddOnPayload"
                ],
                "config": [
                    "JumeauxConfig"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/reqs2reqs/repeat.py": {
        "Executor.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 19,
            "return": [
                "Reqs2ReqsAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Reqs2ReqsAddOnPayload"
                ],
                "config": [
                    "JumeauxConfig"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/reqs2reqs/replace.py": {
        "replace_queries": {
            "name": "replace_queries",
            "location": 24,
            "return": [
                "Request"
            ],
            "arguments": {
                "req": [
                    "Request"
                ],
                "queries": [
                    "TDict[TList[str]]"
                ]
            }
        },
        "replace_headers": {
            "name": "replace_headers",
            "location": 31,
            "return": [
                "Request"
            ],
            "arguments": {
                "req": [
                    "Request"
                ],
                "headers": [
                    "TDict[str]"
                ]
            }
        },
        "replace": {
            "name": "replace",
            "location": 38,
            "return": [
                "Request"
            ],
            "arguments": {
                "req": [
                    "Request"
                ],
                "replacer": [
                    "Replacer"
                ]
            }
        },
        "apply_replacers": {
            "name": "apply_replacers",
            "location": 42,
            "return": [
                "Request"
            ],
            "arguments": {
                "req": [
                    "Request"
                ],
                "replacers": [
                    "TList[Replacer]"
                ]
            }
        },
        "Executor.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 55,
            "return": [
                "Reqs2ReqsAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Reqs2ReqsAddOnPayload"
                ],
                "config": [
                    "JumeauxConfig"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/reqs2reqs/shuffle.py": {
        "Executor.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 14,
            "return": [
                "Reqs2ReqsAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Reqs2ReqsAddOnPayload"
                ],
                "config": [
                    "JumeauxConfig"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/reqs2reqs/__init__.py": {
        "Reqs2ReqsExecutor.exec": {
            "name": "exec",
            "location": 8,
            "return": [
                "Reqs2ReqsAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Reqs2ReqsAddOnPayload"
                ],
                "config": [
                    "JumeauxConfig"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/res2dict/block.py": {
        "config_generator": {
            "name": "config_generator",
            "location": 21,
            "return": [],
            "arguments": {
                "blockstr": [
                    "str"
                ],
                "header_regexp": [
                    "str"
                ],
                "record_regexp": [
                    "str"
                ]
            }
        },
        "to_dict": {
            "name": "to_dict",
            "location": 43,
            "return": [
                "dict"
            ],
            "arguments": {
                "blockstr": [
                    "str"
                ],
                "header_regexp": [
                    "str"
                ],
                "record_regexp": [
                    "str"
                ]
            }
        },
        "Executor.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 51,
            "return": [
                "Res2DictAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Res2DictAddOnPayload"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/res2dict/html.py": {
        "html_to_dict": {
            "name": "html_to_dict",
            "location": 19,
            "return": [],
            "arguments": {
                "html": [
                    "str"
                ]
            }
        },
        "Executor.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 29,
            "return": [
                "Res2DictAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Res2DictAddOnPayload"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/res2dict/json.py": {
        "Executor.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 23,
            "return": [
                "Res2DictAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Res2DictAddOnPayload"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/res2dict/xml.py": {
        "Executor.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 22,
            "return": [
                "Res2DictAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Res2DictAddOnPayload"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/res2dict/__init__.py": {
        "Res2DictExecutor.exec": {
            "name": "exec",
            "location": 6,
            "return": [
                "Res2DictAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Res2DictAddOnPayload"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/res2res/json.py": {
        "wrap": {
            "name": "wrap",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "anything": [
                    "bytes"
                ],
                "encoding": [
                    "str"
                ]
            }
        },
        "Executor.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 54,
            "return": [
                "Res2ResAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Res2ResAddOnPayload"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/res2res/json_sort.py": {
        "traverse": {
            "name": "traverse",
            "location": 32,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "location": [
                    "str"
                ],
                "targets": [
                    "TList[Target]"
                ]
            }
        },
        "_dict_sort": {
            "name": "_dict_sort",
            "location": 40,
            "return": [
                "dict"
            ],
            "arguments": {
                "dict_obj": [
                    "dict"
                ],
                "targets": [
                    "TList[Target]"
                ],
                "location": [
                    "str"
                ]
            }
        },
        "_list_sort": {
            "name": "_list_sort",
            "location": 44,
            "return": [
                "list"
            ],
            "arguments": {
                "list_obj": [
                    "list"
                ],
                "targets": [
                    "TList[Target]"
                ],
                "location": [
                    "str"
                ]
            }
        },
        "Executor.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 64,
            "return": [
                "Res2ResAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Res2ResAddOnPayload"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/res2res/type.py": {
        "apply_first_condition": {
            "name": "apply_first_condition",
            "location": 22,
            "return": [
                "Response"
            ],
            "arguments": {
                "res": [
                    "Response"
                ],
                "req": [
                    "Request"
                ],
                "conditions": [
                    "TList[Condition]"
                ]
            }
        },
        "Executor.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 47,
            "return": [
                "Res2ResAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Res2ResAddOnPayload"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/res2res/__init__.py": {
        "Res2ResExecutor.exec": {
            "name": "exec",
            "location": 6,
            "return": [
                "Res2ResAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Res2ResAddOnPayload"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/store_criterion/free.py": {
        "Executor.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 23,
            "return": [
                "StoreCriterionAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "StoreCriterionAddOnPayload"
                ],
                "reference": [
                    "StoreCriterionAddOnReference"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/addons/store_criterion/__init__.py": {
        "StoreCriterionExecutor.exec": {
            "name": "exec",
            "location": 6,
            "return": [
                "StoreCriterionAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "StoreCriterionAddOnPayload"
                ],
                "reference": [
                    "StoreCriterionAddOnReference"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/commands/__init__.py": {},
    "jumeaux-master/jumeaux/commands/init/main.py": {
        "run": {
            "name": "run",
            "location": 27,
            "return": [],
            "arguments": {
                "args": [
                    "Args"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/commands/init/__init__.py": {},
    "jumeaux-master/jumeaux/commands/retry/main.py": {
        "run": {
            "name": "run",
            "location": 43,
            "return": [],
            "arguments": {
                "args": [
                    "Args"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/commands/retry/__init__.py": {},
    "jumeaux-master/jumeaux/commands/run/main.py": {
        "run": {
            "name": "run",
            "location": 48,
            "return": [],
            "arguments": {
                "args": [
                    "Args"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/commands/run/__init__.py": {},
    "jumeaux-master/jumeaux/commands/server/main.py": {
        "run": {
            "name": "run",
            "location": 75,
            "return": [],
            "arguments": {
                "args": [
                    "Args"
                ]
            }
        },
        "MyServerHandler.do_GET": {
            "name": "do_GET",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MyServerHandler.do_POST": {
            "name": "do_POST",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "jumeaux-master/jumeaux/commands/server/__init__.py": {},
    "jumeaux-master/jumeaux/commands/viewer/main.py": {
        "reload": {
            "name": "reload",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 28,
            "return": [],
            "arguments": {
                "args": [
                    "Args"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/commands/viewer/__init__.py": {},
    "jumeaux-master/jumeaux/domain/__init__.py": {},
    "jumeaux-master/jumeaux/domain/config/service.py": {
        "apply_include": {
            "name": "apply_include",
            "location": 14,
            "return": [
                "dict"
            ],
            "arguments": {
                "addon": [
                    "dict"
                ],
                "config_path": [
                    "str"
                ]
            }
        },
        "apply_include_addons": {
            "name": "apply_include_addons",
            "location": 22,
            "return": [
                "dict"
            ],
            "arguments": {
                "addons": [
                    "dict"
                ],
                "config_path": [
                    "str"
                ]
            }
        },
        "create_config": {
            "name": "create_config",
            "location": 45,
            "return": [
                "Config"
            ],
            "arguments": {
                "config_paths": [
                    "TList[str]"
                ],
                "skip_tags": [
                    "TOption[TList[str]]"
                ]
            }
        },
        "create_config_from_report": {
            "name": "create_config_from_report",
            "location": 86,
            "return": [
                "Config"
            ],
            "arguments": {
                "report": [
                    "Report"
                ]
            }
        },
        "merge_args2config": {
            "name": "merge_args2config",
            "location": 101,
            "return": [
                "Config"
            ],
            "arguments": {
                "args": [
                    "MergedArgs"
                ],
                "config": [
                    "Config"
                ]
            }
        },
        "apply_include_addons.apply_includes": {
            "name": "apply_includes",
            "location": 23,
            "return": [],
            "arguments": {
                "layer_name": [
                    "str"
                ]
            }
        },
        "create_config.filter_by_tags": {
            "name": "filter_by_tags",
            "location": 46,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "addons": [
                    "List[dict]"
                ]
            }
        },
        "create_config.reducer": {
            "name": "reducer",
            "location": 53,
            "return": [
                "dict"
            ],
            "arguments": {
                "merged": [
                    "dict"
                ],
                "config_path": [
                    "str"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/domain/config/vo.py": {
        "Notifier.logging_message": {
            "name": "logging_message",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jumeaux-master/jumeaux/domain/config/__init__.py": {},
    "jumeaux-master/jumeaux/notification_handlers/base.py": {
        "NotificationHandler.notify": {
            "name": "notify",
            "location": 8,
            "return": [
                "TOption[str]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/notification_handlers/slack.py": {
        "SlackNotificationHandler.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [
                    "str"
                ],
                "username": [
                    "str"
                ],
                "icon_emoji": [
                    "TOption[str]"
                ],
                "icon_url": [
                    "TOption[str]"
                ]
            }
        },
        "SlackNotificationHandler.notify": {
            "name": "notify",
            "location": 35,
            "return": [
                "TOption[str]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/notification_handlers/slack2.py": {
        "Slack2NotificationHandler.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "use_blocks": [
                    "bool"
                ]
            }
        },
        "Slack2NotificationHandler.notify": {
            "name": "notify",
            "location": 33,
            "return": [
                "TOption[str]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/notification_handlers/__init__.py": {
        "create_notification_handler": {
            "name": "create_notification_handler",
            "location": 15,
            "return": [
                "NotificationHandler"
            ],
            "arguments": {
                "notifier": [
                    "Notifier"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/sample/addon/setup.py": {
        "load_readme": {
            "name": "load_readme",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "jumeaux-master/jumeaux/sample/addon/addon_sample/__init__.py": {},
    "jumeaux-master/jumeaux/sample/addon/addon_sample/final/table.py": {
        "Executor.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 27,
            "return": [
                "FinalAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "FinalAddOnPayload"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/sample/addon/addon_sample/final/__init__.py": {},
    "jumeaux-master/jumeaux/sample/addon/addon_sample/judgement/ignore_values.py": {
        "Executor.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 24,
            "return": [
                "JudgementAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "JudgementAddOnPayload"
                ],
                "reference": [
                    "JudgementAddOnReference"
                ]
            }
        },
        "Executor.exec.reject_apple": {
            "name": "reject_apple",
            "location": 30,
            "return": [],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/sample/addon/addon_sample/judgement/__init__.py": {},
    "jumeaux-master/jumeaux/sample/addon/addon_sample/reqs2reqs/add_path.py": {
        "Executor.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 19,
            "return": [
                "Reqs2ReqsAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Reqs2ReqsAddOnPayload"
                ],
                "config": [
                    "JumeauxConfig"
                ]
            }
        }
    },
    "jumeaux-master/jumeaux/sample/addon/addon_sample/reqs2reqs/__init__.py": {},
    "jumeaux-master/tests/conftest.py": {
        "create_tmpfile_from": {
            "name": "create_tmpfile_from",
            "location": 8,
            "return": [
                "Callable[([str], str)]"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "config_minimum": {
            "name": "config_minimum",
            "location": 19,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "config_with_tags": {
            "name": "config_with_tags",
            "location": 52,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "config_without_access_points": {
            "name": "config_without_access_points",
            "location": 104,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "config_only_access_points": {
            "name": "config_only_access_points",
            "location": 129,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "config_mergecase_1": {
            "name": "config_mergecase_1",
            "location": 151,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "config_mergecase_2": {
            "name": "config_mergecase_2",
            "location": 178,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "config_mergecase_with_tags": {
            "name": "config_mergecase_with_tags",
            "location": 200,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "config_includecase_1": {
            "name": "config_includecase_1",
            "location": 229,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "create_tmpfile_from.func": {
            "name": "func",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "content": [
                    "str"
                ]
            }
        }
    },
    "jumeaux-master/tests/test_executor.py": {
        "mock_date": {
            "name": "mock_date",
            "location": 25,
            "return": [],
            "arguments": {
                "year": [],
                "month": [],
                "day": [],
                "hour": [],
                "minute": [],
                "second": [],
                "microsecond": []
            }
        },
        "ResponseBuilder.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResponseBuilder.text": {
            "name": "text",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "ResponseBuilder.json": {
            "name": "json",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "json": []
            }
        },
        "ResponseBuilder.url": {
            "name": "url",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "ResponseBuilder.status_code": {
            "name": "status_code",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "status_code": []
            }
        },
        "ResponseBuilder.headers": {
            "name": "headers",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "headers": []
            }
        },
        "ResponseBuilder.content": {
            "name": "content",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "ResponseBuilder.encoding": {
            "name": "encoding",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "encoding": []
            }
        },
        "ResponseBuilder.second": {
            "name": "second",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "seconds": [],
                "microseconds": []
            }
        },
        "ResponseBuilder.judge_response_header": {
            "name": "judge_response_header",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "judge_response_header": [
                    "bool"
                ]
            }
        },
        "ResponseBuilder.build": {
            "name": "build",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChallenge.setup_class": {
            "name": "setup_class",
            "location": 113,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestChallenge.teardown_class": {
            "name": "teardown_class",
            "location": 121,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestChallenge.test_different": {
            "name": "test_different",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "concurrent_request": [],
                "now": [],
                "store_criterion": []
            }
        },
        "TestChallenge.test_same": {
            "name": "test_same",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "concurrent_request": [],
                "now": [],
                "store_criterion": []
            }
        },
        "TestChallenge.test_failure": {
            "name": "test_failure",
            "location": 312,
            "return": [],
            "arguments": {
                "self": [],
                "concurrent_request": [],
                "now": [],
                "store_criterion": []
            }
        },
        "TestCreateQueryString.test_normal": {
            "name": "test_normal",
            "location": 468,
            "return": [],
            "arguments": {
                "self": [],
                "title": [],
                "qs": [
                    "TDict[TList[str]]"
                ],
                "cqs": [
                    "Optional[dict]"
                ],
                "encoding": [
                    "str"
                ],
                "expected": []
            }
        },
        "TestMergeHeaders.test_normal": {
            "name": "test_normal",
            "location": 513,
            "return": [],
            "arguments": {
                "self": [],
                "title": [],
                "access_point_base": [
                    "Dict[(str, str)]"
                ],
                "this_request": [
                    "Dict[(str, str)]"
                ],
                "expected": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "TestExec.setup_class": {
            "name": "setup_class",
            "location": 531,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestExec.teardown_class": {
            "name": "teardown_class",
            "location": 536,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestExec.test": {
            "name": "test",
            "location": 539,
            "return": [],
            "arguments": {
                "self": [],
                "hash_from_args": [],
                "challenge": [],
                "now": []
            }
        }
    },
    "jumeaux-master/tests/test_models.py": {
        "TestProxy.test_from_host_normal": {
            "name": "test_from_host_normal",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProxy.test_from_host_none": {
            "name": "test_from_host_none",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestModels.test_from_requests_decide_encoding": {
            "name": "test_from_requests_decide_encoding",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "title": [],
                "headers": [],
                "text": [],
                "content": [],
                "encoding": [],
                "apparent_encoding": [],
                "default_encoding": [],
                "expected": []
            }
        }
    },
    "jumeaux-master/tests/test_utils.py": {
        "TestExactMatch.test_normal": {
            "name": "test_normal",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "expected": [],
                "target": [],
                "regexp": []
            }
        },
        "TestEqualsWithoutHost.test_normal": {
            "name": "test_normal",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "expected": [],
                "one": [],
                "other": []
            }
        },
        "TestWhenFilter.test_normal": {
            "name": "test_normal",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "expected": [],
                "expression": []
            }
        },
        "TestGetJinja2FormatError.test_normal": {
            "name": "test_normal",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "expected": [],
                "fmt": []
            }
        }
    },
    "jumeaux-master/tests/__init__.py": {},
    "jumeaux-master/tests/addons/did_challenge/test_tag.py": {
        "create_trial_dict": {
            "name": "create_trial_dict",
            "location": 50,
            "return": [
                "dict"
            ],
            "arguments": {
                "seq": [
                    "int"
                ],
                "name": [
                    "str"
                ],
                "tags": [
                    "List[str]"
                ],
                "status": [
                    "str"
                ]
            }
        },
        "TestExec.test": {
            "name": "test",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "title": [],
                "config_yml": [],
                "trial": [],
                "expected_result": []
            }
        }
    },
    "jumeaux-master/tests/addons/did_challenge/__init__.py": {},
    "jumeaux-master/tests/addons/dump/test_html.py": {
        "TestExec.test": {
            "name": "test",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "title": [],
                "config_yml": [],
                "response": [],
                "body": [],
                "encoding": [],
                "expected_body": [],
                "expected_encoding": []
            }
        }
    },
    "jumeaux-master/tests/addons/dump/test_json.py": {
        "TestExec.test": {
            "name": "test",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "title": [],
                "config_yml": [],
                "response": [],
                "body": [],
                "encoding": [],
                "expected_body": [],
                "expected_encoding": []
            }
        }
    },
    "jumeaux-master/tests/addons/dump/test_xml.py": {
        "TestExec.test": {
            "name": "test",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "title": [],
                "config_yml": [],
                "response": [],
                "body": [],
                "encoding": [],
                "expected_body": [],
                "expected_encoding": []
            }
        }
    },
    "jumeaux-master/tests/addons/dump/__init__.py": {},
    "jumeaux-master/tests/addons/judgement/test_ignore.py": {
        "TestExec.test_only_condition_same": {
            "name": "test_only_condition_same",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExec.test_only_condition_partial_same_is_false": {
            "name": "test_only_condition_partial_same_is_false",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExec.test_over_conditions_same": {
            "name": "test_over_conditions_same",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExec.test_over_ignores_same": {
            "name": "test_over_ignores_same",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExec.test_over_ignores_different": {
            "name": "test_over_ignores_different",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExec.test_path_specified_same": {
            "name": "test_path_specified_same",
            "location": 337,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExec.test_path_specified_different": {
            "name": "test_path_specified_different",
            "location": 378,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExec.test_name_specified_different": {
            "name": "test_name_specified_different",
            "location": 419,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExec.test_merge_to_default_diffs": {
            "name": "test_merge_to_default_diffs",
            "location": 460,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExec.test_value_not_match_different": {
            "name": "test_value_not_match_different",
            "location": 521,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExec.test_skip_judgement_if_as_same_before": {
            "name": "test_skip_judgement_if_as_same_before",
            "location": 567,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "jumeaux-master/tests/addons/judgement/test_same.py": {
        "TestExec.test": {
            "name": "test",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "title": [],
                "payload": [],
                "config": [],
                "expected": []
            }
        },
        "TestExec.test_exit": {
            "name": "test_exit",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "title": [],
                "payload": [],
                "config": []
            }
        }
    },
    "jumeaux-master/tests/addons/judgement/__init__.py": {},
    "jumeaux-master/tests/addons/log2reqs/test_csv.py": {
        "create_expected": {
            "name": "create_expected",
            "location": 31,
            "return": [
                "dict"
            ],
            "arguments": {
                "no": [
                    "int"
                ],
                "method": [
                    "HttpMethod"
                ],
                "qs": [
                    "dict"
                ],
                "headers": [
                    "dict"
                ]
            }
        },
        "TestExec.test": {
            "name": "test",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "create_tmpfile_from": [],
                "title": [],
                "requests": [],
                "config_yml": [],
                "expected": []
            }
        },
        "TestExec.test_length_over_5": {
            "name": "test_length_over_5",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "create_tmpfile_from": []
            }
        }
    },
    "jumeaux-master/tests/addons/log2reqs/test_json.py": {
        "TestFromFormat.teardown_class": {
            "name": "teardown_class",
            "location": 13,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestFromFormat.test_json": {
            "name": "test_json",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFromFormat.test_invalid_value": {
            "name": "test_invalid_value",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "jumeaux-master/tests/addons/log2reqs/test_plain.py": {
        "create_expected": {
            "name": "create_expected",
            "location": 27,
            "return": [
                "dict"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "qs": [
                    "dict"
                ],
                "url_encoding": []
            }
        },
        "TestExec.test": {
            "name": "test",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "create_tmpfile_from": [],
                "title": [],
                "config_yml": [],
                "expected": []
            }
        }
    },
    "jumeaux-master/tests/addons/log2reqs/test_yaml.py": {
        "TestFromFormat.teardown_class": {
            "name": "teardown_class",
            "location": 14,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestFromFormat.test_yaml": {
            "name": "test_yaml",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFromFormat.test_invalid_value": {
            "name": "test_invalid_value",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "jumeaux-master/tests/addons/log2reqs/__init__.py": {},
    "jumeaux-master/tests/addons/reqs2reqs/test_add.py": {
        "TestExec.test": {
            "name": "test",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExec.test_head": {
            "name": "test_head",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExec.test_tail": {
            "name": "test_tail",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "jumeaux-master/tests/addons/reqs2reqs/test_empty_guard.py": {
        "send_for_test": {
            "name": "send_for_test",
            "location": 80,
            "return": [
                "TOption[str]"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "notifier": [
                    "Notifier"
                ]
            }
        },
        "TestExec.test_not_use_notify": {
            "name": "test_not_use_notify",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "send": [],
                "title": [],
                "config_yml": [],
                "requests": [],
                "jumeaux_config_yml": [],
                "expected_result": []
            }
        },
        "TestExec.test_use_notify": {
            "name": "test_use_notify",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "send": [],
                "title": [],
                "config_yml": [],
                "requests": [],
                "jumeaux_config_yml": []
            }
        }
    },
    "jumeaux-master/tests/addons/reqs2reqs/test_filter.py": {
        "TestExec.test_filter": {
            "name": "test_filter",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "title": [],
                "config_yml": [],
                "requests": [],
                "expected_result": []
            }
        }
    },
    "jumeaux-master/tests/addons/reqs2reqs/test_rename.py": {
        "TestExec.test_rename": {
            "name": "test_rename",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "title": [],
                "config_yml": [],
                "requests": [],
                "expected_result": []
            }
        }
    },
    "jumeaux-master/tests/addons/reqs2reqs/test_replace.py": {
        "TestRequestCondition.test_static": {
            "name": "test_static",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "reqs": [],
                "expected": []
            }
        },
        "TestRequestCondition.test_datetime": {
            "name": "test_datetime",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "q1": [],
                "reqs": [],
                "expected": []
            }
        }
    },
    "jumeaux-master/tests/addons/reqs2reqs/__init__.py": {},
    "jumeaux-master/tests/addons/res2dict/test_block.py": {
        "TestExec.test": {
            "name": "test",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "title": [],
                "config_yml": [],
                "response": [],
                "expected_result": []
            }
        }
    },
    "jumeaux-master/tests/addons/res2dict/test_html.py": {
        "TestExec.test": {
            "name": "test",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "title": [],
                "config_yml": [],
                "response": [],
                "expected_result": []
            }
        }
    },
    "jumeaux-master/tests/addons/res2dict/test_json.py": {
        "TestExec.test": {
            "name": "test",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "title": [],
                "config_yml": [],
                "response": [],
                "expected_result": []
            }
        }
    },
    "jumeaux-master/tests/addons/res2dict/test_xml.py": {
        "TestExec.test": {
            "name": "test",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "title": [],
                "config_yml": [],
                "response": [],
                "expected_result": []
            }
        }
    },
    "jumeaux-master/tests/addons/res2dict/__init__.py": {},
    "jumeaux-master/tests/addons/res2res/test_json.py": {
        "make_response": {
            "name": "make_response",
            "location": 15,
            "return": [
                "Response"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "encoding": [
                    "str"
                ],
                "body_encoding": [
                    "str"
                ]
            }
        },
        "TestExec.test_normal": {
            "name": "test_normal",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "title": [],
                "config_yml": [],
                "expected_text": []
            }
        },
        "TestExec.test_error": {
            "name": "test_error",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "title": [],
                "config_yml": []
            }
        }
    },
    "jumeaux-master/tests/addons/res2res/test_json_sort.py": {
        "make_response": {
            "name": "make_response",
            "location": 32,
            "return": [
                "Response"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "encoding": [
                    "str"
                ],
                "body_encoding": [
                    "str"
                ]
            }
        },
        "TestExec.test_normal": {
            "name": "test_normal",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "title": [],
                "config_yml": [],
                "expected_tags": [],
                "expected_text": []
            }
        },
        "TestExec.test_sorted_bat_same": {
            "name": "test_sorted_bat_same",
            "location": 283,
            "return": [],
            "arguments": {
                "self": [],
                "title": [],
                "config_yml": [],
                "expected_text": []
            }
        },
        "TestExec.test_multibyte": {
            "name": "test_multibyte",
            "location": 337,
            "return": [],
            "arguments": {
                "self": [],
                "title": [],
                "encoding": [],
                "body_encoding": [],
                "config_yml": [],
                "expected_text": []
            }
        }
    },
    "jumeaux-master/tests/addons/res2res/test_type.py": {
        "make_response": {
            "name": "make_response",
            "location": 12,
            "return": [
                "Response"
            ],
            "arguments": {
                "type": [
                    "str"
                ],
                "status_code": [
                    "int"
                ]
            }
        },
        "TestExec.test_normal": {
            "name": "test_normal",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "title": [],
                "config_yml": [],
                "expected": []
            }
        }
    },
    "jumeaux-master/tests/addons/res2res/__init__.py": {},
    "jumeaux-master/tests/addons/store_criterion/test_free.py": {
        "TestExec.test": {
            "name": "test",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "title": [],
                "payload": [],
                "config": [],
                "expected": []
            }
        }
    },
    "jumeaux-master/tests/addons/store_criterion/__init__.py": {},
    "jumeaux-master/tests/domain/__init__.py": {},
    "jumeaux-master/tests/domain/config/test_service.py": {
        "TestMergeArgs2Config.test_full_args": {
            "name": "test_full_args",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeArgs2Config.test_empty_args": {
            "name": "test_empty_args",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeArgs2Config.test_empty_args_and_config": {
            "name": "test_empty_args_and_config",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCreateConfig.test": {
            "name": "test",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "config_only_access_points": [],
                "config_without_access_points": []
            }
        },
        "TestCreateConfig.test_no_base": {
            "name": "test_no_base",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "config_minimum": []
            }
        },
        "TestCreateConfig.test_no_base_skip_tags": {
            "name": "test_no_base_skip_tags",
            "location": 274,
            "return": [],
            "arguments": {
                "self": [],
                "config_with_tags": []
            }
        },
        "TestCreateConfig.test_mergecase1then2": {
            "name": "test_mergecase1then2",
            "location": 323,
            "return": [],
            "arguments": {
                "self": [],
                "config_only_access_points": [],
                "config_mergecase_1": [],
                "config_mergecase_2": []
            }
        },
        "TestCreateConfig.test_mergecase2then1": {
            "name": "test_mergecase2then1",
            "location": 364,
            "return": [],
            "arguments": {
                "self": [],
                "config_only_access_points": [],
                "config_mergecase_1": [],
                "config_mergecase_2": []
            }
        },
        "TestCreateConfig.test_mergecase_with_tags": {
            "name": "test_mergecase_with_tags",
            "location": 407,
            "return": [],
            "arguments": {
                "self": [],
                "config_with_tags": [],
                "config_mergecase_with_tags": []
            }
        },
        "TestCreateConfig.test_includecase1": {
            "name": "test_includecase1",
            "location": 459,
            "return": [],
            "arguments": {
                "self": [],
                "config_only_access_points": [],
                "config_includecase_1": []
            }
        }
    },
    "jumeaux-master/tests/domain/config/__init__.py": {}
}
{
    "kaggle-master/digit-recognizer/keras_convnet.py": {
        "build_model": {
            "name": "build_model",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 31,
            "return": [],
            "arguments": {}
        }
    },
    "kaggle-master/digit-recognizer/pytorch_convnet.py": {
        "train_model": {
            "name": "train_model",
            "location": 32,
            "return": [],
            "arguments": {
                "model": [],
                "optimizer": [],
                "loader": []
            }
        },
        "evaluate_model": {
            "name": "evaluate_model",
            "location": 49,
            "return": [],
            "arguments": {
                "model": [],
                "loader": []
            }
        },
        "main": {
            "name": "main",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "ConvNet.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConvNet.forward": {
            "name": "forward",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "kaggle-master/digit-recognizer/tensorflow_convnet.py": {
        "weight_variable": {
            "name": "weight_variable",
            "location": 10,
            "return": [],
            "arguments": {
                "shape": []
            }
        },
        "bias_variable": {
            "name": "bias_variable",
            "location": 14,
            "return": [],
            "arguments": {
                "shape": []
            }
        },
        "conv2d": {
            "name": "conv2d",
            "location": 19,
            "return": [],
            "arguments": {
                "x": [],
                "W": []
            }
        },
        "max_pool": {
            "name": "max_pool",
            "location": 22,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "main": {
            "name": "main",
            "location": 26,
            "return": [],
            "arguments": {}
        }
    },
    "kaggle-master/digit-recognizer/util.py": {
        "load_train_data": {
            "name": "load_train_data",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "load_test_data": {
            "name": "load_test_data",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "save_predictions": {
            "name": "save_predictions",
            "location": 22,
            "return": [],
            "arguments": {
                "labels": [],
                "output_file": []
            }
        }
    },
    "kaggle-master/gendered-pronoun-resolution/config.py": {
        "Config.save": {
            "name": "save",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "Path"
                ]
            }
        },
        "Config.load": {
            "name": "load",
            "location": 43,
            "return": [
                "Config"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "Path"
                ]
            }
        }
    },
    "kaggle-master/gendered-pronoun-resolution/data.py": {
        "load_train_val_examples": {
            "name": "load_train_val_examples",
            "location": 44,
            "return": [
                "Tuple[(List[GAPExample], List[GAPExample])]"
            ],
            "arguments": {
                "random_seed": [],
                "train_size": []
            }
        },
        "load_test_examples": {
            "name": "load_test_examples",
            "location": 55,
            "return": [
                "List[GAPExample]"
            ],
            "arguments": {
                "tsv_path": [
                    "Path"
                ]
            }
        },
        "_load_gap": {
            "name": "_load_gap",
            "location": 60,
            "return": [
                "List[GAPExample]"
            ],
            "arguments": {
                "tsv_path": [
                    "Path"
                ]
            }
        },
        "_create_example": {
            "name": "_create_example",
            "location": 70,
            "return": [],
            "arguments": {
                "row": [
                    "OrderedDict"
                ]
            }
        },
        "_word_tokenizer": {
            "name": "_word_tokenizer",
            "location": 107,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "_char_to_token_offset": {
            "name": "_char_to_token_offset",
            "location": 120,
            "return": [
                "int"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "mention": [
                    "str"
                ],
                "char_offset": [
                    "int"
                ],
                "text_tokens": [
                    "List[str]"
                ]
            }
        },
        "GAPDataset.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "examples": [
                    "List[GAPExample]"
                ],
                "flip_prob": [
                    "float"
                ]
            }
        },
        "GAPDataset.__getitem__": {
            "name": "__getitem__",
            "location": 143,
            "return": [
                "GAPExample"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "GAPDataset.__len__": {
            "name": "__len__",
            "location": 151,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GAPDataset._flip_example": {
            "name": "_flip_example",
            "location": 154,
            "return": [
                "GAPExample"
            ],
            "arguments": {
                "self": [],
                "example": [
                    "GAPExample"
                ]
            }
        }
    },
    "kaggle-master/gendered-pronoun-resolution/ensemble.py": {
        "ensemble": {
            "name": "ensemble",
            "location": 11,
            "return": [],
            "arguments": {
                "models_dir": [
                    "Path"
                ]
            }
        }
    },
    "kaggle-master/gendered-pronoun-resolution/hyperparam_search.py": {
        "objective": {
            "name": "objective",
            "location": 22,
            "return": [
                "Dict"
            ],
            "arguments": {
                "config_dict": [
                    "Dict"
                ],
                "device": [
                    "torch.device"
                ],
                "progress_bar": [
                    "tqdm"
                ],
                "base_output_dir": [
                    "Path"
                ]
            }
        },
        "load_config_space": {
            "name": "load_config_space",
            "location": 65,
            "return": [
                "Dict"
            ],
            "arguments": {
                "config_space_file": [
                    "Path"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        }
    },
    "kaggle-master/gendered-pronoun-resolution/model.py": {
        "init_weights": {
            "name": "init_weights",
            "location": 17,
            "return": [],
            "arguments": {
                "module": []
            }
        },
        "BertFeatures.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "model_name": [],
                "cache_dir": [],
                "device": []
            }
        },
        "BertFeatures._wordpiece_tokenizer": {
            "name": "_wordpiece_tokenizer",
            "location": 48,
            "return": [
                "Tuple[(List[str], Dict)]"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "List[str]"
                ]
            }
        },
        "BertFeatures._prepare_input": {
            "name": "_prepare_input",
            "location": 62,
            "return": [
                "Tuple[(List[int], List[int], List[int])]"
            ],
            "arguments": {
                "self": [],
                "wordpiece_tokens": [
                    "List[str]"
                ],
                "padding_length": [
                    "int"
                ]
            }
        },
        "BertFeatures.generate": {
            "name": "generate",
            "location": 89,
            "return": [
                "Tuple[(List[Dict], List[torch.Tensor])]"
            ],
            "arguments": {
                "self": [],
                "tokens_batch": [
                    "List[List[str]]"
                ]
            }
        },
        "FeedForward.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "input_size": [
                    "int"
                ],
                "output_size": [
                    "int"
                ],
                "hidden_layers": [
                    "int"
                ],
                "hidden_size": [
                    "Optional[int]"
                ],
                "dropout": [
                    "float"
                ],
                "activation": [
                    "str"
                ]
            }
        },
        "FeedForward.forward": {
            "name": "forward",
            "location": 151,
            "return": [
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "torch.Tensor"
                ]
            }
        },
        "Model.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Config"
                ],
                "device": [
                    "torch.device"
                ]
            }
        },
        "Model.forward": {
            "name": "forward",
            "location": 194,
            "return": [
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "List[GAPExample]"
                ]
            }
        },
        "Model._calculate_mention_vector": {
            "name": "_calculate_mention_vector",
            "location": 235,
            "return": [
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "input_tokens": [
                    "torch.Tensor"
                ],
                "input_length": [
                    "List[int]"
                ],
                "pronoun_index": [
                    "List[int]"
                ],
                "spans": [
                    "List[Tuple[(int, int)]]"
                ]
            }
        },
        "Model._calculate_context_vector": {
            "name": "_calculate_context_vector",
            "location": 254,
            "return": [
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "input_tokens": [
                    "torch.Tensor"
                ],
                "input_length": [
                    "List[int]"
                ],
                "pronoun_index": [
                    "List[int]"
                ]
            }
        },
        "Model._calculate_pronoun_mention_distance": {
            "name": "_calculate_pronoun_mention_distance",
            "location": 287,
            "return": [
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "pronoun_index": [
                    "List[int]"
                ],
                "mention_span": [
                    "List[Tuple[(int, int)]]"
                ]
            }
        },
        "Model._calculate_features": {
            "name": "_calculate_features",
            "location": 297,
            "return": [
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "List[GAPExample]"
                ]
            }
        },
        "Model.calculate_loss": {
            "name": "calculate_loss",
            "location": 316,
            "return": [
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "List[GAPExample]"
                ],
                "reduction": [
                    "str"
                ]
            }
        }
    },
    "kaggle-master/gendered-pronoun-resolution/optim.py": {
        "lr_schedule": {
            "name": "lr_schedule",
            "location": 13,
            "return": [],
            "arguments": {
                "step": [],
                "total_steps": [],
                "lr": [],
                "lr_warmup": [],
                "lr_cooldown": []
            }
        },
        "Adam.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "named_parameters": [],
                "lr": [],
                "beta1": [],
                "beta2": [],
                "eps": [],
                "weight_decay": [],
                "max_grad_norm": [],
                "lr_warmup": [],
                "lr_cooldown": [],
                "total_steps": []
            }
        },
        "Adam.step": {
            "name": "step",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "closure": []
            }
        }
    },
    "kaggle-master/gendered-pronoun-resolution/optim_test.py": {
        "LRScheduleTest.test_constant": {
            "name": "test_constant",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LRScheduleTest.test_warmup_only": {
            "name": "test_warmup_only",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LRScheduleTest.test_warmup_and_linear_cooldown": {
            "name": "test_warmup_and_linear_cooldown",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdamTest.assertListAlmostEqual": {
            "name": "assertListAlmostEqual",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "list_a": [],
                "list_b": []
            }
        },
        "AdamTest.test_sphere": {
            "name": "test_sphere",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kaggle-master/gendered-pronoun-resolution/predict.py": {
        "generate_predictions": {
            "name": "generate_predictions",
            "location": 22,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "model": [
                    "nn.Module"
                ],
                "config": [
                    "Config"
                ],
                "examples": [
                    "List[GAPExample]"
                ]
            }
        },
        "optimize_thresholds": {
            "name": "optimize_thresholds",
            "location": 59,
            "return": [
                "Dict[(str, float)]"
            ],
            "arguments": {
                "predictions": [
                    "pd.DataFrame"
                ],
                "threshold_steps": [
                    "int"
                ]
            }
        },
        "apply_thresholds": {
            "name": "apply_thresholds",
            "location": 83,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "predictions": [
                    "pd.DataFrame"
                ],
                "thresholds": [
                    "Dict[(str, float)]"
                ]
            }
        },
        "calculate_losses": {
            "name": "calculate_losses",
            "location": 92,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "predictions": [
                    "pd.DataFrame"
                ]
            }
        },
        "predict": {
            "name": "predict",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "model_dir": [
                    "Path"
                ],
                "device": [
                    "torch.device"
                ]
            }
        }
    },
    "kaggle-master/gendered-pronoun-resolution/train.py": {
        "train": {
            "name": "train",
            "location": 24,
            "return": [
                "float"
            ],
            "arguments": {
                "config": [
                    "Config"
                ],
                "device": [
                    "torch.device"
                ],
                "output_dir": [
                    "Path"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        }
    },
    "kaggle-master/instacart-basket-analysis/pipelines/clean_data.py": {
        "_InputCSV.count": {
            "name": "count",
            "location": 18,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "_InputCSV.output": {
            "name": "output",
            "location": 23,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "_InputCSV.read": {
            "name": "read",
            "location": 28,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "_OrdersTask.requires": {
            "name": "requires",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_OrdersTask._read_orders_input": {
            "name": "_read_orders_input",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_OrdersTask._read_order_products_input": {
            "name": "_read_order_products_input",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_OrdersTask._write_orders": {
            "name": "_write_orders",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "orders": []
            }
        },
        "_OrdersTask.read": {
            "name": "read",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CompleteOrders.output": {
            "name": "output",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CompleteOrders.run": {
            "name": "run",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubmissionOrders.output": {
            "name": "output",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubmissionOrders.run": {
            "name": "run",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_SplitOrdersTask.requires": {
            "name": "requires",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_SplitOrdersTask._run": {
            "name": "_run",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        },
        "TestOrders.output": {
            "name": "output",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOrders.run": {
            "name": "run",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainingOrders.output": {
            "name": "output",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainingOrders.run": {
            "name": "run",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kaggle-master/instacart-basket-analysis/pipelines/config.py": {},
    "kaggle-master/instacart-basket-analysis/pipelines/evaluation.py": {
        "EvaluateModel.requires": {
            "name": "requires",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvaluateModel.output": {
            "name": "output",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvaluateModel.run": {
            "name": "run",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvaluateAllModels.requires": {
            "name": "requires",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kaggle-master/instacart-basket-analysis/pipelines/input_data.py": {
        "OrdersInput.output": {
            "name": "output",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderProductsInput.output": {
            "name": "output",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kaggle-master/instacart-basket-analysis/pipelines/submissions.py": {
        "Submission.requires": {
            "name": "requires",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Submission.output": {
            "name": "output",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Submission.run": {
            "name": "run",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kaggle-master/instacart-basket-analysis/pipelines/__init__.py": {},
    "kaggle-master/instacart-basket-analysis/pipelines/models/empty.py": {
        "PredictEmpty.model_name": {
            "name": "model_name",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictEmpty.run": {
            "name": "run",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kaggle-master/instacart-basket-analysis/pipelines/models/f1_maximization.py": {
        "get_expectations": {
            "name": "get_expectations",
            "location": 11,
            "return": [],
            "arguments": {
                "P": []
            }
        },
        "maximize_expected_f1": {
            "name": "maximize_expected_f1",
            "location": 40,
            "return": [],
            "arguments": {
                "P": []
            }
        }
    },
    "kaggle-master/instacart-basket-analysis/pipelines/models/frequent_products.py": {
        "PredictFrequentProducts.model_name": {
            "name": "model_name",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictFrequentProducts.run": {
            "name": "run",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kaggle-master/instacart-basket-analysis/pipelines/models/lightfm_v1.py": {
        "LightFMv1.model_name": {
            "name": "model_name",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LightFMv1._generate_row": {
            "name": "_generate_row",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "last_order": [],
                "prior_orders": []
            }
        },
        "LightFMv1._generate_rows": {
            "name": "_generate_rows",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "user_data": [],
                "training": []
            }
        },
        "LightFMv1._generate_matrices": {
            "name": "_generate_matrices",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "orders_path": [],
                "training": []
            }
        },
        "FitLightFMv1._fit_ranking_model": {
            "name": "_fit_ranking_model",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "user_features": [],
                "interactions": []
            }
        },
        "FitLightFMv1._f1_score": {
            "name": "_f1_score",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "y_true": [],
                "y_pred": []
            }
        },
        "FitLightFMv1._fit_threshold_model": {
            "name": "_fit_threshold_model",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "user_features": [],
                "interactions": [],
                "ranking_model": []
            }
        },
        "FitLightFMv1.run": {
            "name": "run",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictLightFMv1.requires": {
            "name": "requires",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictLightFMv1.run": {
            "name": "run",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kaggle-master/instacart-basket-analysis/pipelines/models/lightfm_v2.py": {
        "LightFMv2.model_name": {
            "name": "model_name",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LightFMv2._generate_row": {
            "name": "_generate_row",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "last_order": [],
                "prior_orders": []
            }
        },
        "LightFMv2._generate_rows": {
            "name": "_generate_rows",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "user_data": [],
                "max_prior_orders": []
            }
        },
        "LightFMv2._generate_matrices": {
            "name": "_generate_matrices",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "orders_path": [],
                "max_prior_orders": []
            }
        },
        "FitLightFMv2.run": {
            "name": "run",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictLightFMv2ReorderSizeKnown.requires": {
            "name": "requires",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictLightFMv2ReorderSizeKnown._count_reordered_products": {
            "name": "_count_reordered_products",
            "location": 124,
            "return": [],
            "arguments": {
                "order": []
            }
        },
        "PredictLightFMv2ReorderSizeKnown._determine_reorder_size": {
            "name": "_determine_reorder_size",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "orders_path": []
            }
        },
        "PredictLightFMv2ReorderSizeKnown.run": {
            "name": "run",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kaggle-master/instacart-basket-analysis/pipelines/models/lightfm_v3.py": {
        "FitLightFMv3Embeddings.model_name": {
            "name": "model_name",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FitLightFMv3Embeddings.read": {
            "name": "read",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FitLightFMv3Embeddings._load_products": {
            "name": "_load_products",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FitLightFMv3Embeddings._get_num_items": {
            "name": "_get_num_items",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FitLightFMv3Embeddings._get_item_id": {
            "name": "_get_item_id",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "product_id": []
            }
        },
        "FitLightFMv3Embeddings._generate_row": {
            "name": "_generate_row",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "last_order": [],
                "prior_orders": []
            }
        },
        "FitLightFMv3Embeddings._generate_rows": {
            "name": "_generate_rows",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "user_data": [],
                "num_orders": []
            }
        },
        "FitLightFMv3Embeddings._generate_matrices": {
            "name": "_generate_matrices",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "orders_path": []
            }
        },
        "FitLightFMv3Embeddings.run": {
            "name": "run",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FitAllLightFMv3Embeddings.run": {
            "name": "run",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kaggle-master/instacart-basket-analysis/pipelines/models/mlp_v1.py": {
        "MLPv1.model_name": {
            "name": "model_name",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MLPv1._generate_user_features": {
            "name": "_generate_user_features",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "orders": []
            }
        },
        "MLPv1._generate_product_features": {
            "name": "_generate_product_features",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "orders": []
            }
        },
        "MLPv1._generate_user_product_features": {
            "name": "_generate_user_product_features",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "orders": []
            }
        },
        "MLPv1._load_data": {
            "name": "_load_data",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FitMLPv1.run": {
            "name": "run",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FitMLPv1._split_data": {
            "name": "_split_data",
            "location": 225,
            "return": [],
            "arguments": {
                "self": [],
                "order_ids": [],
                "product_ids": [],
                "inputs": [],
                "predictions": [],
                "training_size": []
            }
        },
        "FitMLPv1._tapered_layers": {
            "name": "_tapered_layers",
            "location": 260,
            "return": [],
            "arguments": {
                "from_dim": [],
                "to_dim": [],
                "num_layers": []
            }
        },
        "FitMLPv1._build_model": {
            "name": "_build_model",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "training_inputs": []
            }
        },
        "PredictMLPv1.requires": {
            "name": "requires",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictMLPv1.run": {
            "name": "run",
            "location": 295,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MLPv1._load_data.add_example": {
            "name": "add_example",
            "location": 166,
            "return": [],
            "arguments": {
                "user_id": [],
                "order_id": [],
                "product_id": [],
                "prediction": []
            }
        }
    },
    "kaggle-master/instacart-basket-analysis/pipelines/models/mlp_v2.py": {
        "MLPv2.model_name": {
            "name": "model_name",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MLPv2._count_lines": {
            "name": "_count_lines",
            "location": 57,
            "return": [],
            "arguments": {
                "file_path": []
            }
        },
        "MLPv2._open_shuffled": {
            "name": "_open_shuffled",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "MLPv2._generate_examples": {
            "name": "_generate_examples",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "last_order": [],
                "prior_orders": []
            }
        },
        "MLPv2._generate_user_examples": {
            "name": "_generate_user_examples",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "user_data": [],
                "num_orders_per_user": []
            }
        },
        "MLPv2._load_data": {
            "name": "_load_data",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "orders_path": [],
                "num_orders_per_user": []
            }
        },
        "MLPv2._create_data_generator": {
            "name": "_create_data_generator",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "orders_path": [],
                "num_orders_per_user": [],
                "batch_size": []
            }
        },
        "MLPv2._hidden_layer_units": {
            "name": "_hidden_layer_units",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "num_layers": [],
                "from_dim": [],
                "to_dim": []
            }
        },
        "MLPv2._build_model": {
            "name": "_build_model",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FitMLPv2.run": {
            "name": "run",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_PredictMLPv2.requires": {
            "name": "requires",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictMLPv2ReorderSizeKnown._count_reordered_products": {
            "name": "_count_reordered_products",
            "location": 307,
            "return": [],
            "arguments": {
                "order": []
            }
        },
        "PredictMLPv2ReorderSizeKnown._determine_reorder_size": {
            "name": "_determine_reorder_size",
            "location": 314,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictMLPv2ReorderSizeKnown.run": {
            "name": "run",
            "location": 324,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptimizeMLPv2ReorderSizeKnown.run": {
            "name": "run",
            "location": 362,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictMLPv2Threshold.model_name": {
            "name": "model_name",
            "location": 381,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictMLPv2Threshold.run": {
            "name": "run",
            "location": 386,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptimizePredictMLPv2Threshold.run": {
            "name": "run",
            "location": 415,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictMLPv2ThresholdVariable.model_name": {
            "name": "model_name",
            "location": 424,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictMLPv2ThresholdVariable._determine_reorder_thresholds": {
            "name": "_determine_reorder_thresholds",
            "location": 429,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "scores": []
            }
        },
        "PredictMLPv2ThresholdVariable.run": {
            "name": "run",
            "location": 483,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptimizeMLPv2ThresholdVariable.run": {
            "name": "run",
            "location": 522,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictMLPv2ExpectedF1.model_name": {
            "name": "model_name",
            "location": 539,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictMLPv2ExpectedF1._determine_reorder_size": {
            "name": "_determine_reorder_size",
            "location": 544,
            "return": [],
            "arguments": {
                "self": [],
                "scores": []
            }
        },
        "PredictMLPv2ExpectedF1.run": {
            "name": "run",
            "location": 554,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MLPv2._load_data.add_example": {
            "name": "add_example",
            "location": 125,
            "return": [],
            "arguments": {
                "user_id": [],
                "order_id": [],
                "product_id": [],
                "inputs": [],
                "prediction": []
            }
        },
        "MLPv2._create_data_generator.generator": {
            "name": "generator",
            "location": 159,
            "return": [],
            "arguments": {}
        }
    },
    "kaggle-master/instacart-basket-analysis/pipelines/models/previous_order.py": {
        "PredictPreviousOrder.model_name": {
            "name": "model_name",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictPreviousOrder.run": {
            "name": "run",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kaggle-master/instacart-basket-analysis/pipelines/models/product_name_vectors.py": {
        "ProductNameVectors.model_name": {
            "name": "model_name",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProductNameVectors.read": {
            "name": "read",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProductNameVectors.run": {
            "name": "run",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FitAllProductNameVectors.run": {
            "name": "run",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProductNameVectors.run.get_vector": {
            "name": "get_vector",
            "location": 34,
            "return": [],
            "arguments": {
                "product_name": []
            }
        }
    },
    "kaggle-master/instacart-basket-analysis/pipelines/models/rnn_v1.py": {
        "hinge_loss": {
            "name": "hinge_loss",
            "location": 24,
            "return": [],
            "arguments": {
                "y_true": [],
                "y_pred": [],
                "margin": []
            }
        },
        "RNNv1.model_name": {
            "name": "model_name",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RNNv1._count_lines": {
            "name": "_count_lines",
            "location": 54,
            "return": [],
            "arguments": {
                "file_path": []
            }
        },
        "RNNv1._open_shuffled": {
            "name": "_open_shuffled",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "RNNv1._generate_order_samples": {
            "name": "_generate_order_samples",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "last_order": [],
                "prior_orders": []
            }
        },
        "RNNv1._generate_samples": {
            "name": "_generate_samples",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "user_data": [],
                "include_prior_orders": []
            }
        },
        "RNNv1.create_generator": {
            "name": "create_generator",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "orders_path": [],
                "users_per_batch": [],
                "shuffle": [],
                "include_prior_orders": []
            }
        },
        "FitRNNv1._build_model": {
            "name": "_build_model",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FitRNNv1.run": {
            "name": "run",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictRNNv1.requires": {
            "name": "requires",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictRNNv1.run": {
            "name": "run",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RNNv1.create_generator.generator": {
            "name": "generator",
            "location": 109,
            "return": [],
            "arguments": {}
        }
    },
    "kaggle-master/instacart-basket-analysis/pipelines/models/rnn_v2.py": {
        "RNNv2.model_name": {
            "name": "model_name",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RNNv2._count_lines": {
            "name": "_count_lines",
            "location": 63,
            "return": [],
            "arguments": {
                "file_path": []
            }
        },
        "RNNv2._open_shuffled": {
            "name": "_open_shuffled",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "RNNv2._generate_order_examples": {
            "name": "_generate_order_examples",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "last_order": [],
                "prior_orders": []
            }
        },
        "RNNv2._generate_user_examples": {
            "name": "_generate_user_examples",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "user_data": [],
                "max_prior_orders": []
            }
        },
        "RNNv2._load_data": {
            "name": "_load_data",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "orders_path": []
            }
        },
        "RNNv2._create_data_generator": {
            "name": "_create_data_generator",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "orders_path": [],
                "users_per_batch": [],
                "max_prior_orders": []
            }
        },
        "RNNv2._hidden_layer_units": {
            "name": "_hidden_layer_units",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "num_layers": [],
                "from_dim": [],
                "to_dim": []
            }
        },
        "RNNv2._build_product_embedding_submodel": {
            "name": "_build_product_embedding_submodel",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RNNv2._build_days_attention_submodel": {
            "name": "_build_days_attention_submodel",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RNNv2._build_model": {
            "name": "_build_model",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FitRNNv2.run": {
            "name": "run",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_PredictRNNv2.requires": {
            "name": "requires",
            "location": 297,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictRNNv2ReorderSizeKnown._count_reordered_products": {
            "name": "_count_reordered_products",
            "location": 321,
            "return": [],
            "arguments": {
                "order": []
            }
        },
        "PredictRNNv2ReorderSizeKnown._determine_reorder_size": {
            "name": "_determine_reorder_size",
            "location": 328,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictRNNv2ReorderSizeKnown.run": {
            "name": "run",
            "location": 339,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptimizeRNNv2ReorderSizeKnown.run": {
            "name": "run",
            "location": 381,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictRNNv2ReorderSizePercentile.model_name": {
            "name": "model_name",
            "location": 409,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictRNNv2ReorderSizePercentile._determine_reorder_size": {
            "name": "_determine_reorder_size",
            "location": 414,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptimizePredictRNNv2ReorderSizePercentile.run": {
            "name": "run",
            "location": 431,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictRNNv2Threshold.model_name": {
            "name": "model_name",
            "location": 441,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictRNNv2Threshold.run": {
            "name": "run",
            "location": 446,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptimizePredictRNNv2Threshold.run": {
            "name": "run",
            "location": 473,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RNNv2._load_data.add_example": {
            "name": "add_example",
            "location": 122,
            "return": [],
            "arguments": {
                "order_id": [],
                "product": [],
                "orders": [],
                "prediction": []
            }
        },
        "RNNv2._create_data_generator.generator": {
            "name": "generator",
            "location": 146,
            "return": [],
            "arguments": {}
        }
    },
    "kaggle-master/instacart-basket-analysis/pipelines/models/rnn_v3.py": {
        "RNNv3.model_name": {
            "name": "model_name",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RNNv3._count_lines": {
            "name": "_count_lines",
            "location": 86,
            "return": [],
            "arguments": {
                "file_path": []
            }
        },
        "RNNv3._open_shuffled": {
            "name": "_open_shuffled",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "RNNv3._generate_examples": {
            "name": "_generate_examples",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "last_order": [],
                "prior_orders": []
            }
        },
        "RNNv3._generate_user_examples": {
            "name": "_generate_user_examples",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "user_data": [],
                "max_prior_orders": []
            }
        },
        "RNNv3._load_data": {
            "name": "_load_data",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "orders_path": []
            }
        },
        "RNNv3._create_data_generator": {
            "name": "_create_data_generator",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "orders_path": [],
                "max_prior_orders": [],
                "batch_size": []
            }
        },
        "RNNv3._hidden_layer_units": {
            "name": "_hidden_layer_units",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "num_layers": [],
                "from_dim": [],
                "to_dim": []
            }
        },
        "RNNv3._build_model": {
            "name": "_build_model",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FitRNNv3.run": {
            "name": "run",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_PredictRNNv3.requires": {
            "name": "requires",
            "location": 320,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictRNNv3ReorderSizeKnown._count_reordered_products": {
            "name": "_count_reordered_products",
            "location": 342,
            "return": [],
            "arguments": {
                "order": []
            }
        },
        "PredictRNNv3ReorderSizeKnown._determine_reorder_size": {
            "name": "_determine_reorder_size",
            "location": 349,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictRNNv3ReorderSizeKnown.run": {
            "name": "run",
            "location": 360,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptimizeRNNv3ReorderSizeKnown.run": {
            "name": "run",
            "location": 402,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictRNNv3Threshold.model_name": {
            "name": "model_name",
            "location": 427,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictRNNv3Threshold.run": {
            "name": "run",
            "location": 432,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptimizePredictRNNv3Threshold.run": {
            "name": "run",
            "location": 461,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RNNv3._load_data.add_example": {
            "name": "add_example",
            "location": 143,
            "return": [],
            "arguments": {
                "order_id": [],
                "product": [],
                "orders": [],
                "prediction": []
            }
        },
        "RNNv3._create_data_generator.generator": {
            "name": "generator",
            "location": 176,
            "return": [],
            "arguments": {}
        }
    },
    "kaggle-master/instacart-basket-analysis/pipelines/models/rnn_v4.py": {
        "open_shuffled": {
            "name": "open_shuffled",
            "location": 33,
            "return": [],
            "arguments": {
                "file_path": []
            }
        },
        "layer_units": {
            "name": "layer_units",
            "location": 187,
            "return": [],
            "arguments": {
                "input_size": [],
                "output_size": [],
                "num_layers": []
            }
        },
        "RNNv4.model_name": {
            "name": "model_name",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RNNv4._init_random_state": {
            "name": "_init_random_state",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RNNv4._iter_user_data": {
            "name": "_iter_user_data",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "orders_path": [],
                "shuffle": []
            }
        },
        "RNNv4._generate_example": {
            "name": "_generate_example",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "prior_orders": [],
                "last_order": []
            }
        },
        "RNNv4._generate_examples": {
            "name": "_generate_examples",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "orders_path": [],
                "target_orders": [],
                "shuffle": []
            }
        },
        "RNNv4._format_as_tensors": {
            "name": "_format_as_tensors",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "product_history": [],
                "next_products": [],
                "next_products_targets": []
            }
        },
        "RNNv4._load_model": {
            "name": "_load_model",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Projection.__init__": {
            "name": "__init__",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "input_size": [],
                "output_size": [],
                "hidden_layers": [],
                "nonlinearity": [],
                "dropout": []
            }
        },
        "Projection.forward": {
            "name": "forward",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Model.__init__": {
            "name": "__init__",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "weekday_dim": [],
                "department_dim": [],
                "aisle_dim": [],
                "product_dim": [],
                "scoring_dim": [],
                "hidden_layers": [],
                "hidden_nonlinearily": [],
                "dropout": []
            }
        },
        "Model._init_embeddings": {
            "name": "_init_embeddings",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "weekday_dim": [],
                "department_dim": [],
                "aisle_dim": [],
                "product_dim": []
            }
        },
        "Model._init_lstm": {
            "name": "_init_lstm",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "scoring_dim": []
            }
        },
        "Model.forward": {
            "name": "forward",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "product_history": [],
                "next_products": []
            }
        },
        "FitRNNv4._split_orders": {
            "name": "_split_orders",
            "location": 327,
            "return": [],
            "arguments": {
                "self": [],
                "orders_path": []
            }
        },
        "FitRNNv4._train_model": {
            "name": "_train_model",
            "location": 341,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "optimizer": [],
                "orders_path": []
            }
        },
        "FitRNNv4._evaluate_model": {
            "name": "_evaluate_model",
            "location": 356,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "orders_path": []
            }
        },
        "FitRNNv4.run": {
            "name": "run",
            "location": 368,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RNNv4._format_as_tensors.create_tensor": {
            "name": "create_tensor",
            "location": 149,
            "return": [],
            "arguments": {
                "tensor_type": [],
                "orders": [],
                "field": []
            }
        }
    },
    "kaggle-master/instacart-basket-analysis/pipelines/models/rnn_v5.py": {},
    "kaggle-master/instacart-basket-analysis/pipelines/models/__init__.py": {
        "FitModel.requires": {
            "name": "requires",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FitModel.model_name": {
            "name": "model_name",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FitModel.output": {
            "name": "output",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictModel.requires": {
            "name": "requires",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictModel.model_name": {
            "name": "model_name",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictModel.output": {
            "name": "output",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelPredictions.output": {
            "name": "output",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelPredictions.read": {
            "name": "read",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kaggle-master/quickdraw-doodle-recognition/common.py": {
        "pack_example": {
            "name": "pack_example",
            "location": 37,
            "return": [],
            "arguments": {
                "example": [],
                "fout": []
            }
        },
        "unpack_example": {
            "name": "unpack_example",
            "location": 50,
            "return": [],
            "arguments": {
                "fin": []
            }
        },
        "unpack_examples": {
            "name": "unpack_examples",
            "location": 68,
            "return": [],
            "arguments": {
                "fin": []
            }
        }
    },
    "kaggle-master/quickdraw-doodle-recognition/convnet_data.py": {
        "_process_strokes": {
            "name": "_process_strokes",
            "location": 12,
            "return": [],
            "arguments": {
                "strokes": [],
                "image_size": [],
                "augmentation": []
            }
        },
        "_process_drawing": {
            "name": "_process_drawing",
            "location": 25,
            "return": [],
            "arguments": {
                "drawing": [],
                "image_size": [],
                "augmentation": []
            }
        },
        "_csv_generator": {
            "name": "_csv_generator",
            "location": 31,
            "return": [],
            "arguments": {
                "csv_file": [],
                "image_size": [],
                "augmentation": [],
                "read_label": []
            }
        },
        "_bin_generator": {
            "name": "_bin_generator",
            "location": 43,
            "return": [],
            "arguments": {
                "bin_file": [],
                "image_size": [],
                "augmentation": []
            }
        },
        "_load_train_sample": {
            "name": "_load_train_sample",
            "location": 50,
            "return": [],
            "arguments": {
                "random_seed": [],
                "name": [],
                "image_size": [],
                "augmentation": []
            }
        },
        "load_train_val_datasets": {
            "name": "load_train_val_datasets",
            "location": 79,
            "return": [],
            "arguments": {
                "image_size": [],
                "batch_size": [],
                "augmentation": [],
                "random_seed": []
            }
        },
        "load_test_dataset": {
            "name": "load_test_dataset",
            "location": 93,
            "return": [],
            "arguments": {
                "image_size": [],
                "batch_size": [],
                "augmentation": []
            }
        }
    },
    "kaggle-master/quickdraw-doodle-recognition/drawing.py": {
        "parse_drawing": {
            "name": "parse_drawing",
            "location": 9,
            "return": [],
            "arguments": {
                "drawing": [],
                "normalize": []
            }
        },
        "normalize_strokes": {
            "name": "normalize_strokes",
            "location": 19,
            "return": [],
            "arguments": {
                "strokes": []
            }
        },
        "simplify_strokes": {
            "name": "simplify_strokes",
            "location": 31,
            "return": [],
            "arguments": {
                "strokes": [],
                "epsilon": []
            }
        },
        "rotate_strokes": {
            "name": "rotate_strokes",
            "location": 37,
            "return": [],
            "arguments": {
                "strokes": [],
                "degrees": []
            }
        },
        "mirror_strokes": {
            "name": "mirror_strokes",
            "location": 45,
            "return": [],
            "arguments": {
                "strokes": []
            }
        },
        "render_image": {
            "name": "render_image",
            "location": 63,
            "return": [],
            "arguments": {
                "strokes": [],
                "image_size": []
            }
        }
    },
    "kaggle-master/quickdraw-doodle-recognition/generate_train_sample.py": {
        "write_partitions": {
            "name": "write_partitions",
            "location": 12,
            "return": [],
            "arguments": {
                "df": [],
                "output_dir": []
            }
        },
        "generate_train_sample": {
            "name": "generate_train_sample",
            "location": 25,
            "return": [],
            "arguments": {
                "spark": [],
                "train_examples_per_class": [],
                "val_examples_per_class": [],
                "random_seed": []
            }
        },
        "write_partitions.write_partition": {
            "name": "write_partition",
            "location": 16,
            "return": [],
            "arguments": {
                "i": [],
                "iterator": []
            }
        }
    },
    "kaggle-master/quickdraw-doodle-recognition/models.py": {
        "get_model_wrapper": {
            "name": "get_model_wrapper",
            "location": 9,
            "return": [],
            "arguments": {
                "_config": []
            }
        },
        "_BaseModelWrapper.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "_config": []
            }
        },
        "_BaseModelWrapper.train": {
            "name": "train",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "optimizer": [],
                "dataset": []
            }
        },
        "_BaseModelWrapper.validate": {
            "name": "validate",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": []
            }
        },
        "_BaseModelWrapper.predict": {
            "name": "predict",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": []
            }
        },
        "_BaseModelWrapper.calculate_map": {
            "name": "calculate_map",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "scores": [],
                "labels": [],
                "k": []
            }
        },
        "CustomFlatten.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "filters": []
            }
        },
        "CustomFlatten.call": {
            "name": "call",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "input_tensor": [],
                "training": []
            }
        },
        "ConvNetWrapper.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "_config": []
            }
        },
        "ConvNetWrapper.calculate_loss": {
            "name": "calculate_loss",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "logits": [],
                "labels": []
            }
        },
        "ConvNetWrapper.train": {
            "name": "train",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "optimizer": [],
                "dataset": []
            }
        },
        "ConvNetWrapper.validate": {
            "name": "validate",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": []
            }
        },
        "ConvNetWrapper.predict": {
            "name": "predict",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": []
            }
        }
    },
    "kaggle-master/quickdraw-doodle-recognition/submit.py": {
        "submit": {
            "name": "submit",
            "location": 6,
            "return": [],
            "arguments": {
                "experiment_name": []
            }
        }
    },
    "kaggle-master/quickdraw-doodle-recognition/train_convnet.py": {
        "config": {
            "name": "config",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 49,
            "return": [],
            "arguments": {
                "_run": [],
                "_config": [],
                "_log": []
            }
        },
        "generate_predictions": {
            "name": "generate_predictions",
            "location": 149,
            "return": [],
            "arguments": {
                "_config": [],
                "_log": [],
                "model_wrapper": []
            }
        }
    },
    "kaggle-master/quickdraw-doodle-recognition/gcloud/common.py": {
        "pack_example": {
            "name": "pack_example",
            "location": 360,
            "return": [],
            "arguments": {
                "image": [],
                "label": [],
                "fout": []
            }
        },
        "unpack_example": {
            "name": "unpack_example",
            "location": 365,
            "return": [],
            "arguments": {
                "fin": []
            }
        },
        "unpack_examples": {
            "name": "unpack_examples",
            "location": 374,
            "return": [],
            "arguments": {
                "fin": []
            }
        },
        "roundrobin": {
            "name": "roundrobin",
            "location": 383,
            "return": [],
            "arguments": {
                "iterables": []
            }
        }
    },
    "kaggle-master/quickdraw-doodle-recognition/gcloud/convnet.py": {
        "get_model": {
            "name": "get_model",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "CustomFlatten.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "filters": []
            }
        },
        "CustomFlatten.call": {
            "name": "call",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "input_tensor": [],
                "training": []
            }
        }
    },
    "kaggle-master/quickdraw-doodle-recognition/gcloud/drawing.py": {
        "process_drawing": {
            "name": "process_drawing",
            "location": 6,
            "return": [],
            "arguments": {
                "drawing": [],
                "image_size": [],
                "augmentation": []
            }
        },
        "process_strokes": {
            "name": "process_strokes",
            "location": 12,
            "return": [],
            "arguments": {
                "strokes": [],
                "image_size": [],
                "augmentation": []
            }
        },
        "parse_drawing": {
            "name": "parse_drawing",
            "location": 25,
            "return": [],
            "arguments": {
                "drawing": [],
                "normalize": []
            }
        },
        "rotate_strokes": {
            "name": "rotate_strokes",
            "location": 35,
            "return": [],
            "arguments": {
                "strokes": [],
                "degrees": []
            }
        },
        "mirror_strokes": {
            "name": "mirror_strokes",
            "location": 43,
            "return": [],
            "arguments": {
                "strokes": []
            }
        },
        "normalize_strokes": {
            "name": "normalize_strokes",
            "location": 49,
            "return": [],
            "arguments": {
                "strokes": []
            }
        },
        "render_image": {
            "name": "render_image",
            "location": 61,
            "return": [],
            "arguments": {
                "strokes": [],
                "image_size": []
            }
        }
    },
    "kaggle-master/quickdraw-doodle-recognition/gcloud/generate_train_data.py": {
        "write_partitions": {
            "name": "write_partitions",
            "location": 12,
            "return": [],
            "arguments": {
                "df": [],
                "output_dir": []
            }
        },
        "generate_train_data": {
            "name": "generate_train_data",
            "location": 31,
            "return": [],
            "arguments": {
                "spark": [],
                "num_partitions": []
            }
        },
        "write_partitions.write_partition": {
            "name": "write_partition",
            "location": 16,
            "return": [],
            "arguments": {
                "i": [],
                "iterator": []
            }
        }
    },
    "kaggle-master/quickdraw-doodle-recognition/gcloud/onecycle.py": {
        "OneCycleLR.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "num_samples": [],
                "num_epochs": [],
                "batch_size": [],
                "max_lr": [],
                "end_percentage": [],
                "scale_percentage": [],
                "maximum_momentum": [],
                "minimum_momentum": [],
                "verbose": []
            }
        },
        "OneCycleLR._reset": {
            "name": "_reset",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OneCycleLR.compute_lr": {
            "name": "compute_lr",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OneCycleLR.compute_momentum": {
            "name": "compute_momentum",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OneCycleLR.on_train_begin": {
            "name": "on_train_begin",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "logs": []
            }
        },
        "OneCycleLR.on_batch_end": {
            "name": "on_batch_end",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "epoch": [],
                "logs": []
            }
        },
        "OneCycleLR.on_epoch_end": {
            "name": "on_epoch_end",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "epoch": [],
                "logs": []
            }
        }
    },
    "kaggle-master/quickdraw-doodle-recognition/gcloud/predict_convnet.py": {
        "get_test_generator": {
            "name": "get_test_generator",
            "location": 16,
            "return": [],
            "arguments": {
                "batch_size": [],
                "augmentation": []
            }
        },
        "generate_predictions": {
            "name": "generate_predictions",
            "location": 34,
            "return": [],
            "arguments": {
                "model": [],
                "augmented_images": []
            }
        },
        "write_submission": {
            "name": "write_submission",
            "location": 49,
            "return": [],
            "arguments": {
                "predictions": [],
                "output_file": []
            }
        },
        "main": {
            "name": "main",
            "location": 62,
            "return": [],
            "arguments": {}
        }
    },
    "kaggle-master/quickdraw-doodle-recognition/gcloud/train_convnet.py": {
        "bin_generator": {
            "name": "bin_generator",
            "location": 12,
            "return": [],
            "arguments": {
                "bin_file": []
            }
        },
        "get_train_generator": {
            "name": "get_train_generator",
            "location": 17,
            "return": [],
            "arguments": {
                "batch_size": []
            }
        },
        "main": {
            "name": "main",
            "location": 36,
            "return": [],
            "arguments": {}
        }
    },
    "kaggle-master/titanic/util.py": {
        "get_random_seed": {
            "name": "get_random_seed",
            "location": 9,
            "return": [],
            "arguments": {
                "num_bytes": []
            }
        },
        "ModelImputer.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "y_column": [],
                "X_columns": []
            }
        },
        "ModelImputer._get_X_columns": {
            "name": "_get_X_columns",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "ModelImputer.fit": {
            "name": "fit",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "X": [],
                "y": []
            }
        },
        "ModelImputer.transform": {
            "name": "transform",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "ColumnSelector.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "columns": []
            }
        },
        "ColumnSelector.fit": {
            "name": "fit",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "X": [],
                "y": []
            }
        },
        "ColumnSelector._get_support_mask": {
            "name": "_get_support_mask",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kaggle-master/toxic-comment-classification/base.py": {
        "CommentsDataset.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "df": [],
                "fields": []
            }
        },
        "BaseModel.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "params": [],
                "random_seed": []
            }
        },
        "BaseModel.main": {
            "name": "main",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.load_preprocessed_data": {
            "name": "load_preprocessed_data",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.build_fields_and_vocab": {
            "name": "build_fields_and_vocab",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "preprocessed_data": []
            }
        },
        "BaseModel.train": {
            "name": "train",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "fold_num": [],
                "train_df": [],
                "val_df": []
            }
        },
        "BaseModel.predict": {
            "name": "predict",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "df": [],
                "output_path": []
            }
        },
        "BaseModel.build_train_iterator": {
            "name": "build_train_iterator",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "BaseModel.build_prediction_iterator": {
            "name": "build_prediction_iterator",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "BaseModel.build_model": {
            "name": "build_model",
            "location": 256,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.calculate_loss": {
            "name": "calculate_loss",
            "location": 259,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "batch": []
            }
        },
        "BaseModel.update_parameters": {
            "name": "update_parameters",
            "location": 265,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "optimizer": [],
                "loss": []
            }
        },
        "BaseModel.evaluate_model": {
            "name": "evaluate_model",
            "location": 268,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "batch_iter": []
            }
        },
        "BaseModel.save_model": {
            "name": "save_model",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "fold_num": [],
                "model": []
            }
        },
        "BaseModel.load_model": {
            "name": "load_model",
            "location": 285,
            "return": [],
            "arguments": {
                "self": [],
                "fold_num": []
            }
        },
        "BaseModule.__init__": {
            "name": "__init__",
            "location": 294,
            "return": [],
            "arguments": {
                "self": [],
                "vocab": []
            }
        },
        "Dense.__init__": {
            "name": "__init__",
            "location": 311,
            "return": [],
            "arguments": {
                "self": [],
                "input_size": [],
                "output_size": [],
                "output_nonlinearity": [],
                "hidden_layers": [],
                "hidden_nonlinearity": [],
                "input_dropout": [],
                "hidden_dropout": [],
                "dropout": []
            }
        },
        "Dense.forward": {
            "name": "forward",
            "location": 359,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "WeightDrop.__init__": {
            "name": "__init__",
            "location": 366,
            "return": [],
            "arguments": {
                "self": [],
                "module": [],
                "weights": [],
                "dropout": []
            }
        },
        "WeightDrop.no_op": {
            "name": "no_op",
            "location": 373,
            "return": [],
            "arguments": {}
        },
        "WeightDrop._setup": {
            "name": "_setup",
            "location": 376,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WeightDrop._setweights": {
            "name": "_setweights",
            "location": 386,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WeightDrop.forward": {
            "name": "forward",
            "location": 392,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.build_fields_and_vocab.getitem": {
            "name": "getitem",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        }
    },
    "kaggle-master/toxic-comment-classification/common.py": {
        "params_str": {
            "name": "params_str",
            "location": 24,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "load_raw_data": {
            "name": "load_raw_data",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "load_data": {
            "name": "load_data",
            "location": 43,
            "return": [],
            "arguments": {
                "dataset": []
            }
        },
        "stratified_kfold": {
            "name": "stratified_kfold",
            "location": 50,
            "return": [],
            "arguments": {
                "df": [],
                "random_seed": [],
                "k": []
            }
        }
    },
    "kaggle-master/toxic-comment-classification/dpcnn.py": {
        "ConvBlock.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "channels": [],
                "dropout": []
            }
        },
        "ConvBlock._init_batchnorm": {
            "name": "_init_batchnorm",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "module": []
            }
        },
        "ConvBlock._init_conv": {
            "name": "_init_conv",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "module": []
            }
        },
        "ConvBlock.forward": {
            "name": "forward",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "DPCNNModule.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "vocab": [],
                "conv_blocks": [],
                "conv_dropout": [],
                "dense_layers": [],
                "dense_nonlinearily": [],
                "dense_dropout": []
            }
        },
        "DPCNNModule.forward": {
            "name": "forward",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "text_lengths": []
            }
        },
        "DPCNN.build_train_iterator": {
            "name": "build_train_iterator",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "DPCNN.build_prediction_iterator": {
            "name": "build_prediction_iterator",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "DPCNN.build_model": {
            "name": "build_model",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kaggle-master/toxic-comment-classification/evaluation.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [],
            "arguments": {}
        }
    },
    "kaggle-master/toxic-comment-classification/gcnn.py": {
        "GLU.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "in_channels": [],
                "out_channels": [],
                "kernel_size": []
            }
        },
        "GLU._init_conv": {
            "name": "_init_conv",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "module": []
            }
        },
        "GLU.forward": {
            "name": "forward",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ResidualBlock.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "in_channels": [],
                "out_channels": [],
                "kernel_size": [],
                "num_layers": []
            }
        },
        "ResidualBlock.forward": {
            "name": "forward",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "GCNNModule.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "vocab": [],
                "num_blocks": [],
                "num_layers": [],
                "num_channels": [],
                "kernel_size": [],
                "dense_layers": [],
                "dense_dropout": []
            }
        },
        "GCNNModule.forward": {
            "name": "forward",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "text_lengths": []
            }
        },
        "GCNN.build_train_iterator": {
            "name": "build_train_iterator",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "GCNN.build_prediction_iterator": {
            "name": "build_prediction_iterator",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "GCNN.build_model": {
            "name": "build_model",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GCNN.update_parameters": {
            "name": "update_parameters",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "optimizer": [],
                "loss": []
            }
        }
    },
    "kaggle-master/toxic-comment-classification/gru.py": {
        "minimal_preprocessing": {
            "name": "minimal_preprocessing",
            "location": 25,
            "return": [],
            "arguments": {
                "row": []
            }
        },
        "GRUModule.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "vocab": [],
                "annotation_dropout": [],
                "prediction_dropout": []
            }
        },
        "GRUModule.forward": {
            "name": "forward",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "text_lengths": []
            }
        },
        "GRU.load_preprocessed_data": {
            "name": "load_preprocessed_data",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GRU.build_train_iterator": {
            "name": "build_train_iterator",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "GRU.build_prediction_iterator": {
            "name": "build_prediction_iterator",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "GRU.build_model": {
            "name": "build_model",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GRU.update_parameters": {
            "name": "update_parameters",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "optimizer": [],
                "loss": []
            }
        }
    },
    "kaggle-master/toxic-comment-classification/label_stacking.py": {
        "LabelStacking.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "label": [],
                "params": [],
                "random_seed": []
            }
        },
        "LabelStacking.main": {
            "name": "main",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LabelStacking.load_inputs": {
            "name": "load_inputs",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "ids": [],
                "dataset": []
            }
        },
        "LabelStacking.train": {
            "name": "train",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "fold_num": [],
                "label": [],
                "X_train": [],
                "y_train": [],
                "X_val": [],
                "y_val": []
            }
        },
        "LabelStacking.save_model": {
            "name": "save_model",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "fold_num": [],
                "label": [],
                "model": []
            }
        },
        "LabelStacking.load_model": {
            "name": "load_model",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "fold_num": [],
                "label": []
            }
        },
        "LabelStacking.predict": {
            "name": "predict",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "X": []
            }
        },
        "Stacking.__init__": {
            "name": "__init__",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "tag": [],
                "params": [],
                "random_seed": []
            }
        },
        "Stacking.main": {
            "name": "main",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kaggle-master/toxic-comment-classification/lstm.py": {
        "LSTMModule.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "vocab": [],
                "rnn_size": [],
                "rnn_layers": [],
                "rnn_dropout": [],
                "dense_layers": [],
                "dense_nonlinearily": [],
                "dense_dropout": []
            }
        },
        "LSTMModule.forward": {
            "name": "forward",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "text_lengths": []
            }
        },
        "LSTM.build_train_iterator": {
            "name": "build_train_iterator",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "LSTM.build_prediction_iterator": {
            "name": "build_prediction_iterator",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "LSTM.build_model": {
            "name": "build_model",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LSTM.update_parameters": {
            "name": "update_parameters",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "optimizer": [],
                "loss": []
            }
        }
    },
    "kaggle-master/toxic-comment-classification/mlp.py": {
        "MLPModule.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "vocab": [],
                "hidden_layers": [],
                "hidden_units": [],
                "hidden_nonlinearity": [],
                "input_dropout": [],
                "hidden_dropout": []
            }
        },
        "MLPModule.forward": {
            "name": "forward",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "text_lengths": []
            }
        },
        "MLP.build_train_iterator": {
            "name": "build_train_iterator",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "MLP.build_prediction_iterator": {
            "name": "build_prediction_iterator",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "MLP.build_model": {
            "name": "build_model",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kaggle-master/toxic-comment-classification/ngram.py": {
        "NGram.main": {
            "name": "main",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NGram.train": {
            "name": "train",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "fold_num": [],
                "vectorizer": [],
                "train_df": [],
                "val_df": []
            }
        },
        "NGram.predict": {
            "name": "predict",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "models": [],
                "vectorizer": [],
                "df": [],
                "output_path": []
            }
        },
        "NGram.build_vectorizer": {
            "name": "build_vectorizer",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "train_df": [],
                "test_df": []
            }
        }
    },
    "kaggle-master/toxic-comment-classification/preprocessing.py": {
        "load": {
            "name": "load",
            "location": 25,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "preprocess_row": {
            "name": "preprocess_row",
            "location": 67,
            "return": [],
            "arguments": {
                "row": []
            }
        },
        "preprocess": {
            "name": "preprocess",
            "location": 71,
            "return": [],
            "arguments": {
                "text": []
            }
        }
    },
    "kaggle-master/toxic-comment-classification/stacking.py": {
        "Stacking.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "params": [],
                "random_seed": []
            }
        },
        "Stacking.main": {
            "name": "main",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stacking.load_inputs": {
            "name": "load_inputs",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "label": [],
                "ids": [],
                "dataset": []
            }
        },
        "Stacking.train": {
            "name": "train",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "fold_num": [],
                "label": [],
                "X_train": [],
                "y_train": [],
                "X_val": [],
                "y_val": []
            }
        },
        "Stacking.save_model": {
            "name": "save_model",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "fold_num": [],
                "label": [],
                "model": []
            }
        },
        "Stacking.load_model": {
            "name": "load_model",
            "location": 257,
            "return": [],
            "arguments": {
                "self": [],
                "fold_num": [],
                "label": []
            }
        },
        "Stacking.predict": {
            "name": "predict",
            "location": 262,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "X": []
            }
        }
    },
    "kaggle-master/toxic-comment-classification/xgb.py": {
        "XGB.main": {
            "name": "main",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XGB.train": {
            "name": "train",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "fold_num": [],
                "vectorizer": [],
                "train_df": [],
                "val_df": []
            }
        },
        "XGB.predict": {
            "name": "predict",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "models": [],
                "vectorizer": [],
                "df": [],
                "output_path": []
            }
        },
        "XGB.build_vectorizer": {
            "name": "build_vectorizer",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "preprocessed_data": []
            }
        }
    },
    "kaggle-master/web-traffic-forecasting/pipelines/config.py": {},
    "kaggle-master/web-traffic-forecasting/pipelines/data.py": {
        "get_data_dir": {
            "name": "get_data_dir",
            "location": 127,
            "return": [],
            "arguments": {
                "stage": [],
                "imputation": [],
                "sample_ratio": [],
                "random_seed": [],
                "deploy_date": [],
                "from_date": [],
                "to_date": []
            }
        },
        "Key.output": {
            "name": "output",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Key.read": {
            "name": "read",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InputData.output": {
            "name": "output",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InputData.read": {
            "name": "read",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImputedData.requires": {
            "name": "requires",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImputedData.output": {
            "name": "output",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImputedData.read": {
            "name": "read",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImputedData.run": {
            "name": "run",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImputedData._interpolate": {
            "name": "_interpolate",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "page_data": []
            }
        },
        "ImputedDataSample.requires": {
            "name": "requires",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImputedDataSample.output": {
            "name": "output",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImputedDataSample.read": {
            "name": "read",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImputedDataSample.run": {
            "name": "run",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kaggle-master/web-traffic-forecasting/pipelines/evaluation.py": {
        "calculate_smape": {
            "name": "calculate_smape",
            "location": 14,
            "return": [],
            "arguments": {
                "y_true": [],
                "y_pred": []
            }
        },
        "ModelEvaluation.requires": {
            "name": "requires",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelEvaluation.output": {
            "name": "output",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelEvaluation.run": {
            "name": "run",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvaluationSummary.complete": {
            "name": "complete",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvaluationSummary.output": {
            "name": "output",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvaluationSummary.requires": {
            "name": "requires",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvaluationSummary.run": {
            "name": "run",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kaggle-master/web-traffic-forecasting/pipelines/submissions.py": {
        "Submission.requires": {
            "name": "requires",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Submission.output": {
            "name": "output",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Submission.run": {
            "name": "run",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kaggle-master/web-traffic-forecasting/pipelines/__init__.py": {},
    "kaggle-master/web-traffic-forecasting/pipelines/models/common.py": {
        "init_random_state": {
            "name": "init_random_state",
            "location": 14,
            "return": [],
            "arguments": {
                "random_seed": []
            }
        },
        "layer_units": {
            "name": "layer_units",
            "location": 21,
            "return": [],
            "arguments": {
                "input_size": [],
                "output_size": [],
                "num_layers": []
            }
        },
        "generate_training_data": {
            "name": "generate_training_data",
            "location": 87,
            "return": [],
            "arguments": {
                "data": [],
                "deploy_date": [],
                "from_date": [],
                "to_date": [],
                "num_days_before": []
            }
        },
        "generate_training_sample": {
            "name": "generate_training_sample",
            "location": 148,
            "return": [],
            "arguments": {
                "page": [],
                "page_data": [],
                "last_year_f": [],
                "last_year_t": [],
                "d": [],
                "f": [],
                "t": [],
                "num_days_target": [],
                "num_days_before": []
            }
        },
        "generate_prediction_data": {
            "name": "generate_prediction_data",
            "location": 167,
            "return": [],
            "arguments": {
                "data": [],
                "deploy_date": [],
                "from_date": [],
                "to_date": [],
                "num_days_before": []
            }
        },
        "generate_prediction_sample": {
            "name": "generate_prediction_sample",
            "location": 203,
            "return": [],
            "arguments": {
                "page": [],
                "page_data": [],
                "last_year_from_date": [],
                "last_year_to_date": [],
                "deploy_date": [],
                "num_days_target": [],
                "num_days_before": []
            }
        },
        "Projection.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "input_size": [],
                "output_size": [],
                "output_nonlinearity": [],
                "hidden_layers": [],
                "hidden_nonlinearity": [],
                "dropout": []
            }
        },
        "Projection.forward": {
            "name": "forward",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "MultiTensorDataset.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "target_tensor": []
            }
        },
        "MultiTensorDataset.__getitem__": {
            "name": "__getitem__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "MultiTensorDataset.__len__": {
            "name": "__len__",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kaggle-master/web-traffic-forecasting/pipelines/models/historical_median.py": {
        "FitHistoricalMedian.run": {
            "name": "run",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictHistoricalMedian.requires": {
            "name": "requires",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictHistoricalMedian.run": {
            "name": "run",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kaggle-master/web-traffic-forecasting/pipelines/models/rnn_v1.py": {},
    "kaggle-master/web-traffic-forecasting/pipelines/models/__init__.py": {
        "_ModelTask.requires": {
            "name": "requires",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ModelTask.data_dir": {
            "name": "data_dir",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FitModel.model_name": {
            "name": "model_name",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FitModel.output": {
            "name": "output",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictModel.model_name": {
            "name": "model_name",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictModel.output": {
            "name": "output",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelPredictions.output": {
            "name": "output",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelPredictions.read": {
            "name": "read",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    }
}
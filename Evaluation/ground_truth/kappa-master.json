{
    "kappa-master/conftest.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 5,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "should_log": {
            "name": "should_log",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": []
            }
        },
        "no_build": {
            "name": "no_build",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "kappa-master/test_integration.py": {
        "rand_id": {
            "name": "rand_id",
            "location": 148,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "create_bucket": {
            "name": "create_bucket",
            "location": 152,
            "return": [],
            "arguments": {
                "prefix": [
                    "str"
                ]
            }
        },
        "delete_bucket": {
            "name": "delete_bucket",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "bucket": []
            }
        },
        "coordinator": {
            "name": "coordinator",
            "location": 167,
            "return": [
                "Coordinator"
            ],
            "arguments": {
                "tmpdir_factory": [],
                "should_log": [
                    "bool"
                ],
                "no_build": [
                    "bool"
                ]
            }
        },
        "aws_config": {
            "name": "aws_config",
            "location": 173,
            "return": [
                "Generator[(Path, None, None)]"
            ],
            "arguments": {
                "tmpdir_factory": []
            }
        },
        "_num_times_blocked": {
            "name": "_num_times_blocked",
            "location": 193,
            "return": [],
            "arguments": {
                "log_path": [
                    "Path"
                ]
            }
        },
        "_assert_no_warning": {
            "name": "_assert_no_warning",
            "location": 199,
            "return": [],
            "arguments": {
                "log_path": [
                    "Path"
                ]
            }
        },
        "_assert_timeout": {
            "name": "_assert_timeout",
            "location": 207,
            "return": [],
            "arguments": {
                "log_path": [
                    "Path"
                ]
            }
        },
        "RPCMode.__str__": {
            "name": "__str__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Coordinator.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bin_path": [
                    "Path"
                ],
                "should_log": [
                    "bool"
                ],
                "no_build": [
                    "bool"
                ]
            }
        },
        "Coordinator.invoke": {
            "name": "invoke",
            "location": 78,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "platform": [
                    "str"
                ],
                "event": [
                    "object"
                ],
                "package": [
                    "Iterable[Path]"
                ],
                "rpc": [
                    "RPCMode"
                ],
                "timeout_secs": [
                    "int"
                ],
                "log_path": [
                    "Path"
                ],
                "config_path": [
                    "Optional[Path]"
                ],
                "workload_name": [
                    "Optional[str]"
                ],
                "env": [
                    "Optional[Dict[(str, str)]]"
                ]
            }
        },
        "Executor.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coord": [
                    "Coordinator"
                ],
                "platform": [
                    "str"
                ],
                "temp_dir": [
                    "Path"
                ],
                "config_path": [
                    "Optional[Path]"
                ],
                "workload_name": [
                    "Optional[str]"
                ]
            }
        },
        "Executor.run": {
            "name": "run",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "script": [
                    "str"
                ],
                "event": [
                    "object"
                ],
                "expected": [
                    "object"
                ],
                "rpc": [
                    "RPCMode"
                ],
                "timeout_secs": [
                    "int"
                ],
                "env": [
                    "Optional[Dict[(str, str)]]"
                ]
            }
        },
        "TestLocal.ex": {
            "name": "ex",
            "location": 216,
            "return": [
                "Executor"
            ],
            "arguments": {
                "self": [],
                "coordinator": [],
                "tmpdir": [],
                "request": []
            }
        },
        "TestLocal.test_factorial": {
            "name": "test_factorial",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "ex": [
                    "Executor"
                ],
                "script": [
                    "str"
                ]
            }
        },
        "TestLocal.test_factorial_for_rpc": {
            "name": "test_factorial_for_rpc",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "ex": [
                    "Executor"
                ]
            }
        },
        "TestLocal.test_spawn_fib": {
            "name": "test_spawn_fib",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "ex": [
                    "Executor"
                ],
                "rpc": [
                    "RPCMode"
                ]
            }
        },
        "TestLocal.test_spawn_fib1": {
            "name": "test_spawn_fib1",
            "location": 244,
            "return": [],
            "arguments": {
                "self": [],
                "ex": [
                    "Executor"
                ],
                "rpc": [
                    "RPCMode"
                ]
            }
        },
        "TestLocal.test_spawn_fib_blocking": {
            "name": "test_spawn_fib_blocking",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "ex": [
                    "Executor"
                ],
                "rpc": [
                    "RPCMode"
                ]
            }
        },
        "TestLocal.test_queue": {
            "name": "test_queue",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "ex": [
                    "Executor"
                ],
                "qsize": [
                    "int"
                ],
                "rpc": [
                    "RPCMode"
                ]
            }
        },
        "TestLocal.test_work_queue": {
            "name": "test_work_queue",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "ex": [
                    "Executor"
                ]
            }
        },
        "TestLocal.test_futures": {
            "name": "test_futures",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "ex": [
                    "Executor"
                ]
            }
        },
        "TestLocal.test_map_spawn": {
            "name": "test_map_spawn",
            "location": 265,
            "return": [],
            "arguments": {
                "self": [],
                "ex": [
                    "Executor"
                ]
            }
        },
        "TestLocal.test_timeout": {
            "name": "test_timeout",
            "location": 268,
            "return": [],
            "arguments": {
                "self": [],
                "ex": [
                    "Executor"
                ]
            }
        },
        "TestAWS.ex": {
            "name": "ex",
            "location": 277,
            "return": [
                "Executor"
            ],
            "arguments": {
                "self": [],
                "coordinator": [],
                "tmpdir": [],
                "aws_config": [],
                "request": []
            }
        },
        "TestAWS.test_factorial": {
            "name": "test_factorial",
            "location": 282,
            "return": [],
            "arguments": {
                "self": [],
                "ex": [
                    "Executor"
                ],
                "rpc": [
                    "RPCMode"
                ]
            }
        },
        "TestAWS.test_spawn": {
            "name": "test_spawn",
            "location": 286,
            "return": [],
            "arguments": {
                "self": [],
                "ex": [
                    "Executor"
                ],
                "rpc": [
                    "RPCMode"
                ]
            }
        },
        "TestAWS.test_spawn_blocking": {
            "name": "test_spawn_blocking",
            "location": 290,
            "return": [],
            "arguments": {
                "self": [],
                "ex": [
                    "Executor"
                ],
                "rpc": [
                    "RPCMode"
                ]
            }
        },
        "TestAWS.test_spawn_target": {
            "name": "test_spawn_target",
            "location": 293,
            "return": [],
            "arguments": {
                "self": [],
                "ex": [
                    "Executor"
                ]
            }
        },
        "TestAWS.test_queue": {
            "name": "test_queue",
            "location": 298,
            "return": [],
            "arguments": {
                "self": [],
                "ex": [
                    "Executor"
                ],
                "qsize": [
                    "int"
                ],
                "rpc": [
                    "RPCMode"
                ]
            }
        },
        "TestAWS.test_work_queue": {
            "name": "test_work_queue",
            "location": 301,
            "return": [],
            "arguments": {
                "self": [],
                "ex": [
                    "Executor"
                ]
            }
        },
        "TestAWS.test_store": {
            "name": "test_store",
            "location": 305,
            "return": [],
            "arguments": {
                "self": [],
                "ex": [
                    "Executor"
                ]
            }
        },
        "TestAWS.test_timeout": {
            "name": "test_timeout",
            "location": 320,
            "return": [],
            "arguments": {
                "self": [],
                "ex": [
                    "Executor"
                ]
            }
        },
        "TestAWS.test_futures": {
            "name": "test_futures",
            "location": 324,
            "return": [],
            "arguments": {
                "self": [],
                "ex": [
                    "Executor"
                ]
            }
        },
        "TestAWS.test_map_spawn": {
            "name": "test_map_spawn",
            "location": 327,
            "return": [],
            "arguments": {
                "self": [],
                "ex": [
                    "Executor"
                ]
            }
        }
    },
    "kappa-master/compiler/do_transform.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [],
            "arguments": {}
        }
    },
    "kappa-master/compiler/invoker.py": {
        "copy_file_or_dir": {
            "name": "copy_file_or_dir",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "src": [
                    "Path"
                ],
                "dst_dir": [
                    "Path"
                ]
            }
        },
        "deploy": {
            "name": "deploy",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "deploy_path": [
                    "Path"
                ],
                "script_paths": [
                    "Sequence[Path]"
                ]
            }
        },
        "_invoke": {
            "name": "_invoke",
            "location": 127,
            "return": [],
            "arguments": {
                "conn_retval": [],
                "package_dir": [],
                "entry_module_name": [],
                "stdout_f": [],
                "event": [],
                "context": [],
                "quiet": []
            }
        },
        "invoke": {
            "name": "invoke",
            "location": 158,
            "return": [],
            "arguments": {
                "package_dir": [],
                "entry_module": [],
                "event": [],
                "timeout_secs": [],
                "quiet": []
            }
        },
        "main": {
            "name": "main",
            "location": 198,
            "return": [],
            "arguments": {}
        },
        "Context.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deadline": [
                    "float"
                ]
            }
        },
        "Context.get_remaining_time_in_millis": {
            "name": "get_remaining_time_in_millis",
            "location": 43,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeLimitExceeded.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "stdout_so_far": []
            }
        },
        "WorkerRaisedException.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "exc": [],
                "tb": [],
                "stdout_so_far": []
            }
        },
        "Tee.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "other_file": []
            }
        },
        "Tee.__del__": {
            "name": "__del__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tee.write": {
            "name": "write",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Tee.flush": {
            "name": "flush",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kappa-master/compiler/rt/async_call.py": {
        "_AsyncWorker.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rpc_addr": [
                    "str"
                ],
                "calls": [
                    "Sequence[FinalizedCoordinatorCall]"
                ],
                "seqno": [
                    "Seqno"
                ],
                "chk_manager": [
                    "CheckpointManager"
                ],
                "chk_file": [
                    "BytesIO"
                ],
                "lambda_pid": [
                    "Pid"
                ]
            }
        },
        "_AsyncWorker.run": {
            "name": "run",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncCaller.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rpc_addr": [
                    "Optional[str]"
                ],
                "chk_manager": [
                    "CheckpointManager"
                ],
                "pid": [
                    "Pid"
                ]
            }
        },
        "AsyncCaller._update_worker_state": {
            "name": "_update_worker_state",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncCaller.get_next_seqno": {
            "name": "get_next_seqno",
            "location": 110,
            "return": [
                "Seqno"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncCaller.call": {
            "name": "call",
            "location": 118,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "calls": [
                    "Sequence[FinalizedCoordinatorCall]"
                ],
                "conts": [
                    "Continuations"
                ],
                "seqno": [
                    "Seqno"
                ]
            }
        }
    },
    "kappa-master/compiler/rt/chk_manager.py": {
        "CheckpointManager.load": {
            "name": "load",
            "location": 23,
            "return": [
                "Optional[Continuations]"
            ],
            "arguments": {
                "self": [],
                "chk_id": [
                    "CheckpointID"
                ]
            }
        },
        "CheckpointManager._load_from_path": {
            "name": "_load_from_path",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Path"
                ]
            }
        },
        "CheckpointManager.save": {
            "name": "save",
            "location": 34,
            "return": [
                "CheckpointID"
            ],
            "arguments": {
                "self": [],
                "conts": [
                    "Continuations"
                ],
                "pid": [
                    "Pid"
                ],
                "seqno": [
                    "Seqno"
                ]
            }
        },
        "CheckpointManager.save_from_file": {
            "name": "save_from_file",
            "location": 44,
            "return": [
                "CheckpointID"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "BinaryIO"
                ],
                "pid": [
                    "Pid"
                ],
                "seqno": [
                    "Seqno"
                ]
            }
        },
        "CheckpointManager.serialize": {
            "name": "serialize",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "conts": [
                    "Continuations"
                ],
                "f": [
                    "BinaryIO"
                ]
            }
        },
        "CheckpointManager._deserialize": {
            "name": "_deserialize",
            "location": 58,
            "return": [
                "Continuations"
            ],
            "arguments": {
                "cls": [],
                "f": [
                    "BinaryIO"
                ]
            }
        },
        "CheckpointManager._make_chk_id": {
            "name": "_make_chk_id",
            "location": 63,
            "return": [
                "CheckpointID"
            ],
            "arguments": {
                "pid": [
                    "Pid"
                ],
                "seqno": [
                    "Seqno"
                ]
            }
        },
        "LocalCheckpointManager.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "checkpoint_dir": [
                    "Path"
                ]
            }
        },
        "LocalCheckpointManager.load": {
            "name": "load",
            "location": 76,
            "return": [
                "Optional[Continuations]"
            ],
            "arguments": {
                "self": [],
                "chk_id": [
                    "CheckpointID"
                ]
            }
        },
        "LocalCheckpointManager.save": {
            "name": "save",
            "location": 84,
            "return": [
                "CheckpointID"
            ],
            "arguments": {
                "self": [],
                "conts": [
                    "Continuations"
                ],
                "pid": [
                    "Pid"
                ],
                "seqno": [
                    "Seqno"
                ]
            }
        },
        "LocalCheckpointManager.save_from_file": {
            "name": "save_from_file",
            "location": 95,
            "return": [
                "CheckpointID"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "BinaryIO"
                ],
                "pid": [
                    "Pid"
                ],
                "seqno": [
                    "Seqno"
                ]
            }
        },
        "S3CheckpointManager.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bucket_name": [
                    "str"
                ]
            }
        },
        "S3CheckpointManager.load": {
            "name": "load",
            "location": 114,
            "return": [
                "Optional[Continuations]"
            ],
            "arguments": {
                "self": [],
                "chk_id": [
                    "CheckpointID"
                ]
            }
        },
        "S3CheckpointManager.save": {
            "name": "save",
            "location": 123,
            "return": [
                "CheckpointID"
            ],
            "arguments": {
                "self": [],
                "conts": [
                    "Continuations"
                ],
                "pid": [
                    "Pid"
                ],
                "seqno": [
                    "Seqno"
                ]
            }
        },
        "S3CheckpointManager.save_from_file": {
            "name": "save_from_file",
            "location": 136,
            "return": [
                "CheckpointID"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "BinaryIO"
                ],
                "pid": [
                    "Pid"
                ],
                "seqno": [
                    "Seqno"
                ]
            }
        }
    },
    "kappa-master/compiler/rt/consts.py": {},
    "kappa-master/compiler/rt/continuation.py": {
        "Continuation.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Continuation.__call__": {
            "name": "__call__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "result": []
            }
        },
        "Continuation.run": {
            "name": "run",
            "location": 17,
            "return": [],
            "arguments": {}
        }
    },
    "kappa-master/compiler/rt/coordinator_call.py": {
        "_serialize_object": {
            "name": "_serialize_object",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "object"
                ]
            }
        },
        "_deserialize_result": {
            "name": "_deserialize_result",
            "location": 29,
            "return": [
                "object"
            ],
            "arguments": {
                "serialization": [
                    "str"
                ]
            }
        },
        "pause": {
            "name": "pause",
            "location": 97,
            "return": [
                "'NoReturn'"
            ],
            "arguments": {
                "is_async": [
                    "bool"
                ]
            }
        },
        "exit_process": {
            "name": "exit_process",
            "location": 114,
            "return": [
                "'NoReturn'"
            ],
            "arguments": {
                "result": [
                    "object"
                ]
            }
        },
        "spawn": {
            "name": "spawn",
            "location": 211,
            "return": [
                "'NoReturn'"
            ],
            "arguments": {
                "f": [
                    "Callable"
                ],
                "args": [
                    "Sequence[object]"
                ]
            }
        },
        "spawn_many": {
            "name": "spawn_many",
            "location": 234,
            "return": [
                "'NoReturn'"
            ],
            "arguments": {
                "f": [
                    "Callable"
                ],
                "args": [
                    "Sequence[object]"
                ],
                "copies": [
                    "int"
                ]
            }
        },
        "on_coordinator": {
            "name": "on_coordinator",
            "location": 240,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "map_spawn": {
            "name": "map_spawn",
            "location": 310,
            "return": [
                "'NoReturn'"
            ],
            "arguments": {
                "f": [
                    "Callable"
                ],
                "elems": [
                    "Iterable[object]"
                ]
            }
        },
        "create_queue": {
            "name": "create_queue",
            "location": 372,
            "return": [
                "'NoReturn'"
            ],
            "arguments": {
                "max_size": [
                    "int"
                ]
            }
        },
        "create_queues": {
            "name": "create_queues",
            "location": 376,
            "return": [
                "'NoReturn'"
            ],
            "arguments": {
                "max_size": [
                    "int"
                ],
                "copies": [
                    "int"
                ]
            }
        },
        "CoordinatorCall.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "op": [
                    "str"
                ],
                "params": [
                    "Optional[ParamDict]"
                ]
            }
        },
        "CoordinatorCall.add_continuation": {
            "name": "add_continuation",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cont": [
                    "ContinuationT"
                ]
            }
        },
        "CoordinatorCall.continuation": {
            "name": "continuation",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {
                "result": [
                    "object"
                ]
            }
        },
        "CoordinatorCall._finalize_params": {
            "name": "_finalize_params",
            "location": 67,
            "return": [
                "ParamDict"
            ],
            "arguments": {
                "self": [],
                "chk_manager": [
                    "CheckpointManager"
                ],
                "pid": [
                    "Pid"
                ],
                "seqno": [
                    "Seqno"
                ]
            }
        },
        "CoordinatorCall.finalize": {
            "name": "finalize",
            "location": 80,
            "return": [
                "FinalizedCoordinatorCall"
            ],
            "arguments": {
                "self": [],
                "chk_manager": [
                    "CheckpointManager"
                ],
                "pid": [
                    "Pid"
                ],
                "seqno": [
                    "Seqno"
                ]
            }
        },
        "Checkpoint.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_async": [
                    "bool"
                ]
            }
        },
        "Checkpoint.continuation": {
            "name": "continuation",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "_result": [
                    "object"
                ]
            }
        },
        "Exit.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "object"
                ]
            }
        },
        "Exit.continuation": {
            "name": "continuation",
            "location": 110,
            "return": [
                "'NoReturn'"
            ],
            "arguments": {
                "_result": [
                    "object"
                ]
            }
        },
        "_ProcessStart.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable"
                ],
                "args": [
                    "Sequence[Any]"
                ]
            }
        },
        "_ProcessStart.run": {
            "name": "run",
            "location": 127,
            "return": [],
            "arguments": {}
        },
        "Future.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pid": [
                    "Pid"
                ]
            }
        },
        "Future.wait": {
            "name": "wait",
            "location": 148,
            "return": [
                "'NoReturn'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Spawn.__init__": {
            "name": "__init__",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable"
                ],
                "args": [
                    "Sequence[Any]"
                ],
                "awaits": [
                    "Iterable[Future]"
                ],
                "name": [
                    "Optional[str]"
                ],
                "blocking": [
                    "bool"
                ],
                "copies": [
                    "int"
                ]
            }
        },
        "Spawn.continuation": {
            "name": "continuation",
            "location": 173,
            "return": [],
            "arguments": {
                "result": [
                    "object"
                ]
            }
        },
        "Spawn._finalize_params": {
            "name": "_finalize_params",
            "location": 185,
            "return": [
                "ParamDict"
            ],
            "arguments": {
                "self": [],
                "chk_manager": [
                    "CheckpointManager"
                ],
                "pid": [
                    "Pid"
                ],
                "seqno": [
                    "Seqno"
                ]
            }
        },
        "SpawnOne.__init__": {
            "name": "__init__",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable"
                ],
                "args": [
                    "Sequence[Any]"
                ],
                "awaits": [
                    "Iterable[Future]"
                ],
                "name": [
                    "Optional[str]"
                ],
                "blocking": [
                    "bool"
                ]
            }
        },
        "SpawnOne.continuation": {
            "name": "continuation",
            "location": 207,
            "return": [],
            "arguments": {
                "result": [
                    "object"
                ]
            }
        },
        "_MapProcessStart.__init__": {
            "name": "__init__",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable"
                ],
                "extra_args": [
                    "Sequence[object]"
                ]
            }
        },
        "_MapProcessStart.run": {
            "name": "run",
            "location": 252,
            "return": [],
            "arguments": {}
        },
        "MapSpawn.__init__": {
            "name": "__init__",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable"
                ],
                "elems": [
                    "Iterable[object]"
                ],
                "extra_args": [
                    "Iterable[object]"
                ],
                "awaits": [
                    "Iterable[Future]"
                ],
                "name": [
                    "Optional[str]"
                ]
            }
        },
        "MapSpawn.continuation": {
            "name": "continuation",
            "location": 291,
            "return": [],
            "arguments": {
                "children_pids": [
                    "object"
                ]
            }
        },
        "MapSpawn._finalize_params": {
            "name": "_finalize_params",
            "location": 296,
            "return": [
                "ParamDict"
            ],
            "arguments": {
                "self": [],
                "chk_manager": [
                    "CheckpointManager"
                ],
                "pid": [
                    "Pid"
                ],
                "seqno": [
                    "Seqno"
                ]
            }
        },
        "Wait.__init__": {
            "name": "__init__",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pid": [
                    "Pid"
                ]
            }
        },
        "Wait.continuation": {
            "name": "continuation",
            "location": 323,
            "return": [
                "Any"
            ],
            "arguments": {
                "result": [
                    "object"
                ]
            }
        },
        "Queue.__init__": {
            "name": "__init__",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qid": [
                    "int"
                ]
            }
        },
        "Queue.enqueue": {
            "name": "enqueue",
            "location": 338,
            "return": [
                "'NoReturn'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.dequeue": {
            "name": "dequeue",
            "location": 346,
            "return": [
                "'NoReturn'"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateQueue.__init__": {
            "name": "__init__",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_size": [
                    "int"
                ],
                "copies": [
                    "int"
                ]
            }
        },
        "CreateQueue.continuation": {
            "name": "continuation",
            "location": 363,
            "return": [
                "Any"
            ],
            "arguments": {
                "result": [
                    "object"
                ]
            }
        },
        "Enqueue.__init__": {
            "name": "__init__",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qid": [
                    "int"
                ],
                "objs": [
                    "Sequence[object]"
                ],
                "is_async": [
                    "bool"
                ]
            }
        },
        "Enqueue.continuation": {
            "name": "continuation",
            "location": 388,
            "return": [
                "Any"
            ],
            "arguments": {
                "_": [
                    "object"
                ]
            }
        },
        "Dequeue.__init__": {
            "name": "__init__",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qid": [
                    "int"
                ]
            }
        },
        "Dequeue.continuation": {
            "name": "continuation",
            "location": 398,
            "return": [
                "Any"
            ],
            "arguments": {
                "result": [
                    "object"
                ]
            }
        },
        "Blocked.__init__": {
            "name": "__init__",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blocked.continuation": {
            "name": "continuation",
            "location": 416,
            "return": [
                "'NoReturn'"
            ],
            "arguments": {
                "result": [
                    "object"
                ]
            }
        },
        "RemapStore.__init__": {
            "name": "__init__",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_bucket": [
                    "str"
                ],
                "tmp_key": [
                    "str"
                ],
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ],
                "is_async": [
                    "bool"
                ]
            }
        },
        "RemapStore.continuation": {
            "name": "continuation",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "_result": [
                    "object"
                ]
            }
        }
    },
    "kappa-master/compiler/rt/logging.py": {
        "log": {
            "name": "log",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "pid": [
                    "Pid"
                ],
                "seqno": [
                    "Seqno"
                ],
                "msg": [
                    "str"
                ]
            }
        },
        "log_begin": {
            "name": "log_begin",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "pid": [
                    "Pid"
                ],
                "seqno": [
                    "Seqno"
                ],
                "event": [
                    "str"
                ]
            }
        },
        "log_end": {
            "name": "log_end",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "pid": [
                    "Pid"
                ],
                "seqno": [
                    "Seqno"
                ],
                "event": [
                    "str"
                ]
            }
        },
        "log_duration": {
            "name": "log_duration",
            "location": 29,
            "return": [
                "Generator[(None, None, None)]"
            ],
            "arguments": {
                "pid": [
                    "Pid"
                ],
                "seqno": [
                    "Seqno"
                ],
                "event": [
                    "str"
                ]
            }
        },
        "log_at_end": {
            "name": "log_at_end",
            "location": 39,
            "return": [
                "Generator[(None, None, None)]"
            ],
            "arguments": {
                "pid": [
                    "Pid"
                ],
                "seqno": [
                    "Seqno"
                ],
                "event": [
                    "str"
                ]
            }
        }
    },
    "kappa-master/compiler/rt/protocol.py": {
        "Request.__str__": {
            "name": "__str__",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.make_blocked": {
            "name": "make_blocked",
            "location": 38,
            "return": [
                "'Request'"
            ],
            "arguments": {
                "pid": [
                    "Pid"
                ],
                "seqno": [
                    "Seqno"
                ]
            }
        }
    },
    "kappa-master/compiler/rt/rpc.py": {
        "rpc": {
            "name": "rpc",
            "location": 25,
            "return": [],
            "arguments": {
                "addr": [
                    "str"
                ],
                "req": [
                    "Request"
                ],
                "pid": [
                    "Pid"
                ],
                "seqno": [
                    "Seqno"
                ]
            }
        },
        "RPCError.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str"
                ],
                "message": [
                    "str"
                ]
            }
        }
    },
    "kappa-master/compiler/rt/run.py": {
        "run": {
            "name": "run",
            "location": 31,
            "return": [],
            "arguments": {
                "entry_point": [
                    "Callable"
                ]
            }
        },
        "_run": {
            "name": "_run",
            "location": 37,
            "return": [
                "Request"
            ],
            "arguments": {
                "chk_manager": [
                    "CheckpointManager"
                ],
                "pid": [
                    "Pid"
                ],
                "start_seqno": [
                    "Seqno"
                ],
                "start_chk_id": [
                    "CheckpointID"
                ],
                "return_value": [],
                "rpc_addr": [
                    "Optional[str]"
                ],
                "entry_point": [
                    "Callable"
                ]
            }
        },
        "select_chk_manager": {
            "name": "select_chk_manager",
            "location": 117,
            "return": [
                "CheckpointManager"
            ],
            "arguments": {
                "platform": [
                    "str"
                ]
            }
        },
        "lambda_handler": {
            "name": "lambda_handler",
            "location": 131,
            "return": [],
            "arguments": {
                "handler": []
            }
        },
        "_CoordinatorCallBacklog.prune": {
            "name": "prune",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "next_seqno": [
                    "Seqno"
                ]
            }
        },
        "lambda_handler.decorated_handler": {
            "name": "decorated_handler",
            "location": 139,
            "return": [
                "str"
            ],
            "arguments": {
                "event": [
                    "Dict[(str, object)]"
                ],
                "context": []
            }
        },
        "lambda_handler.decorated_handler.entry_point": {
            "name": "entry_point",
            "location": 170,
            "return": [],
            "arguments": {}
        }
    },
    "kappa-master/compiler/rt/__init__.py": {
        "pause": {
            "name": "pause",
            "location": 16,
            "return": [],
            "arguments": {
                "is_async": []
            }
        },
        "maybe_pause": {
            "name": "maybe_pause",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "set_logging_level": {
            "name": "set_logging_level",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "level": []
            }
        },
        "_reconstructor": {
            "name": "_reconstructor",
            "location": 65,
            "return": [],
            "arguments": {
                "func": [],
                "args": [],
                "kwargs": []
            }
        },
        "reconstructor": {
            "name": "reconstructor",
            "location": 70,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "_InitContinuation.run": {
            "name": "run",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "TransformedClassMeta.__call__": {
            "name": "__call__",
            "location": 48,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "reconstructor._Wrapper.__reduce_ex__": {
            "name": "__reduce_ex__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "_protocol": []
            }
        }
    },
    "kappa-master/compiler/rt/global_state/pause_ctrl.py": {
        "PauseControl.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PauseControl.should_pause": {
            "name": "should_pause",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PauseControl.record_pause": {
            "name": "record_pause",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kappa-master/compiler/rt/global_state/__init__.py": {},
    "kappa-master/compiler/rt/storage/local.py": {
        "_bucket_path": {
            "name": "_bucket_path",
            "location": 16,
            "return": [],
            "arguments": {
                "bucket": []
            }
        },
        "_key_path": {
            "name": "_key_path",
            "location": 25,
            "return": [],
            "arguments": {
                "bucket": [],
                "key": []
            }
        },
        "init": {
            "name": "init",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "create_bucket": {
            "name": "create_bucket",
            "location": 42,
            "return": [],
            "arguments": {
                "bucket": []
            }
        },
        "_check_bucket": {
            "name": "_check_bucket",
            "location": 50,
            "return": [],
            "arguments": {
                "bucket": []
            }
        },
        "get": {
            "name": "get",
            "location": 59,
            "return": [],
            "arguments": {
                "bucket": [],
                "key": []
            }
        },
        "put": {
            "name": "put",
            "location": 76,
            "return": [],
            "arguments": {
                "bucket": [],
                "key": [],
                "val": []
            }
        },
        "delete": {
            "name": "delete",
            "location": 98,
            "return": [],
            "arguments": {
                "bucket": [],
                "key": []
            }
        },
        "list_keys": {
            "name": "list_keys",
            "location": 112,
            "return": [],
            "arguments": {
                "bucket": []
            }
        },
        "list_buckets": {
            "name": "list_buckets",
            "location": 126,
            "return": [],
            "arguments": {}
        },
        "delete_bucket": {
            "name": "delete_bucket",
            "location": 136,
            "return": [],
            "arguments": {
                "bucket": []
            }
        },
        "delete_all": {
            "name": "delete_all",
            "location": 144,
            "return": [],
            "arguments": {}
        }
    },
    "kappa-master/compiler/rt/storage/s3.py": {
        "check_temp_bucket": {
            "name": "check_temp_bucket",
            "location": 24,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "_make_temp_key": {
            "name": "_make_temp_key",
            "location": 40,
            "return": [],
            "arguments": {
                "bucket": [],
                "key": []
            }
        },
        "create_bucket": {
            "name": "create_bucket",
            "location": 53,
            "return": [],
            "arguments": {
                "bucket": []
            }
        },
        "get": {
            "name": "get",
            "location": 70,
            "return": [],
            "arguments": {
                "bucket": [],
                "key": []
            }
        },
        "put": {
            "name": "put",
            "location": 93,
            "return": [],
            "arguments": {
                "bucket": [],
                "key": [],
                "val": [],
                "is_async": []
            }
        },
        "delete": {
            "name": "delete",
            "location": 111,
            "return": [],
            "arguments": {
                "bucket": [],
                "key": []
            }
        },
        "list_keys": {
            "name": "list_keys",
            "location": 125,
            "return": [],
            "arguments": {
                "bucket": []
            }
        },
        "list_buckets": {
            "name": "list_buckets",
            "location": 143,
            "return": [],
            "arguments": {}
        },
        "check_temp_bucket.ret_fn": {
            "name": "ret_fn",
            "location": 30,
            "return": [],
            "arguments": {}
        }
    },
    "kappa-master/compiler/rt/storage/__init__.py": {},
    "kappa-master/compiler/tests/test_aes.py": {
        "_compact_word": {
            "name": "_compact_word",
            "location": 18,
            "return": [],
            "arguments": {
                "word": []
            }
        },
        "_string_to_bytes": {
            "name": "_string_to_bytes",
            "location": 22,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "_bytes_to_string": {
            "name": "_bytes_to_string",
            "location": 28,
            "return": [],
            "arguments": {
                "binary": []
            }
        },
        "to_bufferable": {
            "name": "to_bufferable",
            "location": 32,
            "return": [],
            "arguments": {
                "binary": []
            }
        },
        "append_PKCS7_padding": {
            "name": "append_PKCS7_padding",
            "location": 216,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "strip_PKCS7_padding": {
            "name": "strip_PKCS7_padding",
            "location": 221,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "_feed_stream": {
            "name": "_feed_stream",
            "location": 387,
            "return": [],
            "arguments": {
                "feeder": [],
                "plaintext": [],
                "block_size": []
            }
        },
        "encrypt_bytes": {
            "name": "encrypt_bytes",
            "location": 400,
            "return": [],
            "arguments": {
                "mode": [],
                "plaintext": [],
                "block_size": [],
                "padding": []
            }
        },
        "do_encrypt": {
            "name": "do_encrypt",
            "location": 405,
            "return": [],
            "arguments": {
                "length": []
            }
        },
        "handler": {
            "name": "handler",
            "location": 417,
            "return": [],
            "arguments": {
                "event": [],
                "context": []
            }
        },
        "AES.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "AES.encrypt": {
            "name": "encrypt",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "plaintext": []
            }
        },
        "AES.decrypt": {
            "name": "decrypt",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "ciphertext": []
            }
        },
        "AESBlockModeOfOperation.__init__": {
            "name": "__init__",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "AESBlockModeOfOperation.decrypt": {
            "name": "decrypt",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "ciphertext": []
            }
        },
        "AESBlockModeOfOperation.encrypt": {
            "name": "encrypt",
            "location": 244,
            "return": [],
            "arguments": {
                "self": [],
                "plaintext": []
            }
        },
        "AESBlockModeOfOperation._can_consume": {
            "name": "_can_consume",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "AESBlockModeOfOperation._final_encrypt": {
            "name": "_final_encrypt",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "padding": []
            }
        },
        "AESBlockModeOfOperation._final_decrypt": {
            "name": "_final_decrypt",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "padding": []
            }
        },
        "AESModeOfOperationCBC.__init__": {
            "name": "__init__",
            "location": 301,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "iv": []
            }
        },
        "AESModeOfOperationCBC.encrypt": {
            "name": "encrypt",
            "location": 312,
            "return": [],
            "arguments": {
                "self": [],
                "plaintext": []
            }
        },
        "AESModeOfOperationCBC.decrypt": {
            "name": "decrypt",
            "location": 322,
            "return": [],
            "arguments": {
                "self": [],
                "ciphertext": []
            }
        },
        "BlockFeeder.__init__": {
            "name": "__init__",
            "location": 339,
            "return": [],
            "arguments": {
                "self": [],
                "mode": [],
                "feed": [],
                "final": [],
                "padding": []
            }
        },
        "BlockFeeder.feed": {
            "name": "feed",
            "location": 346,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Encrypter.__init__": {
            "name": "__init__",
            "location": 379,
            "return": [],
            "arguments": {
                "self": [],
                "mode": [],
                "padding": []
            }
        }
    },
    "kappa-master/compiler/tests/test_assignment.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "handler": {
            "name": "handler",
            "location": 19,
            "return": [],
            "arguments": {
                "event": [],
                "context": []
            }
        }
    },
    "kappa-master/compiler/tests/test_break_continue.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "handler": {
            "name": "handler",
            "location": 19,
            "return": [],
            "arguments": {
                "event": [],
                "context": []
            }
        }
    },
    "kappa-master/compiler/tests/test_classes.py": {
        "make_bool": {
            "name": "make_bool",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test": {
            "name": "test",
            "location": 26,
            "return": [],
            "arguments": {
                "raw_text": []
            }
        },
        "handler": {
            "name": "handler",
            "location": 36,
            "return": [],
            "arguments": {
                "event": [],
                "context": []
            }
        },
        "Text.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Text.compute_number_of_words": {
            "name": "compute_number_of_words",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "_unused": []
            }
        }
    },
    "kappa-master/compiler/tests/test_factorial.py": {
        "factorial": {
            "name": "factorial",
            "location": 4,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "handler": {
            "name": "handler",
            "location": 14,
            "return": [],
            "arguments": {
                "event": [],
                "context": []
            }
        }
    },
    "kappa-master/compiler/tests/test_factorial_comp.py": {
        "my_range": {
            "name": "my_range",
            "location": 7,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "return_true": {
            "name": "return_true",
            "location": 22,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "factorial": {
            "name": "factorial",
            "location": 30,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "handler": {
            "name": "handler",
            "location": 34,
            "return": [],
            "arguments": {
                "event": [],
                "context": []
            }
        }
    },
    "kappa-master/compiler/tests/test_factorial_for.py": {
        "factorial": {
            "name": "factorial",
            "location": 4,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "handler": {
            "name": "handler",
            "location": 16,
            "return": [],
            "arguments": {
                "event": [],
                "context": []
            }
        }
    },
    "kappa-master/compiler/tests/test_factorial_while.py": {
        "factorial": {
            "name": "factorial",
            "location": 4,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "handler": {
            "name": "handler",
            "location": 18,
            "return": [],
            "arguments": {
                "event": [],
                "context": []
            }
        }
    },
    "kappa-master/compiler/tests/test_futures_sum.py": {
        "parallel_sum": {
            "name": "parallel_sum",
            "location": 6,
            "return": [],
            "arguments": {
                "l": [],
                "r": []
            }
        },
        "handler": {
            "name": "handler",
            "location": 18,
            "return": [],
            "arguments": {
                "event": [],
                "context": []
            }
        }
    },
    "kappa-master/compiler/tests/test_map_spawn.py": {
        "make_magic": {
            "name": "make_magic",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "odd": {
            "name": "odd",
            "location": 12,
            "return": [],
            "arguments": {
                "i": [],
                "magic": []
            }
        },
        "my_sum": {
            "name": "my_sum",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "handler": {
            "name": "handler",
            "location": 21,
            "return": [],
            "arguments": {
                "event": [],
                "_context": []
            }
        }
    },
    "kappa-master/compiler/tests/test_queue.py": {
        "child": {
            "name": "child",
            "location": 4,
            "return": [],
            "arguments": {
                "q_recv": [],
                "q_send": []
            }
        },
        "handler": {
            "name": "handler",
            "location": 8,
            "return": [],
            "arguments": {
                "event": [],
                "context": []
            }
        }
    },
    "kappa-master/compiler/tests/test_spawn_fib.py": {
        "fib": {
            "name": "fib",
            "location": 4,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "handler": {
            "name": "handler",
            "location": 13,
            "return": [],
            "arguments": {
                "event": [],
                "context": []
            }
        }
    },
    "kappa-master/compiler/tests/test_spawn_fib1.py": {
        "fib": {
            "name": "fib",
            "location": 4,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "handler": {
            "name": "handler",
            "location": 13,
            "return": [],
            "arguments": {
                "event": [],
                "context": []
            }
        }
    },
    "kappa-master/compiler/tests/test_spawn_fib_blocking.py": {
        "fib": {
            "name": "fib",
            "location": 4,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "handler": {
            "name": "handler",
            "location": 11,
            "return": [],
            "arguments": {
                "event": [],
                "context": []
            }
        }
    },
    "kappa-master/compiler/tests/test_spawn_target.py": {
        "assert_on_coordinator": {
            "name": "assert_on_coordinator",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "assert_on_aws_lambda": {
            "name": "assert_on_aws_lambda",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "on_coordinator_child": {
            "name": "on_coordinator_child",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "on_lambda_child": {
            "name": "on_lambda_child",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "handler": {
            "name": "handler",
            "location": 36,
            "return": [],
            "arguments": {
                "_event": [],
                "_context": []
            }
        }
    },
    "kappa-master/compiler/tests/test_store.py": {
        "handler": {
            "name": "handler",
            "location": 4,
            "return": [],
            "arguments": {
                "event": [],
                "_": []
            }
        }
    },
    "kappa-master/compiler/tests/test_work_queue.py": {
        "work": {
            "name": "work",
            "location": 6,
            "return": [],
            "arguments": {
                "work_queue": []
            }
        },
        "aggregate": {
            "name": "aggregate",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "handler": {
            "name": "handler",
            "location": 22,
            "return": [],
            "arguments": {
                "event": [],
                "context": []
            }
        }
    },
    "kappa-master/compiler/transform/auto_pause.py": {
        "insert_auto_pause": {
            "name": "insert_auto_pause",
            "location": 42,
            "return": [
                "ast.Module"
            ],
            "arguments": {
                "mod": [
                    "ast.Module"
                ],
                "ignored": [
                    "Set[ast.AST]"
                ]
            }
        },
        "InsertAutoPause.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ignored": [
                    "Set[ast.AST]"
                ]
            }
        },
        "InsertAutoPause.visit_Assign": {
            "name": "visit_Assign",
            "location": 27,
            "return": [
                "Union[(ast.AST, List[ast.AST])]"
            ],
            "arguments": {
                "self": [],
                "ass": [
                    "ast.Assign"
                ]
            }
        },
        "InsertAutoPause.generic_visit": {
            "name": "generic_visit",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "kappa-master/compiler/transform/cps.py": {
        "transform_to_cps": {
            "name": "transform_to_cps",
            "location": 351,
            "return": [
                "ast.Module"
            ],
            "arguments": {
                "mod": [
                    "ast.Module"
                ],
                "ignored": [
                    "Set[ast.AST]"
                ]
            }
        },
        "CPSTransformerContext.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subsequent_stmts": [
                    "SubsequentStatementsT"
                ],
                "subsequent_live_vars": [
                    "LivenessTracker"
                ],
                "curr_class": [
                    "Optional[ast.ClassDef]"
                ],
                "curr_func": [
                    "Optional[ast.FunctionDef]"
                ],
                "global_names": [
                    "Set[str]"
                ]
            }
        },
        "CPSTransformerContext.new_context": {
            "name": "new_context",
            "location": 46,
            "return": [
                "'CPSTransformerContext'"
            ],
            "arguments": {
                "mod": [
                    "ast.Module"
                ]
            }
        },
        "CPSTransformerContext.prepend_subsequent_stmts": {
            "name": "prepend_subsequent_stmts",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stmts": [
                    "List[ast.stmt]"
                ],
                "orig_stmt": [
                    "ast.stmt"
                ]
            }
        },
        "CPSTransformerContext.enter_loop": {
            "name": "enter_loop",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "LoopT"
                ]
            }
        },
        "CPSTransformerContext.clone": {
            "name": "clone",
            "location": 73,
            "return": [
                "'CPSTransformerContext'"
            ],
            "arguments": {
                "self": []
            }
        },
        "CPSTransformerContext.enter_class_scope": {
            "name": "enter_class_scope",
            "location": 83,
            "return": [
                "'CPSTransformerContext'"
            ],
            "arguments": {
                "self": [],
                "curr_class": [
                    "ast.ClassDef"
                ]
            }
        },
        "CPSTransformerContext.enter_function_scope": {
            "name": "enter_function_scope",
            "location": 91,
            "return": [
                "'CPSTransformerContext'"
            ],
            "arguments": {
                "self": [],
                "curr_func": [
                    "ast.FunctionDef"
                ]
            }
        },
        "CPSTransformerContext.make_continuation_class": {
            "name": "make_continuation_class",
            "location": 105,
            "return": [
                "Tuple[(ast.ClassDef, List[str])]"
            ],
            "arguments": {
                "self": [],
                "cont_class_name": [
                    "str"
                ],
                "result_id": [
                    "str"
                ]
            }
        },
        "CPSTransformer.__init__": {
            "name": "__init__",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ignored": [
                    "Set[ast.AST]"
                ]
            }
        },
        "CPSTransformer.transform_assign_call": {
            "name": "transform_assign_call",
            "location": 191,
            "return": [
                "VisitReturnT"
            ],
            "arguments": {
                "self": [],
                "assign": [
                    "ast.Assign"
                ],
                "ctx": [
                    "CPSTransformerContext"
                ]
            }
        },
        "CPSTransformer.visit_stmt": {
            "name": "visit_stmt",
            "location": 230,
            "return": [
                "VisitReturnT"
            ],
            "arguments": {
                "self": [],
                "stmt": [
                    "ast.stmt"
                ],
                "ctx": [
                    "CPSTransformerContext"
                ]
            }
        },
        "CPSTransformer.visit_Assert": {
            "name": "visit_Assert",
            "location": 237,
            "return": [
                "VisitReturnT"
            ],
            "arguments": {
                "self": [],
                "asr": [
                    "ast.Assert"
                ],
                "_ctx": [
                    "CPSTransformerContext"
                ]
            }
        },
        "CPSTransformer.visit_Assign": {
            "name": "visit_Assign",
            "location": 240,
            "return": [
                "VisitReturnT"
            ],
            "arguments": {
                "self": [],
                "assign": [
                    "ast.Assign"
                ],
                "ctx": [
                    "CPSTransformerContext"
                ]
            }
        },
        "CPSTransformer.visit_AugAssign": {
            "name": "visit_AugAssign",
            "location": 247,
            "return": [
                "VisitReturnT"
            ],
            "arguments": {
                "self": [],
                "aug_assign": [
                    "ast.AugAssign"
                ],
                "_ctx": [
                    "CPSTransformerContext"
                ]
            }
        },
        "CPSTransformer.visit_Break": {
            "name": "visit_Break",
            "location": 250,
            "return": [
                "VisitReturnT"
            ],
            "arguments": {
                "self": [],
                "br": [
                    "ast.Break"
                ],
                "_ctx": [
                    "CPSTransformerContext"
                ]
            }
        },
        "CPSTransformer.visit_ClassDef": {
            "name": "visit_ClassDef",
            "location": 253,
            "return": [
                "VisitReturnT"
            ],
            "arguments": {
                "self": [],
                "class_def": [
                    "ast.ClassDef"
                ],
                "ctx": [
                    "CPSTransformerContext"
                ]
            }
        },
        "CPSTransformer.visit_Continue": {
            "name": "visit_Continue",
            "location": 262,
            "return": [
                "VisitReturnT"
            ],
            "arguments": {
                "self": [],
                "cont_stmt": [
                    "ast.Continue"
                ],
                "_ctx": [
                    "CPSTransformerContext"
                ]
            }
        },
        "CPSTransformer.visit_Expr": {
            "name": "visit_Expr",
            "location": 265,
            "return": [
                "'NoReturn'"
            ],
            "arguments": {
                "self": [],
                "_expr": [
                    "ast.Expr"
                ],
                "_ctx": [
                    "CPSTransformerContext"
                ]
            }
        },
        "CPSTransformer.visit_If": {
            "name": "visit_If",
            "location": 268,
            "return": [
                "VisitReturnT"
            ],
            "arguments": {
                "self": [],
                "if_stmt": [
                    "ast.If"
                ],
                "ctx": [
                    "CPSTransformerContext"
                ]
            }
        },
        "CPSTransformer.visit_While": {
            "name": "visit_While",
            "location": 276,
            "return": [
                "VisitReturnT"
            ],
            "arguments": {
                "self": [],
                "while_stmt": [
                    "ast.While"
                ],
                "ctx": [
                    "CPSTransformerContext"
                ]
            }
        },
        "CPSTransformer.visit_For": {
            "name": "visit_For",
            "location": 292,
            "return": [
                "VisitReturnT"
            ],
            "arguments": {
                "self": [],
                "for_stmt": [
                    "ast.For"
                ],
                "ctx": [
                    "CPSTransformerContext"
                ]
            }
        },
        "CPSTransformer.visit_FunctionDef": {
            "name": "visit_FunctionDef",
            "location": 308,
            "return": [
                "VisitReturnT"
            ],
            "arguments": {
                "self": [],
                "func_def": [
                    "ast.FunctionDef"
                ],
                "ctx": [
                    "CPSTransformerContext"
                ]
            }
        },
        "CPSTransformer.visit_Pass": {
            "name": "visit_Pass",
            "location": 312,
            "return": [
                "VisitReturnT"
            ],
            "arguments": {
                "self": [],
                "pass_stmt": [
                    "ast.Pass"
                ],
                "_ctx": [
                    "CPSTransformerContext"
                ]
            }
        },
        "CPSTransformer.visit_Return": {
            "name": "visit_Return",
            "location": 315,
            "return": [
                "VisitReturnT"
            ],
            "arguments": {
                "self": [],
                "ret": [
                    "ast.Return"
                ],
                "_ctx": [
                    "CPSTransformerContext"
                ]
            }
        },
        "CPSTransformer.visit_Import": {
            "name": "visit_Import",
            "location": 318,
            "return": [
                "VisitReturnT"
            ],
            "arguments": {
                "self": [],
                "imp": [
                    "ast.Import"
                ],
                "_ctx": [
                    "CPSTransformerContext"
                ]
            }
        },
        "CPSTransformer.visit_ImportFrom": {
            "name": "visit_ImportFrom",
            "location": 321,
            "return": [
                "VisitReturnT"
            ],
            "arguments": {
                "self": [],
                "imp_from": [
                    "ast.ImportFrom"
                ],
                "_ctx": [
                    "CPSTransformerContext"
                ]
            }
        },
        "CPSTransformer.visit_list": {
            "name": "visit_list",
            "location": 324,
            "return": [
                "Tuple[(List[ast.stmt], ExtrasT)]"
            ],
            "arguments": {
                "self": [],
                "stmts": [
                    "List[ast.stmt]"
                ],
                "ctx": [
                    "CPSTransformerContext"
                ],
                "at_module_level": [
                    "bool"
                ]
            }
        },
        "CPSTransformer.visit_Module": {
            "name": "visit_Module",
            "location": 344,
            "return": [
                "ast.Module"
            ],
            "arguments": {
                "self": [],
                "mod": [
                    "ast.Module"
                ]
            }
        }
    },
    "kappa-master/compiler/transform/flatten.py": {
        "_not_expr": {
            "name": "_not_expr",
            "location": 14,
            "return": [
                "ast.expr"
            ],
            "arguments": {
                "expr": [
                    "ast.expr"
                ]
            }
        },
        "flatten_module": {
            "name": "flatten_module",
            "location": 464,
            "return": [
                "ast.Module"
            ],
            "arguments": {
                "mod": [
                    "ast.Module"
                ],
                "ignored": [
                    "Set[ast.AST]"
                ]
            }
        },
        "Flatten.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ignored": [
                    "Set[ast.AST]"
                ]
            }
        },
        "Flatten.next_symbol_id": {
            "name": "next_symbol_id",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Flatten.visit_expr": {
            "name": "visit_expr",
            "location": 47,
            "return": [
                "VisitExprReturnT"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "ast.expr"
                ]
            }
        },
        "Flatten.visit_Attribute": {
            "name": "visit_Attribute",
            "location": 52,
            "return": [
                "VisitExprReturnT"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "ast.Attribute"
                ]
            }
        },
        "Flatten.visit_BinOp": {
            "name": "visit_BinOp",
            "location": 68,
            "return": [
                "VisitExprReturnT"
            ],
            "arguments": {
                "self": [],
                "binop": [
                    "ast.BinOp"
                ]
            }
        },
        "Flatten.visit_UnaryOp": {
            "name": "visit_UnaryOp",
            "location": 78,
            "return": [
                "VisitExprReturnT"
            ],
            "arguments": {
                "self": [],
                "unaryop": [
                    "ast.UnaryOp"
                ]
            }
        },
        "Flatten.visit_BoolOp": {
            "name": "visit_BoolOp",
            "location": 86,
            "return": [
                "VisitExprReturnT"
            ],
            "arguments": {
                "self": [],
                "boolop": [
                    "ast.BoolOp"
                ]
            }
        },
        "Flatten.visit_Bytes": {
            "name": "visit_Bytes",
            "location": 122,
            "return": [
                "VisitExprReturnT"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "ast.Bytes"
                ]
            }
        },
        "Flatten.visit_Compare": {
            "name": "visit_Compare",
            "location": 125,
            "return": [
                "VisitExprReturnT"
            ],
            "arguments": {
                "self": [],
                "cmp": [
                    "ast.Compare"
                ]
            }
        },
        "Flatten.visit_Call": {
            "name": "visit_Call",
            "location": 142,
            "return": [
                "VisitExprReturnT"
            ],
            "arguments": {
                "self": [],
                "call": [
                    "ast.Call"
                ]
            }
        },
        "Flatten.visit_Dict": {
            "name": "visit_Dict",
            "location": 164,
            "return": [
                "VisitExprReturnT"
            ],
            "arguments": {
                "self": [],
                "dic": [
                    "ast.Dict"
                ]
            }
        },
        "Flatten.visit_ListComp": {
            "name": "visit_ListComp",
            "location": 184,
            "return": [
                "VisitExprReturnT"
            ],
            "arguments": {
                "self": [],
                "list_comp": [
                    "ast.ListComp"
                ]
            }
        },
        "Flatten.visit_Name": {
            "name": "visit_Name",
            "location": 224,
            "return": [
                "VisitExprReturnT"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "ast.Name"
                ]
            }
        },
        "Flatten.visit_Str": {
            "name": "visit_Str",
            "location": 227,
            "return": [
                "VisitExprReturnT"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "ast.Str"
                ]
            }
        },
        "Flatten.visit_NameConstant": {
            "name": "visit_NameConstant",
            "location": 230,
            "return": [
                "VisitExprReturnT"
            ],
            "arguments": {
                "self": [],
                "name_const": [
                    "ast.NameConstant"
                ]
            }
        },
        "Flatten.visit_Num": {
            "name": "visit_Num",
            "location": 233,
            "return": [
                "VisitExprReturnT"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "ast.Num"
                ]
            }
        },
        "Flatten._visit_sequence_literal": {
            "name": "_visit_sequence_literal",
            "location": 236,
            "return": [
                "VisitExprReturnT"
            ],
            "arguments": {
                "self": [],
                "lit": [
                    "Union[(ast.Tuple, ast.List)]"
                ]
            }
        },
        "Flatten.visit_Tuple": {
            "name": "visit_Tuple",
            "location": 247,
            "return": [
                "VisitExprReturnT"
            ],
            "arguments": {
                "self": [],
                "tup": [
                    "ast.Tuple"
                ]
            }
        },
        "Flatten.visit_List": {
            "name": "visit_List",
            "location": 250,
            "return": [
                "VisitExprReturnT"
            ],
            "arguments": {
                "self": [],
                "lst": [
                    "ast.List"
                ]
            }
        },
        "Flatten.visit_Starred": {
            "name": "visit_Starred",
            "location": 253,
            "return": [
                "VisitExprReturnT"
            ],
            "arguments": {
                "self": [],
                "starred": [
                    "ast.Starred"
                ]
            }
        },
        "Flatten.visit_Subscript": {
            "name": "visit_Subscript",
            "location": 257,
            "return": [
                "VisitExprReturnT"
            ],
            "arguments": {
                "self": [],
                "subscript": [
                    "ast.Subscript"
                ]
            }
        },
        "Flatten.visit_expr_list": {
            "name": "visit_expr_list",
            "location": 273,
            "return": [
                "Tuple[(List[ast.expr], ActionsT)]"
            ],
            "arguments": {
                "self": [],
                "exprs": [
                    "List[ast.expr]"
                ]
            }
        },
        "Flatten.visit_stmt": {
            "name": "visit_stmt",
            "location": 283,
            "return": [
                "ActionsT"
            ],
            "arguments": {
                "self": [],
                "stmt": [
                    "ast.stmt"
                ]
            }
        },
        "Flatten.visit_Assert": {
            "name": "visit_Assert",
            "location": 289,
            "return": [
                "ActionsT"
            ],
            "arguments": {
                "self": [],
                "asr": [
                    "ast.Assert"
                ]
            }
        },
        "Flatten.visit_Assign": {
            "name": "visit_Assign",
            "location": 299,
            "return": [
                "ActionsT"
            ],
            "arguments": {
                "self": [],
                "ass": [
                    "ast.Assign"
                ]
            }
        },
        "Flatten.visit_AugAssign": {
            "name": "visit_AugAssign",
            "location": 305,
            "return": [
                "ActionsT"
            ],
            "arguments": {
                "self": [],
                "aug_assign": [
                    "ast.AugAssign"
                ]
            }
        },
        "Flatten.visit_Break": {
            "name": "visit_Break",
            "location": 311,
            "return": [
                "ActionsT"
            ],
            "arguments": {
                "self": [],
                "br": [
                    "ast.Break"
                ]
            }
        },
        "Flatten.visit_ClassDef": {
            "name": "visit_ClassDef",
            "location": 314,
            "return": [
                "ActionsT"
            ],
            "arguments": {
                "self": [],
                "class_def": [
                    "ast.ClassDef"
                ]
            }
        },
        "Flatten.visit_Continue": {
            "name": "visit_Continue",
            "location": 333,
            "return": [
                "ActionsT"
            ],
            "arguments": {
                "self": [],
                "cont_stmt": [
                    "ast.Continue"
                ]
            }
        },
        "Flatten.visit_Expr": {
            "name": "visit_Expr",
            "location": 337,
            "return": [
                "ActionsT"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "ast.Expr"
                ]
            }
        },
        "Flatten.visit_If": {
            "name": "visit_If",
            "location": 341,
            "return": [
                "ActionsT"
            ],
            "arguments": {
                "self": [],
                "if_stmt": [
                    "ast.If"
                ]
            }
        },
        "Flatten.visit_Import": {
            "name": "visit_Import",
            "location": 348,
            "return": [
                "ActionsT"
            ],
            "arguments": {
                "self": [],
                "imp": [
                    "ast.Import"
                ]
            }
        },
        "Flatten.visit_ImportFrom": {
            "name": "visit_ImportFrom",
            "location": 351,
            "return": [
                "ActionsT"
            ],
            "arguments": {
                "self": [],
                "imp_from": [
                    "ast.ImportFrom"
                ]
            }
        },
        "Flatten.visit_Return": {
            "name": "visit_Return",
            "location": 354,
            "return": [
                "ActionsT"
            ],
            "arguments": {
                "self": [],
                "ret": [
                    "ast.Return"
                ]
            }
        },
        "Flatten.visit_While": {
            "name": "visit_While",
            "location": 362,
            "return": [
                "ActionsT"
            ],
            "arguments": {
                "self": [],
                "while_stmt": [
                    "ast.While"
                ]
            }
        },
        "Flatten.visit_For": {
            "name": "visit_For",
            "location": 375,
            "return": [
                "ActionsT"
            ],
            "arguments": {
                "self": [],
                "for_stmt": [
                    "ast.For"
                ]
            }
        },
        "Flatten.visit_stmt_list": {
            "name": "visit_stmt_list",
            "location": 393,
            "return": [
                "ActionsT"
            ],
            "arguments": {
                "self": [],
                "stmts": [
                    "List[ast.stmt]"
                ]
            }
        },
        "Flatten.visit_FunctionDef": {
            "name": "visit_FunctionDef",
            "location": 401,
            "return": [
                "ActionsT"
            ],
            "arguments": {
                "self": [],
                "func_def": [
                    "ast.FunctionDef"
                ]
            }
        },
        "Flatten.visit_Pass": {
            "name": "visit_Pass",
            "location": 415,
            "return": [
                "ActionsT"
            ],
            "arguments": {
                "self": [],
                "pass_stmt": [
                    "ast.Pass"
                ]
            }
        },
        "Flatten.visit_slice": {
            "name": "visit_slice",
            "location": 419,
            "return": [
                "VisitSliceReturnT"
            ],
            "arguments": {
                "self": [],
                "sl": [
                    "ast.slice"
                ]
            }
        },
        "Flatten.visit_Index": {
            "name": "visit_Index",
            "location": 423,
            "return": [
                "VisitSliceReturnT"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "ast.Index"
                ]
            }
        },
        "Flatten.visit_Slice": {
            "name": "visit_Slice",
            "location": 427,
            "return": [
                "VisitSliceReturnT"
            ],
            "arguments": {
                "self": [],
                "sl": [
                    "ast.Slice"
                ]
            }
        },
        "Flatten.visit_ExtSlice": {
            "name": "visit_ExtSlice",
            "location": 449,
            "return": [
                "VisitSliceReturnT"
            ],
            "arguments": {
                "self": [],
                "ext_sl": [
                    "ast.ExtSlice"
                ]
            }
        },
        "Flatten.visit_Module": {
            "name": "visit_Module",
            "location": 459,
            "return": [
                "ast.Module"
            ],
            "arguments": {
                "self": [],
                "mod": [
                    "ast.Module"
                ]
            }
        }
    },
    "kappa-master/compiler/transform/gather_globals.py": {
        "gather_global_names": {
            "name": "gather_global_names",
            "location": 18,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "mod": [
                    "ast.Module"
                ]
            }
        }
    },
    "kappa-master/compiler/transform/identify_ignore.py": {
        "identify_ignore": {
            "name": "identify_ignore",
            "location": 41,
            "return": [
                "Set[ast.AST]"
            ],
            "arguments": {
                "mod": [
                    "ast.Module"
                ]
            }
        },
        "IdentifyIgnore.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdentifyIgnore._visit_def": {
            "name": "_visit_def",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "defn": [
                    "Union[(ast.ClassDef, ast.FunctionDef)]"
                ]
            }
        },
        "IdentifyIgnore.visit_FunctionDef": {
            "name": "visit_FunctionDef",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func_def": [
                    "ast.FunctionDef"
                ]
            }
        },
        "IdentifyIgnore.visit_ClassDef": {
            "name": "visit_ClassDef",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_def": [
                    "ast.ClassDef"
                ]
            }
        }
    },
    "kappa-master/compiler/transform/liveness.py": {
        "LivenessTracker.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LivenessTracker.live_vars": {
            "name": "live_vars",
            "location": 26,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LivenessTracker.clone": {
            "name": "clone",
            "location": 30,
            "return": [
                "'LivenessTracker'"
            ],
            "arguments": {
                "self": []
            }
        },
        "LivenessTracker.prepend_stmt": {
            "name": "prepend_stmt",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stmt": [
                    "ast.stmt"
                ]
            }
        },
        "LivenessTracker.visit_simple_stmt": {
            "name": "visit_simple_stmt",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stmt": [
                    "ast.stmt"
                ]
            }
        },
        "LivenessTracker.visit_stmt_list": {
            "name": "visit_stmt_list",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stmts": [
                    "List[ast.stmt]"
                ]
            }
        },
        "LivenessTracker.visit_Expr": {
            "name": "visit_Expr",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "ast.Expr"
                ]
            }
        },
        "LivenessTracker.visit_Assert": {
            "name": "visit_Assert",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "asr": [
                    "ast.Assert"
                ]
            }
        },
        "LivenessTracker.visit_Assign": {
            "name": "visit_Assign",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "assign": [
                    "ast.Assign"
                ]
            }
        },
        "LivenessTracker.visit_AnnAssign": {
            "name": "visit_AnnAssign",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ann_assign": [
                    "ast.AnnAssign"
                ]
            }
        },
        "LivenessTracker.visit_AugAssign": {
            "name": "visit_AugAssign",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aug_assign": [
                    "ast.AugAssign"
                ]
            }
        },
        "LivenessTracker.visit_Break": {
            "name": "visit_Break",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_br": [
                    "ast.Break"
                ]
            }
        },
        "LivenessTracker.visit_ClassDef": {
            "name": "visit_ClassDef",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_class_def": [
                    "ast.ClassDef"
                ]
            }
        },
        "LivenessTracker.visit_Continue": {
            "name": "visit_Continue",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_cont_stmt": [
                    "ast.Continue"
                ]
            }
        },
        "LivenessTracker.visit_FunctionDef": {
            "name": "visit_FunctionDef",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func_def": [
                    "ast.FunctionDef"
                ]
            }
        },
        "LivenessTracker.visit_If": {
            "name": "visit_If",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "if_stmt": [
                    "ast.If"
                ]
            }
        },
        "LivenessTracker._visit_import": {
            "name": "_visit_import",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "imp": [
                    "Union[(ast.Import, ast.ImportFrom)]"
                ]
            }
        },
        "LivenessTracker.visit_Import": {
            "name": "visit_Import",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "imp": [
                    "ast.Import"
                ]
            }
        },
        "LivenessTracker.visit_ImportFrom": {
            "name": "visit_ImportFrom",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "imp_from": [
                    "ast.ImportFrom"
                ]
            }
        },
        "LivenessTracker.visit_Pass": {
            "name": "visit_Pass",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_pass_stmt": [
                    "ast.Pass"
                ]
            }
        },
        "LivenessTracker.visit_While": {
            "name": "visit_While",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "while_stmt": [
                    "ast.While"
                ]
            }
        },
        "LivenessTracker.visit_For": {
            "name": "visit_For",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "for_stmt": [
                    "ast.For"
                ]
            }
        },
        "LivenessTracker.visit_Return": {
            "name": "visit_Return",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ret": [
                    "ast.Return"
                ]
            }
        }
    },
    "kappa-master/compiler/transform/node_visitor.py": {
        "NodeNotSupportedError.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast.AST"
                ],
                "message": [
                    "Optional[str]"
                ]
            }
        },
        "MyNodeVisitor.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyNodeVisitor.visit": {
            "name": "visit",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "ast.AST"
                ]
            }
        },
        "MyNodeVisitor.generic_visit": {
            "name": "generic_visit",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "ast.AST"
                ]
            }
        }
    },
    "kappa-master/compiler/transform/util.py": {
        "find_variables_by_usage": {
            "name": "find_variables_by_usage",
            "location": 24,
            "return": [
                "VarsByUsageType"
            ],
            "arguments": {
                "node": [
                    "ast.AST"
                ]
            }
        },
        "load": {
            "name": "load",
            "location": 31,
            "return": [
                "ast.Name"
            ],
            "arguments": {
                "symbol_id": [
                    "str"
                ]
            }
        },
        "assign": {
            "name": "assign",
            "location": 36,
            "return": [
                "ast.Assign"
            ],
            "arguments": {
                "symbol_id": [
                    "str"
                ],
                "value": [
                    "ast.expr"
                ]
            }
        },
        "clone_node": {
            "name": "clone_node",
            "location": 44,
            "return": [
                "AST_T"
            ],
            "arguments": {
                "node": [
                    "AST_T"
                ]
            }
        },
        "parse_ast_expr": {
            "name": "parse_ast_expr",
            "location": 52,
            "return": [
                "ast.expr"
            ],
            "arguments": {
                "expr_code": [
                    "str"
                ]
            }
        },
        "parse_ast_stmt": {
            "name": "parse_ast_stmt",
            "location": 60,
            "return": [
                "ast.stmt"
            ],
            "arguments": {
                "stmt_code": [
                    "str"
                ]
            }
        },
        "_FindVariablesByUsageVisitor.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_FindVariablesByUsageVisitor.visit_Name": {
            "name": "visit_Name",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "ast.Name"
                ]
            }
        }
    },
    "kappa-master/compiler/transform/__init__.py": {
        "transform": {
            "name": "transform",
            "location": 10,
            "return": [
                "ast.Module"
            ],
            "arguments": {
                "mod": [
                    "ast.Module"
                ]
            }
        }
    },
    "kappa-master/examples/factorial/factorial.py": {
        "factorial": {
            "name": "factorial",
            "location": 4,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "handler": {
            "name": "handler",
            "location": 13,
            "return": [],
            "arguments": {
                "event": [],
                "_": []
            }
        }
    },
    "kappa-master/examples/factorial/run.py": {
        "main": {
            "name": "main",
            "location": 17,
            "return": [],
            "arguments": {}
        }
    },
    "kappa-master/examples/grep/grep.py": {
        "get": {
            "name": "get",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "worker_id": [
                    "int"
                ],
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "count_occurrences": {
            "name": "count_occurrences",
            "location": 39,
            "return": [
                "int"
            ],
            "arguments": {
                "worker_id": [
                    "int"
                ],
                "text": [
                    "str"
                ],
                "word": [
                    "str"
                ]
            }
        },
        "worker": {
            "name": "worker",
            "location": 56,
            "return": [
                "int"
            ],
            "arguments": {
                "e": [],
                "chunks_per_worker": [],
                "bucket": [],
                "word": []
            }
        },
        "aggregate": {
            "name": "aggregate",
            "location": 90,
            "return": [],
            "arguments": {}
        },
        "handler": {
            "name": "handler",
            "location": 96,
            "return": [],
            "arguments": {
                "event": [],
                "_": []
            }
        }
    },
    "kappa-master/examples/micro_message/micro_message.py": {
        "child": {
            "name": "child",
            "location": 16,
            "return": [],
            "arguments": {
                "ping": [],
                "pong": []
            }
        },
        "handler": {
            "name": "handler",
            "location": 25,
            "return": [],
            "arguments": {
                "event": [],
                "_": []
            }
        }
    },
    "kappa-master/examples/micro_spawn/micro_spawn.py": {
        "child": {
            "name": "child",
            "location": 13,
            "return": [],
            "arguments": {
                "pid": [],
                "_data": []
            }
        },
        "handler": {
            "name": "handler",
            "location": 20,
            "return": [],
            "arguments": {
                "event": [],
                "_context": []
            }
        }
    },
    "kappa-master/examples/micro_storage/micro_storage.py": {
        "compute": {
            "name": "compute",
            "location": 27,
            "return": [],
            "arguments": {
                "secs": []
            }
        },
        "s3_put": {
            "name": "s3_put",
            "location": 37,
            "return": [],
            "arguments": {
                "bucket": [],
                "key": [],
                "value": []
            }
        },
        "run_s3": {
            "name": "run_s3",
            "location": 44,
            "return": [],
            "arguments": {
                "rounds": [],
                "bucket": [],
                "write_size": []
            }
        },
        "run_sync": {
            "name": "run_sync",
            "location": 51,
            "return": [],
            "arguments": {
                "rounds": [],
                "bucket": [],
                "write_size": []
            }
        },
        "run_async": {
            "name": "run_async",
            "location": 59,
            "return": [],
            "arguments": {
                "rounds": [],
                "bucket": [],
                "write_size": []
            }
        },
        "handler": {
            "name": "handler",
            "location": 67,
            "return": [],
            "arguments": {
                "event": [],
                "_": []
            }
        }
    },
    "kappa-master/examples/simple/run.py": {
        "main": {
            "name": "main",
            "location": 15,
            "return": [],
            "arguments": {}
        }
    },
    "kappa-master/examples/simple/simple.py": {
        "foo": {
            "name": "foo",
            "location": 8,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "handler": {
            "name": "handler",
            "location": 21,
            "return": [],
            "arguments": {
                "event": [],
                "_": []
            }
        }
    },
    "kappa-master/examples/spawn_throughput/spawn_throughput.py": {
        "child": {
            "name": "child",
            "location": 13,
            "return": [],
            "arguments": {
                "_data": []
            }
        },
        "handler": {
            "name": "handler",
            "location": 23,
            "return": [],
            "arguments": {
                "event": [],
                "_": []
            }
        }
    },
    "kappa-master/examples/streaming/streaming.py": {
        "count_hashtags": {
            "name": "count_hashtags",
            "location": 35,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "process_chunk": {
            "name": "process_chunk",
            "location": 40,
            "return": [],
            "arguments": {
                "chunk_id": []
            }
        },
        "worker": {
            "name": "worker",
            "location": 59,
            "return": [],
            "arguments": {
                "worker_id": [],
                "work_queue": [],
                "agg_queue": []
            }
        },
        "aggregate": {
            "name": "aggregate",
            "location": 80,
            "return": [],
            "arguments": {
                "num_workers": [],
                "agg_queue": []
            }
        },
        "waiter": {
            "name": "waiter",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "handler": {
            "name": "handler",
            "location": 101,
            "return": [],
            "arguments": {
                "event": [],
                "_": []
            }
        }
    },
    "kappa-master/examples/streaming/uploader.py": {
        "upload": {
            "name": "upload",
            "location": 29,
            "return": [],
            "arguments": {
                "key": [],
                "buf": []
            }
        },
        "main": {
            "name": "main",
            "location": 34,
            "return": [],
            "arguments": {}
        }
    },
    "kappa-master/examples/word_count/word_count.py": {
        "get": {
            "name": "get",
            "location": 39,
            "return": [
                "bytes"
            ],
            "arguments": {
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "put": {
            "name": "put",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ],
                "value": [
                    "bytes"
                ]
            }
        },
        "tokenize": {
            "name": "tokenize",
            "location": 49,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "hash_token": {
            "name": "hash_token",
            "location": 54,
            "return": [
                "int"
            ],
            "arguments": {
                "token": [
                    "str"
                ]
            }
        },
        "serialize_counts": {
            "name": "serialize_counts",
            "location": 59,
            "return": [
                "bytes"
            ],
            "arguments": {
                "counter": [
                    "Dict[(str, int)]"
                ]
            }
        },
        "deserialize_counts": {
            "name": "deserialize_counts",
            "location": 67,
            "return": [
                "Counter[str]"
            ],
            "arguments": {
                "s": [
                    "bytes"
                ]
            }
        },
        "update_counters": {
            "name": "update_counters",
            "location": 76,
            "return": [],
            "arguments": {
                "counters": [],
                "chunk_id": []
            }
        },
        "write_intermediate_results": {
            "name": "write_intermediate_results",
            "location": 88,
            "return": [],
            "arguments": {
                "mapper_id": [],
                "counters": []
            }
        },
        "mapper": {
            "name": "mapper",
            "location": 99,
            "return": [
                "float"
            ],
            "arguments": {
                "e": [],
                "num_reducers": [
                    "int"
                ]
            }
        },
        "reducer": {
            "name": "reducer",
            "location": 113,
            "return": [
                "float"
            ],
            "arguments": {
                "reducer_id": [
                    "int"
                ],
                "num_mappers": [
                    "int"
                ]
            }
        },
        "make_mapper_ranges": {
            "name": "make_mapper_ranges",
            "location": 128,
            "return": [],
            "arguments": {
                "num_chunks": [],
                "num_mappers": []
            }
        },
        "my_max": {
            "name": "my_max",
            "location": 147,
            "return": [],
            "arguments": {}
        },
        "handler": {
            "name": "handler",
            "location": 153,
            "return": [],
            "arguments": {
                "event": [
                    "Dict[(str, Any)]"
                ],
                "_": []
            }
        }
    },
    "kappa-master/tools/delete_logs.py": {
        "delete_logs": {
            "name": "delete_logs",
            "location": 10,
            "return": [],
            "arguments": {}
        }
    },
    "kappa-master/tools/lambda_cost.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "kappa-master/tools/timeline.py": {
        "parse_message": {
            "name": "parse_message",
            "location": 75,
            "return": [
                "Optional[Tuple[(LogEntryType, EventType)]]"
            ],
            "arguments": {
                "msg": [
                    "str"
                ]
            }
        },
        "percentile": {
            "name": "percentile",
            "location": 98,
            "return": [],
            "arguments": {
                "N": [],
                "percent": [],
                "key": []
            }
        },
        "print_stats": {
            "name": "print_stats",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "events": [
                    "Iterable[Event]"
                ]
            }
        },
        "print_all_events": {
            "name": "print_all_events",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "events": [
                    "Iterable[Event]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Event.duration_secs": {
            "name": "duration_secs",
            "location": 58,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
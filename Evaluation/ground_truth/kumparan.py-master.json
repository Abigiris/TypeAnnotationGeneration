{
    "kumparan.py-master/setup.py": {},
    "kumparan.py-master/kumparan/service_account.py": {
        "get_credentials": {
            "name": "get_credentials",
            "location": 12,
            "return": [],
            "arguments": {}
        }
    },
    "kumparan.py-master/kumparan/stackdriver.py": {
        "main": {
            "name": "main",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "StackdriverLoggingFormatter.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "service_name": [],
                "service_version": []
            }
        },
        "StackdriverLoggingFormatter.formatTime": {
            "name": "formatTime",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "logging.LogRecord"
                ],
                "datefmt": [
                    "str"
                ]
            }
        },
        "StackdriverLoggingFormatter.format": {
            "name": "format",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "logging.LogRecord"
                ]
            }
        }
    },
    "kumparan.py-master/kumparan/utils.py": {
        "unixtimestamp": {
            "name": "unixtimestamp",
            "location": 8,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "kumparan.py-master/kumparan/__init__.py": {},
    "kumparan.py-master/stubs/apiclient/discovery.py": {
        "fix_method_name": {
            "name": "fix_method_name",
            "location": 14,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "key2param": {
            "name": "key2param",
            "location": 15,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "build": {
            "name": "build",
            "location": 16,
            "return": [],
            "arguments": {
                "serviceName": [],
                "version": [],
                "http": [
                    "Optional[Any]"
                ],
                "discoveryServiceUrl": [
                    "Any"
                ],
                "developerKey": [
                    "Optional[Any]"
                ],
                "model": [
                    "Optional[Any]"
                ],
                "requestBuilder": [
                    "Any"
                ],
                "credentials": [
                    "Optional[Any]"
                ],
                "cache_discovery": [
                    "bool"
                ],
                "cache": [
                    "Optional[Any]"
                ]
            }
        },
        "build_from_document": {
            "name": "build_from_document",
            "location": 17,
            "return": [],
            "arguments": {
                "service": [],
                "base": [
                    "Optional[Any]"
                ],
                "future": [
                    "Optional[Any]"
                ],
                "http": [
                    "Optional[Any]"
                ],
                "developerKey": [
                    "Optional[Any]"
                ],
                "model": [
                    "Optional[Any]"
                ],
                "requestBuilder": [
                    "Any"
                ],
                "credentials": [
                    "Optional[Any]"
                ]
            }
        },
        "ResourceMethodParameters.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method_desc": []
            }
        },
        "ResourceMethodParameters.set_parameters": {
            "name": "set_parameters",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "method_desc": []
            }
        },
        "Resource.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "http": [],
                "baseUrl": [],
                "model": [],
                "requestBuilder": [],
                "developerKey": [],
                "resourceDesc": [],
                "rootDesc": [],
                "schema": []
            }
        }
    },
    "kumparan.py-master/stubs/apiclient/__init__.py": {},
    "kumparan.py-master/stubs/google/__init__.py": {},
    "kumparan.py-master/stubs/google/api_core/__init__.py": {},
    "kumparan.py-master/stubs/google/api_core/exceptions/__init__.py": {
        "exception_class_for_http_status": {
            "name": "exception_class_for_http_status",
            "location": 132,
            "return": [],
            "arguments": {
                "status_code": []
            }
        },
        "from_http_status": {
            "name": "from_http_status",
            "location": 133,
            "return": [],
            "arguments": {
                "status_code": [],
                "message": []
            }
        },
        "from_http_response": {
            "name": "from_http_response",
            "location": 134,
            "return": [],
            "arguments": {
                "response": []
            }
        },
        "exception_class_for_grpc_status": {
            "name": "exception_class_for_grpc_status",
            "location": 135,
            "return": [],
            "arguments": {
                "status_code": []
            }
        },
        "from_grpc_status": {
            "name": "from_grpc_status",
            "location": 136,
            "return": [],
            "arguments": {
                "status_code": [],
                "message": []
            }
        },
        "from_grpc_error": {
            "name": "from_grpc_error",
            "location": 137,
            "return": [],
            "arguments": {
                "rpc_exc": []
            }
        },
        "RetryError.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "cause": []
            }
        },
        "RetryError.cause": {
            "name": "cause",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_GoogleAPICallErrorMeta.__new__": {
            "name": "__new__",
            "location": 16,
            "return": [],
            "arguments": {
                "mcs": [],
                "name": [],
                "bases": [],
                "class_dict": []
            }
        },
        "GoogleAPICallError.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "errors": [
                    "Any"
                ],
                "response": [
                    "Optional[Any]"
                ]
            }
        },
        "GoogleAPICallError.errors": {
            "name": "errors",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GoogleAPICallError.response": {
            "name": "response",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kumparan.py-master/stubs/google/api_core/future/base.py": {
        "Future.cancel": {
            "name": "cancel",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Future.cancelled": {
            "name": "cancelled",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Future.running": {
            "name": "running",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Future.done": {
            "name": "done",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Future.result": {
            "name": "result",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": [
                    "Optional[Any]"
                ]
            }
        },
        "Future.exception": {
            "name": "exception",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": [
                    "Optional[Any]"
                ]
            }
        },
        "Future.add_done_callback": {
            "name": "add_done_callback",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "fn": []
            }
        },
        "Future.set_result": {
            "name": "set_result",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "result": []
            }
        },
        "Future.set_exception": {
            "name": "set_exception",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "exception": []
            }
        }
    },
    "kumparan.py-master/stubs/google/api_core/future/polling.py": {
        "PollingFuture.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PollingFuture.done": {
            "name": "done",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PollingFuture.running": {
            "name": "running",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PollingFuture.result": {
            "name": "result",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": [
                    "Optional[Any]"
                ]
            }
        },
        "PollingFuture.exception": {
            "name": "exception",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": [
                    "Optional[Any]"
                ]
            }
        },
        "PollingFuture.add_done_callback": {
            "name": "add_done_callback",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "fn": []
            }
        },
        "PollingFuture.set_result": {
            "name": "set_result",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "result": []
            }
        },
        "PollingFuture.set_exception": {
            "name": "set_exception",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "exception": []
            }
        }
    },
    "kumparan.py-master/stubs/google/api_core/future/__init__.py": {},
    "kumparan.py-master/stubs/google/auth/credentials.py": {
        "with_scopes_if_required": {
            "name": "with_scopes_if_required",
            "location": 38,
            "return": [],
            "arguments": {
                "credentials": [],
                "scopes": []
            }
        },
        "Credentials.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Credentials.expired": {
            "name": "expired",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Credentials.valid": {
            "name": "valid",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Credentials.refresh": {
            "name": "refresh",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Credentials.apply": {
            "name": "apply",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "headers": [],
                "token": [
                    "Optional[Any]"
                ]
            }
        },
        "Credentials.before_request": {
            "name": "before_request",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "method": [],
                "url": [],
                "headers": []
            }
        },
        "AnonymousCredentials.expired": {
            "name": "expired",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnonymousCredentials.valid": {
            "name": "valid",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnonymousCredentials.refresh": {
            "name": "refresh",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AnonymousCredentials.apply": {
            "name": "apply",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "headers": [],
                "token": [
                    "Optional[Any]"
                ]
            }
        },
        "AnonymousCredentials.before_request": {
            "name": "before_request",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "method": [],
                "url": [],
                "headers": []
            }
        },
        "ReadOnlyScoped.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadOnlyScoped.scopes": {
            "name": "scopes",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReadOnlyScoped.requires_scopes": {
            "name": "requires_scopes",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReadOnlyScoped.has_scopes": {
            "name": "has_scopes",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "scopes": []
            }
        },
        "Scoped.with_scopes": {
            "name": "with_scopes",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "scopes": []
            }
        },
        "Signing.sign_bytes": {
            "name": "sign_bytes",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Signing.signer_email": {
            "name": "signer_email",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Signing.signer": {
            "name": "signer",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kumparan.py-master/stubs/google/auth/_default.py": {
        "default": {
            "name": "default",
            "location": 7,
            "return": [],
            "arguments": {
                "scopes": [
                    "Optional[Any]"
                ],
                "request": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "kumparan.py-master/stubs/google/auth/__init__.py": {},
    "kumparan.py-master/stubs/google/cloud/pubsub.py": {},
    "kumparan.py-master/stubs/google/cloud/_http.py": {
        "Connection.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "Connection.credentials": {
            "name": "credentials",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.http": {
            "name": "http",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONConnection.build_api_url": {
            "name": "build_api_url",
            "location": 25,
            "return": [],
            "arguments": {
                "cls": [],
                "path": [],
                "query_params": [
                    "Optional[Any]"
                ],
                "api_base_url": [
                    "Optional[Any]"
                ],
                "api_version": [
                    "Optional[Any]"
                ]
            }
        },
        "JSONConnection.api_request": {
            "name": "api_request",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "method": [],
                "path": [],
                "query_params": [
                    "Optional[Any]"
                ],
                "data": [
                    "Optional[Any]"
                ],
                "content_type": [
                    "Optional[Any]"
                ],
                "headers": [
                    "Optional[Any]"
                ],
                "api_base_url": [
                    "Optional[Any]"
                ],
                "api_version": [
                    "Optional[Any]"
                ],
                "expect_json": [
                    "bool"
                ],
                "_target_object": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "kumparan.py-master/stubs/google/cloud/__init__.py": {},
    "kumparan.py-master/stubs/google/cloud/bigquery/client.py": {
        "Project.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project_id": [],
                "numeric_id": [],
                "friendly_name": []
            }
        },
        "Project.from_api_repr": {
            "name": "from_api_repr",
            "location": 14,
            "return": [],
            "arguments": {
                "cls": [],
                "resource": []
            }
        },
        "Client.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "Optional[Any]"
                ],
                "credentials": [
                    "Optional[Any]"
                ],
                "_http": [
                    "Optional[Any]"
                ]
            }
        },
        "Client.list_projects": {
            "name": "list_projects",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "max_results": [
                    "Optional[Any]"
                ],
                "page_token": [
                    "Optional[Any]"
                ],
                "retry": [
                    "Any"
                ]
            }
        },
        "Client.list_datasets": {
            "name": "list_datasets",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "include_all": [
                    "bool"
                ],
                "filter": [
                    "Optional[Any]"
                ],
                "max_results": [
                    "Optional[Any]"
                ],
                "page_token": [
                    "Optional[Any]"
                ],
                "retry": [
                    "Any"
                ]
            }
        },
        "Client.dataset": {
            "name": "dataset",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "dataset_id": [],
                "project": [
                    "Optional[Any]"
                ]
            }
        },
        "Client.create_dataset": {
            "name": "create_dataset",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": []
            }
        },
        "Client.create_table": {
            "name": "create_table",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "table": []
            }
        },
        "Client.get_dataset": {
            "name": "get_dataset",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "dataset_ref": [],
                "retry": [
                    "Any"
                ]
            }
        },
        "Client.get_table": {
            "name": "get_table",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "table_ref": [],
                "retry": [
                    "Any"
                ]
            }
        },
        "Client.update_dataset": {
            "name": "update_dataset",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": [],
                "fields": [],
                "retry": [
                    "Any"
                ]
            }
        },
        "Client.update_table": {
            "name": "update_table",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "properties": [],
                "retry": [
                    "Any"
                ]
            }
        },
        "Client.list_dataset_tables": {
            "name": "list_dataset_tables",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": [],
                "max_results": [
                    "Optional[Any]"
                ],
                "page_token": [
                    "Optional[Any]"
                ],
                "retry": [
                    "Any"
                ]
            }
        },
        "Client.delete_dataset": {
            "name": "delete_dataset",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": [],
                "retry": [
                    "Any"
                ]
            }
        },
        "Client.delete_table": {
            "name": "delete_table",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "retry": [
                    "Any"
                ]
            }
        },
        "Client.job_from_resource": {
            "name": "job_from_resource",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "resource": []
            }
        },
        "Client.get_job": {
            "name": "get_job",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "job_id": [],
                "project": [
                    "Optional[Any]"
                ],
                "retry": [
                    "Any"
                ]
            }
        },
        "Client.cancel_job": {
            "name": "cancel_job",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "job_id": [],
                "project": [
                    "Optional[Any]"
                ],
                "retry": [
                    "Any"
                ]
            }
        },
        "Client.list_jobs": {
            "name": "list_jobs",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "max_results": [
                    "Optional[Any]"
                ],
                "page_token": [
                    "Optional[Any]"
                ],
                "all_users": [
                    "Optional[Any]"
                ],
                "state_filter": [
                    "Optional[Any]"
                ],
                "retry": [
                    "Any"
                ]
            }
        },
        "Client.load_table_from_uri": {
            "name": "load_table_from_uri",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "source_uris": [],
                "destination": [],
                "job_id": [
                    "Optional[Any]"
                ],
                "job_id_prefix": [
                    "Optional[Any]"
                ],
                "job_config": [
                    "Optional[Any]"
                ],
                "retry": [
                    "Any"
                ]
            }
        },
        "Client.load_table_from_file": {
            "name": "load_table_from_file",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "file_obj": [],
                "destination": [],
                "rewind": [
                    "bool"
                ],
                "size": [
                    "Optional[Any]"
                ],
                "num_retries": [
                    "Any"
                ],
                "job_id": [
                    "Optional[Any]"
                ],
                "job_id_prefix": [
                    "Optional[Any]"
                ],
                "job_config": [
                    "Optional[Any]"
                ]
            }
        },
        "Client.copy_table": {
            "name": "copy_table",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "sources": [],
                "destination": [],
                "job_id": [
                    "Optional[Any]"
                ],
                "job_id_prefix": [
                    "Optional[Any]"
                ],
                "job_config": [
                    "Optional[Any]"
                ],
                "retry": [
                    "Any"
                ]
            }
        },
        "Client.extract_table": {
            "name": "extract_table",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "destination_uris": [],
                "job_config": [
                    "Optional[Any]"
                ],
                "job_id": [
                    "Optional[Any]"
                ],
                "job_id_prefix": [
                    "Optional[Any]"
                ],
                "retry": [
                    "Any"
                ]
            }
        },
        "Client.query": {
            "name": "query",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "job_config": [
                    "Optional[Any]"
                ],
                "job_id": [
                    "Optional[Any]"
                ],
                "job_id_prefix": [
                    "Optional[Any]"
                ],
                "retry": [
                    "Any"
                ]
            }
        },
        "Client.create_rows": {
            "name": "create_rows",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "rows": [],
                "selected_fields": [
                    "Optional[Any]"
                ]
            }
        },
        "Client.create_rows_json": {
            "name": "create_rows_json",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "json_rows": [],
                "row_ids": [
                    "Optional[Any]"
                ],
                "skip_invalid_rows": [
                    "Optional[Any]"
                ],
                "ignore_unknown_values": [
                    "Optional[Any]"
                ],
                "template_suffix": [
                    "Optional[Any]"
                ],
                "retry": [
                    "Any"
                ]
            }
        },
        "Client.query_rows": {
            "name": "query_rows",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "job_config": [
                    "Optional[Any]"
                ],
                "job_id": [
                    "Optional[Any]"
                ],
                "job_id_prefix": [
                    "Optional[Any]"
                ],
                "timeout": [
                    "Optional[Any]"
                ],
                "retry": [
                    "Any"
                ]
            }
        },
        "Client.list_rows": {
            "name": "list_rows",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "selected_fields": [
                    "Optional[Any]"
                ],
                "max_results": [
                    "Optional[Any]"
                ],
                "page_token": [
                    "Optional[Any]"
                ],
                "start_index": [
                    "Optional[Any]"
                ],
                "retry": [
                    "Any"
                ]
            }
        },
        "Client.list_partitions": {
            "name": "list_partitions",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "retry": [
                    "Any"
                ]
            }
        }
    },
    "kumparan.py-master/stubs/google/cloud/bigquery/dataset.py": {
        "AccessEntry.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "role": [],
                "entity_type": [],
                "entity_id": []
            }
        },
        "AccessEntry.__eq__": {
            "name": "__eq__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AccessEntry.__ne__": {
            "name": "__ne__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DatasetReference.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [],
                "dataset_id": []
            }
        },
        "DatasetReference.project": {
            "name": "project",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatasetReference.dataset_id": {
            "name": "dataset_id",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatasetReference.path": {
            "name": "path",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatasetReference.table": {
            "name": "table",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "table_id": []
            }
        },
        "DatasetReference.from_api_repr": {
            "name": "from_api_repr",
            "location": 26,
            "return": [],
            "arguments": {
                "cls": [],
                "resource": []
            }
        },
        "DatasetReference.to_api_repr": {
            "name": "to_api_repr",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatasetReference.__eq__": {
            "name": "__eq__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DatasetReference.__ne__": {
            "name": "__ne__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DatasetReference.__hash__": {
            "name": "__hash__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_ref": []
            }
        },
        "Dataset.project": {
            "name": "project",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.path": {
            "name": "path",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.access_entries": {
            "name": "access_entries",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Dataset.created": {
            "name": "created",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.dataset_id": {
            "name": "dataset_id",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.full_dataset_id": {
            "name": "full_dataset_id",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.etag": {
            "name": "etag",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.modified": {
            "name": "modified",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.self_link": {
            "name": "self_link",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.default_table_expiration_ms": {
            "name": "default_table_expiration_ms",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Dataset.description": {
            "name": "description",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Dataset.friendly_name": {
            "name": "friendly_name",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Dataset.location": {
            "name": "location",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Dataset.labels": {
            "name": "labels",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Dataset.from_api_repr": {
            "name": "from_api_repr",
            "location": 75,
            "return": [],
            "arguments": {
                "cls": [],
                "resource": []
            }
        },
        "Dataset.table": {
            "name": "table",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "table_id": []
            }
        }
    },
    "kumparan.py-master/stubs/google/cloud/bigquery/external_config.py": {
        "BigtableColumn.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BigtableColumn.to_api_repr": {
            "name": "to_api_repr",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BigtableColumn.from_api_repr": {
            "name": "from_api_repr",
            "location": 17,
            "return": [],
            "arguments": {
                "cls": [],
                "resource": []
            }
        },
        "BigtableColumnFamily.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BigtableColumnFamily.to_api_repr": {
            "name": "to_api_repr",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BigtableColumnFamily.from_api_repr": {
            "name": "from_api_repr",
            "location": 28,
            "return": [],
            "arguments": {
                "cls": [],
                "resource": []
            }
        },
        "BigtableOptions.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BigtableOptions.to_api_repr": {
            "name": "to_api_repr",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BigtableOptions.from_api_repr": {
            "name": "from_api_repr",
            "location": 37,
            "return": [],
            "arguments": {
                "cls": [],
                "resource": []
            }
        },
        "CSVOptions.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSVOptions.to_api_repr": {
            "name": "to_api_repr",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CSVOptions.from_api_repr": {
            "name": "from_api_repr",
            "location": 49,
            "return": [],
            "arguments": {
                "cls": [],
                "resource": []
            }
        },
        "GoogleSheetsOptions.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleSheetsOptions.to_api_repr": {
            "name": "to_api_repr",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GoogleSheetsOptions.from_api_repr": {
            "name": "from_api_repr",
            "location": 56,
            "return": [],
            "arguments": {
                "cls": [],
                "resource": []
            }
        },
        "ExternalConfig.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_format": []
            }
        },
        "ExternalConfig.source_format": {
            "name": "source_format",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExternalConfig.options": {
            "name": "options",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExternalConfig.to_api_repr": {
            "name": "to_api_repr",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExternalConfig.from_api_repr": {
            "name": "from_api_repr",
            "location": 72,
            "return": [],
            "arguments": {
                "cls": [],
                "resource": []
            }
        }
    },
    "kumparan.py-master/stubs/google/cloud/bigquery/job.py": {
        "AutoDetectSchema.__set__": {
            "name": "__set__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        },
        "_AsyncJob.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [],
                "client": []
            }
        },
        "_AsyncJob.project": {
            "name": "project",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AsyncJob.job_type": {
            "name": "job_type",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AsyncJob.path": {
            "name": "path",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AsyncJob.etag": {
            "name": "etag",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AsyncJob.self_link": {
            "name": "self_link",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AsyncJob.user_email": {
            "name": "user_email",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AsyncJob.created": {
            "name": "created",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AsyncJob.started": {
            "name": "started",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AsyncJob.ended": {
            "name": "ended",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AsyncJob.error_result": {
            "name": "error_result",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AsyncJob.errors": {
            "name": "errors",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AsyncJob.state": {
            "name": "state",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AsyncJob.exists": {
            "name": "exists",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "client": [
                    "Optional[Any]"
                ],
                "retry": [
                    "Any"
                ]
            }
        },
        "_AsyncJob.reload": {
            "name": "reload",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "client": [
                    "Optional[Any]"
                ],
                "retry": [
                    "Any"
                ]
            }
        },
        "_AsyncJob.cancel": {
            "name": "cancel",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "client": [
                    "Optional[Any]"
                ]
            }
        },
        "_AsyncJob.done": {
            "name": "done",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "retry": [
                    "Any"
                ]
            }
        },
        "_AsyncJob.result": {
            "name": "result",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": [
                    "Optional[Any]"
                ]
            }
        },
        "_AsyncJob.cancelled": {
            "name": "cancelled",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadJobConfig.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadJobConfig.schema": {
            "name": "schema",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "LoadJobConfig.to_api_repr": {
            "name": "to_api_repr",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadJobConfig.from_api_repr": {
            "name": "from_api_repr",
            "location": 99,
            "return": [],
            "arguments": {
                "cls": [],
                "resource": []
            }
        },
        "LoadJob.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [],
                "source_uris": [],
                "destination": [],
                "client": [],
                "job_config": [
                    "Optional[Any]"
                ]
            }
        },
        "LoadJob.allow_jagged_rows": {
            "name": "allow_jagged_rows",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadJob.allow_quoted_newlines": {
            "name": "allow_quoted_newlines",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadJob.autodetect": {
            "name": "autodetect",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadJob.create_disposition": {
            "name": "create_disposition",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadJob.encoding": {
            "name": "encoding",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadJob.field_delimiter": {
            "name": "field_delimiter",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadJob.ignore_unknown_values": {
            "name": "ignore_unknown_values",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadJob.max_bad_records": {
            "name": "max_bad_records",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadJob.null_marker": {
            "name": "null_marker",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadJob.quote_character": {
            "name": "quote_character",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadJob.skip_leading_rows": {
            "name": "skip_leading_rows",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadJob.source_format": {
            "name": "source_format",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadJob.write_disposition": {
            "name": "write_disposition",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadJob.schema": {
            "name": "schema",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadJob.input_file_bytes": {
            "name": "input_file_bytes",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadJob.input_files": {
            "name": "input_files",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadJob.output_bytes": {
            "name": "output_bytes",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadJob.output_rows": {
            "name": "output_rows",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadJob.from_api_repr": {
            "name": "from_api_repr",
            "location": 142,
            "return": [],
            "arguments": {
                "cls": [],
                "resource": [],
                "client": []
            }
        },
        "CopyJobConfig.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CopyJobConfig.to_api_repr": {
            "name": "to_api_repr",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CopyJobConfig.from_api_repr": {
            "name": "from_api_repr",
            "location": 150,
            "return": [],
            "arguments": {
                "cls": [],
                "resource": []
            }
        },
        "CopyJob.__init__": {
            "name": "__init__",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [],
                "sources": [],
                "destination": [],
                "client": [],
                "job_config": [
                    "Optional[Any]"
                ]
            }
        },
        "CopyJob.create_disposition": {
            "name": "create_disposition",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CopyJob.write_disposition": {
            "name": "write_disposition",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CopyJob.from_api_repr": {
            "name": "from_api_repr",
            "location": 161,
            "return": [],
            "arguments": {
                "cls": [],
                "resource": [],
                "client": []
            }
        },
        "ExtractJobConfig.__init__": {
            "name": "__init__",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtractJobConfig.to_api_repr": {
            "name": "to_api_repr",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExtractJobConfig.from_api_repr": {
            "name": "from_api_repr",
            "location": 171,
            "return": [],
            "arguments": {
                "cls": [],
                "resource": []
            }
        },
        "ExtractJob.__init__": {
            "name": "__init__",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [],
                "source": [],
                "destination_uris": [],
                "client": [],
                "job_config": [
                    "Optional[Any]"
                ]
            }
        },
        "ExtractJob.compression": {
            "name": "compression",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExtractJob.destination_format": {
            "name": "destination_format",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExtractJob.field_delimiter": {
            "name": "field_delimiter",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExtractJob.print_header": {
            "name": "print_header",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExtractJob.destination_uri_file_counts": {
            "name": "destination_uri_file_counts",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExtractJob.from_api_repr": {
            "name": "from_api_repr",
            "location": 188,
            "return": [],
            "arguments": {
                "cls": [],
                "resource": [],
                "client": []
            }
        },
        "QueryJobConfig.__init__": {
            "name": "__init__",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryJobConfig.to_api_repr": {
            "name": "to_api_repr",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryJobConfig.from_api_repr": {
            "name": "from_api_repr",
            "location": 194,
            "return": [],
            "arguments": {
                "cls": [],
                "resource": []
            }
        },
        "QueryJob.__init__": {
            "name": "__init__",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [],
                "query": [],
                "client": [],
                "job_config": [
                    "Optional[Any]"
                ]
            }
        },
        "QueryJob.allow_large_results": {
            "name": "allow_large_results",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryJob.create_disposition": {
            "name": "create_disposition",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryJob.default_dataset": {
            "name": "default_dataset",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryJob.destination": {
            "name": "destination",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryJob.dry_run": {
            "name": "dry_run",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryJob.flatten_results": {
            "name": "flatten_results",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryJob.priority": {
            "name": "priority",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryJob.query_parameters": {
            "name": "query_parameters",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryJob.udf_resources": {
            "name": "udf_resources",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryJob.use_legacy_sql": {
            "name": "use_legacy_sql",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryJob.use_query_cache": {
            "name": "use_query_cache",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryJob.write_disposition": {
            "name": "write_disposition",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryJob.maximum_billing_tier": {
            "name": "maximum_billing_tier",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryJob.maximum_bytes_billed": {
            "name": "maximum_bytes_billed",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryJob.table_definitions": {
            "name": "table_definitions",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryJob.from_api_repr": {
            "name": "from_api_repr",
            "location": 245,
            "return": [],
            "arguments": {
                "cls": [],
                "resource": [],
                "client": []
            }
        },
        "QueryJob.query_plan": {
            "name": "query_plan",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryJob.total_bytes_processed": {
            "name": "total_bytes_processed",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryJob.total_bytes_billed": {
            "name": "total_bytes_billed",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryJob.billing_tier": {
            "name": "billing_tier",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryJob.cache_hit": {
            "name": "cache_hit",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryJob.num_dml_affected_rows": {
            "name": "num_dml_affected_rows",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryJob.statement_type": {
            "name": "statement_type",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryJob.referenced_tables": {
            "name": "referenced_tables",
            "location": 261,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryJob.undeclared_query_paramters": {
            "name": "undeclared_query_paramters",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryJob.query_results": {
            "name": "query_results",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "retry": [
                    "Any"
                ]
            }
        },
        "QueryJob.done": {
            "name": "done",
            "location": 265,
            "return": [],
            "arguments": {
                "self": [],
                "retry": [
                    "Any"
                ]
            }
        },
        "QueryJob.result": {
            "name": "result",
            "location": 266,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": [
                    "Optional[Any]"
                ],
                "retry": [
                    "Any"
                ]
            }
        },
        "QueryPlanEntryStep.__init__": {
            "name": "__init__",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kind": [],
                "substeps": []
            }
        },
        "QueryPlanEntryStep.from_api_repr": {
            "name": "from_api_repr",
            "location": 273,
            "return": [],
            "arguments": {
                "cls": [],
                "resource": []
            }
        },
        "QueryPlanEntryStep.__eq__": {
            "name": "__eq__",
            "location": 274,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "QueryPlanEntry.__init__": {
            "name": "__init__",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "entry_id": [],
                "wait_ratio_avg": [],
                "wait_ratio_max": [],
                "read_ratio_avg": [],
                "read_ratio_max": [],
                "compute_ratio_avg": [],
                "compute_ratio_max": [],
                "write_ratio_avg": [],
                "write_ratio_max": [],
                "records_read": [],
                "records_written": [],
                "status": [],
                "steps": []
            }
        },
        "QueryPlanEntry.from_api_repr": {
            "name": "from_api_repr",
            "location": 293,
            "return": [],
            "arguments": {
                "cls": [],
                "resource": []
            }
        }
    },
    "kumparan.py-master/stubs/google/cloud/bigquery/query.py": {
        "UDFResource.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "udf_type": [],
                "value": []
            }
        },
        "UDFResource.__eq__": {
            "name": "__eq__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "UDFResource.__ne__": {
            "name": "__ne__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AbstractQueryParameter.from_api_repr": {
            "name": "from_api_repr",
            "location": 16,
            "return": [],
            "arguments": {
                "cls": [],
                "resource": []
            }
        },
        "_AbstractQueryParameter.to_api_repr": {
            "name": "to_api_repr",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScalarQueryParameter.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "type_": [],
                "value": []
            }
        },
        "ScalarQueryParameter.positional": {
            "name": "positional",
            "location": 25,
            "return": [],
            "arguments": {
                "cls": [],
                "type_": [],
                "value": []
            }
        },
        "ScalarQueryParameter.from_api_repr": {
            "name": "from_api_repr",
            "location": 27,
            "return": [],
            "arguments": {
                "cls": [],
                "resource": []
            }
        },
        "ScalarQueryParameter.to_api_repr": {
            "name": "to_api_repr",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScalarQueryParameter.__eq__": {
            "name": "__eq__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ScalarQueryParameter.__ne__": {
            "name": "__ne__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ArrayQueryParameter.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "array_type": [],
                "values": []
            }
        },
        "ArrayQueryParameter.positional": {
            "name": "positional",
            "location": 38,
            "return": [],
            "arguments": {
                "cls": [],
                "array_type": [],
                "values": []
            }
        },
        "ArrayQueryParameter.from_api_repr": {
            "name": "from_api_repr",
            "location": 40,
            "return": [],
            "arguments": {
                "cls": [],
                "resource": []
            }
        },
        "ArrayQueryParameter.to_api_repr": {
            "name": "to_api_repr",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArrayQueryParameter.__eq__": {
            "name": "__eq__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ArrayQueryParameter.__ne__": {
            "name": "__ne__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "StructQueryParameter.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "StructQueryParameter.positional": {
            "name": "positional",
            "location": 49,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "StructQueryParameter.from_api_repr": {
            "name": "from_api_repr",
            "location": 51,
            "return": [],
            "arguments": {
                "cls": [],
                "resource": []
            }
        },
        "StructQueryParameter.to_api_repr": {
            "name": "to_api_repr",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StructQueryParameter.__eq__": {
            "name": "__eq__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "StructQueryParameter.__ne__": {
            "name": "__ne__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "QueryResults.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "properties": []
            }
        },
        "QueryResults.from_api_repr": {
            "name": "from_api_repr",
            "location": 59,
            "return": [],
            "arguments": {
                "cls": [],
                "api_response": []
            }
        },
        "QueryResults.project": {
            "name": "project",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryResults.cache_hit": {
            "name": "cache_hit",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryResults.complete": {
            "name": "complete",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryResults.errors": {
            "name": "errors",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryResults.job_id": {
            "name": "job_id",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryResults.page_token": {
            "name": "page_token",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryResults.total_rows": {
            "name": "total_rows",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryResults.total_bytes_processed": {
            "name": "total_bytes_processed",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryResults.num_dml_affected_rows": {
            "name": "num_dml_affected_rows",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryResults.rows": {
            "name": "rows",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryResults.schema": {
            "name": "schema",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kumparan.py-master/stubs/google/cloud/bigquery/schema.py": {
        "SchemaField.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "field_type": [],
                "mode": [
                    "str"
                ],
                "description": [
                    "Optional[Any]"
                ],
                "fields": [
                    "Any"
                ]
            }
        },
        "SchemaField.from_api_repr": {
            "name": "from_api_repr",
            "location": 10,
            "return": [],
            "arguments": {
                "cls": [],
                "api_repr": []
            }
        },
        "SchemaField.name": {
            "name": "name",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SchemaField.field_type": {
            "name": "field_type",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SchemaField.mode": {
            "name": "mode",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SchemaField.is_nullable": {
            "name": "is_nullable",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SchemaField.description": {
            "name": "description",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SchemaField.fields": {
            "name": "fields",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SchemaField.to_api_repr": {
            "name": "to_api_repr",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SchemaField.__eq__": {
            "name": "__eq__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SchemaField.__ne__": {
            "name": "__ne__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SchemaField.__hash__": {
            "name": "__hash__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kumparan.py-master/stubs/google/cloud/bigquery/table.py": {
        "TableReference.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_ref": [],
                "table_id": []
            }
        },
        "TableReference.project": {
            "name": "project",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TableReference.dataset_id": {
            "name": "dataset_id",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TableReference.table_id": {
            "name": "table_id",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TableReference.path": {
            "name": "path",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TableReference.from_api_repr": {
            "name": "from_api_repr",
            "location": 18,
            "return": [],
            "arguments": {
                "cls": [],
                "resource": []
            }
        },
        "TableReference.to_api_repr": {
            "name": "to_api_repr",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TableReference.__eq__": {
            "name": "__eq__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TableReference.__ne__": {
            "name": "__ne__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TableReference.__hash__": {
            "name": "__hash__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table_ref": [],
                "schema": [
                    "Any"
                ]
            }
        },
        "Table.project": {
            "name": "project",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.dataset_id": {
            "name": "dataset_id",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.table_id": {
            "name": "table_id",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.path": {
            "name": "path",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.schema": {
            "name": "schema",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.labels": {
            "name": "labels",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.created": {
            "name": "created",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.etag": {
            "name": "etag",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.modified": {
            "name": "modified",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.num_bytes": {
            "name": "num_bytes",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.num_rows": {
            "name": "num_rows",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.self_link": {
            "name": "self_link",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.full_table_id": {
            "name": "full_table_id",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.table_type": {
            "name": "table_type",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.partitioning_type": {
            "name": "partitioning_type",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.partition_expiration": {
            "name": "partition_expiration",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.description": {
            "name": "description",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.expires": {
            "name": "expires",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.friendly_name": {
            "name": "friendly_name",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.location": {
            "name": "location",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Table.view_query": {
            "name": "view_query",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.streaming_buffer": {
            "name": "streaming_buffer",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.external_data_configuration": {
            "name": "external_data_configuration",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.from_api_repr": {
            "name": "from_api_repr",
            "location": 77,
            "return": [],
            "arguments": {
                "cls": [],
                "resource": []
            }
        },
        "StreamingBuffer.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": []
            }
        }
    },
    "kumparan.py-master/stubs/google/cloud/bigquery/_helpers.py": {
        "Row.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [],
                "field_to_index": []
            }
        },
        "Row.values": {
            "name": "values",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Row.__getattr__": {
            "name": "__getattr__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Row.__len__": {
            "name": "__len__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Row.__getitem__": {
            "name": "__getitem__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Row.__eq__": {
            "name": "__eq__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Row.__ne__": {
            "name": "__ne__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ApiResourceProperty.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "resource_name": []
            }
        },
        "_ApiResourceProperty.__get__": {
            "name": "__get__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        },
        "_ApiResourceProperty.__set__": {
            "name": "__set__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        },
        "_ApiResourceProperty.__delete__": {
            "name": "__delete__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "_TypedApiResourceProperty.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "resource_name": [],
                "property_type": []
            }
        },
        "_ListApiResourceProperty.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "resource_name": [],
                "property_type": []
            }
        },
        "_ListApiResourceProperty.__get__": {
            "name": "__get__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        }
    },
    "kumparan.py-master/stubs/google/cloud/bigquery/__init__.py": {},
    "kumparan.py-master/stubs/google/cloud/bigtable/client.py": {
        "Client.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "Optional[Any]"
                ],
                "credentials": [
                    "Optional[Any]"
                ],
                "read_only": [
                    "bool"
                ],
                "admin": [
                    "bool"
                ],
                "user_agent": [
                    "Any"
                ]
            }
        },
        "Client.copy": {
            "name": "copy",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.credentials": {
            "name": "credentials",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.project_name": {
            "name": "project_name",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.instance": {
            "name": "instance",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "instance_id": [],
                "location": [
                    "Any"
                ],
                "display_name": [
                    "Optional[Any]"
                ],
                "serve_nodes": [
                    "Any"
                ]
            }
        },
        "Client.list_instances": {
            "name": "list_instances",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kumparan.py-master/stubs/google/cloud/bigtable/row_filters.py": {
        "_BoolFilter.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flag": []
            }
        },
        "_BoolFilter.__eq__": {
            "name": "__eq__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_BoolFilter.__ne__": {
            "name": "__ne__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SinkFilter.to_pb": {
            "name": "to_pb",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PassAllFilter.to_pb": {
            "name": "to_pb",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlockAllFilter.to_pb": {
            "name": "to_pb",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_RegexFilter.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "regex": []
            }
        },
        "_RegexFilter.__eq__": {
            "name": "__eq__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_RegexFilter.__ne__": {
            "name": "__ne__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RowKeyRegexFilter.to_pb": {
            "name": "to_pb",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RowSampleFilter.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample": []
            }
        },
        "RowSampleFilter.__eq__": {
            "name": "__eq__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RowSampleFilter.__ne__": {
            "name": "__ne__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RowSampleFilter.to_pb": {
            "name": "to_pb",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FamilyNameRegexFilter.to_pb": {
            "name": "to_pb",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnQualifierRegexFilter.to_pb": {
            "name": "to_pb",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimestampRange.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Optional[Any]"
                ],
                "end": [
                    "Optional[Any]"
                ]
            }
        },
        "TimestampRange.__eq__": {
            "name": "__eq__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TimestampRange.__ne__": {
            "name": "__ne__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TimestampRange.to_pb": {
            "name": "to_pb",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimestampRangeFilter.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "range_": []
            }
        },
        "TimestampRangeFilter.__eq__": {
            "name": "__eq__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TimestampRangeFilter.__ne__": {
            "name": "__ne__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TimestampRangeFilter.to_pb": {
            "name": "to_pb",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnRangeFilter.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "column_family_id": [],
                "start_column": [
                    "Optional[Any]"
                ],
                "end_column": [
                    "Optional[Any]"
                ],
                "inclusive_start": [
                    "Optional[Any]"
                ],
                "inclusive_end": [
                    "Optional[Any]"
                ]
            }
        },
        "ColumnRangeFilter.__eq__": {
            "name": "__eq__",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnRangeFilter.__ne__": {
            "name": "__ne__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnRangeFilter.to_pb": {
            "name": "to_pb",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValueRegexFilter.to_pb": {
            "name": "to_pb",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValueRangeFilter.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start_value": [
                    "Optional[Any]"
                ],
                "end_value": [
                    "Optional[Any]"
                ],
                "inclusive_start": [
                    "Optional[Any]"
                ],
                "inclusive_end": [
                    "Optional[Any]"
                ]
            }
        },
        "ValueRangeFilter.__eq__": {
            "name": "__eq__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ValueRangeFilter.__ne__": {
            "name": "__ne__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ValueRangeFilter.to_pb": {
            "name": "to_pb",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_CellCountFilter.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_cells": []
            }
        },
        "_CellCountFilter.__eq__": {
            "name": "__eq__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_CellCountFilter.__ne__": {
            "name": "__ne__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "CellsRowOffsetFilter.to_pb": {
            "name": "to_pb",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CellsRowLimitFilter.to_pb": {
            "name": "to_pb",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CellsColumnLimitFilter.to_pb": {
            "name": "to_pb",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StripValueTransformerFilter.to_pb": {
            "name": "to_pb",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApplyLabelFilter.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "ApplyLabelFilter.__eq__": {
            "name": "__eq__",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ApplyLabelFilter.__ne__": {
            "name": "__ne__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ApplyLabelFilter.to_pb": {
            "name": "to_pb",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_FilterCombination.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filters": [
                    "Optional[Any]"
                ]
            }
        },
        "_FilterCombination.__eq__": {
            "name": "__eq__",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_FilterCombination.__ne__": {
            "name": "__ne__",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RowFilterChain.to_pb": {
            "name": "to_pb",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RowFilterUnion.to_pb": {
            "name": "to_pb",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConditionalRowFilter.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_filter": [],
                "true_filter": [
                    "Optional[Any]"
                ],
                "false_filter": [
                    "Optional[Any]"
                ]
            }
        },
        "ConditionalRowFilter.__eq__": {
            "name": "__eq__",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ConditionalRowFilter.__ne__": {
            "name": "__ne__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ConditionalRowFilter.to_pb": {
            "name": "to_pb",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kumparan.py-master/stubs/google/cloud/bigtable/__init__.py": {},
    "kumparan.py-master/stubs/google/cloud/client/__init__.py": {
        "_ClientFactoryMixin.from_service_account_json": {
            "name": "from_service_account_json",
            "location": 9,
            "return": [],
            "arguments": {
                "cls": [],
                "json_credentials_path": []
            }
        },
        "Client.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "credentials": [
                    "Optional[Any]"
                ],
                "_http": [
                    "Optional[Any]"
                ]
            }
        },
        "_ClientProjectMixin.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "Optional[Any]"
                ]
            }
        },
        "ClientWithProject.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "Optional[Any]"
                ],
                "credentials": [
                    "Optional[Any]"
                ],
                "_http": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "kumparan.py-master/stubs/google/cloud/pubsub_v1/types.py": {
        "TestIamPermissionsResponse.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIamPermissionsResponse.permissions": {
            "name": "permissions",
            "location": 15,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kumparan.py-master/stubs/google/cloud/pubsub_v1/__init__.py": {},
    "kumparan.py-master/stubs/google/cloud/pubsub_v1/publisher/client.py": {
        "Client.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch_settings": [
                    "Any"
                ],
                "batch_class": [
                    "Any"
                ]
            }
        },
        "Client.target": {
            "name": "target",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.batch": {
            "name": "batch",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "topic": [],
                "create": [
                    "bool"
                ],
                "autocommit": [
                    "bool"
                ]
            }
        },
        "Client.publish": {
            "name": "publish",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "topic": [],
                "data": []
            }
        },
        "Client.topic_path": {
            "name": "topic_path",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "str"
                ],
                "topic": [
                    "str"
                ]
            }
        },
        "Client.create_topic": {
            "name": "create_topic",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "label": [
                    "Any"
                ],
                "retry": [
                    "Any"
                ],
                "timeout": [
                    "Optional[float]"
                ]
            }
        },
        "Client.test_iam_permissions": {
            "name": "test_iam_permissions",
            "location": 18,
            "return": [
                "TestIamPermissionsResponse"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str"
                ],
                "permissions": [
                    "List[str]"
                ],
                "retry": [
                    "Any"
                ],
                "timeout": [
                    "Optional[float]"
                ]
            }
        }
    },
    "kumparan.py-master/stubs/google/cloud/pubsub_v1/publisher/__init__.py": {},
    "kumparan.py-master/stubs/google/cloud/pubsub_v1/subscriber/__init__.py": {},
    "kumparan.py-master/stubs/google/cloud/pubsub_v1/subscriber/client/__init__.py": {
        "Client.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "policy_class": [
                    "Any"
                ]
            }
        },
        "Client.target": {
            "name": "target",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.subscribe": {
            "name": "subscribe",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "subscription": [],
                "callback": [
                    "Optional[Any]"
                ],
                "flow_control": [
                    "Any"
                ]
            }
        }
    },
    "kumparan.py-master/stubs/google/cloud/storage/batch.py": {
        "MIMEApplicationHTTP.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [],
                "uri": [],
                "headers": [],
                "body": []
            }
        },
        "_FutureDict.get": {
            "name": "get",
            "location": 15,
            "return": [],
            "arguments": {
                "key": [],
                "default": [
                    "Optional[Any]"
                ]
            }
        },
        "_FutureDict.__getitem__": {
            "name": "__getitem__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "_FutureDict.__setitem__": {
            "name": "__setitem__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "_FutureResponse.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "future_dict": []
            }
        },
        "_FutureResponse.json": {
            "name": "json",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_FutureResponse.content": {
            "name": "content",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Batch.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "Batch.finish": {
            "name": "finish",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Batch.current": {
            "name": "current",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Batch.__enter__": {
            "name": "__enter__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Batch.__exit__": {
            "name": "__exit__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        }
    },
    "kumparan.py-master/stubs/google/cloud/storage/blob.py": {
        "Blob.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "bucket": [],
                "chunk_size": [
                    "Optional[Any]"
                ],
                "encryption_key": [
                    "Optional[Any]"
                ]
            }
        },
        "Blob.chunk_size": {
            "name": "chunk_size",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Blob.path_helper": {
            "name": "path_helper",
            "location": 17,
            "return": [],
            "arguments": {
                "bucket_path": [],
                "blob_name": []
            }
        },
        "Blob.acl": {
            "name": "acl",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blob.path": {
            "name": "path",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blob.client": {
            "name": "client",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blob.user_project": {
            "name": "user_project",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blob.public_url": {
            "name": "public_url",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blob.generate_signed_url": {
            "name": "generate_signed_url",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "expiration": [],
                "method": [
                    "str"
                ],
                "content_type": [
                    "Optional[Any]"
                ],
                "generation": [
                    "Optional[Any]"
                ],
                "response_disposition": [
                    "Optional[Any]"
                ],
                "response_type": [
                    "Optional[Any]"
                ],
                "client": [
                    "Optional[Any]"
                ],
                "credentials": [
                    "Optional[Any]"
                ]
            }
        },
        "Blob.exists": {
            "name": "exists",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "client": [
                    "Optional[Any]"
                ]
            }
        },
        "Blob.delete": {
            "name": "delete",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "client": [
                    "Optional[Any]"
                ]
            }
        },
        "Blob.download_to_file": {
            "name": "download_to_file",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "file_obj": [],
                "client": [
                    "Optional[Any]"
                ]
            }
        },
        "Blob.download_to_filename": {
            "name": "download_to_filename",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "client": [
                    "Optional[Any]"
                ]
            }
        },
        "Blob.download_as_string": {
            "name": "download_as_string",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "client": [
                    "Optional[Any]"
                ]
            }
        },
        "Blob.upload_from_file": {
            "name": "upload_from_file",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "file_obj": [],
                "rewind": [
                    "bool"
                ],
                "size": [
                    "Optional[Any]"
                ],
                "content_type": [
                    "Optional[Any]"
                ],
                "num_retries": [
                    "Optional[Any]"
                ],
                "client": [
                    "Optional[Any]"
                ]
            }
        },
        "Blob.upload_from_filename": {
            "name": "upload_from_filename",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "content_type": [
                    "Optional[Any]"
                ],
                "client": [
                    "Optional[Any]"
                ]
            }
        },
        "Blob.upload_from_string": {
            "name": "upload_from_string",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "content_type": [
                    "str"
                ],
                "client": [
                    "Optional[Any]"
                ]
            }
        },
        "Blob.create_resumable_upload_session": {
            "name": "create_resumable_upload_session",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "content_type": [
                    "Optional[Any]"
                ],
                "size": [
                    "Optional[Any]"
                ],
                "origin": [
                    "Optional[Any]"
                ],
                "client": [
                    "Optional[Any]"
                ]
            }
        },
        "Blob.get_iam_policy": {
            "name": "get_iam_policy",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "client": [
                    "Optional[Any]"
                ]
            }
        },
        "Blob.set_iam_policy": {
            "name": "set_iam_policy",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "policy": [],
                "client": [
                    "Optional[Any]"
                ]
            }
        },
        "Blob.test_iam_permissions": {
            "name": "test_iam_permissions",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "permissions": [],
                "client": [
                    "Optional[Any]"
                ]
            }
        },
        "Blob.make_public": {
            "name": "make_public",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "client": [
                    "Optional[Any]"
                ]
            }
        },
        "Blob.compose": {
            "name": "compose",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "sources": [],
                "client": [
                    "Optional[Any]"
                ]
            }
        },
        "Blob.rewrite": {
            "name": "rewrite",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "token": [
                    "Optional[Any]"
                ],
                "client": [
                    "Optional[Any]"
                ]
            }
        },
        "Blob.update_storage_class": {
            "name": "update_storage_class",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "new_class": [],
                "client": [
                    "Optional[Any]"
                ]
            }
        },
        "Blob.component_count": {
            "name": "component_count",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blob.etag": {
            "name": "etag",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blob.generation": {
            "name": "generation",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blob.id": {
            "name": "id",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blob.media_link": {
            "name": "media_link",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blob.metadata": {
            "name": "metadata",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Blob.metageneration": {
            "name": "metageneration",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blob.owner": {
            "name": "owner",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blob.self_link": {
            "name": "self_link",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blob.size": {
            "name": "size",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blob.time_deleted": {
            "name": "time_deleted",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blob.time_created": {
            "name": "time_created",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blob.updated": {
            "name": "updated",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kumparan.py-master/stubs/google/cloud/storage/bucket.py": {
        "Bucket.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [],
                "name": [
                    "Optional[Any]"
                ],
                "user_project": [
                    "Optional[Any]"
                ]
            }
        },
        "Bucket.client": {
            "name": "client",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bucket.user_project": {
            "name": "user_project",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bucket.blob": {
            "name": "blob",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "blob_name": [],
                "chunk_size": [
                    "Optional[Any]"
                ],
                "encryption_key": [
                    "Optional[Any]"
                ]
            }
        },
        "Bucket.notification": {
            "name": "notification",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "topic_name": [],
                "topic_project": [
                    "Optional[Any]"
                ],
                "custom_attributes": [
                    "Optional[Any]"
                ],
                "event_types": [
                    "Optional[Any]"
                ],
                "blob_name_prefix": [
                    "Optional[Any]"
                ],
                "payload_format": [
                    "Any"
                ]
            }
        },
        "Bucket.exists": {
            "name": "exists",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "client": [
                    "Optional[Any]"
                ]
            }
        },
        "Bucket.create": {
            "name": "create",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "client": [
                    "Optional[Any]"
                ]
            }
        },
        "Bucket.patch": {
            "name": "patch",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "client": [
                    "Optional[Any]"
                ]
            }
        },
        "Bucket.acl": {
            "name": "acl",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bucket.default_object_acl": {
            "name": "default_object_acl",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bucket.path_helper": {
            "name": "path_helper",
            "location": 24,
            "return": [],
            "arguments": {
                "bucket_name": []
            }
        },
        "Bucket.path": {
            "name": "path",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bucket.get_blob": {
            "name": "get_blob",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "blob_name": [],
                "client": [
                    "Optional[Any]"
                ],
                "encryption_key": [
                    "Optional[Any]"
                ]
            }
        },
        "Bucket.list_blobs": {
            "name": "list_blobs",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "max_results": [
                    "Optional[Any]"
                ],
                "page_token": [
                    "Optional[Any]"
                ],
                "prefix": [
                    "Optional[Any]"
                ],
                "delimiter": [
                    "Optional[Any]"
                ],
                "versions": [
                    "Optional[Any]"
                ],
                "projection": [
                    "str"
                ],
                "fields": [
                    "Optional[Any]"
                ],
                "client": [
                    "Optional[Any]"
                ]
            }
        },
        "Bucket.list_notifications": {
            "name": "list_notifications",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "client": [
                    "Optional[Any]"
                ]
            }
        },
        "Bucket.delete": {
            "name": "delete",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "force": [
                    "bool"
                ],
                "client": [
                    "Optional[Any]"
                ]
            }
        },
        "Bucket.delete_blob": {
            "name": "delete_blob",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "blob_name": [],
                "client": [
                    "Optional[Any]"
                ]
            }
        },
        "Bucket.delete_blobs": {
            "name": "delete_blobs",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "blobs": [],
                "on_error": [
                    "Optional[Any]"
                ],
                "client": [
                    "Optional[Any]"
                ]
            }
        },
        "Bucket.copy_blob": {
            "name": "copy_blob",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "blob": [],
                "destination_bucket": [],
                "new_name": [
                    "Optional[Any]"
                ],
                "client": [
                    "Optional[Any]"
                ],
                "preserve_acl": [
                    "bool"
                ]
            }
        },
        "Bucket.rename_blob": {
            "name": "rename_blob",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "blob": [],
                "new_name": [],
                "client": [
                    "Optional[Any]"
                ]
            }
        },
        "Bucket.cors": {
            "name": "cors",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "entries": []
            }
        },
        "Bucket.labels": {
            "name": "labels",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "mapping": []
            }
        },
        "Bucket.etag": {
            "name": "etag",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bucket.id": {
            "name": "id",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bucket.lifecycle_rules": {
            "name": "lifecycle_rules",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "rules": []
            }
        },
        "Bucket.get_logging": {
            "name": "get_logging",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bucket.enable_logging": {
            "name": "enable_logging",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_name": [],
                "object_prefix": [
                    "str"
                ]
            }
        },
        "Bucket.disable_logging": {
            "name": "disable_logging",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bucket.metageneration": {
            "name": "metageneration",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bucket.owner": {
            "name": "owner",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bucket.project_number": {
            "name": "project_number",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bucket.self_link": {
            "name": "self_link",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bucket.storage_class": {
            "name": "storage_class",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Bucket.time_created": {
            "name": "time_created",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bucket.versioning_enabled": {
            "name": "versioning_enabled",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Bucket.requester_pays": {
            "name": "requester_pays",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Bucket.configure_website": {
            "name": "configure_website",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "main_page_suffix": [
                    "Optional[Any]"
                ],
                "not_found_page": [
                    "Optional[Any]"
                ]
            }
        },
        "Bucket.disable_website": {
            "name": "disable_website",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bucket.get_iam_policy": {
            "name": "get_iam_policy",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "client": [
                    "Optional[Any]"
                ]
            }
        },
        "Bucket.set_iam_policy": {
            "name": "set_iam_policy",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "policy": [],
                "client": [
                    "Optional[Any]"
                ]
            }
        },
        "Bucket.test_iam_permissions": {
            "name": "test_iam_permissions",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "permissions": [],
                "client": [
                    "Optional[Any]"
                ]
            }
        },
        "Bucket.make_public": {
            "name": "make_public",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "recursive": [
                    "bool"
                ],
                "future": [
                    "bool"
                ],
                "client": [
                    "Optional[Any]"
                ]
            }
        },
        "Bucket.generate_upload_policy": {
            "name": "generate_upload_policy",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "conditions": [],
                "expiration": [
                    "Optional[Any]"
                ],
                "client": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "kumparan.py-master/stubs/google/cloud/storage/client.py": {
        "Client.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "Optional[Any]"
                ],
                "credentials": [
                    "Optional[Any]"
                ],
                "_http": [
                    "Optional[Any]"
                ]
            }
        },
        "Client.current_batch": {
            "name": "current_batch",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.bucket": {
            "name": "bucket",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_name": [],
                "user_project": [
                    "Optional[Any]"
                ]
            }
        },
        "Client.batch": {
            "name": "batch",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.get_bucket": {
            "name": "get_bucket",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_name": []
            }
        },
        "Client.lookup_bucket": {
            "name": "lookup_bucket",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_name": []
            }
        },
        "Client.create_bucket": {
            "name": "create_bucket",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_name": [],
                "requester_pays": [
                    "Optional[Any]"
                ]
            }
        },
        "Client.list_buckets": {
            "name": "list_buckets",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "max_results": [
                    "Optional[Any]"
                ],
                "page_token": [
                    "Optional[Any]"
                ],
                "prefix": [
                    "Optional[Any]"
                ],
                "projection": [
                    "str"
                ],
                "fields": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "kumparan.py-master/stubs/google/cloud/storage/_helpers.py": {
        "_PropertyMixin.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[Any]"
                ]
            }
        },
        "_PropertyMixin.path": {
            "name": "path",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_PropertyMixin.client": {
            "name": "client",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_PropertyMixin.user_project": {
            "name": "user_project",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_PropertyMixin.reload": {
            "name": "reload",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "client": [
                    "Optional[Any]"
                ]
            }
        },
        "_PropertyMixin.patch": {
            "name": "patch",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "client": [
                    "Optional[Any]"
                ]
            }
        },
        "_PropertyMixin.update": {
            "name": "update",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "client": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "kumparan.py-master/stubs/google/cloud/storage/_http.py": {},
    "kumparan.py-master/stubs/google/cloud/storage/__init__.py": {},
    "kumparan.py-master/stubs/google/oauth2/service_account.py": {
        "Credentials.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signer": [],
                "service_account_email": [],
                "token_uri": [],
                "scopes": [
                    "Optional[Any]"
                ],
                "subject": [
                    "Optional[Any]"
                ],
                "project_id": [
                    "Optional[Any]"
                ],
                "additional_claims": [
                    "Optional[Any]"
                ]
            }
        },
        "Credentials.from_service_account_info": {
            "name": "from_service_account_info",
            "location": 11,
            "return": [],
            "arguments": {
                "cls": [],
                "info": []
            }
        },
        "Credentials.from_service_account_file": {
            "name": "from_service_account_file",
            "location": 13,
            "return": [],
            "arguments": {
                "cls": [],
                "filename": []
            }
        },
        "Credentials.service_account_email": {
            "name": "service_account_email",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Credentials.project_id": {
            "name": "project_id",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Credentials.requires_scopes": {
            "name": "requires_scopes",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Credentials.with_scopes": {
            "name": "with_scopes",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "scopes": []
            }
        },
        "Credentials.with_subject": {
            "name": "with_subject",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "subject": []
            }
        },
        "Credentials.with_claims": {
            "name": "with_claims",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "additional_claims": []
            }
        },
        "Credentials.refresh": {
            "name": "refresh",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Credentials.sign_bytes": {
            "name": "sign_bytes",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Credentials.signer": {
            "name": "signer",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Credentials.signer_email": {
            "name": "signer_email",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kumparan.py-master/stubs/google/oauth2/__init__.py": {},
    "kumparan.py-master/tests/service_account_test.py": {
        "TestSupervisedAccount.test_get_credentials_not_set": {
            "name": "test_get_credentials_not_set",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSupervisedAccount.test_get_credentials_invalid_json": {
            "name": "test_get_credentials_invalid_json",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kumparan.py-master/tests/stackdriver_test.py": {
        "init_logger": {
            "name": "init_logger",
            "location": 9,
            "return": [
                "logging.Logger"
            ],
            "arguments": {
                "output_path": [
                    "str"
                ],
                "service_name": [
                    "str"
                ],
                "service_version": [
                    "str"
                ]
            }
        },
        "TestStackdriverLogging.test_severity_debug": {
            "name": "test_severity_debug",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStackdriverLogging.test_severity_info": {
            "name": "test_severity_info",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStackdriverLogging.test_severity_warning": {
            "name": "test_severity_warning",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStackdriverLogging.test_severity_error": {
            "name": "test_severity_error",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStackdriverLogging.test_severity_critical": {
            "name": "test_severity_critical",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStackdriverLogging.test_severity_exception": {
            "name": "test_severity_exception",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kumparan.py-master/tests/utils_test.py": {
        "TestUtils.test_unixtimestamp": {
            "name": "test_unixtimestamp",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    }
}
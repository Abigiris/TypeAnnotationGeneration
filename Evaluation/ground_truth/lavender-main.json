{
    "lavender-main/src/lavender/__init__.py": {
        "supports_feature": {
            "name": "supports_feature",
            "location": 323,
            "return": [
                "bool"
            ],
            "arguments": {
                "target_versions": [
                    "Set[TargetVersion]"
                ],
                "feature": [
                    "Feature"
                ]
            }
        },
        "find_pyproject_toml": {
            "name": "find_pyproject_toml",
            "location": 327,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "path_search_start": [
                    "Iterable[str]"
                ]
            }
        },
        "parse_pyproject_toml": {
            "name": "parse_pyproject_toml",
            "location": 334,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "path_config": [
                    "str"
                ]
            }
        },
        "read_pyproject_toml": {
            "name": "read_pyproject_toml",
            "location": 344,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "ctx": [
                    "click.Context"
                ],
                "param": [
                    "click.Parameter"
                ],
                "value": [
                    "Optional[str]"
                ]
            }
        },
        "target_version_option_callback": {
            "name": "target_version_option_callback",
            "location": 390,
            "return": [
                "List[TargetVersion]"
            ],
            "arguments": {
                "c": [
                    "click.Context"
                ],
                "p": [
                    "Union[(click.Option, click.Parameter)]"
                ],
                "v": [
                    "Tuple[(str, ...)]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 552,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "click.Context"
                ],
                "code": [
                    "Optional[str]"
                ],
                "line_length": [
                    "int"
                ],
                "target_version": [
                    "List[TargetVersion]"
                ],
                "check": [
                    "bool"
                ],
                "diff": [
                    "bool"
                ],
                "color": [
                    "bool"
                ],
                "fast": [
                    "bool"
                ],
                "pyi": [
                    "bool"
                ],
                "string_normalization": [
                    "str"
                ],
                "experimental_string_processing": [
                    "bool"
                ],
                "special_case_def_empty_lines": [
                    "bool"
                ],
                "quiet": [
                    "bool"
                ],
                "verbose": [
                    "bool"
                ],
                "include": [
                    "str"
                ],
                "exclude": [
                    "str"
                ],
                "force_exclude": [
                    "Optional[str]"
                ],
                "src": [
                    "Tuple[(str, ...)]"
                ],
                "config": [
                    "Optional[str]"
                ]
            }
        },
        "get_sources": {
            "name": "get_sources",
            "location": 635,
            "return": [
                "Set[Path]"
            ],
            "arguments": {}
        },
        "path_empty": {
            "name": "path_empty",
            "location": 707,
            "return": [
                "None"
            ],
            "arguments": {
                "src": [
                    "Sized"
                ],
                "msg": [
                    "str"
                ],
                "quiet": [
                    "bool"
                ],
                "verbose": [
                    "bool"
                ],
                "ctx": [
                    "click.Context"
                ]
            }
        },
        "reformat_one": {
            "name": "reformat_one",
            "location": 719,
            "return": [
                "None"
            ],
            "arguments": {
                "src": [
                    "Path"
                ],
                "fast": [
                    "bool"
                ],
                "write_back": [
                    "WriteBack"
                ],
                "mode": [
                    "Mode"
                ],
                "report": [
                    "'Report'"
                ]
            }
        },
        "reformat_many": {
            "name": "reformat_many",
            "location": 754,
            "return": [
                "None"
            ],
            "arguments": {
                "sources": [
                    "Set[Path]"
                ],
                "fast": [
                    "bool"
                ],
                "write_back": [
                    "WriteBack"
                ],
                "mode": [
                    "Mode"
                ],
                "report": [
                    "'Report'"
                ]
            }
        },
        "format_file_in_place": {
            "name": "format_file_in_place",
            "location": 862,
            "return": [
                "bool"
            ],
            "arguments": {
                "src": [
                    "Path"
                ],
                "fast": [
                    "bool"
                ],
                "mode": [
                    "Mode"
                ],
                "write_back": [
                    "WriteBack"
                ],
                "lock": [
                    "Any"
                ]
            }
        },
        "color_diff": {
            "name": "color_diff",
            "location": 912,
            "return": [
                "str"
            ],
            "arguments": {
                "contents": [
                    "str"
                ]
            }
        },
        "wrap_stream_for_windows": {
            "name": "wrap_stream_for_windows",
            "location": 928,
            "return": [
                "Union[(io.TextIOWrapper, 'colorama.AnsiToWin32.AnsiToWin32')]"
            ],
            "arguments": {
                "f": [
                    "io.TextIOWrapper"
                ]
            }
        },
        "format_stdin_to_stdout": {
            "name": "format_stdin_to_stdout",
            "location": 956,
            "return": [
                "bool"
            ],
            "arguments": {
                "fast": [
                    "bool"
                ]
            }
        },
        "format_file_contents": {
            "name": "format_file_contents",
            "location": 993,
            "return": [
                "FileContent"
            ],
            "arguments": {
                "src_contents": [
                    "str"
                ]
            }
        },
        "format_str": {
            "name": "format_str",
            "location": 1013,
            "return": [
                "FileContent"
            ],
            "arguments": {
                "src_contents": [
                    "str"
                ]
            }
        },
        "decode_bytes": {
            "name": "decode_bytes",
            "location": 1079,
            "return": [
                "Tuple[(FileContent, Encoding, NewLine)]"
            ],
            "arguments": {
                "src": [
                    "bytes"
                ]
            }
        },
        "get_grammars": {
            "name": "get_grammars",
            "location": 1096,
            "return": [
                "List[Grammar]"
            ],
            "arguments": {
                "target_versions": [
                    "Set[TargetVersion]"
                ]
            }
        },
        "lib2to3_parse": {
            "name": "lib2to3_parse",
            "location": 1135,
            "return": [
                "Node"
            ],
            "arguments": {
                "src_txt": [
                    "str"
                ],
                "target_versions": [
                    "Iterable[TargetVersion]"
                ]
            }
        },
        "lib2to3_unparse": {
            "name": "lib2to3_unparse",
            "location": 1162,
            "return": [
                "str"
            ],
            "arguments": {
                "node": [
                    "Node"
                ]
            }
        },
        "whitespace": {
            "name": "whitespace",
            "location": 2166,
            "return": [
                "str"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "preceding_leaf": {
            "name": "preceding_leaf",
            "location": 2396,
            "return": [
                "Optional[Leaf]"
            ],
            "arguments": {
                "node": [
                    "Optional[LN]"
                ]
            }
        },
        "prev_siblings_are": {
            "name": "prev_siblings_are",
            "location": 2414,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "Optional[LN]"
                ],
                "tokens": [
                    "List[Optional[NodeType]]"
                ]
            }
        },
        "child_towards": {
            "name": "child_towards",
            "location": 2430,
            "return": [
                "Optional[LN]"
            ],
            "arguments": {
                "ancestor": [
                    "Node"
                ],
                "descendant": [
                    "LN"
                ]
            }
        },
        "container_of": {
            "name": "container_of",
            "location": 2438,
            "return": [
                "LN"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "is_split_after_delimiter": {
            "name": "is_split_after_delimiter",
            "location": 2463,
            "return": [
                "Priority"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ],
                "previous": [
                    "Optional[Leaf]"
                ]
            }
        },
        "is_split_before_delimiter": {
            "name": "is_split_before_delimiter",
            "location": 2477,
            "return": [
                "Priority"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ],
                "previous": [
                    "Optional[Leaf]"
                ]
            }
        },
        "generate_comments": {
            "name": "generate_comments",
            "location": 2577,
            "return": [
                "Iterator[Leaf]"
            ],
            "arguments": {
                "leaf": [
                    "LN"
                ]
            }
        },
        "list_comments": {
            "name": "list_comments",
            "location": 2619,
            "return": [
                "List[ProtoComment]"
            ],
            "arguments": {
                "prefix": [
                    "str"
                ]
            }
        },
        "make_comment": {
            "name": "make_comment",
            "location": 2655,
            "return": [
                "str"
            ],
            "arguments": {
                "content": [
                    "str"
                ]
            }
        },
        "transform_line": {
            "name": "transform_line",
            "location": 2674,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "line": [
                    "Line"
                ],
                "mode": [
                    "Mode"
                ],
                "features": [
                    "Collection[Feature]"
                ]
            }
        },
        "TErr": {
            "name": "TErr",
            "location": 4507,
            "return": [
                "Err[CannotTransform]"
            ],
            "arguments": {
                "err_msg": [
                    "str"
                ]
            }
        },
        "contains_pragma_comment": {
            "name": "contains_pragma_comment",
            "location": 4516,
            "return": [
                "bool"
            ],
            "arguments": {
                "comment_list": [
                    "List[Leaf]"
                ]
            }
        },
        "insert_str_child_factory": {
            "name": "insert_str_child_factory",
            "location": 4530,
            "return": [
                "Callable[([LN], None)]"
            ],
            "arguments": {
                "string_leaf": [
                    "Leaf"
                ]
            }
        },
        "has_triple_quotes": {
            "name": "has_triple_quotes",
            "location": 4591,
            "return": [
                "bool"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "parent_type": {
            "name": "parent_type",
            "location": 4600,
            "return": [
                "Optional[NodeType]"
            ],
            "arguments": {
                "node": [
                    "Optional[LN]"
                ]
            }
        },
        "is_empty_par": {
            "name": "is_empty_par",
            "location": 4613,
            "return": [
                "bool"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "is_empty_lpar": {
            "name": "is_empty_lpar",
            "location": 4617,
            "return": [
                "bool"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "is_empty_rpar": {
            "name": "is_empty_rpar",
            "location": 4621,
            "return": [
                "bool"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "is_valid_index_factory": {
            "name": "is_valid_index_factory",
            "location": 4625,
            "return": [
                "Callable[([int], bool)]"
            ],
            "arguments": {
                "seq": [
                    "Sequence[Any]"
                ]
            }
        },
        "line_to_string": {
            "name": "line_to_string",
            "location": 4652,
            "return": [
                "str"
            ],
            "arguments": {
                "line": [
                    "Line"
                ]
            }
        },
        "append_leaves": {
            "name": "append_leaves",
            "location": 4660,
            "return": [
                "None"
            ],
            "arguments": {
                "new_line": [
                    "Line"
                ],
                "old_line": [
                    "Line"
                ],
                "leaves": [
                    "List[Leaf]"
                ]
            }
        },
        "replace_child": {
            "name": "replace_child",
            "location": 4682,
            "return": [
                "None"
            ],
            "arguments": {
                "old_child": [
                    "LN"
                ],
                "new_child": [
                    "LN"
                ]
            }
        },
        "get_string_prefix": {
            "name": "get_string_prefix",
            "location": 4699,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "assert_is_leaf_string": {
            "name": "assert_is_leaf_string",
            "location": 4718,
            "return": [
                "None"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "left_hand_split": {
            "name": "left_hand_split",
            "location": 4753,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "line": [
                    "Line"
                ],
                "_features": [
                    "Collection[Feature]"
                ]
            }
        },
        "right_hand_split": {
            "name": "right_hand_split",
            "location": 4789,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "line": [
                    "Line"
                ],
                "line_length": [
                    "int"
                ],
                "features": [
                    "Collection[Feature]"
                ],
                "omit": [
                    "Collection[LeafID]"
                ]
            }
        },
        "bracket_split_succeeded_or_raise": {
            "name": "bracket_split_succeeded_or_raise",
            "location": 4877,
            "return": [
                "None"
            ],
            "arguments": {
                "head": [
                    "Line"
                ],
                "body": [
                    "Line"
                ],
                "tail": [
                    "Line"
                ]
            }
        },
        "bracket_split_build_line": {
            "name": "bracket_split_build_line",
            "location": 4903,
            "return": [
                "Line"
            ],
            "arguments": {
                "leaves": [
                    "List[Leaf]"
                ],
                "original": [
                    "Line"
                ],
                "opening_bracket": [
                    "Leaf"
                ]
            }
        },
        "dont_increase_indentation": {
            "name": "dont_increase_indentation",
            "location": 4946,
            "return": [
                "Transformer"
            ],
            "arguments": {
                "split_func": [
                    "Transformer"
                ]
            }
        },
        "delimiter_split": {
            "name": "delimiter_split",
            "location": 4962,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "line": [
                    "Line"
                ],
                "features": [
                    "Collection[Feature]"
                ]
            }
        },
        "standalone_comment_split": {
            "name": "standalone_comment_split",
            "location": 5033,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "line": [
                    "Line"
                ],
                "features": [
                    "Collection[Feature]"
                ]
            }
        },
        "is_import": {
            "name": "is_import",
            "location": 5063,
            "return": [
                "bool"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "is_type_comment": {
            "name": "is_type_comment",
            "location": 5077,
            "return": [
                "bool"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ],
                "suffix": [
                    "str"
                ]
            }
        },
        "normalize_prefix": {
            "name": "normalize_prefix",
            "location": 5085,
            "return": [
                "None"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "normalize_string_prefix": {
            "name": "normalize_string_prefix",
            "location": 5103,
            "return": [
                "None"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ],
                "remove_u_prefix": [
                    "bool"
                ]
            }
        },
        "normalize_string_quotes": {
            "name": "normalize_string_quotes",
            "location": 5119,
            "return": [
                "None"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ],
                "string_normalization": [
                    "StringNormalization"
                ]
            }
        },
        "normalize_numeric_literal": {
            "name": "normalize_numeric_literal",
            "location": 5208,
            "return": [
                "None"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "format_float_or_int_string": {
            "name": "format_float_or_int_string",
            "location": 5244,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "normalize_invisible_parens": {
            "name": "normalize_invisible_parens",
            "location": 5253,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "Node"
                ],
                "parens_after": [
                    "Set[str]"
                ]
            }
        },
        "normalize_fmt_off": {
            "name": "normalize_fmt_off",
            "location": 5309,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "Node"
                ]
            }
        },
        "convert_one_fmt_off_pair": {
            "name": "convert_one_fmt_off_pair",
            "location": 5316,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "Node"
                ]
            }
        },
        "generate_ignored_nodes": {
            "name": "generate_ignored_nodes",
            "location": 5370,
            "return": [
                "Iterator[LN]"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "is_fmt_on": {
            "name": "is_fmt_on",
            "location": 5391,
            "return": [
                "bool"
            ],
            "arguments": {
                "container": [
                    "LN"
                ]
            }
        },
        "contains_fmt_on_at_column": {
            "name": "contains_fmt_on_at_column",
            "location": 5404,
            "return": [
                "bool"
            ],
            "arguments": {
                "container": [
                    "LN"
                ],
                "column": [
                    "int"
                ]
            }
        },
        "first_leaf_column": {
            "name": "first_leaf_column",
            "location": 5419,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "node": [
                    "Node"
                ]
            }
        },
        "maybe_make_parens_invisible_in_atom": {
            "name": "maybe_make_parens_invisible_in_atom",
            "location": 5427,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "LN"
                ],
                "parent": [
                    "LN"
                ]
            }
        },
        "is_atom_with_invisible_parens": {
            "name": "is_atom_with_invisible_parens",
            "location": 5463,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "LN"
                ]
            }
        },
        "is_empty_tuple": {
            "name": "is_empty_tuple",
            "location": 5481,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "LN"
                ]
            }
        },
        "unwrap_singleton_parenthesis": {
            "name": "unwrap_singleton_parenthesis",
            "location": 5491,
            "return": [
                "Optional[LN]"
            ],
            "arguments": {
                "node": [
                    "LN"
                ]
            }
        },
        "wrap_in_parentheses": {
            "name": "wrap_in_parentheses",
            "location": 5505,
            "return": [
                "None"
            ],
            "arguments": {
                "parent": [
                    "Node"
                ],
                "child": [
                    "LN"
                ]
            }
        },
        "is_one_tuple": {
            "name": "is_one_tuple",
            "location": 5523,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "LN"
                ]
            }
        },
        "is_walrus_assignment": {
            "name": "is_walrus_assignment",
            "location": 5539,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "LN"
                ]
            }
        },
        "is_yield": {
            "name": "is_yield",
            "location": 5545,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "LN"
                ]
            }
        },
        "is_vararg": {
            "name": "is_vararg",
            "location": 5566,
            "return": [
                "bool"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ],
                "within": [
                    "Set[NodeType]"
                ]
            }
        },
        "is_multiline_string": {
            "name": "is_multiline_string",
            "location": 5589,
            "return": [
                "bool"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "is_stub_suite": {
            "name": "is_stub_suite",
            "location": 5594,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "Node"
                ]
            }
        },
        "is_stub_body": {
            "name": "is_stub_body",
            "location": 5607,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "LN"
                ]
            }
        },
        "max_delimiter_priority_in_atom": {
            "name": "max_delimiter_priority_in_atom",
            "location": 5623,
            "return": [
                "Priority"
            ],
            "arguments": {
                "node": [
                    "LN"
                ]
            }
        },
        "ensure_visible": {
            "name": "ensure_visible",
            "location": 5651,
            "return": [
                "None"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "should_split_body_explode": {
            "name": "should_split_body_explode",
            "location": 5663,
            "return": [
                "bool"
            ],
            "arguments": {
                "line": [
                    "Line"
                ],
                "opening_bracket": [
                    "Leaf"
                ]
            }
        },
        "is_one_tuple_between": {
            "name": "is_one_tuple_between",
            "location": 5690,
            "return": [
                "bool"
            ],
            "arguments": {
                "opening": [
                    "Leaf"
                ],
                "closing": [
                    "Leaf"
                ],
                "leaves": [
                    "List[Leaf]"
                ]
            }
        },
        "get_features_used": {
            "name": "get_features_used",
            "location": 5722,
            "return": [
                "Set[Feature]"
            ],
            "arguments": {
                "node": [
                    "Node"
                ]
            }
        },
        "detect_target_versions": {
            "name": "detect_target_versions",
            "location": 5771,
            "return": [
                "Set[TargetVersion]"
            ],
            "arguments": {
                "node": [
                    "Node"
                ]
            }
        },
        "generate_trailers_to_omit": {
            "name": "generate_trailers_to_omit",
            "location": 5779,
            "return": [
                "Iterator[Set[LeafID]]"
            ],
            "arguments": {
                "line": [
                    "Line"
                ],
                "line_length": [
                    "int"
                ]
            }
        },
        "get_future_imports": {
            "name": "get_future_imports",
            "location": 5855,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "node": [
                    "Node"
                ]
            }
        },
        "get_gitignore": {
            "name": "get_gitignore",
            "location": 5906,
            "return": [
                "PathSpec"
            ],
            "arguments": {
                "root": [
                    "Path"
                ]
            }
        },
        "normalize_path_maybe_ignore": {
            "name": "normalize_path_maybe_ignore",
            "location": 5916,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "path": [
                    "Path"
                ],
                "root": [
                    "Path"
                ],
                "report": [
                    "'Report'"
                ]
            }
        },
        "gen_python_files": {
            "name": "gen_python_files",
            "location": 5939,
            "return": [
                "Iterator[Path]"
            ],
            "arguments": {
                "paths": [
                    "Iterable[Path]"
                ],
                "root": [
                    "Path"
                ],
                "include": [
                    "Optional[Pattern[str]]"
                ],
                "exclude": [
                    "Pattern[str]"
                ],
                "force_exclude": [
                    "Optional[Pattern[str]]"
                ],
                "report": [
                    "'Report'"
                ],
                "gitignore": [
                    "PathSpec"
                ]
            }
        },
        "find_project_root": {
            "name": "find_project_root",
            "location": 6001,
            "return": [
                "Path"
            ],
            "arguments": {
                "srcs": [
                    "Iterable[str]"
                ]
            }
        },
        "parse_ast": {
            "name": "parse_ast",
            "location": 6125,
            "return": [
                "Union[(ast.AST, ast3.AST, ast27.AST)]"
            ],
            "arguments": {
                "src": [
                    "str"
                ]
            }
        },
        "_fixup_ast_constants": {
            "name": "_fixup_ast_constants",
            "location": 6144,
            "return": [
                "Union[(ast.AST, ast3.AST, ast27.AST)]"
            ],
            "arguments": {
                "node": [
                    "Union[(ast.AST, ast3.AST, ast27.AST)]"
                ]
            }
        },
        "_stringify_ast": {
            "name": "_stringify_ast",
            "location": 6160,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "node": [
                    "Union[(ast.AST, ast3.AST, ast27.AST)]"
                ],
                "depth": [
                    "int"
                ]
            }
        },
        "assert_equivalent": {
            "name": "assert_equivalent",
            "location": 6219,
            "return": [
                "None"
            ],
            "arguments": {
                "src": [
                    "str"
                ],
                "dst": [
                    "str"
                ]
            }
        },
        "assert_stable": {
            "name": "assert_stable",
            "location": 6250,
            "return": [
                "None"
            ],
            "arguments": {
                "src": [
                    "str"
                ],
                "dst": [
                    "str"
                ],
                "mode": [
                    "Mode"
                ]
            }
        },
        "dump_to_file": {
            "name": "dump_to_file",
            "location": 6267,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "nullcontext": {
            "name": "nullcontext",
            "location": 6280,
            "return": [
                "Iterator[None]"
            ],
            "arguments": {}
        },
        "diff": {
            "name": "diff",
            "location": 6288,
            "return": [
                "str"
            ],
            "arguments": {
                "a": [
                    "str"
                ],
                "b": [
                    "str"
                ],
                "a_name": [
                    "str"
                ],
                "b_name": [
                    "str"
                ]
            }
        },
        "cancel": {
            "name": "cancel",
            "location": 6299,
            "return": [
                "None"
            ],
            "arguments": {
                "tasks": [
                    "Iterable['asyncio.Task[Any]']"
                ]
            }
        },
        "shutdown": {
            "name": "shutdown",
            "location": 6306,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "sub_twice": {
            "name": "sub_twice",
            "location": 6332,
            "return": [
                "str"
            ],
            "arguments": {
                "regex": [
                    "Pattern[str]"
                ],
                "replacement": [
                    "str"
                ],
                "original": [
                    "str"
                ]
            }
        },
        "re_compile_maybe_verbose": {
            "name": "re_compile_maybe_verbose",
            "location": 6341,
            "return": [
                "Pattern[str]"
            ],
            "arguments": {
                "regex": [
                    "str"
                ]
            }
        },
        "enumerate_reversed": {
            "name": "enumerate_reversed",
            "location": 6352,
            "return": [
                "Iterator[Tuple[(Index, T)]]"
            ],
            "arguments": {
                "sequence": [
                    "Sequence[T]"
                ]
            }
        },
        "enumerate_with_length": {
            "name": "enumerate_with_length",
            "location": 6360,
            "return": [
                "Iterator[Tuple[(Index, Leaf, int)]]"
            ],
            "arguments": {
                "line": [
                    "Line"
                ],
                "reversed": [
                    "bool"
                ]
            }
        },
        "is_line_short_enough": {
            "name": "is_line_short_enough",
            "location": 6382,
            "return": [
                "bool"
            ],
            "arguments": {
                "line": [
                    "Line"
                ]
            }
        },
        "can_be_split": {
            "name": "can_be_split",
            "location": 6396,
            "return": [
                "bool"
            ],
            "arguments": {
                "line": [
                    "Line"
                ]
            }
        },
        "can_omit_invisible_parens": {
            "name": "can_omit_invisible_parens",
            "location": 6432,
            "return": [
                "bool"
            ],
            "arguments": {
                "line": [
                    "Line"
                ],
                "line_length": [
                    "int"
                ],
                "omit_on_explode": [
                    "Collection[LeafID]"
                ]
            }
        },
        "_can_omit_opening_paren": {
            "name": "_can_omit_opening_paren",
            "location": 6510,
            "return": [
                "bool"
            ],
            "arguments": {
                "line": [
                    "Line"
                ]
            }
        },
        "_can_omit_closing_paren": {
            "name": "_can_omit_closing_paren",
            "location": 6535,
            "return": [
                "bool"
            ],
            "arguments": {
                "line": [
                    "Line"
                ]
            }
        },
        "last_two_except": {
            "name": "last_two_except",
            "location": 6552,
            "return": [
                "Tuple[(Leaf, Leaf)]"
            ],
            "arguments": {
                "leaves": [
                    "List[Leaf]"
                ],
                "omit": [
                    "Collection[LeafID]"
                ]
            }
        },
        "run_transformer": {
            "name": "run_transformer",
            "location": 6573,
            "return": [
                "List[Line]"
            ],
            "arguments": {
                "line": [
                    "Line"
                ],
                "transform": [
                    "Transformer"
                ],
                "mode": [
                    "Mode"
                ],
                "features": [
                    "Collection[Feature]"
                ]
            }
        },
        "get_cache_file": {
            "name": "get_cache_file",
            "location": 6614,
            "return": [
                "Path"
            ],
            "arguments": {
                "mode": [
                    "Mode"
                ]
            }
        },
        "read_cache": {
            "name": "read_cache",
            "location": 6618,
            "return": [
                "Cache"
            ],
            "arguments": {
                "mode": [
                    "Mode"
                ]
            }
        },
        "get_cache_info": {
            "name": "get_cache_info",
            "location": 6636,
            "return": [
                "CacheInfo"
            ],
            "arguments": {
                "path": [
                    "Path"
                ]
            }
        },
        "filter_cached": {
            "name": "filter_cached",
            "location": 6642,
            "return": [
                "Tuple[(Set[Path], Set[Path])]"
            ],
            "arguments": {
                "cache": [
                    "Cache"
                ],
                "sources": [
                    "Iterable[Path]"
                ]
            }
        },
        "write_cache": {
            "name": "write_cache",
            "location": 6658,
            "return": [
                "None"
            ],
            "arguments": {
                "cache": [
                    "Cache"
                ],
                "sources": [
                    "Iterable[Path]"
                ],
                "mode": [
                    "Mode"
                ]
            }
        },
        "patch_click": {
            "name": "patch_click",
            "location": 6671,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "patched_main": {
            "name": "patched_main",
            "location": 6693,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "is_docstring": {
            "name": "is_docstring",
            "location": 6699,
            "return": [
                "bool"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "fix_docstring": {
            "name": "fix_docstring",
            "location": 6719,
            "return": [
                "str"
            ],
            "arguments": {
                "docstring": [
                    "str"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "Ok.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T@@"
                ]
            }
        },
        "Ok.ok": {
            "name": "ok",
            "location": 125,
            "return": [
                "T@@"
            ],
            "arguments": {
                "self": []
            }
        },
        "Err.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "E@@Exception@@"
                ]
            }
        },
        "Err.err": {
            "name": "err",
            "location": 133,
            "return": [
                "E@@Exception@@"
            ],
            "arguments": {
                "self": []
            }
        },
        "WriteBack.from_configuration": {
            "name": "from_configuration",
            "location": 153,
            "return": [
                "'WriteBack'"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TargetVersion.is_python2": {
            "name": "is_python2",
            "location": 180,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringNormalization.from_configuration": {
            "name": "from_configuration",
            "location": 246,
            "return": [
                "Optional['StringNormalization']"
            ],
            "arguments": {
                "cls": [],
                "string_normalization": [
                    "str"
                ]
            }
        },
        "StringNormalization.to_configuration": {
            "name": "to_configuration",
            "location": 259,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "string_normalization": [
                    "Optional['StringNormalization']"
                ]
            }
        },
        "StringNormalization.to_quote": {
            "name": "to_quote",
            "location": 272,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "string_normalization": [
                    "'StringNormalization'"
                ]
            }
        },
        "StringNormalization.invert": {
            "name": "invert",
            "location": 281,
            "return": [
                "'StringNormalization'"
            ],
            "arguments": {
                "cls": [],
                "string_normalization": [
                    "'StringNormalization'"
                ]
            }
        },
        "Mode.get_cache_key": {
            "name": "get_cache_key",
            "location": 301,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Visitor.visit": {
            "name": "visit",
            "location": 1171,
            "return": [
                "Iterator[T]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "LN"
                ]
            }
        },
        "Visitor.visit_default": {
            "name": "visit_default",
            "location": 1195,
            "return": [
                "Iterator[T]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "LN"
                ]
            }
        },
        "DebugVisitor.visit_default": {
            "name": "visit_default",
            "location": 1206,
            "return": [
                "Iterator[T]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "LN"
                ]
            }
        },
        "DebugVisitor.show": {
            "name": "show",
            "location": 1227,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "code": [
                    "Union[(str, Leaf, Node)]"
                ]
            }
        },
        "BracketTracker.mark": {
            "name": "mark",
            "location": 1362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "BracketTracker.any_open_brackets": {
            "name": "any_open_brackets",
            "location": 1406,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BracketTracker.max_delimiter_priority": {
            "name": "max_delimiter_priority",
            "location": 1410,
            "return": [
                "Priority"
            ],
            "arguments": {
                "self": [],
                "exclude": [
                    "Iterable[LeafID]"
                ]
            }
        },
        "BracketTracker.delimiter_count_with_priority": {
            "name": "delimiter_count_with_priority",
            "location": 1418,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "priority": [
                    "Priority"
                ]
            }
        },
        "BracketTracker.maybe_increment_for_loop_variable": {
            "name": "maybe_increment_for_loop_variable",
            "location": 1429,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "BracketTracker.maybe_decrement_after_for_loop_variable": {
            "name": "maybe_decrement_after_for_loop_variable",
            "location": 1442,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "BracketTracker.maybe_increment_lambda_arguments": {
            "name": "maybe_increment_lambda_arguments",
            "location": 1456,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "BracketTracker.maybe_decrement_after_lambda_arguments": {
            "name": "maybe_decrement_after_lambda_arguments",
            "location": 1469,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "BracketTracker.get_open_lsqb": {
            "name": "get_open_lsqb",
            "location": 1482,
            "return": [
                "Optional[Leaf]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.append": {
            "name": "append",
            "location": 1499,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "leaf": [
                    "Leaf"
                ],
                "preformatted": [
                    "bool"
                ]
            }
        },
        "Line.append_safe": {
            "name": "append_safe",
            "location": 1528,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "leaf": [
                    "Leaf"
                ],
                "preformatted": [
                    "bool"
                ]
            }
        },
        "Line.is_comment": {
            "name": "is_comment",
            "location": 1546,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.is_decorator": {
            "name": "is_decorator",
            "location": 1551,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.is_import": {
            "name": "is_import",
            "location": 1556,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.is_class": {
            "name": "is_class",
            "location": 1561,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.is_stub_class": {
            "name": "is_stub_class",
            "location": 1570,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.is_def": {
            "name": "is_def",
            "location": 1577,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.is_class_paren_empty": {
            "name": "is_class_paren_empty",
            "location": 1596,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.is_triple_quoted_string": {
            "name": "is_triple_quoted_string",
            "location": 1612,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.contains_standalone_comments": {
            "name": "contains_standalone_comments",
            "location": 1620,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "depth_limit": [
                    "int"
                ]
            }
        },
        "Line.contains_uncollapsable_type_comments": {
            "name": "contains_uncollapsable_type_comments",
            "location": 1628,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.contains_unsplittable_type_ignore": {
            "name": "contains_unsplittable_type_ignore",
            "location": 1664,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.contains_multiline_strings": {
            "name": "contains_multiline_strings",
            "location": 1697,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.maybe_should_explode": {
            "name": "maybe_should_explode",
            "location": 1700,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "closing": [
                    "Leaf"
                ]
            }
        },
        "Line.append_comment": {
            "name": "append_comment",
            "location": 1723,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "comment": [
                    "Leaf"
                ]
            }
        },
        "Line.comments_after": {
            "name": "comments_after",
            "location": 1760,
            "return": [
                "List[Leaf]"
            ],
            "arguments": {
                "self": [],
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "Line.remove_trailing_comma": {
            "name": "remove_trailing_comma",
            "location": 1764,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.is_complex_subscript": {
            "name": "is_complex_subscript",
            "location": 1772,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "Line.clone": {
            "name": "clone",
            "location": 1790,
            "return": [
                "'Line'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.__str__": {
            "name": "__str__",
            "location": 1797,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.__bool__": {
            "name": "__bool__",
            "location": 1813,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmptyLineTracker.maybe_empty_lines": {
            "name": "maybe_empty_lines",
            "location": 1834,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": [],
                "current_line": [
                    "Line"
                ]
            }
        },
        "EmptyLineTracker._maybe_empty_lines": {
            "name": "_maybe_empty_lines",
            "location": 1852,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": [],
                "current_line": [
                    "Line"
                ]
            }
        },
        "EmptyLineTracker._maybe_empty_lines_for_class_or_def": {
            "name": "_maybe_empty_lines_for_class_or_def",
            "location": 1893,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": [],
                "current_line": [
                    "Line"
                ],
                "before": [
                    "int"
                ]
            }
        },
        "LineGenerator.line": {
            "name": "line",
            "location": 1951,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "self": [],
                "indent": [
                    "int"
                ]
            }
        },
        "LineGenerator.visit_default": {
            "name": "visit_default",
            "location": 1967,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "LN"
                ]
            }
        },
        "LineGenerator.visit_INDENT": {
            "name": "visit_INDENT",
            "location": 1997,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Leaf"
                ]
            }
        },
        "LineGenerator.visit_DEDENT": {
            "name": "visit_DEDENT",
            "location": 2003,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Leaf"
                ]
            }
        },
        "LineGenerator.visit_stmt": {
            "name": "visit_stmt",
            "location": 2017,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Node"
                ],
                "keywords": [
                    "Set[str]"
                ],
                "parens": [
                    "Set[str]"
                ]
            }
        },
        "LineGenerator.visit_suite": {
            "name": "visit_suite",
            "location": 2038,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Node"
                ]
            }
        },
        "LineGenerator.visit_simple_stmt": {
            "name": "visit_simple_stmt",
            "location": 2045,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Node"
                ]
            }
        },
        "LineGenerator.visit_async_stmt": {
            "name": "visit_async_stmt",
            "location": 2061,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Node"
                ]
            }
        },
        "LineGenerator.visit_decorators": {
            "name": "visit_decorators",
            "location": 2076,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Node"
                ]
            }
        },
        "LineGenerator.visit_SEMI": {
            "name": "visit_SEMI",
            "location": 2082,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "self": [],
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "LineGenerator.visit_ENDMARKER": {
            "name": "visit_ENDMARKER",
            "location": 2086,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "self": [],
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "LineGenerator.visit_STANDALONE_COMMENT": {
            "name": "visit_STANDALONE_COMMENT",
            "location": 2091,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "self": [],
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "LineGenerator.visit_factor": {
            "name": "visit_factor",
            "location": 2096,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Node"
                ]
            }
        },
        "LineGenerator.visit_STRING": {
            "name": "visit_STRING",
            "location": 2113,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "self": [],
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "LineGenerator.__post_init__": {
            "name": "__post_init__",
            "location": 2133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "transform_line.init_st": {
            "name": "init_st",
            "location": 2689,
            "return": [
                "StringTransformer"
            ],
            "arguments": {
                "ST": [
                    "Type[StringTransformer]"
                ]
            }
        },
        "StringTransformer.do_match": {
            "name": "do_match",
            "location": 2818,
            "return": [
                "TMatchResult"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "Line"
                ]
            }
        },
        "StringTransformer.do_transform": {
            "name": "do_transform",
            "location": 2828,
            "return": [
                "Iterator[TResult[Line]]"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "Line"
                ],
                "string_idx": [
                    "int"
                ]
            }
        },
        "StringTransformer.__call__": {
            "name": "__call__",
            "location": 2846,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "Line"
                ],
                "_features": [
                    "Collection[Feature]"
                ]
            }
        },
        "CustomSplitMapMixin._get_key": {
            "name": "_get_key",
            "location": 2918,
            "return": [
                "'CustomSplitMapMixin._Key'"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "CustomSplitMapMixin.add_custom_splits": {
            "name": "add_custom_splits",
            "location": 2926,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ],
                "custom_splits": [
                    "Iterable[CustomSplit]"
                ]
            }
        },
        "CustomSplitMapMixin.pop_custom_splits": {
            "name": "pop_custom_splits",
            "location": 2937,
            "return": [
                "List[CustomSplit]"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ]
            }
        },
        "CustomSplitMapMixin.has_custom_splits": {
            "name": "has_custom_splits",
            "location": 2957,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ]
            }
        },
        "StringMerger.do_match": {
            "name": "do_match",
            "location": 2989,
            "return": [
                "TMatchResult"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "Line"
                ]
            }
        },
        "StringMerger.do_transform": {
            "name": "do_transform",
            "location": 3007,
            "return": [
                "Iterator[TResult[Line]]"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "Line"
                ],
                "string_idx": [
                    "int"
                ]
            }
        },
        "StringMerger.__remove_backslash_line_continuation_chars": {
            "name": "__remove_backslash_line_continuation_chars",
            "location": 3035,
            "return": [
                "TResult[Line]"
            ],
            "arguments": {
                "line": [
                    "Line"
                ],
                "string_idx": [
                    "int"
                ]
            }
        },
        "StringMerger.__merge_string_group": {
            "name": "__merge_string_group",
            "location": 3070,
            "return": [
                "TResult[Line]"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "Line"
                ],
                "string_idx": [
                    "int"
                ]
            }
        },
        "StringMerger.__validate_msg": {
            "name": "__validate_msg",
            "location": 3214,
            "return": [
                "TResult[None]"
            ],
            "arguments": {
                "line": [
                    "Line"
                ],
                "string_idx": [
                    "int"
                ]
            }
        },
        "StringParenStripper.do_match": {
            "name": "do_match",
            "location": 3293,
            "return": [
                "TMatchResult"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "Line"
                ]
            }
        },
        "StringParenStripper.do_transform": {
            "name": "do_transform",
            "location": 3376,
            "return": [
                "Iterator[TResult[Line]]"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "Line"
                ],
                "string_idx": [
                    "int"
                ]
            }
        },
        "BaseStringSplitter.do_splitter_match": {
            "name": "do_splitter_match",
            "location": 3429,
            "return": [
                "TMatchResult"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "Line"
                ]
            }
        },
        "BaseStringSplitter.do_match": {
            "name": "do_match",
            "location": 3439,
            "return": [
                "TMatchResult"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "Line"
                ]
            }
        },
        "BaseStringSplitter.__validate": {
            "name": "__validate",
            "location": 3451,
            "return": [
                "TResult[None]"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "Line"
                ],
                "string_idx": [
                    "int"
                ]
            }
        },
        "BaseStringSplitter.__get_max_string_length": {
            "name": "__get_max_string_length",
            "location": 3494,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "Line"
                ],
                "string_idx": [
                    "int"
                ]
            }
        },
        "StringSplitter.do_splitter_match": {
            "name": "do_splitter_match",
            "location": 3650,
            "return": [
                "TMatchResult"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "Line"
                ]
            }
        },
        "StringSplitter.do_transform": {
            "name": "do_transform",
            "location": 3689,
            "return": [
                "Iterator[TResult[Line]]"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "Line"
                ],
                "string_idx": [
                    "int"
                ]
            }
        },
        "StringSplitter.__get_break_idx": {
            "name": "__get_break_idx",
            "location": 3890,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ],
                "max_break_idx": [
                    "int"
                ]
            }
        },
        "StringSplitter.__maybe_normalize_string_quotes": {
            "name": "__maybe_normalize_string_quotes",
            "location": 3987,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "StringSplitter.__normalize_f_string": {
            "name": "__normalize_f_string",
            "location": 3991,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "StringParenWrapper.do_splitter_match": {
            "name": "do_splitter_match",
            "location": 4068,
            "return": [
                "TMatchResult"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "Line"
                ]
            }
        },
        "StringParenWrapper._return_match": {
            "name": "_return_match",
            "location": 4098,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "LL": [
                    "List[Leaf]"
                ]
            }
        },
        "StringParenWrapper._else_match": {
            "name": "_else_match",
            "location": 4123,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "LL": [
                    "List[Leaf]"
                ]
            }
        },
        "StringParenWrapper._assert_match": {
            "name": "_assert_match",
            "location": 4150,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "LL": [
                    "List[Leaf]"
                ]
            }
        },
        "StringParenWrapper._assign_match": {
            "name": "_assign_match",
            "location": 4185,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "LL": [
                    "List[Leaf]"
                ]
            }
        },
        "StringParenWrapper._dict_match": {
            "name": "_dict_match",
            "location": 4232,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "LL": [
                    "List[Leaf]"
                ]
            }
        },
        "StringParenWrapper.do_transform": {
            "name": "do_transform",
            "location": 4269,
            "return": [
                "Iterator[TResult[Line]]"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "Line"
                ],
                "string_idx": [
                    "int"
                ]
            }
        },
        "StringParser.__init__": {
            "name": "__init__",
            "location": 4433,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringParser.parse": {
            "name": "parse",
            "location": 4437,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "leaves": [
                    "List[Leaf]"
                ],
                "string_idx": [
                    "int"
                ]
            }
        },
        "StringParser._next_state": {
            "name": "_next_state",
            "location": 4455,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "insert_str_child_factory.insert_str_child": {
            "name": "insert_str_child",
            "location": 4579,
            "return": [
                "None"
            ],
            "arguments": {
                "child": [
                    "LN"
                ]
            }
        },
        "is_valid_index_factory.is_valid_index": {
            "name": "is_valid_index",
            "location": 4641,
            "return": [
                "bool"
            ],
            "arguments": {
                "idx": [
                    "int"
                ]
            }
        },
        "dont_increase_indentation.split_wrapper": {
            "name": "split_wrapper",
            "location": 4953,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "line": [
                    "Line"
                ],
                "features": [
                    "Collection[Feature]"
                ]
            }
        },
        "delimiter_split.append_to_line": {
            "name": "append_to_line",
            "location": 4987,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "standalone_comment_split.append_to_line": {
            "name": "append_to_line",
            "location": 5042,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "get_future_imports.get_imports_from_children": {
            "name": "get_imports_from_children",
            "location": 5859,
            "return": [
                "Generator[(str, None, None)]"
            ],
            "arguments": {
                "children": [
                    "List[LN]"
                ]
            }
        },
        "Report.done": {
            "name": "done",
            "location": 6051,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "Path"
                ],
                "changed": [
                    "Changed"
                ]
            }
        },
        "Report.failed": {
            "name": "failed",
            "location": 6067,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "Path"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "Report.path_ignored": {
            "name": "path_ignored",
            "location": 6072,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Path"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "Report.return_code": {
            "name": "return_code",
            "location": 6077,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Report.__str__": {
            "name": "__str__",
            "location": 6095,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringMerger.__merge_string_group.make_naked": {
            "name": "make_naked",
            "location": 3101,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "string_prefix": [
                    "str"
                ]
            }
        },
        "StringSplitter.do_transform.line_needs_plus": {
            "name": "line_needs_plus",
            "location": 3710,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "StringSplitter.do_transform.maybe_append_plus": {
            "name": "maybe_append_plus",
            "location": 3713,
            "return": [
                "None"
            ],
            "arguments": {
                "new_line": [
                    "Line"
                ]
            }
        },
        "StringSplitter.do_transform.max_last_string": {
            "name": "max_last_string",
            "location": 3730,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "StringSplitter.do_transform.more_splits_should_be_made": {
            "name": "more_splits_should_be_made",
            "location": 3769,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "StringSplitter.__get_break_idx.fexpr_slices": {
            "name": "fexpr_slices",
            "location": 3921,
            "return": [
                "Iterator[Tuple[(Index, Index)]]"
            ],
            "arguments": {}
        },
        "StringSplitter.__get_break_idx.breaks_fstring_expression": {
            "name": "breaks_fstring_expression",
            "location": 3939,
            "return": [
                "bool"
            ],
            "arguments": {
                "i": [
                    "Index"
                ]
            }
        },
        "StringSplitter.__get_break_idx.passes_all_checks": {
            "name": "passes_all_checks",
            "location": 3954,
            "return": [
                "bool"
            ],
            "arguments": {
                "i": [
                    "Index"
                ]
            }
        },
        "transform_line.rhs": {
            "name": "rhs",
            "location": 2717,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "line": [
                    "Line"
                ],
                "features": [
                    "Collection[Feature]"
                ]
            }
        }
    },
    "lavender-main/src/lavender/__main__.py": {},
    "lavender-main/src/lavenderd/__init__.py": {
        "main": {
            "name": "main",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "bind_host": [
                    "str"
                ],
                "bind_port": [
                    "int"
                ]
            }
        },
        "make_app": {
            "name": "make_app",
            "location": 60,
            "return": [
                "web.Application"
            ],
            "arguments": {}
        },
        "parse_python_variant_header": {
            "name": "parse_python_variant_header",
            "location": 162,
            "return": [
                "Tuple[(bool, Set[lavender.TargetVersion])]"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "patched_main": {
            "name": "patched_main",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lavender-main/src/llib2to3/pygram.py": {
        "initialize": {
            "name": "initialize",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "cache_dir": [
                    "Union[(str, 'os.PathLike[str]', None)]"
                ]
            }
        },
        "Symbols.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grammar": [
                    "Grammar"
                ]
            }
        }
    },
    "lavender-main/src/llib2to3/pytree.py": {
        "type_repr": {
            "name": "type_repr",
            "location": 42,
            "return": [
                "Union[(Text, int)]"
            ],
            "arguments": {
                "type_num": [
                    "int"
                ]
            }
        },
        "convert": {
            "name": "convert",
            "location": 478,
            "return": [
                "NL"
            ],
            "arguments": {
                "gr": [
                    "Grammar"
                ],
                "raw_node": [
                    "RawNode"
                ]
            }
        },
        "generate_matches": {
            "name": "generate_matches",
            "location": 951,
            "return": [
                "Iterator[Tuple[(int, _Results)]]"
            ],
            "arguments": {
                "patterns": [
                    "List[BasePattern]"
                ],
                "nodes": [
                    "List[NL]"
                ]
            }
        },
        "Base.__new__": {
            "name": "__new__",
            "location": 81,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Base.__eq__": {
            "name": "__eq__",
            "location": 86,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Base.prefix": {
            "name": "prefix",
            "location": 99,
            "return": [
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base._eq": {
            "name": "_eq",
            "location": 102,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [
                    "_P@@"
                ],
                "other": [
                    "_P@@"
                ]
            }
        },
        "Base.clone": {
            "name": "clone",
            "location": 113,
            "return": [
                "_P@@"
            ],
            "arguments": {
                "self": [
                    "_P@@"
                ]
            }
        },
        "Base.post_order": {
            "name": "post_order",
            "location": 121,
            "return": [
                "Iterator[NL]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.pre_order": {
            "name": "pre_order",
            "location": 129,
            "return": [
                "Iterator[NL]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.replace": {
            "name": "replace",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new": [
                    "Union[(NL, List[NL])]"
                ]
            }
        },
        "Base.get_lineno": {
            "name": "get_lineno",
            "location": 161,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.changed": {
            "name": "changed",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.remove": {
            "name": "remove",
            "location": 177,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.next_sibling": {
            "name": "next_sibling",
            "location": 193,
            "return": [
                "Optional[NL]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.prev_sibling": {
            "name": "prev_sibling",
            "location": 207,
            "return": [
                "Optional[NL]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.leaves": {
            "name": "leaves",
            "location": 220,
            "return": [
                "Iterator['Leaf']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.depth": {
            "name": "depth",
            "location": 224,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.get_suffix": {
            "name": "get_suffix",
            "location": 229,
            "return": [
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "int"
                ],
                "children": [
                    "List[NL]"
                ],
                "context": [
                    "Optional[Any]"
                ],
                "prefix": [
                    "Optional[Text]"
                ],
                "fixers_applied": [
                    "Optional[List[Any]]"
                ]
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 278,
            "return": [
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__str__": {
            "name": "__str__",
            "location": 287,
            "return": [
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node._eq": {
            "name": "_eq",
            "location": 295,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Node.clone": {
            "name": "clone",
            "location": 299,
            "return": [
                "'Node'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.post_order": {
            "name": "post_order",
            "location": 308,
            "return": [
                "Iterator[NL]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.pre_order": {
            "name": "pre_order",
            "location": 314,
            "return": [
                "Iterator[NL]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.prefix": {
            "name": "prefix",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": []
            }
        },
        "Node.set_child": {
            "name": "set_child",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int"
                ],
                "child": [
                    "NL"
                ]
            }
        },
        "Node.insert_child": {
            "name": "insert_child",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int"
                ],
                "child": [
                    "NL"
                ]
            }
        },
        "Node.append_child": {
            "name": "append_child",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "NL"
                ]
            }
        },
        "Node.invalidate_sibling_maps": {
            "name": "invalidate_sibling_maps",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.update_sibling_maps": {
            "name": "update_sibling_maps",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Leaf.__init__": {
            "name": "__init__",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "int"
                ],
                "value": [
                    "Text"
                ],
                "context": [
                    "Optional[Context]"
                ],
                "prefix": [
                    "Optional[Text]"
                ],
                "fixers_applied": [
                    "List[Any]"
                ]
            }
        },
        "Leaf.__repr__": {
            "name": "__repr__",
            "location": 421,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Leaf.__str__": {
            "name": "__str__",
            "location": 432,
            "return": [
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Leaf._eq": {
            "name": "_eq",
            "location": 440,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Leaf.clone": {
            "name": "clone",
            "location": 444,
            "return": [
                "'Leaf'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Leaf.leaves": {
            "name": "leaves",
            "location": 454,
            "return": [
                "Iterator['Leaf']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Leaf.post_order": {
            "name": "post_order",
            "location": 457,
            "return": [
                "Iterator['Leaf']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Leaf.pre_order": {
            "name": "pre_order",
            "location": 461,
            "return": [
                "Iterator['Leaf']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Leaf.prefix": {
            "name": "prefix",
            "location": 473,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": []
            }
        },
        "BasePattern.__new__": {
            "name": "__new__",
            "location": 523,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "BasePattern.__repr__": {
            "name": "__repr__",
            "location": 528,
            "return": [
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePattern._submatch": {
            "name": "_submatch",
            "location": 535,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "results": []
            }
        },
        "BasePattern.optimize": {
            "name": "optimize",
            "location": 538,
            "return": [
                "'BasePattern'"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePattern.match": {
            "name": "match",
            "location": 546,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "NL"
                ],
                "results": [
                    "Optional[_Results]"
                ]
            }
        },
        "BasePattern.match_seq": {
            "name": "match_seq",
            "location": 572,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "List[NL]"
                ],
                "results": [
                    "Optional[_Results]"
                ]
            }
        },
        "BasePattern.generate_matches": {
            "name": "generate_matches",
            "location": 582,
            "return": [
                "Iterator[Tuple[(int, _Results)]]"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "List[NL]"
                ]
            }
        },
        "LeafPattern.__init__": {
            "name": "__init__",
            "location": 594,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Optional[int]"
                ],
                "content": [
                    "Optional[Text]"
                ],
                "name": [
                    "Optional[Text]"
                ]
            }
        },
        "LeafPattern.match": {
            "name": "match",
            "location": 619,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "NL"
                ],
                "results": []
            }
        },
        "LeafPattern._submatch": {
            "name": "_submatch",
            "location": 625,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "results": []
            }
        },
        "NodePattern.__init__": {
            "name": "__init__",
            "location": 645,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Optional[int]"
                ],
                "content": [
                    "Optional[Iterable[Text]]"
                ],
                "name": [
                    "Optional[Text]"
                ]
            }
        },
        "NodePattern._submatch": {
            "name": "_submatch",
            "location": 679,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "results": []
            }
        },
        "WildcardPattern.__init__": {
            "name": "__init__",
            "location": 724,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "Optional[Text]"
                ],
                "min": [
                    "int"
                ],
                "max": [
                    "int"
                ],
                "name": [
                    "Optional[Text]"
                ]
            }
        },
        "WildcardPattern.optimize": {
            "name": "optimize",
            "location": 768,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "WildcardPattern.match": {
            "name": "match",
            "location": 796,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "results": []
            }
        },
        "WildcardPattern.match_seq": {
            "name": "match_seq",
            "location": 800,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "nodes": [],
                "results": []
            }
        },
        "WildcardPattern.generate_matches": {
            "name": "generate_matches",
            "location": 811,
            "return": [
                "Iterator[Tuple[(int, _Results)]]"
            ],
            "arguments": {
                "self": [],
                "nodes": []
            }
        },
        "WildcardPattern._iterative_matches": {
            "name": "_iterative_matches",
            "location": 856,
            "return": [
                "Iterator[Tuple[(int, _Results)]]"
            ],
            "arguments": {
                "self": [],
                "nodes": []
            }
        },
        "WildcardPattern._bare_name_matches": {
            "name": "_bare_name_matches",
            "location": 885,
            "return": [
                "Tuple[(int, _Results)]"
            ],
            "arguments": {
                "self": [],
                "nodes": []
            }
        },
        "WildcardPattern._recursive_matches": {
            "name": "_recursive_matches",
            "location": 902,
            "return": [
                "Iterator[Tuple[(int, _Results)]]"
            ],
            "arguments": {
                "self": [],
                "nodes": [],
                "count": []
            }
        },
        "NegatedPattern.__init__": {
            "name": "__init__",
            "location": 918,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "Optional[Any]"
                ]
            }
        },
        "NegatedPattern.match": {
            "name": "match",
            "location": 931,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "results": []
            }
        },
        "NegatedPattern.match_seq": {
            "name": "match_seq",
            "location": 935,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "nodes": [],
                "results": []
            }
        },
        "NegatedPattern.generate_matches": {
            "name": "generate_matches",
            "location": 939,
            "return": [
                "Iterator[Tuple[(int, _Results)]]"
            ],
            "arguments": {
                "self": [],
                "nodes": []
            }
        }
    },
    "lavender-main/src/llib2to3/__init__.py": {},
    "lavender-main/src/llib2to3/pgen2/conv.py": {
        "Converter.run": {
            "name": "run",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "graminit_h": [],
                "graminit_c": []
            }
        },
        "Converter.parse_graminit_h": {
            "name": "parse_graminit_h",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "Converter.parse_graminit_c": {
            "name": "parse_graminit_c",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "Converter.finish_off": {
            "name": "finish_off",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lavender-main/src/llib2to3/pgen2/driver.py": {
        "_generate_pickle_name": {
            "name": "_generate_pickle_name",
            "location": 172,
            "return": [
                "Text"
            ],
            "arguments": {
                "gt": [
                    "Path"
                ],
                "cache_dir": [
                    "Optional[Path]"
                ]
            }
        },
        "load_grammar": {
            "name": "load_grammar",
            "location": 183,
            "return": [
                "Grammar"
            ],
            "arguments": {
                "gt": [
                    "Text"
                ],
                "gp": [
                    "Optional[Text]"
                ],
                "save": [
                    "bool"
                ],
                "force": [
                    "bool"
                ],
                "logger": [
                    "Optional[Logger]"
                ]
            }
        },
        "_newer": {
            "name": "_newer",
            "location": 209,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "Text"
                ],
                "b": [
                    "Text"
                ]
            }
        },
        "load_packaged_grammar": {
            "name": "load_packaged_grammar",
            "location": 218,
            "return": [
                "grammar.Grammar"
            ],
            "arguments": {
                "package": [
                    "str"
                ],
                "grammar_source": [
                    "Text"
                ],
                "cache_dir": [
                    "Optional[Path]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 242,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "Driver.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grammar": [
                    "Grammar"
                ],
                "convert": [
                    "Optional[_Convert]"
                ],
                "logger": [
                    "Optional[Logger]"
                ]
            }
        },
        "Driver.parse_tokens": {
            "name": "parse_tokens",
            "location": 60,
            "return": [
                "NL"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "Iterable[Any]"
                ],
                "debug": [
                    "bool"
                ]
            }
        },
        "Driver.parse_stream_raw": {
            "name": "parse_stream_raw",
            "location": 121,
            "return": [
                "NL"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "IO[Text]"
                ],
                "debug": [
                    "bool"
                ]
            }
        },
        "Driver.parse_stream": {
            "name": "parse_stream",
            "location": 126,
            "return": [
                "NL"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "IO[Text]"
                ],
                "debug": [
                    "bool"
                ]
            }
        },
        "Driver.parse_file": {
            "name": "parse_file",
            "location": 130,
            "return": [
                "NL"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "Path"
                ],
                "encoding": [
                    "Optional[Text]"
                ],
                "debug": [
                    "bool"
                ]
            }
        },
        "Driver.parse_string": {
            "name": "parse_string",
            "location": 137,
            "return": [
                "NL"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "Text"
                ],
                "debug": [
                    "bool"
                ]
            }
        },
        "Driver._partially_consume_prefix": {
            "name": "_partially_consume_prefix",
            "location": 144,
            "return": [
                "Tuple[(Text, Text)]"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "Text"
                ],
                "column": [
                    "int"
                ]
            }
        }
    },
    "lavender-main/src/llib2to3/pgen2/grammar.py": {
        "Grammar.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grammar.dump": {
            "name": "dump",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "Path"
                ]
            }
        },
        "Grammar._update": {
            "name": "_update",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Grammar.load": {
            "name": "load",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "Path"
                ]
            }
        },
        "Grammar.loads": {
            "name": "loads",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pkl": [
                    "bytes"
                ]
            }
        },
        "Grammar.copy": {
            "name": "copy",
            "location": 129,
            "return": [
                "_P@@Grammar@@"
            ],
            "arguments": {
                "self": [
                    "_P@@Grammar@@"
                ]
            }
        },
        "Grammar.report": {
            "name": "report",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lavender-main/src/llib2to3/pgen2/literals.py": {
        "escape": {
            "name": "escape",
            "location": 25,
            "return": [
                "Text"
            ],
            "arguments": {
                "m": [
                    "Match[Text]"
                ]
            }
        },
        "evalString": {
            "name": "evalString",
            "location": 47,
            "return": [
                "Text"
            ],
            "arguments": {
                "s": [
                    "Text"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lavender-main/src/llib2to3/pgen2/parse.py": {
        "lam_sub": {
            "name": "lam_sub",
            "location": 37,
            "return": [
                "NL"
            ],
            "arguments": {
                "grammar": [
                    "Grammar"
                ],
                "node": [
                    "RawNode"
                ]
            }
        },
        "ParseError.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "Text"
                ],
                "type": [
                    "Optional[int]"
                ],
                "value": [
                    "Optional[Text]"
                ],
                "context": [
                    "Context"
                ]
            }
        },
        "Parser.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grammar": [
                    "Grammar"
                ],
                "convert": [
                    "Optional[Convert]"
                ]
            }
        },
        "Parser.setup": {
            "name": "setup",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Optional[int]"
                ]
            }
        },
        "Parser.addtoken": {
            "name": "addtoken",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "int"
                ],
                "value": [
                    "Optional[Text]"
                ],
                "context": [
                    "Context"
                ]
            }
        },
        "Parser.classify": {
            "name": "classify",
            "location": 190,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "int"
                ],
                "value": [
                    "Optional[Text]"
                ],
                "context": [
                    "Context"
                ]
            }
        },
        "Parser.shift": {
            "name": "shift",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "int"
                ],
                "value": [
                    "Optional[Text]"
                ],
                "newstate": [
                    "int"
                ],
                "context": [
                    "Context"
                ]
            }
        },
        "Parser.push": {
            "name": "push",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "int"
                ],
                "newdfa": [
                    "DFAS"
                ],
                "newstate": [
                    "int"
                ],
                "context": [
                    "Context"
                ]
            }
        },
        "Parser.pop": {
            "name": "pop",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lavender-main/src/llib2to3/pgen2/pgen.py": {
        "generate_grammar": {
            "name": "generate_grammar",
            "location": 427,
            "return": [
                "PgenGrammar"
            ],
            "arguments": {
                "filename": [
                    "Path"
                ]
            }
        },
        "ParserGenerator.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "Path"
                ],
                "stream": [
                    "Optional[IO[Text]]"
                ]
            }
        },
        "ParserGenerator.make_grammar": {
            "name": "make_grammar",
            "location": 55,
            "return": [
                "PgenGrammar"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.make_first": {
            "name": "make_first",
            "location": 80,
            "return": [
                "Dict[(int, int)]"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "PgenGrammar"
                ],
                "name": [
                    "Text"
                ]
            }
        },
        "ParserGenerator.make_label": {
            "name": "make_label",
            "location": 90,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "PgenGrammar"
                ],
                "label": [
                    "Text"
                ]
            }
        },
        "ParserGenerator.addfirstsets": {
            "name": "addfirstsets",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.calcfirst": {
            "name": "calcfirst",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Text"
                ]
            }
        },
        "ParserGenerator.parse": {
            "name": "parse",
            "location": 176,
            "return": [
                "Tuple[(Dict[(Text, List['DFAState'])], Text)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.make_dfa": {
            "name": "make_dfa",
            "location": 201,
            "return": [
                "List['DFAState']"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "'NFAState'"
                ],
                "finish": [
                    "'NFAState'"
                ]
            }
        },
        "ParserGenerator.dump_nfa": {
            "name": "dump_nfa",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Text"
                ],
                "start": [
                    "'NFAState'"
                ],
                "finish": [
                    "'NFAState'"
                ]
            }
        },
        "ParserGenerator.dump_dfa": {
            "name": "dump_dfa",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Text"
                ],
                "dfa": [
                    "Sequence['DFAState']"
                ]
            }
        },
        "ParserGenerator.simplify_dfa": {
            "name": "simplify_dfa",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dfa": [
                    "List['DFAState']"
                ]
            }
        },
        "ParserGenerator.parse_rhs": {
            "name": "parse_rhs",
            "location": 284,
            "return": [
                "Tuple[('NFAState', 'NFAState')]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.parse_alt": {
            "name": "parse_alt",
            "location": 301,
            "return": [
                "Tuple[('NFAState', 'NFAState')]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.parse_item": {
            "name": "parse_item",
            "location": 310,
            "return": [
                "Tuple[('NFAState', 'NFAState')]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.parse_atom": {
            "name": "parse_atom",
            "location": 330,
            "return": [
                "Tuple[('NFAState', 'NFAState')]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.expect": {
            "name": "expect",
            "location": 349,
            "return": [
                "Text"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "int"
                ],
                "value": [
                    "Optional[Any]"
                ]
            }
        },
        "ParserGenerator.gettoken": {
            "name": "gettoken",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.raise_error": {
            "name": "raise_error",
            "location": 365,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "NFAState.__init__": {
            "name": "__init__",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NFAState.addarc": {
            "name": "addarc",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "next": [
                    "'NFAState'"
                ],
                "label": [
                    "Optional[Text]"
                ]
            }
        },
        "DFAState.__init__": {
            "name": "__init__",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nfaset": [
                    "Dict[(NFAState, Any)]"
                ],
                "final": [
                    "NFAState"
                ]
            }
        },
        "DFAState.addarc": {
            "name": "addarc",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "next": [
                    "'DFAState'"
                ],
                "label": [
                    "Text"
                ]
            }
        },
        "DFAState.unifystate": {
            "name": "unifystate",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "old": [
                    "'DFAState'"
                ],
                "new": [
                    "'DFAState'"
                ]
            }
        },
        "DFAState.__eq__": {
            "name": "__eq__",
            "location": 410,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "ParserGenerator.make_dfa.closure": {
            "name": "closure",
            "location": 209,
            "return": [
                "Dict[(NFAState, int)]"
            ],
            "arguments": {
                "state": [
                    "NFAState"
                ]
            }
        },
        "ParserGenerator.make_dfa.addclosure": {
            "name": "addclosure",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "state": [
                    "NFAState"
                ],
                "base": [
                    "Dict[(NFAState, int)]"
                ]
            }
        }
    },
    "lavender-main/src/llib2to3/pgen2/token.py": {
        "ISTERMINAL": {
            "name": "ISTERMINAL",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "int"
                ]
            }
        },
        "ISNONTERMINAL": {
            "name": "ISNONTERMINAL",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "int"
                ]
            }
        },
        "ISEOF": {
            "name": "ISEOF",
            "location": 88,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "int"
                ]
            }
        }
    },
    "lavender-main/src/llib2to3/pgen2/tokenize.py": {
        "group": {
            "name": "group",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "any": {
            "name": "any",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "maybe": {
            "name": "maybe",
            "location": 70,
            "return": [],
            "arguments": {}
        },
        "_combinations": {
            "name": "_combinations",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "printtoken": {
            "name": "printtoken",
            "location": 184,
            "return": [],
            "arguments": {
                "type": [],
                "token": [],
                "xxx_todo_changeme": [],
                "xxx_todo_changeme1": [],
                "line": []
            }
        },
        "tokenize": {
            "name": "tokenize",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "readline": [
                    "Callable[([], Text)]"
                ],
                "tokeneater": [
                    "TokenEater"
                ]
            }
        },
        "tokenize_loop": {
            "name": "tokenize_loop",
            "location": 216,
            "return": [],
            "arguments": {
                "readline": [],
                "tokeneater": []
            }
        },
        "_get_normal_name": {
            "name": "_get_normal_name",
            "location": 292,
            "return": [
                "str"
            ],
            "arguments": {
                "orig_enc": [
                    "str"
                ]
            }
        },
        "detect_encoding": {
            "name": "detect_encoding",
            "location": 305,
            "return": [
                "Tuple[(str, List[bytes])]"
            ],
            "arguments": {
                "readline": [
                    "Callable[([], bytes)]"
                ]
            }
        },
        "untokenize": {
            "name": "untokenize",
            "location": 380,
            "return": [
                "Text"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[TokenInfo]"
                ]
            }
        },
        "generate_tokens": {
            "name": "generate_tokens",
            "location": 402,
            "return": [
                "Iterator[GoodTokenInfo]"
            ],
            "arguments": {
                "readline": [
                    "Callable[([], Text)]"
                ],
                "grammar": [
                    "Optional[Grammar]"
                ]
            }
        },
        "Untokenizer.__init__": {
            "name": "__init__",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Untokenizer.add_whitespace": {
            "name": "add_whitespace",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Coord"
                ]
            }
        },
        "Untokenizer.untokenize": {
            "name": "untokenize",
            "location": 243,
            "return": [
                "Text"
            ],
            "arguments": {
                "self": [],
                "iterable": [
                    "Iterable[TokenInfo]"
                ]
            }
        },
        "Untokenizer.compat": {
            "name": "compat",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "Tuple[(int, Text)]"
                ],
                "iterable": [
                    "Iterable[TokenInfo]"
                ]
            }
        },
        "detect_encoding.read_or_stop": {
            "name": "read_or_stop",
            "location": 327,
            "return": [
                "bytes"
            ],
            "arguments": {}
        },
        "detect_encoding.find_cookie": {
            "name": "find_cookie",
            "location": 333,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "line": [
                    "bytes"
                ]
            }
        }
    },
    "lavender-main/src/llib2to3/pgen2/__init__.py": {}
}
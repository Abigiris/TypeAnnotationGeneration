{
    "setup.py": {},
    "doc/IceCubeSyncSite.py": {
        "sync_one_dataset": {
            "name": "sync_one_dataset",
            "location": 290,
            "return": [],
            "arguments": {
                "dataset": [],
                "originrse": [],
                "destrse": [],
                "scope": [],
                "check": [],
                "dry_run": [],
                "container": []
            }
        },
        "getDatasetListFromFile": {
            "name": "getDatasetListFromFile",
            "location": 306,
            "return": [],
            "arguments": {
                "datasetFile": []
            }
        },
        "main": {
            "name": "main",
            "location": 312,
            "return": [],
            "arguments": {}
        },
        "RunSync.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "run": [],
                "originrse": [],
                "destrse": [],
                "scope": [],
                "check": [],
                "lifetime": [],
                "dry_run": [],
                "container": []
            }
        },
        "RunSync.update_run_Files": {
            "name": "update_run_Files",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RunSync.get_files_metadata": {
            "name": "get_files_metadata",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RunSync.obtain_metadata": {
            "name": "obtain_metadata",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "RunSync.get_file_url": {
            "name": "get_file_url",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "RunSync.get_global_url": {
            "name": "get_global_url",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RunSync.get_run_Number": {
            "name": "get_run_Number",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RunSync.get_run_Files": {
            "name": "get_run_Files",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RunSync.get_rucio_metadata": {
            "name": "get_rucio_metadata",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RunSync.register": {
            "name": "register",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RunSync.register_container": {
            "name": "register_container",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "container": []
            }
        },
        "RunSync.attach_dataset_to_container": {
            "name": "attach_dataset_to_container",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": [],
                "container": []
            }
        },
        "RunSync.register_dataset": {
            "name": "register_dataset",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "run": []
            }
        },
        "RunSync.register_replicas": {
            "name": "register_replicas",
            "location": 244,
            "return": [],
            "arguments": {
                "self": [],
                "replicas": []
            }
        },
        "RunSync.add_replica_rule": {
            "name": "add_replica_rule",
            "location": 274,
            "return": [],
            "arguments": {
                "self": [],
                "destRSE": [],
                "dataset": []
            }
        }
    },
    "jadetools/AutoFiles2.py": {
        "BearerAuth.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "BearerAuth.__call__": {
            "name": "__call__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "r": []
            }
        },
        "AutoFiles.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "configname": []
            }
        },
        "AutoFiles.getLTAToken": {
            "name": "getLTAToken",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "tokenfilename": []
            }
        },
        "AutoFiles.ReadConfig": {
            "name": "ReadConfig",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "configfilename": []
            }
        },
        "AutoFiles.GetToken": {
            "name": "GetToken",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoFiles.ReleaseToken": {
            "name": "ReleaseToken",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoFiles.CompRight": {
            "name": "CompRight",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "string1": [],
                "string2": []
            }
        },
        "AutoFiles.VetNotOfficialTree": {
            "name": "VetNotOfficialTree",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "logicalDirectoryName": []
            }
        },
        "AutoFiles.compareDirectoryToArchive": {
            "name": "compareDirectoryToArchive",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "directory": []
            }
        },
        "AutoFiles.GetFullDirsDone": {
            "name": "GetFullDirsDone",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoFiles.MatchIdealToRealDir": {
            "name": "MatchIdealToRealDir",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "idealDir": []
            }
        },
        "AutoFiles.GetAllTransfer": {
            "name": "GetAllTransfer",
            "location": 304,
            "return": [],
            "arguments": {
                "self": [],
                "listOfDirectories": []
            }
        },
        "AutoFiles.AreTransfersComplete": {
            "name": "AreTransfersComplete",
            "location": 333,
            "return": [],
            "arguments": {
                "self": [],
                "infoRow": []
            }
        },
        "AutoFiles.DeleteDir": {
            "name": "DeleteDir",
            "location": 380,
            "return": [],
            "arguments": {
                "self": [],
                "realDir": []
            }
        },
        "AutoFiles.FindAndDelete": {
            "name": "FindAndDelete",
            "location": 406,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoFiles.ResetStatus": {
            "name": "ResetStatus",
            "location": 461,
            "return": [],
            "arguments": {
                "self": [],
                "idealDirectory": [],
                "dirkey": []
            }
        }
    },
    "jadetools/checkNERSCOnly.py": {
        "normalizeAnswer": {
            "name": "normalizeAnswer",
            "location": 27,
            "return": [],
            "arguments": {
                "quotaString": []
            }
        },
        "BearerAuth.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "stoken": []
            }
        },
        "BearerAuth.__call__": {
            "name": "__call__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "r": []
            }
        },
        "checkNERSCOnly.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "configname": []
            }
        },
        "checkNERSCOnly.__call__": {
            "name": "__call__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "checkNERSCOnly.getLTAToken": {
            "name": "getLTAToken",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "checkNERSCOnly.checkQuotaNERSC": {
            "name": "checkQuotaNERSC",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "checkNERSCOnly.getQuotaNERSC": {
            "name": "getQuotaNERSC",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "checkNERSCOnly.ReadConfig": {
            "name": "ReadConfig",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "jadetools/coordinate2.py": {
        "coordinate.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "configname": []
            }
        },
        "coordinate.ReadConfig": {
            "name": "ReadConfig",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "configfilename": []
            }
        },
        "coordinate.GetCandidates": {
            "name": "GetCandidates",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "coordinate.Launch": {
            "name": "Launch",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "jadetools/InterfaceLTA.py": {
        "InterfaceLTA.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "config_name": []
            }
        },
        "InterfaceLTA.GetToken": {
            "name": "GetToken",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InterfaceLTA.ReleaseToken": {
            "name": "ReleaseToken",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InterfaceLTA.ReadyToRun": {
            "name": "ReadyToRun",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InterfaceLTA.ParseParams": {
            "name": "ParseParams",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InterfaceLTA.GetNextUnclaimedDirectory": {
            "name": "GetNextUnclaimedDirectory",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InterfaceLTA.SpawnScript": {
            "name": "SpawnScript",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "pair_directory": []
            }
        },
        "InterfaceLTA.CloseDown": {
            "name": "CloseDown",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InterfaceLTA.RunOnce": {
            "name": "RunOnce",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "jadetools/Utils.py": {
        "unslash": {
            "name": "unslash",
            "location": 181,
            "return": [],
            "arguments": {
                "strWithSlashes": []
            }
        },
        "reslash": {
            "name": "reslash",
            "location": 191,
            "return": [],
            "arguments": {
                "strWithoutSlashes": []
            }
        },
        "unmangle": {
            "name": "unmangle",
            "location": 201,
            "return": [],
            "arguments": {
                "strFromPost": []
            }
        },
        "mangle": {
            "name": "mangle",
            "location": 211,
            "return": [],
            "arguments": {
                "strFromPost": []
            }
        },
        "tojsonquotes": {
            "name": "tojsonquotes",
            "location": 222,
            "return": [],
            "arguments": {
                "strFromPost": []
            }
        },
        "fromjsonquotes": {
            "name": "fromjsonquotes",
            "location": 234,
            "return": [],
            "arguments": {
                "strFromPost": []
            }
        },
        "singletodouble": {
            "name": "singletodouble",
            "location": 247,
            "return": [],
            "arguments": {
                "stringTo": []
            }
        },
        "getoutputerrorsimplecommand": {
            "name": "getoutputerrorsimplecommand",
            "location": 258,
            "return": [],
            "arguments": {
                "cmd": [],
                "Timeout": []
            }
        },
        "logit": {
            "name": "logit",
            "location": 291,
            "return": [],
            "arguments": {
                "string1": [],
                "string2": []
            }
        },
        "stringtodict": {
            "name": "stringtodict",
            "location": 306,
            "return": [],
            "arguments": {
                "instring": []
            }
        },
        "massage": {
            "name": "massage",
            "location": 331,
            "return": [],
            "arguments": {
                "answer": []
            }
        },
        "unNone": {
            "name": "unNone",
            "location": 348,
            "return": [],
            "arguments": {
                "u_answer": []
            }
        },
        "globusjson": {
            "name": "globusjson",
            "location": 362,
            "return": [],
            "arguments": {
                "localuuid": [],
                "localdir": [],
                "remotesystem": [],
                "idealdir": []
            }
        },
        "flagBundleStatus": {
            "name": "flagBundleStatus",
            "location": 396,
            "return": [],
            "arguments": {
                "key": [],
                "newstatus": []
            }
        },
        "deltaT": {
            "name": "deltaT",
            "location": 420,
            "return": [],
            "arguments": {
                "oldtimestring": []
            }
        },
        "patchBundle": {
            "name": "patchBundle",
            "location": 446,
            "return": [],
            "arguments": {
                "bundleid": [],
                "columntype": [],
                "newvalue": [],
                "manyok": []
            }
        },
        "AddActiveDir": {
            "name": "AddActiveDir",
            "location": 493,
            "return": [],
            "arguments": {
                "a_dirname": []
            }
        },
        "RemoveActiveDir": {
            "name": "RemoveActiveDir",
            "location": 512,
            "return": [],
            "arguments": {
                "a_dirname": []
            }
        },
        "FindActiveDir": {
            "name": "FindActiveDir",
            "location": 531,
            "return": [],
            "arguments": {
                "a_dirname": []
            }
        },
        "FindBundlesWithDir": {
            "name": "FindBundlesWithDir",
            "location": 550,
            "return": [],
            "arguments": {
                "a_dirname": [],
                "a_status": []
            }
        },
        "RetrieveDesiredTrees": {
            "name": "RetrieveDesiredTrees",
            "location": 584,
            "return": [],
            "arguments": {}
        },
        "GiveTarget": {
            "name": "GiveTarget",
            "location": 607,
            "return": [],
            "arguments": {}
        },
        "NormalName": {
            "name": "NormalName",
            "location": 632,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "TreeComp": {
            "name": "TreeComp",
            "location": 659,
            "return": [],
            "arguments": {
                "tctree": [],
                "tcfile": []
            }
        },
        "IsDirectoryFull": {
            "name": "IsDirectoryFull",
            "location": 682,
            "return": [],
            "arguments": {
                "idirectory": []
            }
        },
        "GetUnhandledFull": {
            "name": "GetUnhandledFull",
            "location": 719,
            "return": [],
            "arguments": {}
        },
        "ParseCleanDirName": {
            "name": "ParseCleanDirName",
            "location": 744,
            "return": [],
            "arguments": {
                "bname": []
            }
        },
        "DumperTodo": {
            "name": "DumperTodo",
            "location": 764,
            "return": [],
            "arguments": {}
        },
        "DumperSetState": {
            "name": "DumperSetState",
            "location": 795,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "DumperSetNext": {
            "name": "DumperSetNext",
            "location": 814,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "UnpackDBReturnJson": {
            "name": "UnpackDBReturnJson",
            "location": 834,
            "return": [],
            "arguments": {
                "estring": []
            }
        },
        "SetPoleDiskStatus": {
            "name": "SetPoleDiskStatus",
            "location": 858,
            "return": [],
            "arguments": {
                "spid": [],
                "sstatus": []
            }
        }
    },
    "lta/bundler.py": {
        "runner": {
            "name": "runner",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Bundler.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[(str, str)]"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "Bundler._do_status": {
            "name": "_do_status",
            "location": 63,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bundler._expected_config": {
            "name": "_expected_config",
            "location": 67,
            "return": [
                "Dict[(str, Optional[str])]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lta/component.py": {
        "now": {
            "name": "now",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "unique_id": {
            "name": "unique_id",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "check_drain_semaphore": {
            "name": "check_drain_semaphore",
            "location": 142,
            "return": [
                "bool"
            ],
            "arguments": {
                "component": [
                    "Component"
                ]
            }
        },
        "Component.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "component_type": [
                    "str"
                ],
                "config": [
                    "Dict[(str, str)]"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "Component.validate_config": {
            "name": "validate_config",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "Component._do_status": {
            "name": "_do_status",
            "location": 129,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Component._expected_config": {
            "name": "_expected_config",
            "location": 133,
            "return": [
                "Dict[(str, Optional[str])]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lta/crypto.py": {
        "adler32sum": {
            "name": "adler32sum",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "sha512sum": {
            "name": "sha512sum",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "lta_checksums": {
            "name": "lta_checksums",
            "location": 35,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        }
    },
    "lta/deleter.py": {
        "runner": {
            "name": "runner",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Deleter.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[(str, str)]"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "Deleter._do_status": {
            "name": "_do_status",
            "location": 50,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deleter._expected_config": {
            "name": "_expected_config",
            "location": 54,
            "return": [
                "Dict[(str, Optional[str])]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lta/desy_move_verifier.py": {
        "runner": {
            "name": "runner",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DesyMoveVerifier.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[(str, str)]"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "DesyMoveVerifier._do_status": {
            "name": "_do_status",
            "location": 56,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DesyMoveVerifier._expected_config": {
            "name": "_expected_config",
            "location": 60,
            "return": [
                "Dict[(str, Optional[str])]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lta/desy_stager.py": {
        "runner": {
            "name": "runner",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DesyStager.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[(str, str)]"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "DesyStager._do_status": {
            "name": "_do_status",
            "location": 50,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DesyStager._expected_config": {
            "name": "_expected_config",
            "location": 54,
            "return": [
                "Dict[(str, Optional[str])]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lta/desy_verifier.py": {
        "runner": {
            "name": "runner",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DesyVerifier.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[(str, str)]"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "DesyVerifier._do_status": {
            "name": "_do_status",
            "location": 57,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DesyVerifier._expected_config": {
            "name": "_expected_config",
            "location": 61,
            "return": [
                "Dict[(str, Optional[str])]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lta/gridftp_replicator.py": {
        "runner": {
            "name": "runner",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "GridFTPReplicator.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[(str, str)]"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "GridFTPReplicator._do_status": {
            "name": "_do_status",
            "location": 67,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GridFTPReplicator._expected_config": {
            "name": "_expected_config",
            "location": 71,
            "return": [
                "Dict[(str, Optional[str])]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lta/joiner.py": {
        "join_smart": {
            "name": "join_smart",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "items": [
                    "List[str]"
                ]
            }
        },
        "join_smart_url": {
            "name": "join_smart_url",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "items": [
                    "List[str]"
                ]
            }
        }
    },
    "lta/locator.py": {
        "as_lta_record": {
            "name": "as_lta_record",
            "location": 30,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "catalog_record": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "runner": {
            "name": "runner",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Locator.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[(str, str)]"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "Locator._do_status": {
            "name": "_do_status",
            "location": 77,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Locator._expected_config": {
            "name": "_expected_config",
            "location": 81,
            "return": [
                "Dict[(str, Optional[str])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Locator._reduce_unique_archive_uuid": {
            "name": "_reduce_unique_archive_uuid",
            "location": 236,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "bundle_uuids": [
                    "List[str]"
                ],
                "catalog_record": [
                    "Dict[(str, Any)]"
                ],
                "source": [
                    "str"
                ]
            }
        }
    },
    "lta/log_format.py": {
        "StructuredFormatter.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "component_name": [
                    "Optional[str]"
                ],
                "component_type": [
                    "Optional[str]"
                ],
                "ndjson": [
                    "bool"
                ]
            }
        },
        "StructuredFormatter.format": {
            "name": "format",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "LogRecord"
                ]
            }
        }
    },
    "lta/lta_cmd.py": {
        "as_datetime": {
            "name": "as_datetime",
            "location": 66,
            "return": [
                "datetime"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "display_time": {
            "name": "display_time",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "Optional[str]"
                ]
            }
        },
        "normalize_path": {
            "name": "normalize_path",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "print_catalog_record_as_line": {
            "name": "print_catalog_record_as_line",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "d": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "print_dict_as_pretty_json": {
            "name": "print_dict_as_pretty_json",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "d": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "_enumerate_path": {
            "name": "_enumerate_path",
            "location": 127,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_get_files_and_size": {
            "name": "_get_files_and_size",
            "location": 147,
            "return": [
                "Tuple[(List[str], int)]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_get_status_bar": {
            "name": "_get_status_bar",
            "location": 158,
            "return": [
                "str"
            ],
            "arguments": {
                "status_list": [
                    "List[str]"
                ],
                "status": [
                    "str"
                ],
                "module_map": [
                    "Optional[Dict[(str, str)]]"
                ],
                "claimant": [
                    "Optional[str]"
                ]
            }
        },
        "_is_nersc_bundle_record": {
            "name": "_is_nersc_bundle_record",
            "location": 227,
            "return": [
                "bool"
            ],
            "arguments": {
                "d": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "status.date_ok": {
            "name": "date_ok",
            "location": 854,
            "return": [
                "bool"
            ],
            "arguments": {
                "d": [
                    "str"
                ]
            }
        }
    },
    "lta/lta_const.py": {
        "drain_semaphore_filename": {
            "name": "drain_semaphore_filename",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "component": [
                    "str"
                ]
            }
        },
        "pid_filename": {
            "name": "pid_filename",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "component": [
                    "str"
                ]
            }
        }
    },
    "lta/lta_types.py": {},
    "lta/monitoring.py": {
        "check_bool": {
            "name": "check_bool",
            "location": 112,
            "return": [
                "bool"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Monitor.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lta_rest_url": [
                    "str"
                ],
                "lta_rest_token": [
                    "str"
                ],
                "monitoring_interval": [
                    "str"
                ],
                "logger": [
                    "Any"
                ]
            }
        },
        "Monitor.stop": {
            "name": "stop",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrometheusMonitor.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "str"
                ]
            }
        },
        "PrometheusMonitor.register_enum": {
            "name": "register_enum",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "lta/nersc_mover.py": {
        "runner": {
            "name": "runner",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "NerscMover.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[(str, str)]"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "NerscMover._do_status": {
            "name": "_do_status",
            "location": 65,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NerscMover._expected_config": {
            "name": "_expected_config",
            "location": 69,
            "return": [
                "Dict[(str, Optional[str])]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lta/nersc_retriever.py": {
        "runner": {
            "name": "runner",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "NerscRetriever.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[(str, str)]"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "NerscRetriever._do_status": {
            "name": "_do_status",
            "location": 63,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NerscRetriever._expected_config": {
            "name": "_expected_config",
            "location": 67,
            "return": [
                "Dict[(str, Optional[str])]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lta/nersc_verifier.py": {
        "runner": {
            "name": "runner",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "NerscVerifier.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[(str, str)]"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "NerscVerifier._do_status": {
            "name": "_do_status",
            "location": 66,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NerscVerifier._expected_config": {
            "name": "_expected_config",
            "location": 70,
            "return": [
                "Dict[(str, Optional[str])]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lta/picker.py": {
        "runner": {
            "name": "runner",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Picker.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[(str, str)]"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "Picker._do_status": {
            "name": "_do_status",
            "location": 59,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Picker._expected_config": {
            "name": "_expected_config",
            "location": 63,
            "return": [
                "Dict[(str, Optional[str])]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lta/rate_limiter.py": {
        "runner": {
            "name": "runner",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "RateLimiter.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[(str, str)]"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "RateLimiter._do_status": {
            "name": "_do_status",
            "location": 55,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RateLimiter._enumerate_path": {
            "name": "_enumerate_path",
            "location": 59,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "RateLimiter._expected_config": {
            "name": "_expected_config",
            "location": 69,
            "return": [
                "Dict[(str, Optional[str])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RateLimiter._get_files_and_size": {
            "name": "_get_files_and_size",
            "location": 73,
            "return": [
                "Tuple[(List[str], int)]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        }
    },
    "lta/rest_server.py": {
        "boolify": {
            "name": "boolify",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "now": {
            "name": "now",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "unique_id": {
            "name": "unique_id",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "lta_auth": {
            "name": "lta_auth",
            "location": 68,
            "return": [
                "Callable[(..., Any)]"
            ],
            "arguments": {}
        },
        "ensure_mongo_indexes": {
            "name": "ensure_mongo_indexes",
            "location": 813,
            "return": [
                "None"
            ],
            "arguments": {
                "mongo_url": [
                    "str"
                ],
                "mongo_db": [
                    "str"
                ]
            }
        },
        "start": {
            "name": "start",
            "location": 875,
            "return": [
                "RestServer"
            ],
            "arguments": {
                "debug": [
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 938,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "lta_auth.make_wrapper": {
            "name": "make_wrapper",
            "location": 84,
            "return": [
                "Any"
            ],
            "arguments": {
                "method": [
                    "Callable[(..., Any)]"
                ]
            }
        },
        "CheckClaims.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "claim_age": [
                    "int"
                ]
            }
        },
        "CheckClaims.old_age": {
            "name": "old_age",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseLTAHandler.initialize": {
            "name": "initialize",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "check_claims": [
                    "CheckClaims"
                ],
                "db": [
                    "MotorDatabase"
                ]
            }
        },
        "MainHandler.get": {
            "name": "get",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusHandler.get.date_ok": {
            "name": "date_ok",
            "location": 655,
            "return": [
                "bool"
            ],
            "arguments": {
                "d": [
                    "str"
                ]
            }
        }
    },
    "lta/site_move_verifier.py": {
        "as_nonempty_columns": {
            "name": "as_nonempty_columns",
            "location": 36,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "discard_empty": {
            "name": "discard_empty",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "parse_myquota": {
            "name": "parse_myquota",
            "location": 48,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "runner": {
            "name": "runner",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "SiteMoveVerifier.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[(str, str)]"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "SiteMoveVerifier._do_status": {
            "name": "_do_status",
            "location": 88,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SiteMoveVerifier._expected_config": {
            "name": "_expected_config",
            "location": 96,
            "return": [
                "Dict[(str, Optional[str])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SiteMoveVerifier._execute_myquota": {
            "name": "_execute_myquota",
            "location": 197,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lta/transfer_request_finisher.py": {
        "runner": {
            "name": "runner",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TransferRequestFinisher.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[(str, str)]"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "TransferRequestFinisher._do_status": {
            "name": "_do_status",
            "location": 49,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransferRequestFinisher._expected_config": {
            "name": "_expected_config",
            "location": 53,
            "return": [
                "Dict[(str, Optional[str])]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lta/unpacker.py": {
        "runner": {
            "name": "runner",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Unpacker.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[(str, str)]"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "Unpacker._do_status": {
            "name": "_do_status",
            "location": 69,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unpacker._expected_config": {
            "name": "_expected_config",
            "location": 73,
            "return": [
                "Dict[(str, Optional[str])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unpacker._clean_outbox_directory": {
            "name": "_clean_outbox_directory",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unpacker._delete_manifest_metadata": {
            "name": "_delete_manifest_metadata",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bundle_uuid": [
                    "str"
                ]
            }
        },
        "Unpacker._map_dest_path": {
            "name": "_map_dest_path",
            "location": 253,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "dest_path": [
                    "str"
                ]
            }
        },
        "Unpacker._read_manifest_metadata": {
            "name": "_read_manifest_metadata",
            "location": 279,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "bundle_uuid": [
                    "str"
                ]
            }
        },
        "Unpacker._read_manifest_metadata_v2": {
            "name": "_read_manifest_metadata_v2",
            "location": 293,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "bundle_uuid": [
                    "str"
                ]
            }
        },
        "Unpacker._read_manifest_metadata_v3": {
            "name": "_read_manifest_metadata_v3",
            "location": 304,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "bundle_uuid": [
                    "str"
                ]
            }
        }
    },
    "lta/__init__.py": {},
    "lta/transfer/globus.py": {
        "SiteGlobusProxy.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "duration": [
                    "Optional[int]"
                ]
            }
        },
        "SiteGlobusProxy.set_duration": {
            "name": "set_duration",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "str"
                ]
            }
        },
        "SiteGlobusProxy.set_passphrase": {
            "name": "set_passphrase",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "str"
                ]
            }
        },
        "SiteGlobusProxy.set_voms_role": {
            "name": "set_voms_role",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "str"
                ]
            }
        },
        "SiteGlobusProxy.set_voms_vo": {
            "name": "set_voms_vo",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vo": [
                    "str"
                ]
            }
        },
        "SiteGlobusProxy.update_proxy": {
            "name": "update_proxy",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SiteGlobusProxy.get_proxy": {
            "name": "get_proxy",
            "location": 99,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lta/transfer/gridftp.py": {
        "_cmd": {
            "name": "_cmd",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd": [
                    "List[str]"
                ],
                "timeout": [
                    "int"
                ]
            }
        },
        "_cmd_output": {
            "name": "_cmd_output",
            "location": 26,
            "return": [
                "Tuple[(int, str)]"
            ],
            "arguments": {
                "cmd": [
                    "List[str]"
                ],
                "timeout": [
                    "int"
                ]
            }
        },
        "cksm": {
            "name": "cksm",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "type": [
                    "str"
                ],
                "buffersize": [
                    "int"
                ],
                "file": [
                    "bool"
                ]
            }
        },
        "listify": {
            "name": "listify",
            "location": 57,
            "return": [
                "List[Union[(File, str)]]"
            ],
            "arguments": {
                "lines": [
                    "str"
                ],
                "details": [
                    "bool"
                ],
                "dotfiles": [
                    "bool"
                ]
            }
        },
        "GridFTP.supported_address": {
            "name": "supported_address",
            "location": 104,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "address": [
                    "str"
                ]
            }
        },
        "GridFTP.address_split": {
            "name": "address_split",
            "location": 114,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "cls": [],
                "address": [
                    "str"
                ]
            }
        },
        "GridFTP.get": {
            "name": "get",
            "location": 124,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "cls": [],
                "address": [
                    "str"
                ],
                "filename": [
                    "Optional[str]"
                ],
                "request_timeout": [
                    "Optional[int]"
                ]
            }
        },
        "GridFTP.put": {
            "name": "put",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "address": [
                    "str"
                ],
                "data": [
                    "Optional[str]"
                ],
                "filename": [
                    "Optional[str]"
                ],
                "request_timeout": [
                    "Optional[int]"
                ]
            }
        },
        "GridFTP.list": {
            "name": "list",
            "location": 212,
            "return": [
                "List[Union[(File, str)]]"
            ],
            "arguments": {
                "cls": [],
                "address": [
                    "str"
                ],
                "request_timeout": [
                    "Optional[int]"
                ],
                "details": [
                    "bool"
                ],
                "dotfiles": [
                    "bool"
                ]
            }
        },
        "GridFTP.mkdir": {
            "name": "mkdir",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "address": [
                    "str"
                ],
                "request_timeout": [
                    "Optional[int]"
                ],
                "parents": [
                    "bool"
                ]
            }
        },
        "GridFTP.rmdir": {
            "name": "rmdir",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "address": [
                    "str"
                ],
                "request_timeout": [
                    "Optional[int]"
                ]
            }
        },
        "GridFTP.delete": {
            "name": "delete",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "address": [
                    "str"
                ],
                "request_timeout": [
                    "Optional[int]"
                ]
            }
        },
        "GridFTP.rmtree": {
            "name": "rmtree",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "address": [
                    "str"
                ],
                "request_timeout": [
                    "Optional[int]"
                ]
            }
        },
        "GridFTP.move": {
            "name": "move",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "src": [
                    "str"
                ],
                "dest": [
                    "str"
                ],
                "request_timeout": [
                    "Optional[int]"
                ]
            }
        },
        "GridFTP.exists": {
            "name": "exists",
            "location": 387,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "address": [
                    "str"
                ],
                "request_timeout": [
                    "Optional[int]"
                ]
            }
        },
        "GridFTP.chmod": {
            "name": "chmod",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "address": [
                    "str"
                ],
                "mode": [
                    "str"
                ],
                "request_timeout": [
                    "Optional[int]"
                ]
            }
        },
        "GridFTP.size": {
            "name": "size",
            "location": 440,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [],
                "address": [
                    "str"
                ],
                "request_timeout": [
                    "Optional[int]"
                ]
            }
        },
        "GridFTP._chksum": {
            "name": "_chksum",
            "location": 470,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "type": [
                    "str"
                ],
                "address": [
                    "str"
                ],
                "request_timeout": [
                    "Optional[int]"
                ]
            }
        },
        "GridFTP.md5sum": {
            "name": "md5sum",
            "location": 496,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "address": [
                    "str"
                ],
                "request_timeout": [
                    "Optional[int]"
                ]
            }
        },
        "GridFTP.sha1sum": {
            "name": "sha1sum",
            "location": 513,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "address": [
                    "str"
                ],
                "request_timeout": [
                    "Optional[int]"
                ]
            }
        },
        "GridFTP.sha256sum": {
            "name": "sha256sum",
            "location": 530,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "address": [
                    "str"
                ],
                "request_timeout": [
                    "Optional[int]"
                ]
            }
        },
        "GridFTP.sha512sum": {
            "name": "sha512sum",
            "location": 547,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "address": [
                    "str"
                ],
                "request_timeout": [
                    "Optional[int]"
                ]
            }
        }
    },
    "lta/transfer/__init__.py": {},
    "resources/adler32.py": {},
    "resources/adler32sum.py": {},
    "resources/enable_profiling.py": {},
    "resources/find_externals.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "resources/make_token.py": {},
    "resources/make_transfer_request.py": {},
    "resources/profile_queries.py": {},
    "resources/solicit_token.py": {},
    "resources/test_data_helper.py": {},
    "tests/test_bundler.py": {
        "config": {
            "name": "config",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_constructor_missing_config": {
            "name": "test_constructor_missing_config",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "test_constructor_missing_logging": {
            "name": "test_constructor_missing_logging",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_constructor_config_missing_values": {
            "name": "test_constructor_config_missing_values",
            "location": 59,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_constructor_config_poison_values": {
            "name": "test_constructor_config_poison_values",
            "location": 69,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "test_constructor_config": {
            "name": "test_constructor_config",
            "location": 78,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "test_constructor_config_sleep_type_int": {
            "name": "test_constructor_config_sleep_type_int",
            "location": 89,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "test_constructor_state": {
            "name": "test_constructor_state",
            "location": 100,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "test_do_status": {
            "name": "test_do_status",
            "location": 107,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "test_relpath": {
            "name": "test_relpath",
            "location": 371,
            "return": [],
            "arguments": {}
        }
    },
    "tests/test_component.py": {
        "config": {
            "name": "config",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_always_succeed": {
            "name": "test_always_succeed",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "xtest_constructor_missing_config": {
            "name": "xtest_constructor_missing_config",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "xtest_constructor_missing_logging": {
            "name": "xtest_constructor_missing_logging",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "xtest_constructor_config_missing_values": {
            "name": "xtest_constructor_config_missing_values",
            "location": 55,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "xtest_constructor_config_poison_values": {
            "name": "xtest_constructor_config_poison_values",
            "location": 65,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "xtest_constructor_config": {
            "name": "xtest_constructor_config",
            "location": 74,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "xtest_constructor_config_sleep_type_int": {
            "name": "xtest_constructor_config_sleep_type_int",
            "location": 86,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "xtest_constructor_state": {
            "name": "xtest_constructor_state",
            "location": 98,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        }
    },
    "tests/test_config.py": {
        "test_from_environment_none": {
            "name": "test_from_environment_none",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_from_environment_scalar": {
            "name": "test_from_environment_scalar",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_from_environment_scalar_list": {
            "name": "test_from_environment_scalar_list",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_from_environment_missing": {
            "name": "test_from_environment_missing",
            "location": 27,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_from_environment_missing_list": {
            "name": "test_from_environment_missing_list",
            "location": 34,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_from_environment_empty": {
            "name": "test_from_environment_empty",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_from_environment_key": {
            "name": "test_from_environment_key",
            "location": 47,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_from_environment_list": {
            "name": "test_from_environment_list",
            "location": 55,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_from_environment_dict": {
            "name": "test_from_environment_dict",
            "location": 65,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_from_environment_dict_required": {
            "name": "test_from_environment_dict_required",
            "location": 79,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        }
    },
    "tests/test_crypto.py": {
        "test_adler32sum_tempfile": {
            "name": "test_adler32sum_tempfile",
            "location": 9,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_sha512sum_tempfile": {
            "name": "test_sha512sum_tempfile",
            "location": 18,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_lta_checksums_tempfile": {
            "name": "test_lta_checksums_tempfile",
            "location": 27,
            "return": [],
            "arguments": {
                "mocker": []
            }
        }
    },
    "tests/test_deleter.py": {
        "config": {
            "name": "config",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_constructor_config": {
            "name": "test_constructor_config",
            "location": 33,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "test_do_status": {
            "name": "test_do_status",
            "location": 54,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        }
    },
    "tests/test_desy_move_verifier.py": {
        "config": {
            "name": "config",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_constructor_config": {
            "name": "test_constructor_config",
            "location": 36,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "test_do_status": {
            "name": "test_do_status",
            "location": 57,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        }
    },
    "tests/test_desy_verifier.py": {
        "config": {
            "name": "config",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_constructor_config": {
            "name": "test_constructor_config",
            "location": 39,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "test_do_status": {
            "name": "test_do_status",
            "location": 58,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        }
    },
    "tests/test_joiner.py": {
        "test_join_smart_empty": {
            "name": "test_join_smart_empty",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_join_smart_many_relative": {
            "name": "test_join_smart_many_relative",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_join_smart_many_absolute": {
            "name": "test_join_smart_many_absolute",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_join_smart_many_absolute_trailing_slashes": {
            "name": "test_join_smart_many_absolute_trailing_slashes",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_join_smart_url": {
            "name": "test_join_smart_url",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_join_smart_url_with_path_and_basename": {
            "name": "test_join_smart_url_with_path_and_basename",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_join_smart_desy_bundle_path": {
            "name": "test_join_smart_desy_bundle_path",
            "location": 35,
            "return": [],
            "arguments": {}
        }
    },
    "tests/test_locator.py": {
        "config": {
            "name": "config",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_constructor_missing_config": {
            "name": "test_constructor_missing_config",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_constructor_missing_logging": {
            "name": "test_constructor_missing_logging",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "test_constructor_config_missing_values": {
            "name": "test_constructor_config_missing_values",
            "location": 56,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_constructor_config_poison_values": {
            "name": "test_constructor_config_poison_values",
            "location": 66,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "test_constructor_config": {
            "name": "test_constructor_config",
            "location": 75,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "test_constructor_config_sleep_type_int": {
            "name": "test_constructor_config_sleep_type_int",
            "location": 87,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "test_constructor_state": {
            "name": "test_constructor_state",
            "location": 99,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "test_do_status": {
            "name": "test_do_status",
            "location": 106,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "test_as_lta_record": {
            "name": "test_as_lta_record",
            "location": 673,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "test_locator_do_work_transfer_request_fc_its_over_9000.gen_file": {
            "name": "gen_file",
            "location": 508,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "i": [
                    "int"
                ]
            }
        },
        "test_locator_do_work_transfer_request_fc_its_over_9000.gen_record": {
            "name": "gen_record",
            "location": 514,
            "return": [
                "Dict[(str, Union[(int, str, Dict[(str, str)], List[Dict[(str, Union[(bool, str)])]])])]"
            ],
            "arguments": {
                "i": [
                    "int"
                ]
            }
        }
    },
    "tests/test_log_format.py": {
        "test_constructor_default": {
            "name": "test_constructor_default",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_constructor_supplied": {
            "name": "test_constructor_supplied",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_format_default": {
            "name": "test_format_default",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_format_supplied": {
            "name": "test_format_supplied",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_missing_exc_info": {
            "name": "test_missing_exc_info",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_exc_info_tuple": {
            "name": "test_exc_info_tuple",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LiteralRecord.getMessage": {
            "name": "getMessage",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tests/test_lta_cmd.py": {
        "test_normalize_path": {
            "name": "test_normalize_path",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_PATH_PREFIX_WHITELIST": {
            "name": "test_PATH_PREFIX_WHITELIST",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tests/test_monitoring.py": {
        "monitor": {
            "name": "monitor",
            "location": 15,
            "return": [],
            "arguments": {
                "monkeypatch": [],
                "mocker": []
            }
        },
        "port": {
            "name": "port",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "test_main": {
            "name": "test_main",
            "location": 75,
            "return": [],
            "arguments": {
                "monitor": [],
                "monkeypatch": [],
                "mocker": [],
                "port": []
            }
        }
    },
    "tests/test_nersc_mover.py": {
        "config": {
            "name": "config",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_constructor_missing_config": {
            "name": "test_constructor_missing_config",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "test_constructor_missing_logging": {
            "name": "test_constructor_missing_logging",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_constructor_config_missing_values": {
            "name": "test_constructor_config_missing_values",
            "location": 50,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_constructor_config_poison_values": {
            "name": "test_constructor_config_poison_values",
            "location": 60,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "test_constructor_config": {
            "name": "test_constructor_config",
            "location": 69,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "test_constructor_config_sleep_type_int": {
            "name": "test_constructor_config_sleep_type_int",
            "location": 80,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "test_constructor_state": {
            "name": "test_constructor_state",
            "location": 91,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "test_do_status": {
            "name": "test_do_status",
            "location": 98,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        }
    },
    "tests/test_nersc_retriever.py": {
        "config": {
            "name": "config",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_constructor_missing_config": {
            "name": "test_constructor_missing_config",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "test_constructor_missing_logging": {
            "name": "test_constructor_missing_logging",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_constructor_config_missing_values": {
            "name": "test_constructor_config_missing_values",
            "location": 51,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_constructor_config_poison_values": {
            "name": "test_constructor_config_poison_values",
            "location": 61,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "test_constructor_config": {
            "name": "test_constructor_config",
            "location": 70,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "test_constructor_config_sleep_type_int": {
            "name": "test_constructor_config_sleep_type_int",
            "location": 81,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "test_constructor_state": {
            "name": "test_constructor_state",
            "location": 92,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "test_do_status": {
            "name": "test_do_status",
            "location": 99,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        }
    },
    "tests/test_nersc_verifier.py": {
        "config": {
            "name": "config",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_constructor_config": {
            "name": "test_constructor_config",
            "location": 36,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "test_do_status": {
            "name": "test_do_status",
            "location": 55,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        }
    },
    "tests/test_picker.py": {
        "config": {
            "name": "config",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_constructor_missing_config": {
            "name": "test_constructor_missing_config",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_constructor_missing_logging": {
            "name": "test_constructor_missing_logging",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "test_constructor_config_missing_values": {
            "name": "test_constructor_config_missing_values",
            "location": 57,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_constructor_config_poison_values": {
            "name": "test_constructor_config_poison_values",
            "location": 67,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "test_constructor_config": {
            "name": "test_constructor_config",
            "location": 76,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "test_constructor_config_sleep_type_int": {
            "name": "test_constructor_config_sleep_type_int",
            "location": 88,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "test_constructor_state": {
            "name": "test_constructor_state",
            "location": 100,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "test_do_status": {
            "name": "test_do_status",
            "location": 107,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "test_picker_do_work_transfer_request_fc_its_over_9000.gen_file": {
            "name": "gen_file",
            "location": 433,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "i": [
                    "int"
                ]
            }
        },
        "test_picker_do_work_transfer_request_fc_its_over_9000.gen_record": {
            "name": "gen_record",
            "location": 439,
            "return": [
                "Dict[(str, Union[(int, str, Dict[(str, str)], List[Dict[(str, str)]])])]"
            ],
            "arguments": {
                "i": [
                    "int"
                ]
            }
        }
    },
    "tests/test_rate_limiter.py": {
        "config": {
            "name": "config",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_constructor_config": {
            "name": "test_constructor_config",
            "location": 35,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "test_do_status": {
            "name": "test_do_status",
            "location": 59,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "test_get_files_and_size_with_ignore_bad_files": {
            "name": "test_get_files_and_size_with_ignore_bad_files",
            "location": 291,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        }
    },
    "tests/test_rest_server.py": {
        "mongo": {
            "name": "mongo",
            "location": 39,
            "return": [
                "Database"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "port": {
            "name": "port",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "test_boolify": {
            "name": "test_boolify",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "test_check_claims_old_age": {
            "name": "test_check_claims_old_age",
            "location": 127,
            "return": [],
            "arguments": {}
        },
        "rest.client": {
            "name": "client",
            "location": 80,
            "return": [],
            "arguments": {
                "role": [],
                "timeout": []
            }
        }
    },
    "tests/test_site_move_verifier.py": {
        "config": {
            "name": "config",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_as_nonempty_columns": {
            "name": "test_as_nonempty_columns",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "test_discard_empty": {
            "name": "test_discard_empty",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_parse_myquota": {
            "name": "test_parse_myquota",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "test_constructor_config": {
            "name": "test_constructor_config",
            "location": 74,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "test_do_status": {
            "name": "test_do_status",
            "location": 93,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "test_do_status_myquota_fails": {
            "name": "test_do_status_myquota_fails",
            "location": 127,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        }
    },
    "tests/test_transfer_request_finisher.py": {
        "config": {
            "name": "config",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_constructor_config": {
            "name": "test_constructor_config",
            "location": 34,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "test_do_status": {
            "name": "test_do_status",
            "location": 50,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        }
    },
    "tests/test_unpacker.py": {
        "config": {
            "name": "config",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "path_map_mock": {
            "name": "path_map_mock",
            "location": 39,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_always_succeed": {
            "name": "test_always_succeed",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "test_constructor_missing_config": {
            "name": "test_constructor_missing_config",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_constructor_missing_logging": {
            "name": "test_constructor_missing_logging",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "test_constructor_config_missing_values": {
            "name": "test_constructor_config_missing_values",
            "location": 65,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_constructor_config_poison_values": {
            "name": "test_constructor_config_poison_values",
            "location": 75,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": []
            }
        },
        "test_constructor_config": {
            "name": "test_constructor_config",
            "location": 84,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": [],
                "path_map_mock": []
            }
        },
        "test_constructor_config_sleep_type_int": {
            "name": "test_constructor_config_sleep_type_int",
            "location": 95,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": [],
                "path_map_mock": []
            }
        },
        "test_constructor_state": {
            "name": "test_constructor_state",
            "location": 106,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": [],
                "path_map_mock": []
            }
        },
        "test_do_status": {
            "name": "test_do_status",
            "location": 113,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": [],
                "path_map_mock": []
            }
        },
        "test_unpacker_delete_manifest_metadata_v3": {
            "name": "test_unpacker_delete_manifest_metadata_v3",
            "location": 567,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": [],
                "path_map_mock": []
            }
        },
        "test_unpacker_delete_manifest_metadata_unknown": {
            "name": "test_unpacker_delete_manifest_metadata_unknown",
            "location": 577,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": [],
                "path_map_mock": []
            }
        },
        "test_unpacker_read_manifest_metadata_for_v3": {
            "name": "test_unpacker_read_manifest_metadata_for_v3",
            "location": 588,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": [],
                "path_map_mock": []
            }
        },
        "test_unpacker_read_manifest_metadata_unknown": {
            "name": "test_unpacker_read_manifest_metadata_unknown",
            "location": 601,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": [],
                "path_map_mock": []
            }
        },
        "test_unpacker_read_manifest_metadata_v2": {
            "name": "test_unpacker_read_manifest_metadata_v2",
            "location": 615,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": [],
                "path_map_mock": []
            }
        },
        "test_unpacker_read_manifest_metadata_v2_no_throw": {
            "name": "test_unpacker_read_manifest_metadata_v2_no_throw",
            "location": 625,
            "return": [],
            "arguments": {
                "file_open_mock": [],
                "config": [],
                "mocker": [],
                "path_map_mock": []
            }
        },
        "test_unpacker_read_manifest_metadata_v3": {
            "name": "test_unpacker_read_manifest_metadata_v3",
            "location": 633,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": [],
                "path_map_mock": []
            }
        },
        "test_unpacker_read_manifest_metadata_v3_no_throw": {
            "name": "test_unpacker_read_manifest_metadata_v3_no_throw",
            "location": 650,
            "return": [],
            "arguments": {
                "file_open_mock": [],
                "config": [],
                "mocker": [],
                "path_map_mock": []
            }
        },
        "test_unpacker_clean_outbox_directory_bail_early": {
            "name": "test_unpacker_clean_outbox_directory_bail_early",
            "location": 658,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": [],
                "path_map_mock": []
            }
        },
        "test_unpacker_clean_outbox_directory_empty": {
            "name": "test_unpacker_clean_outbox_directory_empty",
            "location": 668,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": [],
                "path_map_mock": []
            }
        },
        "test_unpacker_clean_outbox_directory_file": {
            "name": "test_unpacker_clean_outbox_directory_file",
            "location": 681,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": [],
                "path_map_mock": []
            }
        },
        "test_unpacker_clean_outbox_directory_directory": {
            "name": "test_unpacker_clean_outbox_directory_directory",
            "location": 696,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": [],
                "path_map_mock": []
            }
        },
        "test_unpacker_clean_outbox_directory_unknown": {
            "name": "test_unpacker_clean_outbox_directory_unknown",
            "location": 712,
            "return": [],
            "arguments": {
                "config": [],
                "mocker": [],
                "path_map_mock": []
            }
        }
    },
    "tests/test_util.py": {
        "ObjectLiteral.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tests/__init__.py": {}
}
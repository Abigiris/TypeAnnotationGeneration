{
    "lucyfer-master/lucyfer/settings.py": {
        "reload_lucyfer_settings": {
            "name": "reload_lucyfer_settings",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "LucyferSettings.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "user_settings": [],
                "defaults": []
            }
        },
        "LucyferSettings.user_settings": {
            "name": "user_settings",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LucyferSettings.__getattr__": {
            "name": "__getattr__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "attr": []
            }
        },
        "LucyferSettings.reload": {
            "name": "reload",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lucyfer-master/lucyfer/utils.py": {},
    "lucyfer-master/lucyfer/__init__.py": {},
    "lucyfer-master/lucyfer/backend/base.py": {
        "LuceneSearchFilter.get_base_search_terms": {
            "name": "get_base_search_terms",
            "location": 2,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "LuceneSearchFilter.get_searchset_class": {
            "name": "get_searchset_class",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "view": [],
                "request": []
            }
        }
    },
    "lucyfer-master/lucyfer/backend/django.py": {
        "DjangoLuceneSearchFilterMixin.filter_queryset": {
            "name": "filter_queryset",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "queryset": [],
                "view": []
            }
        },
        "DjangoLuceneSearchFilterMixin.lucene_filter_queyset": {
            "name": "lucene_filter_queyset",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "searchset_class": [],
                "search_terms": [],
                "queryset": []
            }
        },
        "DjangoLuceneSearchFilterMixin.custom_filter_queryset": {
            "name": "custom_filter_queryset",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "queryset": [],
                "view": []
            }
        },
        "DjangoLuceneSearchFilterMixin._use_distinct": {
            "name": "_use_distinct",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "searchset_class": [],
                "queryset": [],
                "filtered_queryset": []
            }
        }
    },
    "lucyfer-master/lucyfer/backend/elastic.py": {
        "ElasticLuceneSearchFilterMixin.get_schema_fields": {
            "name": "get_schema_fields",
            "location": 4,
            "return": [],
            "arguments": {
                "self": [],
                "view": []
            }
        },
        "ElasticLuceneSearchFilterMixin.filter_search": {
            "name": "filter_search",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "search": [],
                "view": []
            }
        },
        "ElasticLuceneSearchFilterMixin.lucene_filter_search": {
            "name": "lucene_filter_search",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "searchset_class": [],
                "search_terms": [],
                "search": []
            }
        },
        "ElasticLuceneSearchFilterMixin.custom_filter_search": {
            "name": "custom_filter_search",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "search": [],
                "view": [],
                "search_terms": []
            }
        }
    },
    "lucyfer-master/lucyfer/backend/__init__.py": {},
    "lucyfer-master/lucyfer/parser/base.py": {
        "BaseLuceneParserMixin.parse": {
            "name": "parse",
            "location": 15,
            "return": [],
            "arguments": {
                "cls": [],
                "raw_expression": [
                    "str"
                ]
            }
        },
        "BaseLuceneParserMixin._parse_tree": {
            "name": "_parse_tree",
            "location": 29,
            "return": [],
            "arguments": {
                "cls": [],
                "tree": [
                    "BaseNode"
                ]
            }
        },
        "BaseLuceneParserMixin.get_saved_search": {
            "name": "get_saved_search",
            "location": 36,
            "return": [],
            "arguments": {
                "cls": [],
                "tree": []
            }
        },
        "BaseLuceneParserMixin._get_tree_from_raw_expression": {
            "name": "_get_tree_from_raw_expression",
            "location": 43,
            "return": [],
            "arguments": {
                "cls": [],
                "raw_expression": []
            }
        }
    },
    "lucyfer-master/lucyfer/parser/django.py": {
        "LuceneToDjangoParserMixin._parse_tree": {
            "name": "_parse_tree",
            "location": 10,
            "return": [],
            "arguments": {
                "cls": [],
                "tree": []
            }
        }
    },
    "lucyfer-master/lucyfer/parser/elastic.py": {
        "LuceneToElasticParserMixin._parse_tree": {
            "name": "_parse_tree",
            "location": 10,
            "return": [],
            "arguments": {
                "cls": [],
                "tree": []
            }
        }
    },
    "lucyfer-master/lucyfer/parser/__init__.py": {},
    "lucyfer-master/lucyfer/searchset/base.py": {
        "BaseSearchSetMetaClass.__new__": {
            "name": "__new__",
            "location": 27,
            "return": [],
            "arguments": {
                "mcs": [],
                "name": [],
                "bases": [],
                "attrs": []
            }
        },
        "BaseSearchSetMetaClass.process_required_field": {
            "name": "process_required_field",
            "location": 47,
            "return": [],
            "arguments": {
                "mcs": [],
                "searchset": [],
                "bases": []
            }
        },
        "BaseSearchSetMetaClass.get_meta": {
            "name": "get_meta",
            "location": 54,
            "return": [
                "Type[BaseMetaClass]"
            ],
            "arguments": {
                "mcs": [],
                "meta": []
            }
        },
        "BaseSearchSetMetaClass.get_storage": {
            "name": "get_storage",
            "location": 65,
            "return": [],
            "arguments": {
                "mcs": [],
                "searchset": [],
                "meta": [],
                "name": [],
                "attrs": [],
                "bases": []
            }
        },
        "BaseSearchSetMetaClass.get_field_name_to_field": {
            "name": "get_field_name_to_field",
            "location": 112,
            "return": [
                "Dict[(str, BaseSearchField)]"
            ],
            "arguments": {
                "mcs": [],
                "base_field_class": [
                    "Type[BaseSearchField]"
                ],
                "attrs": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "BaseSearchSetMetaClass.validate_field_name_to_field": {
            "name": "validate_field_name_to_field",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "mcs": [],
                "field_name_to_field": [
                    "Dict[(str, BaseSearchField)]"
                ],
                "searchset_name": [
                    "str"
                ]
            }
        },
        "BaseSearchSetMetaClass.get_fields_to_exclude_from_mapping": {
            "name": "get_fields_to_exclude_from_mapping",
            "location": 135,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "mcs": [],
                "searchset_fields_to_exclude_from_mapping": [
                    "List[str]"
                ],
                "field_name_to_field": [
                    "Dict[(str, BaseSearchField)]"
                ]
            }
        },
        "BaseSearchSetMetaClass.get_fields_to_exclude_from_suggestions": {
            "name": "get_fields_to_exclude_from_suggestions",
            "location": 144,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "mcs": [],
                "searchset_fields_to_exclude_from_suggestions": [
                    "List[str]"
                ],
                "field_name_to_field": [
                    "Dict[(str, BaseSearchField)]"
                ]
            }
        },
        "BaseSearchSet.storage": {
            "name": "storage",
            "location": 169,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "BaseSearchSet.get_fields_values": {
            "name": "get_fields_values",
            "location": 173,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": [],
                "qs": [],
                "field_name": [],
                "prefix": [],
                "cache_key": [],
                "max_return_suggestions_count": [],
                "allow_empty_values": [],
                "sort_values": []
            }
        },
        "BaseSearchSet._get_raw_mapping": {
            "name": "_get_raw_mapping",
            "location": 213,
            "return": [
                "Dict[(str, FieldType)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseSearchSet.get_query_for_field": {
            "name": "get_query_for_field",
            "location": 220,
            "return": [],
            "arguments": {
                "cls": [],
                "condition": []
            }
        }
    },
    "lucyfer-master/lucyfer/searchset/django.py": {
        "DjangoSearchSet.filter": {
            "name": "filter",
            "location": 39,
            "return": [],
            "arguments": {
                "cls": [],
                "queryset": [],
                "search_terms": [],
                "raise_exception": []
            }
        },
        "DjangoSearchSet._get_raw_mapping": {
            "name": "_get_raw_mapping",
            "location": 50,
            "return": [
                "Dict[(str, FieldType)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "DjangoSearchSet.get_fields_sources": {
            "name": "get_fields_sources",
            "location": 56,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "lucyfer-master/lucyfer/searchset/elastic.py": {
        "ElasticSearchSet.get_es_client": {
            "name": "get_es_client",
            "location": 32,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ElasticSearchSet.filter": {
            "name": "filter",
            "location": 36,
            "return": [],
            "arguments": {
                "cls": [],
                "search": [],
                "search_terms": [],
                "raise_exception": []
            }
        },
        "ElasticSearchSet._format_mapping_values": {
            "name": "_format_mapping_values",
            "location": 47,
            "return": [
                "Dict[(str, FieldType)]"
            ],
            "arguments": {
                "cls": [],
                "mapping": [],
                "prefix": []
            }
        },
        "ElasticSearchSet._get_raw_mapping": {
            "name": "_get_raw_mapping",
            "location": 62,
            "return": [
                "Dict[(str, FieldType)]"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "lucyfer-master/lucyfer/searchset/storage.py": {
        "SearchSetStorage.mapping": {
            "name": "mapping",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchSetStorage.raw_mapping": {
            "name": "raw_mapping",
            "location": 40,
            "return": [
                "Dict[(str, FieldType)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchSetStorage.field_source_to_field": {
            "name": "field_source_to_field",
            "location": 50,
            "return": [
                "Dict[(str, BaseSearchField)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lucyfer-master/lucyfer/searchset/utils.py": {},
    "lucyfer-master/lucyfer/searchset/__init__.py": {},
    "lucyfer-master/lucyfer/searchset/fields/base.py": {
        "negate_query_if_necessary": {
            "name": "negate_query_if_necessary",
            "location": 88,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "BaseSearchField.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "sources": [
                    "Optional[List[str]]"
                ],
                "exclude_sources_from_mapping": [
                    "bool"
                ],
                "show_suggestions": [
                    "bool"
                ],
                "get_available_values_method": [
                    "Optional[Callable[(..., List[Any])]]"
                ],
                "available_values_method_kwargs": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "use_field_class_for_sources": [
                    "bool"
                ],
                "use_cache_for_suggestions": [
                    "bool"
                ]
            }
        },
        "BaseSearchField._contribute_to_class": {
            "name": "_contribute_to_class",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": []
            }
        },
        "BaseSearchField.cast_value": {
            "name": "cast_value",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "BaseSearchField.get_lookup": {
            "name": "get_lookup",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "operator": [
                    "Operator"
                ]
            }
        },
        "BaseSearchField.get_sources": {
            "name": "get_sources",
            "location": 64,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "str"
                ]
            }
        },
        "BaseSearchField.get_query": {
            "name": "get_query",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "condition": []
            }
        },
        "BaseSearchField.match_all": {
            "name": "match_all",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "BaseSearchField.get_available_values_method": {
            "name": "get_available_values_method",
            "location": 84,
            "return": [
                "Optional[Callable[(..., List[Any])]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "negate_query_if_necessary.wrapper": {
            "name": "wrapper",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "condition": []
            }
        }
    },
    "lucyfer-master/lucyfer/searchset/fields/django.py": {
        "DjangoSearchFieldWithoutWildcard.create_query_for_sources": {
            "name": "create_query_for_sources",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "condition": []
            }
        },
        "DjangoSearchFieldWithoutWildcard.get_query": {
            "name": "get_query",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "condition": []
            }
        },
        "DjangoWildcardMixin.process_wildcard": {
            "name": "process_wildcard",
            "location": 36,
            "return": [
                "Tuple[(str, Optional[str])]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "DjangoSearchField.create_query_for_sources": {
            "name": "create_query_for_sources",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "condition": []
            }
        },
        "DjangoIntegerField.cast_value": {
            "name": "cast_value",
            "location": 89,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "DjangoFloatField.cast_value": {
            "name": "cast_value",
            "location": 97,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "DjangoBooleanField.cast_value": {
            "name": "cast_value",
            "location": 113,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        }
    },
    "lucyfer-master/lucyfer/searchset/fields/elastic.py": {
        "ElasticSearchField.create_query_for_sources": {
            "name": "create_query_for_sources",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "condition": []
            }
        },
        "ElasticSearchField._get_query_for_term": {
            "name": "_get_query_for_term",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "sources": [
                    "List[str]"
                ],
                "lookup": [
                    "str"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "ElasticSearchField._get_query_for_range": {
            "name": "_get_query_for_range",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "sources": [
                    "List[str]"
                ],
                "lookup": [
                    "str"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "ElasticSearchField._get_query_for_regex": {
            "name": "_get_query_for_regex",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "sources": [
                    "List[str]"
                ],
                "lookup": [
                    "str"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "ElasticSearchField._get_wildcard_or_lookup": {
            "name": "_get_wildcard_or_lookup",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "lookup": []
            }
        },
        "ElasticSearchField.get_query": {
            "name": "get_query",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "condition": []
            }
        },
        "ElasticSearchFieldWithoutWildCard._get_wildcard_or_lookup": {
            "name": "_get_wildcard_or_lookup",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "lookup": []
            }
        },
        "ElasticIntegerField.cast_value": {
            "name": "cast_value",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ElasticFloatField.cast_value": {
            "name": "cast_value",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ElasticBooleanField.create_query_for_sources": {
            "name": "create_query_for_sources",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "condition": []
            }
        },
        "ElasticBooleanField.cast_value": {
            "name": "cast_value",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ElasticQueryStringField.get_query": {
            "name": "get_query",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "condition": []
            }
        }
    },
    "lucyfer-master/lucyfer/searchset/fields/__init__.py": {},
    "lucyfer-master/lucyfer/searchset/fields/mapping/base.py": {
        "MappingMixin.get_values": {
            "name": "get_values",
            "location": 15,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "qs": [],
                "model_name": [
                    "str"
                ],
                "escape_quotes_in_suggestions": [
                    "bool"
                ],
                "prefix": [
                    "str"
                ],
                "cache_key": [
                    "str"
                ],
                "max_return_suggestions_count": [
                    "int"
                ],
                "allow_empty_values": [
                    "bool"
                ],
                "sort_values": [
                    "bool"
                ]
            }
        },
        "MappingMixin.prepare_qs_for_suggestions": {
            "name": "prepare_qs_for_suggestions",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "qs": [],
                "prefix": [
                    "str"
                ]
            }
        },
        "MappingMixin.get_suggestions_from_prepared_qs": {
            "name": "get_suggestions_from_prepared_qs",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "qs": [],
                "prefix": [
                    "str"
                ]
            }
        },
        "MappingMixin._get_values": {
            "name": "_get_values",
            "location": 61,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "qs": [],
                "prefix": [
                    "str"
                ],
                "escape_quotes_in_suggestions": [
                    "bool"
                ],
                "allow_empty_values": [
                    "bool"
                ]
            }
        },
        "MappingMixin._is_prefix_may_be_cached": {
            "name": "_is_prefix_may_be_cached",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": []
            }
        }
    },
    "lucyfer-master/lucyfer/searchset/fields/mapping/django.py": {
        "DjangoMappingMixin.prepare_qs_for_suggestions": {
            "name": "prepare_qs_for_suggestions",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "qs": [],
                "prefix": [
                    "str"
                ]
            }
        },
        "DjangoMappingMixin.get_suggestions_from_prepared_qs": {
            "name": "get_suggestions_from_prepared_qs",
            "location": 30,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "qs": [],
                "prefix": [
                    "str"
                ]
            }
        }
    },
    "lucyfer-master/lucyfer/searchset/fields/mapping/elastic.py": {
        "ElasticMappingMixin.prepare_qs_for_suggestions": {
            "name": "prepare_qs_for_suggestions",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "qs": [],
                "prefix": [
                    "str"
                ]
            }
        },
        "ElasticMappingMixin.get_suggestions_from_prepared_qs": {
            "name": "get_suggestions_from_prepared_qs",
            "location": 16,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "qs": [],
                "prefix": [
                    "str"
                ]
            }
        }
    },
    "lucyfer-master/lucyfer/searchset/fields/mapping/utils.py": {
        "escape_quotes": {
            "name": "escape_quotes",
            "location": 6,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "values": [
                    "List[str]"
                ]
            }
        },
        "ignore_empty_values": {
            "name": "ignore_empty_values",
            "location": 14,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "values": [
                    "List[str]"
                ]
            }
        },
        "custom_sorted": {
            "name": "custom_sorted",
            "location": 18,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "values": [
                    "List[str]"
                ]
            }
        }
    },
    "lucyfer-master/lucyfer/searchset/fields/mapping/__init__.py": {},
    "lucyfer-master/setup/setup.py": {
        "LucyferSetup.setup": {
            "name": "setup",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LucyferSetup.lib": {
            "name": "lib",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LucyferSetup.version": {
            "name": "version",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LucyferSetup._get_kwargs": {
            "name": "_get_kwargs",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LucyferSetup._get_package_dir": {
            "name": "_get_package_dir",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "LucyferSetup._get_requirements": {
            "name": "_get_requirements",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "lucyfer-master/setup/__init__.py": {},
    "lucyfer-master/tests/base.py": {
        "TestParsing._check_rule": {
            "name": "_check_rule",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "rule": [],
                "expected_query": []
            }
        },
        "TestParsing._check_rules": {
            "name": "_check_rules",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "rules": [],
                "expected_query": []
            }
        }
    },
    "lucyfer-master/tests/conftest.py": {
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 1,
            "return": [],
            "arguments": {
                "config": []
            }
        }
    },
    "lucyfer-master/tests/settings.py": {},
    "lucyfer-master/tests/test_django.py": {
        "UnicornSearchSet.raw_mapping": {
            "name": "raw_mapping",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLuceneToDjangoParsing.assertQueriesEqual": {
            "name": "assertQueriesEqual",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "q1": [],
                "q2": []
            }
        },
        "TestLuceneToDjangoParsing.test_bool_values": {
            "name": "test_bool_values",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "expected_query": [],
                "raw_expressions": []
            }
        },
        "TestLuceneToDjangoParsing.test_integer_values": {
            "name": "test_integer_values",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "expected_query": [],
                "raw_expressions": []
            }
        },
        "TestLuceneToDjangoParsing.test_float_values": {
            "name": "test_float_values",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "expected_query": [],
                "raw_expressions": []
            }
        },
        "TestLuceneToDjangoParsing.test_string_wo_quotes": {
            "name": "test_string_wo_quotes",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "expected_query": [],
                "raw_expressions": []
            }
        },
        "TestLuceneToDjangoParsing.test_string_w_double_quotes": {
            "name": "test_string_w_double_quotes",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "expected_query": [],
                "raw_expressions": []
            }
        },
        "TestLuceneToDjangoParsing.test_string_w_single_quotes": {
            "name": "test_string_w_single_quotes",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "expected_query": [],
                "raw_expressions": []
            }
        },
        "TestLuceneToDjangoParsing.test_rules_with_or_expression": {
            "name": "test_rules_with_or_expression",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "expected_query": [],
                "raw_expressions": []
            }
        },
        "TestLuceneToDjangoParsing.test_rules_with_and_expression": {
            "name": "test_rules_with_and_expression",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "expected_query": [],
                "raw_expressions": []
            }
        },
        "TestLuceneToDjangoParsing.test_several_dashes_rules": {
            "name": "test_several_dashes_rules",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "expected_query": [],
                "raw_expressions": []
            }
        },
        "TestLuceneToDjangoParsing.test_rule_with_source": {
            "name": "test_rule_with_source",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "expected_query": [],
                "raw_expressions": []
            }
        },
        "TestLuceneToDjangoParsing.test_negate_values": {
            "name": "test_negate_values",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "expected_query": [],
                "raw_expressions": []
            }
        },
        "TestLuceneToDjangoParsing.test_undefined_values": {
            "name": "test_undefined_values",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "expected_query": [],
                "raw_expressions": []
            }
        },
        "TestLuceneToDjangoParsing.test_autogenerated_fields_query": {
            "name": "test_autogenerated_fields_query",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "expected_query": [],
                "raw_expressions": []
            }
        },
        "TestLuceneToDjangoParsing.test_regex_query": {
            "name": "test_regex_query",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "expected_query": [],
                "raw_expressions": []
            }
        }
    },
    "lucyfer-master/tests/test_elastic.py": {
        "MyElasticSearchSet.get_es_client": {
            "name": "get_es_client",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "TestLuceneToDjangoParsing.assertQueriesEqual": {
            "name": "assertQueriesEqual",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "q1": [],
                "q2": []
            }
        },
        "TestLuceneToDjangoParsing.test_text_values": {
            "name": "test_text_values",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "expected_query": [],
                "raw_expressions": []
            }
        },
        "TestLuceneToDjangoParsing.test_values_with_source": {
            "name": "test_values_with_source",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "expected_query": [],
                "raw_expressions": []
            }
        },
        "TestLuceneToDjangoParsing.test_negate_values": {
            "name": "test_negate_values",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "expected_query": [],
                "raw_expressions": []
            }
        },
        "TestLuceneToDjangoParsing.test_boolean_values": {
            "name": "test_boolean_values",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "expected_query": [],
                "raw_expressions": []
            }
        },
        "TestLuceneToDjangoParsing.test_null_boolean_values": {
            "name": "test_null_boolean_values",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "expected_query": [],
                "raw_expressions": []
            }
        },
        "TestLuceneToDjangoParsing.test_regexp_query": {
            "name": "test_regexp_query",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "expected_query": [],
                "raw_expressions": []
            }
        }
    },
    "lucyfer-master/tests/test_metaclass.py": {
        "TestSearchSetMetaClass.test_metaclass_field": {
            "name": "test_metaclass_field",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSearchSetMetaClass.test_additional_meta_fields": {
            "name": "test_additional_meta_fields",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSearchSetMetaClass.test_default_fields_classa": {
            "name": "test_default_fields_classa",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSearchSetMetaClass.test_searchsets_mixins": {
            "name": "test_searchsets_mixins",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lucyfer-master/tests/test_storage.py": {
        "UnicornSearchSet.raw_mapping": {
            "name": "raw_mapping",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStorage.test_field_name_to_field": {
            "name": "test_field_name_to_field",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStorage.test_fields_to_exclude_from_mapping": {
            "name": "test_fields_to_exclude_from_mapping",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStorage.test_fields_to_exclude_from_suggestions": {
            "name": "test_fields_to_exclude_from_suggestions",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStorage.test_searchset_field": {
            "name": "test_searchset_field",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStorage.test_raw_mapping": {
            "name": "test_raw_mapping",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStorage.test_field_source_to_field": {
            "name": "test_field_source_to_field",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStorage.test_get_fields_sources": {
            "name": "test_get_fields_sources",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStorage.test_show_suggestion_for_raw_mapping_field": {
            "name": "test_show_suggestion_for_raw_mapping_field",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStorage.test_not_excluding_any_fields": {
            "name": "test_not_excluding_any_fields",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStorage.test_exclude_fields_in_searchset_class": {
            "name": "test_exclude_fields_in_searchset_class",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStorage.test_exclude_sources_in_field": {
            "name": "test_exclude_sources_in_field",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSearchHelpers.test_get_fields_values": {
            "name": "test_get_fields_values",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSearchHelpers.test_show_suggestions": {
            "name": "test_show_suggestions",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSearchHelpers.test_get_available_values": {
            "name": "test_get_available_values",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSearchHelpers.test_escape_quotes": {
            "name": "test_escape_quotes",
            "location": 290,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSearchHelpers.test_get_available_values.expected_available_values": {
            "name": "expected_available_values",
            "location": 273,
            "return": [],
            "arguments": {}
        },
        "TestStorage.test_fields_to_exclude_from_mapping.SearchSet.get_raw_mapping": {
            "name": "get_raw_mapping",
            "location": 46,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestStorage.test_fields_to_exclude_from_suggestions.SearchSet.get_raw_mapping": {
            "name": "get_raw_mapping",
            "location": 68,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestStorage.test_raw_mapping.SearchSet._get_raw_mapping": {
            "name": "_get_raw_mapping",
            "location": 90,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestStorage.test_field_source_to_field.SearchSet._get_raw_mapping": {
            "name": "_get_raw_mapping",
            "location": 106,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestStorage.test_get_fields_sources.SearchSet._get_raw_mapping": {
            "name": "_get_raw_mapping",
            "location": 140,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestStorage.test_show_suggestion_for_raw_mapping_field.SearchSet._get_raw_mapping": {
            "name": "_get_raw_mapping",
            "location": 155,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestStorage.test_not_excluding_any_fields.NotExcludingFieldsSearchSet._get_raw_mapping": {
            "name": "_get_raw_mapping",
            "location": 171,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestStorage.test_exclude_fields_in_searchset_class.ExcludeFieldsInClassSearchSet._get_raw_mapping": {
            "name": "_get_raw_mapping",
            "location": 185,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestStorage.test_exclude_sources_in_field.ExcludeSourcesInFieldsSearchSet._get_raw_mapping": {
            "name": "_get_raw_mapping",
            "location": 200,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestSearchHelpers.test_get_fields_values.MySearchSet.get_raw_mapping": {
            "name": "get_raw_mapping",
            "location": 217,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestSearchHelpers.test_show_suggestions.MySearchSet.get_raw_mapping": {
            "name": "get_raw_mapping",
            "location": 238,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestSearchHelpers.test_show_suggestions.SearchSet._get_raw_mapping": {
            "name": "_get_raw_mapping",
            "location": 260,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestSearchHelpers.test_get_available_values.MySearchSet.get_raw_mapping": {
            "name": "get_raw_mapping",
            "location": 281,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestSearchHelpers.test_escape_quotes.MySearchSet.get_raw_mapping": {
            "name": "get_raw_mapping",
            "location": 312,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "lucyfer-master/tests/utils.py": {
        "compare_dicts": {
            "name": "compare_dicts",
            "location": 8,
            "return": [],
            "arguments": {
                "d1": [],
                "d2": []
            }
        },
        "dict_merge": {
            "name": "dict_merge",
            "location": 44,
            "return": [],
            "arguments": {
                "dct": [],
                "merge_dct": []
            }
        },
        "DjangoModel.distinct": {
            "name": "distinct",
            "location": 82,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Indicies.get_mapping": {
            "name": "get_mapping",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "ElasticModel._get_index": {
            "name": "_get_index",
            "location": 98,
            "return": [],
            "arguments": {}
        },
        "EmptyDjangoModel.objects.filter": {
            "name": "filter",
            "location": 68,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "EmptyDjangoModel.objects.values_list": {
            "name": "values_list",
            "location": 72,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "EmptyDjangoModel.objects.distinct": {
            "name": "distinct",
            "location": 76,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "lucyfer-master/tests/__init__.py": {}
}
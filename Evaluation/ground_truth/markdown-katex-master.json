{
    "markdown-katex-master/setup.py": {
        "project_path": {
            "name": "project_path",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "read": {
            "name": "read",
            "location": 17,
            "return": [],
            "arguments": {}
        }
    },
    "markdown-katex-master/scripts/exit_0_if_empty.py": {},
    "markdown-katex-master/src/markdown_katex/extension.py": {
        "_clean_block_text": {
            "name": "_clean_block_text",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "block_text": [
                    "str"
                ]
            }
        },
        "make_marker_id": {
            "name": "make_marker_id",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "svg2img": {
            "name": "svg2img",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "html": [
                    "str"
                ]
            }
        },
        "tex2html": {
            "name": "tex2html",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "tex": [
                    "str"
                ],
                "options": [
                    "wrapper.Options"
                ]
            }
        },
        "md_block2html": {
            "name": "md_block2html",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "block_text": [
                    "str"
                ],
                "default_options": [
                    "wrapper.Options"
                ]
            }
        },
        "_clean_inline_text": {
            "name": "_clean_inline_text",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "inline_text": [
                    "str"
                ]
            }
        },
        "md_inline2html": {
            "name": "md_inline2html",
            "location": 116,
            "return": [
                "str"
            ],
            "arguments": {
                "inline_text": [
                    "str"
                ],
                "default_options": [
                    "wrapper.Options"
                ]
            }
        },
        "iter_inline_katex": {
            "name": "iter_inline_katex",
            "location": 132,
            "return": [
                "typ.Iterable[InlineCodeItem]"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "KatexExtension.__init__": {
            "name": "__init__",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KatexExtension.reset": {
            "name": "reset",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KatexExtension.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "md": []
            }
        },
        "KatexPreprocessor.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [],
                "ext": [
                    "KatexExtension"
                ]
            }
        },
        "KatexPreprocessor._make_tag_for_block": {
            "name": "_make_tag_for_block",
            "location": 198,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "block_lines": [
                    "typ.List[str]"
                ]
            }
        },
        "KatexPreprocessor._make_tag_for_inline": {
            "name": "_make_tag_for_inline",
            "location": 210,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "inline_text": [
                    "str"
                ]
            }
        },
        "KatexPreprocessor._iter_out_lines": {
            "name": "_iter_out_lines",
            "location": 218,
            "return": [
                "typ.Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "typ.List[str]"
                ]
            }
        },
        "KatexPreprocessor.run": {
            "name": "run",
            "location": 267,
            "return": [
                "typ.List[str]"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "typ.List[str]"
                ]
            }
        },
        "KatexPostprocessor.__init__": {
            "name": "__init__",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [],
                "ext": [
                    "KatexExtension"
                ]
            }
        },
        "KatexPostprocessor.run": {
            "name": "run",
            "location": 286,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        }
    },
    "markdown-katex-master/src/markdown_katex/html.py": {},
    "markdown-katex-master/src/markdown_katex/wrapper.py": {
        "_get_env_paths": {
            "name": "_get_env_paths",
            "location": 56,
            "return": [
                "typ.Iterable[pl.Path]"
            ],
            "arguments": {}
        },
        "_get_local_bin_candidates": {
            "name": "_get_local_bin_candidates",
            "location": 68,
            "return": [
                "typ.List[str]"
            ],
            "arguments": {}
        },
        "_get_usr_parts": {
            "name": "_get_usr_parts",
            "location": 83,
            "return": [
                "typ.Optional[typ.List[str]]"
            ],
            "arguments": {}
        },
        "_get_pkg_bin_path": {
            "name": "_get_pkg_bin_path",
            "location": 120,
            "return": [
                "pl.Path"
            ],
            "arguments": {
                "osname": [
                    "str"
                ],
                "machine": [
                    "str"
                ]
            }
        },
        "get_bin_cmd": {
            "name": "get_bin_cmd",
            "location": 138,
            "return": [
                "typ.List[str]"
            ],
            "arguments": {}
        },
        "_iter_output_lines": {
            "name": "_iter_output_lines",
            "location": 147,
            "return": [
                "typ.Iterable[bytes]"
            ],
            "arguments": {
                "buf": [
                    "typ.IO[bytes]"
                ]
            }
        },
        "read_output": {
            "name": "read_output",
            "location": 156,
            "return": [
                "str"
            ],
            "arguments": {
                "buf": [
                    "typ.Optional[typ.IO[bytes]]"
                ]
            }
        },
        "_iter_cmd_parts": {
            "name": "_iter_cmd_parts",
            "location": 169,
            "return": [
                "typ.Iterable[str]"
            ],
            "arguments": {
                "options": [
                    "Options"
                ]
            }
        },
        "_cmd_digest": {
            "name": "_cmd_digest",
            "location": 190,
            "return": [
                "str"
            ],
            "arguments": {
                "tex": [
                    "str"
                ],
                "cmd_parts": [
                    "typ.List[str]"
                ]
            }
        },
        "_write_tex2html": {
            "name": "_write_tex2html",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd_parts": [
                    "typ.List[str]"
                ],
                "tex": [
                    "str"
                ],
                "tmp_output_file": [
                    "pl.Path"
                ]
            }
        },
        "tex2html": {
            "name": "tex2html",
            "location": 237,
            "return": [
                "str"
            ],
            "arguments": {
                "tex": [
                    "str"
                ],
                "options": [
                    "Options"
                ]
            }
        },
        "_cleanup_tmp_dir": {
            "name": "_cleanup_tmp_dir",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_get_cmd_help_text": {
            "name": "_get_cmd_help_text",
            "location": 293,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "_parse_options_help_text": {
            "name": "_parse_options_help_text",
            "location": 320,
            "return": [
                "OptionsHelp"
            ],
            "arguments": {
                "help_text": [
                    "str"
                ]
            }
        },
        "parse_options": {
            "name": "parse_options",
            "location": 343,
            "return": [
                "OptionsHelp"
            ],
            "arguments": {}
        }
    },
    "markdown-katex-master/src/markdown_katex/__init__.py": {
        "_make_extension": {
            "name": "_make_extension",
            "location": 20,
            "return": [
                "KatexExtension"
            ],
            "arguments": {}
        }
    },
    "markdown-katex-master/src/markdown_katex/__main__.py": {
        "_selftest": {
            "name": "_selftest",
            "location": 26,
            "return": [
                "ExitCode"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 54,
            "return": [
                "ExitCode"
            ],
            "arguments": {
                "args": [
                    "typ.Sequence[str]"
                ]
            }
        }
    },
    "markdown-katex-master/stubs/pathlib2.py": {
        "PurePath.__hash__": {
            "name": "__hash__",
            "location": 30,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PurePath.__lt__": {
            "name": "__lt__",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "PurePath"
                ]
            }
        },
        "PurePath.__le__": {
            "name": "__le__",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "PurePath"
                ]
            }
        },
        "PurePath.__gt__": {
            "name": "__gt__",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "PurePath"
                ]
            }
        },
        "PurePath.__ge__": {
            "name": "__ge__",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "PurePath"
                ]
            }
        },
        "PurePath.__truediv__": {
            "name": "__truediv__",
            "location": 35,
            "return": [
                "_P"
            ],
            "arguments": {
                "self": [
                    "_P"
                ],
                "key": [
                    "Union[(str, PurePath)]"
                ]
            }
        },
        "PurePath.__bytes__": {
            "name": "__bytes__",
            "location": 36,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "PurePath.as_posix": {
            "name": "as_posix",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PurePath.as_uri": {
            "name": "as_uri",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PurePath.is_absolute": {
            "name": "is_absolute",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PurePath.is_reserved": {
            "name": "is_reserved",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PurePath.match": {
            "name": "match",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path_pattern": [
                    "str"
                ]
            }
        },
        "PurePath.relative_to": {
            "name": "relative_to",
            "location": 42,
            "return": [
                "_P"
            ],
            "arguments": {
                "self": [
                    "_P"
                ]
            }
        },
        "PurePath.with_name": {
            "name": "with_name",
            "location": 43,
            "return": [
                "_P"
            ],
            "arguments": {
                "self": [
                    "_P"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "PurePath.with_suffix": {
            "name": "with_suffix",
            "location": 44,
            "return": [
                "_P"
            ],
            "arguments": {
                "self": [
                    "_P"
                ],
                "suffix": [
                    "str"
                ]
            }
        },
        "PurePath.joinpath": {
            "name": "joinpath",
            "location": 45,
            "return": [
                "_P"
            ],
            "arguments": {
                "self": [
                    "_P"
                ]
            }
        },
        "PurePath.parents": {
            "name": "parents",
            "location": 48,
            "return": [
                "Sequence[_P]"
            ],
            "arguments": {
                "self": [
                    "_P"
                ]
            }
        },
        "PurePath.parent": {
            "name": "parent",
            "location": 50,
            "return": [
                "_P"
            ],
            "arguments": {
                "self": [
                    "_P"
                ]
            }
        },
        "Path.__enter__": {
            "name": "__enter__",
            "location": 56,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.__exit__": {
            "name": "__exit__",
            "location": 57,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_value": [
                    "Optional[BaseException]"
                ],
                "traceback": [
                    "Optional[TracebackType]"
                ]
            }
        },
        "Path.cwd": {
            "name": "cwd",
            "location": 61,
            "return": [
                "_P"
            ],
            "arguments": {
                "cls": [
                    "Type[_P]"
                ]
            }
        },
        "Path.stat": {
            "name": "stat",
            "location": 62,
            "return": [
                "os.stat_result"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.chmod": {
            "name": "chmod",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "int"
                ]
            }
        },
        "Path.exists": {
            "name": "exists",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.glob": {
            "name": "glob",
            "location": 65,
            "return": [
                "Generator[(Path, None, None)]"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str"
                ]
            }
        },
        "Path.group": {
            "name": "group",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.is_dir": {
            "name": "is_dir",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.is_file": {
            "name": "is_file",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.is_symlink": {
            "name": "is_symlink",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.is_socket": {
            "name": "is_socket",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.is_fifo": {
            "name": "is_fifo",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.is_block_device": {
            "name": "is_block_device",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.is_char_device": {
            "name": "is_char_device",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.iterdir": {
            "name": "iterdir",
            "location": 74,
            "return": [
                "Generator[(Path, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.lchmod": {
            "name": "lchmod",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "int"
                ]
            }
        },
        "Path.lstat": {
            "name": "lstat",
            "location": 76,
            "return": [
                "os.stat_result"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.open": {
            "name": "open",
            "location": 83,
            "return": [
                "IO[Any]"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str"
                ],
                "buffering": [
                    "int"
                ],
                "encoding": [
                    "Optional[str]"
                ],
                "errors": [
                    "Optional[str]"
                ],
                "newline": [
                    "Optional[str]"
                ]
            }
        },
        "Path.owner": {
            "name": "owner",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.rename": {
            "name": "rename",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Union[(str, PurePath)]"
                ]
            }
        },
        "Path.replace": {
            "name": "replace",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Union[(str, PurePath)]"
                ]
            }
        },
        "Path.rglob": {
            "name": "rglob",
            "location": 93,
            "return": [
                "Generator[(Path, None, None)]"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str"
                ]
            }
        },
        "Path.rmdir": {
            "name": "rmdir",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.symlink_to": {
            "name": "symlink_to",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Union[(str, Path)]"
                ],
                "target_is_directory": [
                    "bool"
                ]
            }
        },
        "Path.touch": {
            "name": "touch",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "int"
                ],
                "exist_ok": [
                    "bool"
                ]
            }
        },
        "Path.unlink": {
            "name": "unlink",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PurePath.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.mkdir": {
            "name": "mkdir",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "int"
                ],
                "parents": [
                    "bool"
                ],
                "exist_ok": [
                    "bool"
                ]
            }
        },
        "Path.resolve": {
            "name": "resolve",
            "location": 92,
            "return": [
                "_P"
            ],
            "arguments": {
                "self": [
                    "_P"
                ],
                "strict": [
                    "bool"
                ]
            }
        },
        "Path.home": {
            "name": "home",
            "location": 102,
            "return": [
                "_P"
            ],
            "arguments": {
                "cls": [
                    "Type[_P]"
                ]
            }
        },
        "Path.absolute": {
            "name": "absolute",
            "location": 110,
            "return": [
                "_P"
            ],
            "arguments": {
                "self": [
                    "_P"
                ]
            }
        },
        "Path.expanduser": {
            "name": "expanduser",
            "location": 111,
            "return": [
                "_P"
            ],
            "arguments": {
                "self": [
                    "_P"
                ]
            }
        },
        "Path.read_bytes": {
            "name": "read_bytes",
            "location": 112,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.read_text": {
            "name": "read_text",
            "location": 113,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "encoding": [
                    "Optional[str]"
                ],
                "errors": [
                    "Optional[str]"
                ]
            }
        },
        "Path.samefile": {
            "name": "samefile",
            "location": 115,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other_path": [
                    "Union[(str, bytes, int, Path)]"
                ]
            }
        },
        "Path.write_bytes": {
            "name": "write_bytes",
            "location": 116,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "Path.write_text": {
            "name": "write_text",
            "location": 117,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str"
                ],
                "encoding": [
                    "Optional[str]"
                ],
                "errors": [
                    "Optional[str]"
                ]
            }
        },
        "PurePath.__new__": {
            "name": "__new__",
            "location": 29,
            "return": [
                "_P"
            ],
            "arguments": {
                "cls": [
                    "Type[_P]"
                ]
            }
        },
        "Path.__new__": {
            "name": "__new__",
            "location": 107,
            "return": [
                "_P"
            ],
            "arguments": {
                "cls": [
                    "Type[_P]"
                ]
            }
        }
    },
    "markdown-katex-master/test/test_mdkatex.py": {
        "katex_output": {
            "name": "katex_output",
            "location": 76,
            "return": [],
            "arguments": {}
        },
        "test_svg2img": {
            "name": "test_svg2img",
            "location": 82,
            "return": [],
            "arguments": {
                "katex_output": []
            }
        },
        "test_regexp": {
            "name": "test_regexp",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "test_inline_parsing": {
            "name": "test_inline_parsing",
            "location": 126,
            "return": [],
            "arguments": {
                "line": [],
                "expected": []
            }
        },
        "test_inline_multiple": {
            "name": "test_inline_multiple",
            "location": 131,
            "return": [],
            "arguments": {}
        },
        "test_determinism": {
            "name": "test_determinism",
            "location": 147,
            "return": [],
            "arguments": {}
        },
        "test_tex2html": {
            "name": "test_tex2html",
            "location": 153,
            "return": [],
            "arguments": {}
        },
        "test_basic_block": {
            "name": "test_basic_block",
            "location": 167,
            "return": [],
            "arguments": {}
        },
        "test_block_styles": {
            "name": "test_block_styles",
            "location": 191,
            "return": [],
            "arguments": {}
        },
        "test_inline_basic": {
            "name": "test_inline_basic",
            "location": 213,
            "return": [],
            "arguments": {}
        },
        "test_trailing_whitespace": {
            "name": "test_trailing_whitespace",
            "location": 232,
            "return": [],
            "arguments": {}
        },
        "test_inline_quoted": {
            "name": "test_inline_quoted",
            "location": 241,
            "return": [],
            "arguments": {}
        },
        "test_marker_uniqueness": {
            "name": "test_marker_uniqueness",
            "location": 259,
            "return": [],
            "arguments": {}
        },
        "test_svg_uniqueness": {
            "name": "test_svg_uniqueness",
            "location": 275,
            "return": [],
            "arguments": {}
        },
        "test_no_inline_svg": {
            "name": "test_no_inline_svg",
            "location": 310,
            "return": [],
            "arguments": {}
        },
        "test_insert_fonts_css": {
            "name": "test_insert_fonts_css",
            "location": 333,
            "return": [],
            "arguments": {}
        },
        "test_err_msg": {
            "name": "test_err_msg",
            "location": 350,
            "return": [],
            "arguments": {}
        },
        "test_bin_paths": {
            "name": "test_bin_paths",
            "location": 362,
            "return": [],
            "arguments": {}
        },
        "test_html_output": {
            "name": "test_html_output",
            "location": 371,
            "return": [],
            "arguments": {}
        },
        "test_valid_xml": {
            "name": "test_valid_xml",
            "location": 418,
            "return": [],
            "arguments": {}
        },
        "test_ignore_in_non_math_block": {
            "name": "test_ignore_in_non_math_block",
            "location": 444,
            "return": [],
            "arguments": {}
        },
        "test_macro_file": {
            "name": "test_macro_file",
            "location": 489,
            "return": [],
            "arguments": {}
        },
        "test_md_in_html": {
            "name": "test_md_in_html",
            "location": 524,
            "return": [],
            "arguments": {}
        },
        "test_admonition": {
            "name": "test_admonition",
            "location": 564,
            "return": [],
            "arguments": {}
        },
        "test_paragraph_for_inline_equation": {
            "name": "test_paragraph_for_inline_equation",
            "location": 588,
            "return": [],
            "arguments": {}
        }
    },
    "markdown-katex-master/test/__init__.py": {}
}
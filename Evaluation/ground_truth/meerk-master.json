{
    "meerk-master/main.py": {
        "update_status": {
            "name": "update_status",
            "location": 45,
            "return": [],
            "arguments": {
                "calendar": [],
                "busy": [],
                "available": []
            }
        }
    },
    "meerk-master/setup.py": {},
    "meerk-master/meerk/__init__.py": {},
    "meerk-master/meerk/caldav/davclient.py": {
        "DAVResponse.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "DAVClient.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "proxy": [],
                "username": [],
                "password": [],
                "auth": [],
                "ssl_verify_cert": []
            }
        },
        "DAVClient.principal": {
            "name": "principal",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DAVClient.propfind": {
            "name": "propfind",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "props": [],
                "depth": []
            }
        },
        "DAVClient.proppatch": {
            "name": "proppatch",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "body": [],
                "dummy": []
            }
        },
        "DAVClient.report": {
            "name": "report",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "query": [],
                "depth": []
            }
        },
        "DAVClient.mkcol": {
            "name": "mkcol",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "body": [],
                "dummy": []
            }
        },
        "DAVClient.mkcalendar": {
            "name": "mkcalendar",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "body": [],
                "dummy": []
            }
        },
        "DAVClient.put": {
            "name": "put",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "body": [],
                "headers": []
            }
        },
        "DAVClient.delete": {
            "name": "delete",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "DAVClient.request": {
            "name": "request",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "method": [],
                "body": [],
                "headers": []
            }
        }
    },
    "meerk-master/meerk/caldav/objects.py": {
        "errmsg": {
            "name": "errmsg",
            "location": 26,
            "return": [],
            "arguments": {
                "r": []
            }
        },
        "DAVObject.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "url": [],
                "parent": [],
                "name": [],
                "id": []
            }
        },
        "DAVObject.canonical_url": {
            "name": "canonical_url",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DAVObject.children": {
            "name": "children",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "type": []
            }
        },
        "DAVObject._query_properties": {
            "name": "_query_properties",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "props": [],
                "depth": []
            }
        },
        "DAVObject._query": {
            "name": "_query",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "root": [],
                "depth": [],
                "query_method": [],
                "url": [],
                "expected_return_value": []
            }
        },
        "DAVObject._handle_prop_response": {
            "name": "_handle_prop_response",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "response": [],
                "props": [],
                "type": [],
                "what": []
            }
        },
        "DAVObject.get_properties": {
            "name": "get_properties",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "props": [],
                "depth": []
            }
        },
        "DAVObject.set_properties": {
            "name": "set_properties",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "props": []
            }
        },
        "DAVObject.save": {
            "name": "save",
            "location": 244,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DAVObject.delete": {
            "name": "delete",
            "location": 254,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DAVObject.__str__": {
            "name": "__str__",
            "location": 265,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DAVObject.__repr__": {
            "name": "__repr__",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CalendarSet.calendars": {
            "name": "calendars",
            "location": 273,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CalendarSet.make_calendar": {
            "name": "make_calendar",
            "location": 288,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "cal_id": [],
                "supported_calendar_component_set": []
            }
        },
        "CalendarSet.calendar": {
            "name": "calendar",
            "location": 309,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "cal_id": []
            }
        },
        "Principal.__init__": {
            "name": "__init__",
            "location": 336,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "url": []
            }
        },
        "Principal.make_calendar": {
            "name": "make_calendar",
            "location": 359,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "cal_id": [],
                "supported_calendar_component_set": []
            }
        },
        "Principal.calendar": {
            "name": "calendar",
            "location": 369,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "cal_id": []
            }
        },
        "Principal.calendar_home_set": {
            "name": "calendar_home_set",
            "location": 385,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "Principal.calendars": {
            "name": "calendars",
            "location": 398,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Calendar._create": {
            "name": "_create",
            "location": 410,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "id": [],
                "supported_calendar_component_set": []
            }
        },
        "Calendar.add_event": {
            "name": "add_event",
            "location": 486,
            "return": [],
            "arguments": {
                "self": [],
                "ical": []
            }
        },
        "Calendar.add_todo": {
            "name": "add_todo",
            "location": 495,
            "return": [],
            "arguments": {
                "self": [],
                "ical": []
            }
        },
        "Calendar.add_journal": {
            "name": "add_journal",
            "location": 504,
            "return": [],
            "arguments": {
                "self": [],
                "ical": []
            }
        },
        "Calendar.save": {
            "name": "save",
            "location": 513,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Calendar.date_search": {
            "name": "date_search",
            "location": 527,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "end": [],
                "compfilter": []
            }
        },
        "Calendar.freebusy_request": {
            "name": "freebusy_request",
            "location": 575,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "end": []
            }
        },
        "Calendar.todos": {
            "name": "todos",
            "location": 591,
            "return": [],
            "arguments": {
                "self": [],
                "sort_keys": [],
                "include_completed": [],
                "sort_key": []
            }
        },
        "Calendar._calendar_comp_class_by_data": {
            "name": "_calendar_comp_class_by_data",
            "location": 669,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Calendar.event_by_url": {
            "name": "event_by_url",
            "location": 680,
            "return": [],
            "arguments": {
                "self": [],
                "href": [],
                "data": []
            }
        },
        "Calendar.object_by_uid": {
            "name": "object_by_uid",
            "location": 686,
            "return": [],
            "arguments": {
                "self": [],
                "uid": [],
                "comp_filter": []
            }
        },
        "Calendar.todo_by_uid": {
            "name": "todo_by_uid",
            "location": 733,
            "return": [],
            "arguments": {
                "self": [],
                "uid": []
            }
        },
        "Calendar.event_by_uid": {
            "name": "event_by_uid",
            "location": 736,
            "return": [],
            "arguments": {
                "self": [],
                "uid": []
            }
        },
        "Calendar.events": {
            "name": "events",
            "location": 741,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Calendar.journals": {
            "name": "journals",
            "location": 767,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CalendarObjectResource.__init__": {
            "name": "__init__",
            "location": 805,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "url": [],
                "data": [],
                "parent": [],
                "id": []
            }
        },
        "CalendarObjectResource.copy": {
            "name": "copy",
            "location": 814,
            "return": [],
            "arguments": {
                "self": [],
                "keep_uid": [],
                "new_parent": []
            }
        },
        "CalendarObjectResource.load": {
            "name": "load",
            "location": 824,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CalendarObjectResource._create": {
            "name": "_create",
            "location": 834,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "id": [],
                "path": []
            }
        },
        "CalendarObjectResource.save": {
            "name": "save",
            "location": 873,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CalendarObjectResource.__str__": {
            "name": "__str__",
            "location": 885,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CalendarObjectResource._set_data": {
            "name": "_set_data",
            "location": 888,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "CalendarObjectResource._get_data": {
            "name": "_get_data",
            "location": 897,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CalendarObjectResource._set_instance": {
            "name": "_set_instance",
            "location": 902,
            "return": [],
            "arguments": {
                "self": [],
                "inst": []
            }
        },
        "CalendarObjectResource._get_instance": {
            "name": "_get_instance",
            "location": 907,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FreeBusy.__init__": {
            "name": "__init__",
            "location": 932,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [],
                "data": []
            }
        },
        "Todo.complete": {
            "name": "complete",
            "location": 947,
            "return": [],
            "arguments": {
                "self": [],
                "completion_timestamp": []
            }
        },
        "Calendar.todos.sort_key_func": {
            "name": "sort_key_func",
            "location": 636,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "meerk-master/meerk/caldav/__init__.py": {
        "NullHandler.emit": {
            "name": "emit",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        }
    },
    "meerk-master/meerk/caldav/elements/base.py": {
        "BaseElement.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "BaseElement.__add__": {
            "name": "__add__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BaseElement.__str__": {
            "name": "__str__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseElement.xmlelement": {
            "name": "xmlelement",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseElement.xmlchildren": {
            "name": "xmlchildren",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "BaseElement.append": {
            "name": "append",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "element": []
            }
        },
        "NamedBaseElement.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "NamedBaseElement.xmlelement": {
            "name": "xmlelement",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValuedBaseElement.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "meerk-master/meerk/caldav/elements/cdav.py": {
        "TextMatch.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "collation": [],
                "negate": []
            }
        },
        "TimeRange.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "end": []
            }
        },
        "Expand.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "end": []
            }
        }
    },
    "meerk-master/meerk/caldav/elements/dav.py": {},
    "meerk-master/meerk/caldav/elements/ical.py": {},
    "meerk-master/meerk/caldav/elements/__init__.py": {},
    "meerk-master/meerk/caldav/lib/error.py": {
        "AuthorizationError.__str__": {
            "name": "__str__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "meerk-master/meerk/caldav/lib/namespace.py": {
        "ns": {
            "name": "ns",
            "location": 21,
            "return": [],
            "arguments": {
                "prefix": [],
                "tag": []
            }
        }
    },
    "meerk-master/meerk/caldav/lib/python_utilities.py": {
        "isPython3": {
            "name": "isPython3",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "to_wire": {
            "name": "to_wire",
            "location": 9,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "to_local": {
            "name": "to_local",
            "location": 17,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "to_str": {
            "name": "to_str",
            "location": 23,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "to_unicode": {
            "name": "to_unicode",
            "location": 29,
            "return": [],
            "arguments": {
                "text": []
            }
        }
    },
    "meerk-master/meerk/caldav/lib/url.py": {
        "uc2utf8": {
            "name": "uc2utf8",
            "location": 13,
            "return": [],
            "arguments": {
                "input": []
            }
        },
        "make": {
            "name": "make",
            "location": 188,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "URL.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "URL.__bool__": {
            "name": "__bool__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URL.__ne__": {
            "name": "__ne__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "URL.__eq__": {
            "name": "__eq__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "URL.objectify": {
            "name": "objectify",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "URL.__getattr__": {
            "name": "__getattr__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "attr": []
            }
        },
        "URL.__str__": {
            "name": "__str__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URL.__unicode__": {
            "name": "__unicode__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URL.__repr__": {
            "name": "__repr__",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URL.strip_trailing_slash": {
            "name": "strip_trailing_slash",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URL.is_auth": {
            "name": "is_auth",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URL.unauth": {
            "name": "unauth",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URL.canonical": {
            "name": "canonical",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URL.join": {
            "name": "join",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        }
    },
    "meerk-master/meerk/caldav/lib/vcal.py": {
        "fix": {
            "name": "fix",
            "location": 9,
            "return": [],
            "arguments": {
                "event": []
            }
        }
    },
    "meerk-master/meerk/caldav/lib/__init__.py": {},
    "meerk-master/meerk/calendar/CalDavCalendar.py": {
        "CalDavCalendar.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dav": [
                    "DAVClient"
                ],
                "intervals": [
                    "CalEventsIntervals"
                ]
            }
        },
        "CalDavCalendar.is_busy": {
            "name": "is_busy",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "time": [
                    "datetime"
                ]
            }
        },
        "CalDavCalendar.sync": {
            "name": "sync",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "meerk-master/meerk/calendar/Calendar.py": {
        "Calendar.is_busy": {
            "name": "is_busy",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "time": [
                    "datetime"
                ]
            }
        },
        "Calendar.sync": {
            "name": "sync",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "meerk-master/meerk/calendar/CompositeCalendar.py": {
        "CompositeCalendar.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "calendars": [
                    "List[Calendar]"
                ]
            }
        },
        "CompositeCalendar.is_busy": {
            "name": "is_busy",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "time": [
                    "datetime"
                ]
            }
        },
        "CompositeCalendar.sync": {
            "name": "sync",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "meerk-master/meerk/calendar/IcsCalendar.py": {
        "IcsCalendar.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "intervals": [
                    "CalEventsIntervals"
                ]
            }
        },
        "IcsCalendar.is_busy": {
            "name": "is_busy",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "time": [
                    "datetime"
                ]
            }
        },
        "IcsCalendar.sync": {
            "name": "sync",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "meerk-master/meerk/calendar/IgnoreDisconnectCalendar.py": {
        "IgnoreDisconnectCalendar.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "origin": [
                    "Calendar"
                ]
            }
        },
        "IgnoreDisconnectCalendar.is_busy": {
            "name": "is_busy",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "time": [
                    "datetime"
                ]
            }
        },
        "IgnoreDisconnectCalendar.sync": {
            "name": "sync",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "meerk-master/meerk/calendar/LoggableCalendar.py": {
        "LoggableCalendar.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "origin": [
                    "Calendar"
                ]
            }
        },
        "LoggableCalendar.is_busy": {
            "name": "is_busy",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "time": [
                    "datetime"
                ]
            }
        },
        "LoggableCalendar.sync": {
            "name": "sync",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "meerk-master/meerk/calendar/__init__.py": {},
    "meerk-master/meerk/intervals/CalEventsIntervals.py": {
        "CalEventsIntervals.clear": {
            "name": "clear",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CalEventsIntervals.add": {
            "name": "add",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "components": [
                    "List[Component]"
                ],
                "start": [
                    "datetime"
                ],
                "end": [
                    "datetime"
                ]
            }
        },
        "CalEventsIntervals.is_inside": {
            "name": "is_inside",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "time": [
                    "datetime"
                ]
            }
        }
    },
    "meerk-master/meerk/intervals/InMemoryTimeIntervals.py": {
        "InMemporyTimeIntervals.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InMemporyTimeIntervals.clear": {
            "name": "clear",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemporyTimeIntervals.add": {
            "name": "add",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "datetime"
                ],
                "end": [
                    "datetime"
                ],
                "data": [
                    "object"
                ]
            }
        },
        "InMemporyTimeIntervals.is_inside": {
            "name": "is_inside",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "time": [
                    "datetime"
                ]
            }
        }
    },
    "meerk-master/meerk/intervals/SimpleCalEventsIntervals.py": {
        "SimpleCalEventsIntervals.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tzlocal": [
                    "tzinfo"
                ],
                "intervals": [
                    "TimeIntervals"
                ]
            }
        },
        "SimpleCalEventsIntervals.clear": {
            "name": "clear",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleCalEventsIntervals.add": {
            "name": "add",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "components": [
                    "List[Component]"
                ],
                "start": [
                    "datetime"
                ],
                "end": [
                    "datetime"
                ]
            }
        },
        "SimpleCalEventsIntervals.is_inside": {
            "name": "is_inside",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "time": [
                    "datetime"
                ]
            }
        },
        "SimpleCalEventsIntervals.__is_intersect": {
            "name": "__is_intersect",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "datetime"
                ],
                "b": [
                    "datetime"
                ],
                "c": [
                    "datetime"
                ],
                "d": [
                    "datetime"
                ]
            }
        },
        "SimpleCalEventsIntervals.__without_tzinfo": {
            "name": "__without_tzinfo",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "dt": []
            }
        }
    },
    "meerk-master/meerk/intervals/TimeIntervals.py": {
        "TimeIntervals.clear": {
            "name": "clear",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeIntervals.add": {
            "name": "add",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "datetime"
                ],
                "end": [
                    "datetime"
                ],
                "data": [
                    "object"
                ]
            }
        },
        "TimeIntervals.is_inside": {
            "name": "is_inside",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "time": [
                    "datetime"
                ]
            }
        }
    },
    "meerk-master/meerk/intervals/__init__.py": {},
    "meerk-master/meerk/slack/Api.py": {
        "Api.call": {
            "name": "call",
            "location": 29,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ]
            }
        }
    },
    "meerk-master/meerk/slack/IgnoreDisconnectApi.py": {
        "IgnoreDisconnectApi.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "origin": [
                    "Api"
                ]
            }
        },
        "IgnoreDisconnectApi.call": {
            "name": "call",
            "location": 32,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ]
            }
        }
    },
    "meerk-master/meerk/slack/SimpleApi.py": {
        "SimpleApi.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "slack": [
                    "SlackClient"
                ]
            }
        },
        "SimpleApi.call": {
            "name": "call",
            "location": 32,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ]
            }
        }
    },
    "meerk-master/meerk/slack/__init__.py": {},
    "meerk-master/meerk/status/CompositeStatus.py": {
        "CompositeStatus.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "statuses": [
                    "List[Status]"
                ]
            }
        },
        "CompositeStatus.sync": {
            "name": "sync",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "meerk-master/meerk/status/LoggableStatus.py": {
        "LoggableStatus.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "origin": [
                    "Status"
                ]
            }
        },
        "LoggableStatus.sync": {
            "name": "sync",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "meerk-master/meerk/status/SlackStatus.py": {
        "SlackStatus.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "slack": [
                    "Api"
                ],
                "text": [
                    "str"
                ],
                "emoji": [
                    "str"
                ]
            }
        },
        "SlackStatus.sync": {
            "name": "sync",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "meerk-master/meerk/status/Status.py": {
        "Status.sync": {
            "name": "sync",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "meerk-master/meerk/status/SyncException.py": {
        "SyncException.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "meerk-master/meerk/status/__init__.py": {},
    "meerk-master/tests/StaticAnalysisTest.py": {
        "StaticAnalysisTest.test_style": {
            "name": "test_style",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StaticAnalysisTest.test_style_tests": {
            "name": "test_style_tests",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StaticAnalysisTest.test_code_lint": {
            "name": "test_code_lint",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StaticAnalysisTest.test_tests_lint": {
            "name": "test_tests_lint",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StaticAnalysisTest.test_code_mypy": {
            "name": "test_code_mypy",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StaticAnalysisTest.test_tests_mypy": {
            "name": "test_tests_mypy",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StaticAnalysisTest.__mypy": {
            "name": "__mypy",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "StaticAnalysisTest.__pycodestyle": {
            "name": "__pycodestyle",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "StaticAnalysisTest.__pylint": {
            "name": "__pylint",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        }
    },
    "meerk-master/tests/__init__.py": {},
    "meerk-master/tests/intervals/SimpleCalEventsIntervalsTest.py": {
        "SimpleCalEventsIntervalsTest.test_exdates": {
            "name": "test_exdates",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleCalEventsIntervalsTest.test_dtstart_equals_dtend": {
            "name": "test_dtstart_equals_dtend",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleCalEventsIntervalsTest.test_dtend_is_hidden": {
            "name": "test_dtend_is_hidden",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleCalEventsIntervalsTest.test_all_day_event": {
            "name": "test_all_day_event",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleCalEventsIntervalsTest.test_all_day_daily_event": {
            "name": "test_all_day_daily_event",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleCalEventsIntervalsTest.test_all_day_daily_with_modification_event": {
            "name": "test_all_day_daily_with_modification_event",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "meerk-master/tests/intervals/__init__.py": {}
}
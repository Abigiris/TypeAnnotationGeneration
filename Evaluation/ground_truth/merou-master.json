{
    "merou-master/setup.py": {
        "get_package_data": {
            "name": "get_package_data",
            "location": 26,
            "return": [],
            "arguments": {
                "package": [],
                "base_dir": []
            }
        }
    },
    "merou-master/grouper/app.py": {
        "GrouperApplication.log_request": {
            "name": "log_request",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "handler": []
            }
        }
    },
    "merou-master/grouper/audit.py": {
        "user_is_auditor": {
            "name": "user_is_auditor",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "username": [
                    "str"
                ]
            }
        },
        "assert_controllers_are_auditors": {
            "name": "assert_controllers_are_auditors",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "group": [
                    "Group"
                ]
            }
        },
        "assert_can_join": {
            "name": "assert_can_join",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "group": [
                    "Group"
                ],
                "user_or_group": [
                    "Union[(Group, User)]"
                ],
                "role": [
                    "str"
                ]
            }
        },
        "get_audits": {
            "name": "get_audits",
            "location": 143,
            "return": [
                "Query"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "only_open": [
                    "bool"
                ]
            }
        },
        "get_auditors_group": {
            "name": "get_auditors_group",
            "location": 156,
            "return": [
                "Group"
            ],
            "arguments": {
                "settings": [
                    "Settings"
                ],
                "session": [
                    "Session"
                ]
            }
        },
        "get_group_audit_members_infos": {
            "name": "get_group_audit_members_infos",
            "location": 181,
            "return": [
                "List[AuditMemberInfo]"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "group": [
                    "Group"
                ]
            }
        },
        "group_has_pending_audit_members": {
            "name": "group_has_pending_audit_members",
            "location": 223,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "group": [
                    "Group"
                ]
            }
        }
    },
    "merou-master/grouper/constants.py": {},
    "merou-master/grouper/database.py": {
        "DbRefreshThread.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "settings": [],
                "plugins": [],
                "graph": [],
                "refresh_interval": []
            }
        },
        "DbRefreshThread.crash": {
            "name": "crash",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DbRefreshThread.run": {
            "name": "run",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/email_util.py": {
        "send_email": {
            "name": "send_email",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "recipients": [
                    "Iterable[str]"
                ],
                "subject": [
                    "str"
                ],
                "template": [
                    "str"
                ],
                "settings": [
                    "Settings"
                ],
                "context": [
                    "Context"
                ]
            }
        },
        "send_async_email": {
            "name": "send_async_email",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "recipients": [
                    "Iterable[str]"
                ],
                "subject": [
                    "str"
                ],
                "template": [
                    "str"
                ],
                "settings": [
                    "Settings"
                ],
                "context": [
                    "Context"
                ],
                "send_after": [
                    "datetime"
                ],
                "async_key": [
                    "Optional[str]"
                ]
            }
        },
        "cancel_async_emails": {
            "name": "cancel_async_emails",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "async_key": [
                    "str"
                ]
            }
        },
        "process_async_emails": {
            "name": "process_async_emails",
            "location": 107,
            "return": [
                "int"
            ],
            "arguments": {
                "settings": [
                    "Settings"
                ],
                "session": [
                    "Session"
                ],
                "now_ts": [
                    "datetime"
                ],
                "dry_run": [
                    "bool"
                ]
            }
        },
        "get_email_from_template": {
            "name": "get_email_from_template",
            "location": 156,
            "return": [
                "MIMEMultipart"
            ],
            "arguments": {
                "recipient_list": [
                    "Iterable[str]"
                ],
                "subject": [
                    "str"
                ],
                "template": [
                    "str"
                ],
                "settings": [
                    "Settings"
                ],
                "context": [
                    "Context"
                ]
            }
        },
        "send_email_raw": {
            "name": "send_email_raw",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "Settings"
                ],
                "recipient_list": [
                    "Iterable[str]"
                ],
                "msg_raw": [
                    "str"
                ]
            }
        },
        "notify_edge_expiration": {
            "name": "notify_edge_expiration",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "Settings"
                ],
                "session": [
                    "Session"
                ],
                "edge": [
                    "GroupEdge"
                ]
            }
        },
        "notify_nonauditor_promoted": {
            "name": "notify_nonauditor_promoted",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "Settings"
                ],
                "session": [
                    "Session"
                ],
                "user": [
                    "User"
                ],
                "auditors_group": [
                    "Group"
                ],
                "group_names": [
                    "Set[str]"
                ]
            }
        },
        "EmailTemplateEngine.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "Settings"
                ]
            }
        }
    },
    "merou-master/grouper/error_reporting.py": {
        "log_and_exit_handler": {
            "name": "log_and_exit_handler",
            "location": 18,
            "return": [],
            "arguments": {
                "signum": [],
                "frame": []
            }
        },
        "dump_thread_handler": {
            "name": "dump_thread_handler",
            "location": 24,
            "return": [],
            "arguments": {
                "signum": [],
                "frame": []
            }
        },
        "setup_signal_handlers": {
            "name": "setup_signal_handlers",
            "location": 31,
            "return": [],
            "arguments": {}
        }
    },
    "merou-master/grouper/expiration.py": {
        "_get_unsent_expirations": {
            "name": "_get_unsent_expirations",
            "location": 18,
            "return": [],
            "arguments": {
                "session": [],
                "now_ts": []
            }
        },
        "_expiration_key_data": {
            "name": "_expiration_key_data",
            "location": 40,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "_expiration_key": {
            "name": "_expiration_key",
            "location": 47,
            "return": [],
            "arguments": {
                "group_name": [],
                "member_name": []
            }
        },
        "add_expiration": {
            "name": "add_expiration",
            "location": 53,
            "return": [],
            "arguments": {
                "session": [],
                "expiration": [],
                "group_name": [],
                "member_name": [],
                "recipients": [],
                "member_is_user": []
            }
        },
        "cancel_expiration": {
            "name": "cancel_expiration",
            "location": 83,
            "return": [],
            "arguments": {
                "session": [],
                "group_name": [],
                "member_name": [],
                "recipients": []
            }
        }
    },
    "merou-master/grouper/graph.py": {
        "Graph": {
            "name": "Graph",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "GroupGraph.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupGraph.from_db": {
            "name": "from_db",
            "location": 131,
            "return": [],
            "arguments": {
                "cls": [],
                "session": []
            }
        },
        "GroupGraph.groups": {
            "name": "groups",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupGraph.permissions": {
            "name": "permissions",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupGraph.users": {
            "name": "users",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupGraph.update_from_db": {
            "name": "update_from_db",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "GroupGraph._get_checkpoint": {
            "name": "_get_checkpoint",
            "location": 212,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "GroupGraph._get_user_metadata": {
            "name": "_get_user_metadata",
            "location": 220,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "GroupGraph._get_group_grants": {
            "name": "_get_group_grants",
            "location": 301,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "GroupGraph._get_permissions": {
            "name": "_get_permissions",
            "location": 341,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "GroupGraph._get_groups": {
            "name": "_get_groups",
            "location": 357,
            "return": [],
            "arguments": {
                "session": [],
                "user_metadata": []
            }
        },
        "GroupGraph._get_group_service_accounts": {
            "name": "_get_group_service_accounts",
            "location": 382,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "GroupGraph._get_nodes": {
            "name": "_get_nodes",
            "location": 396,
            "return": [],
            "arguments": {
                "groups": [],
                "user_metadata": []
            }
        },
        "GroupGraph._get_edges": {
            "name": "_get_edges",
            "location": 401,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "GroupGraph._get_grants_by_permission": {
            "name": "_get_grants_by_permission",
            "location": 458,
            "return": [],
            "arguments": {
                "permission_graph": [],
                "group_grants": [],
                "service_account_grants": [],
                "user_metadata": []
            }
        },
        "GroupGraph.all_grants": {
            "name": "all_grants",
            "location": 523,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupGraph.all_grants_of_permission": {
            "name": "all_grants_of_permission",
            "location": 527,
            "return": [],
            "arguments": {
                "self": [],
                "permission": []
            }
        },
        "GroupGraph.all_user_metadata": {
            "name": "all_user_metadata",
            "location": 532,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupGraph.get_permissions": {
            "name": "get_permissions",
            "location": 555,
            "return": [],
            "arguments": {
                "self": [],
                "audited": []
            }
        },
        "GroupGraph.get_permission_details": {
            "name": "get_permission_details",
            "location": 565,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "expose_aliases": []
            }
        },
        "GroupGraph.get_disabled_groups": {
            "name": "get_disabled_groups",
            "location": 618,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupGraph.get_groups": {
            "name": "get_groups",
            "location": 624,
            "return": [],
            "arguments": {
                "self": [],
                "audited": [],
                "directly_audited": []
            }
        },
        "GroupGraph.get_group_details": {
            "name": "get_group_details",
            "location": 663,
            "return": [],
            "arguments": {
                "self": [],
                "groupname": [],
                "show_permission": [],
                "expose_aliases": []
            }
        },
        "GroupGraph.get_user_details": {
            "name": "get_user_details",
            "location": 767,
            "return": [],
            "arguments": {
                "self": [],
                "username": [],
                "expose_aliases": []
            }
        },
        "GroupGraph._get_user_metadata.user_indexify": {
            "name": "user_indexify",
            "location": 224,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "GroupGraph.get_groups.is_directly_audited": {
            "name": "is_directly_audited",
            "location": 639,
            "return": [],
            "arguments": {
                "group": []
            }
        }
    },
    "merou-master/grouper/group.py": {
        "get_all_groups": {
            "name": "get_all_groups",
            "location": 10,
            "return": [],
            "arguments": {
                "session": []
            }
        }
    },
    "merou-master/grouper/group_member.py": {
        "_serialize_changes": {
            "name": "_serialize_changes",
            "location": 34,
            "return": [],
            "arguments": {
                "edge": []
            }
        },
        "_validate_role": {
            "name": "_validate_role",
            "location": 47,
            "return": [],
            "arguments": {
                "member_type": [],
                "role": []
            }
        },
        "_get_edge": {
            "name": "_get_edge",
            "location": 53,
            "return": [],
            "arguments": {
                "session": [],
                "group": [],
                "member": []
            }
        },
        "_create_edge": {
            "name": "_create_edge",
            "location": 60,
            "return": [],
            "arguments": {
                "session": [],
                "group": [],
                "member": [],
                "role": []
            }
        },
        "persist_group_member_changes": {
            "name": "persist_group_member_changes",
            "location": 77,
            "return": [],
            "arguments": {
                "session": [],
                "group": [],
                "requester": [],
                "member": [],
                "status": [],
                "reason": [],
                "create_edge": []
            }
        }
    },
    "merou-master/grouper/group_requests.py": {
        "get_requests_by_group": {
            "name": "get_requests_by_group",
            "location": 18,
            "return": [],
            "arguments": {
                "session": [],
                "group": [],
                "status": [],
                "user": []
            }
        },
        "count_requests_by_group": {
            "name": "count_requests_by_group",
            "location": 65,
            "return": [],
            "arguments": {
                "session": [],
                "group": [],
                "status": [],
                "user": []
            }
        }
    },
    "merou-master/grouper/group_service_account.py": {
        "add_service_account": {
            "name": "add_service_account",
            "location": 15,
            "return": [],
            "arguments": {
                "session": [],
                "group": [],
                "service_account": []
            }
        },
        "get_service_accounts": {
            "name": "get_service_accounts",
            "location": 26,
            "return": [],
            "arguments": {
                "session": [],
                "group": []
            }
        }
    },
    "merou-master/grouper/initialization.py": {
        "create_graph_usecase_factory": {
            "name": "create_graph_usecase_factory",
            "location": 20,
            "return": [],
            "arguments": {
                "settings": [],
                "plugins": [],
                "session_factory": [],
                "graph": []
            }
        },
        "create_sql_usecase_factory": {
            "name": "create_sql_usecase_factory",
            "location": 39,
            "return": [],
            "arguments": {
                "settings": [],
                "plugins": [],
                "session_factory": []
            }
        }
    },
    "merou-master/grouper/oneoff.py": {
        "BaseOneOff.configure": {
            "name": "configure",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "service_name": []
            }
        },
        "BaseOneOff.run": {
            "name": "run",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "merou-master/grouper/perf_profile.py": {
        "prune_old_traces": {
            "name": "prune_old_traces",
            "location": 21,
            "return": [],
            "arguments": {
                "session": [],
                "delta": []
            }
        },
        "record_trace": {
            "name": "record_trace",
            "location": 33,
            "return": [],
            "arguments": {
                "session": [],
                "collector": [],
                "trace_uuid": []
            }
        },
        "get_trace": {
            "name": "get_trace",
            "location": 49,
            "return": [],
            "arguments": {
                "session": [],
                "trace_uuid": []
            }
        },
        "get_flamegraph_svg": {
            "name": "get_flamegraph_svg",
            "location": 66,
            "return": [],
            "arguments": {
                "session": [],
                "trace_uuid": []
            }
        }
    },
    "merou-master/grouper/permissions.py": {
        "create_permission": {
            "name": "create_permission",
            "location": 56,
            "return": [
                "Permission"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "name": [
                    "str"
                ],
                "description": [
                    "Optional[str]"
                ]
            }
        },
        "get_all_permissions": {
            "name": "get_all_permissions",
            "location": 65,
            "return": [
                "List[Permission]"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "include_disabled": [
                    "bool"
                ]
            }
        },
        "get_permission": {
            "name": "get_permission",
            "location": 80,
            "return": [
                "Optional[Permission]"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "get_or_create_permission": {
            "name": "get_or_create_permission",
            "location": 84,
            "return": [
                "Tuple[(Optional[Permission], bool)]"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "name": [
                    "str"
                ],
                "description": [
                    "Optional[str]"
                ]
            }
        },
        "grant_permission": {
            "name": "grant_permission",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "group_id": [
                    "int"
                ],
                "permission_id": [
                    "int"
                ],
                "argument": [
                    "str"
                ]
            }
        },
        "grant_permission_to_service_account": {
            "name": "grant_permission_to_service_account",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "account": [
                    "ServiceAccount"
                ],
                "permission": [
                    "Permission"
                ],
                "argument": [
                    "str"
                ]
            }
        },
        "enable_permission_auditing": {
            "name": "enable_permission_auditing",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "permission_name": [
                    "str"
                ],
                "actor_user_id": [
                    "int"
                ]
            }
        },
        "disable_permission_auditing": {
            "name": "disable_permission_auditing",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "permission_name": [
                    "str"
                ],
                "actor_user_id": [
                    "int"
                ]
            }
        },
        "get_groups_by_permission": {
            "name": "get_groups_by_permission",
            "location": 210,
            "return": [
                "List[Tuple[(str, str)]]"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "permission": [
                    "Permission"
                ]
            }
        },
        "filter_grantable_permissions": {
            "name": "filter_grantable_permissions",
            "location": 232,
            "return": [
                "List[Tuple[(Permission, str)]]"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "grants": [
                    "List[Any]"
                ],
                "all_permissions": [
                    "Optional[Dict[(str, Permission)]]"
                ]
            }
        },
        "get_owners_by_grantable_permission": {
            "name": "get_owners_by_grantable_permission",
            "location": 265,
            "return": [
                "Dict[(object, Dict[(str, List[Group])])]"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "separate_global": [
                    "bool"
                ]
            }
        },
        "get_grantable_permissions": {
            "name": "get_grantable_permissions",
            "location": 335,
            "return": [
                "Dict[(str, List[str])]"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "restricted_ownership_permissions": [
                    "List[str]"
                ]
            }
        },
        "get_owner_arg_list": {
            "name": "get_owner_arg_list",
            "location": 374,
            "return": [
                "List[Tuple[(Group, str)]]"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "permission": [
                    "Permission"
                ],
                "argument": [
                    "str"
                ],
                "owners_by_arg_by_perm": [
                    "Optional[Dict[(object, Dict[(str, List[Group])])]]"
                ]
            }
        },
        "create_request": {
            "name": "create_request",
            "location": 427,
            "return": [
                "PermissionRequest"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "user": [
                    "User"
                ],
                "group": [
                    "Group"
                ],
                "permission": [
                    "Permission"
                ],
                "argument": [
                    "str"
                ],
                "reason": [
                    "str"
                ]
            }
        },
        "get_pending_request_by_group": {
            "name": "get_pending_request_by_group",
            "location": 548,
            "return": [
                "List[PermissionRequest]"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "group": [
                    "Group"
                ]
            }
        },
        "can_approve_request": {
            "name": "can_approve_request",
            "location": 557,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "request": [
                    "PermissionRequest"
                ],
                "owner": [
                    "User"
                ],
                "group_ids": [
                    "Optional[Set[int]]"
                ],
                "owners_by_arg_by_perm": [
                    "Optional[Dict[(object, Dict[(str, List[Group])])]]"
                ]
            }
        },
        "get_requests": {
            "name": "get_requests",
            "location": 584,
            "return": [
                "Tuple[(Requests, int)]"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "status": [
                    "str"
                ],
                "limit": [
                    "int"
                ],
                "offset": [
                    "int"
                ],
                "owner": [
                    "Optional[User]"
                ],
                "requester": [
                    "Optional[User]"
                ],
                "owners_by_arg_by_perm": [
                    "Optional[Dict[(object, Dict[(str, List[Group])])]]"
                ]
            }
        },
        "get_request_by_id": {
            "name": "get_request_by_id",
            "location": 667,
            "return": [
                "Optional[PermissionRequest]"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "request_id": [
                    "int"
                ]
            }
        },
        "get_changes_by_request_id": {
            "name": "get_changes_by_request_id",
            "location": 672,
            "return": [
                "List[Tuple[(PermissionRequestStatusChange, Comment)]]"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "request_id": [
                    "int"
                ]
            }
        },
        "update_request": {
            "name": "update_request",
            "location": 694,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "request": [
                    "PermissionRequest"
                ],
                "user": [
                    "User"
                ],
                "new_status": [
                    "str"
                ],
                "comment": [
                    "str"
                ]
            }
        },
        "NoSuchPermission.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "get_grantable_permissions._reduce_args": {
            "name": "_reduce_args",
            "location": 356,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "perm_name": [
                    "str"
                ],
                "args": [
                    "List[str]"
                ]
            }
        }
    },
    "merou-master/grouper/public_key.py": {
        "get_public_key": {
            "name": "get_public_key",
            "location": 34,
            "return": [],
            "arguments": {
                "session": [],
                "user_id": [],
                "key_id": []
            }
        },
        "add_public_key": {
            "name": "add_public_key",
            "location": 55,
            "return": [],
            "arguments": {
                "session": [],
                "user": [],
                "public_key_str": []
            }
        },
        "delete_public_key": {
            "name": "delete_public_key",
            "location": 125,
            "return": [],
            "arguments": {
                "session": [],
                "user_id": [],
                "key_id": []
            }
        },
        "get_public_keys_of_user": {
            "name": "get_public_keys_of_user",
            "location": 142,
            "return": [],
            "arguments": {
                "session": [],
                "user_id": []
            }
        },
        "KeyNotFound.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "key_id": [],
                "user_id": []
            }
        }
    },
    "merou-master/grouper/request.py": {
        "get_on_behalf_by_request": {
            "name": "get_on_behalf_by_request",
            "location": 13,
            "return": [],
            "arguments": {
                "session": [],
                "request": []
            }
        }
    },
    "merou-master/grouper/role_user.py": {
        "create_role_user": {
            "name": "create_role_user",
            "location": 32,
            "return": [],
            "arguments": {
                "session": [],
                "actor": [],
                "name": [],
                "description": [],
                "canjoin": []
            }
        },
        "is_role_user": {
            "name": "is_role_user",
            "location": 68,
            "return": [],
            "arguments": {
                "session": [],
                "user": [],
                "group": []
            }
        },
        "get_role_user": {
            "name": "get_role_user",
            "location": 96,
            "return": [],
            "arguments": {
                "session": [],
                "user": [],
                "group": []
            }
        },
        "can_manage_role_user": {
            "name": "can_manage_role_user",
            "location": 130,
            "return": [],
            "arguments": {
                "session": [],
                "user": [],
                "tuser": [],
                "tgroup": []
            }
        },
        "is_owner_of_role_user": {
            "name": "is_owner_of_role_user",
            "location": 159,
            "return": [],
            "arguments": {
                "session": [],
                "user": [],
                "tuser": [],
                "tgroup": []
            }
        },
        "disable_role_user": {
            "name": "disable_role_user",
            "location": 188,
            "return": [],
            "arguments": {
                "session": [],
                "user": [],
                "group": []
            }
        },
        "enable_role_user": {
            "name": "enable_role_user",
            "location": 206,
            "return": [],
            "arguments": {
                "session": [],
                "actor": [],
                "preserve_membership": [],
                "user": [],
                "group": []
            }
        }
    },
    "merou-master/grouper/service_account.py": {
        "_check_machine_set": {
            "name": "_check_machine_set",
            "location": 41,
            "return": [],
            "arguments": {
                "service_account": [],
                "machine_set": []
            }
        },
        "edit_service_account": {
            "name": "edit_service_account",
            "location": 54,
            "return": [],
            "arguments": {
                "session": [],
                "actor": [],
                "service_account": [],
                "description": [],
                "machine_set": []
            }
        },
        "can_manage_service_account": {
            "name": "can_manage_service_account",
            "location": 79,
            "return": [],
            "arguments": {
                "session": [],
                "target": [],
                "user": []
            }
        },
        "disable_service_account": {
            "name": "disable_service_account",
            "location": 95,
            "return": [],
            "arguments": {
                "session": [],
                "actor": [],
                "service_account": []
            }
        },
        "enable_service_account": {
            "name": "enable_service_account",
            "location": 120,
            "return": [],
            "arguments": {
                "session": [],
                "actor": [],
                "service_account": [],
                "owner": []
            }
        },
        "service_account_permissions": {
            "name": "service_account_permissions",
            "location": 139,
            "return": [],
            "arguments": {
                "session": [],
                "service_account": []
            }
        },
        "all_service_account_permissions": {
            "name": "all_service_account_permissions",
            "location": 174,
            "return": [],
            "arguments": {
                "session": []
            }
        }
    },
    "merou-master/grouper/settings.py": {
        "default_settings_path": {
            "name": "default_settings_path",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "settings": {
            "name": "settings",
            "location": 206,
            "return": [],
            "arguments": {}
        },
        "set_global_settings": {
            "name": "set_global_settings",
            "location": 212,
            "return": [],
            "arguments": {
                "settings": []
            }
        },
        "Settings.global_settings_from_config": {
            "name": "global_settings_from_config",
            "location": 53,
            "return": [],
            "arguments": {
                "filename": [],
                "section": []
            }
        },
        "Settings.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Settings.database": {
            "name": "database",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "Settings.timezone": {
            "name": "timezone",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "timezone": []
            }
        },
        "Settings.update_from_config": {
            "name": "update_from_config",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "section": []
            }
        },
        "Settings._database_source_output": {
            "name": "_database_source_output",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Settings._url_without_password": {
            "name": "_url_without_password",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        }
    },
    "merou-master/grouper/setup.py": {
        "build_arg_parser": {
            "name": "build_arg_parser",
            "location": 12,
            "return": [],
            "arguments": {
                "description": []
            }
        },
        "setup_logging": {
            "name": "setup_logging",
            "location": 52,
            "return": [],
            "arguments": {
                "args": [],
                "log_format": []
            }
        }
    },
    "merou-master/grouper/templating.py": {
        "_utcnow": {
            "name": "_utcnow",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "BaseTemplateEngine.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "Settings"
                ],
                "package": [
                    "str"
                ]
            }
        },
        "BaseTemplateEngine.get_template": {
            "name": "get_template",
            "location": 53,
            "return": [
                "Template"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "BaseTemplateEngine.print_date": {
            "name": "print_date",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "date": [
                    "Optional[datetime]"
                ]
            }
        },
        "BaseTemplateEngine.expires_when_str": {
            "name": "expires_when_str",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "date": [
                    "Optional[datetime]"
                ],
                "utcnow_fn": [
                    "Callable[([], datetime)]"
                ]
            }
        },
        "BaseTemplateEngine.long_ago_str": {
            "name": "long_ago_str",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "date": [
                    "datetime"
                ],
                "utcnow_fn": [
                    "Callable[([], datetime)]"
                ]
            }
        },
        "BaseTemplateEngine._highest_period_delta_str": {
            "name": "_highest_period_delta_str",
            "location": 112,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "delta": [
                    "relativedelta"
                ]
            }
        }
    },
    "merou-master/grouper/user.py": {
        "get_user_or_group": {
            "name": "get_user_or_group",
            "location": 26,
            "return": [],
            "arguments": {
                "session": [],
                "name": [],
                "user_or_group": []
            }
        },
        "get_all_users": {
            "name": "get_all_users",
            "location": 53,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "get_all_enabled_users": {
            "name": "get_all_enabled_users",
            "location": 68,
            "return": [],
            "arguments": {
                "session": [],
                "include_service_accounts": []
            }
        },
        "enable_user": {
            "name": "enable_user",
            "location": 86,
            "return": [],
            "arguments": {
                "session": [],
                "user": [],
                "requester": [],
                "preserve_membership": []
            }
        },
        "disable_user": {
            "name": "disable_user",
            "location": 106,
            "return": [],
            "arguments": {
                "session": [],
                "user": []
            }
        },
        "user_role_index": {
            "name": "user_role_index",
            "location": 115,
            "return": [],
            "arguments": {
                "user": [],
                "members": []
            }
        },
        "user_role": {
            "name": "user_role",
            "location": 124,
            "return": [],
            "arguments": {
                "user": [],
                "members": []
            }
        },
        "user_requests_aggregate": {
            "name": "user_requests_aggregate",
            "location": 132,
            "return": [],
            "arguments": {
                "session": [],
                "user": []
            }
        },
        "user_open_audits": {
            "name": "user_open_audits",
            "location": 189,
            "return": [],
            "arguments": {
                "session": [],
                "user": []
            }
        },
        "get_log_entries_by_user": {
            "name": "get_log_entries_by_user",
            "location": 214,
            "return": [],
            "arguments": {
                "session": [],
                "user": [],
                "limit": []
            }
        }
    },
    "merou-master/grouper/user_group.py": {
        "get_groups_by_user": {
            "name": "get_groups_by_user",
            "location": 15,
            "return": [],
            "arguments": {
                "session": [],
                "user": []
            }
        },
        "user_can_manage_group": {
            "name": "user_can_manage_group",
            "location": 33,
            "return": [],
            "arguments": {
                "session": [],
                "group": [],
                "user": []
            }
        },
        "user_is_owner_of_group": {
            "name": "user_is_owner_of_group",
            "location": 49,
            "return": [],
            "arguments": {
                "session": [],
                "group": [],
                "user": []
            }
        }
    },
    "merou-master/grouper/user_metadata.py": {
        "get_user_metadata": {
            "name": "get_user_metadata",
            "location": 21,
            "return": [],
            "arguments": {
                "session": [],
                "user_id": [],
                "exclude": []
            }
        },
        "get_user_metadata_by_key": {
            "name": "get_user_metadata_by_key",
            "location": 44,
            "return": [],
            "arguments": {
                "session": [],
                "user_id": [],
                "data_key": []
            }
        },
        "set_user_metadata": {
            "name": "set_user_metadata",
            "location": 58,
            "return": [],
            "arguments": {
                "session": [],
                "user_id": [],
                "data_key": [],
                "data_value": []
            }
        },
        "InvalidUserMetadataKeyException.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        }
    },
    "merou-master/grouper/user_password.py": {
        "add_new_user_password": {
            "name": "add_new_user_password",
            "location": 22,
            "return": [],
            "arguments": {
                "session": [],
                "password_name": [],
                "password": [],
                "user_id": []
            }
        },
        "delete_user_password": {
            "name": "delete_user_password",
            "location": 42,
            "return": [],
            "arguments": {
                "session": [],
                "password_name": [],
                "user_id": []
            }
        },
        "user_passwords": {
            "name": "user_passwords",
            "location": 59,
            "return": [],
            "arguments": {
                "session": [],
                "user": []
            }
        }
    },
    "merou-master/grouper/user_permissions.py": {
        "user_has_permission": {
            "name": "user_has_permission",
            "location": 24,
            "return": [],
            "arguments": {
                "session": [],
                "user": [],
                "permission": [],
                "argument": []
            }
        },
        "user_permissions": {
            "name": "user_permissions",
            "location": 44,
            "return": [],
            "arguments": {
                "session": [],
                "user": []
            }
        },
        "user_grantable_permissions": {
            "name": "user_grantable_permissions",
            "location": 69,
            "return": [],
            "arguments": {
                "session": [],
                "user": []
            }
        },
        "user_creatable_permissions": {
            "name": "user_creatable_permissions",
            "location": 94,
            "return": [],
            "arguments": {
                "session": [],
                "user": []
            }
        },
        "user_is_user_admin": {
            "name": "user_is_user_admin",
            "location": 119,
            "return": [],
            "arguments": {
                "session": [],
                "user": []
            }
        },
        "user_is_group_admin": {
            "name": "user_is_group_admin",
            "location": 123,
            "return": [],
            "arguments": {
                "session": [],
                "user": []
            }
        },
        "user_is_permission_admin": {
            "name": "user_is_permission_admin",
            "location": 127,
            "return": [],
            "arguments": {
                "session": [],
                "user": []
            }
        }
    },
    "merou-master/grouper/user_token.py": {
        "add_new_user_token": {
            "name": "add_new_user_token",
            "location": 6,
            "return": [],
            "arguments": {
                "session": [],
                "user_token": []
            }
        },
        "disable_user_token": {
            "name": "disable_user_token",
            "location": 27,
            "return": [],
            "arguments": {
                "session": [],
                "user_token": []
            }
        }
    },
    "merou-master/grouper/util.py": {
        "get_loglevel": {
            "name": "get_loglevel",
            "location": 18,
            "return": [],
            "arguments": {
                "args": [],
                "base": []
            }
        },
        "try_update": {
            "name": "try_update",
            "location": 27,
            "return": [],
            "arguments": {
                "dct": [],
                "update": []
            }
        },
        "get_auditors_group_name": {
            "name": "get_auditors_group_name",
            "location": 34,
            "return": [],
            "arguments": {
                "settings": []
            }
        },
        "matches_glob": {
            "name": "matches_glob",
            "location": 43,
            "return": [],
            "arguments": {
                "glob": [],
                "text": []
            }
        },
        "singleton": {
            "name": "singleton",
            "location": 56,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "reference_id": {
            "name": "reference_id",
            "location": 81,
            "return": [],
            "arguments": {
                "settings": [],
                "request_type": [],
                "request": []
            }
        },
        "singleton.wrapped": {
            "name": "wrapped",
            "location": 68,
            "return": [],
            "arguments": {}
        }
    },
    "merou-master/grouper/version.py": {},
    "merou-master/grouper/__init__.py": {},
    "merou-master/grouper/api/handlers.py": {
        "get_individual_user_info": {
            "name": "get_individual_user_info",
            "location": 35,
            "return": [],
            "arguments": {
                "handler": [],
                "name": [],
                "service_account": []
            }
        },
        "GraphHandler.initialize": {
            "name": "initialize",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphHandler.on_finish": {
            "name": "on_finish",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphHandler.log_exception": {
            "name": "log_exception",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_value": [],
                "exc_tb": []
            }
        },
        "GraphHandler.error": {
            "name": "error",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "errors": []
            }
        },
        "GraphHandler.success": {
            "name": "success",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "GraphHandler.raise_and_log_exception": {
            "name": "raise_and_log_exception",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "exc": []
            }
        },
        "GraphHandler.notfound": {
            "name": "notfound",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "GraphHandler.write_error": {
            "name": "write_error",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "status_code": []
            }
        },
        "Users.get": {
            "name": "get",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserMetadata.listed_users": {
            "name": "listed_users",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "users": []
            }
        },
        "UserMetadata.get": {
            "name": "get",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiUsers.get": {
            "name": "get",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UsersPublicKeys.get": {
            "name": "get",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Grants.listed_grants": {
            "name": "listed_grants",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "grants": []
            }
        },
        "Grants.listed_grants_of_permission": {
            "name": "listed_grants_of_permission",
            "location": 289,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "grants": []
            }
        },
        "Grants.get": {
            "name": "get",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Groups.get": {
            "name": "get",
            "location": 309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Permissions.listed_permissions": {
            "name": "listed_permissions",
            "location": 325,
            "return": [],
            "arguments": {
                "self": [],
                "permissions": [],
                "can_create": []
            }
        },
        "Permissions.get": {
            "name": "get",
            "location": 329,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenValidate.post": {
            "name": "post",
            "location": 351,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceAccounts.get": {
            "name": "get",
            "location": 376,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NotFound.get": {
            "name": "get",
            "location": 400,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/api/main.py": {
        "create_api_application": {
            "name": "create_api_application",
            "location": 32,
            "return": [],
            "arguments": {
                "graph": [],
                "settings": [],
                "plugins": [],
                "usecase_factory": []
            }
        },
        "start_server": {
            "name": "start_server",
            "location": 40,
            "return": [],
            "arguments": {
                "args": [],
                "settings": [],
                "plugins": []
            }
        },
        "main": {
            "name": "main",
            "location": 90,
            "return": [],
            "arguments": {
                "sys_argv": []
            }
        }
    },
    "merou-master/grouper/api/routes.py": {},
    "merou-master/grouper/api/settings.py": {
        "ApiSettings.global_settings_from_config": {
            "name": "global_settings_from_config",
            "location": 13,
            "return": [],
            "arguments": {
                "filename": [],
                "section": []
            }
        },
        "ApiSettings.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiSettings.update_from_config": {
            "name": "update_from_config",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "section": []
            }
        }
    },
    "merou-master/grouper/api/__init__.py": {},
    "merou-master/grouper/background/background_processor.py": {
        "BackgroundProcessor.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "settings": [],
                "plugins": []
            }
        },
        "BackgroundProcessor.crash": {
            "name": "crash",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BackgroundProcessor.expire_edges": {
            "name": "expire_edges",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "BackgroundProcessor.promote_nonauditors": {
            "name": "promote_nonauditors",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "BackgroundProcessor.run": {
            "name": "run",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/background/main.py": {
        "build_arg_parser": {
            "name": "build_arg_parser",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "start_processor": {
            "name": "start_processor",
            "location": 45,
            "return": [],
            "arguments": {
                "args": [],
                "settings": []
            }
        },
        "main": {
            "name": "main",
            "location": 65,
            "return": [],
            "arguments": {
                "sys_argv": []
            }
        }
    },
    "merou-master/grouper/background/settings.py": {
        "BackgroundSettings.global_settings_from_config": {
            "name": "global_settings_from_config",
            "location": 13,
            "return": [],
            "arguments": {
                "filename": [],
                "section": []
            }
        },
        "BackgroundSettings.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BackgroundSettings.update_from_config": {
            "name": "update_from_config",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "section": []
            }
        }
    },
    "merou-master/grouper/background/__init__.py": {},
    "merou-master/grouper/ctl/base.py": {
        "CtlCommand.add_arguments": {
            "name": "add_arguments",
            "location": 13,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "CtlCommand.run": {
            "name": "run",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        }
    },
    "merou-master/grouper/ctl/dump_sql.py": {
        "DumpSqlCommand.add_arguments": {
            "name": "add_arguments",
            "location": 17,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "DumpSqlCommand.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "usecase_factory": []
            }
        },
        "DumpSqlCommand.dumped_schema": {
            "name": "dumped_schema",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "schema": []
            }
        },
        "DumpSqlCommand.run": {
            "name": "run",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        }
    },
    "merou-master/grouper/ctl/factory.py": {
        "CtlCommandFactory.add_all_parsers": {
            "name": "add_all_parsers",
            "location": 27,
            "return": [],
            "arguments": {
                "subparsers": []
            }
        },
        "CtlCommandFactory.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "settings": [],
                "usecase_factory": []
            }
        },
        "CtlCommandFactory.construct_command": {
            "name": "construct_command",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "command": []
            }
        },
        "CtlCommandFactory.construct_dump_sql_command": {
            "name": "construct_dump_sql_command",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CtlCommandFactory.construct_permission_command": {
            "name": "construct_permission_command",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CtlCommandFactory.construct_service_account_command": {
            "name": "construct_service_account_command",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CtlCommandFactory.construct_sync_db_command": {
            "name": "construct_sync_db_command",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CtlCommandFactory.construct_user_command": {
            "name": "construct_user_command",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CtlCommandFactory.construct_user_proxy_command": {
            "name": "construct_user_proxy_command",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/ctl/group.py": {
        "group_command": {
            "name": "group_command",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "Namespace"
                ],
                "settings": [
                    "CtlSettings"
                ],
                "session_factory": [
                    "SessionFactory"
                ]
            }
        },
        "mutate_group_command": {
            "name": "mutate_group_command",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "group": [
                    "Group"
                ],
                "args": [
                    "Namespace"
                ]
            }
        },
        "open_file_or_stdout_for_write": {
            "name": "open_file_or_stdout_for_write",
            "location": 94,
            "return": [
                "Iterator[IO[str]]"
            ],
            "arguments": {
                "fn": [
                    "str"
                ]
            }
        },
        "logdump_group_command": {
            "name": "logdump_group_command",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "group": [
                    "Group"
                ],
                "args": [
                    "Namespace"
                ]
            }
        },
        "add_parser": {
            "name": "add_parser",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "subparsers": [
                    "_SubParsersAction"
                ]
            }
        },
        "group_command.call_mutate": {
            "name": "call_mutate",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "Namespace"
                ],
                "settings": [
                    "CtlSettings"
                ],
                "session_factory": [
                    "SessionFactory"
                ]
            }
        }
    },
    "merou-master/grouper/ctl/main.py": {
        "main": {
            "name": "main",
            "location": 25,
            "return": [],
            "arguments": {
                "sys_argv": [],
                "session": []
            }
        }
    },
    "merou-master/grouper/ctl/oneoff.py": {
        "wrapped_session": {
            "name": "wrapped_session",
            "location": 19,
            "return": [],
            "arguments": {
                "session": [],
                "make_read_only": []
            }
        },
        "key_value_arg_type": {
            "name": "key_value_arg_type",
            "location": 56,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "oneoff_command": {
            "name": "oneoff_command",
            "location": 64,
            "return": [],
            "arguments": {
                "args": [],
                "settings": [],
                "session_factory": []
            }
        },
        "add_parser": {
            "name": "add_parser",
            "location": 92,
            "return": [],
            "arguments": {
                "subparsers": []
            }
        },
        "wrapped_session.is_clean_ro": {
            "name": "is_clean_ro",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "wrapped_session.flush_ro": {
            "name": "flush_ro",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "objects": []
            }
        }
    },
    "merou-master/grouper/ctl/permission.py": {
        "DisablePermissionCommand.add_arguments": {
            "name": "add_arguments",
            "location": 22,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "DisablePermissionCommand.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "usecase_factory": []
            }
        },
        "DisablePermissionCommand.disabled_permission": {
            "name": "disabled_permission",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "DisablePermissionCommand.disable_permission_failed_existing_grants": {
            "name": "disable_permission_failed_existing_grants",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "group_grants": [],
                "service_account_grants": []
            }
        },
        "DisablePermissionCommand.disable_permission_failed_not_found": {
            "name": "disable_permission_failed_not_found",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "DisablePermissionCommand.disable_permission_failed_permission_denied": {
            "name": "disable_permission_failed_permission_denied",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "DisablePermissionCommand.disable_permission_failed_system_permission": {
            "name": "disable_permission_failed_system_permission",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "DisablePermissionCommand.run": {
            "name": "run",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "PermissionCommand.add_arguments": {
            "name": "add_arguments",
            "location": 79,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "PermissionCommand.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "usecase_factory": []
            }
        },
        "PermissionCommand.run": {
            "name": "run",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        }
    },
    "merou-master/grouper/ctl/service_account.py": {
        "CreateServiceAccountCommand.add_arguments": {
            "name": "add_arguments",
            "location": 17,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "CreateServiceAccountCommand.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "usecase_factory": []
            }
        },
        "CreateServiceAccountCommand.create_service_account_failed_already_exists": {
            "name": "create_service_account_failed_already_exists",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "service": [],
                "owner": []
            }
        },
        "CreateServiceAccountCommand.create_service_account_failed_invalid_name": {
            "name": "create_service_account_failed_invalid_name",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "service": [],
                "owner": [],
                "message": []
            }
        },
        "CreateServiceAccountCommand.create_service_account_failed_invalid_machine_set": {
            "name": "create_service_account_failed_invalid_machine_set",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "service": [],
                "owner": [],
                "machine_set": [],
                "message": []
            }
        },
        "CreateServiceAccountCommand.create_service_account_failed_invalid_owner": {
            "name": "create_service_account_failed_invalid_owner",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "service": [],
                "owner": []
            }
        },
        "CreateServiceAccountCommand.create_service_account_failed_permission_denied": {
            "name": "create_service_account_failed_permission_denied",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "service": [],
                "owner": []
            }
        },
        "CreateServiceAccountCommand.created_service_account": {
            "name": "created_service_account",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "service": [],
                "owner": []
            }
        },
        "CreateServiceAccountCommand.run": {
            "name": "run",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "ServiceAccountCommand.add_arguments": {
            "name": "add_arguments",
            "location": 71,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "ServiceAccountCommand.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "usecase_factory": []
            }
        },
        "ServiceAccountCommand.run": {
            "name": "run",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        }
    },
    "merou-master/grouper/ctl/settings.py": {
        "CtlSettings.global_settings_from_config": {
            "name": "global_settings_from_config",
            "location": 13,
            "return": [],
            "arguments": {
                "filename": [],
                "section": []
            }
        },
        "CtlSettings.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CtlSettings.update_from_config": {
            "name": "update_from_config",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "section": []
            }
        }
    },
    "merou-master/grouper/ctl/shell.py": {
        "shell_command": {
            "name": "shell_command",
            "location": 13,
            "return": [],
            "arguments": {
                "args": [],
                "settings": [],
                "session_factory": []
            }
        },
        "add_parser": {
            "name": "add_parser",
            "location": 27,
            "return": [],
            "arguments": {
                "subparsers": []
            }
        }
    },
    "merou-master/grouper/ctl/sync_db.py": {
        "SyncDbCommand.add_arguments": {
            "name": "add_arguments",
            "location": 14,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "SyncDbCommand.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "usecase_factory": []
            }
        },
        "SyncDbCommand.run": {
            "name": "run",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        }
    },
    "merou-master/grouper/ctl/user.py": {
        "user_command": {
            "name": "user_command",
            "location": 24,
            "return": [],
            "arguments": {
                "args": [],
                "settings": [],
                "session_factory": []
            }
        },
        "ConvertUserToServiceAccountCommand.add_arguments": {
            "name": "add_arguments",
            "location": 133,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "ConvertUserToServiceAccountCommand.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "usecase_factory": []
            }
        },
        "ConvertUserToServiceAccountCommand.converted_user_to_service_account": {
            "name": "converted_user_to_service_account",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "owner": []
            }
        },
        "ConvertUserToServiceAccountCommand.convert_user_to_service_account_failed_permission_denied": {
            "name": "convert_user_to_service_account_failed_permission_denied",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "ConvertUserToServiceAccountCommand.convert_user_to_service_account_failed_user_is_in_groups": {
            "name": "convert_user_to_service_account_failed_user_is_in_groups",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "ConvertUserToServiceAccountCommand.run": {
            "name": "run",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "UserCommand.add_arguments": {
            "name": "add_arguments",
            "location": 170,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "UserCommand.__init__": {
            "name": "__init__",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "settings": [],
                "usecase_factory": []
            }
        },
        "UserCommand.run": {
            "name": "run",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        }
    },
    "merou-master/grouper/ctl/user_proxy.py": {
        "NoRedirectHandler.http_response": {
            "name": "http_response",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "response": []
            }
        },
        "ProxyServer.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "settings": [],
                "address": [],
                "handler_class": [],
                "backend_port": [],
                "username": []
            }
        },
        "ProxyHandler.dest_url": {
            "name": "dest_url",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProxyHandler.do_request": {
            "name": "do_request",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ProxyHandler.updated_headers": {
            "name": "updated_headers",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProxyHandler.do_GET": {
            "name": "do_GET",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProxyHandler.do_POST": {
            "name": "do_POST",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserProxyCommand.add_arguments": {
            "name": "add_arguments",
            "location": 110,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "UserProxyCommand.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "UserProxyCommand.run": {
            "name": "run",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        }
    },
    "merou-master/grouper/ctl/util.py": {
        "ensure_valid_username": {
            "name": "ensure_valid_username",
            "location": 22,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "ensure_valid_groupname": {
            "name": "ensure_valid_groupname",
            "location": 42,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "argparse_validate_date": {
            "name": "argparse_validate_date",
            "location": 56,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "ensure_valid_username.wrapper": {
            "name": "wrapper",
            "location": 25,
            "return": [],
            "arguments": {
                "args": [],
                "settings": [],
                "session_factory": []
            }
        },
        "ensure_valid_groupname.wrapper": {
            "name": "wrapper",
            "location": 45,
            "return": [],
            "arguments": {
                "args": [],
                "settings": [],
                "session_factory": []
            }
        }
    },
    "merou-master/grouper/ctl/__init__.py": {},
    "merou-master/grouper/entities/audit_log_entry.py": {},
    "merou-master/grouper/entities/checkpoint.py": {},
    "merou-master/grouper/entities/group.py": {
        "GroupNotFoundException.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "InvalidGroupNameException.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "merou-master/grouper/entities/group_edge.py": {},
    "merou-master/grouper/entities/group_request.py": {
        "UserGroupRequestNotFoundException.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "UserGroupRequest"
                ]
            }
        }
    },
    "merou-master/grouper/entities/pagination.py": {},
    "merou-master/grouper/entities/permission.py": {
        "PermissionNotFoundException.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "merou-master/grouper/entities/permission_grant.py": {},
    "merou-master/grouper/entities/service_account.py": {
        "ServiceAccountNotFoundException.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "merou-master/grouper/entities/user.py": {
        "UserNotFoundException.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "UserIsEnabledException.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "UserIsMemberOfGroupsException.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "UserHasPendingRequestsException.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "merou-master/grouper/entities/__init__.py": {},
    "merou-master/grouper/fe/alerts.py": {
        "Alert.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "severity": [
                    "str"
                ],
                "message": [
                    "str"
                ],
                "heading": [
                    "str"
                ]
            }
        }
    },
    "merou-master/grouper/fe/forms.py": {
        "ValidateRegex.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "regex": []
            }
        },
        "ValidateRegex.__call__": {
            "name": "__call__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "form": [],
                "field": []
            }
        },
        "ValidateDate.__call__": {
            "name": "__call__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "form": [],
                "field": []
            }
        },
        "DaysTimeDeltaField.process_data": {
            "name": "process_data",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "DaysTimeDeltaField.process_formdata": {
            "name": "process_formdata",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "valuelist": []
            }
        }
    },
    "merou-master/grouper/fe/main.py": {
        "create_fe_application": {
            "name": "create_fe_application",
            "location": 34,
            "return": [],
            "arguments": {
                "settings": [],
                "deployment_name": [],
                "xsrf_cookies": [],
                "session": []
            }
        },
        "start_server": {
            "name": "start_server",
            "location": 52,
            "return": [],
            "arguments": {
                "args": [],
                "settings": [],
                "plugins": []
            }
        },
        "main": {
            "name": "main",
            "location": 112,
            "return": [],
            "arguments": {
                "sys_argv": []
            }
        }
    },
    "merou-master/grouper/fe/routes.py": {},
    "merou-master/grouper/fe/settings.py": {
        "settings": {
            "name": "settings",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "FrontendSettings.global_settings_from_config": {
            "name": "global_settings_from_config",
            "location": 13,
            "return": [],
            "arguments": {
                "filename": [],
                "section": []
            }
        },
        "FrontendSettings.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FrontendSettings.update_from_config": {
            "name": "update_from_config",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "section": []
            }
        }
    },
    "merou-master/grouper/fe/templates.py": {
        "BaseTemplate.render": {
            "name": "render",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "GrouperHandler"
                ],
                "alerts": [
                    "Optional[List[Alert]]"
                ]
            }
        },
        "BaseTemplate._get_form_alerts": {
            "name": "_get_form_alerts",
            "location": 78,
            "return": [
                "List[Alert]"
            ],
            "arguments": {
                "self": [],
                "errors": [
                    "Dict[(str, List[str])]"
                ]
            }
        }
    },
    "merou-master/grouper/fe/templating.py": {
        "FrontendTemplateEngine.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "FrontendSettings"
                ],
                "deployment_name": [
                    "str"
                ],
                "static_path": [
                    "str"
                ],
                "package": [
                    "str"
                ]
            }
        },
        "FrontendTemplateEngine.csp_header": {
            "name": "csp_header",
            "location": 146,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrontendTemplateEngine._cdnjs_urls": {
            "name": "_cdnjs_urls",
            "location": 156,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "Iterable[Resource]"
                ]
            }
        },
        "FrontendTemplateEngine._static_path_to_resource": {
            "name": "_static_path_to_resource",
            "location": 161,
            "return": [
                "Resource"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        }
    },
    "merou-master/grouper/fe/util.py": {
        "test_reserved_names": {
            "name": "test_reserved_names",
            "location": 304,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "permission_name": [
                    "str"
                ]
            }
        },
        "ensure_audit_security": {
            "name": "ensure_audit_security",
            "location": 317,
            "return": [
                "Callable[([Callable[(..., None)]], Callable[(..., None)])]"
            ],
            "arguments": {
                "perm_arg": [
                    "str"
                ]
            }
        },
        "_serialize_alert": {
            "name": "_serialize_alert",
            "location": 342,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "alert": [
                    "Alert"
                ]
            }
        },
        "_deserialize_alert": {
            "name": "_deserialize_alert",
            "location": 346,
            "return": [
                "Alert"
            ],
            "arguments": {
                "alert_dict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "_serialize_alerts": {
            "name": "_serialize_alerts",
            "location": 354,
            "return": [
                "str"
            ],
            "arguments": {
                "alerts": [
                    "Sequence[Alert]"
                ]
            }
        },
        "_deserialize_alerts": {
            "name": "_deserialize_alerts",
            "location": 360,
            "return": [
                "List[Alert]"
            ],
            "arguments": {
                "quoted_alerts_json": [
                    "str"
                ]
            }
        },
        "GrouperHandler.initialize": {
            "name": "initialize",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrouperHandler.set_default_headers": {
            "name": "set_default_headers",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrouperHandler.log_exception": {
            "name": "log_exception",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_value": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "Optional[TracebackType]"
                ]
            }
        },
        "GrouperHandler.write_error": {
            "name": "write_error",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status_code": [
                    "int"
                ]
            }
        },
        "GrouperHandler.is_refresh": {
            "name": "is_refresh",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrouperHandler.handle_refresh": {
            "name": "handle_refresh",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrouperHandler.redirect": {
            "name": "redirect",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "GrouperHandler.get_or_create_user": {
            "name": "get_or_create_user",
            "location": 126,
            "return": [
                "Optional[User]"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ]
            }
        },
        "GrouperHandler.get_path_argument": {
            "name": "get_path_argument",
            "location": 157,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "GrouperHandler.prepare": {
            "name": "prepare",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrouperHandler.on_finish": {
            "name": "on_finish",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrouperHandler.update_qs": {
            "name": "update_qs",
            "location": 195,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrouperHandler.transfer_qs": {
            "name": "transfer_qs",
            "location": 200,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrouperHandler.is_active": {
            "name": "is_active",
            "location": 209,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "test_path": [
                    "str"
                ]
            }
        },
        "GrouperHandler.get_template_namespace": {
            "name": "get_template_namespace",
            "location": 215,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrouperHandler.render_template": {
            "name": "render_template",
            "location": 230,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "template_name": [
                    "str"
                ]
            }
        },
        "GrouperHandler.render": {
            "name": "render",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template_name": [
                    "str"
                ]
            }
        },
        "GrouperHandler.render_template_class": {
            "name": "render_template_class",
            "location": 249,
            "return": [
                "Future[None]"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "BaseTemplate"
                ],
                "alerts": [
                    "Optional[List[Alert]]"
                ]
            }
        },
        "GrouperHandler.set_alerts": {
            "name": "set_alerts",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alerts": [
                    "Sequence[Alert]"
                ]
            }
        },
        "GrouperHandler.get_alerts": {
            "name": "get_alerts",
            "location": 260,
            "return": [
                "List[Alert]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrouperHandler.get_form_alerts": {
            "name": "get_form_alerts",
            "location": 266,
            "return": [
                "List[Alert]"
            ],
            "arguments": {
                "self": [],
                "errors": [
                    "Dict[(str, List[str])]"
                ]
            }
        },
        "GrouperHandler.raise_and_log_exception": {
            "name": "raise_and_log_exception",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "Exception"
                ]
            }
        },
        "GrouperHandler.log_message": {
            "name": "log_message",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "GrouperHandler.badrequest": {
            "name": "badrequest",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrouperHandler.baduser": {
            "name": "baduser",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "GrouperHandler.forbidden": {
            "name": "forbidden",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrouperHandler.notfound": {
            "name": "notfound",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ensure_audit_security._wrapper": {
            "name": "_wrapper",
            "location": 325,
            "return": [
                "Callable[(..., None)]"
            ],
            "arguments": {
                "f": [
                    "Callable[(..., None)]"
                ]
            }
        },
        "ensure_audit_security._wrapper._decorator": {
            "name": "_decorator",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [
                    "GrouperHandler"
                ]
            }
        }
    },
    "merou-master/grouper/fe/__init__.py": {},
    "merou-master/grouper/fe/handlers/audits_complete.py": {
        "AuditsComplete.post": {
            "name": "post",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "audit_id": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/audits_create.py": {
        "AuditsCreate.get": {
            "name": "get",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuditsCreate.post": {
            "name": "post",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/audits_view.py": {
        "AuditsView.get": {
            "name": "get",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/github.py": {
        "_get_github_http_client": {
            "name": "_get_github_http_client",
            "location": 28,
            "return": [
                "AsyncHTTPClient"
            ],
            "arguments": {}
        },
        "GitHubClient.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "http_client": [
                    "AsyncHTTPClient"
                ],
                "proxy_host": [
                    "Optional[str]"
                ],
                "proxy_port": [
                    "Optional[int]"
                ]
            }
        },
        "GitHubClient.get_oauth_access_token": {
            "name": "get_oauth_access_token",
            "location": 41,
            "return": [
                "Iterator[Future]"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "bytes"
                ],
                "client_secret": [
                    "str"
                ],
                "code": [
                    "bytes"
                ],
                "state": [
                    "bytes"
                ]
            }
        },
        "GitHubClient.get_username": {
            "name": "get_username",
            "location": 67,
            "return": [
                "Iterator[Future]"
            ],
            "arguments": {
                "self": [],
                "oauth_token": [
                    "str"
                ]
            }
        },
        "GitHubLinkBeginView.get": {
            "name": "get",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHubLinkCompleteView.get": {
            "name": "get",
            "location": 102,
            "return": [
                "Iterator[Future]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserClearGitHub.check_access": {
            "name": "check_access",
            "location": 149,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "actor": [
                    "User"
                ],
                "target": [
                    "User"
                ]
            }
        },
        "UserClearGitHub.post": {
            "name": "post",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/groups_view.py": {
        "GroupsView.get": {
            "name": "get",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupsView.post": {
            "name": "post",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/group_add.py": {
        "GroupAdd.get_form": {
            "name": "get_form",
            "location": 26,
            "return": [
                "GroupAddForm"
            ],
            "arguments": {
                "self": [],
                "role": [
                    "str"
                ]
            }
        },
        "GroupAdd.get": {
            "name": "get",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupAdd.post": {
            "name": "post",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/group_disable.py": {
        "GroupDisable.post": {
            "name": "post",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/group_edit.py": {
        "GroupEdit.get": {
            "name": "get",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupEdit.post": {
            "name": "post",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/group_edit_member.py": {
        "GroupEditMember.get": {
            "name": "get",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupEditMember.post": {
            "name": "post",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupEditMember._get_form": {
            "name": "_get_form",
            "location": 137,
            "return": [
                "GroupEditMemberForm"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str"
                ],
                "my_role": [
                    "str"
                ],
                "member_type": [
                    "str"
                ]
            }
        }
    },
    "merou-master/grouper/fe/handlers/group_enable.py": {
        "GroupEnable.post": {
            "name": "post",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/group_join.py": {
        "GroupJoin.get": {
            "name": "get",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupJoin.post": {
            "name": "post",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupJoin._get_member": {
            "name": "_get_member",
            "location": 191,
            "return": [
                "Optional[Union[(User, Group)]]"
            ],
            "arguments": {
                "self": [],
                "member_choice": [
                    "str"
                ]
            }
        },
        "GroupJoin._get_choices": {
            "name": "_get_choices",
            "location": 205,
            "return": [
                "List[Tuple[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "Group"
                ],
                "member_groups": [
                    "Set[str]"
                ],
                "user_is_member": [
                    "bool"
                ]
            }
        },
        "GroupJoin._is_user_a_member": {
            "name": "_is_user_a_member",
            "location": 233,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "Group"
                ],
                "members": [
                    "Mapping[(Tuple[(str, str)], Any)]"
                ]
            }
        }
    },
    "merou-master/grouper/fe/handlers/group_leave.py": {
        "GroupLeave.get": {
            "name": "get",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupLeave.post": {
            "name": "post",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/group_remove.py": {
        "GroupRemove.post": {
            "name": "post",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/group_requests.py": {
        "GroupRequests.get": {
            "name": "get",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/group_request_update.py": {
        "GroupRequestUpdate.get": {
            "name": "get",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupRequestUpdate.post": {
            "name": "post",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupRequestUpdate._get_choices": {
            "name": "_get_choices",
            "location": 206,
            "return": [
                "List[Tuple[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "current_status": [
                    "str"
                ]
            }
        }
    },
    "merou-master/grouper/fe/handlers/group_view.py": {
        "GroupView.get": {
            "name": "get",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/help.py": {
        "Help.get": {
            "name": "get",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/index.py": {
        "Index.get": {
            "name": "get",
            "location": 5,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/not_found.py": {
        "NotFound.get": {
            "name": "get",
            "location": 5,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/perf_profile.py": {
        "PerfProfile.get": {
            "name": "get",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/permissions_create.py": {
        "PermissionsCreate.get": {
            "name": "get",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionsCreate.post": {
            "name": "post",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/permissions_grant.py": {
        "PermissionsGrant.get": {
            "name": "get",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PermissionsGrant.post": {
            "name": "post",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/permissions_requests.py": {
        "PermissionsRequests.get": {
            "name": "get",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/permissions_request_update.py": {
        "PermissionsRequestUpdate._get_choices": {
            "name": "_get_choices",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "current_status": []
            }
        },
        "PermissionsRequestUpdate.get": {
            "name": "get",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "request_id": []
            }
        },
        "PermissionsRequestUpdate.post": {
            "name": "post",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "request_id": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/permissions_revoke.py": {
        "PermissionsRevoke.check_access": {
            "name": "check_access",
            "location": 21,
            "return": [],
            "arguments": {
                "session": [
                    "Session"
                ],
                "mapping": [
                    "PermissionMap"
                ],
                "user": [
                    "User"
                ]
            }
        },
        "PermissionsRevoke.get": {
            "name": "get",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PermissionsRevoke.post": {
            "name": "post",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/permissions_view.py": {
        "PermissionsView.listed_permissions": {
            "name": "listed_permissions",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "permissions": [
                    "PaginatedList[Permission]"
                ],
                "can_create": [
                    "bool"
                ]
            }
        },
        "PermissionsView.get": {
            "name": "get",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/permission_disable.py": {
        "PermissionDisable.disabled_permission": {
            "name": "disabled_permission",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "PermissionDisable.disable_permission_failed_existing_grants": {
            "name": "disable_permission_failed_existing_grants",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "group_grants": [
                    "List[GroupPermissionGrant]"
                ],
                "service_account_grants": [
                    "List[ServiceAccountPermissionGrant]"
                ]
            }
        },
        "PermissionDisable.disable_permission_failed_not_found": {
            "name": "disable_permission_failed_not_found",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "PermissionDisable.disable_permission_failed_permission_denied": {
            "name": "disable_permission_failed_permission_denied",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "PermissionDisable.disable_permission_failed_system_permission": {
            "name": "disable_permission_failed_system_permission",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "PermissionDisable.post": {
            "name": "post",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/permission_disable_auditing.py": {
        "PermissionDisableAuditing.post": {
            "name": "post",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/permission_enable_auditing.py": {
        "PermissionEnableAuditing.post": {
            "name": "post",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/permission_grants_group_view.py": {
        "PermissionGrantsGroupView.view_permission_failed_not_found": {
            "name": "view_permission_failed_not_found",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "PermissionGrantsGroupView.get_sort_key": {
            "name": "get_sort_key",
            "location": 20,
            "return": [
                "PermissionGroupGrantSortKey"
            ],
            "arguments": {
                "self": []
            }
        },
        "PermissionGrantsGroupView.viewed_permission": {
            "name": "viewed_permission",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "permission": [
                    "Permission"
                ],
                "grants": [
                    "PaginatedList[GroupPermissionGrant]"
                ]
            }
        },
        "PermissionGrantsGroupView.get": {
            "name": "get",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/permission_grants_service_account_view.py": {
        "PermissionGrantsServiceAccountView.view_permission_failed_not_found": {
            "name": "view_permission_failed_not_found",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "PermissionGrantsServiceAccountView.get_sort_key": {
            "name": "get_sort_key",
            "location": 26,
            "return": [
                "PermissionServiceAccountGrantSortKey"
            ],
            "arguments": {
                "self": []
            }
        },
        "PermissionGrantsServiceAccountView.viewed_permission": {
            "name": "viewed_permission",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "permission": [
                    "Permission"
                ],
                "grants": [
                    "PaginatedList[ServiceAccountPermissionGrant]"
                ]
            }
        },
        "PermissionGrantsServiceAccountView.get": {
            "name": "get",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/permission_request.py": {
        "PermissionRequest.get": {
            "name": "get",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionRequest.post": {
            "name": "post",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionRequest._build_form": {
            "name": "_build_form",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "PermissionRequest._build_form.pairs": {
            "name": "pairs",
            "location": 116,
            "return": [],
            "arguments": {
                "seq": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/permission_view.py": {
        "PermissionView.view_permission_failed_not_found": {
            "name": "view_permission_failed_not_found",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "PermissionView.viewed_permission": {
            "name": "viewed_permission",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "permission": [
                    "Permission"
                ],
                "access": [
                    "PermissionAccess"
                ],
                "audit_log_entries": [
                    "List[AuditLogEntry]"
                ]
            }
        },
        "PermissionView.get": {
            "name": "get",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/public_key_add.py": {
        "PublicKeyAdd.check_access": {
            "name": "check_access",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "actor": [
                    "User"
                ],
                "target": [
                    "User"
                ]
            }
        },
        "PublicKeyAdd.get": {
            "name": "get",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PublicKeyAdd.post": {
            "name": "post",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/public_key_delete.py": {
        "PublicKeyDelete.check_access": {
            "name": "check_access",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "actor": [
                    "User"
                ],
                "target": [
                    "User"
                ]
            }
        },
        "PublicKeyDelete.get": {
            "name": "get",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PublicKeyDelete.post": {
            "name": "post",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/role_users_view.py": {
        "RoleUsersView.get": {
            "name": "get",
            "location": 5,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/role_user_view.py": {
        "RoleUserView.get": {
            "name": "get",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/search.py": {
        "Search.get": {
            "name": "get",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/service_account_create.py": {
        "ServiceAccountCreate.create_service_account_failed_already_exists": {
            "name": "create_service_account_failed_already_exists",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "str"
                ],
                "owner": [
                    "str"
                ]
            }
        },
        "ServiceAccountCreate.create_service_account_failed_invalid_name": {
            "name": "create_service_account_failed_invalid_name",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "str"
                ],
                "owner": [
                    "str"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "ServiceAccountCreate.create_service_account_failed_invalid_machine_set": {
            "name": "create_service_account_failed_invalid_machine_set",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "str"
                ],
                "owner": [
                    "str"
                ],
                "machine_set": [
                    "str"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "ServiceAccountCreate.create_service_account_failed_invalid_owner": {
            "name": "create_service_account_failed_invalid_owner",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "str"
                ],
                "owner": [
                    "str"
                ]
            }
        },
        "ServiceAccountCreate.create_service_account_failed_permission_denied": {
            "name": "create_service_account_failed_permission_denied",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "str"
                ],
                "owner": [
                    "str"
                ]
            }
        },
        "ServiceAccountCreate.created_service_account": {
            "name": "created_service_account",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "str"
                ],
                "owner": [
                    "str"
                ]
            }
        },
        "ServiceAccountCreate.get": {
            "name": "get",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceAccountCreate.post": {
            "name": "post",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceAccountCreate._render_template": {
            "name": "_render_template",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "ServiceAccountCreateForm"
                ],
                "owner": [
                    "str"
                ]
            }
        }
    },
    "merou-master/grouper/fe/handlers/service_account_disable.py": {
        "ServiceAccountDisable.check_access": {
            "name": "check_access",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "actor": [
                    "User"
                ],
                "target": [
                    "ServiceAccount"
                ]
            }
        },
        "ServiceAccountDisable.post": {
            "name": "post",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/service_account_edit.py": {
        "ServiceAccountEdit.get": {
            "name": "get",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceAccountEdit.post": {
            "name": "post",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/service_account_enable.py": {
        "ServiceAccountEnable.check_access": {
            "name": "check_access",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "actor": [
                    "User"
                ],
                "target": [
                    "ServiceAccount"
                ]
            }
        },
        "ServiceAccountEnable.get_form": {
            "name": "get_form",
            "location": 26,
            "return": [
                "ServiceAccountEnableForm"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceAccountEnable.get": {
            "name": "get",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceAccountEnable.post": {
            "name": "post",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/service_account_permission_grant.py": {
        "ServiceAccountPermissionGrant.get": {
            "name": "get",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceAccountPermissionGrant.grant_permission_to_service_account_failed_invalid_argument": {
            "name": "grant_permission_to_service_account_failed_invalid_argument",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "permission": [
                    "str"
                ],
                "argument": [
                    "str"
                ],
                "service": [
                    "str"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "ServiceAccountPermissionGrant.grant_permission_to_service_account_failed_permission_denied": {
            "name": "grant_permission_to_service_account_failed_permission_denied",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "permission": [
                    "str"
                ],
                "argument": [
                    "str"
                ],
                "service": [
                    "str"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "ServiceAccountPermissionGrant.grant_permission_to_service_account_failed_permission_not_found": {
            "name": "grant_permission_to_service_account_failed_permission_not_found",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "permission": [
                    "str"
                ],
                "service": [
                    "str"
                ]
            }
        },
        "ServiceAccountPermissionGrant.grant_permission_to_service_account_failed_service_account_not_found": {
            "name": "grant_permission_to_service_account_failed_service_account_not_found",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "str"
                ]
            }
        },
        "ServiceAccountPermissionGrant.granted_permission_to_service_account": {
            "name": "granted_permission_to_service_account",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "permission": [
                    "str"
                ],
                "argument": [
                    "str"
                ],
                "service": [
                    "str"
                ]
            }
        },
        "ServiceAccountPermissionGrant.post": {
            "name": "post",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceAccountPermissionGrant._get_form": {
            "name": "_get_form",
            "location": 84,
            "return": [
                "ServiceAccountPermissionGrantForm"
            ],
            "arguments": {
                "self": [],
                "grantable": [
                    "List[Tuple[(str, str)]]"
                ]
            }
        },
        "ServiceAccountPermissionGrant._render_template": {
            "name": "_render_template",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "ServiceAccountPermissionGrantForm"
                ],
                "service": [
                    "str"
                ],
                "owner": [
                    "str"
                ],
                "alerts": [
                    "Optional[List[Alert]]"
                ]
            }
        }
    },
    "merou-master/grouper/fe/handlers/service_account_permission_revoke.py": {
        "ServiceAccountPermissionRevoke.check_access": {
            "name": "check_access",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "actor": [
                    "User"
                ],
                "target": [
                    "ServiceAccount"
                ]
            }
        },
        "ServiceAccountPermissionRevoke.post": {
            "name": "post",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/service_account_view.py": {
        "ServiceAccountView.get": {
            "name": "get",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/template_variables.py": {
        "get_group_view_template_vars": {
            "name": "get_group_view_template_vars",
            "location": 36,
            "return": [],
            "arguments": {
                "session": [],
                "actor": [],
                "group": [],
                "graph": []
            }
        },
        "get_user_view_template_vars": {
            "name": "get_user_view_template_vars",
            "location": 101,
            "return": [],
            "arguments": {
                "session": [],
                "actor": [],
                "user": [],
                "graph": []
            }
        },
        "get_role_user_view_template_vars": {
            "name": "get_role_user_view_template_vars",
            "location": 174,
            "return": [],
            "arguments": {
                "session": [],
                "actor": [],
                "user": [],
                "group": [],
                "graph": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/users_public_key.py": {
        "UsersPublicKey.get": {
            "name": "get",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/users_user_tokens.py": {
        "UsersUserTokens.get": {
            "name": "get",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/users_view.py": {
        "UsersView.get": {
            "name": "get",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/user_disable.py": {
        "UserDisable.check_access": {
            "name": "check_access",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "actor": [
                    "User"
                ],
                "target": [
                    "User"
                ]
            }
        },
        "UserDisable.post": {
            "name": "post",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/user_enable.py": {
        "UserEnable.check_access": {
            "name": "check_access",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "actor": [
                    "User"
                ],
                "target": [
                    "User"
                ]
            }
        },
        "UserEnable.check_access_without_membership": {
            "name": "check_access_without_membership",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "actor": [
                    "User"
                ],
                "target": [
                    "User"
                ]
            }
        },
        "UserEnable.post": {
            "name": "post",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/user_metadata.py": {
        "UserMetadata.check_access": {
            "name": "check_access",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "actor": [
                    "User"
                ],
                "target": [
                    "User"
                ]
            }
        },
        "UserMetadata.get": {
            "name": "get",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserMetadata.post": {
            "name": "post",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/user_password_add.py": {
        "UserPasswordAdd.check_access": {
            "name": "check_access",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "actor": [
                    "User"
                ],
                "target": [
                    "User"
                ]
            }
        },
        "UserPasswordAdd.get": {
            "name": "get",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserPasswordAdd.post": {
            "name": "post",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/user_password_delete.py": {
        "UserPasswordDelete.check_access": {
            "name": "check_access",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "actor": [
                    "User"
                ],
                "target": [
                    "User"
                ]
            }
        },
        "UserPasswordDelete.get": {
            "name": "get",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserPasswordDelete.post": {
            "name": "post",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/user_requests.py": {
        "UserRequests.get": {
            "name": "get",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/user_shell.py": {
        "UserShell.check_access": {
            "name": "check_access",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "actor": [
                    "User"
                ],
                "target": [
                    "User"
                ]
            }
        },
        "UserShell.get": {
            "name": "get",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserShell.post": {
            "name": "post",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/user_token_add.py": {
        "UserTokenAdd.check_access": {
            "name": "check_access",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "actor": [
                    "User"
                ],
                "target": [
                    "User"
                ]
            }
        },
        "UserTokenAdd.get": {
            "name": "get",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserTokenAdd.post": {
            "name": "post",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/user_token_disable.py": {
        "UserTokenDisable.check_access": {
            "name": "check_access",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "actor": [
                    "User"
                ],
                "target": [
                    "User"
                ]
            }
        },
        "UserTokenDisable.get": {
            "name": "get",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserTokenDisable.post": {
            "name": "post",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/user_view.py": {
        "UserView.get": {
            "name": "get",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/fe/handlers/__init__.py": {},
    "merou-master/grouper/handlers/health_check.py": {
        "HealthCheck.initialize": {
            "name": "initialize",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HealthCheck.get": {
            "name": "get",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/handlers/__init__.py": {},
    "merou-master/grouper/models/async_notification.py": {},
    "merou-master/grouper/models/audit.py": {},
    "merou-master/grouper/models/audit_log.py": {
        "AuditLog.log": {
            "name": "log",
            "location": 60,
            "return": [],
            "arguments": {
                "session": [],
                "actor_id": [],
                "action": [],
                "description": [],
                "on_user_id": [],
                "on_group_id": [],
                "on_permission_id": [],
                "category": []
            }
        },
        "AuditLog.get_entries": {
            "name": "get_entries",
            "location": 104,
            "return": [],
            "arguments": {
                "session": [],
                "actor_id": [],
                "on_user_id": [],
                "on_group_id": [],
                "on_permission_id": [],
                "limit": [],
                "offset": [],
                "involve_user_id": [],
                "category": [],
                "action": []
            }
        }
    },
    "merou-master/grouper/models/audit_member.py": {},
    "merou-master/grouper/models/comment.py": {
        "CommentObjectMixin.member_type": {
            "name": "member_type",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/models/counter.py": {
        "Counter.incr": {
            "name": "incr",
            "location": 18,
            "return": [],
            "arguments": {
                "cls": [],
                "session": [],
                "name": [],
                "count": []
            }
        },
        "Counter.decr": {
            "name": "decr",
            "location": 31,
            "return": [],
            "arguments": {
                "cls": [],
                "session": [],
                "name": [],
                "count": []
            }
        }
    },
    "merou-master/grouper/models/group.py": {
        "Group.name": {
            "name": "name",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.type": {
            "name": "type",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.revoke_member": {
            "name": "revoke_member",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requester": [
                    "User"
                ],
                "user_or_group": [
                    "Union[(User, Group)]"
                ],
                "reason": [
                    "str"
                ]
            }
        },
        "Group.edit_member": {
            "name": "edit_member",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requester": [
                    "User"
                ],
                "user_or_group": [
                    "Union[(User, Group)]"
                ],
                "reason": [
                    "str"
                ]
            }
        },
        "Group.add_member": {
            "name": "add_member",
            "location": 141,
            "return": [
                "Request"
            ],
            "arguments": {
                "self": [],
                "requester": [
                    "User"
                ],
                "user_or_group": [
                    "Union[(User, Group)]"
                ],
                "reason": [
                    "str"
                ],
                "status": [
                    "str"
                ],
                "expiration": [
                    "Optional[datetime]"
                ],
                "role": [
                    "str"
                ]
            }
        },
        "Group.my_permissions": {
            "name": "my_permissions",
            "location": 176,
            "return": [
                "List[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.my_users": {
            "name": "my_users",
            "location": 199,
            "return": [
                "List[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.my_approver_users": {
            "name": "my_approver_users",
            "location": 218,
            "return": [
                "List[User]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.my_log_entries": {
            "name": "my_log_entries",
            "location": 222,
            "return": [
                "List[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.my_owners_as_strings": {
            "name": "my_owners_as_strings",
            "location": 225,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.my_owners": {
            "name": "my_owners",
            "location": 229,
            "return": [
                "OrderedDict[(str, User)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.my_members": {
            "name": "my_members",
            "location": 237,
            "return": [
                "Mapping[(Tuple[(str, str)], Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.my_groups": {
            "name": "my_groups",
            "location": 292,
            "return": [
                "List[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.my_expiring_groups": {
            "name": "my_expiring_groups",
            "location": 314,
            "return": [
                "List[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.enable": {
            "name": "enable",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.disable": {
            "name": "disable",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.get": {
            "name": "get",
            "location": 345,
            "return": [
                "Optional[Group]"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "pk": [
                    "Optional[int]"
                ],
                "name": [
                    "Optional[str]"
                ]
            }
        },
        "Group.add": {
            "name": "add",
            "location": 354,
            "return": [
                "Group"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "Session"
                ]
            }
        },
        "Group.__repr__": {
            "name": "__repr__",
            "location": 359,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/models/group_edge.py": {
        "GroupEdge.role": {
            "name": "role",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "role": []
            }
        },
        "GroupEdge.apply_changes": {
            "name": "apply_changes",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "changes": []
            }
        },
        "GroupEdge.__repr__": {
            "name": "__repr__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/models/group_service_accounts.py": {
        "GroupServiceAccount.__repr__": {
            "name": "__repr__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/models/json_encoded_type.py": {
        "JsonEncodedType.process_bind_param": {
            "name": "process_bind_param",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "dialect": []
            }
        },
        "JsonEncodedType.process_result_value": {
            "name": "process_result_value",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "dialect": []
            }
        }
    },
    "merou-master/grouper/models/perf_profile.py": {},
    "merou-master/grouper/models/permission.py": {
        "Permission.get": {
            "name": "get",
            "location": 32,
            "return": [
                "Permission"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "name": [
                    "str"
                ]
            }
        }
    },
    "merou-master/grouper/models/permission_map.py": {
        "PermissionMap.get": {
            "name": "get",
            "location": 34,
            "return": [],
            "arguments": {
                "session": [],
                "id": []
            }
        }
    },
    "merou-master/grouper/models/permission_request.py": {
        "PermissionRequest.reference_id": {
            "name": "reference_id",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/models/permission_request_status_change.py": {},
    "merou-master/grouper/models/public_key.py": {},
    "merou-master/grouper/models/request.py": {
        "Request.reference_id": {
            "name": "reference_id",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.my_status_updates": {
            "name": "my_status_updates",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.update_status": {
            "name": "update_status",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "requester": [],
                "status": [],
                "reason": []
            }
        }
    },
    "merou-master/grouper/models/request_status_change.py": {},
    "merou-master/grouper/models/service_account.py": {
        "ServiceAccount.__repr__": {
            "name": "__repr__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceAccount.get": {
            "name": "get",
            "location": 48,
            "return": [],
            "arguments": {
                "session": [],
                "pk": [],
                "name": []
            }
        },
        "ServiceAccount.add": {
            "name": "add",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "merou-master/grouper/models/service_account_permission_map.py": {
        "ServiceAccountPermissionMap.get": {
            "name": "get",
            "location": 43,
            "return": [],
            "arguments": {
                "session": [],
                "id": []
            }
        }
    },
    "merou-master/grouper/models/user.py": {
        "User.name": {
            "name": "name",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.type": {
            "name": "type",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.__repr__": {
            "name": "__repr__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.get": {
            "name": "get",
            "location": 42,
            "return": [],
            "arguments": {
                "session": [],
                "pk": [],
                "name": []
            }
        },
        "User.just_created": {
            "name": "just_created",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "User.add": {
            "name": "add",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "User.is_member": {
            "name": "is_member",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "members": []
            }
        }
    },
    "merou-master/grouper/models/user_metadata.py": {},
    "merou-master/grouper/models/user_password.py": {
        "_make_salt": {
            "name": "_make_salt",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "UserPassword.get": {
            "name": "get",
            "location": 38,
            "return": [],
            "arguments": {
                "session": [],
                "user": [],
                "name": [],
                "id": []
            }
        },
        "UserPassword.password": {
            "name": "password",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "new_password": []
            }
        },
        "UserPassword.password_hash": {
            "name": "password_hash",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserPassword.set_password": {
            "name": "set_password",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "new_password": []
            }
        },
        "UserPassword.check_password": {
            "name": "check_password",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "password_to_check": []
            }
        },
        "UserPassword.check_hash": {
            "name": "check_hash",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "hash_to_check": []
            }
        },
        "UserPassword.enabled": {
            "name": "enabled",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserPassword.__str__": {
            "name": "__str__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/models/user_token.py": {
        "_make_secret": {
            "name": "_make_secret",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "UserToken.get_by_value": {
            "name": "get_by_value",
            "location": 38,
            "return": [],
            "arguments": {
                "session": [],
                "username": [],
                "name": []
            }
        },
        "UserToken.get": {
            "name": "get",
            "location": 47,
            "return": [],
            "arguments": {
                "session": [],
                "user": [],
                "name": [],
                "id": []
            }
        },
        "UserToken._set_secret": {
            "name": "_set_secret",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserToken.check_secret": {
            "name": "check_secret",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "secret": []
            }
        },
        "UserToken.enabled": {
            "name": "enabled",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserToken.__str__": {
            "name": "__str__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/models/__init__.py": {},
    "merou-master/grouper/models/base/constants.py": {},
    "merou-master/grouper/models/base/model_base.py": {
        "_Model.session": {
            "name": "session",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Model.get": {
            "name": "get",
            "location": 13,
            "return": [],
            "arguments": {
                "cls": [],
                "session": []
            }
        },
        "_Model.get_or_create": {
            "name": "get_or_create",
            "location": 20,
            "return": [],
            "arguments": {
                "cls": [],
                "session": []
            }
        },
        "_Model.just_created": {
            "name": "just_created",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "_Model.add": {
            "name": "add",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "_Model.delete": {
            "name": "delete",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "merou-master/grouper/models/base/session.py": {
        "flush_transaction": {
            "name": "flush_transaction",
            "location": 15,
            "return": [],
            "arguments": {
                "method": []
            }
        },
        "get_db_engine": {
            "name": "get_db_engine",
            "location": 35,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "flush_transaction.wrapper": {
            "name": "wrapper",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionWithoutAdd.add": {
            "name": "add",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionWithoutAdd.add_all": {
            "name": "add_all",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionWithoutAdd.delete": {
            "name": "delete",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/models/base/__init__.py": {},
    "merou-master/grouper/plugin/base.py": {
        "BasePlugin.configure": {
            "name": "configure",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "service_name": []
            }
        },
        "BasePlugin.check_machine_set": {
            "name": "check_machine_set",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "machine_set": []
            }
        },
        "BasePlugin.check_service_account_name": {
            "name": "check_service_account_name",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "BasePlugin.check_permission_argument": {
            "name": "check_permission_argument",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "permission": [
                    "str"
                ],
                "argument": [
                    "str"
                ]
            }
        },
        "BasePlugin.get_aliases_for_mapped_permission": {
            "name": "get_aliases_for_mapped_permission",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "permission": [],
                "argument": []
            }
        },
        "BasePlugin.get_github_app_client_secret": {
            "name": "get_github_app_client_secret",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BasePlugin.get_owner_by_arg_by_perm": {
            "name": "get_owner_by_arg_by_perm",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "BasePlugin.get_ssl_context": {
            "name": "get_ssl_context",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BasePlugin.log_auditlog_entry": {
            "name": "log_auditlog_entry",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "entry": []
            }
        },
        "BasePlugin.log_background_run": {
            "name": "log_background_run",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "success": []
            }
        },
        "BasePlugin.log_exception": {
            "name": "log_exception",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "status": [],
                "exc_type": [],
                "exc_value": [],
                "exc_tb": []
            }
        },
        "BasePlugin.log_graph_update_duration": {
            "name": "log_graph_update_duration",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "duration_ms": []
            }
        },
        "BasePlugin.log_periodic_graph_update": {
            "name": "log_periodic_graph_update",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "success": []
            }
        },
        "BasePlugin.log_request": {
            "name": "log_request",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "handler": [],
                "status": [],
                "duration_ms": [],
                "request": []
            }
        },
        "BasePlugin.user_created": {
            "name": "user_created",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "is_service_account": []
            }
        },
        "BasePlugin.will_add_public_key": {
            "name": "will_add_public_key",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "BasePlugin.will_disable_user": {
            "name": "will_disable_user",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "user": []
            }
        },
        "BasePlugin.will_update_group_membership": {
            "name": "will_update_group_membership",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "group": [],
                "member": []
            }
        }
    },
    "merou-master/grouper/plugin/exceptions.py": {},
    "merou-master/grouper/plugin/load.py": {
        "load_plugins": {
            "name": "load_plugins",
            "location": 16,
            "return": [],
            "arguments": {
                "base_plugin": [],
                "plugin_dirs": [],
                "plugin_module_paths": [],
                "service_name": []
            }
        },
        "_load_plugin_modules": {
            "name": "_load_plugin_modules",
            "location": 36,
            "return": [],
            "arguments": {
                "base_plugin": [],
                "plugin_module_paths": []
            }
        },
        "_load_plugin_modules.callback": {
            "name": "callback",
            "location": 38,
            "return": [],
            "arguments": {}
        }
    },
    "merou-master/grouper/plugin/proxy.py": {
        "PluginProxy.load_plugins": {
            "name": "load_plugins",
            "location": 23,
            "return": [],
            "arguments": {
                "cls": [],
                "settings": [],
                "service_name": []
            }
        },
        "PluginProxy.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "plugins": []
            }
        },
        "PluginProxy.add_plugin": {
            "name": "add_plugin",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "plugin": []
            }
        },
        "PluginProxy.configure": {
            "name": "configure",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "service_name": []
            }
        },
        "PluginProxy.check_machine_set": {
            "name": "check_machine_set",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "machine_set": []
            }
        },
        "PluginProxy.check_service_account_name": {
            "name": "check_service_account_name",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "PluginProxy.check_permission_argument": {
            "name": "check_permission_argument",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "permission": [
                    "str"
                ],
                "argument": [
                    "str"
                ]
            }
        },
        "PluginProxy.get_aliases_for_mapped_permission": {
            "name": "get_aliases_for_mapped_permission",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "permission": [],
                "argument": []
            }
        },
        "PluginProxy.get_github_app_client_secret": {
            "name": "get_github_app_client_secret",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PluginProxy.get_owner_by_arg_by_perm": {
            "name": "get_owner_by_arg_by_perm",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "PluginProxy.get_ssl_context": {
            "name": "get_ssl_context",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PluginProxy.log_auditlog_entry": {
            "name": "log_auditlog_entry",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "entry": []
            }
        },
        "PluginProxy.log_background_run": {
            "name": "log_background_run",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "success": []
            }
        },
        "PluginProxy.log_exception": {
            "name": "log_exception",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "status": [],
                "exc_type": [],
                "exc_value": [],
                "exc_tb": []
            }
        },
        "PluginProxy.log_graph_update_duration": {
            "name": "log_graph_update_duration",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "duration_ms": []
            }
        },
        "PluginProxy.log_periodic_graph_update": {
            "name": "log_periodic_graph_update",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "success": []
            }
        },
        "PluginProxy.log_request": {
            "name": "log_request",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "handler": [],
                "status": [],
                "duration_ms": [],
                "request": []
            }
        },
        "PluginProxy.user_created": {
            "name": "user_created",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "is_service_account": []
            }
        },
        "PluginProxy.will_add_public_key": {
            "name": "will_add_public_key",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "PluginProxy.will_disable_user": {
            "name": "will_disable_user",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "user": []
            }
        },
        "PluginProxy.will_update_group_membership": {
            "name": "will_update_group_membership",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "group": [],
                "member": []
            }
        }
    },
    "merou-master/grouper/plugin/__init__.py": {
        "set_global_plugin_proxy": {
            "name": "set_global_plugin_proxy",
            "location": 6,
            "return": [],
            "arguments": {
                "plugin_proxy": []
            }
        },
        "get_plugin_proxy": {
            "name": "get_plugin_proxy",
            "location": 12,
            "return": [],
            "arguments": {}
        }
    },
    "merou-master/grouper/repositories/audit_log.py": {
        "AuditLogRepository.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "plugins": []
            }
        },
        "AuditLogRepository.entries_affecting_group": {
            "name": "entries_affecting_group",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "group": [],
                "limit": []
            }
        },
        "AuditLogRepository.entries_affecting_permission": {
            "name": "entries_affecting_permission",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "limit": []
            }
        },
        "AuditLogRepository.entries_affecting_user": {
            "name": "entries_affecting_user",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "limit": []
            }
        },
        "AuditLogRepository.log": {
            "name": "log",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "authorization": [],
                "action": [],
                "description": [],
                "on_user": [],
                "on_group": [],
                "on_permission": [],
                "category": [],
                "date": []
            }
        },
        "AuditLogRepository._id_for_group": {
            "name": "_id_for_group",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "group": []
            }
        },
        "AuditLogRepository._id_for_permission": {
            "name": "_id_for_permission",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "permission": []
            }
        },
        "AuditLogRepository._id_for_user": {
            "name": "_id_for_user",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "AuditLogRepository._to_audit_log_entry": {
            "name": "_to_audit_log_entry",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "entry": []
            }
        }
    },
    "merou-master/grouper/repositories/checkpoint.py": {
        "CheckpointRepository.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "CheckpointRepository.get_checkpoint": {
            "name": "get_checkpoint",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckpointRepository.update_checkpoint": {
            "name": "update_checkpoint",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/repositories/factory.py": {
        "SessionFactory.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "SessionFactory.create_session": {
            "name": "create_session",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SingletonSessionFactory.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "SingletonSessionFactory.create_session": {
            "name": "create_session",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphRepositoryFactory.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "settings": [],
                "plugins": [],
                "session_factory": [],
                "graph": []
            }
        },
        "GraphRepositoryFactory.graph": {
            "name": "graph",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphRepositoryFactory.session": {
            "name": "session",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphRepositoryFactory.create_audit_log_repository": {
            "name": "create_audit_log_repository",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphRepositoryFactory.create_checkpoint_repository": {
            "name": "create_checkpoint_repository",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphRepositoryFactory.create_group_edge_repository": {
            "name": "create_group_edge_repository",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphRepositoryFactory.create_group_repository": {
            "name": "create_group_repository",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphRepositoryFactory.create_group_request_repository": {
            "name": "create_group_request_repository",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphRepositoryFactory.create_permission_repository": {
            "name": "create_permission_repository",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphRepositoryFactory.create_permission_grant_repository": {
            "name": "create_permission_grant_repository",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphRepositoryFactory.create_service_account_repository": {
            "name": "create_service_account_repository",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphRepositoryFactory.create_schema_repository": {
            "name": "create_schema_repository",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphRepositoryFactory.create_transaction_repository": {
            "name": "create_transaction_repository",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphRepositoryFactory.create_user_repository": {
            "name": "create_user_repository",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLRepositoryFactory.__init__": {
            "name": "__init__",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "settings": [],
                "plugins": [],
                "session_factory": []
            }
        },
        "SQLRepositoryFactory.session": {
            "name": "session",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLRepositoryFactory.create_audit_log_repository": {
            "name": "create_audit_log_repository",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLRepositoryFactory.create_checkpoint_repository": {
            "name": "create_checkpoint_repository",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLRepositoryFactory.create_group_edge_repository": {
            "name": "create_group_edge_repository",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLRepositoryFactory.create_group_repository": {
            "name": "create_group_repository",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLRepositoryFactory.create_group_request_repository": {
            "name": "create_group_request_repository",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLRepositoryFactory.create_permission_repository": {
            "name": "create_permission_repository",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLRepositoryFactory.create_permission_grant_repository": {
            "name": "create_permission_grant_repository",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLRepositoryFactory.create_schema_repository": {
            "name": "create_schema_repository",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLRepositoryFactory.create_service_account_repository": {
            "name": "create_service_account_repository",
            "location": 216,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLRepositoryFactory.create_transaction_repository": {
            "name": "create_transaction_repository",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLRepositoryFactory.create_user_repository": {
            "name": "create_user_repository",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/repositories/group.py": {
        "GroupRepository.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "GroupRepository.create_group": {
            "name": "create_group",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "description": [],
                "join_policy": [],
                "email": []
            }
        },
        "GroupRepository.get_group": {
            "name": "get_group",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "merou-master/grouper/repositories/group_edge.py": {
        "GraphGroupEdgeRepository.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "graph": []
            }
        },
        "GraphGroupEdgeRepository.groups_of_user": {
            "name": "groups_of_user",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "username": []
            }
        },
        "SQLGroupEdgeRepository.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "SQLGroupEdgeRepository.groups_of_user": {
            "name": "groups_of_user",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "username": []
            }
        }
    },
    "merou-master/grouper/repositories/group_request.py": {
        "GroupRequestRepository.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "GroupRequestRepository.cancel_user_request": {
            "name": "cancel_user_request",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "user_request": [],
                "reason": [],
                "authorization": []
            }
        },
        "GroupRequestRepository.pending_requests_for_user": {
            "name": "pending_requests_for_user",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        }
    },
    "merou-master/grouper/repositories/interfaces.py": {
        "GroupEdgeRepository.groups_of_user": {
            "name": "groups_of_user",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "username": []
            }
        },
        "PermissionRepository.create_permission": {
            "name": "create_permission",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "description": [],
                "audited": [],
                "enabled": [],
                "created_on": []
            }
        },
        "PermissionRepository.disable_permission": {
            "name": "disable_permission",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "PermissionRepository.get_permission": {
            "name": "get_permission",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "PermissionRepository.list_permissions": {
            "name": "list_permissions",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "pagination": [],
                "audited_only": []
            }
        },
        "PermissionGrantRepository.all_grants": {
            "name": "all_grants",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionGrantRepository.all_grants_of_permission": {
            "name": "all_grants_of_permission",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "permission": []
            }
        },
        "PermissionGrantRepository.grant_permission_to_group": {
            "name": "grant_permission_to_group",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "argument": [],
                "group": []
            }
        },
        "PermissionGrantRepository.grant_permission_to_service_account": {
            "name": "grant_permission_to_service_account",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "argument": [],
                "service": []
            }
        },
        "PermissionGrantRepository.group_paginated_grants_for_permission": {
            "name": "group_paginated_grants_for_permission",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "pagination": [],
                "include_disabled_groups": [],
                "argument": []
            }
        },
        "PermissionGrantRepository.group_grants_for_permission": {
            "name": "group_grants_for_permission",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "include_disabled_groups": [],
                "argument": []
            }
        },
        "PermissionGrantRepository.permission_grants_for_group": {
            "name": "permission_grants_for_group",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "PermissionGrantRepository.permission_grants_for_service_account": {
            "name": "permission_grants_for_service_account",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "PermissionGrantRepository.permission_grants_for_user": {
            "name": "permission_grants_for_user",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "PermissionGrantRepository.revoke_all_group_grants": {
            "name": "revoke_all_group_grants",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "permission": []
            }
        },
        "PermissionGrantRepository.revoke_all_service_account_grants": {
            "name": "revoke_all_service_account_grants",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "permission": []
            }
        },
        "PermissionGrantRepository.service_account_grants_for_permission": {
            "name": "service_account_grants_for_permission",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "argument": []
            }
        },
        "PermissionGrantRepository.service_account_paginated_grants_for_permission": {
            "name": "service_account_paginated_grants_for_permission",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "pagination": [],
                "argument": []
            }
        },
        "PermissionGrantRepository.service_account_has_permission": {
            "name": "service_account_has_permission",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "service": [],
                "permission": []
            }
        },
        "PermissionGrantRepository.user_has_permission": {
            "name": "user_has_permission",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "permission": []
            }
        },
        "UserRepository.all_users": {
            "name": "all_users",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserRepository.disable_user": {
            "name": "disable_user",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "UserRepository.user_exists": {
            "name": "user_exists",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "UserRepository.user_is_enabled": {
            "name": "user_is_enabled",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "RepositoryFactory.create_audit_log_repository": {
            "name": "create_audit_log_repository",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RepositoryFactory.create_checkpoint_repository": {
            "name": "create_checkpoint_repository",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RepositoryFactory.create_group_edge_repository": {
            "name": "create_group_edge_repository",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RepositoryFactory.create_group_repository": {
            "name": "create_group_repository",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RepositoryFactory.create_group_request_repository": {
            "name": "create_group_request_repository",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RepositoryFactory.create_permission_repository": {
            "name": "create_permission_repository",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RepositoryFactory.create_permission_grant_repository": {
            "name": "create_permission_grant_repository",
            "location": 218,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RepositoryFactory.create_schema_repository": {
            "name": "create_schema_repository",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RepositoryFactory.create_service_account_repository": {
            "name": "create_service_account_repository",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RepositoryFactory.create_transaction_repository": {
            "name": "create_transaction_repository",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RepositoryFactory.create_user_repository": {
            "name": "create_user_repository",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/repositories/permission.py": {
        "GraphPermissionRepository.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "graph": [],
                "repository": []
            }
        },
        "GraphPermissionRepository.create_permission": {
            "name": "create_permission",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "description": [],
                "audited": [],
                "enabled": [],
                "created_on": []
            }
        },
        "GraphPermissionRepository.disable_permission": {
            "name": "disable_permission",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "GraphPermissionRepository.get_permission": {
            "name": "get_permission",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "GraphPermissionRepository.list_permissions": {
            "name": "list_permissions",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "pagination": [],
                "audited_only": []
            }
        },
        "SQLPermissionRepository.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "SQLPermissionRepository.create_permission": {
            "name": "create_permission",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "description": [],
                "audited": [],
                "enabled": [],
                "created_on": []
            }
        },
        "SQLPermissionRepository.disable_permission": {
            "name": "disable_permission",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "SQLPermissionRepository.get_permission": {
            "name": "get_permission",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "SQLPermissionRepository.list_permissions": {
            "name": "list_permissions",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "pagination": [],
                "audited_only": []
            }
        }
    },
    "merou-master/grouper/repositories/permission_grant.py": {
        "GraphPermissionGrantRepository.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "graph": [],
                "repository": []
            }
        },
        "GraphPermissionGrantRepository.all_grants": {
            "name": "all_grants",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphPermissionGrantRepository.all_grants_of_permission": {
            "name": "all_grants_of_permission",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "permission": []
            }
        },
        "GraphPermissionGrantRepository.grant_permission_to_group": {
            "name": "grant_permission_to_group",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "argument": [],
                "group": []
            }
        },
        "GraphPermissionGrantRepository.grant_permission_to_service_account": {
            "name": "grant_permission_to_service_account",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "argument": [],
                "service": []
            }
        },
        "GraphPermissionGrantRepository.group_grants_for_permission": {
            "name": "group_grants_for_permission",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "include_disabled_groups": [],
                "argument": []
            }
        },
        "GraphPermissionGrantRepository.group_paginated_grants_for_permission": {
            "name": "group_paginated_grants_for_permission",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "pagination": [],
                "include_disabled_groups": [],
                "argument": []
            }
        },
        "GraphPermissionGrantRepository.permission_grants_for_group": {
            "name": "permission_grants_for_group",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "GraphPermissionGrantRepository.permission_grants_for_service_account": {
            "name": "permission_grants_for_service_account",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "GraphPermissionGrantRepository.permission_grants_for_user": {
            "name": "permission_grants_for_user",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "GraphPermissionGrantRepository.revoke_all_group_grants": {
            "name": "revoke_all_group_grants",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "permission": []
            }
        },
        "GraphPermissionGrantRepository.revoke_all_service_account_grants": {
            "name": "revoke_all_service_account_grants",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "permission": []
            }
        },
        "GraphPermissionGrantRepository.service_account_grants_for_permission": {
            "name": "service_account_grants_for_permission",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "argument": []
            }
        },
        "GraphPermissionGrantRepository.service_account_paginated_grants_for_permission": {
            "name": "service_account_paginated_grants_for_permission",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "pagination": [],
                "argument": []
            }
        },
        "GraphPermissionGrantRepository.service_account_has_permission": {
            "name": "service_account_has_permission",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "service": [],
                "permission": []
            }
        },
        "GraphPermissionGrantRepository.user_has_permission": {
            "name": "user_has_permission",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "permission": []
            }
        },
        "SQLPermissionGrantRepository.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "SQLPermissionGrantRepository.all_grants": {
            "name": "all_grants",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLPermissionGrantRepository.all_grants_of_permission": {
            "name": "all_grants_of_permission",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "permission": []
            }
        },
        "SQLPermissionGrantRepository.grant_permission_to_group": {
            "name": "grant_permission_to_group",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "argument": [],
                "group": []
            }
        },
        "SQLPermissionGrantRepository.grant_permission_to_service_account": {
            "name": "grant_permission_to_service_account",
            "location": 231,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "argument": [],
                "service": []
            }
        },
        "SQLPermissionGrantRepository.group_grants_for_permission": {
            "name": "group_grants_for_permission",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "include_disabled_groups": [],
                "argument": []
            }
        },
        "SQLPermissionGrantRepository.permission_grants_for_group": {
            "name": "permission_grants_for_group",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "SQLPermissionGrantRepository.permission_grants_for_service_account": {
            "name": "permission_grants_for_service_account",
            "location": 289,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "SQLPermissionGrantRepository.permission_grants_for_user": {
            "name": "permission_grants_for_user",
            "location": 319,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "SQLPermissionGrantRepository.revoke_all_group_grants": {
            "name": "revoke_all_group_grants",
            "location": 355,
            "return": [],
            "arguments": {
                "self": [],
                "permission": []
            }
        },
        "SQLPermissionGrantRepository.revoke_all_service_account_grants": {
            "name": "revoke_all_service_account_grants",
            "location": 386,
            "return": [],
            "arguments": {
                "self": [],
                "permission": []
            }
        },
        "SQLPermissionGrantRepository.service_account_grants_for_permission": {
            "name": "service_account_grants_for_permission",
            "location": 421,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "argument": []
            }
        },
        "SQLPermissionGrantRepository.service_account_has_permission": {
            "name": "service_account_has_permission",
            "location": 456,
            "return": [],
            "arguments": {
                "self": [],
                "service": [],
                "permission": []
            }
        },
        "SQLPermissionGrantRepository.user_has_permission": {
            "name": "user_has_permission",
            "location": 463,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "permission": []
            }
        },
        "SQLPermissionGrantRepository._permission_grants_for_group_ids": {
            "name": "_permission_grants_for_group_ids",
            "location": 470,
            "return": [],
            "arguments": {
                "self": [],
                "group_ids": []
            }
        },
        "SQLPermissionGrantRepository.group_paginated_grants_for_permission": {
            "name": "group_paginated_grants_for_permission",
            "location": 531,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "pagination": [],
                "include_disabled_groups": [],
                "argument": []
            }
        },
        "SQLPermissionGrantRepository.service_account_paginated_grants_for_permission": {
            "name": "service_account_paginated_grants_for_permission",
            "location": 541,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "pagination": [],
                "argument": []
            }
        }
    },
    "merou-master/grouper/repositories/schema.py": {
        "SchemaRepository.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "SchemaRepository.drop_schema": {
            "name": "drop_schema",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SchemaRepository.dump_schema": {
            "name": "dump_schema",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SchemaRepository.initialize_schema": {
            "name": "initialize_schema",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/repositories/service_account.py": {
        "ServiceAccountRepository.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "ServiceAccountRepository.assign_service_account_to_group": {
            "name": "assign_service_account_to_group",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "groupname": []
            }
        },
        "ServiceAccountRepository.create_service_account": {
            "name": "create_service_account",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "owner": [],
                "machine_set": [],
                "description": [],
                "initial_metadata": []
            }
        },
        "ServiceAccountRepository.enable_service_account": {
            "name": "enable_service_account",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ServiceAccountRepository.mark_disabled_user_as_service_account": {
            "name": "mark_disabled_user_as_service_account",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "description": [],
                "mdbset": []
            }
        },
        "ServiceAccountRepository.owner_of_service_account": {
            "name": "owner_of_service_account",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ServiceAccountRepository.service_account_exists": {
            "name": "service_account_exists",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ServiceAccountRepository.service_account_is_enabled": {
            "name": "service_account_is_enabled",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "merou-master/grouper/repositories/transaction.py": {
        "SQLTransaction.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "Session"
                ]
            }
        },
        "SQLTransaction.__enter__": {
            "name": "__enter__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLTransaction.__exit__": {
            "name": "__exit__",
            "location": 21,
            "return": [
                "Literal[False]"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[type]"
                ],
                "exc_val": [
                    "Optional[Exception]"
                ],
                "exc_tb": [
                    "Optional[TracebackType]"
                ]
            }
        },
        "TransactionRepository.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "Session"
                ]
            }
        },
        "TransactionRepository.transaction": {
            "name": "transaction",
            "location": 40,
            "return": [
                "SQLTransaction"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/repositories/user.py": {
        "GraphUserRepository.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "graph": [],
                "repository": []
            }
        },
        "GraphUserRepository.all_users": {
            "name": "all_users",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphUserRepository.disable_user": {
            "name": "disable_user",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "GraphUserRepository.user_exists": {
            "name": "user_exists",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "GraphUserRepository.user_is_enabled": {
            "name": "user_is_enabled",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "SQLUserRepository.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "SQLUserRepository.all_users": {
            "name": "all_users",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLUserRepository.disable_user": {
            "name": "disable_user",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "SQLUserRepository.user_exists": {
            "name": "user_exists",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "SQLUserRepository.user_is_enabled": {
            "name": "user_is_enabled",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "merou-master/grouper/repositories/__init__.py": {},
    "merou-master/grouper/services/audit_log.py": {
        "AuditLogService.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "audit_log_repository": []
            }
        },
        "AuditLogService.entries_affecting_group": {
            "name": "entries_affecting_group",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "group": [],
                "limit": []
            }
        },
        "AuditLogService.entries_affecting_permission": {
            "name": "entries_affecting_permission",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "limit": []
            }
        },
        "AuditLogService.entries_affecting_user": {
            "name": "entries_affecting_user",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "limit": []
            }
        },
        "AuditLogService.log_create_service_account": {
            "name": "log_create_service_account",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "service": [],
                "owner": [],
                "authorization": [],
                "date": []
            }
        },
        "AuditLogService.log_create_service_account_from_disabled_user": {
            "name": "log_create_service_account_from_disabled_user",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "authorization": [],
                "date": []
            }
        },
        "AuditLogService.log_create_permission": {
            "name": "log_create_permission",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "authorization": [],
                "date": []
            }
        },
        "AuditLogService.log_disable_permission": {
            "name": "log_disable_permission",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "authorization": [],
                "date": []
            }
        },
        "AuditLogService.log_disable_user": {
            "name": "log_disable_user",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "username": [],
                "authorization": [],
                "date": []
            }
        },
        "AuditLogService.log_enable_service_account": {
            "name": "log_enable_service_account",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "owner": [],
                "authorization": [],
                "date": []
            }
        },
        "AuditLogService.log_grant_permission_to_service_account": {
            "name": "log_grant_permission_to_service_account",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "argument": [],
                "service": [],
                "authorization": [],
                "date": []
            }
        },
        "AuditLogService.log_revoke_group_permission_grant": {
            "name": "log_revoke_group_permission_grant",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "group": [],
                "permission": [],
                "argument": [],
                "authorization": [],
                "date": []
            }
        },
        "AuditLogService.log_revoke_service_account_permission_grant": {
            "name": "log_revoke_service_account_permission_grant",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "service_account": [],
                "permission": [],
                "argument": [],
                "authorization": [],
                "date": []
            }
        },
        "AuditLogService.log_user_group_request_status_change": {
            "name": "log_user_group_request_status_change",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "status": [],
                "authorization": [],
                "date": []
            }
        }
    },
    "merou-master/grouper/services/factory.py": {
        "ServiceFactory.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "settings": [],
                "plugins": [],
                "repository_factory": []
            }
        },
        "ServiceFactory.create_audit_log_service": {
            "name": "create_audit_log_service",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceFactory.create_group_request_service": {
            "name": "create_group_request_service",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceFactory.create_group_service": {
            "name": "create_group_service",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceFactory.create_permission_service": {
            "name": "create_permission_service",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceFactory.create_schema_service": {
            "name": "create_schema_service",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceFactory.create_service_account_service": {
            "name": "create_service_account_service",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceFactory.create_transaction_service": {
            "name": "create_transaction_service",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceFactory.create_user_service": {
            "name": "create_user_service",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/services/group.py": {
        "GroupService.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "group_repository": [],
                "permission_grant_repository": []
            }
        },
        "GroupService.create_group": {
            "name": "create_group",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "description": [],
                "join_policy": [],
                "email": []
            }
        },
        "GroupService.group_has_matching_permission_grant": {
            "name": "group_has_matching_permission_grant",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "group": [],
                "permission": [],
                "argument": []
            }
        },
        "GroupService.grant_permission_to_group": {
            "name": "grant_permission_to_group",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "argument": [],
                "group": []
            }
        },
        "GroupService.group_exists": {
            "name": "group_exists",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "GroupService.is_valid_group_name": {
            "name": "is_valid_group_name",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "GroupService.permission_grants_for_group": {
            "name": "permission_grants_for_group",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "merou-master/grouper/services/group_request.py": {
        "GroupRequestService.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "group_request_repository": [],
                "audit_log_service": []
            }
        },
        "GroupRequestService.cancel_all_requests_for_user": {
            "name": "cancel_all_requests_for_user",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "reason": [],
                "authorization": []
            }
        }
    },
    "merou-master/grouper/services/permission.py": {
        "PermissionService.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "audit_log": [],
                "permission_repository": [],
                "permission_grant_repository": []
            }
        },
        "PermissionService.all_grants": {
            "name": "all_grants",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionService.all_grants_of_permission": {
            "name": "all_grants_of_permission",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "permission": []
            }
        },
        "PermissionService.create_permission": {
            "name": "create_permission",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "description": []
            }
        },
        "PermissionService.create_system_permissions": {
            "name": "create_system_permissions",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionService.disable_permission_and_revoke_grants": {
            "name": "disable_permission_and_revoke_grants",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "authorization": []
            }
        },
        "PermissionService.group_paginated_grants_for_permission": {
            "name": "group_paginated_grants_for_permission",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "pagination": [],
                "argument": []
            }
        },
        "PermissionService.group_grants_for_permission": {
            "name": "group_grants_for_permission",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "argument": []
            }
        },
        "PermissionService.service_account_paginated_grants_for_permission": {
            "name": "service_account_paginated_grants_for_permission",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "pagination": [],
                "argument": []
            }
        },
        "PermissionService.service_account_grants_for_permission": {
            "name": "service_account_grants_for_permission",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "argument": []
            }
        },
        "PermissionService.is_system_permission": {
            "name": "is_system_permission",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "PermissionService.is_valid_permission_argument": {
            "name": "is_valid_permission_argument",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "argument": []
            }
        },
        "PermissionService.list_permissions": {
            "name": "list_permissions",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "pagination": [],
                "audited_only": []
            }
        },
        "PermissionService.permission": {
            "name": "permission",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "PermissionService.permission_exists": {
            "name": "permission_exists",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "merou-master/grouper/services/schema.py": {
        "SchemaService.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "schema_repository": []
            }
        },
        "SchemaService.dump_schema": {
            "name": "dump_schema",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SchemaService.initialize_schema": {
            "name": "initialize_schema",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/services/service_account.py": {
        "ServiceAccountService.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "settings": [],
                "plugins": [],
                "user_repository": [],
                "service_account_repository": [],
                "permission_grant_repository": [],
                "permission_repository": [],
                "group_edge_repository": [],
                "group_request_repository": [],
                "audit_log_service": []
            }
        },
        "ServiceAccountService.create_service_account": {
            "name": "create_service_account",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "service": [],
                "owner": [],
                "machine_set": [],
                "description": [],
                "initial_metadata": [],
                "authorization": []
            }
        },
        "ServiceAccountService.create_service_account_from_disabled_user": {
            "name": "create_service_account_from_disabled_user",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "authorization": []
            }
        },
        "ServiceAccountService.enable_service_account": {
            "name": "enable_service_account",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "owner": [],
                "authorization": []
            }
        },
        "ServiceAccountService.grant_permission_to_service_account": {
            "name": "grant_permission_to_service_account",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "argument": [],
                "service": [],
                "authorization": []
            }
        },
        "ServiceAccountService.is_valid_service_account_name": {
            "name": "is_valid_service_account_name",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ServiceAccountService.owner_of_service_account": {
            "name": "owner_of_service_account",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "service": []
            }
        },
        "ServiceAccountService.permission_grants_for_service_account": {
            "name": "permission_grants_for_service_account",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "service": []
            }
        },
        "ServiceAccountService.service_account_exists": {
            "name": "service_account_exists",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "service": []
            }
        },
        "ServiceAccountService.service_account_is_enabled": {
            "name": "service_account_is_enabled",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "service": []
            }
        },
        "ServiceAccountService.service_account_is_permission_admin": {
            "name": "service_account_is_permission_admin",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "service": []
            }
        },
        "ServiceAccountService.service_account_is_user_admin": {
            "name": "service_account_is_user_admin",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "service": []
            }
        },
        "ServiceAccountService.permissions_grantable_by_service_account": {
            "name": "permissions_grantable_by_service_account",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "service": []
            }
        }
    },
    "merou-master/grouper/services/transaction.py": {
        "TransactionService.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "transaction_repository": [],
                "checkpoint_repository": []
            }
        },
        "TransactionService.transaction": {
            "name": "transaction",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/services/user.py": {
        "UserService.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "user_repository": [],
                "permission_repository": [],
                "permission_grant_repository": [],
                "group_edge_repository": [],
                "audit_log_service": []
            }
        },
        "UserService.all_users": {
            "name": "all_users",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserService.disable_user": {
            "name": "disable_user",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "authorization": []
            }
        },
        "UserService.groups_of_user": {
            "name": "groups_of_user",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "UserService.permission_access_for_user": {
            "name": "permission_access_for_user",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "permission": []
            }
        },
        "UserService.permission_grants_for_user": {
            "name": "permission_grants_for_user",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "UserService.user_exists": {
            "name": "user_exists",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "UserService.user_is_audit_manager": {
            "name": "user_is_audit_manager",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "UserService.user_is_permission_admin": {
            "name": "user_is_permission_admin",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "UserService.user_is_user_admin": {
            "name": "user_is_user_admin",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "UserService.user_can_create_permissions": {
            "name": "user_can_create_permissions",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "UserService.permissions_grantable_by_user": {
            "name": "permissions_grantable_by_user",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        }
    },
    "merou-master/grouper/services/__init__.py": {},
    "merou-master/grouper/usecases/authorization.py": {},
    "merou-master/grouper/usecases/convert_user_to_service_account.py": {
        "ConvertUserToServiceAccountUI.convert_user_to_service_account_failed_permission_denied": {
            "name": "convert_user_to_service_account_failed_permission_denied",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "ConvertUserToServiceAccountUI.convert_user_to_service_account_failed_user_is_in_groups": {
            "name": "convert_user_to_service_account_failed_user_is_in_groups",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "ConvertUserToServiceAccountUI.converted_user_to_service_account": {
            "name": "converted_user_to_service_account",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "owner": []
            }
        },
        "ConvertUserToServiceAccount.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "actor": [],
                "ui": [],
                "user_service": [],
                "service_account_service": [],
                "group_request_service": [],
                "transaction_service": []
            }
        },
        "ConvertUserToServiceAccount.convert_user_to_service_account": {
            "name": "convert_user_to_service_account",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "owner": []
            }
        }
    },
    "merou-master/grouper/usecases/create_service_account.py": {
        "CreateServiceAccountUI.create_service_account_failed_already_exists": {
            "name": "create_service_account_failed_already_exists",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "service": [],
                "owner": []
            }
        },
        "CreateServiceAccountUI.create_service_account_failed_invalid_name": {
            "name": "create_service_account_failed_invalid_name",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "service": [],
                "owner": [],
                "message": []
            }
        },
        "CreateServiceAccountUI.create_service_account_failed_invalid_machine_set": {
            "name": "create_service_account_failed_invalid_machine_set",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "service": [],
                "owner": [],
                "machine_set": [],
                "message": []
            }
        },
        "CreateServiceAccountUI.create_service_account_failed_invalid_owner": {
            "name": "create_service_account_failed_invalid_owner",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "service": [],
                "owner": []
            }
        },
        "CreateServiceAccountUI.create_service_account_failed_permission_denied": {
            "name": "create_service_account_failed_permission_denied",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "service": [],
                "owner": []
            }
        },
        "CreateServiceAccountUI.created_service_account": {
            "name": "created_service_account",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "service": [],
                "owner": []
            }
        },
        "CreateServiceAccount.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "actor": [],
                "ui": [],
                "settings": [],
                "plugins": [],
                "service_account_service": [],
                "user_service": [],
                "transaction_service": []
            }
        },
        "CreateServiceAccount.can_create_service_account": {
            "name": "can_create_service_account",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "owner": []
            }
        },
        "CreateServiceAccount.create_service_account": {
            "name": "create_service_account",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "service": [],
                "owner": [],
                "machine_set": [],
                "description": [],
                "initial_metadata": []
            }
        }
    },
    "merou-master/grouper/usecases/disable_permission.py": {
        "DisablePermissionUI.disabled_permission": {
            "name": "disabled_permission",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "DisablePermissionUI.disable_permission_failed_existing_grants": {
            "name": "disable_permission_failed_existing_grants",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "group_grants": [],
                "service_account_grants": []
            }
        },
        "DisablePermissionUI.disable_permission_failed_not_found": {
            "name": "disable_permission_failed_not_found",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "DisablePermissionUI.disable_permission_failed_permission_denied": {
            "name": "disable_permission_failed_permission_denied",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "DisablePermissionUI.disable_permission_failed_system_permission": {
            "name": "disable_permission_failed_system_permission",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "DisablePermission.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "actor": [],
                "ui": [],
                "permission_service": [],
                "user_service": [],
                "transaction_service": []
            }
        },
        "DisablePermission.disable_permission": {
            "name": "disable_permission",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "merou-master/grouper/usecases/dump_schema.py": {
        "DumpSchemaUI.dumped_schema": {
            "name": "dumped_schema",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "schema": []
            }
        },
        "DumpSchema.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "ui": [],
                "schema_service": []
            }
        },
        "DumpSchema.dump_schema": {
            "name": "dump_schema",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/usecases/factory.py": {
        "UseCaseFactory.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "settings": [],
                "plugins": [],
                "service_factory": []
            }
        },
        "UseCaseFactory.create_create_service_account_usecase": {
            "name": "create_create_service_account_usecase",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "actor": [],
                "ui": []
            }
        },
        "UseCaseFactory.create_convert_user_to_service_account_usecase": {
            "name": "create_convert_user_to_service_account_usecase",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "actor": [],
                "ui": []
            }
        },
        "UseCaseFactory.create_disable_permission_usecase": {
            "name": "create_disable_permission_usecase",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "actor": [],
                "ui": []
            }
        },
        "UseCaseFactory.create_dump_schema_usecase": {
            "name": "create_dump_schema_usecase",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "ui": []
            }
        },
        "UseCaseFactory.create_grant_permission_to_service_account_usecase": {
            "name": "create_grant_permission_to_service_account_usecase",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "actor": [],
                "ui": []
            }
        },
        "UseCaseFactory.create_grant_permission_to_group_usecase": {
            "name": "create_grant_permission_to_group_usecase",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "actor": [],
                "ui": []
            }
        },
        "UseCaseFactory.create_list_grants_usecase": {
            "name": "create_list_grants_usecase",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "ui": []
            }
        },
        "UseCaseFactory.create_list_permissions_usecase": {
            "name": "create_list_permissions_usecase",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "ui": []
            }
        },
        "UseCaseFactory.create_list_users_usecase": {
            "name": "create_list_users_usecase",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "ui": []
            }
        },
        "UseCaseFactory.create_initialize_schema_usecase": {
            "name": "create_initialize_schema_usecase",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UseCaseFactory.create_view_permission_usecase": {
            "name": "create_view_permission_usecase",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "ui": []
            }
        },
        "UseCaseFactory.create_view_permission_group_grants_usecase": {
            "name": "create_view_permission_group_grants_usecase",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "ui": []
            }
        },
        "UseCaseFactory.create_view_permission_service_account_grants_usecase": {
            "name": "create_view_permission_service_account_grants_usecase",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "ui": []
            }
        }
    },
    "merou-master/grouper/usecases/grant_permission_to_group.py": {
        "GrantPermissionToGroupUI.grant_permission_to_group_failed_invalid_argument": {
            "name": "grant_permission_to_group_failed_invalid_argument",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "argument": [],
                "group": [],
                "message": []
            }
        },
        "GrantPermissionToGroupUI.grant_permission_to_group_failed_permission_denied": {
            "name": "grant_permission_to_group_failed_permission_denied",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "argument": [],
                "group": [],
                "message": []
            }
        },
        "GrantPermissionToGroupUI.grant_permission_to_group_failed_permission_not_found": {
            "name": "grant_permission_to_group_failed_permission_not_found",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "group": []
            }
        },
        "GrantPermissionToGroupUI.grant_permission_to_group_failed_group_not_found": {
            "name": "grant_permission_to_group_failed_group_not_found",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "group": []
            }
        },
        "GrantPermissionToGroupUI.grant_permission_to_group_failed_permission_already_exists": {
            "name": "grant_permission_to_group_failed_permission_already_exists",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "group": []
            }
        },
        "GrantPermissionToGroupUI.granted_permission_to_group": {
            "name": "granted_permission_to_group",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "argument": [],
                "group": []
            }
        },
        "GrantPermissionToGroup.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "actor": [],
                "ui": [],
                "permission_service": [],
                "service_account_service": [],
                "user_service": [],
                "group_service": [],
                "transaction_service": []
            }
        },
        "GrantPermissionToGroup.permissions_grantable": {
            "name": "permissions_grantable",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GrantPermissionToGroup.grant_permission_to_group": {
            "name": "grant_permission_to_group",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "argument": [],
                "group": []
            }
        }
    },
    "merou-master/grouper/usecases/grant_permission_to_service_account.py": {
        "GrantPermissionToServiceAccountUI.grant_permission_to_service_account_failed_invalid_argument": {
            "name": "grant_permission_to_service_account_failed_invalid_argument",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "argument": [],
                "service": [],
                "message": []
            }
        },
        "GrantPermissionToServiceAccountUI.grant_permission_to_service_account_failed_permission_denied": {
            "name": "grant_permission_to_service_account_failed_permission_denied",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "argument": [],
                "service": [],
                "message": []
            }
        },
        "GrantPermissionToServiceAccountUI.grant_permission_to_service_account_failed_permission_not_found": {
            "name": "grant_permission_to_service_account_failed_permission_not_found",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "service": []
            }
        },
        "GrantPermissionToServiceAccountUI.grant_permission_to_service_account_failed_service_account_not_found": {
            "name": "grant_permission_to_service_account_failed_service_account_not_found",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "service": []
            }
        },
        "GrantPermissionToServiceAccountUI.granted_permission_to_service_account": {
            "name": "granted_permission_to_service_account",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "argument": [],
                "service": []
            }
        },
        "GrantPermissionToServiceAccount.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "actor": [],
                "ui": [],
                "permission_service": [],
                "service_account_service": [],
                "user_service": [],
                "group_service": [],
                "transaction_service": []
            }
        },
        "GrantPermissionToServiceAccount.permissions_grantable_to_service_account": {
            "name": "permissions_grantable_to_service_account",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "service": []
            }
        },
        "GrantPermissionToServiceAccount.grant_permission_to_service_account": {
            "name": "grant_permission_to_service_account",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "argument": [],
                "service": []
            }
        },
        "GrantPermissionToServiceAccount.service_account_exists_with_owner": {
            "name": "service_account_exists_with_owner",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "service": [],
                "owner": []
            }
        }
    },
    "merou-master/grouper/usecases/initialize_schema.py": {
        "InitializeSchema.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "settings": [],
                "schema_service": [],
                "group_service": [],
                "permission_service": [],
                "transaction_service": []
            }
        },
        "InitializeSchema.initialize_schema": {
            "name": "initialize_schema",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/usecases/interfaces.py": {
        "AuditLogInterface.entries_affecting_group": {
            "name": "entries_affecting_group",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "group": [],
                "limit": []
            }
        },
        "AuditLogInterface.entries_affecting_permission": {
            "name": "entries_affecting_permission",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "limit": []
            }
        },
        "AuditLogInterface.entries_affecting_user": {
            "name": "entries_affecting_user",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "limit": []
            }
        },
        "AuditLogInterface.log_create_service_account": {
            "name": "log_create_service_account",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "service": [],
                "owner": [],
                "authorization": [],
                "date": []
            }
        },
        "AuditLogInterface.log_create_service_account_from_disabled_user": {
            "name": "log_create_service_account_from_disabled_user",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "authorization": [],
                "date": []
            }
        },
        "AuditLogInterface.log_create_permission": {
            "name": "log_create_permission",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "authorization": [],
                "date": []
            }
        },
        "AuditLogInterface.log_disable_permission": {
            "name": "log_disable_permission",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "authorization": [],
                "date": []
            }
        },
        "AuditLogInterface.log_disable_user": {
            "name": "log_disable_user",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "username": [],
                "authorization": [],
                "date": []
            }
        },
        "AuditLogInterface.log_enable_service_account": {
            "name": "log_enable_service_account",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "owner": [],
                "authorization": [],
                "date": []
            }
        },
        "AuditLogInterface.log_grant_permission_to_service_account": {
            "name": "log_grant_permission_to_service_account",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "argument": [],
                "service": [],
                "authorization": [],
                "date": []
            }
        },
        "AuditLogInterface.log_revoke_group_permission_grant": {
            "name": "log_revoke_group_permission_grant",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "group": [],
                "permission": [],
                "argument": [],
                "authorization": [],
                "date": []
            }
        },
        "AuditLogInterface.log_revoke_service_account_permission_grant": {
            "name": "log_revoke_service_account_permission_grant",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "service_account": [],
                "permission": [],
                "argument": [],
                "authorization": [],
                "date": []
            }
        },
        "AuditLogInterface.log_user_group_request_status_change": {
            "name": "log_user_group_request_status_change",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "status": [],
                "authorization": [],
                "date": []
            }
        },
        "GroupInterface.create_group": {
            "name": "create_group",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "description": [],
                "join_policy": [],
                "email": []
            }
        },
        "GroupInterface.grant_permission_to_group": {
            "name": "grant_permission_to_group",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "argument": [],
                "group": []
            }
        },
        "GroupInterface.group_exists": {
            "name": "group_exists",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "GroupInterface.group_has_matching_permission_grant": {
            "name": "group_has_matching_permission_grant",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "group": [],
                "permission": [],
                "argument": []
            }
        },
        "GroupInterface.is_valid_group_name": {
            "name": "is_valid_group_name",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "GroupInterface.permission_grants_for_group": {
            "name": "permission_grants_for_group",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "GroupRequestInterface.cancel_all_requests_for_user": {
            "name": "cancel_all_requests_for_user",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "reason": [],
                "authorization": []
            }
        },
        "PermissionInterface.all_grants": {
            "name": "all_grants",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionInterface.all_grants_of_permission": {
            "name": "all_grants_of_permission",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "permission": []
            }
        },
        "PermissionInterface.create_permission": {
            "name": "create_permission",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "description": []
            }
        },
        "PermissionInterface.create_system_permissions": {
            "name": "create_system_permissions",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionInterface.disable_permission_and_revoke_grants": {
            "name": "disable_permission_and_revoke_grants",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "authorization": []
            }
        },
        "PermissionInterface.group_paginated_grants_for_permission": {
            "name": "group_paginated_grants_for_permission",
            "location": 201,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "pagination": [],
                "argument": []
            }
        },
        "PermissionInterface.group_grants_for_permission": {
            "name": "group_grants_for_permission",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "argument": []
            }
        },
        "PermissionInterface.service_account_paginated_grants_for_permission": {
            "name": "service_account_paginated_grants_for_permission",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "pagination": [],
                "argument": []
            }
        },
        "PermissionInterface.service_account_grants_for_permission": {
            "name": "service_account_grants_for_permission",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "argument": []
            }
        },
        "PermissionInterface.is_system_permission": {
            "name": "is_system_permission",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "PermissionInterface.is_valid_permission_argument": {
            "name": "is_valid_permission_argument",
            "location": 226,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "argument": []
            }
        },
        "PermissionInterface.list_permissions": {
            "name": "list_permissions",
            "location": 231,
            "return": [],
            "arguments": {
                "self": [],
                "pagination": [],
                "audited_only": []
            }
        },
        "PermissionInterface.permission": {
            "name": "permission",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "PermissionInterface.permission_exists": {
            "name": "permission_exists",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "SchemaInterface.dump_schema": {
            "name": "dump_schema",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SchemaInterface.initialize_schema": {
            "name": "initialize_schema",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceAccountInterface.create_service_account": {
            "name": "create_service_account",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "service": [],
                "owner": [],
                "machine_set": [],
                "description": [],
                "initial_metadata": [],
                "authorization": []
            }
        },
        "ServiceAccountInterface.create_service_account_from_disabled_user": {
            "name": "create_service_account_from_disabled_user",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "authorization": []
            }
        },
        "ServiceAccountInterface.enable_service_account": {
            "name": "enable_service_account",
            "location": 276,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "owner": [],
                "authorization": []
            }
        },
        "ServiceAccountInterface.grant_permission_to_service_account": {
            "name": "grant_permission_to_service_account",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "argument": [],
                "service": [],
                "authorization": []
            }
        },
        "ServiceAccountInterface.is_valid_service_account_name": {
            "name": "is_valid_service_account_name",
            "location": 286,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ServiceAccountInterface.owner_of_service_account": {
            "name": "owner_of_service_account",
            "location": 291,
            "return": [],
            "arguments": {
                "self": [],
                "service": []
            }
        },
        "ServiceAccountInterface.permission_grants_for_service_account": {
            "name": "permission_grants_for_service_account",
            "location": 296,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "ServiceAccountInterface.service_account_exists": {
            "name": "service_account_exists",
            "location": 301,
            "return": [],
            "arguments": {
                "self": [],
                "service": []
            }
        },
        "ServiceAccountInterface.service_account_is_enabled": {
            "name": "service_account_is_enabled",
            "location": 306,
            "return": [],
            "arguments": {
                "self": [],
                "service": []
            }
        },
        "ServiceAccountInterface.service_account_is_permission_admin": {
            "name": "service_account_is_permission_admin",
            "location": 311,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "ServiceAccountInterface.service_account_is_user_admin": {
            "name": "service_account_is_user_admin",
            "location": 316,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "ServiceAccountInterface.permissions_grantable_by_service_account": {
            "name": "permissions_grantable_by_service_account",
            "location": 321,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "TransactionInterface.transaction": {
            "name": "transaction",
            "location": 329,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserInterface.all_users": {
            "name": "all_users",
            "location": 338,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserInterface.disable_user": {
            "name": "disable_user",
            "location": 343,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "authorization": []
            }
        },
        "UserInterface.groups_of_user": {
            "name": "groups_of_user",
            "location": 348,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "UserInterface.permission_access_for_user": {
            "name": "permission_access_for_user",
            "location": 353,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "permission": []
            }
        },
        "UserInterface.permission_grants_for_user": {
            "name": "permission_grants_for_user",
            "location": 358,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "UserInterface.user_can_create_permissions": {
            "name": "user_can_create_permissions",
            "location": 363,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "UserInterface.user_exists": {
            "name": "user_exists",
            "location": 368,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "UserInterface.user_is_permission_admin": {
            "name": "user_is_permission_admin",
            "location": 373,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "UserInterface.user_is_user_admin": {
            "name": "user_is_user_admin",
            "location": 378,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "UserInterface.permissions_grantable_by_user": {
            "name": "permissions_grantable_by_user",
            "location": 383,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        }
    },
    "merou-master/grouper/usecases/list_grants.py": {
        "ListGrantsUI.listed_grants": {
            "name": "listed_grants",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "grants": []
            }
        },
        "ListGrantsUI.listed_grants_of_permission": {
            "name": "listed_grants_of_permission",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "grants": []
            }
        },
        "ListGrants.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "ui": [],
                "permission_service": []
            }
        },
        "ListGrants.list_grants": {
            "name": "list_grants",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ListGrants.list_grants_of_permission": {
            "name": "list_grants_of_permission",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "permission": []
            }
        }
    },
    "merou-master/grouper/usecases/list_permissions.py": {
        "ListPermissionsUI.listed_permissions": {
            "name": "listed_permissions",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "permissions": [],
                "can_create": []
            }
        },
        "ListPermissions.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "ui": [],
                "permission_service": [],
                "user_service": []
            }
        },
        "ListPermissions.list_permissions": {
            "name": "list_permissions",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "pagination": [],
                "audited_only": []
            }
        },
        "ListPermissions.simple_list_permissions": {
            "name": "simple_list_permissions",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/usecases/list_users.py": {
        "ListUsersUI.listed_users": {
            "name": "listed_users",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "users": []
            }
        },
        "ListUsers.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "ui": [],
                "user_service": []
            }
        },
        "ListUsers.list_users": {
            "name": "list_users",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/grouper/usecases/view_permission.py": {
        "ViewPermissionUI.viewed_permission": {
            "name": "viewed_permission",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "access": [],
                "audit_log_entries": []
            }
        },
        "ViewPermissionUI.view_permission_failed_not_found": {
            "name": "view_permission_failed_not_found",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ViewPermission.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "ui": [],
                "permission_service": [],
                "user_service": [],
                "audit_log_service": []
            }
        },
        "ViewPermission.view_permission": {
            "name": "view_permission",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "actor": [],
                "audit_log_limit": [],
                "argument": []
            }
        }
    },
    "merou-master/grouper/usecases/view_permission_group_grants.py": {
        "ViewPermissionGroupGrantsUI.viewed_permission": {
            "name": "viewed_permission",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "grants": []
            }
        },
        "ViewPermissionGroupGrantsUI.view_permission_failed_not_found": {
            "name": "view_permission_failed_not_found",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ViewPermissionGroupGrants.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "ui": [],
                "permission_service": [],
                "user_service": []
            }
        },
        "ViewPermissionGroupGrants.view_granted_permission": {
            "name": "view_granted_permission",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "actor": [],
                "pagination": [],
                "argument": []
            }
        }
    },
    "merou-master/grouper/usecases/view_permission_service_account_grants.py": {
        "ViewPermissionServiceAccountGrantsUI.viewed_permission": {
            "name": "viewed_permission",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "grants": []
            }
        },
        "ViewPermissionServiceAccountGrantsUI.view_permission_failed_not_found": {
            "name": "view_permission_failed_not_found",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ViewPermissionServiceAccountGrants.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "ui": [],
                "permission_service": [],
                "user_service": []
            }
        },
        "ViewPermissionServiceAccountGrants.view_granted_permission": {
            "name": "view_granted_permission",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "actor": [],
                "pagination": [],
                "argument": []
            }
        }
    },
    "merou-master/grouper/usecases/__init__.py": {},
    "merou-master/itests/conftest.py": {
        "browser": {
            "name": "browser",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "setup": {
            "name": "setup",
            "location": 34,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "merou-master/itests/setup.py": {
        "_bind_socket": {
            "name": "_bind_socket",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "_wait_until_accept": {
            "name": "_wait_until_accept",
            "location": 34,
            "return": [],
            "arguments": {
                "port": [],
                "timeout": []
            }
        },
        "api_server": {
            "name": "api_server",
            "location": 58,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "frontend_server": {
            "name": "frontend_server",
            "location": 87,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "user": []
            }
        },
        "selenium_browser": {
            "name": "selenium_browser",
            "location": 147,
            "return": [],
            "arguments": {}
        }
    },
    "merou-master/itests/__init__.py": {},
    "merou-master/itests/api/grants_test.py": {
        "create_graph": {
            "name": "create_graph",
            "location": 12,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_list_grants": {
            "name": "test_list_grants",
            "location": 41,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "setup": []
            }
        },
        "test_list_grants_of_permission": {
            "name": "test_list_grants_of_permission",
            "location": 68,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "setup": []
            }
        }
    },
    "merou-master/itests/api/groups_test.py": {
        "create_graph": {
            "name": "create_graph",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "setup": [
                    "SetupTest"
                ]
            }
        },
        "test_get_groups": {
            "name": "test_get_groups",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ]
            }
        },
        "test_get_group": {
            "name": "test_get_group",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ]
            }
        }
    },
    "merou-master/itests/api/permissions_test.py": {
        "test_get_permissions": {
            "name": "test_get_permissions",
            "location": 12,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "setup": []
            }
        },
        "test_get_permission": {
            "name": "test_get_permission",
            "location": 22,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "setup": []
            }
        }
    },
    "merou-master/itests/api/service_accounts_test.py": {
        "test_get_service_accounts": {
            "name": "test_get_service_accounts",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ]
            }
        },
        "test_get_service_account": {
            "name": "test_get_service_account",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ]
            }
        },
        "test_get_role_user": {
            "name": "test_get_role_user",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ]
            }
        },
        "test_includes_disabled_service_accounts": {
            "name": "test_includes_disabled_service_accounts",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ]
            }
        }
    },
    "merou-master/itests/api/users_test.py": {
        "test_get_users": {
            "name": "test_get_users",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ]
            }
        },
        "test_get_user": {
            "name": "test_get_user",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ]
            }
        }
    },
    "merou-master/itests/api/user_metadata_test.py": {
        "test_user_metadata": {
            "name": "test_user_metadata",
            "location": 14,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "setup": []
            }
        }
    },
    "merou-master/itests/api/__init__.py": {},
    "merou-master/itests/fe/audits_test.py": {
        "test_disabling_group_clears_audit": {
            "name": "test_disabling_group_clears_audit",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_remove_last_owner_via_audit": {
            "name": "test_remove_last_owner_via_audit",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        }
    },
    "merou-master/itests/fe/groups_test.py": {
        "test_list_groups": {
            "name": "test_list_groups",
            "location": 17,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "setup": [],
                "browser": []
            }
        },
        "test_list_audited_groups": {
            "name": "test_list_audited_groups",
            "location": 47,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "setup": [],
                "browser": []
            }
        }
    },
    "merou-master/itests/fe/group_create_test.py": {
        "test_group_create": {
            "name": "test_group_create",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        }
    },
    "merou-master/itests/fe/group_disable_test.py": {
        "test_disable": {
            "name": "test_disable",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_disable_must_be_owner": {
            "name": "test_disable_must_be_owner",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        }
    },
    "merou-master/itests/fe/group_edit_member.py": {
        "test_edit_self_owner": {
            "name": "test_edit_self_owner",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_self_np_owner_downgrade": {
            "name": "test_self_np_owner_downgrade",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_self_manager_downgrade": {
            "name": "test_self_manager_downgrade",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_remove_last_owner": {
            "name": "test_remove_last_owner",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_edit_member_group_role": {
            "name": "test_edit_member_group_role",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        }
    },
    "merou-master/itests/fe/group_join_test.py": {
        "test_request_to_join_group": {
            "name": "test_request_to_join_group",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_request_already_member": {
            "name": "test_request_already_member",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_request_options": {
            "name": "test_request_options",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_require_clickthru": {
            "name": "test_require_clickthru",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_group_join_group": {
            "name": "test_group_join_group",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_group_join_as_owner": {
            "name": "test_group_join_as_owner",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_group_join_group_as_owner": {
            "name": "test_group_join_group_as_owner",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_request_join_unicode": {
            "name": "test_request_join_unicode",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        }
    },
    "merou-master/itests/fe/group_leave_test.py": {
        "test_leave": {
            "name": "test_leave",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_leave_as_owner": {
            "name": "test_leave_as_owner",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_leave_as_last_owner": {
            "name": "test_leave_as_last_owner",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        }
    },
    "merou-master/itests/fe/group_view_test.py": {
        "test_show_group": {
            "name": "test_show_group",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_show_group_hides_aliased_permissions": {
            "name": "test_show_group_hides_aliased_permissions",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_edit_member_group_role": {
            "name": "test_edit_member_group_role",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_rename": {
            "name": "test_rename",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_rename_name_conflict": {
            "name": "test_rename_name_conflict",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_remove_member": {
            "name": "test_remove_member",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_remove_last_owner": {
            "name": "test_remove_last_owner",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_grant_permission": {
            "name": "test_grant_permission",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_request_permission": {
            "name": "test_request_permission",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        }
    },
    "merou-master/itests/fe/headers_test.py": {
        "test_csp": {
            "name": "test_csp",
            "location": 13,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "setup": []
            }
        },
        "test_referrer_policy": {
            "name": "test_referrer_policy",
            "location": 38,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "setup": []
            }
        }
    },
    "merou-master/itests/fe/invalid_user_test.py": {
        "test_invalid_user": {
            "name": "test_invalid_user",
            "location": 13,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "setup": [],
                "browser": []
            }
        },
        "test_service_account": {
            "name": "test_service_account",
            "location": 23,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "setup": [],
                "browser": []
            }
        },
        "test_disabled_user": {
            "name": "test_disabled_user",
            "location": 36,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "setup": [],
                "browser": []
            }
        }
    },
    "merou-master/itests/fe/permissions_test.py": {
        "format_date": {
            "name": "format_date",
            "location": 21,
            "return": [],
            "arguments": {
                "settings": [],
                "date": []
            }
        },
        "create_test_data": {
            "name": "create_test_data",
            "location": 26,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_list": {
            "name": "test_list",
            "location": 67,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "setup": [],
                "browser": []
            }
        },
        "test_list_pagination": {
            "name": "test_list_pagination",
            "location": 111,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "setup": [],
                "browser": []
            }
        }
    },
    "merou-master/itests/fe/permission_create_test.py": {
        "test_list_create_button": {
            "name": "test_list_create_button",
            "location": 16,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "setup": [],
                "browser": []
            }
        },
        "test_create_permission": {
            "name": "test_create_permission",
            "location": 30,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "setup": [],
                "browser": []
            }
        }
    },
    "merou-master/itests/fe/permission_requests_test.py": {
        "create_permission_requests": {
            "name": "create_permission_requests",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "setup": [
                    "SetupTest"
                ]
            }
        },
        "action_permission_requests": {
            "name": "action_permission_requests",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "setup": [
                    "SetupTest"
                ]
            }
        },
        "test_pending_inbound_requests": {
            "name": "test_pending_inbound_requests",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "assert_valid_status_timestamp": {
            "name": "assert_valid_status_timestamp",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "when": [
                    "str"
                ]
            }
        },
        "test_completed_inbound_requests": {
            "name": "test_completed_inbound_requests",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_outbound_requests": {
            "name": "test_outbound_requests",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_no_requests": {
            "name": "test_no_requests",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        }
    },
    "merou-master/itests/fe/permission_request_test.py": {
        "test_requesting_permission": {
            "name": "test_requesting_permission",
            "location": 21,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "setup": [],
                "browser": []
            }
        },
        "test_unargumented_request": {
            "name": "test_unargumented_request",
            "location": 60,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "setup": [],
                "browser": []
            }
        },
        "test_limited_arguments": {
            "name": "test_limited_arguments",
            "location": 84,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "setup": [],
                "browser": []
            }
        },
        "test_end_to_end_whitespace_in_argument": {
            "name": "test_end_to_end_whitespace_in_argument",
            "location": 104,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "setup": [],
                "browser": []
            }
        }
    },
    "merou-master/itests/fe/permission_view_test.py": {
        "test_view": {
            "name": "test_view",
            "location": 14,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "setup": [],
                "browser": []
            }
        },
        "test_view_change_audited": {
            "name": "test_view_change_audited",
            "location": 67,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "setup": [],
                "browser": []
            }
        },
        "test_view_disable": {
            "name": "test_view_disable",
            "location": 100,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "setup": [],
                "browser": []
            }
        },
        "test_view_disable_with_grants": {
            "name": "test_view_disable_with_grants",
            "location": 121,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "setup": [],
                "browser": []
            }
        }
    },
    "merou-master/itests/fe/role_users_test.py": {
        "test_disable": {
            "name": "test_disable",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        }
    },
    "merou-master/itests/fe/search_test.py": {
        "test_search": {
            "name": "test_search",
            "location": 17,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "setup": [],
                "browser": []
            }
        },
        "test_search_escaping": {
            "name": "test_search_escaping",
            "location": 41,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "setup": [],
                "browser": []
            }
        }
    },
    "merou-master/itests/fe/service_accounts_test.py": {
        "test_service_account_lifecycle": {
            "name": "test_service_account_lifecycle",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_service_account_edit": {
            "name": "test_service_account_edit",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_wrong_owner": {
            "name": "test_wrong_owner",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_escaped_at_sign": {
            "name": "test_escaped_at_sign",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_create_duplicate": {
            "name": "test_create_duplicate",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_permission_grant": {
            "name": "test_permission_grant",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_permission_grant_revoke": {
            "name": "test_permission_grant_revoke",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_permission_grant_denied": {
            "name": "test_permission_grant_denied",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_permission_grant_invalid_argument": {
            "name": "test_permission_grant_invalid_argument",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_permission_revoke_denied": {
            "name": "test_permission_revoke_denied",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        }
    },
    "merou-master/itests/fe/users_test.py": {
        "test_escaped_at_sign": {
            "name": "test_escaped_at_sign",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_disable_last_owner": {
            "name": "test_disable_last_owner",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_list_public_keys": {
            "name": "test_list_public_keys",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        },
        "test_user_view_hides_aliased_permissions": {
            "name": "test_user_view_hides_aliased_permissions",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "LocalPath"
                ],
                "setup": [
                    "SetupTest"
                ],
                "browser": [
                    "Chrome"
                ]
            }
        }
    },
    "merou-master/itests/fe/__init__.py": {},
    "merou-master/itests/pages/audits.py": {
        "AuditsCreatePage._get_new_audit_form": {
            "name": "_get_new_audit_form",
            "location": 5,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuditsCreatePage.set_end_date": {
            "name": "set_end_date",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "end_date": []
            }
        },
        "AuditsCreatePage.submit": {
            "name": "submit",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/itests/pages/base.py": {
        "BaseFinder.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "BaseFinder.find_element_by_class_name": {
            "name": "find_element_by_class_name",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "BaseFinder.find_elements_by_class_name": {
            "name": "find_elements_by_class_name",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "BaseFinder.find_element_by_id": {
            "name": "find_element_by_id",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "id_": []
            }
        },
        "BaseFinder.find_element_by_link_text": {
            "name": "find_element_by_link_text",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "link_text": []
            }
        },
        "BaseFinder.find_element_by_name": {
            "name": "find_element_by_name",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "BaseFinder.find_element_by_tag_name": {
            "name": "find_element_by_tag_name",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "BasePage.current_url": {
            "name": "current_url",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BasePage.heading": {
            "name": "heading",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BasePage.subheading": {
            "name": "subheading",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BasePage.search_input": {
            "name": "search_input",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BasePage.click_search_button": {
            "name": "click_search_button",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BasePage.has_alert": {
            "name": "has_alert",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "BasePage.has_text": {
            "name": "has_text",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "BasePage.wait_until_invisible": {
            "name": "wait_until_invisible",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "WebElement"
                ]
            }
        },
        "BasePage.wait_until_visible": {
            "name": "wait_until_visible",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "element": []
            }
        },
        "BaseElement.text": {
            "name": "text",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseModal.confirm": {
            "name": "confirm",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/itests/pages/error.py": {
        "ErrorPage.content": {
            "name": "content",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/itests/pages/groups.py": {
        "GroupCreatePage.form": {
            "name": "form",
            "location": 20,
            "return": [
                "WebElement"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupCreatePage.set_group_name": {
            "name": "set_group_name",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "GroupCreatePage.submit": {
            "name": "submit",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupEditPage.form": {
            "name": "form",
            "location": 34,
            "return": [
                "WebElement"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupEditPage.set_name": {
            "name": "set_name",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "GroupEditPage.submit": {
            "name": "submit",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupEditMemberPage.form": {
            "name": "form",
            "location": 48,
            "return": [
                "WebElement"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupEditMemberPage.get_role_options": {
            "name": "get_role_options",
            "location": 51,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupEditMemberPage.set_role": {
            "name": "set_role",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "role": [
                    "str"
                ]
            }
        },
        "GroupEditMemberPage.set_expiration": {
            "name": "set_expiration",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expiration": [
                    "str"
                ]
            }
        },
        "GroupEditMemberPage.set_reason": {
            "name": "set_reason",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "str"
                ]
            }
        },
        "GroupEditMemberPage.submit": {
            "name": "submit",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupsViewPage.find_group_row": {
            "name": "find_group_row",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "GroupsViewPage.click_create_group_button": {
            "name": "click_create_group_button",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupsViewPage.click_show_audited_button": {
            "name": "click_show_audited_button",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupsViewPage.get_create_group_modal": {
            "name": "get_create_group_modal",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupViewPage.find_member_row": {
            "name": "find_member_row",
            "location": 100,
            "return": [
                "MemberRow"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "GroupViewPage.find_permission_rows": {
            "name": "find_permission_rows",
            "location": 108,
            "return": [
                "List[PermissionGrantRow]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "argument": [
                    "Optional[str]"
                ]
            }
        },
        "GroupViewPage.get_remove_user_modal": {
            "name": "get_remove_user_modal",
            "location": 121,
            "return": [
                "RemoveMemberModal"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewPage.get_audit_modal": {
            "name": "get_audit_modal",
            "location": 125,
            "return": [
                "AuditModal"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewPage.click_edit_button": {
            "name": "click_edit_button",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewPage.click_add_permission_button": {
            "name": "click_add_permission_button",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewPage.click_add_service_account_button": {
            "name": "click_add_service_account_button",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewPage.click_disable_button": {
            "name": "click_disable_button",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewPage.click_leave_button": {
            "name": "click_leave_button",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewPage.click_request_permission_button": {
            "name": "click_request_permission_button",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewPage.get_disable_modal": {
            "name": "get_disable_modal",
            "location": 154,
            "return": [
                "DisableGroupModal"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewPage.wait_until_audit_modal_clears": {
            "name": "wait_until_audit_modal_clears",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupJoinPage.form": {
            "name": "form",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupJoinPage.get_alerts": {
            "name": "get_alerts",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupJoinPage.get_clickthru_modal": {
            "name": "get_clickthru_modal",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupJoinPage.get_member_options": {
            "name": "get_member_options",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupJoinPage.set_member": {
            "name": "set_member",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "member": []
            }
        },
        "GroupJoinPage.set_role": {
            "name": "set_role",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "role": []
            }
        },
        "GroupJoinPage.set_expiration": {
            "name": "set_expiration",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "expiration": []
            }
        },
        "GroupJoinPage.set_reason": {
            "name": "set_reason",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "reason": []
            }
        },
        "GroupJoinPage.submit": {
            "name": "submit",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupLeavePage.form": {
            "name": "form",
            "location": 218,
            "return": [
                "WebElement"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupLeavePage.submit": {
            "name": "submit",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PermissionGrantPage.form": {
            "name": "form",
            "location": 227,
            "return": [
                "WebElement"
            ],
            "arguments": {
                "self": []
            }
        },
        "PermissionGrantPage.set_permission": {
            "name": "set_permission",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "permission": [
                    "str"
                ]
            }
        },
        "PermissionGrantPage.set_argument": {
            "name": "set_argument",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "argument": [
                    "str"
                ]
            }
        },
        "PermissionGrantPage.submit": {
            "name": "submit",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupRequestsPage.find_request_row": {
            "name": "find_request_row",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "requested": []
            }
        },
        "AuditModal.click_close_button": {
            "name": "click_close_button",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuditModal.find_member_row": {
            "name": "find_member_row",
            "location": 262,
            "return": [
                "AuditMemberRow"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "CreateGroupModal.form": {
            "name": "form",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CreateGroupModal.click_require_clickthru_checkbox": {
            "name": "click_require_clickthru_checkbox",
            "location": 276,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CreateGroupModal.set_group_name": {
            "name": "set_group_name",
            "location": 280,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "CreateGroupModal.set_description": {
            "name": "set_description",
            "location": 285,
            "return": [],
            "arguments": {
                "self": [],
                "description": []
            }
        },
        "CreateGroupModal.set_join_policy": {
            "name": "set_join_policy",
            "location": 290,
            "return": [],
            "arguments": {
                "self": [],
                "join_policy": []
            }
        },
        "GroupJoinClickthruModal.confirm": {
            "name": "confirm",
            "location": 301,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuditMemberRow.name": {
            "name": "name",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuditMemberRow.set_audit_status": {
            "name": "set_audit_status",
            "location": 316,
            "return": [],
            "arguments": {
                "self": [],
                "status": []
            }
        },
        "GroupRow.name": {
            "name": "name",
            "location": 325,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupRow.href": {
            "name": "href",
            "location": 330,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupRow.description": {
            "name": "description",
            "location": 337,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupRow.can_join": {
            "name": "can_join",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupRow.audited_reason": {
            "name": "audited_reason",
            "location": 347,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MemberRow.click_remove_button": {
            "name": "click_remove_button",
            "location": 353,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MemberRow.click_edit_button": {
            "name": "click_edit_button",
            "location": 358,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MemberRow.name": {
            "name": "name",
            "location": 364,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MemberRow.href": {
            "name": "href",
            "location": 369,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MemberRow.role": {
            "name": "role",
            "location": 376,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MemberRow.expiration": {
            "name": "expiration",
            "location": 381,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupRequestRow.requested": {
            "name": "requested",
            "location": 388,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupRequestRow.requester": {
            "name": "requester",
            "location": 393,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupRequestRow.status": {
            "name": "status",
            "location": 398,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupRequestRow.requested_at": {
            "name": "requested_at",
            "location": 403,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupRequestRow.expiration": {
            "name": "expiration",
            "location": 408,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupRequestRow.role": {
            "name": "role",
            "location": 413,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupRequestRow.reason": {
            "name": "reason",
            "location": 418,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/itests/pages/permission.py": {
        "PermissionPage.button_to_request_this_permission": {
            "name": "button_to_request_this_permission",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/itests/pages/permissions.py": {
        "PermissionsPage.has_create_permission_button": {
            "name": "has_create_permission_button",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionsPage.permission_rows": {
            "name": "permission_rows",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionsPage.limit_label": {
            "name": "limit_label",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionsPage.click_create_permission_button": {
            "name": "click_create_permission_button",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionsPage.click_show_all_button": {
            "name": "click_show_all_button",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionsPage.click_show_audited_button": {
            "name": "click_show_audited_button",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionsPage.click_sort_by_date": {
            "name": "click_sort_by_date",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionRow.name": {
            "name": "name",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionRow.description": {
            "name": "description",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionRow.created_on": {
            "name": "created_on",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionGrantRow.name": {
            "name": "name",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionGrantRow.href": {
            "name": "href",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionGrantRow.argument": {
            "name": "argument",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionGrantRow.source": {
            "name": "source",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionGrantRow.granted_on": {
            "name": "granted_on",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/itests/pages/permission_create.py": {
        "PermissionCreatePage.allowed_patterns": {
            "name": "allowed_patterns",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionCreatePage.form": {
            "name": "form",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionCreatePage.set_description": {
            "name": "set_description",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "description": []
            }
        },
        "PermissionCreatePage.set_name": {
            "name": "set_name",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "merou-master/itests/pages/permission_request.py": {
        "PermissionRequestPage.form": {
            "name": "form",
            "location": 17,
            "return": [
                "WebElement"
            ],
            "arguments": {
                "self": []
            }
        },
        "PermissionRequestPage.get_group_values": {
            "name": "get_group_values",
            "location": 20,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PermissionRequestPage.get_permission_values": {
            "name": "get_permission_values",
            "location": 24,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PermissionRequestPage.set_group": {
            "name": "set_group",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "str"
                ]
            }
        },
        "PermissionRequestPage.set_permission": {
            "name": "set_permission",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "permission": [
                    "str"
                ]
            }
        },
        "PermissionRequestPage.set_argument_dropdown": {
            "name": "set_argument_dropdown",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "argument": [
                    "str"
                ]
            }
        },
        "PermissionRequestPage.set_argument_freeform": {
            "name": "set_argument_freeform",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "argument": [
                    "str"
                ]
            }
        },
        "PermissionRequestPage.set_reason": {
            "name": "set_reason",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "str"
                ]
            }
        },
        "PermissionRequestPage.submit": {
            "name": "submit",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/itests/pages/permission_requests.py": {
        "PermissionRequestsPage.request_rows": {
            "name": "request_rows",
            "location": 16,
            "return": [
                "List[RequestViewRow]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PermissionRequestsPage.status_change_rows": {
            "name": "status_change_rows",
            "location": 21,
            "return": [
                "List[StatusChangeRow]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PermissionRequestsPage.no_requests_row": {
            "name": "no_requests_row",
            "location": 26,
            "return": [
                "WebElement"
            ],
            "arguments": {
                "self": []
            }
        },
        "PermissionRequestUpdatePage.form": {
            "name": "form",
            "location": 32,
            "return": [
                "WebElement"
            ],
            "arguments": {
                "self": []
            }
        },
        "PermissionRequestUpdatePage.set_status": {
            "name": "set_status",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str"
                ]
            }
        },
        "PermissionRequestUpdatePage.set_reason": {
            "name": "set_reason",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "str"
                ]
            }
        },
        "PermissionRequestUpdatePage.submit": {
            "name": "submit",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestViewRow.modify_link": {
            "name": "modify_link",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestViewRow.requested": {
            "name": "requested",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestViewRow.approvers": {
            "name": "approvers",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestViewRow.status": {
            "name": "status",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestViewRow.requested_at": {
            "name": "requested_at",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestViewRow.click_modify_link": {
            "name": "click_modify_link",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusChangeRow.group": {
            "name": "group",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusChangeRow.who": {
            "name": "who",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusChangeRow.reason": {
            "name": "reason",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/itests/pages/permission_view.py": {
        "PermissionViewPage.description": {
            "name": "description",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionViewPage.has_audited_warning": {
            "name": "has_audited_warning",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionViewPage.has_disabled_warning": {
            "name": "has_disabled_warning",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionViewPage.has_disable_auditing_button": {
            "name": "has_disable_auditing_button",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionViewPage.has_disable_permission_button": {
            "name": "has_disable_permission_button",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionViewPage.has_enable_auditing_button": {
            "name": "has_enable_auditing_button",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionViewPage.has_no_group_grants": {
            "name": "has_no_group_grants",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionViewPage.has_no_service_account_grants": {
            "name": "has_no_service_account_grants",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionViewPage.group_permission_grant_rows": {
            "name": "group_permission_grant_rows",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionViewPage.service_account_permission_grant_rows": {
            "name": "service_account_permission_grant_rows",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionViewPage.click_disable_auditing_button": {
            "name": "click_disable_auditing_button",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionViewPage.click_enable_auditing_button": {
            "name": "click_enable_auditing_button",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionViewPage.click_disable_permission_button": {
            "name": "click_disable_permission_button",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionViewPage.get_disable_auditing_modal": {
            "name": "get_disable_auditing_modal",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionViewPage.get_enable_auditing_modal": {
            "name": "get_enable_auditing_modal",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionViewPage.get_disable_permission_modal": {
            "name": "get_disable_permission_modal",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionGroupGrantRow.argument": {
            "name": "argument",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionGroupGrantRow.group": {
            "name": "group",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionServiceAccountGrantRow.argument": {
            "name": "argument",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionServiceAccountGrantRow.service_account": {
            "name": "service_account",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/itests/pages/role_users.py": {
        "RoleUserViewPage.click_disable_button": {
            "name": "click_disable_button",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoleUserViewPage.get_disable_modal": {
            "name": "get_disable_modal",
            "location": 11,
            "return": [
                "DisableRoleUserModal"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/itests/pages/search_results.py": {
        "SearchResultsPage.result_rows": {
            "name": "result_rows",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchResultRow.type": {
            "name": "type",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchResultRow.name": {
            "name": "name",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/itests/pages/service_accounts.py": {
        "ServiceAccountViewPage.description": {
            "name": "description",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceAccountViewPage.machine_set": {
            "name": "machine_set",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceAccountViewPage.owner": {
            "name": "owner",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceAccountViewPage.permission_rows": {
            "name": "permission_rows",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceAccountViewPage.click_add_permission_button": {
            "name": "click_add_permission_button",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceAccountViewPage.click_disable_button": {
            "name": "click_disable_button",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceAccountViewPage.click_edit_button": {
            "name": "click_edit_button",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceAccountViewPage.click_enable_button": {
            "name": "click_enable_button",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceAccountViewPage.get_disable_modal": {
            "name": "get_disable_modal",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceAccountViewPage.get_revoke_permission_modal": {
            "name": "get_revoke_permission_modal",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceAccountCreatePage._get_new_service_account_form": {
            "name": "_get_new_service_account_form",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceAccountCreatePage.set_description": {
            "name": "set_description",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ServiceAccountCreatePage.set_machine_set": {
            "name": "set_machine_set",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ServiceAccountCreatePage.set_name": {
            "name": "set_name",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ServiceAccountCreatePage.submit": {
            "name": "submit",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceAccountEditPage.form": {
            "name": "form",
            "location": 103,
            "return": [
                "WebElement"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceAccountEditPage.set_description": {
            "name": "set_description",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ServiceAccountEditPage.set_machine_set": {
            "name": "set_machine_set",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ServiceAccountEditPage.submit": {
            "name": "submit",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceAccountEnablePage._get_enable_service_account_form": {
            "name": "_get_enable_service_account_form",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceAccountEnablePage.select_owner": {
            "name": "select_owner",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "owner": []
            }
        },
        "ServiceAccountEnablePage.submit": {
            "name": "submit",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceAccountGrantPermissionPage._get_grant_permission_form": {
            "name": "_get_grant_permission_form",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceAccountGrantPermissionPage.get_alerts": {
            "name": "get_alerts",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceAccountGrantPermissionPage.select_permission": {
            "name": "select_permission",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "permission": []
            }
        },
        "ServiceAccountGrantPermissionPage.set_argument": {
            "name": "set_argument",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "argument": []
            }
        },
        "ServiceAccountGrantPermissionPage.submit": {
            "name": "submit",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceAccountPermissionRow.permission": {
            "name": "permission",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceAccountPermissionRow.argument": {
            "name": "argument",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceAccountPermissionRow.click_revoke_button": {
            "name": "click_revoke_button",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/itests/pages/users.py": {
        "PublicKeysPage.find_public_key_row": {
            "name": "find_public_key_row",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "fingerprint_sha256": []
            }
        },
        "UsersViewPage.click_show_disabled_users_button": {
            "name": "click_show_disabled_users_button",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UsersViewPage.click_show_service_accounts_button": {
            "name": "click_show_service_accounts_button",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UsersViewPage.find_user_row": {
            "name": "find_user_row",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "UserViewPage.click_disable_button": {
            "name": "click_disable_button",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserViewPage.get_disable_user_modal": {
            "name": "get_disable_user_modal",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserViewPage.find_permission_rows": {
            "name": "find_permission_rows",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "argument": []
            }
        },
        "PublicKeyRow.user": {
            "name": "user",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PublicKeyRow.key_type": {
            "name": "key_type",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PublicKeyRow.key_size": {
            "name": "key_size",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PublicKeyRow.fingerprint_sha256": {
            "name": "fingerprint_sha256",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserRow.name": {
            "name": "name",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserRow.click": {
            "name": "click",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/itests/pages/__init__.py": {},
    "merou-master/oneoffs/check_public_keys.py": {
        "CheckPublicKeys.run": {
            "name": "run",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "dry_run": []
            }
        }
    },
    "merou-master/oneoffs/cleanup_audits.py": {
        "AuditCleanup.run": {
            "name": "run",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "dry_run": []
            }
        }
    },
    "merou-master/oneoffs/refresh_public_keys.py": {
        "RefreshPublicKeys.run": {
            "name": "run",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "dry_run": []
            }
        }
    },
    "merou-master/oneoffs/__init__.py": {},
    "merou-master/plugins/group_ownership_policy.py": {
        "_is_last_permanent_owner": {
            "name": "_is_last_permanent_owner",
            "location": 17,
            "return": [],
            "arguments": {
                "session": [],
                "group": [],
                "member": []
            }
        },
        "_get_permanently_owned_groups_by_user": {
            "name": "_get_permanently_owned_groups_by_user",
            "location": 33,
            "return": [],
            "arguments": {
                "session": [],
                "user": []
            }
        },
        "GroupOwnershipPolicyPlugin.will_update_group_membership": {
            "name": "will_update_group_membership",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "group": [],
                "member": []
            }
        },
        "GroupOwnershipPolicyPlugin.will_disable_user": {
            "name": "will_disable_user",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "user": []
            }
        }
    },
    "merou-master/plugins/ssh_key_policy.py": {
        "SshKeyPolicyPlugin.will_add_public_key": {
            "name": "will_add_public_key",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        }
    },
    "merou-master/plugins/test_machine_set.py": {
        "TestMachineSetPlugin.check_machine_set": {
            "name": "check_machine_set",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "machine_set": []
            }
        }
    },
    "merou-master/plugins/test_permission_aliases.py": {
        "TestPermissionAliasesPlugin.get_aliases_for_mapped_permission": {
            "name": "get_aliases_for_mapped_permission",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "permission": [],
                "argument": []
            }
        }
    },
    "merou-master/plugins/test_permission_owners.py": {
        "TestPermissionOwnersPlugin.get_owner_by_arg_by_perm": {
            "name": "get_owner_by_arg_by_perm",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "merou-master/plugins/__init__.py": {},
    "merou-master/tests/audit_test.py": {
        "test_group_audited": {
            "name": "test_group_audited",
            "location": 49,
            "return": [],
            "arguments": {
                "standard_graph": [],
                "graph": [],
                "session": [],
                "groups": [],
                "permissions": []
            }
        },
        "test_user_is_auditor": {
            "name": "test_user_is_auditor",
            "location": 57,
            "return": [],
            "arguments": {
                "standard_graph": []
            }
        },
        "test_assert_can_join": {
            "name": "test_assert_can_join",
            "location": 64,
            "return": [],
            "arguments": {
                "standard_graph": [],
                "users": [],
                "groups": []
            }
        },
        "test_assert_controllers_are_auditors": {
            "name": "test_assert_controllers_are_auditors",
            "location": 95,
            "return": [],
            "arguments": {
                "standard_graph": [],
                "groups": []
            }
        },
        "test_toggle_perm_audited": {
            "name": "test_toggle_perm_audited",
            "location": 107,
            "return": [],
            "arguments": {
                "groups": [],
                "permissions": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_audit_end_to_end": {
            "name": "test_audit_end_to_end",
            "location": 160,
            "return": [],
            "arguments": {
                "session": [],
                "users": [],
                "groups": [],
                "http_client": [],
                "base_url": [],
                "graph": []
            }
        },
        "test_auditor_promotion": {
            "name": "test_auditor_promotion",
            "location": 280,
            "return": [],
            "arguments": {
                "mock_nnp": [],
                "mock_gagn": [],
                "session": [],
                "graph": [],
                "permissions": [],
                "users": []
            }
        },
        "test_get_auditors_group": {
            "name": "test_get_auditors_group",
            "location": 472,
            "return": [],
            "arguments": {
                "session": [],
                "standard_graph": []
            }
        }
    },
    "merou-master/tests/bin_test.py": {
        "test_api": {
            "name": "test_api",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_background": {
            "name": "test_background",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "test_ctl": {
            "name": "test_ctl",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "test_fe": {
            "name": "test_fe",
            "location": 30,
            "return": [],
            "arguments": {}
        }
    },
    "merou-master/tests/conftest.py": {
        "setup": {
            "name": "setup",
            "location": 24,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "merou-master/tests/constants.py": {},
    "merou-master/tests/constants_test.py": {
        "test_username_validation": {
            "name": "test_username_validation",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "merou-master/tests/ctl_util.py": {
        "call_main": {
            "name": "call_main",
            "location": 12,
            "return": [],
            "arguments": {
                "session": [],
                "tmpdir": []
            }
        },
        "run_ctl": {
            "name": "run_ctl",
            "location": 20,
            "return": [],
            "arguments": {
                "setup": []
            }
        }
    },
    "merou-master/tests/email_test.py": {
        "_get_unsent_emails_and_send": {
            "name": "_get_unsent_emails_and_send",
            "location": 25,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "expired_graph": {
            "name": "expired_graph",
            "location": 37,
            "return": [],
            "arguments": {
                "session": [],
                "graph": [],
                "groups": [],
                "users": []
            }
        },
        "test_expire_edges": {
            "name": "test_expire_edges",
            "location": 56,
            "return": [],
            "arguments": {
                "expired_graph": [],
                "session": []
            }
        },
        "test_promote_nonauditors": {
            "name": "test_promote_nonauditors",
            "location": 93,
            "return": [],
            "arguments": {
                "mock_gagn": [],
                "standard_graph": [],
                "graph": [],
                "users": [],
                "groups": [],
                "session": [],
                "permissions": []
            }
        }
    },
    "merou-master/tests/email_util_test.py": {
        "test_actor_for_edge_expiration": {
            "name": "test_actor_for_edge_expiration",
            "location": 15,
            "return": [],
            "arguments": {
                "setup": []
            }
        }
    },
    "merou-master/tests/exception_test.py": {
        "test_exception_plugin": {
            "name": "test_exception_plugin",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "ExceptionLoggerTestPlugin.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExceptionLoggerTestPlugin.log_exception": {
            "name": "log_exception",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "status": [],
                "exc_type": [],
                "exc_value": [],
                "exc_tb": []
            }
        }
    },
    "merou-master/tests/fixtures.py": {
        "standard_graph": {
            "name": "standard_graph",
            "location": 46,
            "return": [],
            "arguments": {
                "session": [],
                "graph": [],
                "users": [],
                "groups": [],
                "service_accounts": [],
                "permissions": []
            }
        },
        "session": {
            "name": "session",
            "location": 173,
            "return": [],
            "arguments": {
                "request": [],
                "tmpdir": []
            }
        },
        "graph": {
            "name": "graph",
            "location": 202,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "users": {
            "name": "users",
            "location": 209,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "groups": {
            "name": "groups",
            "location": 230,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "service_accounts": {
            "name": "service_accounts",
            "location": 257,
            "return": [],
            "arguments": {
                "session": [],
                "users": [],
                "groups": []
            }
        },
        "permissions": {
            "name": "permissions",
            "location": 271,
            "return": [],
            "arguments": {
                "session": [],
                "users": []
            }
        },
        "api_app": {
            "name": "api_app",
            "location": 314,
            "return": [],
            "arguments": {
                "session": [],
                "standard_graph": []
            }
        },
        "fe_app": {
            "name": "fe_app",
            "location": 328,
            "return": [],
            "arguments": {
                "session": [],
                "standard_graph": [],
                "tmpdir": []
            }
        },
        "session.fin": {
            "name": "fin",
            "location": 192,
            "return": [],
            "arguments": {}
        }
    },
    "merou-master/tests/github_test.py": {
        "test_github": {
            "name": "test_github",
            "location": 57,
            "return": [],
            "arguments": {
                "session": [],
                "users": [],
                "http_client": [],
                "base_url": [],
                "mocker": []
            }
        },
        "test_github_user_admin": {
            "name": "test_github_user_admin",
            "location": 146,
            "return": [],
            "arguments": {
                "session": [],
                "users": [],
                "http_client": [],
                "base_url": []
            }
        },
        "FakeGitHubHttpClient.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeGitHubHttpClient.fetch": {
            "name": "fetch",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "SecretPlugin.get_github_app_client_secret": {
            "name": "get_github_app_client_secret",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "merou-master/tests/graph_test.py": {
        "build_test_graph": {
            "name": "build_test_graph",
            "location": 15,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_get_permissions": {
            "name": "test_get_permissions",
            "location": 92,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_get_permissions_data": {
            "name": "test_get_permissions_data",
            "location": 104,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_get_permission_details": {
            "name": "test_get_permission_details",
            "location": 127,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_get_disabled_groups": {
            "name": "test_get_disabled_groups",
            "location": 164,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_get_groups": {
            "name": "test_get_groups",
            "location": 181,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_get_groups_role_user": {
            "name": "test_get_groups_role_user",
            "location": 210,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_get_group_details": {
            "name": "test_get_group_details",
            "location": 224,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_get_user_details": {
            "name": "test_get_user_details",
            "location": 263,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_graph_update_stats": {
            "name": "test_graph_update_stats",
            "location": 302,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "MockStats.__init__": {
            "name": "__init__",
            "location": 293,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockStats.log_graph_update_duration": {
            "name": "log_graph_update_duration",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "duration_ms": []
            }
        }
    },
    "merou-master/tests/groups_test.py": {
        "setup_desc_to_ances": {
            "name": "setup_desc_to_ances",
            "location": 23,
            "return": [],
            "arguments": {
                "session": [],
                "users": [],
                "groups": []
            }
        },
        "test_graph_desc_to_ances": {
            "name": "test_graph_desc_to_ances",
            "location": 38,
            "return": [],
            "arguments": {
                "session": [],
                "graph": [],
                "users": [],
                "groups": []
            }
        },
        "test_graph_add_member_existing": {
            "name": "test_graph_add_member_existing",
            "location": 68,
            "return": [],
            "arguments": {
                "session": [],
                "graph": [],
                "users": [],
                "groups": []
            }
        },
        "test_graph_with_removes": {
            "name": "test_graph_with_removes",
            "location": 110,
            "return": [],
            "arguments": {
                "session": [],
                "graph": [],
                "users": [],
                "groups": []
            }
        },
        "test_graph_cycle_direct": {
            "name": "test_graph_cycle_direct",
            "location": 183,
            "return": [],
            "arguments": {
                "session": [],
                "graph": [],
                "users": [],
                "groups": []
            }
        },
        "test_graph_cycle_indirect": {
            "name": "test_graph_cycle_indirect",
            "location": 207,
            "return": [],
            "arguments": {
                "session": [],
                "graph": [],
                "users": [],
                "groups": []
            }
        },
        "test_graph_disable": {
            "name": "test_graph_disable",
            "location": 257,
            "return": [],
            "arguments": {
                "session": [],
                "graph": [],
                "groups": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_group_disable": {
            "name": "test_group_disable",
            "location": 284,
            "return": [],
            "arguments": {
                "session": [],
                "groups": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_graph_edit_role": {
            "name": "test_graph_edit_role",
            "location": 328,
            "return": [],
            "arguments": {
                "session": [],
                "graph": [],
                "standard_graph": [],
                "groups": [],
                "users": [],
                "http_client": [],
                "base_url": []
            }
        }
    },
    "merou-master/tests/group_ownership_policy_test.py": {
        "test_cant_revoke_last_owner": {
            "name": "test_cant_revoke_last_owner",
            "location": 18,
            "return": [],
            "arguments": {
                "get_plugin_proxy": [],
                "session": [],
                "groups": [],
                "users": []
            }
        },
        "test_cant_revoke_last_npowner": {
            "name": "test_cant_revoke_last_npowner",
            "location": 43,
            "return": [],
            "arguments": {
                "get_plugin_proxy": [],
                "session": [],
                "groups": [],
                "users": []
            }
        },
        "test_cant_revoke_last_permanent_owner": {
            "name": "test_cant_revoke_last_permanent_owner",
            "location": 63,
            "return": [],
            "arguments": {
                "get_plugin_proxy": [],
                "groups": [],
                "users": []
            }
        },
        "test_cant_expire_last_owner": {
            "name": "test_cant_expire_last_owner",
            "location": 80,
            "return": [],
            "arguments": {
                "get_plugin_proxy": [],
                "groups": [],
                "users": []
            }
        },
        "test_cant_demote_last_owner": {
            "name": "test_cant_demote_last_owner",
            "location": 95,
            "return": [],
            "arguments": {
                "get_plugin_proxy": [],
                "groups": [],
                "users": []
            }
        },
        "test_can_always_revoke_members": {
            "name": "test_can_always_revoke_members",
            "location": 108,
            "return": [],
            "arguments": {
                "get_plugin_proxy": [],
                "groups": [],
                "users": []
            }
        },
        "test_can_add_owner_twice": {
            "name": "test_can_add_owner_twice",
            "location": 124,
            "return": [],
            "arguments": {
                "get_plugin_proxy": [],
                "session": [],
                "groups": [],
                "users": []
            }
        },
        "test_cant_disable_last_owner": {
            "name": "test_cant_disable_last_owner",
            "location": 135,
            "return": [],
            "arguments": {
                "get_plugin_proxy": [],
                "session": [],
                "groups": [],
                "users": []
            }
        },
        "test_can_disable_member": {
            "name": "test_can_disable_member",
            "location": 148,
            "return": [],
            "arguments": {
                "get_plugin_proxy": [],
                "session": [],
                "groups": [],
                "users": []
            }
        }
    },
    "merou-master/tests/metadata_test.py": {
        "test_metadata": {
            "name": "test_metadata",
            "location": 22,
            "return": [],
            "arguments": {
                "session": [],
                "users": [],
                "http_client": [],
                "base_url": []
            }
        }
    },
    "merou-master/tests/models_test.py": {
        "test_group_edge_roles_order_unchanged": {
            "name": "test_group_edge_roles_order_unchanged",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_permission_exclude_inactive_groups": {
            "name": "test_permission_exclude_inactive_groups",
            "location": 25,
            "return": [],
            "arguments": {
                "session": [],
                "standard_graph": []
            }
        }
    },
    "merou-master/tests/notifications_test.py": {
        "expiring_graph": {
            "name": "expiring_graph",
            "location": 13,
            "return": [],
            "arguments": {
                "session": [],
                "graph": [],
                "users": [],
                "groups": [],
                "permissions": []
            }
        },
        "test_expiration_notifications": {
            "name": "test_expiration_notifications",
            "location": 40,
            "return": [],
            "arguments": {
                "expiring_graph": [],
                "session": [],
                "users": [],
                "groups": [],
                "permissions": []
            }
        }
    },
    "merou-master/tests/passwords_test.py": {
        "test_passwords": {
            "name": "test_passwords",
            "location": 28,
            "return": [],
            "arguments": {
                "session": [],
                "users": []
            }
        },
        "test_fe_password_add": {
            "name": "test_fe_password_add",
            "location": 72,
            "return": [],
            "arguments": {
                "session": [],
                "users": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_fe_password_delete": {
            "name": "test_fe_password_delete",
            "location": 139,
            "return": [],
            "arguments": {
                "session": [],
                "users": [],
                "http_client": [],
                "base_url": []
            }
        }
    },
    "merou-master/tests/path_util.py": {
        "src_path": {
            "name": "src_path",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "db_url": {
            "name": "db_url",
            "location": 17,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "bin_env": {
            "name": "bin_env",
            "location": 25,
            "return": [],
            "arguments": {}
        }
    },
    "merou-master/tests/permissions_test.py": {
        "grantable_permissions": {
            "name": "grantable_permissions",
            "location": 59,
            "return": [],
            "arguments": {
                "session": [],
                "standard_graph": []
            }
        },
        "_get_unsent_and_mark_as_sent_emails": {
            "name": "_get_unsent_and_mark_as_sent_emails",
            "location": 69,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "test_basic_permission": {
            "name": "test_basic_permission",
            "location": 80,
            "return": [],
            "arguments": {
                "standard_graph": [],
                "graph": [],
                "session": [],
                "users": [],
                "groups": [],
                "permissions": []
            }
        },
        "test_has_permission": {
            "name": "test_has_permission",
            "location": 129,
            "return": [],
            "arguments": {
                "session": [],
                "standard_graph": [],
                "users": []
            }
        },
        "assert_same_recipients": {
            "name": "assert_same_recipients",
            "location": 197,
            "return": [],
            "arguments": {
                "emails": [],
                "recipients": [],
                "msg": []
            }
        },
        "test_grant_permission": {
            "name": "test_grant_permission",
            "location": 203,
            "return": [],
            "arguments": {
                "session": [],
                "standard_graph": [],
                "groups": [],
                "permissions": []
            }
        },
        "test_grantable_permissions": {
            "name": "test_grantable_permissions",
            "location": 215,
            "return": [],
            "arguments": {
                "session": [],
                "standard_graph": [],
                "users": [],
                "groups": [],
                "grantable_permissions": []
            }
        },
        "test_permission_grant_to_owners": {
            "name": "test_permission_grant_to_owners",
            "location": 250,
            "return": [],
            "arguments": {
                "session": [],
                "standard_graph": [],
                "groups": [],
                "grantable_permissions": [],
                "permissions": []
            }
        },
        "_load_permissions_by_group_name": {
            "name": "_load_permissions_by_group_name",
            "location": 330,
            "return": [],
            "arguments": {
                "session": [],
                "group_name": []
            }
        },
        "test_permission_request_flow": {
            "name": "test_permission_request_flow",
            "location": 336,
            "return": [],
            "arguments": {
                "session": [],
                "standard_graph": [],
                "groups": [],
                "grantable_permissions": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_permission_plugin": {
            "name": "test_permission_plugin",
            "location": 515,
            "return": [],
            "arguments": {
                "session": [],
                "grantable_permissions": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_limited_permissions": {
            "name": "test_limited_permissions",
            "location": 582,
            "return": [],
            "arguments": {
                "session": [],
                "standard_graph": [],
                "groups": [],
                "grantable_permissions": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_limited_permissions_global_approvers": {
            "name": "test_limited_permissions_global_approvers",
            "location": 617,
            "return": [],
            "arguments": {
                "session": [],
                "standard_graph": [],
                "groups": [],
                "grantable_permissions": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_regress_permreq_global_approvers": {
            "name": "test_regress_permreq_global_approvers",
            "location": 648,
            "return": [],
            "arguments": {
                "session": [],
                "standard_graph": [],
                "groups": [],
                "grantable_permissions": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_grant_and_revoke": {
            "name": "test_grant_and_revoke",
            "location": 661,
            "return": [],
            "arguments": {
                "session": [],
                "standard_graph": [],
                "graph": [],
                "groups": [],
                "permissions": [],
                "http_client": [],
                "base_url": []
            }
        },
        "PermissionTests.test_reject_bad_permission_names": {
            "name": "test_reject_bad_permission_names",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionValidationPlugin.check_permission_argument": {
            "name": "check_permission_argument",
            "location": 509,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "permission": [
                    "str"
                ],
                "argument": [
                    "str"
                ]
            }
        },
        "test_grant_and_revoke._check_graph_for_perm": {
            "name": "_check_graph_for_perm",
            "location": 669,
            "return": [],
            "arguments": {
                "graph": []
            }
        },
        "PermissionTests.test_reject_bad_permission_names.eval_permission": {
            "name": "eval_permission",
            "location": 160,
            "return": [],
            "arguments": {
                "perm": []
            }
        },
        "PermissionTests.test_reject_bad_permission_names.eval_argument": {
            "name": "eval_argument",
            "location": 172,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_permission_grant_to_owners.FakePermissionAliasesPlugin.get_aliases_for_mapped_permission": {
            "name": "get_aliases_for_mapped_permission",
            "location": 305,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "permission": [],
                "argument": []
            }
        }
    },
    "merou-master/tests/permission_aliases_test.py": {
        "test_groups_aliased_permissions": {
            "name": "test_groups_aliased_permissions",
            "location": 22,
            "return": [],
            "arguments": {
                "mocker": [],
                "session": [],
                "standard_graph": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_users_aliased_permissions": {
            "name": "test_users_aliased_permissions",
            "location": 44,
            "return": [],
            "arguments": {
                "mocker": [],
                "session": [],
                "standard_graph": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_permissions_aliased_permissions": {
            "name": "test_permissions_aliased_permissions",
            "location": 66,
            "return": [],
            "arguments": {
                "mocker": [],
                "session": [],
                "standard_graph": [],
                "http_client": [],
                "base_url": []
            }
        }
    },
    "merou-master/tests/public_key_test.py": {
        "test_duplicate_key": {
            "name": "test_duplicate_key",
            "location": 30,
            "return": [],
            "arguments": {
                "session": [],
                "users": []
            }
        },
        "test_bad_key": {
            "name": "test_bad_key",
            "location": 43,
            "return": [],
            "arguments": {
                "key": [],
                "session": [],
                "users": []
            }
        },
        "test_multiline_key": {
            "name": "test_multiline_key",
            "location": 53,
            "return": [],
            "arguments": {
                "key": [],
                "session": [],
                "users": []
            }
        },
        "test_key_with_options": {
            "name": "test_key_with_options",
            "location": 62,
            "return": [],
            "arguments": {
                "session": [],
                "users": []
            }
        },
        "test_rejected_key": {
            "name": "test_rejected_key",
            "location": 72,
            "return": [],
            "arguments": {
                "get_plugin_proxy": [],
                "session": [],
                "users": []
            }
        },
        "PublicKeyPlugin.will_add_public_key": {
            "name": "will_add_public_key",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        }
    },
    "merou-master/tests/requests_test.py": {
        "test_basic_request": {
            "name": "test_basic_request",
            "location": 17,
            "return": [],
            "arguments": {
                "graph": [],
                "groups": [],
                "permissions": [],
                "session": [],
                "standard_graph": [],
                "users": []
            }
        },
        "test_aggregate_request": {
            "name": "test_aggregate_request",
            "location": 51,
            "return": [],
            "arguments": {
                "graph": [],
                "groups": [],
                "permissions": [],
                "session": [],
                "standard_graph": [],
                "users": []
            }
        }
    },
    "merou-master/tests/service_accounts_test.py": {
        "test_service_accounts": {
            "name": "test_service_accounts",
            "location": 35,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_service_account_fe_disable": {
            "name": "test_service_account_fe_disable",
            "location": 106,
            "return": [],
            "arguments": {
                "session": [],
                "standard_graph": [],
                "graph": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_service_account_fe_edit": {
            "name": "test_service_account_fe_edit",
            "location": 168,
            "return": [],
            "arguments": {
                "session": [],
                "standard_graph": [],
                "graph": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_machine_set_plugin": {
            "name": "test_machine_set_plugin",
            "location": 214,
            "return": [],
            "arguments": {
                "session": [],
                "standard_graph": [],
                "graph": [],
                "http_client": [],
                "base_url": []
            }
        },
        "MachineSetPlugin.check_machine_set": {
            "name": "check_machine_set",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "machine_set": []
            }
        }
    },
    "merou-master/tests/settings_test.py": {
        "test_timezone": {
            "name": "test_timezone",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "test_update_from_config": {
            "name": "test_update_from_config",
            "location": 43,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_database": {
            "name": "test_database",
            "location": 80,
            "return": [],
            "arguments": {}
        },
        "test_mask_passsword_in_logs": {
            "name": "test_mask_passsword_in_logs",
            "location": 133,
            "return": [],
            "arguments": {
                "caplog": []
            }
        },
        "test_bad_db_url": {
            "name": "test_bad_db_url",
            "location": 150,
            "return": [],
            "arguments": {}
        }
    },
    "merou-master/tests/setup.py": {
        "SetupTest.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "tmpdir": []
            }
        },
        "SetupTest.initialize_database": {
            "name": "initialize_database",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetupTest.open_database": {
            "name": "open_database",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetupTest.reopen_database": {
            "name": "reopen_database",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetupTest.close": {
            "name": "close",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetupTest.transaction": {
            "name": "transaction",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetupTest.create_group": {
            "name": "create_group",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "description": [
                    "str"
                ],
                "join_policy": [
                    "GroupJoinPolicy"
                ],
                "email": [
                    "Optional[str]"
                ]
            }
        },
        "SetupTest.create_permission": {
            "name": "create_permission",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "description": [],
                "audited": [],
                "enabled": [],
                "created_on": []
            }
        },
        "SetupTest.create_user": {
            "name": "create_user",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "SetupTest.add_group_to_group": {
            "name": "add_group_to_group",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "member": [],
                "group": [],
                "expiration": []
            }
        },
        "SetupTest.add_user_to_group": {
            "name": "add_user_to_group",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "group": [],
                "role": [],
                "expiration": []
            }
        },
        "SetupTest.remove_user_from_group": {
            "name": "remove_user_from_group",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "group": []
            }
        },
        "SetupTest.grant_permission_to_group": {
            "name": "grant_permission_to_group",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "argument": [],
                "group": []
            }
        },
        "SetupTest.revoke_permission_from_group": {
            "name": "revoke_permission_from_group",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "argument": [],
                "group": []
            }
        },
        "SetupTest.create_group_request": {
            "name": "create_group_request",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "group": [],
                "role": []
            }
        },
        "SetupTest.create_service_account": {
            "name": "create_service_account",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "service_account": [],
                "owner": [],
                "machine_set": [],
                "description": []
            }
        },
        "SetupTest.grant_permission_to_service_account": {
            "name": "grant_permission_to_service_account",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "argument": [],
                "service_account": []
            }
        },
        "SetupTest.add_metadata_to_user": {
            "name": "add_metadata_to_user",
            "location": 272,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": [],
                "user": []
            }
        },
        "SetupTest.add_public_key_to_user": {
            "name": "add_public_key_to_user",
            "location": 279,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "user": []
            }
        },
        "SetupTest.disable_user": {
            "name": "disable_user",
            "location": 296,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "SetupTest.disable_group": {
            "name": "disable_group",
            "location": 301,
            "return": [],
            "arguments": {
                "self": [],
                "group": []
            }
        },
        "SetupTest.disable_service_account": {
            "name": "disable_service_account",
            "location": 307,
            "return": [],
            "arguments": {
                "self": [],
                "service_account": []
            }
        },
        "SetupTest.create_role_user": {
            "name": "create_role_user",
            "location": 319,
            "return": [],
            "arguments": {
                "self": [],
                "role_user": [],
                "description": [],
                "join_policy": []
            }
        }
    },
    "merou-master/tests/shells_test.py": {
        "test_shell": {
            "name": "test_shell",
            "location": 23,
            "return": [],
            "arguments": {
                "session": [],
                "users": [],
                "http_client": [],
                "base_url": []
            }
        }
    },
    "merou-master/tests/ssh_key_policy_test.py": {
        "test_accepts_strong_keys": {
            "name": "test_accepts_strong_keys",
            "location": 18,
            "return": [],
            "arguments": {
                "get_plugin_proxy": [],
                "session": [],
                "users": []
            }
        },
        "test_rejects_weak_rsa_keys": {
            "name": "test_rejects_weak_rsa_keys",
            "location": 28,
            "return": [],
            "arguments": {
                "get_plugin_proxy": [],
                "session": [],
                "users": []
            }
        },
        "test_rejects_dsa_keys": {
            "name": "test_rejects_dsa_keys",
            "location": 38,
            "return": [],
            "arguments": {
                "get_plugin_proxy": [],
                "session": [],
                "users": []
            }
        },
        "test_rejects_ecdsa_keys": {
            "name": "test_rejects_ecdsa_keys",
            "location": 48,
            "return": [],
            "arguments": {
                "get_plugin_proxy": [],
                "session": [],
                "users": []
            }
        }
    },
    "merou-master/tests/templating_test.py": {
        "mock_utcnow": {
            "name": "mock_utcnow",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_expires_when_str": {
            "name": "test_expires_when_str",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_long_ago_str": {
            "name": "test_long_ago_str",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "test_print_date": {
            "name": "test_print_date",
            "location": 52,
            "return": [],
            "arguments": {}
        }
    },
    "merou-master/tests/url_util.py": {
        "url": {
            "name": "url",
            "location": 4,
            "return": [],
            "arguments": {
                "base_url": [],
                "path": [],
                "query_dict": []
            }
        }
    },
    "merou-master/tests/users_test.py": {
        "test_basic_metadata": {
            "name": "test_basic_metadata",
            "location": 30,
            "return": [],
            "arguments": {
                "standard_graph": [],
                "session": [],
                "users": [],
                "groups": [],
                "permissions": []
            }
        },
        "test_usertokens": {
            "name": "test_usertokens",
            "location": 65,
            "return": [],
            "arguments": {
                "standard_graph": [],
                "session": [],
                "users": [],
                "groups": [],
                "permissions": []
            }
        },
        "user_admin_perm_to_auditors": {
            "name": "user_admin_perm_to_auditors",
            "location": 83,
            "return": [],
            "arguments": {
                "session": [],
                "groups": []
            }
        },
        "user_enable_perm_to_sre": {
            "name": "user_enable_perm_to_sre",
            "location": 94,
            "return": [],
            "arguments": {
                "session": [],
                "groups": []
            }
        },
        "test_user_tok_acls": {
            "name": "test_user_tok_acls",
            "location": 105,
            "return": [],
            "arguments": {
                "session": [],
                "graph": [],
                "users": [],
                "user_admin_perm_to_auditors": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_graph_disable": {
            "name": "test_graph_disable",
            "location": 140,
            "return": [],
            "arguments": {
                "session": [],
                "graph": [],
                "users": [],
                "groups": [],
                "user_admin_perm_to_auditors": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_user_enable_disable": {
            "name": "test_user_enable_disable",
            "location": 161,
            "return": [],
            "arguments": {
                "session": [],
                "graph": [],
                "users": [],
                "user_admin_perm_to_auditors": [],
                "user_enable_perm_to_sre": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_user_created_plugin": {
            "name": "test_user_created_plugin",
            "location": 228,
            "return": [],
            "arguments": {
                "setup": [
                    "SetupTest"
                ]
            }
        },
        "UserCreatedPlugin.__init__": {
            "name": "__init__",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserCreatedPlugin.user_created": {
            "name": "user_created",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "is_service_account": []
            }
        }
    },
    "merou-master/tests/util.py": {
        "add_member": {
            "name": "add_member",
            "location": 18,
            "return": [],
            "arguments": {
                "parent": [],
                "member": [],
                "role": [],
                "expiration": []
            }
        },
        "edit_member": {
            "name": "edit_member",
            "location": 25,
            "return": [],
            "arguments": {
                "parent": [],
                "member": [],
                "role": [],
                "expiration": []
            }
        },
        "revoke_member": {
            "name": "revoke_member",
            "location": 30,
            "return": [],
            "arguments": {
                "parent": [],
                "member": []
            }
        },
        "grant_permission": {
            "name": "grant_permission",
            "location": 35,
            "return": [],
            "arguments": {
                "group": [],
                "permission": [],
                "argument": []
            }
        },
        "get_users": {
            "name": "get_users",
            "location": 40,
            "return": [],
            "arguments": {
                "graph": [],
                "groupname": [],
                "cutoff": []
            }
        },
        "get_groups": {
            "name": "get_groups",
            "location": 53,
            "return": [],
            "arguments": {
                "graph": [],
                "username": [],
                "cutoff": []
            }
        },
        "get_user_permissions": {
            "name": "get_user_permissions",
            "location": 66,
            "return": [],
            "arguments": {
                "graph": [],
                "username": [],
                "cutoff": []
            }
        },
        "get_group_permissions": {
            "name": "get_group_permissions",
            "location": 75,
            "return": [],
            "arguments": {
                "graph": [],
                "groupname": [],
                "cutoff": []
            }
        },
        "key_to_public_key": {
            "name": "key_to_public_key",
            "location": 84,
            "return": [],
            "arguments": {
                "key": []
            }
        }
    },
    "merou-master/tests/__init__.py": {},
    "merou-master/tests/api/handlers_test.py": {
        "test_health": {
            "name": "test_health",
            "location": 37,
            "return": [],
            "arguments": {
                "session": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_users": {
            "name": "test_users",
            "location": 44,
            "return": [],
            "arguments": {
                "users": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_multi_users": {
            "name": "test_multi_users",
            "location": 64,
            "return": [],
            "arguments": {
                "users": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_service_accounts": {
            "name": "test_service_accounts",
            "location": 115,
            "return": [],
            "arguments": {
                "session": [],
                "standard_graph": [],
                "users": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_usertokens": {
            "name": "test_usertokens",
            "location": 153,
            "return": [],
            "arguments": {
                "users": [],
                "session": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_permissions": {
            "name": "test_permissions",
            "location": 249,
            "return": [],
            "arguments": {
                "permissions": [],
                "http_client": [],
                "base_url": [],
                "session": [],
                "graph": []
            }
        },
        "test_groups": {
            "name": "test_groups",
            "location": 267,
            "return": [],
            "arguments": {
                "groups": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_groups_email": {
            "name": "test_groups_email",
            "location": 278,
            "return": [],
            "arguments": {
                "groups": [],
                "session": [],
                "graph": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_shell": {
            "name": "test_shell",
            "location": 294,
            "return": [],
            "arguments": {
                "session": [],
                "users": [],
                "http_client": [],
                "base_url": [],
                "graph": []
            }
        },
        "test_github_username": {
            "name": "test_github_username",
            "location": 332,
            "return": [],
            "arguments": {
                "session": [],
                "users": [],
                "http_client": [],
                "base_url": [],
                "graph": []
            }
        },
        "test_passwords_api": {
            "name": "test_passwords_api",
            "location": 356,
            "return": [],
            "arguments": {
                "session": [],
                "users": [],
                "http_client": [],
                "base_url": [],
                "graph": []
            }
        },
        "test_public_keys": {
            "name": "test_public_keys",
            "location": 402,
            "return": [],
            "arguments": {
                "session": [],
                "users": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_request_logging": {
            "name": "test_request_logging",
            "location": 422,
            "return": [],
            "arguments": {
                "session": [],
                "users": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_multi_users.make_url": {
            "name": "make_url",
            "location": 65,
            "return": [],
            "arguments": {}
        }
    },
    "merou-master/tests/api/__init__.py": {},
    "merou-master/tests/ctl/group_test.py": {
        "test_group_add_remove_member": {
            "name": "test_group_add_remove_member",
            "location": 15,
            "return": [],
            "arguments": {
                "session": [],
                "tmpdir": [],
                "users": [],
                "groups": []
            }
        },
        "test_group_add_remove_owner": {
            "name": "test_group_add_remove_owner",
            "location": 33,
            "return": [],
            "arguments": {
                "get_plugin_proxy": [],
                "session": [],
                "tmpdir": [],
                "users": [],
                "groups": []
            }
        },
        "test_group_bulk_add_remove": {
            "name": "test_group_bulk_add_remove",
            "location": 52,
            "return": [],
            "arguments": {
                "session": [],
                "tmpdir": [],
                "users": [],
                "groups": []
            }
        },
        "test_group_name_checks": {
            "name": "test_group_name_checks",
            "location": 67,
            "return": [],
            "arguments": {
                "session": [],
                "tmpdir": [],
                "users": [],
                "groups": []
            }
        },
        "test_group_logdump": {
            "name": "test_group_logdump",
            "location": 80,
            "return": [],
            "arguments": {
                "session": [],
                "tmpdir": [],
                "users": [],
                "groups": []
            }
        }
    },
    "merou-master/tests/ctl/misc_test.py": {
        "test_user_create": {
            "name": "test_user_create",
            "location": 12,
            "return": [],
            "arguments": {
                "session": [],
                "tmpdir": [],
                "users": []
            }
        },
        "test_user_status_changes": {
            "name": "test_user_status_changes",
            "location": 35,
            "return": [],
            "arguments": {
                "session": [],
                "tmpdir": [],
                "users": [],
                "groups": []
            }
        },
        "test_user_public_key": {
            "name": "test_user_public_key",
            "location": 66,
            "return": [],
            "arguments": {
                "session": [],
                "tmpdir": [],
                "users": []
            }
        },
        "test_oneoff": {
            "name": "test_oneoff",
            "location": 92,
            "return": [],
            "arguments": {
                "mock_load_plugins": [],
                "session": [],
                "tmpdir": []
            }
        },
        "test_oneoff.FakeOneOff.configure": {
            "name": "configure",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "service_name": []
            }
        },
        "test_oneoff.FakeOneOff.run": {
            "name": "run",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "merou-master/tests/ctl/permission_test.py": {
        "test_disable": {
            "name": "test_disable",
            "location": 14,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_disable_failed": {
            "name": "test_disable_failed",
            "location": 27,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_disable_with_existing_grants": {
            "name": "test_disable_with_existing_grants",
            "location": 35,
            "return": [],
            "arguments": {
                "setup": [],
                "caplog": []
            }
        },
        "test_disable_with_duplicate_grants": {
            "name": "test_disable_with_duplicate_grants",
            "location": 48,
            "return": [],
            "arguments": {
                "setup": [],
                "caplog": []
            }
        }
    },
    "merou-master/tests/ctl/service_account_test.py": {
        "test_create": {
            "name": "test_create",
            "location": 15,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_create_as_service_account": {
            "name": "test_create_as_service_account",
            "location": 63,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_create_invalid_actor": {
            "name": "test_create_invalid_actor",
            "location": 90,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_create_bad_name": {
            "name": "test_create_bad_name",
            "location": 114,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_create_bad_owner": {
            "name": "test_create_bad_owner",
            "location": 138,
            "return": [],
            "arguments": {
                "setup": []
            }
        }
    },
    "merou-master/tests/ctl/user_test.py": {
        "test_group_disable_group_owner": {
            "name": "test_group_disable_group_owner",
            "location": 12,
            "return": [],
            "arguments": {
                "get_plugin_proxy": [],
                "session": [],
                "tmpdir": [],
                "users": [],
                "groups": []
            }
        }
    },
    "merou-master/tests/ctl/__init__.py": {},
    "merou-master/tests/fe/handlers_test.py": {
        "_get_unsent_and_mark_as_sent_emails_with_username": {
            "name": "_get_unsent_and_mark_as_sent_emails_with_username",
            "location": 37,
            "return": [],
            "arguments": {
                "session": [],
                "username": []
            }
        },
        "test_health": {
            "name": "test_health",
            "location": 49,
            "return": [],
            "arguments": {
                "session": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_auth": {
            "name": "test_auth",
            "location": 56,
            "return": [],
            "arguments": {
                "users": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_public_key": {
            "name": "test_public_key",
            "location": 74,
            "return": [],
            "arguments": {
                "session": [],
                "users": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_public_key_admin": {
            "name": "test_public_key_admin",
            "location": 108,
            "return": [],
            "arguments": {
                "session": [],
                "users": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_bad_public_key": {
            "name": "test_bad_public_key",
            "location": 139,
            "return": [],
            "arguments": {
                "session": [],
                "users": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_rejected_public_key": {
            "name": "test_rejected_public_key",
            "location": 155,
            "return": [],
            "arguments": {
                "session": [],
                "users": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_sa_pubkeys": {
            "name": "test_sa_pubkeys",
            "location": 174,
            "return": [],
            "arguments": {
                "session": [],
                "users": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_usertokens": {
            "name": "test_usertokens",
            "location": 252,
            "return": [],
            "arguments": {
                "session": [],
                "users": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_sa_tokens": {
            "name": "test_sa_tokens",
            "location": 303,
            "return": [],
            "arguments": {
                "session": [],
                "users": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_request_emails_reference": {
            "name": "test_request_emails_reference",
            "location": 369,
            "return": [],
            "arguments": {
                "session": [],
                "groups": [],
                "permissions": [],
                "users": [],
                "base_url": [],
                "http_client": []
            }
        },
        "test_request_emails": {
            "name": "test_request_emails",
            "location": 396,
            "return": [],
            "arguments": {
                "graph": [],
                "groups": [],
                "permissions": [],
                "session": [],
                "standard_graph": [],
                "users": [],
                "base_url": [],
                "http_client": []
            }
        },
        "test_request_autoexpiration": {
            "name": "test_request_autoexpiration",
            "location": 517,
            "return": [],
            "arguments": {
                "graph": [],
                "groups": [],
                "permissions": [],
                "session": [],
                "standard_graph": [],
                "users": [],
                "base_url": [],
                "http_client": []
            }
        },
        "test_add_role_user": {
            "name": "test_add_role_user",
            "location": 706,
            "return": [],
            "arguments": {
                "session": [],
                "users": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_disable_role_user": {
            "name": "test_disable_role_user",
            "location": 726,
            "return": [],
            "arguments": {
                "session": [],
                "users": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_group_request": {
            "name": "test_group_request",
            "location": 790,
            "return": [],
            "arguments": {
                "session": [],
                "users": [],
                "groups": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_group_request_cancelled": {
            "name": "test_group_request_cancelled",
            "location": 824,
            "return": [],
            "arguments": {
                "session": [],
                "users": [],
                "groups": [],
                "http_client": [],
                "base_url": []
            }
        },
        "test_request_logging": {
            "name": "test_request_logging",
            "location": 873,
            "return": [],
            "arguments": {
                "session": [],
                "users": [],
                "http_client": [],
                "base_url": []
            }
        }
    },
    "merou-master/tests/fe/templates_test.py": {
        "get_template_variables": {
            "name": "get_template_variables",
            "location": 37,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "engine": [
                    "FrontendTemplateEngine"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "test_template_consistency": {
            "name": "test_template_consistency",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "merou-master/tests/fe/templating_test.py": {
        "test_included_resources": {
            "name": "test_included_resources",
            "location": 12,
            "return": [],
            "arguments": {}
        }
    },
    "merou-master/tests/fe/__init__.py": {},
    "merou-master/tests/repositories/permission_grant_test.py": {
        "test_permission_grants_for_user": {
            "name": "test_permission_grants_for_user",
            "location": 7,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_permission_grants_for_group": {
            "name": "test_permission_grants_for_group",
            "location": 43,
            "return": [],
            "arguments": {
                "setup": []
            }
        }
    },
    "merou-master/tests/repositories/__init__.py": {},
    "merou-master/tests/services/group_test.py": {
        "test_permission_grants_for_group": {
            "name": "test_permission_grants_for_group",
            "location": 14,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_invalid_group_name": {
            "name": "test_invalid_group_name",
            "location": 64,
            "return": [],
            "arguments": {
                "setup": []
            }
        }
    },
    "merou-master/tests/services/transaction_test.py": {
        "test_checkpoint_update": {
            "name": "test_checkpoint_update",
            "location": 7,
            "return": [],
            "arguments": {
                "setup": []
            }
        }
    },
    "merou-master/tests/services/__init__.py": {},
    "merou-master/tests/usecases/convert_user_to_service_account_test.py": {
        "test_success": {
            "name": "test_success",
            "location": 19,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_failed_access_denied": {
            "name": "test_failed_access_denied",
            "location": 58,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_failed_member_of_group": {
            "name": "test_failed_member_of_group",
            "location": 75,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_cancels_group_requests": {
            "name": "test_cancels_group_requests",
            "location": 93,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_failed_user_does_not_exist": {
            "name": "test_failed_user_does_not_exist",
            "location": 117,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_failed_group_does_not_exist": {
            "name": "test_failed_group_does_not_exist",
            "location": 131,
            "return": [],
            "arguments": {
                "setup": []
            }
        }
    },
    "merou-master/tests/usecases/create_service_account_test.py": {
        "test_can_create": {
            "name": "test_can_create",
            "location": 18,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_success": {
            "name": "test_success",
            "location": 52,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_success_set_initial_metadata": {
            "name": "test_success_set_initial_metadata",
            "location": 94,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_add_domain": {
            "name": "test_add_domain",
            "location": 126,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_admin_can_create": {
            "name": "test_admin_can_create",
            "location": 142,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_permission_denied": {
            "name": "test_permission_denied",
            "location": 162,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_invalid_name": {
            "name": "test_invalid_name",
            "location": 176,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_invalid_owner": {
            "name": "test_invalid_owner",
            "location": 221,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_invalid_machine_set": {
            "name": "test_invalid_machine_set",
            "location": 242,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_name_rejected_by_plugin": {
            "name": "test_name_rejected_by_plugin",
            "location": 266,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_user_created_plugin_invocation": {
            "name": "test_user_created_plugin_invocation",
            "location": 298,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "MachineSetTestPlugin.check_machine_set": {
            "name": "check_machine_set",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "machine_set": []
            }
        },
        "ServiceAccountNameTestPlugin.check_service_account_name": {
            "name": "check_service_account_name",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ServiceAccountCreatedPlugin.user_created": {
            "name": "user_created",
            "location": 290,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "is_service_account": []
            }
        }
    },
    "merou-master/tests/usecases/disable_permission_test.py": {
        "test_permission_disable": {
            "name": "test_permission_disable",
            "location": 13,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_permission_disable_inactive_grants": {
            "name": "test_permission_disable_inactive_grants",
            "location": 34,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_permission_disable_denied": {
            "name": "test_permission_disable_denied",
            "location": 54,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_permission_disable_existing_grants": {
            "name": "test_permission_disable_existing_grants",
            "location": 68,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_permission_disable_system": {
            "name": "test_permission_disable_system",
            "location": 107,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_permission_not_found": {
            "name": "test_permission_not_found",
            "location": 121,
            "return": [],
            "arguments": {
                "setup": []
            }
        }
    },
    "merou-master/tests/usecases/dump_schema_test.py": {
        "test_dump_schema": {
            "name": "test_dump_schema",
            "location": 15,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "MockUI.dumped_schema": {
            "name": "dumped_schema",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "schema": []
            }
        }
    },
    "merou-master/tests/usecases/grant_permission_to_group_test.py": {
        "test_permissions_grantable": {
            "name": "test_permissions_grantable",
            "location": 12,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "_test_success": {
            "name": "_test_success",
            "location": 74,
            "return": [],
            "arguments": {
                "setup": [],
                "actor": []
            }
        },
        "test_success_user": {
            "name": "test_success_user",
            "location": 112,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_success_service_account": {
            "name": "test_success_service_account",
            "location": 117,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_duplicate_grant": {
            "name": "test_duplicate_grant",
            "location": 122,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_invalid_argument": {
            "name": "test_invalid_argument",
            "location": 137,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "_assert_sane_permission_denied_message": {
            "name": "_assert_sane_permission_denied_message",
            "location": 158,
            "return": [],
            "arguments": {
                "mock_ui": []
            }
        },
        "test_permission_denied": {
            "name": "test_permission_denied",
            "location": 165,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_unknown_group": {
            "name": "test_unknown_group",
            "location": 211,
            "return": [],
            "arguments": {
                "setup": []
            }
        }
    },
    "merou-master/tests/usecases/grant_permission_to_service_account_test.py": {
        "test_permissions_grantable_to_service_account": {
            "name": "test_permissions_grantable_to_service_account",
            "location": 12,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_service_account_exists_with_owner": {
            "name": "test_service_account_exists_with_owner",
            "location": 82,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_success": {
            "name": "test_success",
            "location": 102,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_wildcard": {
            "name": "test_wildcard",
            "location": 222,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_invalid_argument": {
            "name": "test_invalid_argument",
            "location": 256,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "_assert_sane_permission_denied_message": {
            "name": "_assert_sane_permission_denied_message",
            "location": 279,
            "return": [],
            "arguments": {
                "mock_ui": []
            }
        },
        "test_permission_denied": {
            "name": "test_permission_denied",
            "location": 286,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_unknown_service_account": {
            "name": "test_unknown_service_account",
            "location": 344,
            "return": [],
            "arguments": {
                "setup": []
            }
        }
    },
    "merou-master/tests/usecases/initialize_schema_test.py": {
        "test_initialize_schema": {
            "name": "test_initialize_schema",
            "location": 16,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_initialize_schema_twice": {
            "name": "test_initialize_schema_twice",
            "location": 41,
            "return": [],
            "arguments": {
                "setup": []
            }
        }
    },
    "merou-master/tests/usecases/list_grants_test.py": {
        "create_graph": {
            "name": "create_graph",
            "location": 26,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_list_grants": {
            "name": "test_list_grants",
            "location": 51,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_list_grants_of_permission": {
            "name": "test_list_grants_of_permission",
            "location": 80,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_unknown_permission": {
            "name": "test_unknown_permission",
            "location": 98,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_np_owner_grants": {
            "name": "test_np_owner_grants",
            "location": 111,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_broken_service_account_grants": {
            "name": "test_broken_service_account_grants",
            "location": 142,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "MockUI.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockUI.listed_grants": {
            "name": "listed_grants",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "grants": []
            }
        },
        "MockUI.listed_grants_of_permission": {
            "name": "listed_grants_of_permission",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "grants": []
            }
        }
    },
    "merou-master/tests/usecases/list_permissions_test.py": {
        "create_test_data": {
            "name": "create_test_data",
            "location": 28,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_simple_list_permissions": {
            "name": "test_simple_list_permissions",
            "location": 70,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_list_permissions_pagination": {
            "name": "test_list_permissions_pagination",
            "location": 81,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_list_permissions_audited_only": {
            "name": "test_list_permissions_audited_only",
            "location": 114,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_list_permissions_can_create": {
            "name": "test_list_permissions_can_create",
            "location": 128,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "MockUI.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sort": [
                    "bool"
                ]
            }
        },
        "MockUI.listed_permissions": {
            "name": "listed_permissions",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "permissions": [
                    "PaginatedList[Permission]"
                ],
                "can_create": [
                    "bool"
                ]
            }
        }
    },
    "merou-master/tests/usecases/list_users_test.py": {
        "test_list_users": {
            "name": "test_list_users",
            "location": 23,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "MockUI.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockUI.listed_users": {
            "name": "listed_users",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "users": []
            }
        }
    },
    "merou-master/tests/usecases/view_permission_test.py": {
        "test_view_permissions": {
            "name": "test_view_permissions",
            "location": 75,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_view_permissions_access": {
            "name": "test_view_permissions_access",
            "location": 241,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "test_pagination": {
            "name": "test_pagination",
            "location": 273,
            "return": [],
            "arguments": {
                "setup": []
            }
        },
        "MockGroupUI.view_permission_failed_not_found": {
            "name": "view_permission_failed_not_found",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "MockGroupUI.viewed_permission": {
            "name": "viewed_permission",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "grants": []
            }
        },
        "MockServiceAccountUI.view_permission_failed_not_found": {
            "name": "view_permission_failed_not_found",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "MockServiceAccountUI.viewed_permission": {
            "name": "viewed_permission",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "grants": []
            }
        },
        "MockPermissionUI.view_permission_failed_not_found": {
            "name": "view_permission_failed_not_found",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "MockPermissionUI.viewed_permission": {
            "name": "viewed_permission",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "permission": [],
                "access": [],
                "audit_log_entries": []
            }
        }
    },
    "merou-master/tests/usecases/__init__.py": {}
}
{
    "meterelf-master/setup.py": {},
    "meterelf-master/meterelf/exceptions.py": {
        "ImageProcessingError.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "message": [
                    "Optional[str]"
                ],
                "extra_info": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "ImageProcessingError.__str__": {
            "name": "__str__",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageProcessingError.get_message": {
            "name": "get_message",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "meterelf-master/meterelf/_api.py": {
        "get_meter_values": {
            "name": "get_meter_values",
            "location": 16,
            "return": [
                "Iterator[MeterImageData]"
            ],
            "arguments": {
                "params_file": [
                    "str"
                ],
                "filenames": [
                    "Iterable[str]"
                ]
            }
        }
    },
    "meterelf-master/meterelf/_calibration.py": {
        "find_dial_centers": {
            "name": "find_dial_centers",
            "location": 16,
            "return": [
                "List[DialCenter]"
            ],
            "arguments": {
                "params": [
                    "_Params"
                ],
                "files": [
                    "Union[(int, Iterable[str])]"
                ]
            }
        },
        "get_files": {
            "name": "get_files",
            "location": 24,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "params": [
                    "_Params"
                ],
                "files": [
                    "Union[(int, Iterable[str])]"
                ]
            }
        },
        "find_dial_centers_from_image": {
            "name": "find_dial_centers_from_image",
            "location": 33,
            "return": [
                "List[DialCenter]"
            ],
            "arguments": {
                "params": [
                    "_Params"
                ],
                "avg_meter": [
                    "Image"
                ]
            }
        },
        "get_average_meter_image": {
            "name": "get_average_meter_image",
            "location": 60,
            "return": [
                "Image"
            ],
            "arguments": {
                "params": [
                    "_Params"
                ],
                "files": [
                    "Iterable[str]"
                ]
            }
        },
        "get_norm_images": {
            "name": "get_norm_images",
            "location": 66,
            "return": [
                "Iterator[Image]"
            ],
            "arguments": {
                "params": [
                    "_Params"
                ],
                "files": [
                    "Iterable[str]"
                ]
            }
        },
        "get_image_filenames": {
            "name": "get_image_filenames",
            "location": 72,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "params": [
                    "_Params"
                ]
            }
        },
        "get_needles_mask_by_color": {
            "name": "get_needles_mask_by_color",
            "location": 82,
            "return": [
                "Image"
            ],
            "arguments": {
                "params": [
                    "_Params"
                ],
                "hls_image": [
                    "Image"
                ]
            }
        }
    },
    "meterelf-master/meterelf/_colors.py": {
        "HlsColor.__new__": {
            "name": "__new__",
            "location": 7,
            "return": [
                "'HlsColor'"
            ],
            "arguments": {
                "cls": [],
                "hue": [
                    "int"
                ],
                "lightness": [
                    "int"
                ],
                "saturation": [
                    "int"
                ]
            }
        },
        "HlsColor.__repr__": {
            "name": "__repr__",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HlsColor.hue": {
            "name": "hue",
            "location": 27,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HlsColor.lightness": {
            "name": "lightness",
            "location": 31,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HlsColor.saturation": {
            "name": "saturation",
            "location": 35,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HlsColor.get_range": {
            "name": "get_range",
            "location": 38,
            "return": [
                "Tuple[('HlsColor', 'HlsColor')]"
            ],
            "arguments": {
                "self": [],
                "color_range": [
                    "'HlsColor'"
                ]
            }
        }
    },
    "meterelf-master/meterelf/_debug.py": {
        "reraise_if_debug_on": {
            "name": "reraise_if_debug_on",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "meterelf-master/meterelf/_dial_data.py": {
        "get_dial_data": {
            "name": "get_dial_data",
            "location": 14,
            "return": [
                "Dict[(str, DialData)]"
            ],
            "arguments": {
                "params": [
                    "_Params"
                ]
            }
        },
        "_get_dial_data": {
            "name": "_get_dial_data",
            "location": 22,
            "return": [
                "Dict[(str, DialData)]"
            ],
            "arguments": {
                "params": [
                    "_Params"
                ]
            }
        }
    },
    "meterelf-master/meterelf/_image.py": {
        "_get_dials_template": {
            "name": "_get_dials_template",
            "location": 72,
            "return": [
                "Image"
            ],
            "arguments": {
                "params": [
                    "_Params"
                ]
            }
        },
        "ImageFile.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "params": [
                    "_Params"
                ],
                "bgr_image": [
                    "Optional[Image]"
                ]
            }
        },
        "ImageFile.get_dials_hls": {
            "name": "get_dials_hls",
            "location": 23,
            "return": [
                "Image"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageFile.get_hls_image": {
            "name": "get_hls_image",
            "location": 29,
            "return": [
                "Image"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageFile.get_bgr_image_t": {
            "name": "get_bgr_image_t",
            "location": 34,
            "return": [
                "Image"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageFile.get_bgr_image": {
            "name": "get_bgr_image",
            "location": 46,
            "return": [
                "Image"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageFile._crop_meter": {
            "name": "_crop_meter",
            "location": 54,
            "return": [
                "Image"
            ],
            "arguments": {
                "self": [],
                "img": [
                    "Image"
                ]
            }
        },
        "ImageFile._find_dials": {
            "name": "_find_dials",
            "location": 57,
            "return": [
                "TemplateMatchResult"
            ],
            "arguments": {
                "self": [],
                "img_hls": [
                    "Image"
                ]
            }
        }
    },
    "meterelf-master/meterelf/_main.py": {
        "main": {
            "name": "main",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "Sequence[str]"
                ]
            }
        }
    },
    "meterelf-master/meterelf/_params.py": {
        "load": {
            "name": "load",
            "location": 67,
            "return": [
                "Params"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "Params.load": {
            "name": "load",
            "location": 19,
            "return": [
                "T"
            ],
            "arguments": {
                "cls": [
                    "Type[T]"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "Params.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_dir": [
                    "str"
                ],
                "data": [
                    "Dict[(Any, Any)]"
                ]
            }
        },
        "_Needle.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[(Any, Any)]"
                ]
            }
        },
        "TypeCheckedGetter.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[(Any, Any)]"
                ]
            }
        },
        "TypeCheckedGetter.text": {
            "name": "text",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "TypeCheckedGetter.boolean": {
            "name": "boolean",
            "location": 97,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "TypeCheckedGetter.integer": {
            "name": "integer",
            "location": 100,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "TypeCheckedGetter.float_num": {
            "name": "float_num",
            "location": 103,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "TypeCheckedGetter.list": {
            "name": "list",
            "location": 106,
            "return": [
                "List[_T]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "tp": [
                    "Type[_T]"
                ],
                "length": [
                    "Optional[int]"
                ]
            }
        },
        "TypeCheckedGetter.filename": {
            "name": "filename",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "TypeCheckedGetter.glob": {
            "name": "glob",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "TypeCheckedGetter.rect": {
            "name": "rect",
            "location": 130,
            "return": [
                "Rect"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "TypeCheckedGetter.size": {
            "name": "size",
            "location": 136,
            "return": [
                "Size"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "TypeCheckedGetter.float_point": {
            "name": "float_point",
            "location": 140,
            "return": [
                "FloatPoint"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "TypeCheckedGetter.hls_color": {
            "name": "hls_color",
            "location": 144,
            "return": [
                "HlsColor"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "TypeCheckedGetter._get_value": {
            "name": "_get_value",
            "location": 151,
            "return": [
                "_T"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "Type[_T]"
                ],
                "name": [
                    "str"
                ]
            }
        }
    },
    "meterelf-master/meterelf/_reading.py": {
        "get_meter_value": {
            "name": "get_meter_value",
            "location": 19,
            "return": [
                "Dict[(str, float)]"
            ],
            "arguments": {
                "imgf": [
                    "ImageFile"
                ]
            }
        },
        "get_needle_points": {
            "name": "get_needle_points",
            "location": 118,
            "return": [
                "Tuple[(List[PointAsArray], Image)]"
            ],
            "arguments": {
                "params": [
                    "_Params"
                ],
                "dials_hls": [
                    "Image"
                ],
                "dial_data": [
                    "DialData"
                ],
                "debug": [
                    "Image"
                ]
            }
        },
        "get_dial_color": {
            "name": "get_dial_color",
            "location": 154,
            "return": [
                "HlsColor"
            ],
            "arguments": {
                "dials_hls": [
                    "Image"
                ],
                "dial_data": [
                    "DialData"
                ]
            }
        },
        "determine_value_by_dial_positions": {
            "name": "determine_value_by_dial_positions",
            "location": 163,
            "return": [
                "float"
            ],
            "arguments": {
                "dial_positions": [
                    "Dict[(str, float)]"
                ]
            }
        }
    },
    "meterelf-master/meterelf/_template_matching.py": {},
    "meterelf-master/meterelf/_types.py": {},
    "meterelf-master/meterelf/_utils.py": {
        "float_point_to_int": {
            "name": "float_point_to_int",
            "location": 14,
            "return": [
                "Point"
            ],
            "arguments": {
                "point": [
                    "FloatPoint"
                ]
            }
        },
        "get_angle_by_vector": {
            "name": "get_angle_by_vector",
            "location": 18,
            "return": [
                "Optional[float]"
            ],
            "arguments": {
                "vector": [
                    "FloatPoint"
                ]
            }
        },
        "find_non_zero": {
            "name": "find_non_zero",
            "location": 45,
            "return": [
                "List[PointAsArray]"
            ],
            "arguments": {
                "image": [
                    "Image"
                ]
            }
        },
        "crop_rect": {
            "name": "crop_rect",
            "location": 52,
            "return": [
                "Image"
            ],
            "arguments": {
                "img": [
                    "Image"
                ],
                "rect": [
                    "Rect"
                ]
            }
        },
        "scale_image": {
            "name": "scale_image",
            "location": 57,
            "return": [
                "Image"
            ],
            "arguments": {
                "img": [
                    "Image"
                ],
                "scale": [
                    "int"
                ]
            }
        },
        "normalize_image": {
            "name": "normalize_image",
            "location": 64,
            "return": [
                "Image"
            ],
            "arguments": {
                "img": [
                    "Image"
                ]
            }
        },
        "denormalize_image": {
            "name": "denormalize_image",
            "location": 68,
            "return": [
                "Image"
            ],
            "arguments": {
                "img": [
                    "Image"
                ]
            }
        },
        "calculate_average_of_norm_images": {
            "name": "calculate_average_of_norm_images",
            "location": 72,
            "return": [
                "Image"
            ],
            "arguments": {
                "images": [
                    "Iterable[Image]"
                ]
            }
        },
        "_image_avg_reducer": {
            "name": "_image_avg_reducer",
            "location": 82,
            "return": [
                "Tuple[(Image, int)]"
            ],
            "arguments": {
                "prev": [
                    "Tuple[(Image, int)]"
                ],
                "img": [
                    "Image"
                ]
            }
        },
        "match_template": {
            "name": "match_template",
            "location": 91,
            "return": [
                "TemplateMatchResult"
            ],
            "arguments": {
                "img": [
                    "Image"
                ],
                "template": [
                    "Image"
                ]
            }
        },
        "convert_to_hls": {
            "name": "convert_to_hls",
            "location": 100,
            "return": [
                "Image"
            ],
            "arguments": {
                "image": [
                    "Image"
                ],
                "hue_shift": [
                    "int"
                ]
            }
        },
        "convert_to_bgr": {
            "name": "convert_to_bgr",
            "location": 105,
            "return": [
                "Image"
            ],
            "arguments": {
                "params": [
                    "_Params"
                ],
                "hls_image": [
                    "Image"
                ]
            }
        },
        "get_mask_by_color": {
            "name": "get_mask_by_color",
            "location": 113,
            "return": [
                "Image"
            ],
            "arguments": {
                "hls_image": [
                    "Image"
                ],
                "color": [
                    "HlsColor"
                ],
                "color_range": [
                    "HlsColor"
                ]
            }
        }
    },
    "meterelf-master/meterelf/__init__.py": {},
    "meterelf-master/meterelf/__main__.py": {},
    "meterelf-master/mypy-stubs/cv2/__init__.py": {
        "imread": {
            "name": "imread",
            "location": 19,
            "return": [
                "Optional[_Array]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "flags": [
                    "_ImreadFlag"
                ]
            }
        },
        "imwrite": {
            "name": "imwrite",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "img": [
                    "_Array"
                ],
                "params": [
                    "Sequence[int]"
                ]
            }
        },
        "imshow": {
            "name": "imshow",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "image": [
                    "_Array"
                ]
            }
        },
        "waitKey": {
            "name": "waitKey",
            "location": 38,
            "return": [
                "int"
            ],
            "arguments": {
                "delay": [
                    "int"
                ]
            }
        },
        "cvtColor": {
            "name": "cvtColor",
            "location": 47,
            "return": [
                "_Array"
            ],
            "arguments": {
                "src": [
                    "_Array"
                ],
                "code": [
                    "_ColorSpace"
                ],
                "dst": [
                    "Optional[_Array]"
                ],
                "dstCn": [
                    "int"
                ]
            }
        },
        "merge": {
            "name": "merge",
            "location": 59,
            "return": [
                "_Array"
            ],
            "arguments": {
                "mv": [
                    "_ArrayOrArrayTuple"
                ],
                "dst": [
                    "Optional[_Array]"
                ]
            }
        },
        "split": {
            "name": "split",
            "location": 63,
            "return": [
                "_ArrayOrArrayTuple"
            ],
            "arguments": {
                "m": [
                    "_Array"
                ],
                "mv": [
                    "_ArrayOrArrayTuple"
                ]
            }
        },
        "mean": {
            "name": "mean",
            "location": 67,
            "return": [
                "_Color"
            ],
            "arguments": {
                "src": [
                    "_Array"
                ],
                "mask": [
                    "Optional[_Array]"
                ]
            }
        },
        "inRange": {
            "name": "inRange",
            "location": 71,
            "return": [
                "_Array"
            ],
            "arguments": {
                "src": [
                    "_Array"
                ],
                "lowerb": [
                    "_Array"
                ],
                "upperb": [
                    "_Array"
                ]
            }
        },
        "matchTemplate": {
            "name": "matchTemplate",
            "location": 79,
            "return": [
                "_Array"
            ],
            "arguments": {
                "image": [
                    "_Array"
                ],
                "templ": [
                    "_Array"
                ],
                "method": [
                    "_TemplateMatchMethod"
                ],
                "result": [
                    "Optional[_Array]"
                ]
            }
        },
        "minMaxLoc": {
            "name": "minMaxLoc",
            "location": 88,
            "return": [
                "Tuple[(float, float, _Point, _Point)]"
            ],
            "arguments": {
                "src": [
                    "_Array"
                ],
                "mask": [
                    "Optional[_Array]"
                ]
            }
        },
        "findContours": {
            "name": "findContours",
            "location": 108,
            "return": [
                "Tuple[(_Array, List[_Array], _Array)]"
            ],
            "arguments": {
                "image": [
                    "_Array"
                ],
                "mode": [
                    "_FindContoursMode"
                ],
                "method": [
                    "_FindContoursMethod"
                ],
                "contours": [
                    "Optional[List[_Array]]"
                ],
                "hierarchy": [
                    "_Array"
                ],
                "offset": [
                    "_Point"
                ]
            }
        },
        "contourArea": {
            "name": "contourArea",
            "location": 119,
            "return": [
                "float"
            ],
            "arguments": {
                "contour": [
                    "_Array"
                ],
                "oriented": [
                    "bool"
                ]
            }
        },
        "drawContours": {
            "name": "drawContours",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "image": [
                    "_Array"
                ],
                "contours": [
                    "List[_Array]"
                ],
                "contourIdx": [
                    "int"
                ],
                "color": [
                    "_Color"
                ],
                "thickness": [
                    "int"
                ],
                "lineType": [
                    "int"
                ],
                "hierarchy": [
                    "_Array"
                ],
                "maxLevel": [
                    "int"
                ],
                "offset": [
                    "_Point"
                ]
            }
        },
        "fitEllipse": {
            "name": "fitEllipse",
            "location": 137,
            "return": [
                "_RotatedRect"
            ],
            "arguments": {
                "points": [
                    "_Array"
                ]
            }
        },
        "warpAffine": {
            "name": "warpAffine",
            "location": 158,
            "return": [
                "_Array"
            ],
            "arguments": {
                "src": [
                    "_Array"
                ],
                "M": [
                    "_Array"
                ],
                "dsize": [
                    "_Size"
                ],
                "dst": [
                    "Optional[_Array]"
                ],
                "flags": [
                    "_WarpAffineFlag"
                ],
                "borderMode": [
                    "_BorderType"
                ],
                "borderValue": [
                    "_Color"
                ]
            }
        },
        "bitwise_and": {
            "name": "bitwise_and",
            "location": 170,
            "return": [
                "_Array"
            ],
            "arguments": {
                "src1": [
                    "_Array"
                ],
                "src2": [
                    "_Array"
                ],
                "dst": [
                    "Optional[_Array]"
                ],
                "mask": [
                    "Optional[_Array]"
                ]
            }
        },
        "bitwise_not": {
            "name": "bitwise_not",
            "location": 179,
            "return": [
                "_Array"
            ],
            "arguments": {
                "src": [
                    "_Array"
                ],
                "dst": [
                    "Optional[_Array]"
                ],
                "mask": [
                    "Optional[_Array]"
                ]
            }
        },
        "bitwise_or": {
            "name": "bitwise_or",
            "location": 187,
            "return": [
                "_Array"
            ],
            "arguments": {
                "src1": [
                    "_Array"
                ],
                "src2": [
                    "_Array"
                ],
                "dst": [
                    "Optional[_Array]"
                ],
                "mask": [
                    "Optional[_Array]"
                ]
            }
        },
        "addWeighted": {
            "name": "addWeighted",
            "location": 196,
            "return": [
                "_Array"
            ],
            "arguments": {
                "src1": [
                    "_Array"
                ],
                "alpha": [
                    "float"
                ],
                "src2": [
                    "_Array"
                ],
                "beta": [
                    "float"
                ],
                "gamma": [
                    "float"
                ],
                "dst": [
                    "Optional[_Array]"
                ],
                "dtype": [
                    "int"
                ]
            }
        },
        "circle": {
            "name": "circle",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "img": [
                    "_Array"
                ],
                "center": [
                    "_Point"
                ],
                "radius": [
                    "int"
                ],
                "color": [
                    "_Color"
                ],
                "thickness": [
                    "int"
                ],
                "lineType": [
                    "int"
                ],
                "shift": [
                    "int"
                ]
            }
        },
        "floodFill": {
            "name": "floodFill",
            "location": 220,
            "return": [
                "Tuple[(int, _Array, _Array, _Rect)]"
            ],
            "arguments": {
                "image": [
                    "_Array"
                ],
                "mask": [
                    "_Array"
                ],
                "seedPoint": [
                    "_Point"
                ],
                "newVal": [
                    "_Color"
                ],
                "loDiff": [
                    "_Color"
                ],
                "upDiff": [
                    "_Color"
                ],
                "flags": [
                    "int"
                ]
            }
        },
        "resize": {
            "name": "resize",
            "location": 232,
            "return": [
                "_Array"
            ],
            "arguments": {
                "src": [
                    "_Array"
                ],
                "dsize": [
                    "_Size"
                ],
                "dst": [
                    "Optional[_Array]"
                ],
                "fx": [
                    "float"
                ],
                "fy": [
                    "float"
                ],
                "interpolation": [
                    "_Interpolation"
                ]
            }
        },
        "findNonZero": {
            "name": "findNonZero",
            "location": 243,
            "return": [
                "Optional[_Array]"
            ],
            "arguments": {
                "src": [
                    "_Array"
                ],
                "idx": [
                    "Optional[_Array]"
                ]
            }
        },
        "dilate": {
            "name": "dilate",
            "location": 247,
            "return": [
                "_Array"
            ],
            "arguments": {
                "src": [
                    "_Array"
                ],
                "kernel": [
                    "_Array"
                ],
                "dst": [
                    "Optional[_Array]"
                ],
                "anchor": [
                    "_Point"
                ],
                "iterations": [
                    "int"
                ],
                "borderType": [
                    "_BorderType"
                ],
                "borderValue": [
                    "_Color"
                ]
            }
        },
        "erode": {
            "name": "erode",
            "location": 259,
            "return": [
                "_Array"
            ],
            "arguments": {
                "src": [
                    "_Array"
                ],
                "kernel": [
                    "_Array"
                ],
                "dst": [
                    "Optional[_Array]"
                ],
                "anchor": [
                    "_Point"
                ],
                "iterations": [
                    "int"
                ],
                "borderType": [
                    "_BorderType"
                ],
                "borderValue": [
                    "_Color"
                ]
            }
        }
    },
    "meterelf-master/tests/test_main.py": {
        "test_import_only": {
            "name": "test_import_only",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_run_as_script": {
            "name": "test_run_as_script",
            "location": 19,
            "return": [],
            "arguments": {}
        }
    },
    "meterelf-master/tests/test_meterelf.py": {
        "setup_module": {
            "name": "setup_module",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "teardown_module": {
            "name": "teardown_module",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_main_with_all_sample_images": {
            "name": "test_main_with_all_sample_images",
            "location": 40,
            "return": [],
            "arguments": {
                "capsys": [],
                "sample_dir": []
            }
        },
        "to_float": {
            "name": "to_float",
            "location": 99,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "cwd_as": {
            "name": "cwd_as",
            "location": 109,
            "return": [],
            "arguments": {
                "directory": []
            }
        },
        "test_find_dial_centers": {
            "name": "test_find_dial_centers",
            "location": 119,
            "return": [],
            "arguments": {
                "mode": []
            }
        },
        "test_raises_on_debug_mode": {
            "name": "test_raises_on_debug_mode",
            "location": 151,
            "return": [],
            "arguments": {
                "capsys": [],
                "filename": []
            }
        },
        "test_output_in_debug_mode": {
            "name": "test_output_in_debug_mode",
            "location": 170,
            "return": [],
            "arguments": {
                "capsys": []
            }
        }
    }
}
{
    "misc-exp-master/tasks.py": {
        "precommit": {
            "name": "precommit",
            "location": 25,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "test": {
            "name": "test",
            "location": 32,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "docs": {
            "name": "docs",
            "location": 37,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "format": {
            "name": "format",
            "location": 56,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "release": {
            "name": "release",
            "location": 61,
            "return": [],
            "arguments": {
                "c": [],
                "yes": []
            }
        },
        "run": {
            "name": "run",
            "location": 86,
            "return": [],
            "arguments": {
                "c": []
            }
        }
    },
    "misc-exp-master/20170813-KeywordDetection/chmp-app-kwdetect/setup.py": {},
    "misc-exp-master/20170813-KeywordDetection/chmp-app-kwdetect/src/chmp/app/kwdetect/aio.py": {
        "predict_label": {
            "name": "predict_label",
            "location": 41,
            "return": [],
            "arguments": {
                "model": [],
                "sample": []
            }
        },
        "save_sample": {
            "name": "save_sample",
            "location": 53,
            "return": [],
            "arguments": {
                "sample_target": [],
                "sample": [],
                "samplerate": []
            }
        },
        "record.callback": {
            "name": "callback",
            "location": 68,
            "return": [],
            "arguments": {
                "indata": [],
                "_outdata": [],
                "_frames": [],
                "_time": [],
                "_status": []
            }
        }
    },
    "misc-exp-master/20170813-KeywordDetection/chmp-app-kwdetect/src/chmp/app/kwdetect/model.py": {
        "batch_transform_samples": {
            "name": "batch_transform_samples",
            "location": 17,
            "return": [],
            "arguments": {
                "samples": []
            }
        },
        "transform_x": {
            "name": "transform_x",
            "location": 30,
            "return": [],
            "arguments": {
                "desc": []
            }
        },
        "transform_y": {
            "name": "transform_y",
            "location": 35,
            "return": [],
            "arguments": {
                "desc": []
            }
        },
        "batch_transform_x": {
            "name": "batch_transform_x",
            "location": 39,
            "return": [],
            "arguments": {
                "descs": []
            }
        },
        "batch_transform_y": {
            "name": "batch_transform_y",
            "location": 49,
            "return": [],
            "arguments": {
                "descs": []
            }
        },
        "batch_transform_xy": {
            "name": "batch_transform_xy",
            "location": 54,
            "return": [],
            "arguments": {
                "desc": []
            }
        },
        "extract_single_block": {
            "name": "extract_single_block",
            "location": 58,
            "return": [],
            "arguments": {
                "sample": [],
                "block": []
            }
        },
        "build_cnn_stack": {
            "name": "build_cnn_stack",
            "location": 113,
            "return": [],
            "arguments": {
                "n_input": [],
                "n_output": []
            }
        },
        "pack_conv_output": {
            "name": "pack_conv_output",
            "location": 142,
            "return": [],
            "arguments": {
                "inputs": [],
                "lengths": [],
                "sorted": []
            }
        },
        "pad_sequences": {
            "name": "pad_sequences",
            "location": 163,
            "return": [],
            "arguments": {}
        },
        "_pad_sequences_determine_max_lengths": {
            "name": "_pad_sequences_determine_max_lengths",
            "location": 194,
            "return": [],
            "arguments": {
                "sequence_batches": []
            }
        },
        "_pad_sequences_determine_tail_shapes": {
            "name": "_pad_sequences_determine_tail_shapes",
            "location": 202,
            "return": [],
            "arguments": {
                "sequence_batches": []
            }
        },
        "_pad_sequences_determine_batch_size": {
            "name": "_pad_sequences_determine_batch_size",
            "location": 218,
            "return": [],
            "arguments": {
                "sequence_batches": []
            }
        },
        "ensure_tuple": {
            "name": "ensure_tuple",
            "location": 229,
            "return": [],
            "arguments": {
                "obj": [],
                "length": []
            }
        },
        "get_number_of_samples": {
            "name": "get_number_of_samples",
            "location": 236,
            "return": [],
            "arguments": {
                "values": []
            }
        },
        "KeywordModel.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "n_features": [],
                "n_classes": [],
                "kernel_size": [],
                "dilation_rate": [],
                "n_hidden": [],
                "n_layers": []
            }
        },
        "KeywordModel.forward": {
            "name": "forward",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "lengths": []
            }
        },
        "GRUPooling.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "in_features": [],
                "out_features": [],
                "n_layers": []
            }
        },
        "GRUPooling.forward": {
            "name": "forward",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "seq": []
            }
        }
    },
    "misc-exp-master/20170813-KeywordDetection/chmp-app-kwdetect/src/chmp/app/kwdetect/segmentation.py": {
        "compute_speechiness": {
            "name": "compute_speechiness",
            "location": 72,
            "return": [],
            "arguments": {
                "sample": [],
                "samplerate": [],
                "in_speech": []
            }
        },
        "_compute_speechiness": {
            "name": "_compute_speechiness",
            "location": 110,
            "return": [],
            "arguments": {
                "speechiness": [],
                "threshold": [],
                "advance": [],
                "out": [],
                "in_speech": []
            }
        },
        "StreamProcessor.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "queue": [],
                "samplerate": []
            }
        },
        "StreamProcessor.process": {
            "name": "process",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "indata": []
            }
        },
        "StreamProcessor.finish": {
            "name": "finish",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "misc-exp-master/20170813-KeywordDetection/chmp-app-kwdetect/src/chmp/app/kwdetect/test_model.py": {
        "test_keyword_model_batch_shape": {
            "name": "test_keyword_model_batch_shape",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_keyword_model_sorting_works": {
            "name": "test_keyword_model_sorting_works",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "get_params_with_grad": {
            "name": "get_params_with_grad",
            "location": 42,
            "return": [],
            "arguments": {
                "module": []
            }
        }
    },
    "misc-exp-master/20170813-KeywordDetection/chmp-app-kwdetect/src/chmp/app/kwdetect/util.py": {
        "play_file": {
            "name": "play_file",
            "location": 26,
            "return": [],
            "arguments": {
                "fname": []
            }
        },
        "load_sample": {
            "name": "load_sample",
            "location": 31,
            "return": [],
            "arguments": {
                "fname": []
            }
        },
        "load_optional_model": {
            "name": "load_optional_model",
            "location": 40,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "unique_filename": {
            "name": "unique_filename",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "fit": {
            "name": "fit",
            "location": 57,
            "return": [],
            "arguments": {
                "s": [],
                "l": []
            }
        }
    },
    "misc-exp-master/20170813-KeywordDetection/chmp-app-kwdetect/src/chmp/app/kwdetect/__init__.py": {},
    "misc-exp-master/20170813-KeywordDetection/chmp-app-kwdetect/src/chmp/app/kwdetect/__main__.py": {
        "main": {
            "name": "main",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "detect": {
            "name": "detect",
            "location": 26,
            "return": [],
            "arguments": {
                "target": [],
                "model": []
            }
        },
        "label": {
            "name": "label",
            "location": 47,
            "return": [],
            "arguments": {
                "path": [],
                "labels": []
            }
        },
        "_label_example": {
            "name": "_label_example",
            "location": 78,
            "return": [],
            "arguments": {
                "fname": [],
                "label_decoding": []
            }
        },
        "_get_label_from_user": {
            "name": "_get_label_from_user",
            "location": 100,
            "return": [],
            "arguments": {
                "label_decoding": []
            }
        }
    },
    "misc-exp-master/20180107-Causality/data.py": {
        "read_rhc_df": {
            "name": "read_rhc_df",
            "location": 11,
            "return": [],
            "arguments": {
                "fname": [],
                "download": []
            }
        },
        "ensure_rhc_data_exists": {
            "name": "ensure_rhc_data_exists",
            "location": 37,
            "return": [],
            "arguments": {
                "fname": []
            }
        },
        "normalize_rhc_df": {
            "name": "normalize_rhc_df",
            "location": 53,
            "return": [],
            "arguments": {
                "df": [],
                "meta": []
            }
        },
        "read_proximity_df": {
            "name": "read_proximity_df",
            "location": 85,
            "return": [],
            "arguments": {
                "fname": []
            }
        }
    },
    "misc-exp-master/20180107-Causality/chmp-app-causality/setup.py": {},
    "misc-exp-master/20180107-Causality/chmp-app-causality/src/chmp/app/causality/matching.py": {
        "psmatch": {
            "name": "psmatch",
            "location": 5,
            "return": [],
            "arguments": {
                "ps": [],
                "treatment": []
            }
        },
        "match": {
            "name": "match",
            "location": 10,
            "return": [],
            "arguments": {
                "df": []
            }
        }
    },
    "misc-exp-master/20180107-Causality/chmp-app-causality/src/chmp/app/causality/tabular.py": {
        "prob": {
            "name": "prob",
            "location": 1,
            "return": [],
            "arguments": {
                "counts": [],
                "variables": [],
                "condition": [],
                "transform": []
            }
        }
    },
    "misc-exp-master/20180107-Causality/chmp-app-causality/src/chmp/app/causality/test_tabular.py": {
        "test_prob__conditional_transform": {
            "name": "test_prob__conditional_transform",
            "location": 8,
            "return": [],
            "arguments": {}
        }
    },
    "misc-exp-master/20180107-Causality/chmp-app-causality/src/chmp/app/causality/__init__.py": {},
    "misc-exp-master/20180107-Causality/chmp-app-causality/src/chmp/app/causality/dataset/census.py": {
        "create": {
            "name": "create",
            "location": 73,
            "return": [],
            "arguments": {
                "data_path": []
            }
        },
        "generate_census_data": {
            "name": "generate_census_data",
            "location": 106,
            "return": [],
            "arguments": {
                "train_data": [],
                "test_data": []
            }
        },
        "assemble_census_policy_pipeline": {
            "name": "assemble_census_policy_pipeline",
            "location": 159,
            "return": [],
            "arguments": {
                "C": []
            }
        },
        "sample_bernoulli": {
            "name": "sample_bernoulli",
            "location": 188,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "create.rename": {
            "name": "rename",
            "location": 74,
            "return": [],
            "arguments": {
                "df": []
            }
        }
    },
    "misc-exp-master/20180107-Causality/chmp-app-causality/src/chmp/app/causality/dataset/customer.py": {
        "create": {
            "name": "create",
            "location": 13,
            "return": [],
            "arguments": {
                "data_path": []
            }
        },
        "generate_customer_data": {
            "name": "generate_customer_data",
            "location": 25,
            "return": [],
            "arguments": {
                "n_samples": [],
                "n_occupations": [],
                "seed": [],
                "p_random": [],
                "train_ratio": []
            }
        },
        "reject": {
            "name": "reject",
            "location": 137,
            "return": [],
            "arguments": {
                "proposal": [],
                "accept": [],
                "max_iter": []
            }
        },
        "sample_bernoulli": {
            "name": "sample_bernoulli",
            "location": 156,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "sigmoid": {
            "name": "sigmoid",
            "location": 161,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "logit": {
            "name": "logit",
            "location": 166,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "sample_categorical": {
            "name": "sample_categorical",
            "location": 171,
            "return": [],
            "arguments": {
                "n_categories": [],
                "size": [],
                "alpha": []
            }
        },
        "spline": {
            "name": "spline",
            "location": 176,
            "return": [],
            "arguments": {
                "w": [],
                "x": []
            }
        },
        "sample_cauchy": {
            "name": "sample_cauchy",
            "location": 189,
            "return": [],
            "arguments": {
                "loc": [],
                "scale": [],
                "size": []
            }
        },
        "normalize": {
            "name": "normalize",
            "location": 194,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "random_cat_swaps": {
            "name": "random_cat_swaps",
            "location": 198,
            "return": [],
            "arguments": {
                "x": [],
                "eps": []
            }
        }
    },
    "misc-exp-master/20180107-Causality/chmp-app-causality/src/chmp/app/causality/dataset/__init__.py": {},
    "misc-exp-master/20180107-Causality/chmp-app-causality/src/chmp/app/causality/model/evaluation.py": {
        "evaluate": {
            "name": "evaluate",
            "location": 11,
            "return": [],
            "arguments": {
                "est": [],
                "df": [],
                "reward_column": [],
                "action_column": [],
                "value_columns": [],
                "propensity_column": [],
                "label": []
            }
        },
        "_compute_metrics": {
            "name": "_compute_metrics",
            "location": 51,
            "return": [],
            "arguments": {
                "keywords": []
            }
        },
        "compute_mean_observed_reward": {
            "name": "compute_mean_observed_reward",
            "location": 84,
            "return": [],
            "arguments": {
                "reward": []
            }
        },
        "compute_direct_method_reward": {
            "name": "compute_direct_method_reward",
            "location": 88,
            "return": [],
            "arguments": {
                "policy_p": [],
                "reward": []
            }
        },
        "compute_value_mad": {
            "name": "compute_value_mad",
            "location": 93,
            "return": [],
            "arguments": {
                "value": [],
                "true_value": []
            }
        },
        "compute_value_plots": {
            "name": "compute_value_plots",
            "location": 102,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "compute_true_reward": {
            "name": "compute_true_reward",
            "location": 113,
            "return": [],
            "arguments": {
                "action": [],
                "true_value": []
            }
        },
        "compute_ips_rewards": {
            "name": "compute_ips_rewards",
            "location": 124,
            "return": [],
            "arguments": {
                "reward": [],
                "policy_p": [],
                "propensity": []
            }
        },
        "compute_doubly_robust_reward": {
            "name": "compute_doubly_robust_reward",
            "location": 133,
            "return": [],
            "arguments": {
                "action": [],
                "reward": [],
                "propensity": [],
                "observed_action": [],
                "value": [],
                "action_values": [],
                "policy_p": []
            }
        },
        "canned_hist2d": {
            "name": "canned_hist2d",
            "location": 149,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "CannedHist2dPlot.__init__": {
            "name": "__init__",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "edges_x": [],
                "edges_y": [],
                "data": []
            }
        },
        "CannedHist2dPlot.plot": {
            "name": "plot",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "misc-exp-master/20180107-Causality/chmp-app-causality/src/chmp/app/causality/model/models.py": {
        "build_standard_sklearn_classifier": {
            "name": "build_standard_sklearn_classifier",
            "location": 18,
            "return": [],
            "arguments": {
                "features": []
            }
        },
        "get_weight_keyword": {
            "name": "get_weight_keyword",
            "location": 34,
            "return": [],
            "arguments": {
                "est": []
            }
        },
        "binary_offset_tree_transform": {
            "name": "binary_offset_tree_transform",
            "location": 42,
            "return": [],
            "arguments": {
                "reward": [],
                "action": [],
                "action_propensity": []
            }
        },
        "RegressionPolicy.predict_value": {
            "name": "predict_value",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "RegressionPolicy.predict_action": {
            "name": "predict_action",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "RegressionPolicy.predict": {
            "name": "predict",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "BinaryOutcomeRegressionPolicy.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "est": [],
                "action_column": [],
                "target_column": []
            }
        },
        "BinaryOutcomeRegressionPolicy.fit": {
            "name": "fit",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "BinaryOutcomeRegressionPolicy.predict_value": {
            "name": "predict_value",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "DirectClassifierPolicy.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "est": [],
                "action_column": [],
                "reward_column": [],
                "propensity_column": [],
                "sample_weight_keyword": [],
                "clipping_value": []
            }
        },
        "DirectClassifierPolicy.fit": {
            "name": "fit",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "DirectClassifierPolicy.predict": {
            "name": "predict",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "DoublyRobustClassifierPolicy.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "value_est": [],
                "action_est": [],
                "action_values": [],
                "action_column": [],
                "reward_column": [],
                "propensity_column": [],
                "sample_weight_keyword": [],
                "clipping_value": []
            }
        },
        "DoublyRobustClassifierPolicy.fit": {
            "name": "fit",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "DoublyRobustClassifierPolicy.predict": {
            "name": "predict",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "df": []
            }
        }
    },
    "misc-exp-master/20180107-Causality/chmp-app-causality/src/chmp/app/causality/model/util.py": {
        "action_p_to_propensity": {
            "name": "action_p_to_propensity",
            "location": 8,
            "return": [],
            "arguments": {
                "action": [],
                "action_p": []
            }
        },
        "RegressingBinaryClassifier.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "est": []
            }
        },
        "RegressingBinaryClassifier.fit": {
            "name": "fit",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "RegressingBinaryClassifier.predict": {
            "name": "predict",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "CategoricalMeanTargetEncoder.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "columns": [],
                "pseudo_count": []
            }
        },
        "CategoricalMeanTargetEncoder.fit": {
            "name": "fit",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "CategoricalMeanTargetEncoder.transform": {
            "name": "transform",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "CategoricalIndexEncoder.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "columns": [],
                "pseudo_count": []
            }
        },
        "CategoricalIndexEncoder.fit": {
            "name": "fit",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "CategoricalIndexEncoder.transform": {
            "name": "transform",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        }
    },
    "misc-exp-master/20180107-Causality/chmp-app-causality/src/chmp/app/causality/model/__init__.py": {},
    "misc-exp-master/20181026-TestingInJupyter/setup.py": {},
    "misc-exp-master/20181026-TestingInJupyter/tasks.py": {
        "precommit": {
            "name": "precommit",
            "location": 5,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "format": {
            "name": "format",
            "location": 11,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "test": {
            "name": "test",
            "location": 16,
            "return": [],
            "arguments": {
                "c": []
            }
        }
    },
    "misc-exp-master/20181026-TestingInJupyter/src/keep_odds.py": {
        "keep_odds": {
            "name": "keep_odds",
            "location": 1,
            "return": [],
            "arguments": {
                "iterable": []
            }
        }
    },
    "misc-exp-master/20181026-TestingInJupyter/tests/test_keep_odds.py": {
        "test_keep_odds": {
            "name": "test_keep_odds",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "misc-exp-master/chmp/setup.py": {},
    "misc-exp-master/chmp/src/chmp/bayes/__init__.py": {
        "build": {
            "name": "build",
            "location": 180,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "_lookup_dist": {
            "name": "_lookup_dist",
            "location": 200,
            "return": [],
            "arguments": {
                "scope": [],
                "k": []
            }
        },
        "sample_prior": {
            "name": "sample_prior",
            "location": 204,
            "return": [],
            "arguments": {
                "scope": [],
                "key": []
            }
        },
        "sample_latent": {
            "name": "sample_latent",
            "location": 208,
            "return": [],
            "arguments": {
                "scope": [],
                "key": []
            }
        },
        "sample_latent_no_grad": {
            "name": "sample_latent_no_grad",
            "location": 212,
            "return": [],
            "arguments": {
                "scope": [],
                "key": []
            }
        },
        "average_latent": {
            "name": "average_latent",
            "location": 218,
            "return": [],
            "arguments": {
                "scope": [],
                "key": []
            }
        },
        "build_reparam_loss": {
            "name": "build_reparam_loss",
            "location": 222,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "build_score_loss": {
            "name": "build_score_loss",
            "location": 233,
            "return": [],
            "arguments": {
                "model": [],
                "var_list": []
            }
        },
        "relax_bernoulli": {
            "name": "relax_bernoulli",
            "location": 256,
            "return": [],
            "arguments": {
                "p": [],
                "temperature": []
            }
        },
        "relax_categorical": {
            "name": "relax_categorical",
            "location": 287,
            "return": [],
            "arguments": {
                "p": [],
                "temperature": []
            }
        },
        "build_relax_loss": {
            "name": "build_relax_loss",
            "location": 343,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "relax_latent_strategy": {
            "name": "relax_latent_strategy",
            "location": 388,
            "return": [],
            "arguments": {
                "scope": [],
                "key": []
            }
        },
        "raise_latent_strategy": {
            "name": "raise_latent_strategy",
            "location": 416,
            "return": [],
            "arguments": {
                "scope": [],
                "key": []
            }
        },
        "_build_kl_loss": {
            "name": "_build_kl_loss",
            "location": 421,
            "return": [],
            "arguments": {
                "scope": []
            }
        },
        "NoOpContext.__enter__": {
            "name": "__enter__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NoOpContext.__exit__": {
            "name": "__exit__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "exc": [],
                "exc_type": [],
                "traceback": []
            }
        },
        "Model.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.observe": {
            "name": "observe",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "Model.define": {
            "name": "define",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "Model.inference": {
            "name": "inference",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "Model.__getitem__": {
            "name": "__getitem__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Model.get": {
            "name": "get",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.build": {
            "name": "build",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "scope": [],
                "latent_strategy": [],
                "ensure_loss": []
            }
        },
        "Model._ensure_observed": {
            "name": "_ensure_observed",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DictWrapper.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "d": []
            }
        },
        "DictWrapper.__setattr__": {
            "name": "__setattr__",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "k": [],
                "v": []
            }
        },
        "DictWrapper.__getattr__": {
            "name": "__getattr__",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "Scope.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "scope": [],
                "latent_strategy": []
            }
        },
        "Scope.__getattr__": {
            "name": "__getattr__",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Scope.get": {
            "name": "get",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scope.p": {
            "name": "p",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scope.q": {
            "name": "q",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "misc-exp-master/chmp/src/chmp/distributed/test_init.py": {
        "params": {
            "name": "params",
            "location": 142,
            "return": [],
            "arguments": {
                "spec": [],
                "m": []
            }
        },
        "test_input_outputs": {
            "name": "test_input_outputs",
            "location": 149,
            "return": [],
            "arguments": {
                "func": [],
                "arg": []
            }
        }
    },
    "misc-exp-master/chmp/src/chmp/distributed/__init__.py": {
        "apply": {
            "name": "apply",
            "location": 33,
            "return": [],
            "arguments": {
                "transformation": [],
                "obj": []
            }
        },
        "eq": {
            "name": "eq",
            "location": 60,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "a": {
            "name": "a",
            "location": 67,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "_raise": {
            "name": "_raise",
            "location": 71,
            "return": [],
            "arguments": {
                "exc": []
            }
        },
        "_map_items": {
            "name": "_map_items",
            "location": 156,
            "return": [],
            "arguments": {
                "impl": []
            }
        },
        "_filter_items": {
            "name": "_filter_items",
            "location": 163,
            "return": [],
            "arguments": {
                "impl": []
            }
        },
        "_toolz_item_filter": {
            "name": "_toolz_item_filter",
            "location": 170,
            "return": [],
            "arguments": {
                "_": [],
                "func": [],
                "obj": []
            }
        },
        "_toolz_join": {
            "name": "_toolz_join",
            "location": 174,
            "return": [],
            "arguments": {
                "_": [],
                "func": [],
                "obj": []
            }
        },
        "_call": {
            "name": "_call",
            "location": 182,
            "return": [],
            "arguments": {
                "impl": [],
                "f": []
            }
        },
        "mean": {
            "name": "mean",
            "location": 247,
            "return": [],
            "arguments": {
                "l": []
            }
        },
        "var": {
            "name": "var",
            "location": 265,
            "return": [],
            "arguments": {}
        },
        "std": {
            "name": "std",
            "location": 272,
            "return": [],
            "arguments": {}
        },
        "_db_chained": {
            "name": "_db_chained",
            "location": 355,
            "return": [],
            "arguments": {
                "rules": [],
                "chain": [],
                "obj": []
            }
        },
        "RuleSet.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "rules": []
            }
        },
        "RuleSet.add": {
            "name": "add",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "match": [],
                "apply": [],
                "help": []
            }
        },
        "RuleSet.__or__": {
            "name": "__or__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RuleSet.__call__": {
            "name": "__call__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_raise.impl": {
            "name": "impl",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "DaskDict.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "items": []
            }
        },
        "DaskDict.items": {
            "name": "items",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DaskDict.keys": {
            "name": "keys",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DaskDict.values": {
            "name": "values",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DaskDict.copy": {
            "name": "copy",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DaskDict.compute": {
            "name": "compute",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DaskCounter._call": {
            "name": "_call",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "DaskCounter.elements": {
            "name": "elements",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DaskCounter.most_common": {
            "name": "most_common",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "_toolz_join.impl": {
            "name": "impl",
            "location": 176,
            "return": [],
            "arguments": {
                "leftkey": [],
                "leftseq": [],
                "rightkey": []
            }
        },
        "_var.__init__": {
            "name": "__init__",
            "location": 280,
            "return": [],
            "arguments": {
                "self": [],
                "ddof": []
            }
        },
        "_var.__call__": {
            "name": "__call__",
            "location": 283,
            "return": [],
            "arguments": {
                "self": [],
                "seq": []
            }
        },
        "_std.__init__": {
            "name": "__init__",
            "location": 295,
            "return": [],
            "arguments": {
                "self": [],
                "ddof": []
            }
        },
        "_std.__call__": {
            "name": "__call__",
            "location": 298,
            "return": [],
            "arguments": {
                "self": [],
                "seq": []
            }
        },
        "chained.__init__": {
            "name": "__init__",
            "location": 339,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "chained.__call__": {
            "name": "__call__",
            "location": 342,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "chained.__repr__": {
            "name": "__repr__",
            "location": 348,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "chained.__iter__": {
            "name": "__iter__",
            "location": 351,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "repartition.__init__": {
            "name": "__init__",
            "location": 369,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "repartition.__call__": {
            "name": "__call__",
            "location": 372,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "DaskCounter._call.impl": {
            "name": "impl",
            "location": 104,
            "return": [],
            "arguments": {
                "items": []
            }
        }
    },
    "misc-exp-master/chmp/src/chmp/ds/aio.py": {},
    "misc-exp-master/chmp/src/chmp/ds/test_aio.py": {},
    "misc-exp-master/chmp/src/chmp/ds/test_background.py": {
        "test_bgloop": {
            "name": "test_bgloop",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_fast_product": {
            "name": "test_fast_product",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_bgloop._": {
            "name": "_",
            "location": 10,
            "return": [],
            "arguments": {
                "_": [],
                "a": [],
                "b": []
            }
        }
    },
    "misc-exp-master/chmp/src/chmp/ds/test_init.py": {
        "test_object": {
            "name": "test_object",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_timed": {
            "name": "test_timed",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "test_singledispatch_on": {
            "name": "test_singledispatch_on",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_piecewise_linear": {
            "name": "test_piecewise_linear",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "test_piecewise_logarithmic": {
            "name": "test_piecewise_logarithmic",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "test_szip": {
            "name": "test_szip",
            "location": 94,
            "return": [],
            "arguments": {}
        },
        "test_szip_with_schema": {
            "name": "test_szip_with_schema",
            "location": 100,
            "return": [],
            "arguments": {}
        },
        "test_json_nump_default__roundtrip": {
            "name": "test_json_nump_default__roundtrip",
            "location": 132,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_copy_structure_examples": {
            "name": "test_copy_structure_examples",
            "location": 147,
            "return": [],
            "arguments": {
                "input": [],
                "expected": []
            }
        },
        "test_copy_structure__keep_structure": {
            "name": "test_copy_structure__keep_structure",
            "location": 152,
            "return": [],
            "arguments": {
                "input": []
            }
        },
        "test_copy_structure__mismatch": {
            "name": "test_copy_structure__mismatch",
            "location": 160,
            "return": [],
            "arguments": {
                "template": [],
                "obj": []
            }
        },
        "test_update_kwargs_signature__classes": {
            "name": "test_update_kwargs_signature__classes",
            "location": 165,
            "return": [],
            "arguments": {}
        },
        "test_singledispatch_on.foo": {
            "name": "foo",
            "location": 43,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_singledispatch_on.bar": {
            "name": "bar",
            "location": 47,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_update_kwargs_signature__classes.Bar.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "d": [],
                "e": [],
                "f": []
            }
        },
        "test_update_kwargs_signature__classes.Baz.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "g": [],
                "h": []
            }
        },
        "test_update_kwargs_signature__classes.Foo.__init__": {
            "name": "__init__",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": [],
                "c": []
            }
        }
    },
    "misc-exp-master/chmp/src/chmp/ds/test_loop.py": {
        "test_tdformat": {
            "name": "test_tdformat",
            "location": 16,
            "return": [],
            "arguments": {
                "time_delta": [],
                "formatted": []
            }
        },
        "test_bar": {
            "name": "test_bar",
            "location": 37,
            "return": [],
            "arguments": {
                "progress": [],
                "result": []
            }
        },
        "test_loop": {
            "name": "test_loop",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_loop_no_length": {
            "name": "test_loop_no_length",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "test_loop_exception": {
            "name": "test_loop_exception",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "loop_test": {
            "name": "loop_test",
            "location": 75,
            "return": [],
            "arguments": {
                "iterable": [],
                "action": []
            }
        },
        "test_single": {
            "name": "test_single",
            "location": 105,
            "return": [],
            "arguments": {}
        },
        "test_nested": {
            "name": "test_nested",
            "location": 120,
            "return": [],
            "arguments": {}
        },
        "test_nested_nested": {
            "name": "test_nested_nested",
            "location": 136,
            "return": [],
            "arguments": {}
        },
        "test_loop_exception.raise_": {
            "name": "raise_",
            "location": 69,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "MockTime.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockTime.__call__": {
            "name": "__call__",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "misc-exp-master/chmp/src/chmp/ds/test_pandas.py": {
        "callargs": {
            "name": "callargs",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_example_int": {
            "name": "test_example_int",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "test_example_string__other": {
            "name": "test_example_string__other",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "test_example_string__grouping": {
            "name": "test_example_string__grouping",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "test_find_high_frequency_categories_examples": {
            "name": "test_find_high_frequency_categories_examples",
            "location": 66,
            "return": [],
            "arguments": {
                "spec": []
            }
        },
        "test_fix_categories_example": {
            "name": "test_fix_categories_example",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "test_fix_categories_missing_other": {
            "name": "test_fix_categories_missing_other",
            "location": 82,
            "return": [],
            "arguments": {}
        },
        "test_find_high_frequency_categories": {
            "name": "test_find_high_frequency_categories",
            "location": 91,
            "return": [],
            "arguments": {}
        },
        "test_find_high_frequency_categories_n_max": {
            "name": "test_find_high_frequency_categories_n_max",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "test_read_markdown_list__example": {
            "name": "test_read_markdown_list__example",
            "location": 113,
            "return": [],
            "arguments": {}
        },
        "test_read_markdown_list__missing_values": {
            "name": "test_read_markdown_list__missing_values",
            "location": 143,
            "return": [],
            "arguments": {}
        }
    },
    "misc-exp-master/chmp/src/chmp/ds/test_plots.py": {
        "test_mpl_set_xscale": {
            "name": "test_mpl_set_xscale",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_mpl_set_yscale": {
            "name": "test_mpl_set_yscale",
            "location": 15,
            "return": [],
            "arguments": {}
        }
    },
    "misc-exp-master/chmp/src/chmp/ds/test_random.py": {
        "test_shuffle": {
            "name": "test_shuffle",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "misc-exp-master/chmp/src/chmp/ds/test_sklearn.py": {
        "test_func_transformer": {
            "name": "test_func_transformer",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_transform": {
            "name": "test_transform",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "test_column_transform_single": {
            "name": "test_column_transform_single",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "test_column_transform_multiple": {
            "name": "test_column_transform_multiple",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "test_column_transform_multiple_kwargs": {
            "name": "test_column_transform_multiple_kwargs",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "test_filter_low_frequency_columns": {
            "name": "test_filter_low_frequency_columns",
            "location": 65,
            "return": [],
            "arguments": {}
        },
        "test_simple_pipeline": {
            "name": "test_simple_pipeline",
            "location": 87,
            "return": [],
            "arguments": {}
        }
    },
    "misc-exp-master/chmp/src/chmp/ds/test_timeseries.py": {
        "test_to_date": {
            "name": "test_to_date",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "test_time_in_day": {
            "name": "test_time_in_day",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "test_to_start_of_week": {
            "name": "test_to_start_of_week",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "test_to_time_in_week": {
            "name": "test_to_time_in_week",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "test_to_start_of_year": {
            "name": "test_to_start_of_year",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "test_to_time_in_year": {
            "name": "test_to_time_in_year",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "test_timeshift_index": {
            "name": "test_timeshift_index",
            "location": 64,
            "return": [],
            "arguments": {}
        }
    },
    "misc-exp-master/chmp/src/chmp/ds/_import_compat.py": {
        "PGM.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "misc-exp-master/chmp/src/chmp/ds/__init__.py": {
        "reload": {
            "name": "reload",
            "location": 72,
            "return": [
                "Optional[ModuleType]"
            ],
            "arguments": {}
        },
        "import_object": {
            "name": "import_object",
            "location": 83,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "define": {
            "name": "define",
            "location": 92,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "cached": {
            "name": "cached",
            "location": 110,
            "return": [],
            "arguments": {
                "path": [
                    "str"
                ],
                "validate": [
                    "bool"
                ]
            }
        },
        "update_kwargs_signature": {
            "name": "update_kwargs_signature",
            "location": 208,
            "return": [],
            "arguments": {}
        },
        "_update_kwargs_signature": {
            "name": "_update_kwargs_signature",
            "location": 247,
            "return": [],
            "arguments": {
                "parents": [],
                "child": []
            }
        },
        "first": {
            "name": "first",
            "location": 352,
            "return": [],
            "arguments": {
                "iterable": [],
                "default": []
            }
        },
        "last": {
            "name": "last",
            "location": 360,
            "return": [],
            "arguments": {
                "iterable": [],
                "default": []
            }
        },
        "item": {
            "name": "item",
            "location": 369,
            "return": [],
            "arguments": {
                "iterable": [],
                "default": []
            }
        },
        "collect": {
            "name": "collect",
            "location": 388,
            "return": [],
            "arguments": {
                "iterable": []
            }
        },
        "colorize": {
            "name": "colorize",
            "location": 418,
            "return": [],
            "arguments": {
                "items": [],
                "cmap": []
            }
        },
        "get_color_cycle": {
            "name": "get_color_cycle",
            "location": 450,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "mpl_set": {
            "name": "mpl_set",
            "location": 472,
            "return": [],
            "arguments": {
                "box": [],
                "xlabel": [],
                "ylabel": [],
                "title": [],
                "suptitle": [],
                "xscale": [],
                "yscale": [],
                "caption": [],
                "xlim": [],
                "ylim": [],
                "xticks": [],
                "yticks": [],
                "xformatter": [
                    "Optional[Callable[([float, float], str)]]"
                ],
                "yformatter": [
                    "Optional[Callable[([float, float], str)]]"
                ],
                "left": [],
                "top": [],
                "bottom": [],
                "right": [],
                "wspace": [],
                "hspace": [],
                "subplot": [],
                "legend": [],
                "colorbar": [],
                "invert": [
                    "Optional[str]"
                ],
                "ax": [],
                "grid": [],
                "axis": []
            }
        },
        "_": {
            "name": "_",
            "location": 662,
            "return": [],
            "arguments": {}
        },
        "diagonal": {
            "name": "diagonal",
            "location": 678,
            "return": [],
            "arguments": {}
        },
        "qlineplot": {
            "name": "qlineplot",
            "location": 691,
            "return": [],
            "arguments": {}
        },
        "edges": {
            "name": "edges",
            "location": 929,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "center": {
            "name": "center",
            "location": 947,
            "return": [],
            "arguments": {
                "u": []
            }
        },
        "caption": {
            "name": "caption",
            "location": 952,
            "return": [],
            "arguments": {
                "s": [],
                "size": [],
                "strip": []
            }
        },
        "change_vspan": {
            "name": "change_vspan",
            "location": 968,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "change_plot": {
            "name": "change_plot",
            "location": 1003,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "axtext": {
            "name": "axtext",
            "location": 1026,
            "return": [],
            "arguments": {}
        },
        "plot_gaussian_contour": {
            "name": "plot_gaussian_contour",
            "location": 1040,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "_prepare_xy": {
            "name": "_prepare_xy",
            "location": 1086,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "data": [],
                "transform_x": [],
                "transform_y": [],
                "skip_nan": []
            }
        },
        "_find_changes": {
            "name": "_find_changes",
            "location": 1102,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "_optional_skip_nan": {
            "name": "_optional_skip_nan",
            "location": 1110,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "skip_nan": []
            }
        },
        "_dict_of_optionals": {
            "name": "_dict_of_optionals",
            "location": 1120,
            "return": [],
            "arguments": {}
        },
        "get_children": {
            "name": "get_children",
            "location": 1125,
            "return": [],
            "arguments": {
                "est": []
            }
        },
        "to_markdown": {
            "name": "to_markdown",
            "location": 1129,
            "return": [],
            "arguments": {
                "df": [],
                "index": []
            }
        },
        "index_query": {
            "name": "index_query",
            "location": 1139,
            "return": [],
            "arguments": {
                "obj": [],
                "expression": [],
                "scalar": []
            }
        },
        "fix_categories": {
            "name": "fix_categories",
            "location": 1156,
            "return": [],
            "arguments": {
                "s": [],
                "categories": [],
                "other_category": [],
                "inplace": [],
                "groups": [],
                "ordered": []
            }
        },
        "find_high_frequency_categories": {
            "name": "find_high_frequency_categories",
            "location": 1245,
            "return": [],
            "arguments": {
                "s": [],
                "min_frequency": [],
                "n_max": []
            }
        },
        "as_frame": {
            "name": "as_frame",
            "location": 1268,
            "return": [],
            "arguments": {}
        },
        "singledispatch_on": {
            "name": "singledispatch_on",
            "location": 1274,
            "return": [],
            "arguments": {
                "idx": []
            }
        },
        "setdefaultattr": {
            "name": "setdefaultattr",
            "location": 1308,
            "return": [],
            "arguments": {
                "obj": [],
                "name": [],
                "value": []
            }
        },
        "sapply": {
            "name": "sapply",
            "location": 1317,
            "return": [],
            "arguments": {
                "func": [],
                "obj": [],
                "sequences": [],
                "mappings": []
            }
        },
        "szip": {
            "name": "szip",
            "location": 1321,
            "return": [],
            "arguments": {
                "iterable_of_objects": [],
                "sequences": [],
                "mappings": [],
                "return_schema": []
            }
        },
        "flatten_with_index": {
            "name": "flatten_with_index",
            "location": 1358,
            "return": [],
            "arguments": {
                "obj": [],
                "sequences": [],
                "mappings": []
            }
        },
        "unflatten": {
            "name": "unflatten",
            "location": 1370,
            "return": [],
            "arguments": {
                "index": [],
                "obj": [],
                "sequences": [],
                "mappings": []
            }
        },
        "smap": {
            "name": "smap",
            "location": 1375,
            "return": [],
            "arguments": {
                "func": [],
                "arg": []
            }
        },
        "_smap": {
            "name": "_smap",
            "location": 1383,
            "return": [],
            "arguments": {
                "func": [],
                "arg": []
            }
        },
        "copy_structure": {
            "name": "copy_structure",
            "location": 1426,
            "return": [],
            "arguments": {
                "template": [],
                "obj": [],
                "sequences": [],
                "mappings": []
            }
        },
        "assert_has_schema": {
            "name": "assert_has_schema",
            "location": 1453,
            "return": [],
            "arguments": {
                "nested_obj": [],
                "expected_schema": [],
                "sequences": [],
                "mappings": []
            }
        },
        "json_numpy_default": {
            "name": "json_numpy_default",
            "location": 1470,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "piecewise_linear": {
            "name": "piecewise_linear",
            "location": 1502,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "xi": []
            }
        },
        "piecewise_logarithmic": {
            "name": "piecewise_logarithmic",
            "location": 1506,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "xi": []
            }
        },
        "_linear_interpolator": {
            "name": "_linear_interpolator",
            "location": 1510,
            "return": [],
            "arguments": {
                "u": [],
                "y0": [],
                "y1": []
            }
        },
        "_logarithmic_interpolator": {
            "name": "_logarithmic_interpolator",
            "location": 1514,
            "return": [],
            "arguments": {
                "u": [],
                "y0": [],
                "y1": []
            }
        },
        "_piecewise": {
            "name": "_piecewise",
            "location": 1518,
            "return": [],
            "arguments": {
                "interpolator": [],
                "x": [],
                "y": [],
                "xi": []
            }
        },
        "bgloop": {
            "name": "bgloop",
            "location": 1535,
            "return": [],
            "arguments": {
                "tag": []
            }
        },
        "cancel": {
            "name": "cancel",
            "location": 1567,
            "return": [],
            "arguments": {
                "tag": []
            }
        },
        "wait": {
            "name": "wait",
            "location": 1572,
            "return": [],
            "arguments": {
                "tag": []
            }
        },
        "run_direct": {
            "name": "run_direct",
            "location": 1577,
            "return": [],
            "arguments": {}
        },
        "run_thread": {
            "name": "run_thread",
            "location": 1582,
            "return": [],
            "arguments": {}
        },
        "product_len": {
            "name": "product_len",
            "location": 1589,
            "return": [],
            "arguments": {}
        },
        "fast_product": {
            "name": "fast_product",
            "location": 1597,
            "return": [],
            "arguments": {}
        },
        "pd_has_ordered_assign": {
            "name": "pd_has_ordered_assign",
            "location": 1635,
            "return": [],
            "arguments": {}
        },
        "timed": {
            "name": "timed",
            "location": 1646,
            "return": [],
            "arguments": {
                "tag": [],
                "level": []
            }
        },
        "_get_caller_logger": {
            "name": "_get_caller_logger",
            "location": 1680,
            "return": [],
            "arguments": {
                "depth": []
            }
        },
        "find_categorical_columns": {
            "name": "find_categorical_columns",
            "location": 1692,
            "return": [],
            "arguments": {
                "df": []
            }
        },
        "filter_low_frequency_categories": {
            "name": "filter_low_frequency_categories",
            "location": 1700,
            "return": [],
            "arguments": {
                "columns": [],
                "min_frequency": [],
                "other_category": [],
                "n_max": []
            }
        },
        "column_transform": {
            "name": "column_transform",
            "location": 1771,
            "return": [],
            "arguments": {}
        },
        "_column_transform": {
            "name": "_column_transform",
            "location": 1807,
            "return": [],
            "arguments": {
                "x": [],
                "columns": []
            }
        },
        "build_pipeline": {
            "name": "build_pipeline",
            "location": 1817,
            "return": [],
            "arguments": {}
        },
        "transform": {
            "name": "transform",
            "location": 1839,
            "return": [],
            "arguments": {}
        },
        "df_estimator": {
            "name": "df_estimator",
            "location": 1926,
            "return": [],
            "arguments": {
                "est": []
            }
        },
        "multi_type_sorted": {
            "name": "multi_type_sorted",
            "location": 1964,
            "return": [],
            "arguments": {
                "vals": []
            }
        },
        "search_estimator": {
            "name": "search_estimator",
            "location": 2006,
            "return": [],
            "arguments": {
                "predicate": [],
                "est": [],
                "key": []
            }
        },
        "_search_estimator": {
            "name": "_search_estimator",
            "location": 2010,
            "return": [],
            "arguments": {
                "predicate": [],
                "key": [],
                "est": []
            }
        },
        "waterfall": {
            "name": "waterfall",
            "location": 2018,
            "return": [],
            "arguments": {
                "obj": [],
                "col": [],
                "base": [],
                "total": [],
                "end_annot": [],
                "end_fmt": [],
                "annot": [],
                "fmt": [],
                "cmap": [],
                "xmin": [],
                "total_kwargs": [],
                "annot_kwargs": []
            }
        },
        "colormap": {
            "name": "colormap",
            "location": 2131,
            "return": [],
            "arguments": {
                "x": [],
                "cmap": [],
                "center": [],
                "vmin": [],
                "vmax": [],
                "norm": []
            }
        },
        "bar": {
            "name": "bar",
            "location": 2157,
            "return": [],
            "arguments": {
                "s": [],
                "cmap": [],
                "color": [],
                "norm": [],
                "orientation": []
            }
        },
        "qplot": {
            "name": "qplot",
            "location": 2179,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "data": [],
                "alpha": [],
                "fill_alpha": [],
                "color": [],
                "ax": []
            }
        },
        "render_poyo": {
            "name": "render_poyo",
            "location": 2230,
            "return": [],
            "arguments": {
                "obj": [],
                "params": []
            }
        },
        "dashcb": {
            "name": "dashcb",
            "location": 2245,
            "return": [],
            "arguments": {
                "app": [],
                "output": []
            }
        },
        "dashmpl": {
            "name": "dashmpl",
            "location": 2301,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "_dash_cb_parse_annotation": {
            "name": "_dash_cb_parse_annotation",
            "location": 2321,
            "return": [],
            "arguments": {
                "cls": [],
                "s": []
            }
        },
        "expand": {
            "name": "expand",
            "location": 2326,
            "return": [],
            "arguments": {
                "low": [],
                "high": [],
                "change": []
            }
        },
        "magic_open": {
            "name": "magic_open",
            "location": 2337,
            "return": [],
            "arguments": {
                "p": [],
                "mode": []
            }
        },
        "_get_opener": {
            "name": "_get_opener",
            "location": 2347,
            "return": [],
            "arguments": {
                "p": [],
                "compression": []
            }
        },
        "write_json": {
            "name": "write_json",
            "location": 2364,
            "return": [],
            "arguments": {
                "obj": [],
                "p": []
            }
        },
        "read_json": {
            "name": "read_json",
            "location": 2377,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "read_markdown_list": {
            "name": "read_markdown_list",
            "location": 2392,
            "return": [],
            "arguments": {
                "fobj_or_path": []
            }
        },
        "loop_over": {
            "name": "loop_over",
            "location": 2459,
            "return": [],
            "arguments": {
                "iterable": [],
                "label": [
                    "Union[(str, Callable[([], str)])]"
                ],
                "keep": []
            }
        },
        "loop_nest": {
            "name": "loop_nest",
            "location": 2484,
            "return": [],
            "arguments": {
                "iterable": [],
                "label": [
                    "Union[(str, Callable[([], str)])]"
                ]
            }
        },
        "get_current_label": {
            "name": "get_current_label",
            "location": 2497,
            "return": [],
            "arguments": {}
        },
        "tdformat": {
            "name": "tdformat",
            "location": 2773,
            "return": [],
            "arguments": {
                "time_delta": []
            }
        },
        "loop_bar": {
            "name": "loop_bar",
            "location": 2814,
            "return": [],
            "arguments": {
                "status": [],
                "n": []
            }
        },
        "ascii_bar": {
            "name": "ascii_bar",
            "location": 2821,
            "return": [],
            "arguments": {
                "u": [],
                "n": []
            }
        },
        "sha1": {
            "name": "sha1",
            "location": 2846,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "str_sha1": {
            "name": "str_sha1",
            "location": 2852,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "random": {
            "name": "random",
            "location": 2858,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "uniform": {
            "name": "uniform",
            "location": 2863,
            "return": [],
            "arguments": {
                "obj": [],
                "a": [],
                "b": []
            }
        },
        "randrange": {
            "name": "randrange",
            "location": 2867,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "randint": {
            "name": "randint",
            "location": 2874,
            "return": [],
            "arguments": {
                "obj": [],
                "a": [],
                "b": []
            }
        },
        "np_seed": {
            "name": "np_seed",
            "location": 2878,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "tf_seed": {
            "name": "tf_seed",
            "location": 2884,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "std_seed": {
            "name": "std_seed",
            "location": 2890,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "shuffled": {
            "name": "shuffled",
            "location": 2896,
            "return": [],
            "arguments": {
                "obj": [],
                "l": []
            }
        },
        "shuffle": {
            "name": "shuffle",
            "location": 2902,
            "return": [],
            "arguments": {
                "obj": [],
                "l": []
            }
        },
        "timeshift_index": {
            "name": "timeshift_index",
            "location": 2918,
            "return": [],
            "arguments": {
                "obj": [],
                "dt": []
            }
        },
        "to_start_of_day": {
            "name": "to_start_of_day",
            "location": 2925,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "to_time_in_day": {
            "name": "to_time_in_day",
            "location": 2934,
            "return": [],
            "arguments": {
                "s": [],
                "unit": []
            }
        },
        "to_start_of_week": {
            "name": "to_start_of_week",
            "location": 2942,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "to_time_in_week": {
            "name": "to_time_in_week",
            "location": 2948,
            "return": [],
            "arguments": {
                "s": [],
                "unit": []
            }
        },
        "to_start_of_year": {
            "name": "to_start_of_year",
            "location": 2957,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "to_time_in_year": {
            "name": "to_time_in_year",
            "location": 2966,
            "return": [],
            "arguments": {
                "s": [],
                "unit": []
            }
        },
        "import_object._import_obj": {
            "name": "_import_obj",
            "location": 84,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "cached.update_cache": {
            "name": "update_cache",
            "location": 139,
            "return": [],
            "arguments": {
                "result": []
            }
        },
        "cached.load_cache": {
            "name": "load_cache",
            "location": 144,
            "return": [],
            "arguments": {}
        },
        "cached.decorator": {
            "name": "decorator",
            "location": 149,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "Object.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [],
            "arguments": {}
        },
        "Object.__repr__": {
            "name": "__repr__",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Object.__eq__": {
            "name": "__eq__",
            "location": 201,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Object.__ne__": {
            "name": "__ne__",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "update_kwargs_signature.decorator": {
            "name": "decorator",
            "location": 226,
            "return": [],
            "arguments": {
                "child": [],
                "parents": []
            }
        },
        "_update_kwargs_signature.is_kw_like": {
            "name": "is_kw_like",
            "location": 250,
            "return": [],
            "arguments": {
                "desc": []
            }
        },
        "daterange.around": {
            "name": "around",
            "location": 283,
            "return": [],
            "arguments": {
                "cls": [],
                "dt": [],
                "start": [],
                "end": [],
                "step": []
            }
        },
        "daterange.__init__": {
            "name": "__init__",
            "location": 298,
            "return": [],
            "arguments": {
                "self": [],
                "start": [
                    "datetime.date"
                ],
                "end": [
                    "datetime.date"
                ],
                "step": [
                    "Optional[datetime.timedelta]"
                ]
            }
        },
        "daterange.__len__": {
            "name": "__len__",
            "location": 311,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "daterange.__iter__": {
            "name": "__iter__",
            "location": 314,
            "return": [
                "Iterable[datetime.date]"
            ],
            "arguments": {
                "self": []
            }
        },
        "daterange.__contains__": {
            "name": "__contains__",
            "location": 318,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "datetime.date"
                ]
            }
        },
        "daterange.__getitem__": {
            "name": "__getitem__",
            "location": 321,
            "return": [
                "datetime.date"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "daterange.count": {
            "name": "count",
            "location": 324,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "datetime.date"
                ]
            }
        },
        "daterange.index": {
            "name": "index",
            "location": 327,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "daterange._offset": {
            "name": "_offset",
            "location": 330,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "datetime.date"
                ]
            }
        },
        "daterange._offset_range": {
            "name": "_offset_range",
            "location": 334,
            "return": [
                "range"
            ],
            "arguments": {
                "self": []
            }
        },
        "daterange.__repr__": {
            "name": "__repr__",
            "location": 337,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "undefined_meta.__repr__": {
            "name": "__repr__",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "cell.__init__": {
            "name": "__init__",
            "location": 404,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "cell.__enter__": {
            "name": "__enter__",
            "location": 407,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "cell.__exit__": {
            "name": "__exit__",
            "location": 410,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_value": [],
                "exc_tb": []
            }
        },
        "cell.__call__": {
            "name": "__call__",
            "location": 413,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "mpl_axis.__init__": {
            "name": "__init__",
            "location": 633,
            "return": [],
            "arguments": {
                "self": [],
                "ax": []
            }
        },
        "mpl_axis.__enter__": {
            "name": "__enter__",
            "location": 638,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "mpl_axis.__exit__": {
            "name": "__exit__",
            "location": 650,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_value": [],
                "exc_tb": []
            }
        },
        "pgm.__init__": {
            "name": "__init__",
            "location": 740,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "pgm.update": {
            "name": "update",
            "location": 751,
            "return": [],
            "arguments": {
                "self": [],
                "nodes": [],
                "edges": [],
                "annotations": []
            }
        },
        "pgm.node": {
            "name": "node",
            "location": 770,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "pgm.edge": {
            "name": "edge",
            "location": 787,
            "return": [],
            "arguments": {
                "self": [],
                "from_node": [],
                "to_node": []
            }
        },
        "pgm.edges": {
            "name": "edges",
            "location": 791,
            "return": [],
            "arguments": {
                "self": [],
                "from_nodes": [],
                "to_nodes": []
            }
        },
        "pgm.remove": {
            "name": "remove",
            "location": 797,
            "return": [],
            "arguments": {
                "self": [],
                "incoming": [],
                "outgoing": []
            }
        },
        "pgm.annotate": {
            "name": "annotate",
            "location": 810,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "text": []
            }
        },
        "pgm.render": {
            "name": "render",
            "location": 814,
            "return": [],
            "arguments": {
                "self": [],
                "ax": [],
                "axis": [],
                "xlim": [],
                "ylim": []
            }
        },
        "pgm._render_annotation": {
            "name": "_render_annotation",
            "location": 865,
            "return": [],
            "arguments": {
                "self": [],
                "pgm": [],
                "annot": []
            }
        },
        "pgm._ipython_display_": {
            "name": "_ipython_display_",
            "location": 871,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_PGM.__init__": {
            "name": "__init__",
            "location": 876,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_PGM.get_node_extent": {
            "name": "get_node_extent",
            "location": 881,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "_PGM.get_limits": {
            "name": "get_limits",
            "location": 906,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "singledispatch_on.decorator": {
            "name": "decorator",
            "location": 1279,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "flatten_with_index._build": {
            "name": "_build",
            "location": 1362,
            "return": [],
            "arguments": {
                "item": []
            }
        },
        "bgloop.decorator": {
            "name": "decorator",
            "location": 1540,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "bgloop._run_loop": {
            "name": "_run_loop",
            "location": 1550,
            "return": [],
            "arguments": {
                "tag": [],
                "func": [],
                "iterables": []
            }
        },
        "Display.__init__": {
            "name": "__init__",
            "location": 1611,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Display.update": {
            "name": "update",
            "location": 1616,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Display.print": {
            "name": "print",
            "location": 1619,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Display.figure": {
            "name": "figure",
            "location": 1624,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_TimedContext.__init__": {
            "name": "__init__",
            "location": 1667,
            "return": [],
            "arguments": {
                "self": [],
                "logger": [],
                "message": [],
                "level": []
            }
        },
        "_TimedContext.__enter__": {
            "name": "__enter__",
            "location": 1672,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_TimedContext.__exit__": {
            "name": "__exit__",
            "location": 1675,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "FilterLowFrequencyTransfomer.__init__": {
            "name": "__init__",
            "location": 1720,
            "return": [],
            "arguments": {
                "self": [],
                "columns": [],
                "min_frequency": [],
                "other_category": [],
                "n_max": []
            }
        },
        "FilterLowFrequencyTransfomer.fit": {
            "name": "fit",
            "location": 1731,
            "return": [],
            "arguments": {
                "self": [],
                "df": [],
                "y": []
            }
        },
        "FilterLowFrequencyTransfomer.transform": {
            "name": "transform",
            "location": 1752,
            "return": [],
            "arguments": {
                "self": [],
                "df": [],
                "y": []
            }
        },
        "FilterLowFrequencyTransfomer._get": {
            "name": "_get",
            "location": 1766,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "col": []
            }
        },
        "FuncTransformer.__init__": {
            "name": "__init__",
            "location": 1860,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "FuncTransformer.fit": {
            "name": "fit",
            "location": 1863,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "FuncTransformer.partial_fit": {
            "name": "partial_fit",
            "location": 1866,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "FuncTransformer.transform": {
            "name": "transform",
            "location": 1869,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "FuncClassifier.__init__": {
            "name": "__init__",
            "location": 1874,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "FuncClassifier.fit": {
            "name": "fit",
            "location": 1877,
            "return": [],
            "arguments": {
                "self": [],
                "df": [],
                "y": []
            }
        },
        "FuncClassifier.predict_proba": {
            "name": "predict_proba",
            "location": 1880,
            "return": [],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "FuncClassifier.predict": {
            "name": "predict",
            "location": 1883,
            "return": [],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "FuncRegressor.__init__": {
            "name": "__init__",
            "location": 1890,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "FuncRegressor.fit": {
            "name": "fit",
            "location": 1893,
            "return": [],
            "arguments": {
                "self": [],
                "df": [],
                "y": []
            }
        },
        "FuncRegressor.predict": {
            "name": "predict",
            "location": 1896,
            "return": [],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "DataFrameEstimator.__init__": {
            "name": "__init__",
            "location": 1904,
            "return": [],
            "arguments": {
                "self": [],
                "est": []
            }
        },
        "DataFrameEstimator.fit": {
            "name": "fit",
            "location": 1907,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "DataFrameEstimator.predict": {
            "name": "predict",
            "location": 1916,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "DataFrameEstimator.predict_proba": {
            "name": "predict_proba",
            "location": 1920,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "OneHotEncoder.__init__": {
            "name": "__init__",
            "location": 1931,
            "return": [],
            "arguments": {
                "self": [],
                "columns": []
            }
        },
        "OneHotEncoder.fit": {
            "name": "fit",
            "location": 1936,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "OneHotEncoder.transform": {
            "name": "transform",
            "location": 1949,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "FitInfo.__init__": {
            "name": "__init__",
            "location": 1976,
            "return": [],
            "arguments": {
                "self": [],
                "extractor": [],
                "target": []
            }
        },
        "FitInfo.fit": {
            "name": "fit",
            "location": 1986,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "FitInfo.transform": {
            "name": "transform",
            "location": 1990,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "pipeline_get_children": {
            "name": "pipeline_get_children",
            "location": 1998,
            "return": [],
            "arguments": {
                "est": []
            }
        },
        "dashcb.decorator": {
            "name": "decorator",
            "location": 2287,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "dashmpl.impl": {
            "name": "impl",
            "location": 2307,
            "return": [],
            "arguments": {}
        },
        "LoopPrintDispatch.__get__": {
            "name": "__get__",
            "location": 2515,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        },
        "Debouncer.__init__": {
            "name": "__init__",
            "location": 2524,
            "return": [],
            "arguments": {
                "self": [],
                "interval": []
            }
        },
        "Debouncer.should_run": {
            "name": "should_run",
            "location": 2529,
            "return": [],
            "arguments": {
                "self": [],
                "now": []
            }
        },
        "Debouncer.invoked": {
            "name": "invoked",
            "location": 2538,
            "return": [],
            "arguments": {
                "self": [],
                "now": []
            }
        },
        "Loop.range": {
            "name": "range",
            "location": 2570,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Loop.over": {
            "name": "over",
            "location": 2574,
            "return": [],
            "arguments": {
                "cls": [],
                "iterable": [],
                "length": [],
                "time": [],
                "debounce": []
            }
        },
        "Loop._static_print": {
            "name": "_static_print",
            "location": 2583,
            "return": [],
            "arguments": {
                "str": [
                    "Union[(str, Callable[([], str)])]"
                ],
                "width": [],
                "end": [],
                "file": [],
                "flush": [],
                "force": [],
                "lab": []
            }
        },
        "Loop._print": {
            "name": "_print",
            "location": 2601,
            "return": [],
            "arguments": {
                "self": [],
                "str": [
                    "str"
                ],
                "width": [],
                "end": [],
                "file": [],
                "flush": [],
                "force": []
            }
        },
        "Loop.will_print": {
            "name": "will_print",
            "location": 2611,
            "return": [],
            "arguments": {
                "self": [],
                "now": []
            }
        },
        "Loop.__init__": {
            "name": "__init__",
            "location": 2615,
            "return": [],
            "arguments": {
                "self": [],
                "time": [],
                "stack": [],
                "root": [],
                "debounce": []
            }
        },
        "Loop.__getitem__": {
            "name": "__getitem__",
            "location": 2625,
            "return": [],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "Loop.push": {
            "name": "push",
            "location": 2628,
            "return": [],
            "arguments": {
                "self": [],
                "length": [],
                "idx": []
            }
        },
        "Loop.pop": {
            "name": "pop",
            "location": 2637,
            "return": [],
            "arguments": {
                "self": [],
                "frame": []
            }
        },
        "Loop.nest": {
            "name": "nest",
            "location": 2643,
            "return": [],
            "arguments": {
                "self": [],
                "iterable": [],
                "length": []
            }
        },
        "Loop.get_info": {
            "name": "get_info",
            "location": 2667,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Loop._get_fraction": {
            "name": "_get_fraction",
            "location": 2686,
            "return": [],
            "arguments": {
                "cls": [],
                "stack": []
            }
        },
        "Loop.__str__": {
            "name": "__str__",
            "location": 2697,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Loop.__format__": {
            "name": "__format__",
            "location": 2700,
            "return": [],
            "arguments": {
                "self": [],
                "format_spec": []
            }
        },
        "LoopFrame.__init__": {
            "name": "__init__",
            "location": 2746,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "idx": [],
                "length": [],
                "state": []
            }
        },
        "LoopFrame.copy": {
            "name": "copy",
            "location": 2755,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoopFrame.finish_item": {
            "name": "finish_item",
            "location": 2760,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoopFrame.abort": {
            "name": "abort",
            "location": 2763,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoopFrame.finish": {
            "name": "finish",
            "location": 2766,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoopFrame.__repr__": {
            "name": "__repr__",
            "location": 2769,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "singledispatch_on.decorator.wrapper": {
            "name": "wrapper",
            "location": 1281,
            "return": [],
            "arguments": {}
        },
        "singledispatch_on.decorator.make_call_impl": {
            "name": "make_call_impl",
            "location": 1285,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "singledispatch_on.decorator.register": {
            "name": "register",
            "location": 1293,
            "return": [],
            "arguments": {
                "type": []
            }
        },
        "singledispatch_on.decorator.make_call_impl.impl": {
            "name": "impl",
            "location": 1287,
            "return": [],
            "arguments": {}
        },
        "singledispatch_on.decorator.register.decorator": {
            "name": "decorator",
            "location": 1294,
            "return": [],
            "arguments": {
                "func": []
            }
        }
    },
    "misc-exp-master/chmp/src/chmp/experiment/__init__.py": {
        "get_store": {
            "name": "get_store",
            "location": 61,
            "return": [],
            "arguments": {
                "uri": []
            }
        },
        "get_artifact_repository": {
            "name": "get_artifact_repository",
            "location": 71,
            "return": [],
            "arguments": {
                "run_uuid": [],
                "store": []
            }
        },
        "is_local_artifact_respository": {
            "name": "is_local_artifact_respository",
            "location": 79,
            "return": [],
            "arguments": {
                "artifact_repo": []
            }
        },
        "list_all_runs": {
            "name": "list_all_runs",
            "location": 85,
            "return": [],
            "arguments": {
                "store": []
            }
        },
        "new_run": {
            "name": "new_run",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "log_tempdir": {
            "name": "log_tempdir",
            "location": 111,
            "return": [],
            "arguments": {}
        },
        "has_active_run": {
            "name": "has_active_run",
            "location": 117,
            "return": [],
            "arguments": {}
        },
        "open_artifact": {
            "name": "open_artifact",
            "location": 122,
            "return": [],
            "arguments": {
                "run_uuid": [],
                "artifact_path": [],
                "mode": []
            }
        },
        "list_artifacts": {
            "name": "list_artifacts",
            "location": 135,
            "return": [],
            "arguments": {
                "run_uuid": [],
                "path": [],
                "store": []
            }
        },
        "log_fobj": {
            "name": "log_fobj",
            "location": 140,
            "return": [],
            "arguments": {
                "fobj": [],
                "fname": []
            }
        },
        "log_structured": {
            "name": "log_structured",
            "location": 161,
            "return": [],
            "arguments": {}
        },
        "get_structured": {
            "name": "get_structured",
            "location": 174,
            "return": [],
            "arguments": {
                "run_uuid": [],
                "store": []
            }
        },
        "get_tempdir": {
            "name": "get_tempdir",
            "location": 185,
            "return": [],
            "arguments": {}
        },
        "active_run_uuid": {
            "name": "active_run_uuid",
            "location": 198,
            "return": [],
            "arguments": {}
        },
        "get_all_infos_df": {
            "name": "get_all_infos_df",
            "location": 203,
            "return": [],
            "arguments": {}
        },
        "get_all_infos": {
            "name": "get_all_infos",
            "location": 216,
            "return": [],
            "arguments": {
                "store": []
            }
        },
        "get_infos": {
            "name": "get_infos",
            "location": 220,
            "return": [],
            "arguments": {
                "run_uuid": [],
                "store": []
            }
        },
        "log_all_metrics": {
            "name": "log_all_metrics",
            "location": 243,
            "return": [],
            "arguments": {}
        },
        "log_all_params": {
            "name": "log_all_params",
            "location": 247,
            "return": [],
            "arguments": {}
        },
        "set_all_tags": {
            "name": "set_all_tags",
            "location": 251,
            "return": [],
            "arguments": {}
        },
        "_kv_apply": {
            "name": "_kv_apply",
            "location": 255,
            "return": [],
            "arguments": {
                "func": [],
                "mapping": []
            }
        },
        "get_run": {
            "name": "get_run",
            "location": 260,
            "return": [],
            "arguments": {
                "run_uuid": [],
                "store": []
            }
        },
        "get_all_metrics": {
            "name": "get_all_metrics",
            "location": 264,
            "return": [],
            "arguments": {
                "run_uuid": [],
                "store": []
            }
        },
        "get_all_params": {
            "name": "get_all_params",
            "location": 268,
            "return": [],
            "arguments": {
                "run_uuid": [],
                "store": []
            }
        },
        "get_metric": {
            "name": "get_metric",
            "location": 272,
            "return": [],
            "arguments": {
                "run_uuid": [],
                "metric_key": [],
                "store": []
            }
        },
        "get_metric_history": {
            "name": "get_metric_history",
            "location": 276,
            "return": [],
            "arguments": {
                "run_uuid": [],
                "metric_key": [],
                "store": []
            }
        },
        "get_param": {
            "name": "get_param",
            "location": 280,
            "return": [],
            "arguments": {
                "run_uuid": [],
                "param_key": [],
                "store": []
            }
        },
        "delete_experiment": {
            "name": "delete_experiment",
            "location": 284,
            "return": [],
            "arguments": {
                "run_uuid": [],
                "store": []
            }
        },
        "restore_experiment": {
            "name": "restore_experiment",
            "location": 288,
            "return": [],
            "arguments": {
                "run_uuid": [],
                "store": []
            }
        },
        "get_trash_folder": {
            "name": "get_trash_folder",
            "location": 292,
            "return": [],
            "arguments": {
                "store": []
            }
        },
        "_ensure_store": {
            "name": "_ensure_store",
            "location": 296,
            "return": [],
            "arguments": {
                "store": []
            }
        }
    },
    "misc-exp-master/chmp/src/chmp/label/test_init.py": {
        "test_base_annotator__example_session": {
            "name": "test_base_annotator__example_session",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_base_annotator__clear": {
            "name": "test_base_annotator__clear",
            "location": 90,
            "return": [],
            "arguments": {}
        }
    },
    "misc-exp-master/chmp/src/chmp/label/__init__.py": {
        "annotate": {
            "name": "annotate",
            "location": 31,
            "return": [],
            "arguments": {
                "items": []
            }
        },
        "listdata": {
            "name": "listdata",
            "location": 106,
            "return": [],
            "arguments": {
                "pattern": [],
                "valid_lables": []
            }
        },
        "get_label": {
            "name": "get_label",
            "location": 123,
            "return": [],
            "arguments": {
                "fname": []
            }
        },
        "find_labeled": {
            "name": "find_labeled",
            "location": 129,
            "return": [],
            "arguments": {
                "pattern": [],
                "recursive": []
            }
        },
        "find_unlabeled": {
            "name": "find_unlabeled",
            "location": 133,
            "return": [],
            "arguments": {
                "pattern": [],
                "recursive": []
            }
        },
        "_find_predicate": {
            "name": "_find_predicate",
            "location": 137,
            "return": [],
            "arguments": {
                "pattern": [],
                "recursive": [],
                "predicate": []
            }
        },
        "has_label": {
            "name": "has_label",
            "location": 143,
            "return": [],
            "arguments": {
                "fname": []
            }
        },
        "write_label": {
            "name": "write_label",
            "location": 147,
            "return": [],
            "arguments": {}
        },
        "get_label_fname": {
            "name": "get_label_fname",
            "location": 178,
            "return": [],
            "arguments": {
                "fname": []
            }
        },
        "write_latest_labels": {
            "name": "write_latest_labels",
            "location": 185,
            "return": [],
            "arguments": {
                "annotator": [],
                "skip_class": [],
                "label_key": [],
                "fname_key": []
            }
        },
        "build_data_url": {
            "name": "build_data_url",
            "location": 422,
            "return": [],
            "arguments": {
                "fname": [],
                "mime_type": []
            }
        },
        "annotate_bounding_boxes": {
            "name": "annotate_bounding_boxes",
            "location": 469,
            "return": [],
            "arguments": {
                "images": []
            }
        },
        "inject_bounding_boxer_js": {
            "name": "inject_bounding_boxer_js",
            "location": 570,
            "return": [],
            "arguments": {}
        },
        "write_latest_labels.unpack": {
            "name": "unpack",
            "location": 191,
            "return": [],
            "arguments": {}
        },
        "BaseAnnotator.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseAnnotator.get_latest": {
            "name": "get_latest",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseAnnotator.update_display": {
            "name": "update_display",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseAnnotator.clear": {
            "name": "clear",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseAnnotator.annotate": {
            "name": "annotate",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "BaseAnnotator.next": {
            "name": "next",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "BaseAnnotator.annotate_current": {
            "name": "annotate_current",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "BaseAnnotator.repeat": {
            "name": "repeat",
            "location": 266,
            "return": [],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "Annotator.__init__": {
            "name": "__init__",
            "location": 283,
            "return": [],
            "arguments": {
                "self": [],
                "classes": [],
                "history_length": []
            }
        },
        "Annotator.build_display_value": {
            "name": "build_display_value",
            "location": 289,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Annotator.clear": {
            "name": "clear",
            "location": 300,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Annotator.update_display": {
            "name": "update_display",
            "location": 304,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Annotator._build": {
            "name": "_build",
            "location": 337,
            "return": [],
            "arguments": {
                "self": [],
                "classes": []
            }
        },
        "Annotator._build_label_button": {
            "name": "_build_label_button",
            "location": 356,
            "return": [],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "Annotator._ipython_display_": {
            "name": "_ipython_display_",
            "location": 370,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImageAnnotator.build_display_value": {
            "name": "build_display_value",
            "location": 380,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "AudioAnnotator.build_display_value": {
            "name": "build_display_value",
            "location": 390,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "FunctionalAnnotator.__init__": {
            "name": "__init__",
            "location": 395,
            "return": [],
            "arguments": {
                "self": [],
                "classes": [],
                "display_value": []
            }
        },
        "FunctionalAnnotator.build_display_value": {
            "name": "build_display_value",
            "location": 403,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Annotations.get_latest": {
            "name": "get_latest",
            "location": 408,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "annotate_bounding_boxes.show": {
            "name": "show",
            "location": 483,
            "return": [],
            "arguments": {}
        },
        "annotate_bounding_boxes._advance": {
            "name": "_advance",
            "location": 499,
            "return": [],
            "arguments": {
                "delta": []
            }
        },
        "annotate_bounding_boxes._": {
            "name": "_",
            "location": 510,
            "return": [],
            "arguments": {
                "widget": [],
                "ev": [],
                "_": []
            }
        },
        "BoundingBoxer.__init__": {
            "name": "__init__",
            "location": 534,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoundingBoxer.annotations": {
            "name": "annotations",
            "location": 543,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "AnnotationDisplay.__init__": {
            "name": "__init__",
            "location": 557,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnnotationDisplay.annotations": {
            "name": "annotations",
            "location": 566,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "misc-exp-master/chmp/src/chmp/parser/test_init.py": {
        "test_eq": {
            "name": "test_eq",
            "location": 43,
            "return": [],
            "arguments": {
                "parser": [],
                "input": [],
                "expected_rest": [],
                "expected_result": []
            }
        }
    },
    "misc-exp-master/chmp/src/chmp/parser/__init__.py": {
        "parse": {
            "name": "parse",
            "location": 17,
            "return": [],
            "arguments": {
                "parser": [],
                "tokens": [],
                "partial": [],
                "offset": []
            }
        },
        "_find_latest_error": {
            "name": "_find_latest_error",
            "location": 37,
            "return": [],
            "arguments": {
                "debug": []
            }
        },
        "inspect_parser": {
            "name": "inspect_parser",
            "location": 51,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "extract_parameters": {
            "name": "extract_parameters",
            "location": 69,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "parameters": {
            "name": "parameters",
            "location": 90,
            "return": [],
            "arguments": {}
        },
        "partial_arg": {
            "name": "partial_arg",
            "location": 105,
            "return": [],
            "arguments": {
                "partial_name": [],
                "arg_index": []
            }
        },
        "_debug": {
            "name": "_debug",
            "location": 114,
            "return": [],
            "arguments": {
                "state": [],
                "offset": [],
                "consumed": []
            }
        },
        "_add_child": {
            "name": "_add_child",
            "location": 120,
            "return": [],
            "arguments": {
                "debug": [],
                "d": []
            }
        },
        "_ok": {
            "name": "_ok",
            "location": 125,
            "return": [],
            "arguments": {
                "offset": [],
                "consumed": []
            }
        },
        "_fail": {
            "name": "_fail",
            "location": 129,
            "return": [],
            "arguments": {
                "offset": [],
                "consumed": []
            }
        },
        "noop": {
            "name": "noop",
            "location": 134,
            "return": [],
            "arguments": {}
        },
        "fail": {
            "name": "fail",
            "location": 142,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "fail_if": {
            "name": "fail_if",
            "location": 150,
            "return": [],
            "arguments": {
                "predicate": [],
                "message": []
            }
        },
        "predicate": {
            "name": "predicate",
            "location": 166,
            "return": [],
            "arguments": {
                "predicate": [],
                "message": []
            }
        },
        "ne": {
            "name": "ne",
            "location": 183,
            "return": [],
            "arguments": {
                "needle": []
            }
        },
        "eq": {
            "name": "eq",
            "location": 188,
            "return": [],
            "arguments": {
                "needle": []
            }
        },
        "any": {
            "name": "any",
            "location": 195,
            "return": [],
            "arguments": {}
        },
        "sequential": {
            "name": "sequential",
            "location": 200,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "first": {
            "name": "first",
            "location": 228,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "repeat": {
            "name": "repeat",
            "location": 252,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "ignore": {
            "name": "ignore",
            "location": 282,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "optional": {
            "name": "optional",
            "location": 302,
            "return": [],
            "arguments": {
                "parser": [],
                "default": []
            }
        },
        "sequence_eq": {
            "name": "sequence_eq",
            "location": 318,
            "return": [],
            "arguments": {
                "needle": []
            }
        },
        "no_match": {
            "name": "no_match",
            "location": 335,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "apply": {
            "name": "apply",
            "location": 347,
            "return": [],
            "arguments": {
                "transform": [],
                "parser": []
            }
        },
        "map": {
            "name": "map",
            "location": 362,
            "return": [],
            "arguments": {
                "transform": [],
                "parser": []
            }
        },
        "end_of_sequence": {
            "name": "end_of_sequence",
            "location": 367,
            "return": [],
            "arguments": {}
        },
        "regex": {
            "name": "regex",
            "location": 385,
            "return": [],
            "arguments": {
                "pattern": [],
                "flags": []
            }
        },
        "literal": {
            "name": "literal",
            "location": 415,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "build_object": {
            "name": "build_object",
            "location": 423,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "_excerpt": {
            "name": "_excerpt",
            "location": 440,
            "return": [],
            "arguments": {
                "s": [],
                "n": []
            }
        },
        "parameters.decorator": {
            "name": "decorator",
            "location": 91,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "partial_arg.extract_partial_arg": {
            "name": "extract_partial_arg",
            "location": 106,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "noop.noop_parser": {
            "name": "noop_parser",
            "location": 135,
            "return": [],
            "arguments": {
                "tokens": [],
                "offset": []
            }
        },
        "fail.fail_parser": {
            "name": "fail_parser",
            "location": 143,
            "return": [],
            "arguments": {
                "tokens": [],
                "offset": []
            }
        },
        "fail_if.fail_parser": {
            "name": "fail_parser",
            "location": 151,
            "return": [],
            "arguments": {
                "tokens": [],
                "offset": []
            }
        },
        "predicate.predicate_parser": {
            "name": "predicate_parser",
            "location": 170,
            "return": [],
            "arguments": {
                "tokens": [],
                "offset": []
            }
        },
        "sequential.sequential_parser": {
            "name": "sequential_parser",
            "location": 205,
            "return": [],
            "arguments": {
                "tokens": [],
                "offset": []
            }
        },
        "first.first_parser": {
            "name": "first_parser",
            "location": 233,
            "return": [],
            "arguments": {
                "tokens": [],
                "offset": []
            }
        },
        "repeat.repeat_parser": {
            "name": "repeat_parser",
            "location": 260,
            "return": [],
            "arguments": {
                "tokens": [],
                "offset": []
            }
        },
        "ignore.ignore_parser": {
            "name": "ignore_parser",
            "location": 286,
            "return": [],
            "arguments": {
                "tokens": [],
                "offset": []
            }
        },
        "optional.optional_parser": {
            "name": "optional_parser",
            "location": 306,
            "return": [],
            "arguments": {
                "tokens": [],
                "offset": []
            }
        },
        "sequence_eq.sequence_eq_parser": {
            "name": "sequence_eq_parser",
            "location": 321,
            "return": [],
            "arguments": {
                "tokens": [],
                "offset": []
            }
        },
        "no_match.no_match_parser": {
            "name": "no_match_parser",
            "location": 336,
            "return": [],
            "arguments": {
                "tokens": [],
                "offset": []
            }
        },
        "apply.apply_parser": {
            "name": "apply_parser",
            "location": 350,
            "return": [],
            "arguments": {
                "tokens": [],
                "offset": []
            }
        },
        "end_of_sequence.end_of_sequence_parser": {
            "name": "end_of_sequence_parser",
            "location": 368,
            "return": [],
            "arguments": {
                "tokens": [],
                "offset": []
            }
        },
        "regex._match_regex": {
            "name": "_match_regex",
            "location": 397,
            "return": [],
            "arguments": {
                "lines": [],
                "offset": []
            }
        },
        "literal.literal_parser": {
            "name": "literal_parser",
            "location": 416,
            "return": [],
            "arguments": {
                "tokens": [],
                "offset": []
            }
        },
        "build_object.build_object_parser": {
            "name": "build_object_parser",
            "location": 427,
            "return": [],
            "arguments": {
                "tokens": [],
                "offset": []
            }
        },
        "parameters.decorator.wrapper": {
            "name": "wrapper",
            "location": 93,
            "return": [],
            "arguments": {}
        }
    },
    "misc-exp-master/chmp/src/chmp/tools/blog.py": {
        "main": {
            "name": "main",
            "location": 10,
            "return": [],
            "arguments": {
                "input": [],
                "output": []
            }
        },
        "dispatch": {
            "name": "dispatch",
            "location": 29,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "export_notebook": {
            "name": "export_notebook",
            "location": 71,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "export_notebook_notebook": {
            "name": "export_notebook_notebook",
            "location": 80,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "export_notebook_cell_raw": {
            "name": "export_notebook_cell_raw",
            "location": 86,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "export_notebook_cell_markdown": {
            "name": "export_notebook_cell_markdown",
            "location": 105,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "export_notebook_cell_code": {
            "name": "export_notebook_cell_code",
            "location": 112,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "dispatch.wrapper": {
            "name": "wrapper",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "dispatch.resolver": {
            "name": "resolver",
            "location": 40,
            "return": [],
            "arguments": {
                "registery": [],
                "key": []
            }
        },
        "dispatch.resolve": {
            "name": "resolve",
            "location": 47,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "dispatch.register": {
            "name": "register",
            "location": 52,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "dispatch.register.decorator": {
            "name": "decorator",
            "location": 53,
            "return": [],
            "arguments": {
                "func": []
            }
        }
    },
    "misc-exp-master/chmp/src/chmp/tools/mddocs.py": {
        "transform_directories": {
            "name": "transform_directories",
            "location": 35,
            "return": [],
            "arguments": {
                "src": [],
                "dst": [],
                "continue_on_error": [],
                "inventory": []
            }
        },
        "transform_file": {
            "name": "transform_file",
            "location": 62,
            "return": [],
            "arguments": {
                "source": [],
                "target": [],
                "inventory": []
            }
        },
        "setup_rst_roles": {
            "name": "setup_rst_roles",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "rewrite_reference": {
            "name": "rewrite_reference",
            "location": 80,
            "return": [],
            "arguments": {
                "name": [],
                "rawtext": [],
                "text": [],
                "lineno": [],
                "inliner": [],
                "options": [],
                "content": []
            }
        },
        "relwalk": {
            "name": "relwalk",
            "location": 89,
            "return": [],
            "arguments": {
                "absroot": [],
                "relroot": []
            }
        },
        "transform": {
            "name": "transform",
            "location": 104,
            "return": [],
            "arguments": {
                "content": [],
                "source": [],
                "inventory": []
            }
        },
        "build_parser": {
            "name": "build_parser",
            "location": 140,
            "return": [],
            "arguments": {}
        },
        "autofunction": {
            "name": "autofunction",
            "location": 199,
            "return": [],
            "arguments": {
                "part": [],
                "source": []
            }
        },
        "automethod": {
            "name": "automethod",
            "location": 203,
            "return": [],
            "arguments": {
                "part": [],
                "source": []
            }
        },
        "autoclass": {
            "name": "autoclass",
            "location": 207,
            "return": [],
            "arguments": {
                "part": [],
                "source": []
            }
        },
        "automodule": {
            "name": "automodule",
            "location": 211,
            "return": [],
            "arguments": {
                "part": [],
                "source": []
            }
        },
        "autoobject": {
            "name": "autoobject",
            "location": 217,
            "return": [],
            "arguments": {
                "part": []
            }
        },
        "extract_label_signature": {
            "name": "extract_label_signature",
            "location": 237,
            "return": [],
            "arguments": {
                "autodoc_line": []
            }
        },
        "get_members": {
            "name": "get_members",
            "location": 260,
            "return": [],
            "arguments": {
                "parent_k": [],
                "parent": [],
                "header": [],
                "skip_args": []
            }
        },
        "document_object": {
            "name": "document_object",
            "location": 271,
            "return": [],
            "arguments": {
                "obj": [],
                "label": []
            }
        },
        "format_signature": {
            "name": "format_signature",
            "location": 310,
            "return": [],
            "arguments": {
                "label": [],
                "func": [],
                "skip": []
            }
        },
        "literalinclude": {
            "name": "literalinclude",
            "location": 351,
            "return": [],
            "arguments": {
                "part": [],
                "source": [],
                "reference_resolver": []
            }
        },
        "include": {
            "name": "include",
            "location": 370,
            "return": [],
            "arguments": {
                "part": [],
                "source": [],
                "reference_resolver": []
            }
        },
        "render_docstring": {
            "name": "render_docstring",
            "location": 383,
            "return": [],
            "arguments": {
                "obj": [],
                "reference_resolver": []
            }
        },
        "unindent": {
            "name": "unindent",
            "location": 596,
            "return": [],
            "arguments": {
                "doc": []
            }
        },
        "find_indent": {
            "name": "find_indent",
            "location": 610,
            "return": [],
            "arguments": {
                "lines": []
            }
        },
        "import_object": {
            "name": "import_object",
            "location": 620,
            "return": [],
            "arguments": {
                "what": [],
                "depth": []
            }
        },
        "get_member_names": {
            "name": "get_member_names",
            "location": 639,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "load_inventory": {
            "name": "load_inventory",
            "location": 748,
            "return": [],
            "arguments": {
                "uris": []
            }
        },
        "build_parser.make_simple_parser": {
            "name": "make_simple_parser",
            "location": 154,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "MarkdownWriter.__init__": {
            "name": "__init__",
            "location": 403,
            "return": [],
            "arguments": {
                "self": [],
                "reference_resolver": []
            }
        },
        "MarkdownWriter.translate": {
            "name": "translate",
            "location": 407,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MarkdownWriter._translate": {
            "name": "_translate",
            "location": 410,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "MarkdownWriter._translate_children": {
            "name": "_translate_children",
            "location": 422,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "MarkdownWriter._translate_section": {
            "name": "_translate_section",
            "location": 428,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "MarkdownWriter._translate_title": {
            "name": "_translate_title",
            "location": 431,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "MarkdownWriter._translate_paragraph": {
            "name": "_translate_paragraph",
            "location": 435,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "MarkdownWriter._translate_literal_block": {
            "name": "_translate_literal_block",
            "location": 439,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "MarkdownWriter._translate_Text": {
            "name": "_translate_Text",
            "location": 446,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "MarkdownWriter._translate_literal": {
            "name": "_translate_literal",
            "location": 449,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "MarkdownWriter._translate_bullet_list": {
            "name": "_translate_bullet_list",
            "location": 452,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "MarkdownWriter._translate_field_list": {
            "name": "_translate_field_list",
            "location": 467,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "MarkdownWriter._translate_definition_list": {
            "name": "_translate_definition_list",
            "location": 524,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "MarkdownWriter._translate_TitledReference": {
            "name": "_translate_TitledReference",
            "location": 551,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "MarkdownWriter._translate_strong": {
            "name": "_translate_strong",
            "location": 557,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "MarkdownWriter._translate_reference": {
            "name": "_translate_reference",
            "location": 562,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "MarkdownWriter._translate_title_reference": {
            "name": "_translate_title_reference",
            "location": 565,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "MarkdownWriter._translate_target": {
            "name": "_translate_target",
            "location": 568,
            "return": [],
            "arguments": {
                "slef": [],
                "node": []
            }
        },
        "MarkdownWriter._translate_note": {
            "name": "_translate_note",
            "location": 571,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "MarkdownWriter._translate_warning": {
            "name": "_translate_warning",
            "location": 574,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "MarkdownWriter._translate_system_message": {
            "name": "_translate_system_message",
            "location": 577,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "MarkdownWriter._translate_seealso": {
            "name": "_translate_seealso",
            "location": 580,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "MarkdownWriter._translate_todo": {
            "name": "_translate_todo",
            "location": 583,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "MarkdownWriter._util_translate_admonition": {
            "name": "_util_translate_admonition",
            "location": 586,
            "return": [],
            "arguments": {
                "self": [],
                "title": [],
                "node": []
            }
        },
        "unindent.impl": {
            "name": "impl",
            "location": 597,
            "return": [],
            "arguments": {}
        },
        "ChainResolver.__init__": {
            "name": "__init__",
            "location": 697,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChainResolver.resolve": {
            "name": "resolve",
            "location": 700,
            "return": [],
            "arguments": {
                "self": [],
                "ref": [],
                "kind": []
            }
        },
        "GithubLinkResolver.resolve": {
            "name": "resolve",
            "location": 711,
            "return": [],
            "arguments": {
                "self": [],
                "ref": [],
                "kind": []
            }
        },
        "InventoryResolver.__init__": {
            "name": "__init__",
            "location": 716,
            "return": [],
            "arguments": {
                "self": [],
                "inventory": []
            }
        },
        "InventoryResolver.resolve": {
            "name": "resolve",
            "location": 730,
            "return": [],
            "arguments": {
                "self": [],
                "ref": [],
                "kind": []
            }
        }
    },
    "misc-exp-master/chmp/src/chmp/tools/papers.py": {
        "sort_arxiv_papers": {
            "name": "sort_arxiv_papers",
            "location": 16,
            "return": [],
            "arguments": {
                "source_path": [],
                "target_path": []
            }
        },
        "sort_non_arxiv_papers": {
            "name": "sort_non_arxiv_papers",
            "location": 54,
            "return": [],
            "arguments": {
                "source_path": [],
                "target_path": []
            }
        },
        "shasum": {
            "name": "shasum",
            "location": 80,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "is_arxiv_paper": {
            "name": "is_arxiv_paper",
            "location": 88,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "fetch_meta_data": {
            "name": "fetch_meta_data",
            "location": 92,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "parse_meta_data": {
            "name": "parse_meta_data",
            "location": 97,
            "return": [],
            "arguments": {
                "desc": []
            }
        }
    },
    "misc-exp-master/chmp/src/chmp/tools/profiler.py": {
        "collect_profile": {
            "name": "collect_profile",
            "location": 10,
            "return": [],
            "arguments": {
                "fname": []
            }
        },
        "plot_profile": {
            "name": "plot_profile",
            "location": 40,
            "return": [],
            "arguments": {
                "stats": [],
                "show": []
            }
        },
        "build_data": {
            "name": "build_data",
            "location": 77,
            "return": [],
            "arguments": {
                "stats": [],
                "cmap": [],
                "skip_empty": []
            }
        },
        "_build_data": {
            "name": "_build_data",
            "location": 105,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "format_time": {
            "name": "format_time",
            "location": 138,
            "return": [],
            "arguments": {
                "time": []
            }
        },
        "sha1": {
            "name": "sha1",
            "location": 148,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "str_sha1": {
            "name": "str_sha1",
            "location": 154,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "random": {
            "name": "random",
            "location": 160,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "Profile.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "fname": []
            }
        },
        "Profile.stats": {
            "name": "stats",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Profile.tree": {
            "name": "tree",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Profile.show": {
            "name": "show",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "misc-exp-master/chmp/src/chmp/tools/test_mddocs.py": {
        "test_format_signature": {
            "name": "test_format_signature",
            "location": 58,
            "return": [],
            "arguments": {
                "func": [],
                "expected": []
            }
        },
        "test_examples": {
            "name": "test_examples",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "test_multifile_exampele": {
            "name": "test_multifile_exampele",
            "location": 76,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "example_numpy": {
            "name": "example_numpy",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "example_rest_style": {
            "name": "example_rest_style",
            "location": 119,
            "return": [],
            "arguments": {}
        },
        "example_adminitions": {
            "name": "example_adminitions",
            "location": 129,
            "return": [],
            "arguments": {}
        },
        "C.positional_only": {
            "name": "positional_only",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": [],
                "c": []
            }
        },
        "C.varargs_only": {
            "name": "varargs_only",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "C.varargs": {
            "name": "varargs",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": []
            }
        },
        "C.defaults": {
            "name": "defaults",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": [],
                "c": []
            }
        },
        "C.kwargs": {
            "name": "kwargs",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "a": []
            }
        },
        "C.pure_kwonly": {
            "name": "pure_kwonly",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "a": []
            }
        },
        "C.vargs_kwonly": {
            "name": "vargs_kwonly",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "a": []
            }
        },
        "C.kwonly_defaults": {
            "name": "kwonly_defaults",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "a": []
            }
        },
        "C.kwonly_kwargs": {
            "name": "kwonly_kwargs",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "a": []
            }
        },
        "Foo.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Foo.method": {
            "name": "method",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": []
            }
        }
    },
    "misc-exp-master/chmp/src/chmp/tools/__init__.py": {},
    "misc-exp-master/chmp/src/chmp/tools/__main__.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "mddocs": {
            "name": "mddocs",
            "location": 22,
            "return": [],
            "arguments": {
                "src": [],
                "dst": [],
                "continue_on_error": [],
                "inventory": []
            }
        },
        "open_inventory": {
            "name": "open_inventory",
            "location": 38,
            "return": [],
            "arguments": {
                "inventory": [],
                "cache_file": []
            }
        },
        "paper": {
            "name": "paper",
            "location": 66,
            "return": [],
            "arguments": {
                "source_path": [],
                "target_path": [],
                "yes": []
            }
        },
        "blog": {
            "name": "blog",
            "location": 92,
            "return": [],
            "arguments": {
                "source_path": [],
                "target_path": []
            }
        }
    },
    "misc-exp-master/chmp/src/chmp/torch_utils/bayes.py": {
        "TorchDistributionModule.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TorchDistributionModule.forward": {
            "name": "forward",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TorchDistributionModule.__getattr__": {
            "name": "__getattr__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "NormalModelConstantScale.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "transform": [],
                "scale": []
            }
        },
        "NormalModelConstantScale.forward": {
            "name": "forward",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "batch_x": []
            }
        },
        "NormalModelConstantScale.kl_divergence": {
            "name": "kl_divergence",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NllLoss.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "distribution": []
            }
        },
        "NllLoss.__call__": {
            "name": "__call__",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "pred": [],
                "y": []
            }
        },
        "NllLoss._build_dist": {
            "name": "_build_dist",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "pred": []
            }
        },
        "KLDivergence.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "n_observations": []
            }
        },
        "KLDivergence.__call__": {
            "name": "__call__",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "VariationalHalfCauchy.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "shape": [],
                "tau": []
            }
        },
        "VariationalHalfCauchy.forward": {
            "name": "forward",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariationalHalfCauchy.kl_divergence": {
            "name": "kl_divergence",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariationalNormal.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "shape": [],
                "loc": [],
                "scale": []
            }
        },
        "VariationalNormal.forward": {
            "name": "forward",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariationalNormal.kl_divergence": {
            "name": "kl_divergence",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WeightsHS.__init__": {
            "name": "__init__",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "shape": [],
                "tau_0": [],
                "regularization": []
            }
        },
        "WeightsHS.forward": {
            "name": "forward",
            "location": 244,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WeightsHS.kl_divergence": {
            "name": "kl_divergence",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "misc-exp-master/chmp/src/chmp/torch_utils/test_attention.py": {
        "test_transformer_fit": {
            "name": "test_transformer_fit",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_transformer_fit.transform_x": {
            "name": "transform_x",
            "location": 11,
            "return": [],
            "arguments": {
                "idx": []
            }
        },
        "test_transformer_fit.transform_xy": {
            "name": "transform_xy",
            "location": 14,
            "return": [],
            "arguments": {
                "idx": []
            }
        }
    },
    "misc-exp-master/chmp/src/chmp/torch_utils/test_nn.py": {
        "test_linear_shape": {
            "name": "test_linear_shape",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_factorized_quadratic_shape": {
            "name": "test_factorized_quadratic_shape",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "test_masked_softmax": {
            "name": "test_masked_softmax",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "test_diagonal_scale_shift": {
            "name": "test_diagonal_scale_shift",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_call_torch": {
            "name": "test_call_torch",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "test_call_torch_structured": {
            "name": "test_call_torch_structured",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_call_torch_batched": {
            "name": "test_call_torch_batched",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "test_t2n_examples": {
            "name": "test_t2n_examples",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "test_numpy_dataset": {
            "name": "test_numpy_dataset",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "test_padded_collate_fn__empty_item": {
            "name": "test_padded_collate_fn__empty_item",
            "location": 89,
            "return": [],
            "arguments": {}
        },
        "test_padded_collate_fn__empty_batch": {
            "name": "test_padded_collate_fn__empty_batch",
            "location": 94,
            "return": [],
            "arguments": {}
        },
        "test_padded_collate_fn__example_scalars": {
            "name": "test_padded_collate_fn__example_scalars",
            "location": 99,
            "return": [],
            "arguments": {}
        },
        "test_padded_collate_fn__example_sequences": {
            "name": "test_padded_collate_fn__example_sequences",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "test_padded_collate_fn__example_matrices": {
            "name": "test_padded_collate_fn__example_matrices",
            "location": 115,
            "return": [],
            "arguments": {}
        },
        "test_padded_collate_fn__example_mixed_flat": {
            "name": "test_padded_collate_fn__example_mixed_flat",
            "location": 130,
            "return": [],
            "arguments": {}
        },
        "test_padded_collate_fn__example_mixed_nested": {
            "name": "test_padded_collate_fn__example_mixed_nested",
            "location": 153,
            "return": [],
            "arguments": {}
        },
        "test_padded_collate_fn__example_mixed_dict": {
            "name": "test_padded_collate_fn__example_mixed_dict",
            "location": 176,
            "return": [],
            "arguments": {}
        }
    },
    "misc-exp-master/chmp/src/chmp/torch_utils/test_training.py": {
        "test_examples": {
            "name": "test_examples",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "misc-exp-master/chmp/src/chmp/torch_utils/training.py": {
        "disable_ignite_logging": {
            "name": "disable_ignite_logging",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "restore": {
            "name": "restore",
            "location": 23,
            "return": [],
            "arguments": {
                "engine": [],
                "map_location": [],
                "optional": []
            }
        },
        "attach_all": {
            "name": "attach_all",
            "location": 36,
            "return": [],
            "arguments": {
                "engine": []
            }
        },
        "continue_run": {
            "name": "continue_run",
            "location": 43,
            "return": [],
            "arguments": {
                "engine": [],
                "data_loader": [],
                "max_epochs": []
            }
        },
        "restore_engine_state": {
            "name": "restore_engine_state",
            "location": 54,
            "return": [],
            "arguments": {
                "engine": [],
                "state_vars": []
            }
        },
        "make_train_func": {
            "name": "make_train_func",
            "location": 64,
            "return": [],
            "arguments": {
                "model": [],
                "loss_func": [],
                "optimizer": [],
                "dtype": [],
                "device": [],
                "call_model": [],
                "get_train_loss": []
            }
        },
        "attach": {
            "name": "attach",
            "location": 129,
            "return": [],
            "arguments": {
                "engine": [],
                "handler": []
            }
        },
        "register_terminate_on_nan": {
            "name": "register_terminate_on_nan",
            "location": 134,
            "return": [],
            "arguments": {
                "engine": [],
                "handler": []
            }
        },
        "nested_to_float": {
            "name": "nested_to_float",
            "location": 275,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "nested_format": {
            "name": "nested_format",
            "location": 279,
            "return": [],
            "arguments": {
                "obj": [],
                "fmt": []
            }
        },
        "find_latest_checkpoints": {
            "name": "find_latest_checkpoints",
            "location": 491,
            "return": [],
            "arguments": {
                "dirname": [],
                "filename_prefix": [],
                "keys": []
            }
        },
        "make_train_func.default_get_train_loss": {
            "name": "default_get_train_loss",
            "location": 101,
            "return": [],
            "arguments": {
                "loss": []
            }
        },
        "make_train_func.train_func": {
            "name": "train_func",
            "location": 110,
            "return": [],
            "arguments": {
                "engine": [],
                "batch": []
            }
        },
        "SubclassHandler.find": {
            "name": "find",
            "location": 140,
            "return": [],
            "arguments": {
                "cls": [],
                "engine": []
            }
        },
        "SubclassHandler.attach": {
            "name": "attach",
            "location": 156,
            "return": [
                "T@@"
            ],
            "arguments": {
                "self": [
                    "T@@"
                ],
                "engine": [
                    "Engine"
                ]
            }
        },
        "SubclassHandler.on_epoch_started": {
            "name": "on_epoch_started",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "engine": [
                    "Engine"
                ]
            }
        },
        "SubclassHandler.on_epoch_completed": {
            "name": "on_epoch_completed",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "engine": [
                    "Engine"
                ]
            }
        },
        "SubclassHandler.on_started": {
            "name": "on_started",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "engine": [
                    "Engine"
                ]
            }
        },
        "SubclassHandler.on_completed": {
            "name": "on_completed",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "engine": [
                    "Engine"
                ]
            }
        },
        "SubclassHandler.on_iteration_started": {
            "name": "on_iteration_started",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "engine": [
                    "Engine"
                ]
            }
        },
        "SubclassHandler.on_iteration_completed": {
            "name": "on_iteration_completed",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "engine": [
                    "Engine"
                ]
            }
        },
        "SubclassHandler.on_exception_raised": {
            "name": "on_exception_raised",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "engine": [
                    "Engine"
                ],
                "exception": [
                    "Exception"
                ]
            }
        },
        "ProgressBar.__init__": {
            "name": "__init__",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "formatter": [],
                "lab": []
            }
        },
        "ProgressBar.on_started": {
            "name": "on_started",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "engine": []
            }
        },
        "ProgressBar.on_epoch_started": {
            "name": "on_epoch_started",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "engine": []
            }
        },
        "ProgressBar.on_iteration_completed": {
            "name": "on_iteration_completed",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "engine": []
            }
        },
        "ProgressBar.on_epoch_completed": {
            "name": "on_epoch_completed",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "engine": []
            }
        },
        "ProgressBar.on_completed": {
            "name": "on_completed",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "engine": [
                    "Engine"
                ]
            }
        },
        "ProgressBar.print_status": {
            "name": "print_status",
            "location": 257,
            "return": [],
            "arguments": {
                "self": [],
                "engine": []
            }
        },
        "ProgressBar.update": {
            "name": "update",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ProgressBar.default_formatter": {
            "name": "default_formatter",
            "location": 271,
            "return": [],
            "arguments": {
                "loop": [],
                "state": []
            }
        },
        "TrainHistory.__init__": {
            "name": "__init__",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "process_output": []
            }
        },
        "TrainHistory.on_started": {
            "name": "on_started",
            "location": 300,
            "return": [],
            "arguments": {
                "self": [],
                "engine": [
                    "Engine"
                ]
            }
        },
        "TrainHistory.on_iteration_completed": {
            "name": "on_iteration_completed",
            "location": 305,
            "return": [],
            "arguments": {
                "self": [],
                "engine": []
            }
        },
        "OutputPlot.__init__": {
            "name": "__init__",
            "location": 312,
            "return": [],
            "arguments": {
                "self": [],
                "plotting_func": [
                    "Callable[([], None)]"
                ],
                "interval": []
            }
        },
        "OutputPlot.on_started": {
            "name": "on_started",
            "location": 317,
            "return": [],
            "arguments": {
                "self": [],
                "engine": []
            }
        },
        "OutputPlot.on_iteration_completed": {
            "name": "on_iteration_completed",
            "location": 320,
            "return": [],
            "arguments": {
                "self": [],
                "engine": []
            }
        },
        "OutputPlot.update": {
            "name": "update",
            "location": 323,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OutputPlot.get_plot_as_image": {
            "name": "get_plot_as_image",
            "location": 339,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OutputPlot.call_plotting_func": {
            "name": "call_plotting_func",
            "location": 350,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Evaluator.__init__": {
            "name": "__init__",
            "location": 366,
            "return": [],
            "arguments": {
                "self": [],
                "valid_data": [],
                "metrics": [],
                "process_func": []
            }
        },
        "Evaluator.on_epoch_completed": {
            "name": "on_epoch_completed",
            "location": 374,
            "return": [],
            "arguments": {
                "self": [],
                "engine": []
            }
        },
        "PersistentState.get": {
            "name": "get",
            "location": 401,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "PersistentState.clear": {
            "name": "clear",
            "location": 408,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "PersistentState.__init__": {
            "name": "__init__",
            "location": 411,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentState.on_started": {
            "name": "on_started",
            "location": 414,
            "return": [],
            "arguments": {
                "self": [],
                "engine": []
            }
        },
        "PersistentState.on_epoch_completed": {
            "name": "on_epoch_completed",
            "location": 419,
            "return": [],
            "arguments": {
                "self": [],
                "engine": []
            }
        },
        "PersistentState.state_dict": {
            "name": "state_dict",
            "location": 427,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentState.load_state_dict": {
            "name": "load_state_dict",
            "location": 430,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "SimpleCheckpointer.__init__": {
            "name": "__init__",
            "location": 437,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "optimizer": [],
                "state": []
            }
        },
        "SimpleCheckpointer.on_epoch_completed": {
            "name": "on_epoch_completed",
            "location": 470,
            "return": [],
            "arguments": {
                "self": [],
                "engine": [
                    "Engine"
                ]
            }
        },
        "SimpleCheckpointer.restore": {
            "name": "restore",
            "location": 473,
            "return": [],
            "arguments": {
                "self": [],
                "map_location": [],
                "optional": []
            }
        },
        "ReraiseErrors.on_exception_raised": {
            "name": "on_exception_raised",
            "location": 520,
            "return": [],
            "arguments": {
                "self": [],
                "engine": [],
                "exc": []
            }
        }
    },
    "misc-exp-master/chmp/src/chmp/torch_utils/_test_bayes.py": {
        "test_kl_divergence__gamma__log_normal": {
            "name": "test_kl_divergence__gamma__log_normal",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test__module_parameters": {
            "name": "test__module_parameters",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test__module_fixed_parameters_optimize": {
            "name": "test__module_fixed_parameters_optimize",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_weight_hs_api": {
            "name": "test_weight_hs_api",
            "location": 45,
            "return": [],
            "arguments": {}
        }
    },
    "misc-exp-master/chmp/src/chmp/torch_utils/__init__.py": {
        "optional_parameter": {
            "name": "optional_parameter",
            "location": 41,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "register_unknown_kl": {
            "name": "register_unknown_kl",
            "location": 77,
            "return": [],
            "arguments": {
                "type_p": [],
                "type_q": []
            }
        },
        "has_kl": {
            "name": "has_kl",
            "location": 90,
            "return": [],
            "arguments": {
                "type_p": [],
                "type_q": []
            }
        },
        "n2t": {
            "name": "n2t",
            "location": 96,
            "return": [],
            "arguments": {
                "obj": [],
                "dtype": [],
                "device": [],
                "sequences": [],
                "mappings": []
            }
        },
        "t2n": {
            "name": "t2n",
            "location": 116,
            "return": [],
            "arguments": {
                "obj": [],
                "dtype": [],
                "sequences": [],
                "mappings": []
            }
        },
        "wrap_torch": {
            "name": "wrap_torch",
            "location": 126,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "call_torch": {
            "name": "call_torch",
            "location": 152,
            "return": [],
            "arguments": {
                "func": [],
                "arg": []
            }
        },
        "call_torch_loader": {
            "name": "call_torch_loader",
            "location": 176,
            "return": [],
            "arguments": {
                "module": [],
                "dataloader": [],
                "dtype": [],
                "device": [],
                "call_model": [],
                "has_label": []
            }
        },
        "default_call_model": {
            "name": "default_call_model",
            "location": 213,
            "return": [],
            "arguments": {
                "model": [],
                "x": []
            }
        },
        "optimizer_step": {
            "name": "optimizer_step",
            "location": 224,
            "return": [],
            "arguments": {
                "optimizer": [],
                "func": []
            }
        },
        "identity": {
            "name": "identity",
            "location": 233,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "linear": {
            "name": "linear",
            "location": 237,
            "return": [],
            "arguments": {
                "x": [],
                "weights": []
            }
        },
        "factorized_quadratic": {
            "name": "factorized_quadratic",
            "location": 248,
            "return": [],
            "arguments": {
                "x": [],
                "weights": []
            }
        },
        "masked_softmax": {
            "name": "masked_softmax",
            "location": 262,
            "return": [],
            "arguments": {
                "logits": [],
                "mask": [],
                "eps": [],
                "dim": []
            }
        },
        "find_module": {
            "name": "find_module",
            "location": 280,
            "return": [],
            "arguments": {
                "root": [],
                "predicate": []
            }
        },
        "format_extra_repr": {
            "name": "format_extra_repr",
            "location": 367,
            "return": [],
            "arguments": {}
        },
        "build_mlp": {
            "name": "build_mlp",
            "location": 488,
            "return": [],
            "arguments": {
                "in_features": [],
                "out_features": []
            }
        },
        "make_data_loader": {
            "name": "make_data_loader",
            "location": 507,
            "return": [],
            "arguments": {
                "dataset": [],
                "mode": []
            }
        },
        "noop_value_module": {
            "name": "noop_value_module",
            "location": 688,
            "return": [],
            "arguments": {
                "_": [],
                "y": []
            }
        },
        "kl_divergence__gamma__log_normal": {
            "name": "kl_divergence__gamma__log_normal",
            "location": 693,
            "return": [],
            "arguments": {
                "p": [],
                "q": []
            }
        },
        "padded_collate_fn": {
            "name": "padded_collate_fn",
            "location": 708,
            "return": [],
            "arguments": {
                "batch": []
            }
        },
        "fixed.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "optimized.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "register_unknown_kl.decorator": {
            "name": "decorator",
            "location": 78,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "n2t.scalar_n2t": {
            "name": "scalar_n2t",
            "location": 101,
            "return": [],
            "arguments": {
                "obj": [],
                "dtype": [],
                "device": []
            }
        },
        "t2n.scalar_t2n": {
            "name": "scalar_t2n",
            "location": 119,
            "return": [],
            "arguments": {
                "obj": [],
                "dtype": []
            }
        },
        "wrap_torch.decorator": {
            "name": "decorator",
            "location": 129,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "TorchWrapper.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "func": [],
                "dtype": [],
                "device": [],
                "batch_size": []
            }
        },
        "TorchWrapper.__call__": {
            "name": "__call__",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiagonalScaleShift.from_data": {
            "name": "from_data",
            "location": 301,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "DiagonalScaleShift.__init__": {
            "name": "__init__",
            "location": 304,
            "return": [],
            "arguments": {
                "self": [],
                "shift": [],
                "scale": []
            }
        },
        "DiagonalScaleShift.forward": {
            "name": "forward",
            "location": 323,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "BinaryOperatorConstant.__init__": {
            "name": "__init__",
            "location": 328,
            "return": [],
            "arguments": {
                "self": [],
                "op": [],
                "value": []
            }
        },
        "BinaryOperatorConstant.forward": {
            "name": "forward",
            "location": 333,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "MultiplyConstant.__init__": {
            "name": "__init__",
            "location": 338,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "DivideConstant.__init__": {
            "name": "__init__",
            "location": 343,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Identity.forward": {
            "name": "forward",
            "location": 348,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Flatten.forward": {
            "name": "forward",
            "location": 353,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Add.__init__": {
            "name": "__init__",
            "location": 360,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Add.forward": {
            "name": "forward",
            "location": 363,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "CallableWrapper.__init__": {
            "name": "__init__",
            "location": 372,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "CallableWrapper.extra_repr": {
            "name": "extra_repr",
            "location": 377,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Do.forward": {
            "name": "forward",
            "location": 384,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Lambda.forward": {
            "name": "forward",
            "location": 390,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CallModule.__init__": {
            "name": "__init__",
            "location": 395,
            "return": [],
            "arguments": {
                "self": [],
                "module": [],
                "caller": []
            }
        },
        "CallModule.forward": {
            "name": "forward",
            "location": 400,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CallModule.extra_repr": {
            "name": "extra_repr",
            "location": 403,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LocationScale.__init__": {
            "name": "__init__",
            "location": 408,
            "return": [],
            "arguments": {
                "self": [],
                "activation": [],
                "eps": []
            }
        },
        "LocationScale.forward": {
            "name": "forward",
            "location": 417,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "LocationScale.extra_repr": {
            "name": "extra_repr",
            "location": 429,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LookupFunction.__init__": {
            "name": "__init__",
            "location": 453,
            "return": [],
            "arguments": {
                "self": [],
                "input_min": [],
                "input_max": [],
                "forward_values": [],
                "backward_values": []
            }
        },
        "LookupFunction.forward": {
            "name": "forward",
            "location": 460,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "_LookupFunction.forward": {
            "name": "forward",
            "location": 468,
            "return": [],
            "arguments": {
                "ctx": [],
                "x": [],
                "input_min": [],
                "input_max": [],
                "forward_values": [],
                "backward_values": []
            }
        },
        "_LookupFunction.backward": {
            "name": "backward",
            "location": 483,
            "return": [],
            "arguments": {
                "ctx": [],
                "grad_output": []
            }
        },
        "NumpyDataset.__init__": {
            "name": "__init__",
            "location": 522,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "dtype": []
            }
        },
        "NumpyDataset._guess_length": {
            "name": "_guess_length",
            "location": 531,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumpyDataset.__len__": {
            "name": "__len__",
            "location": 546,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumpyDataset.__getitem__": {
            "name": "__getitem__",
            "location": 549,
            "return": [],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "TransformedDataset.__init__": {
            "name": "__init__",
            "location": 561,
            "return": [],
            "arguments": {
                "self": [],
                "func": [],
                "base": []
            }
        },
        "TransformedDataset.__len__": {
            "name": "__len__",
            "location": 566,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransformedDataset.__getitem__": {
            "name": "__getitem__",
            "location": 569,
            "return": [],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "Transformer.__init__": {
            "name": "__init__",
            "location": 581,
            "return": [],
            "arguments": {
                "self": [],
                "key_module": [],
                "query_module": [],
                "value_module": [],
                "flatten": [],
                "search_x": [],
                "search_y": []
            }
        },
        "Transformer.forward": {
            "name": "forward",
            "location": 611,
            "return": [],
            "arguments": {
                "self": [],
                "query_x": [],
                "mask": [],
                "soft_mask": [],
                "search_x": [],
                "search_y": []
            }
        },
        "Transformer.compute_weights": {
            "name": "compute_weights",
            "location": 643,
            "return": [],
            "arguments": {
                "self": [],
                "search_x": [],
                "query_x": [],
                "mask": [],
                "soft_mask": []
            }
        },
        "Transformer._ensure_key_shape": {
            "name": "_ensure_key_shape",
            "location": 672,
            "return": [],
            "arguments": {
                "keys": []
            }
        },
        "Transformer._ensure_value_shape": {
            "name": "_ensure_value_shape",
            "location": 680,
            "return": [],
            "arguments": {
                "values": []
            }
        },
        "padded_collate_fn.merge_max_shape": {
            "name": "merge_max_shape",
            "location": 719,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        }
    },
    "misc-exp-master/chmp/src/chmp/widgets/test_init.py": {
        "test_js_expr": {
            "name": "test_js_expr",
            "location": 19,
            "return": [],
            "arguments": {
                "expr": [],
                "obj": [],
                "expected": []
            }
        }
    },
    "misc-exp-master/chmp/src/chmp/widgets/__init__.py": {
        "_jupyter_nbextension_paths": {
            "name": "_jupyter_nbextension_paths",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "run_thread": {
            "name": "run_thread",
            "location": 204,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "stop_thread": {
            "name": "stop_thread",
            "location": 239,
            "return": [],
            "arguments": {
                "func_or_key": []
            }
        },
        "_make_loop": {
            "name": "_make_loop",
            "location": 256,
            "return": [],
            "arguments": {
                "func": [],
                "interval": [],
                "wake_interval": []
            }
        },
        "_run_thread_primitive": {
            "name": "_run_thread_primitive",
            "location": 272,
            "return": [],
            "arguments": {}
        },
        "ensure_thread_registry": {
            "name": "ensure_thread_registry",
            "location": 286,
            "return": [],
            "arguments": {
                "registry": []
            }
        },
        "_stop_thread_primitive": {
            "name": "_stop_thread_primitive",
            "location": 298,
            "return": [],
            "arguments": {
                "registry": [],
                "key": []
            }
        },
        "_dispatch_on_type": {
            "name": "_dispatch_on_type",
            "location": 368,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "_transform_js_to_python": {
            "name": "_transform_js_to_python",
            "location": 389,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "_transform_js_to_python_program": {
            "name": "_transform_js_to_python_program",
            "location": 395,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "_transform_js_to_python_member_expression": {
            "name": "_transform_js_to_python_member_expression",
            "location": 408,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "_transform_js_to_python_binary_epxression": {
            "name": "_transform_js_to_python_binary_epxression",
            "location": 430,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "_transform_js_to_python_identifier": {
            "name": "_transform_js_to_python_identifier",
            "location": 459,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "_transform_js_to_python_literal": {
            "name": "_transform_js_to_python_literal",
            "location": 464,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "CommandInput.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "on_command": []
            }
        },
        "CommandInput.on_command": {
            "name": "on_command",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "CommandInput._on_msg": {
            "name": "_on_msg",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "_": [],
                "ev": [],
                "__": []
            }
        },
        "WidgetRegistry.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WidgetRegistry.__call__": {
            "name": "__call__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "widget": []
            }
        },
        "WidgetRegistry.__getattr__": {
            "name": "__getattr__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "WidgetRegistry.__dir__": {
            "name": "__dir__",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentDatasets.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "datasets": []
            }
        },
        "PersistentDatasets.bind": {
            "name": "bind",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "widget": [],
                "datasets": []
            }
        },
        "PersistentDatasets._update_widgets": {
            "name": "_update_widgets",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "_": []
            }
        },
        "PersistentDatasets.clear": {
            "name": "clear",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "PersistentDatasets.clear_all": {
            "name": "clear_all",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentDatasets.get": {
            "name": "get",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "PersistentDatasets.update": {
            "name": "update",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "PersistentDatasets._update_self": {
            "name": "_update_self",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "remove": [],
                "insert": []
            }
        },
        "run_thread.decorator": {
            "name": "decorator",
            "location": 229,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "_make_loop.loop": {
            "name": "loop",
            "location": 260,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "Context.__init__": {
            "name": "__init__",
            "location": 308,
            "return": [],
            "arguments": {
                "self": [],
                "running": [],
                "thread": []
            }
        },
        "Context.__repr__": {
            "name": "__repr__",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSExpr.__init__": {
            "name": "__init__",
            "location": 319,
            "return": [],
            "arguments": {
                "self": [],
                "argnames": [],
                "expr": []
            }
        },
        "JSExpr.build_code": {
            "name": "build_code",
            "location": 325,
            "return": [],
            "arguments": {
                "expr": [],
                "filename": []
            }
        },
        "JSExpr.__call__": {
            "name": "__call__",
            "location": 339,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSExpr.__repr__": {
            "name": "__repr__",
            "location": 343,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSObj.__init__": {
            "name": "__init__",
            "location": 350,
            "return": [],
            "arguments": {}
        },
        "JSObj.__getattr__": {
            "name": "__getattr__",
            "location": 361,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "JSObj.__getitem__": {
            "name": "__getitem__",
            "location": 364,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "_dispatch_on_type.wrapper": {
            "name": "wrapper",
            "location": 373,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "_dispatch_on_type.register": {
            "name": "register",
            "location": 377,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "_dispatch_on_type.register.decorator": {
            "name": "decorator",
            "location": 378,
            "return": [],
            "arguments": {
                "func": []
            }
        }
    },
    "misc-exp-master/chmp-app-template/{{cookiecutter.full_package}}/setup.py": {},
    "misc-exp-master/chmp-app-template/{{cookiecutter.full_package}}/src/chmp/app/{{cookiecutter.python_package}}/__init__.py": {}
}
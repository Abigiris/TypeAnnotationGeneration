{
    "mkdocs2-master/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 14,
            "return": [],
            "arguments": {
                "package": []
            }
        },
        "get_packages": {
            "name": "get_packages",
            "location": 22,
            "return": [],
            "arguments": {
                "package": []
            }
        },
        "get_package_data": {
            "name": "get_package_data",
            "location": 31,
            "return": [],
            "arguments": {
                "package": []
            }
        },
        "get_long_description": {
            "name": "get_long_description",
            "location": 47,
            "return": [],
            "arguments": {
                "long_description_file": []
            }
        }
    },
    "mkdocs2-master/mkdocs2/cli.py": {
        "build": {
            "name": "build",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "config_file": [
                    "typing.TextIO"
                ]
            }
        },
        "serve": {
            "name": "serve",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "config_file": [
                    "typing.TextIO"
                ]
            }
        },
        "cli": {
            "name": "cli",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mkdocs2-master/mkdocs2/core.py": {
        "build": {
            "name": "build",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "typing.Dict"
                ]
            }
        },
        "gather_files": {
            "name": "gather_files",
            "location": 46,
            "return": [
                "types.Files"
            ],
            "arguments": {
                "input_dir": [
                    "str"
                ],
                "output_dir": [
                    "str"
                ],
                "convertors": [
                    "typing.List[types.Convertor]"
                ],
                "sub_dir": [
                    "str"
                ]
            }
        },
        "load_nav": {
            "name": "load_nav",
            "location": 100,
            "return": [
                "types.Nav"
            ],
            "arguments": {
                "nav_info": [
                    "dict"
                ],
                "files": [
                    "types.Files"
                ],
                "base_url": [
                    "str"
                ]
            }
        },
        "load_nav_items": {
            "name": "load_nav_items",
            "location": 108,
            "return": [
                "typing.List[typing.Union[(types.NavGroup, types.NavPage)]]"
            ],
            "arguments": {
                "nav_info": [
                    "dict"
                ],
                "files": [
                    "types.Files"
                ]
            }
        },
        "import_from_string": {
            "name": "import_from_string",
            "location": 124,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "import_str": [
                    "str"
                ]
            }
        }
    },
    "mkdocs2-master/mkdocs2/types.py": {
        "Convertor.should_handle_file": {
            "name": "should_handle_file",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "input_path": [
                    "str"
                ]
            }
        },
        "Convertor.get_output_path": {
            "name": "get_output_path",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input_path": [
                    "str"
                ]
            }
        },
        "Convertor.get_extra_paths": {
            "name": "get_extra_paths",
            "location": 19,
            "return": [
                "typing.List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Convertor.build_toc": {
            "name": "build_toc",
            "location": 22,
            "return": [
                "typing.Optional['TableOfContents']"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "'File'"
                ],
                "env": [
                    "'Env'"
                ]
            }
        },
        "Convertor.convert": {
            "name": "convert",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "'File'"
                ],
                "env": [
                    "'Env'"
                ]
            }
        },
        "File.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_path": [
                    "str"
                ],
                "output_path": [
                    "str"
                ],
                "input_dir": [
                    "str"
                ],
                "output_dir": [
                    "str"
                ],
                "convertor": [
                    "Convertor"
                ]
            }
        },
        "File.__eq__": {
            "name": "__eq__",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Any"
                ]
            }
        },
        "File.__hash__": {
            "name": "__hash__",
            "location": 57,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.url": {
            "name": "url",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.full_input_path": {
            "name": "full_input_path",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.full_output_path": {
            "name": "full_output_path",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.read_input_text": {
            "name": "read_input_text",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.write_output_text": {
            "name": "write_output_text",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Files.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "files": [
                    "typing.List[File]"
                ]
            }
        },
        "Files.__iter__": {
            "name": "__iter__",
            "location": 99,
            "return": [
                "typing.Iterator[File]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Files.__len__": {
            "name": "__len__",
            "location": 102,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Files.__eq__": {
            "name": "__eq__",
            "location": 105,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Any"
                ]
            }
        },
        "Files.__getitem__": {
            "name": "__getitem__",
            "location": 108,
            "return": [
                "File"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "Files.__add__": {
            "name": "__add__",
            "location": 111,
            "return": [
                "'Files'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'Files'"
                ]
            }
        },
        "Files.__iadd__": {
            "name": "__iadd__",
            "location": 114,
            "return": [
                "'Files'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'Files'"
                ]
            }
        },
        "Files.append": {
            "name": "append",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "File"
                ]
            }
        },
        "Files.get_by_input_path": {
            "name": "get_by_input_path",
            "location": 127,
            "return": [
                "File"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Files.get_by_url_path": {
            "name": "get_by_url_path",
            "location": 130,
            "return": [
                "File"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "NavGroup.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "str"
                ],
                "children": [
                    "typing.List[typing.Union[('NavGroup', 'NavPage')]]"
                ]
            }
        },
        "NavGroup.__eq__": {
            "name": "__eq__",
            "location": 152,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Any"
                ]
            }
        },
        "NavGroup.walk_pages": {
            "name": "walk_pages",
            "location": 159,
            "return": [
                "typing.List['NavPage']"
            ],
            "arguments": {
                "self": []
            }
        },
        "NavPage.__init__": {
            "name": "__init__",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "str"
                ],
                "file": [
                    "File"
                ]
            }
        },
        "NavPage.__eq__": {
            "name": "__eq__",
            "location": 183,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Any"
                ]
            }
        },
        "NavPage.walk_pages": {
            "name": "walk_pages",
            "location": 190,
            "return": [
                "typing.List['NavPage']"
            ],
            "arguments": {
                "self": []
            }
        },
        "NavPage.get_nav": {
            "name": "get_nav",
            "location": 193,
            "return": [
                "'Nav'"
            ],
            "arguments": {
                "self": []
            }
        },
        "NavPage.url": {
            "name": "url",
            "location": 201,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nav.__init__": {
            "name": "__init__",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "typing.List[typing.Union[(NavGroup, NavPage)]]"
                ],
                "base_url": [
                    "str"
                ]
            }
        },
        "Nav.__iter__": {
            "name": "__iter__",
            "location": 274,
            "return": [
                "typing.Iterable[typing.Union[(NavGroup, NavPage)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nav.__getitem__": {
            "name": "__getitem__",
            "location": 277,
            "return": [
                "typing.Union[(NavGroup, NavPage)]"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int"
                ]
            }
        },
        "Nav.__len__": {
            "name": "__len__",
            "location": 280,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nav.__bool__": {
            "name": "__bool__",
            "location": 283,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nav.__eq__": {
            "name": "__eq__",
            "location": 286,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Any"
                ]
            }
        },
        "Nav.walk_pages": {
            "name": "walk_pages",
            "location": 289,
            "return": [
                "typing.List['NavPage']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nav.lookup_page": {
            "name": "lookup_page",
            "location": 299,
            "return": [
                "typing.Optional[NavPage]"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "File"
                ]
            }
        },
        "Nav.activate": {
            "name": "activate",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "File"
                ]
            }
        },
        "Nav.deactivate": {
            "name": "deactivate",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Header.__init__": {
            "name": "__init__",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "level": [
                    "int"
                ],
                "children": [
                    "typing.List['Header']"
                ]
            }
        },
        "TableOfContents.__init__": {
            "name": "__init__",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "typing.List[Header]"
                ]
            }
        },
        "Env.__init__": {
            "name": "__init__",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "files": [
                    "Files"
                ],
                "nav": [
                    "Nav"
                ],
                "template_dir": [
                    "str"
                ],
                "base_url": [
                    "str"
                ],
                "config": [
                    "typing.Dict"
                ]
            }
        },
        "Env.get_template_env": {
            "name": "get_template_env",
            "location": 367,
            "return": [
                "jinja2.Environment"
            ],
            "arguments": {
                "self": [],
                "template_dir": [
                    "str"
                ]
            }
        },
        "Env.get_url": {
            "name": "get_url",
            "location": 371,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "hyperlink": [
                    "str"
                ],
                "from_file": [
                    "File"
                ]
            }
        },
        "Env.render_template": {
            "name": "render_template",
            "location": 418,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "template_path": [
                    "str"
                ],
                "context": [
                    "dict"
                ]
            }
        }
    },
    "mkdocs2-master/mkdocs2/__init__.py": {},
    "mkdocs2-master/mkdocs2/convertors/code_highlight.py": {
        "CodeHighlight.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "style": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "CodeHighlight.should_handle_file": {
            "name": "should_handle_file",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "input_path": [
                    "str"
                ]
            }
        },
        "CodeHighlight.get_extra_paths": {
            "name": "get_extra_paths",
            "location": 16,
            "return": [
                "typing.List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeHighlight.build_toc": {
            "name": "build_toc",
            "location": 19,
            "return": [
                "typing.Optional[TableOfContents]"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "File"
                ],
                "env": [
                    "Env"
                ]
            }
        },
        "CodeHighlight.convert": {
            "name": "convert",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "File"
                ],
                "env": [
                    "Env"
                ]
            }
        }
    },
    "mkdocs2-master/mkdocs2/convertors/markdown_pages.py": {
        "MarkdownPages.should_handle_file": {
            "name": "should_handle_file",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "input_path": [
                    "str"
                ]
            }
        },
        "MarkdownPages.get_output_path": {
            "name": "get_output_path",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input_path": [
                    "str"
                ]
            }
        },
        "MarkdownPages.get_extra_paths": {
            "name": "get_extra_paths",
            "location": 27,
            "return": [
                "typing.List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MarkdownPages.build_toc": {
            "name": "build_toc",
            "location": 30,
            "return": [
                "typing.Optional[TableOfContents]"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "File"
                ],
                "env": [
                    "Env"
                ]
            }
        },
        "MarkdownPages.convert": {
            "name": "convert",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "File"
                ],
                "env": [
                    "Env"
                ]
            }
        },
        "MarkdownPages.build_toc.get_headers": {
            "name": "get_headers",
            "location": 33,
            "return": [
                "typing.List[Header]"
            ],
            "arguments": {
                "toc_tokens": [
                    "typing.List[dict]"
                ]
            }
        }
    },
    "mkdocs2-master/mkdocs2/convertors/static_files.py": {
        "StaticFiles.should_handle_file": {
            "name": "should_handle_file",
            "location": 7,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "input_path": [
                    "str"
                ]
            }
        },
        "StaticFiles.get_output_path": {
            "name": "get_output_path",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input_path": [
                    "str"
                ]
            }
        },
        "StaticFiles.get_extra_paths": {
            "name": "get_extra_paths",
            "location": 13,
            "return": [
                "typing.List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StaticFiles.build_toc": {
            "name": "build_toc",
            "location": 16,
            "return": [
                "typing.Optional[TableOfContents]"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "File"
                ],
                "env": [
                    "Env"
                ]
            }
        },
        "StaticFiles.convert": {
            "name": "convert",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "File"
                ],
                "env": [
                    "Env"
                ]
            }
        }
    },
    "mkdocs2-master/mkdocs2/convertors/__init__.py": {},
    "mkdocs2-master/mkdocs2/markdown_extensions/autodoc.py": {
        "get_params": {
            "name": "get_params",
            "location": 16,
            "return": [
                "typing.List[str]"
            ],
            "arguments": {
                "signature": [
                    "inspect.Signature"
                ]
            }
        },
        "last_iter": {
            "name": "last_iter",
            "location": 50,
            "return": [
                "typing.Iterator"
            ],
            "arguments": {
                "seq": [
                    "typing.Sequence"
                ]
            }
        },
        "trim_docstring": {
            "name": "trim_docstring",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "docstring": [
                    "typing.Optional[str]"
                ]
            }
        },
        "AutoDocProcessor.test": {
            "name": "test",
            "location": 136,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "etree.Element"
                ],
                "block": [
                    "etree.Element"
                ]
            }
        },
        "AutoDocProcessor.run": {
            "name": "run",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "etree.Element"
                ],
                "blocks": [
                    "etree.Element"
                ]
            }
        },
        "AutoDocProcessor.render_signature": {
            "name": "render_signature",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elem": [
                    "etree.Element"
                ],
                "item": [
                    "typing.Any"
                ],
                "import_string": [
                    "str"
                ]
            }
        },
        "AutoDocProcessor.render_docstring": {
            "name": "render_docstring",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elem": [
                    "etree.Element"
                ],
                "item": [
                    "typing.Any"
                ],
                "docstring": [
                    "str"
                ]
            }
        },
        "AutoDocProcessor.render_members": {
            "name": "render_members",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elem": [
                    "etree.Element"
                ],
                "item": [
                    "typing.Any"
                ]
            }
        },
        "AutoDocExtension.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "Markdown"
                ]
            }
        }
    },
    "mkdocs2-master/mkdocs2/markdown_extensions/convert_urls.py": {
        "URLProcessor.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "convert_url": [
                    "typing.Callable[([str], str)]"
                ]
            }
        },
        "URLProcessor.run": {
            "name": "run",
            "location": 12,
            "return": [
                "etree.ElementTree"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "etree.ElementTree"
                ]
            }
        },
        "ConvertURLs.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "convert_url": [
                    "typing.Callable[([str], str)]"
                ]
            }
        },
        "ConvertURLs.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "Markdown"
                ]
            }
        }
    },
    "mkdocs2-master/mkdocs2/markdown_extensions/search_index.py": {
        "SearchIndexProcessor.run": {
            "name": "run",
            "location": 8,
            "return": [
                "etree.ElementTree"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "etree.ElementTree"
                ]
            }
        },
        "SearchIndex.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "Markdown"
                ]
            }
        }
    },
    "mkdocs2-master/mkdocs2/markdown_extensions/__init__.py": {},
    "mkdocs2-master/tests/test_cli.py": {
        "write_file": {
            "name": "write_file",
            "location": 6,
            "return": [],
            "arguments": {
                "path": [],
                "text": []
            }
        },
        "test_build": {
            "name": "test_build",
            "location": 17,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "mkdocs2-master/tests/test_core.py": {
        "write_file": {
            "name": "write_file",
            "location": 7,
            "return": [],
            "arguments": {
                "path": [],
                "text": []
            }
        },
        "test_build": {
            "name": "test_build",
            "location": 18,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_import_from_string": {
            "name": "test_import_from_string",
            "location": 62,
            "return": [],
            "arguments": {}
        }
    },
    "mkdocs2-master/tests/test_structures.py": {
        "write_file": {
            "name": "write_file",
            "location": 7,
            "return": [],
            "arguments": {
                "path": [],
                "text": []
            }
        },
        "test_gather_files": {
            "name": "test_gather_files",
            "location": 18,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_overwrite_files": {
            "name": "test_overwrite_files",
            "location": 63,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_load_nav": {
            "name": "test_load_nav",
            "location": 102,
            "return": [],
            "arguments": {}
        },
        "test_activate_nav": {
            "name": "test_activate_nav",
            "location": 170,
            "return": [],
            "arguments": {}
        },
        "test_urls_for_files": {
            "name": "test_urls_for_files",
            "location": 232,
            "return": [],
            "arguments": {}
        },
        "test_url_function": {
            "name": "test_url_function",
            "location": 252,
            "return": [],
            "arguments": {}
        },
        "test_nav_absolute_urls": {
            "name": "test_nav_absolute_urls",
            "location": 373,
            "return": [],
            "arguments": {}
        },
        "test_nav_relative_urls": {
            "name": "test_nav_relative_urls",
            "location": 424,
            "return": [],
            "arguments": {}
        }
    },
    "mkdocs2-master/tests/import_examples/example_module.py": {
        "example_function": {
            "name": "example_function",
            "location": 1,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "ExampleClass.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "ExampleClass.example_method": {
            "name": "example_method",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mkdocs2-master/tests/import_examples/raise_unrelated_import_error.py": {},
    "mkdocs2-master/tests/import_examples/__init__.py": {},
    "mkdocs2-master/tests/test_markdown_extensions/test_autodoc.py": {
        "test_autodoc_function": {
            "name": "test_autodoc_function",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_autodoc_class": {
            "name": "test_autodoc_class",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_autodoc_class_members": {
            "name": "test_autodoc_class_members",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "test_autodoc_trailing_text": {
            "name": "test_autodoc_trailing_text",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "test_trim_docstring": {
            "name": "test_trim_docstring",
            "location": 94,
            "return": [],
            "arguments": {}
        },
        "test_get_params": {
            "name": "test_get_params",
            "location": 114,
            "return": [],
            "arguments": {}
        },
        "test_trim_docstring.test_no_docstring": {
            "name": "test_no_docstring",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "test_trim_docstring.test_singleline_docstring": {
            "name": "test_singleline_docstring",
            "location": 98,
            "return": [],
            "arguments": {}
        },
        "test_trim_docstring.test_multiline_docstring": {
            "name": "test_multiline_docstring",
            "location": 102,
            "return": [],
            "arguments": {}
        },
        "test_get_params.generics": {
            "name": "generics",
            "location": 115,
            "return": [],
            "arguments": {}
        },
        "test_get_params.keyword_only": {
            "name": "keyword_only",
            "location": 118,
            "return": [],
            "arguments": {}
        }
    },
    "mkdocs2-master/tests/test_markdown_extensions/test_search_index.py": {
        "test_search_index": {
            "name": "test_search_index",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    }
}
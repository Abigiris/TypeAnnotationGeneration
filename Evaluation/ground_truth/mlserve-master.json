{
    "mlserve-master/setup.py": {
        "read": {
            "name": "read",
            "location": 13,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "read_version": {
            "name": "read_version",
            "location": 28,
            "return": [],
            "arguments": {}
        }
    },
    "mlserve-master/examples/multiple/boston_gbr/boston_gbr.py": {},
    "mlserve-master/examples/multiple/diabetes/diabetes_lasso.py": {},
    "mlserve-master/examples/multiple/instagram/instagram_inf.py": {},
    "mlserve-master/examples/multiple/iris_lr/iris_lr.py": {},
    "mlserve-master/examples/multiple/toxic_lr/toxic_lr.py": {
        "read_data": {
            "name": "read_data",
            "location": 16,
            "return": [],
            "arguments": {
                "dataset_path": []
            }
        },
        "ColumnSelector.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ColumnSelector.fit": {
            "name": "fit",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "ColumnSelector.transform": {
            "name": "transform",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "df": []
            }
        }
    },
    "mlserve-master/examples/multiple/wine_rf/wine_rf.py": {},
    "mlserve-master/examples/simple/boston_gbr.py": {},
    "mlserve-master/mlserve/consts.py": {},
    "mlserve-master/mlserve/exceptions.py": {
        "RESTError.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [
                    "'RESTError'"
                ],
                "message": [
                    "Optional[str]"
                ],
                "status_code": []
            }
        },
        "RestClientError.status_code": {
            "name": "status_code",
            "location": 51,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlainRestError.error_text": {
            "name": "error_text",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mlserve-master/mlserve/handlers.py": {
        "path_serializer": {
            "name": "path_serializer",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "Any"
                ]
            }
        },
        "setup_app_routes": {
            "name": "setup_app_routes",
            "location": 46,
            "return": [
                "web.Application"
            ],
            "arguments": {
                "app": [
                    "web.Application"
                ],
                "handler": [
                    "SiteHandler"
                ]
            }
        },
        "setup_api_routes": {
            "name": "setup_api_routes",
            "location": 122,
            "return": [
                "web.Application"
            ],
            "arguments": {
                "api": [
                    "web.Application"
                ],
                "handler": [
                    "APIHandler"
                ]
            }
        },
        "SiteHandler.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project_root": [
                    "Path"
                ]
            }
        },
        "SiteHandler.project_root": {
            "name": "project_root",
            "location": 38,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "APIHandler.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "web.Application"
                ],
                "executor": [
                    "ProcessPoolExecutor"
                ],
                "project_root": [
                    "Path"
                ],
                "model_descs": [
                    "List[ModelDescriptor]"
                ]
            }
        },
        "APIHandler.validate_model_name": {
            "name": "validate_model_name",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "model_name": [
                    "str"
                ]
            }
        }
    },
    "mlserve-master/mlserve/loaders.py": {
        "pickle_loader": {
            "name": "pickle_loader",
            "location": 5,
            "return": [
                "Any"
            ],
            "arguments": {
                "model_path": [
                    "str"
                ]
            }
        },
        "joblib_loader": {
            "name": "joblib_loader",
            "location": 11,
            "return": [
                "Any"
            ],
            "arguments": {
                "model_path": [
                    "str"
                ]
            }
        },
        "get_loader": {
            "name": "get_loader",
            "location": 18,
            "return": [
                "Callable[([str], Any)]"
            ],
            "arguments": {
                "loader_name": [
                    "str"
                ]
            }
        }
    },
    "mlserve-master/mlserve/main.py": {
        "_cli_parser": {
            "name": "_cli_parser",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mlserve-master/mlserve/middleware.py": {
        "process_request": {
            "name": "process_request",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "req": [
                    "Request"
                ],
                "resp": [
                    "Response"
                ],
                "ts": [
                    "datetime"
                ],
                "duration": [
                    "float"
                ]
            }
        }
    },
    "mlserve-master/mlserve/schema_builder.py": {
        "as_json_table_type": {
            "name": "as_json_table_type",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "x": []
            }
        },
        "make_field": {
            "name": "make_field",
            "location": 58,
            "return": [],
            "arguments": {
                "arr": [
                    "pd.Series"
                ]
            }
        },
        "build_schema": {
            "name": "build_schema",
            "location": 99,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "data": [
                    "pd.DataFrame"
                ],
                "include_example": [
                    "bool"
                ]
            }
        }
    },
    "mlserve-master/mlserve/server_utils.py": {},
    "mlserve-master/mlserve/stats.py": {
        "factory": {
            "name": "factory",
            "location": 15,
            "return": [
                "Deque[RequestTiming]"
            ],
            "arguments": {
                "maxlen": [
                    "int"
                ]
            }
        },
        "_Stats.mean_resp_time": {
            "name": "mean_resp_time",
            "location": 25,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Stats.formatted": {
            "name": "formatted",
            "location": 29,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelStats.log_data_point": {
            "name": "log_data_point",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "RequestTiming"
                ]
            }
        },
        "AggStats.from_models_stats": {
            "name": "from_models_stats",
            "location": 52,
            "return": [
                "'AggStats'"
            ],
            "arguments": {
                "cls": [],
                "stats_map": [
                    "Dict[(str, ModelStats)]"
                ]
            }
        }
    },
    "mlserve-master/mlserve/utils.py": {
        "load_model_config": {
            "name": "load_model_config",
            "location": 64,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "fname": [
                    "Path"
                ]
            }
        },
        "load_models": {
            "name": "load_models",
            "location": 71,
            "return": [
                "List[ModelDescriptor]"
            ],
            "arguments": {
                "model_conf": [
                    "List[Dict[(str, str)]]"
                ]
            }
        },
        "drop_columns": {
            "name": "drop_columns",
            "location": 100,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "schema": [
                    "Dict[(str, Any)]"
                ],
                "columns": [
                    "List[str]"
                ]
            }
        },
        "ModelDescriptor.asdict": {
            "name": "asdict",
            "location": 60,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mlserve-master/mlserve/worker.py": {
        "clean_worker": {
            "name": "clean_worker",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "warm": {
            "name": "warm",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "models": [
                    "List[ModelDescriptor]"
                ],
                "cache": [
                    "Optional[Cache]"
                ],
                "init_signals": [
                    "bool"
                ]
            }
        },
        "format_result": {
            "name": "format_result",
            "location": 43,
            "return": [
                "List[Dict[(str, float)]]"
            ],
            "arguments": {
                "pred": [
                    "np.ndarray"
                ],
                "target": [
                    "List[str]"
                ]
            }
        },
        "predict": {
            "name": "predict",
            "location": 57,
            "return": [
                "List[Dict[(str, float)]]"
            ],
            "arguments": {
                "model_name": [
                    "str"
                ],
                "target": [
                    "List[str]"
                ],
                "raw_data": [
                    "bytes"
                ],
                "cache": [
                    "Optional[Cache]"
                ]
            }
        }
    },
    "mlserve-master/mlserve/__init__.py": {},
    "mlserve-master/mlserve/__main__.py": {},
    "mlserve-master/tests/conftest.py": {
        "event_loop": {
            "name": "event_loop",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "loop": {
            "name": "loop",
            "location": 20,
            "return": [],
            "arguments": {
                "event_loop": []
            }
        },
        "model_conf": {
            "name": "model_conf",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "max_workers": {
            "name": "max_workers",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "api": {
            "name": "api",
            "location": 47,
            "return": [],
            "arguments": {
                "loop": [],
                "aiohttp_client": [],
                "max_workers": [],
                "model_conf": []
            }
        }
    },
    "mlserve-master/tests/test_handlers.py": {},
    "mlserve-master/tests/test_loaders.py": {
        "test_pickle_loader": {
            "name": "test_pickle_loader",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test_joblib_loader": {
            "name": "test_joblib_loader",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "mlserve-master/tests/test_schema_builder.py": {
        "auto_dataset": {
            "name": "auto_dataset",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "credit_dataset": {
            "name": "credit_dataset",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "assert_schema": {
            "name": "assert_schema",
            "location": 27,
            "return": [],
            "arguments": {
                "df": []
            }
        },
        "test_basic": {
            "name": "test_basic",
            "location": 41,
            "return": [],
            "arguments": {
                "auto_dataset": [],
                "credit_dataset": []
            }
        },
        "test_none": {
            "name": "test_none",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "test_types": {
            "name": "test_types",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "test_text_area": {
            "name": "test_text_area",
            "location": 68,
            "return": [],
            "arguments": {}
        }
    },
    "mlserve-master/tests/test_stats.py": {
        "test_request_timing_ctor": {
            "name": "test_request_timing_ctor",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "test_model_stats_ctor": {
            "name": "test_model_stats_ctor",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_model_stats_log_data_point": {
            "name": "test_model_stats_log_data_point",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "test_agg_stats_ctor": {
            "name": "test_agg_stats_ctor",
            "location": 39,
            "return": [],
            "arguments": {}
        }
    },
    "mlserve-master/tests/test_utitls.py": {
        "test_load_models": {
            "name": "test_load_models",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "model_desc": {
            "name": "model_desc",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "test_warm_predict": {
            "name": "test_warm_predict",
            "location": 61,
            "return": [],
            "arguments": {
                "model_desc": []
            }
        }
    }
}
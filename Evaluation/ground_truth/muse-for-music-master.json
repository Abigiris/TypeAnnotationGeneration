{
    "muse-for-music-master/setup.py": {},
    "muse-for-music-master/tasks.py": {
        "test_for_existing_manifest_file": {
            "name": "test_for_existing_manifest_file",
            "location": 18,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "clean_js_dependencies": {
            "name": "clean_js_dependencies",
            "location": 25,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "dependencies_py": {
            "name": "dependencies_py",
            "location": 31,
            "return": [],
            "arguments": {
                "c": [],
                "production": []
            }
        },
        "dependencies_js": {
            "name": "dependencies_js",
            "location": 39,
            "return": [],
            "arguments": {
                "c": [],
                "clean_dependencies": []
            }
        },
        "dependencies": {
            "name": "dependencies",
            "location": 47,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "build": {
            "name": "build",
            "location": 52,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "fill_db": {
            "name": "fill_db",
            "location": 60,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "create_test_db": {
            "name": "create_test_db",
            "location": 66,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "start_js": {
            "name": "start_js",
            "location": 72,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "start_py": {
            "name": "start_py",
            "location": 78,
            "return": [],
            "arguments": {
                "c": [],
                "with_db": []
            }
        }
    },
    "muse-for-music-master/migrations/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "run_migrations_online.process_revision_directives": {
            "name": "process_revision_directives",
            "location": 62,
            "return": [],
            "arguments": {
                "context": [],
                "revision": [],
                "directives": []
            }
        }
    },
    "muse-for-music-master/migrations/versions/08b69a172bb7_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 27,
            "return": [],
            "arguments": {}
        }
    },
    "muse-for-music-master/migrations/versions/38ed909ec074_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 44,
            "return": [],
            "arguments": {}
        }
    },
    "muse-for-music-master/migrations/versions/563a2aa9584c_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 28,
            "return": [],
            "arguments": {}
        }
    },
    "muse-for-music-master/migrations/versions/5d1b25e05af8_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 1179,
            "return": [],
            "arguments": {}
        }
    },
    "muse-for-music-master/migrations/versions/6332c52bf469_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 31,
            "return": [],
            "arguments": {}
        }
    },
    "muse-for-music-master/migrations/versions/638ae6935168_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 133,
            "return": [],
            "arguments": {}
        }
    },
    "muse-for-music-master/migrations/versions/88a8835f8310_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 35,
            "return": [],
            "arguments": {}
        }
    },
    "muse-for-music-master/migrations/versions/bb0693433148_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 27,
            "return": [],
            "arguments": {}
        }
    },
    "muse-for-music-master/muse_for_music/config.py": {},
    "muse-for-music-master/muse_for_music/hal_field.py": {
        "newInit": {
            "name": "newInit",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "newSchema": {
            "name": "newSchema",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_schema": {
            "name": "_schema",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NestedFields.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "NestedFields.output": {
            "name": "output",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "obj": [],
                "ordered": []
            }
        },
        "NestedModel.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "attribute": [
                    "str"
                ],
                "as_list": [
                    "bool"
                ]
            }
        },
        "NestedModel.nested": {
            "name": "nested",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmbeddedFields.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "embedded_models": [
                    "Dict[(str, NestedModel)]"
                ]
            }
        },
        "EmbeddedFields.nested_model": {
            "name": "nested_model",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "EmbeddedFields.output": {
            "name": "output",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "obj": [],
                "orderes": []
            }
        },
        "EmbeddedFields.schema": {
            "name": "schema",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UrlData.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "endpoint": [
                    "str"
                ],
                "absolute": [],
                "scheme": [],
                "url": [
                    "str"
                ],
                "title": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "templated": [
                    "bool"
                ],
                "url_data": [
                    "dict"
                ],
                "path_variables": [
                    "list"
                ],
                "hashtag": [
                    "str"
                ]
            }
        },
        "UrlData.url": {
            "name": "url",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "HaLUrl.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "url_data": [
                    "Union[(UrlData, List[UrlData])]"
                ]
            }
        },
        "HaLUrl.output": {
            "name": "output",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "obj": [],
                "ordered": []
            }
        },
        "HaLUrl.generate_link": {
            "name": "generate_link",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "url_data": [
                    "UrlData"
                ],
                "obj": []
            }
        },
        "HaLUrl.schema": {
            "name": "schema",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "muse-for-music-master/muse_for_music/routes.py": {
        "index": {
            "name": "index",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "asset": {
            "name": "asset",
            "location": 21,
            "return": [],
            "arguments": {
                "file": []
            }
        }
    },
    "muse-for-music-master/muse_for_music/__init__.py": {},
    "muse-for-music-master/muse_for_music/api/models.py": {},
    "muse-for-music-master/muse_for_music/api/root.py": {
        "RootResource.get": {
            "name": "get",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "muse-for-music-master/muse_for_music/api/__init__.py": {
        "handle_validation_erorr": {
            "name": "handle_validation_erorr",
            "location": 29,
            "return": [],
            "arguments": {
                "error": [
                    "ValidationError"
                ]
            }
        },
        "missing_header": {
            "name": "missing_header",
            "location": 38,
            "return": [],
            "arguments": {
                "error": []
            }
        }
    },
    "muse-for-music-master/muse_for_music/api/data/backup.py": {
        "to_backup_json": {
            "name": "to_backup_json",
            "location": 26,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "opus_to_backup_json": {
            "name": "opus_to_backup_json",
            "location": 37,
            "return": [],
            "arguments": {
                "obj": [
                    "Opus"
                ]
            }
        },
        "part_to_backup_json": {
            "name": "part_to_backup_json",
            "location": 44,
            "return": [],
            "arguments": {
                "obj": [
                    "Part"
                ]
            }
        },
        "subpart_to_backup_json": {
            "name": "subpart_to_backup_json",
            "location": 51,
            "return": [],
            "arguments": {
                "obj": [
                    "SubPart"
                ]
            }
        },
        "voice_to_backup_json": {
            "name": "voice_to_backup_json",
            "location": 59,
            "return": [],
            "arguments": {
                "obj": [
                    "Voice"
                ]
            }
        }
    },
    "muse-for-music-master/muse_for_music/api/data/history.py": {
        "HistoryResource.get": {
            "name": "get",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserHistoryResource.get": {
            "name": "get",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "username": []
            }
        }
    },
    "muse-for-music-master/muse_for_music/api/data/models.py": {
        "parse_date": {
            "name": "parse_date",
            "location": 20,
            "return": [
                "date"
            ],
            "arguments": {
                "date_str": [
                    "str"
                ]
            }
        },
        "EnumField.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnumField.format": {
            "name": "format",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Enum"
                ]
            }
        },
        "EnumField.schema": {
            "name": "schema",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "muse-for-music-master/muse_for_music/api/data/opus.py": {
        "OpusListResource.get": {
            "name": "get",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpusListResource.post": {
            "name": "post",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpusResource.get": {
            "name": "get",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "OpusResource.put": {
            "name": "put",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "OpusResource.delete": {
            "name": "delete",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "OpusPartsResource.get": {
            "name": "get",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "OpusPartsResource.post": {
            "name": "post",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        }
    },
    "muse-for-music-master/muse_for_music/api/data/part.py": {
        "PartsListResource.get": {
            "name": "get",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PartResource.get": {
            "name": "get",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "PartResource.put": {
            "name": "put",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "PartResource.delete": {
            "name": "delete",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "PartSubpartsResource.get": {
            "name": "get",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "PartSubpartsResource.post": {
            "name": "post",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        }
    },
    "muse-for-music-master/muse_for_music/api/data/people.py": {
        "check_if_person_exists": {
            "name": "check_if_person_exists",
            "location": 30,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "check_if_person_is_in_use": {
            "name": "check_if_person_is_in_use",
            "location": 36,
            "return": [],
            "arguments": {
                "person": [
                    "Person"
                ]
            }
        },
        "PersonListResource.get": {
            "name": "get",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersonListResource.post": {
            "name": "post",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersonResource.get": {
            "name": "get",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "PersonResource.put": {
            "name": "put",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "PersonResource.delete": {
            "name": "delete",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        }
    },
    "muse-for-music-master/muse_for_music/api/data/subpart.py": {
        "SubPartListResource.get": {
            "name": "get",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubPartResource.get": {
            "name": "get",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "subpart_id": []
            }
        },
        "SubPartResource.put": {
            "name": "put",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "subpart_id": []
            }
        },
        "SubPartResource.delete": {
            "name": "delete",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "subpart_id": []
            }
        },
        "SubPartVoiceListResource.get": {
            "name": "get",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "subpart_id": []
            }
        },
        "SubPartVoiceListResource.post": {
            "name": "post",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "subpart_id": []
            }
        },
        "SubPartVoiceResource.get": {
            "name": "get",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "subpart_id": [],
                "voice_id": []
            }
        },
        "SubPartVoiceResource.put": {
            "name": "put",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "subpart_id": [],
                "voice_id": []
            }
        },
        "SubPartVoiceResource.delete": {
            "name": "delete",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "subpart_id": [],
                "voice_id": []
            }
        }
    },
    "muse-for-music-master/muse_for_music/api/data/__init__.py": {},
    "muse-for-music-master/muse_for_music/api/taxonomies/models.py": {
        "TaxonomyItems.format": {
            "name": "format",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "items": []
            }
        },
        "TaxonomyItems.schema": {
            "name": "schema",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "muse-for-music-master/muse_for_music/api/taxonomies/__init__.py": {
        "get_taxonomy": {
            "name": "get_taxonomy",
            "location": 36,
            "return": [
                "Type[T]"
            ],
            "arguments": {
                "taxonomy_type": [
                    "str"
                ],
                "taxonomy_name": [
                    "str"
                ]
            }
        },
        "get_taxonomy_item": {
            "name": "get_taxonomy_item",
            "location": 98,
            "return": [
                "T"
            ],
            "arguments": {
                "tax": [
                    "Type[T]"
                ],
                "item_id": []
            }
        },
        "create_taxonomy_item": {
            "name": "create_taxonomy_item",
            "location": 105,
            "return": [
                "T"
            ],
            "arguments": {
                "tax": [
                    "Type[T]"
                ],
                "new_values": []
            }
        },
        "edit_taxonomy_item": {
            "name": "edit_taxonomy_item",
            "location": 120,
            "return": [],
            "arguments": {
                "item": [
                    "T"
                ],
                "new_values": [
                    "Dict"
                ]
            }
        },
        "delete_taxonomy_item": {
            "name": "delete_taxonomy_item",
            "location": 138,
            "return": [],
            "arguments": {
                "taxonomy": [
                    "Type[T]"
                ],
                "item_id": [
                    "int"
                ]
            }
        },
        "TaxonomyListResource.get": {
            "name": "get",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TaxonomyResource.get": {
            "name": "get",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "taxonomy_type": [
                    "str"
                ],
                "taxonomy": [
                    "str"
                ]
            }
        },
        "ListTaxonomyResource.get": {
            "name": "get",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "taxonomy": [
                    "str"
                ]
            }
        },
        "ListTaxonomyResource.post": {
            "name": "post",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "taxonomy": [
                    "str"
                ]
            }
        },
        "TreeTaxonomyResource.get": {
            "name": "get",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "taxonomy": [
                    "str"
                ]
            }
        },
        "TaxonomyItemResource.get": {
            "name": "get",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "taxonomy_type": [
                    "str"
                ],
                "taxonomy": [
                    "str"
                ],
                "item_id": [
                    "int"
                ]
            }
        },
        "TaxonomyItemResource.put": {
            "name": "put",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "taxonomy_type": [
                    "str"
                ],
                "taxonomy": [
                    "str"
                ],
                "item_id": [
                    "int"
                ]
            }
        },
        "TaxonomyItemResource.delete": {
            "name": "delete",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "taxonomy_type": [
                    "str"
                ],
                "taxonomy": [
                    "str"
                ],
                "item_id": [
                    "int"
                ]
            }
        },
        "ListTaxonomyItemResource.get": {
            "name": "get",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "taxonomy": [
                    "str"
                ],
                "item_id": [
                    "int"
                ]
            }
        },
        "ListTaxonomyItemResource.put": {
            "name": "put",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "taxonomy": [
                    "str"
                ],
                "item_id": [
                    "int"
                ]
            }
        },
        "ListTaxonomyItemResource.delete": {
            "name": "delete",
            "location": 225,
            "return": [],
            "arguments": {
                "self": [],
                "taxonomy": [
                    "str"
                ],
                "item_id": [
                    "int"
                ]
            }
        },
        "TreeTaxonomyItemResource.get": {
            "name": "get",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "taxonomy": [
                    "str"
                ],
                "item_id": [
                    "int"
                ]
            }
        },
        "TreeTaxonomyItemResource.post": {
            "name": "post",
            "location": 251,
            "return": [],
            "arguments": {
                "self": [],
                "taxonomy": [
                    "str"
                ],
                "item_id": [
                    "int"
                ]
            }
        },
        "TreeTaxonomyItemResource.put": {
            "name": "put",
            "location": 269,
            "return": [],
            "arguments": {
                "self": [],
                "taxonomy": [
                    "str"
                ],
                "item_id": [
                    "int"
                ]
            }
        },
        "TreeTaxonomyItemResource.delete": {
            "name": "delete",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "taxonomy": [
                    "str"
                ],
                "item_id": [
                    "int"
                ]
            }
        }
    },
    "muse-for-music-master/muse_for_music/debug_routes/debug_db_models.py": {
        "_inspect_module": {
            "name": "_inspect_module",
            "location": 26,
            "return": [],
            "arguments": {
                "module": []
            }
        },
        "_fill_class_dicts": {
            "name": "_fill_class_dicts",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "_get_class_attributes": {
            "name": "_get_class_attributes",
            "location": 60,
            "return": [],
            "arguments": {
                "attributes": [],
                "cls": [],
                "properties": [],
                "mapper_attrs": [],
                "table_attributes": []
            }
        },
        "_analyze_db_model": {
            "name": "_analyze_db_model",
            "location": 95,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "model_overview": {
            "name": "model_overview",
            "location": 168,
            "return": [],
            "arguments": {}
        },
        "model_detail": {
            "name": "model_detail",
            "location": 177,
            "return": [],
            "arguments": {
                "classname": []
            }
        }
    },
    "muse-for-music-master/muse_for_music/debug_routes/debug_taxonomies.py": {
        "taxonomies": {
            "name": "taxonomies",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "view_taxonomy": {
            "name": "view_taxonomy",
            "location": 17,
            "return": [],
            "arguments": {
                "taxonomy": [
                    "str"
                ]
            }
        }
    },
    "muse-for-music-master/muse_for_music/debug_routes/routes.py": {
        "routes": {
            "name": "routes",
            "location": 8,
            "return": [],
            "arguments": {}
        }
    },
    "muse-for-music-master/muse_for_music/debug_routes/__init__.py": {
        "index": {
            "name": "index",
            "location": 21,
            "return": [],
            "arguments": {}
        }
    },
    "muse-for-music-master/muse_for_music/models/helper_classes.py": {
        "GetByID.prepare_query": {
            "name": "prepare_query",
            "location": 17,
            "return": [
                "Query"
            ],
            "arguments": {
                "cls": [
                    "Type[X]"
                ],
                "lazy": [
                    "bool"
                ]
            }
        },
        "GetByID.get_id_from_object": {
            "name": "get_id_from_object",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {
                "id": [
                    "Union[(int, dict, X)]"
                ]
            }
        },
        "GetByID.get_by_id_or_dict": {
            "name": "get_by_id_or_dict",
            "location": 46,
            "return": [
                "X@@db.Model@@"
            ],
            "arguments": {
                "cls": [
                    "Type[X]"
                ],
                "id": [
                    "Union[(int, dict, X)]"
                ],
                "lazy": [
                    "bool"
                ]
            }
        },
        "GetByID.get_by_id": {
            "name": "get_by_id",
            "location": 54,
            "return": [
                "X@@db.Model@@"
            ],
            "arguments": {
                "cls": [
                    "Type[X]"
                ],
                "id": [
                    "int"
                ],
                "lazy": [
                    "bool"
                ]
            }
        },
        "GetByID.get_list_by_id": {
            "name": "get_list_by_id",
            "location": 61,
            "return": [
                "List[X]"
            ],
            "arguments": {
                "cls": [
                    "Type[X]"
                ],
                "ids": [
                    "Sequence[int]"
                ],
                "lazy": [
                    "bool"
                ]
            }
        },
        "GetByID.get_multiple_by_id": {
            "name": "get_multiple_by_id",
            "location": 70,
            "return": [
                "Dict[(int, X)]"
            ],
            "arguments": {
                "cls": [
                    "Type[X]"
                ],
                "ids": [
                    "Sequence[int]"
                ],
                "lazy": [
                    "bool"
                ]
            }
        },
        "UpdateableModelMixin._update_normal_attributes": {
            "name": "_update_normal_attributes",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "new_values": [
                    "Dict"
                ],
                "partial": [
                    "bool"
                ]
            }
        },
        "UpdateableModelMixin.check_for_required_attr": {
            "name": "check_for_required_attr",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "new_values": [],
                "cls": [],
                "partial": [
                    "bool"
                ]
            }
        },
        "UpdateableModelMixin.update_complex_object": {
            "name": "update_complex_object",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "value": [],
                "cls": [],
                "expire_self": []
            }
        },
        "UpdateableModelMixin._update_list_attributes": {
            "name": "_update_list_attributes",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "new_values": [
                    "Dict"
                ]
            }
        },
        "UpdateableModelMixin.update": {
            "name": "update",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "new_values": [
                    "Dict"
                ]
            }
        },
        "UpdateListMixin._update_reference_only_list": {
            "name": "_update_reference_only_list",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "item_list": [
                    "Union[(Sequence[int], Sequence[dict])]"
                ],
                "old_items": [
                    "Dict[(int, K)]"
                ],
                "mapping_cls": [
                    "Type[K]"
                ],
                "item_cls": [
                    "Type[V]"
                ],
                "mapping_cls_attribute": [
                    "str"
                ]
            }
        },
        "UpdateListMixin._update_updateable_model_list": {
            "name": "_update_updateable_model_list",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "item_list": [
                    "Sequence[dict]"
                ],
                "old_items": [
                    "Dict[(int, W)]"
                ],
                "item_cls": [
                    "Type[W]"
                ]
            }
        },
        "UpdateListMixin.update_list": {
            "name": "update_list",
            "location": 227,
            "return": [],
            "arguments": {
                "self": [],
                "item_list": [
                    "Union[(Sequence[int], Sequence[dict])]"
                ],
                "old_items": [
                    "Union[(Dict[(int, K)], Dict[(int, W)])]"
                ],
                "mapping_cls": [
                    "Any"
                ],
                "item_cls": [
                    "Type[V]"
                ],
                "mapping_cls_attribute": [
                    "str"
                ]
            }
        }
    },
    "muse-for-music-master/muse_for_music/models/users.py": {
        "User.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "User.__repr__": {
            "name": "__repr__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.roles_json": {
            "name": "roles_json",
            "location": 29,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.set_password": {
            "name": "set_password",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ]
            }
        },
        "User.check_password": {
            "name": "check_password",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ],
                "ignore_deleted": [
                    "bool"
                ]
            }
        },
        "User.get_user_by_name": {
            "name": "get_user_by_name",
            "location": 41,
            "return": [
                "'User'"
            ],
            "arguments": {
                "cls": [],
                "username": [
                    "str"
                ]
            }
        },
        "UserRole.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "user": [
                    "User"
                ],
                "role": [
                    "RoleEnum"
                ]
            }
        },
        "UserRole.__repr__": {
            "name": "__repr__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "muse-for-music-master/muse_for_music/models/__init__.py": {
        "create_db": {
            "name": "create_db",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "create_db_function": {
            "name": "create_db_function",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "drop_db": {
            "name": "drop_db",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "drop_db_function": {
            "name": "drop_db_function",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "init_db": {
            "name": "init_db",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "init_db_function": {
            "name": "init_db_function",
            "location": 70,
            "return": [],
            "arguments": {}
        },
        "create_populated_db": {
            "name": "create_populated_db",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "set_sqlite_pragma": {
            "name": "set_sqlite_pragma",
            "location": 32,
            "return": [],
            "arguments": {
                "dbapi_connection": [],
                "connection_record": []
            }
        }
    },
    "muse-for-music-master/muse_for_music/models/data/ambitus.py": {},
    "muse-for-music-master/muse_for_music/models/data/citations.py": {
        "Citations.opus_citations": {
            "name": "opus_citations",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "opus_citations_list": [
                    "Union[(Sequence[int], Sequence[dict])]"
                ]
            }
        },
        "Citations.epoch_citations": {
            "name": "epoch_citations",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "epoch_citations_list": [
                    "Union[(Sequence[int], Sequence[dict])]"
                ]
            }
        },
        "Citations.gattung_citations": {
            "name": "gattung_citations",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "gattung_citations_list": [
                    "Union[(Sequence[int], Sequence[dict])]"
                ]
            }
        },
        "Citations.composer_citations": {
            "name": "composer_citations",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "composer_citations_list": [
                    "Union[(Sequence[int], Sequence[dict])]"
                ]
            }
        },
        "Citations.instrument_citations": {
            "name": "instrument_citations",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "instrument_citations_list": [
                    "Union[(Sequence[int], Sequence[dict])]"
                ]
            }
        },
        "Citations.program_citations": {
            "name": "program_citations",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "program_citations_list": [
                    "Union[(Sequence[int], Sequence[dict])]"
                ]
            }
        },
        "Citations.tonmalerei_citations": {
            "name": "tonmalerei_citations",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "tonmalerei_citations_list": [
                    "Union[(Sequence[int], Sequence[dict])]"
                ]
            }
        },
        "OpusCitation.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "citations": []
            }
        },
        "EpocheToCitations.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "citations": [],
                "epoche": []
            }
        },
        "GattungToCitations.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "citations": [],
                "gattung": []
            }
        },
        "PersonToCitations.__init__": {
            "name": "__init__",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "citations": [],
                "person": []
            }
        },
        "InstrumentToCitations.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "citations": [],
                "instrument": []
            }
        },
        "ProgrammgegenstandToCitations.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "citations": [],
                "programmgegenstand": []
            }
        },
        "TonmalereiToCitations.__init__": {
            "name": "__init__",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "citations": [],
                "tonmalerei": []
            }
        }
    },
    "muse-for-music-master/muse_for_music/models/data/composition.py": {
        "Composition.composition_techniques": {
            "name": "composition_techniques",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "techniques_list": [
                    "Union[(Sequence[int], Sequence[dict])]"
                ]
            }
        },
        "Composition.sequences": {
            "name": "sequences",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "sequence_list": [
                    "Sequence[dict]"
                ]
            }
        },
        "CompositionTechniqueToComposition.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "composition": [],
                "verarbeitungstechnik": []
            }
        },
        "MusicialSequence.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "composition": [],
                "starting_interval": [],
                "flow": [],
                "beats": [
                    "int"
                ],
                "tonal_corrected": [
                    "bool"
                ],
                "exact_repetition": [
                    "bool"
                ]
            }
        },
        "MusicialSequence.update": {
            "name": "update",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "starting_interval": [],
                "flow": [],
                "beats": [
                    "int"
                ],
                "tonal_corrected": [
                    "bool"
                ],
                "exact_repetition": [
                    "bool"
                ]
            }
        }
    },
    "muse-for-music-master/muse_for_music/models/data/dramaturgic_context.py": {},
    "muse-for-music-master/muse_for_music/models/data/dynamic.py": {
        "Dynamic.dynamic_changes": {
            "name": "dynamic_changes",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "dynamic_changes_list": [
                    "Union[(Sequence[int], Sequence[dict])]"
                ]
            }
        },
        "Dynamic.dynamic_markings": {
            "name": "dynamic_markings",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "dynamic_markings_list": [
                    "Sequence[dict]"
                ]
            }
        },
        "DynamicMarking.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "dynamic": []
            }
        },
        "LautstaerkeEntwicklungToDynamic.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "dynamic": [],
                "lautstaerke_entwicklung": []
            }
        }
    },
    "muse-for-music-master/muse_for_music/models/data/harmonics.py": {
        "Harmonics.harmonic_centers": {
            "name": "harmonic_centers",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "harmonic_centers_list": [
                    "Sequence[dict]"
                ]
            }
        },
        "Harmonics.harmonic_phenomenons": {
            "name": "harmonic_phenomenons",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "harmonic_phenomenons_list": [
                    "Union[(Sequence[int], Sequence[dict])]"
                ]
            }
        },
        "Harmonics.harmonic_changes": {
            "name": "harmonic_changes",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "harmonic_changes_list": [
                    "Union[(Sequence[int], Sequence[dict])]"
                ]
            }
        },
        "Harmonics.chords": {
            "name": "chords",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "special_chords_list": [
                    "Union[(Sequence[int], Sequence[dict])]"
                ]
            }
        },
        "Harmonics.dissonances": {
            "name": "dissonances",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "dissonances_list": [
                    "Union[(Sequence[int], Sequence[dict])]"
                ]
            }
        },
        "HarmonicCenter.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "harmonics": []
            }
        },
        "HarmonischePhaenomeneToHarmonics.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "harmonics": [],
                "harmonische_phaenomene": []
            }
        },
        "HarmonischeEntwicklungToHarmonics.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "harmonics": [],
                "harmonische_entwicklung": []
            }
        },
        "AkkordToHarmonics.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "harmonics": [],
                "akkord": []
            }
        },
        "DissonanzenToHarmonics.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "harmonics": [],
                "dissonanzen": []
            }
        }
    },
    "muse-for-music-master/muse_for_music/models/data/history.py": {
        "TypeEnum.fromResource": {
            "name": "fromResource",
            "location": 30,
            "return": [],
            "arguments": {
                "resource": [
                    "Union[(Person, Opus, Part, SubPart, Voice)]"
                ]
            }
        },
        "History.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "method": [
                    "MethodEnum"
                ],
                "resource": [
                    "Union[(Person, Opus, Part, SubPart, Voice)]"
                ],
                "user": [
                    "Union[(str, User)]"
                ]
            }
        },
        "History.fingerprint": {
            "name": "fingerprint",
            "location": 73,
            "return": [],
            "arguments": {
                "resource": [
                    "Union[(Person, Opus, Part, SubPart, Voice)]"
                ]
            }
        },
        "History.isOwner": {
            "name": "isOwner",
            "location": 88,
            "return": [],
            "arguments": {
                "cls": [],
                "resource": [],
                "user": [
                    "[str, User]"
                ]
            }
        },
        "History.full_resource": {
            "name": "full_resource",
            "location": 101,
            "return": [
                "Union[(Person, Opus, Part, SubPart, Voice, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backup.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "resource_type": [
                    "TypeEnum"
                ],
                "resource": [
                    "str"
                ]
            }
        }
    },
    "muse-for-music-master/muse_for_music/models/data/instrumentation.py": {
        "Instrumentation.instruments": {
            "name": "instruments",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "instrument_list": [
                    "Union[(Sequence[int], Sequence[dict])]"
                ]
            }
        },
        "InstumentationToInstrument.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "instrumentation": [],
                "instrument": []
            }
        }
    },
    "muse-for-music-master/muse_for_music/models/data/measure.py": {
        "Measure.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "measure": [
                    "int"
                ],
                "from_page": [
                    "int"
                ]
            }
        },
        "Measure.from_page": {
            "name": "from_page",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "muse-for-music-master/muse_for_music/models/data/opus.py": {
        "Opus.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "composer": [
                    "any"
                ],
                "movements": [
                    "int"
                ],
                "printed": [
                    "bool"
                ]
            }
        },
        "Opus.__repr__": {
            "name": "__repr__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "muse-for-music-master/muse_for_music/models/data/part.py": {
        "Part.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "opus_id": [
                    "int"
                ],
                "measure_start": [
                    "dict"
                ],
                "measure_end": [
                    "dict"
                ],
                "length": [
                    "int"
                ],
                "movement": [
                    "int"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Part.formal_functions": {
            "name": "formal_functions",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "formal_functions_list": [
                    "Union[(Sequence[int], Sequence[dict])]"
                ]
            }
        },
        "FormaleFunktionToPart.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "part": [],
                "formale_funktion": []
            }
        }
    },
    "muse-for-music-master/muse_for_music/models/data/people.py": {
        "Person.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "gender": [
                    "Union[(str, GenderEnum)]"
                ],
                "birth_date": [
                    "int"
                ],
                "death_date": [
                    "int"
                ],
                "nationality": [
                    "str"
                ]
            }
        },
        "Person.__repr__": {
            "name": "__repr__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "muse-for-music-master/muse_for_music/models/data/rendition.py": {
        "Rendition.mood_markings": {
            "name": "mood_markings",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "mood_markings_list": [
                    "Union[(Sequence[int], Sequence[dict])]"
                ]
            }
        },
        "Rendition.articulation_markings": {
            "name": "articulation_markings",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "articulation_markings_list": [
                    "Union[(Sequence[int], Sequence[dict])]"
                ]
            }
        },
        "Rendition.technic_markings": {
            "name": "technic_markings",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "technic_markings_list": [
                    "Union[(Sequence[int], Sequence[dict])]"
                ]
            }
        },
        "AusdruckToRendition.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "rendition": [],
                "ausdruck": []
            }
        },
        "ArtikulationToRendition.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "rendition": [],
                "artikulation": []
            }
        },
        "SpielanweisungToRendition.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "rendition": [],
                "spielanweisung": []
            }
        }
    },
    "muse-for-music-master/muse_for_music/models/data/rhythm.py": {
        "Rhythm.measure_times": {
            "name": "measure_times",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "measure_times_list": [
                    "Union[(Sequence[int], Sequence[dict])]"
                ]
            }
        },
        "Rhythm.rhythm_types": {
            "name": "rhythm_types",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "rhythm_types_list": [
                    "Union[(Sequence[int], Sequence[dict])]"
                ]
            }
        },
        "Rhythm.rhythmic_phenomenons": {
            "name": "rhythmic_phenomenons",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "rhythmic_phenomenons_list": [
                    "Union[(Sequence[int], Sequence[dict])]"
                ]
            }
        },
        "TaktartToRhythm.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "rhythm": [],
                "taktart": []
            }
        },
        "RhythmustypToRhythm.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "rhythm": [],
                "rhythmustyp": []
            }
        },
        "RhythmischesPhaenomenToRhythm.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "rhythm": [],
                "rhythmisches_phaenomen": []
            }
        }
    },
    "muse-for-music-master/muse_for_music/models/data/satz.py": {},
    "muse-for-music-master/muse_for_music/models/data/subpart.py": {
        "SubPart.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "part_id": [
                    "Union[(int, Part)]"
                ],
                "label": [
                    "str"
                ]
            }
        },
        "SubPart.instrumentation": {
            "name": "instrumentation",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "list"
                ]
            }
        }
    },
    "muse-for-music-master/muse_for_music/models/data/tempo.py": {
        "TempoGroup.tempo_markings": {
            "name": "tempo_markings",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "tempo_markings_list": [
                    "Union[(Sequence[int], Sequence[dict])]"
                ]
            }
        },
        "TempoGroup.tempo_changes": {
            "name": "tempo_changes",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "tempo_changes_list": [
                    "Union[(Sequence[int], Sequence[dict])]"
                ]
            }
        },
        "TempoToTempoGroup.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "tempo_group": [],
                "tempo": []
            }
        },
        "TempoEntwicklungToTempoGroup.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "tempo_group": [],
                "tempo_entwicklung": []
            }
        }
    },
    "muse-for-music-master/muse_for_music/models/data/voice.py": {
        "Voice.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "subpart": [
                    "Union[(int, SubPart)]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Voice.instrumentation": {
            "name": "instrumentation",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "list"
                ]
            }
        },
        "Voice.musicial_function": {
            "name": "musicial_function",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "musicial_function_list": [
                    "Union[(Sequence[int], Sequence[dict])]"
                ]
            }
        },
        "Voice.ornaments": {
            "name": "ornaments",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "ornaments_list": [
                    "Union[(Sequence[int], Sequence[dict])]"
                ]
            }
        },
        "Voice.dominant_note_values": {
            "name": "dominant_note_values",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "dominant_note_values_list": [
                    "Union[(Sequence[int], Sequence[dict])]"
                ]
            }
        },
        "Voice.musicial_figures": {
            "name": "musicial_figures",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "musicial_figures_list": [
                    "Union[(Sequence[int], Sequence[dict])]"
                ]
            }
        },
        "Voice.related_voices": {
            "name": "related_voices",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "related_voices_list": [
                    "Union[(Sequence[int], Sequence[dict])]"
                ]
            }
        },
        "MusikalischeWendungToVoice.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "voice": [],
                "musikalische_wendung": []
            }
        },
        "MusikalischeFunktionToVoice.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "voice": [],
                "musikalische_funktion": []
            }
        },
        "VerzierungToVoice.__init__": {
            "name": "__init__",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "voice": [],
                "verzierung": []
            }
        },
        "NotenwertToVoice.__init__": {
            "name": "__init__",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "voice": [],
                "notenwert": []
            }
        },
        "RelatedVoices.__init__": {
            "name": "__init__",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "voice": []
            }
        }
    },
    "muse-for-music-master/muse_for_music/models/data/__init__.py": {},
    "muse-for-music-master/muse_for_music/models/taxonomies/ambitus.py": {},
    "muse-for-music-master/muse_for_music/models/taxonomies/chords.py": {},
    "muse-for-music-master/muse_for_music/models/taxonomies/citation.py": {},
    "muse-for-music-master/muse_for_music/models/taxonomies/composition.py": {},
    "muse-for-music-master/muse_for_music/models/taxonomies/dissonance.py": {},
    "muse-for-music-master/muse_for_music/models/taxonomies/dynamic.py": {},
    "muse-for-music-master/muse_for_music/models/taxonomies/epoch.py": {},
    "muse-for-music-master/muse_for_music/models/taxonomies/form.py": {},
    "muse-for-music-master/muse_for_music/models/taxonomies/gattung.py": {},
    "muse-for-music-master/muse_for_music/models/taxonomies/harmonics.py": {},
    "muse-for-music-master/muse_for_music/models/taxonomies/helper_classes.py": {
        "Taxonomy.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "description": [
                    "None"
                ]
            }
        },
        "Taxonomy.clear_all": {
            "name": "clear_all",
            "location": 22,
            "return": [],
            "arguments": {
                "cls": [],
                "logger": [
                    "Logger"
                ]
            }
        },
        "Taxonomy.load": {
            "name": "load",
            "location": 29,
            "return": [],
            "arguments": {
                "cls": [],
                "input_data": [
                    "DictReader"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "Taxonomy.save": {
            "name": "save",
            "location": 33,
            "return": [],
            "arguments": {
                "cls": [],
                "output_data": [
                    "DictWriter"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "Taxonomy.items": {
            "name": "items",
            "location": 37,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Taxonomy.not_applicable_item": {
            "name": "not_applicable_item",
            "location": 41,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ListTaxonomy.__repr__": {
            "name": "__repr__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ListTaxonomy.get_all": {
            "name": "get_all",
            "location": 55,
            "return": [
                "List[X]"
            ],
            "arguments": {
                "cls": [
                    "Type[X]"
                ]
            }
        },
        "ListTaxonomy.load": {
            "name": "load",
            "location": 62,
            "return": [],
            "arguments": {
                "cls": [],
                "input_data": [
                    "DictReader"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "ListTaxonomy.save": {
            "name": "save",
            "location": 84,
            "return": [],
            "arguments": {
                "cls": [],
                "output_data": [
                    "DictWriter"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "TreeTaxonomy.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "description": [],
                "parent": [
                    "'TreeTaxonomy'"
                ]
            }
        },
        "TreeTaxonomy.__repr__": {
            "name": "__repr__",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeTaxonomy.get_root": {
            "name": "get_root",
            "location": 124,
            "return": [
                "X"
            ],
            "arguments": {
                "cls": [
                    "Type[X]"
                ]
            }
        },
        "TreeTaxonomy.load": {
            "name": "load",
            "location": 131,
            "return": [],
            "arguments": {
                "cls": [],
                "input_data": [
                    "DictReader"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "TreeTaxonomy.save": {
            "name": "save",
            "location": 161,
            "return": [],
            "arguments": {
                "cls": [],
                "output_data": [
                    "DictWriter"
                ],
                "logger": [
                    "Logger"
                ]
            }
        }
    },
    "muse-for-music-master/muse_for_music/models/taxonomies/instruments.py": {},
    "muse-for-music-master/muse_for_music/models/taxonomies/melody.py": {},
    "muse-for-music-master/muse_for_music/models/taxonomies/misc.py": {},
    "muse-for-music-master/muse_for_music/models/taxonomies/notes.py": {},
    "muse-for-music-master/muse_for_music/models/taxonomies/rendition.py": {},
    "muse-for-music-master/muse_for_music/models/taxonomies/rhythm.py": {},
    "muse-for-music-master/muse_for_music/models/taxonomies/satz.py": {},
    "muse-for-music-master/muse_for_music/models/taxonomies/tempo.py": {},
    "muse-for-music-master/muse_for_music/models/taxonomies/voices.py": {},
    "muse-for-music-master/muse_for_music/models/taxonomies/__init__.py": {
        "generate_na_elements": {
            "name": "generate_na_elements",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "init_taxonomies": {
            "name": "init_taxonomies",
            "location": 54,
            "return": [],
            "arguments": {
                "reload": [],
                "folder_path": [
                    "str"
                ]
            }
        },
        "add_na_elements": {
            "name": "add_na_elements",
            "location": 90,
            "return": [],
            "arguments": {}
        },
        "save_taxonomies": {
            "name": "save_taxonomies",
            "location": 99,
            "return": [],
            "arguments": {
                "folder_path": [
                    "str"
                ]
            }
        },
        "get_taxonomies": {
            "name": "get_taxonomies",
            "location": 119,
            "return": [
                "Dict[(str, Type[T])]"
            ],
            "arguments": {}
        }
    },
    "muse-for-music-master/muse_for_music/user_api/administration.py": {
        "AdministrationRootResource.get": {
            "name": "get",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UsersResource.get": {
            "name": "get",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UsersResource.post": {
            "name": "post",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserResource.get": {
            "name": "get",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ]
            }
        },
        "UserResource.post": {
            "name": "post",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ]
            }
        },
        "UserResource.delete": {
            "name": "delete",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ]
            }
        },
        "UserRoleResource.get": {
            "name": "get",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ]
            }
        },
        "UserRoleResource.post": {
            "name": "post",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ]
            }
        },
        "UserRoleResource.delete": {
            "name": "delete",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ]
            }
        }
    },
    "muse-for-music-master/muse_for_music/user_api/authentication.py": {
        "login_user": {
            "name": "login_user",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "Login.post": {
            "name": "post",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FreshLogin.post": {
            "name": "post",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChangePassword.post": {
            "name": "post",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Check.get": {
            "name": "get",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Refresh.post": {
            "name": "post",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "muse-for-music-master/muse_for_music/user_api/models.py": {},
    "muse-for-music-master/muse_for_music/user_api/root.py": {
        "RootResource.get": {
            "name": "get",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "muse-for-music-master/muse_for_music/user_api/__init__.py": {
        "has_roles": {
            "name": "has_roles",
            "location": 30,
            "return": [],
            "arguments": {
                "roles": [
                    "List[RoleEnum]"
                ]
            }
        },
        "load_user_identity": {
            "name": "load_user_identity",
            "location": 78,
            "return": [],
            "arguments": {
                "user": [
                    "User"
                ]
            }
        },
        "load_user_claims": {
            "name": "load_user_claims",
            "location": 83,
            "return": [],
            "arguments": {
                "user": [
                    "User"
                ]
            }
        },
        "expired_token": {
            "name": "expired_token",
            "location": 88,
            "return": [],
            "arguments": {
                "expired_token": []
            }
        },
        "invalid_token": {
            "name": "invalid_token",
            "location": 95,
            "return": [],
            "arguments": {
                "message": [
                    "str"
                ]
            }
        },
        "unauthorized": {
            "name": "unauthorized",
            "location": 101,
            "return": [],
            "arguments": {
                "message": [
                    "str"
                ]
            }
        },
        "stale_token": {
            "name": "stale_token",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "revoked_token": {
            "name": "revoked_token",
            "location": 114,
            "return": [],
            "arguments": {}
        },
        "missing_header": {
            "name": "missing_header",
            "location": 121,
            "return": [],
            "arguments": {
                "error": []
            }
        },
        "log_unauthorized": {
            "name": "log_unauthorized",
            "location": 126,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "has_roles.has_roles_decorator": {
            "name": "has_roles_decorator",
            "location": 36,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "has_roles.has_roles_decorator.wrapper": {
            "name": "wrapper",
            "location": 38,
            "return": [],
            "arguments": {}
        }
    },
    "muse-for-music-master/taxonomies/from_mindmap.py": {
        "select": {
            "name": "select",
            "location": 63,
            "return": [],
            "arguments": {
                "node": [
                    "Node"
                ],
                "with_parent": [
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "parent": []
            }
        },
        "Node.id": {
            "name": "id",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.name": {
            "name": "name",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.name_filtered": {
            "name": "name_filtered",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.children": {
            "name": "children",
            "location": 34,
            "return": [
                "List['Node']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__str__": {
            "name": "__str__",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MindMap.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "MindMap.load": {
            "name": "load",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MindMap.root": {
            "name": "root",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "main.nodename": {
            "name": "nodename",
            "location": 116,
            "return": [
                "str"
            ],
            "arguments": {
                "node": [
                    "Node"
                ]
            }
        }
    }
}
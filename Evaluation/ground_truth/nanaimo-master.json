{
    "nanaimo-master/conf.py": {},
    "nanaimo-master/conftest.py": {
        "_ReplacementSybilFilter.__call__": {
            "name": "__call__",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [
                    "Sybil"
                ],
                "filename": [
                    "str"
                ]
            }
        }
    },
    "nanaimo-master/setup.py": {},
    "nanaimo-master/src/nanaimo/cli.py": {
        "main": {
            "name": "main",
            "location": 24,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "nanaimo-master/src/nanaimo/config.py": {
        "ArgumentDefaults.create_defaults_with_early_rc_config": {
            "name": "create_defaults_with_early_rc_config",
            "location": 50,
            "return": [
                "'ArgumentDefaults'"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ArgumentDefaults.as_dict": {
            "name": "as_dict",
            "location": 69,
            "return": [
                "typing.Mapping[(str, str)]"
            ],
            "arguments": {
                "cls": [],
                "config_value": [
                    "typing.Union[(str, typing.List[str])]"
                ]
            }
        },
        "ArgumentDefaults.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "typing.Optional[typing.Any]"
                ]
            }
        },
        "ArgumentDefaults.set_args": {
            "name": "set_args",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "typing.Any"
                ]
            }
        },
        "ArgumentDefaults.__getitem__": {
            "name": "__getitem__",
            "location": 136,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "ArgumentDefaults.__contains__": {
            "name": "__contains__",
            "location": 159,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "ArgumentDefaults.populate_default": {
            "name": "populate_default",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "argparse.ArgumentParser"
                ],
                "inout_args": [
                    "typing.Tuple"
                ],
                "inout_kwargs": [
                    "typing.Dict"
                ]
            }
        },
        "ArgumentDefaults._derive_key_from_args": {
            "name": "_derive_key_from_args",
            "location": 202,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "inout_args": [
                    "typing.Tuple"
                ]
            }
        },
        "ArgumentDefaults._handle_enable_default_from_environ": {
            "name": "_handle_enable_default_from_environ",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "argparse.ArgumentParser"
                ],
                "inout_args": [
                    "typing.Tuple"
                ],
                "inout_kwargs": [
                    "typing.Dict"
                ]
            }
        },
        "ArgumentDefaults._set_default_from_environment": {
            "name": "_set_default_from_environment",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "env_variable": [
                    "str"
                ],
                "args": [
                    "typing.Tuple"
                ],
                "inout_kwargs": [
                    "typing.Dict"
                ]
            }
        },
        "ArgumentDefaults.create_defaults_with_early_rc_config.args": {
            "name": "args",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nanaimo-master/src/nanaimo/display.py": {
        "pytest_nanaimo_fixture_type": {
            "name": "pytest_nanaimo_fixture_type",
            "location": 264,
            "return": [
                "typing.Type['nanaimo.fixtures.Fixture']"
            ],
            "arguments": {}
        },
        "_CharacterDisplayInterface.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CharacterDisplayInterface.write": {
            "name": "write",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_line": [
                    "typing.Union[(typing.List[str], str)]"
                ]
            }
        },
        "_CharacterDisplayInterface.clear": {
            "name": "clear",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "display_default_message": [
                    "bool"
                ]
            }
        },
        "_CharacterDisplayInterface.set_default_message": {
            "name": "set_default_message",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "_CharacterDisplayInterface.set_bg_colour": {
            "name": "set_bg_colour",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "int"
                ],
                "g": [
                    "int"
                ],
                "b": [
                    "int"
                ]
            }
        },
        "_CharacterDisplayInterface.configure": {
            "name": "configure",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CharacterDisplayAdafruitSerialBackpack.on_visit_test_arguments": {
            "name": "on_visit_test_arguments",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "arguments": [
                    "nanaimo.Arguments"
                ]
            }
        },
        "_CharacterDisplayAdafruitSerialBackpack.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "nanaimo.Namespace"
                ]
            }
        },
        "_CharacterDisplayAdafruitSerialBackpack.write": {
            "name": "write",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_line": [
                    "typing.Union[(typing.List[str], str)]"
                ]
            }
        },
        "_CharacterDisplayAdafruitSerialBackpack.clear": {
            "name": "clear",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "display_default_message": [
                    "bool"
                ]
            }
        },
        "_CharacterDisplayAdafruitSerialBackpack.go_home": {
            "name": "go_home",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CharacterDisplayAdafruitSerialBackpack.display_on": {
            "name": "display_on",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CharacterDisplayAdafruitSerialBackpack.display_off": {
            "name": "display_off",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CharacterDisplayAdafruitSerialBackpack.set_bg_colour": {
            "name": "set_bg_colour",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "int"
                ],
                "g": [
                    "int"
                ],
                "b": [
                    "int"
                ]
            }
        },
        "_CharacterDisplayAdafruitSerialBackpack.configure": {
            "name": "configure",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterDisplay._create_display": {
            "name": "_create_display",
            "location": 166,
            "return": [
                "_CharacterDisplayInterface"
            ],
            "arguments": {
                "cls": [],
                "args": [
                    "typing.Optional[nanaimo.Namespace]"
                ]
            }
        },
        "CharacterDisplay.on_visit_test_arguments": {
            "name": "on_visit_test_arguments",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "arguments": [
                    "nanaimo.Arguments"
                ]
            }
        },
        "CharacterDisplay.__init__": {
            "name": "__init__",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "manager": [
                    "'nanaimo.fixtures.FixtureManager'"
                ],
                "args": [
                    "typing.Optional[nanaimo.Namespace]"
                ]
            }
        },
        "CharacterDisplay.write": {
            "name": "write",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_line": [
                    "str"
                ]
            }
        },
        "CharacterDisplay.clear": {
            "name": "clear",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "display_default_message": [
                    "bool"
                ]
            }
        },
        "CharacterDisplay.configure": {
            "name": "configure",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterDisplay.set_bg_colour": {
            "name": "set_bg_colour",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "int"
                ],
                "g": [
                    "int"
                ],
                "b": [
                    "int"
                ]
            }
        },
        "CharacterDisplay.set_status": {
            "name": "set_status",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str"
                ]
            }
        }
    },
    "nanaimo-master/src/nanaimo/fixtures.py": {
        "Fixture.get_canonical_name": {
            "name": "get_canonical_name",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Fixture.get_argument_prefix": {
            "name": "get_argument_prefix",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Fixture.get_arg_covariant": {
            "name": "get_arg_covariant",
            "location": 146,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "cls": [],
                "args": [
                    "nanaimo.Namespace"
                ],
                "base_name": [
                    "str"
                ],
                "default_value": [
                    "typing.Optional[typing.Any]"
                ]
            }
        },
        "Fixture.get_arg_covariant_or_fail": {
            "name": "get_arg_covariant_or_fail",
            "location": 170,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "cls": [],
                "args": [
                    "nanaimo.Namespace"
                ],
                "base_name": [
                    "str"
                ]
            }
        },
        "Fixture.__init__": {
            "name": "__init__",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "manager": [
                    "'FixtureManager'"
                ],
                "args": [
                    "typing.Optional[nanaimo.Namespace]"
                ]
            }
        },
        "Fixture.gather_until_complete": {
            "name": "gather_until_complete",
            "location": 199,
            "return": [
                "nanaimo.Artifacts"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fixture.name": {
            "name": "name",
            "location": 272,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fixture.loop": {
            "name": "loop",
            "location": 279,
            "return": [
                "asyncio.AbstractEventLoop"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fixture.manager": {
            "name": "manager",
            "location": 289,
            "return": [
                "'FixtureManager'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fixture.logger": {
            "name": "logger",
            "location": 296,
            "return": [
                "logging.Logger"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fixture.fixture_arguments": {
            "name": "fixture_arguments",
            "location": 303,
            "return": [
                "nanaimo.Namespace"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fixture.gather_timeout_seconds": {
            "name": "gather_timeout_seconds",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gather_timeout_seconds": [
                    "float"
                ]
            }
        },
        "Fixture.visit_test_arguments": {
            "name": "visit_test_arguments",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "arguments": [
                    "nanaimo.Arguments"
                ]
            }
        },
        "Fixture.on_visit_test_arguments": {
            "name": "on_visit_test_arguments",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "arguments": [
                    "nanaimo.Arguments"
                ]
            }
        },
        "Fixture.on_test_teardown": {
            "name": "on_test_teardown",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_name": [
                    "str"
                ]
            }
        },
        "SubprocessFixture.__init__": {
            "name": "__init__",
            "location": 691,
            "return": [],
            "arguments": {
                "self": [],
                "manager": [
                    "'FixtureManager'"
                ],
                "args": [
                    "typing.Optional[nanaimo.Namespace]"
                ]
            }
        },
        "SubprocessFixture.stdout_filter": {
            "name": "stdout_filter",
            "location": 711,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filter": [
                    "typing.Optional[logging.Filter]"
                ]
            }
        },
        "SubprocessFixture.stderr_filter": {
            "name": "stderr_filter",
            "location": 722,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filter": [
                    "typing.Optional[logging.Filter]"
                ]
            }
        },
        "SubprocessFixture.on_visit_test_arguments": {
            "name": "on_visit_test_arguments",
            "location": 726,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "arguments": [
                    "nanaimo.Arguments"
                ]
            }
        },
        "SubprocessFixture.on_construct_command": {
            "name": "on_construct_command",
            "location": 817,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arguments": [
                    "nanaimo.Namespace"
                ],
                "inout_artifacts": [
                    "nanaimo.Artifacts"
                ]
            }
        },
        "SubprocessFixture._ensure_no_newline_at_end": {
            "name": "_ensure_no_newline_at_end",
            "location": 882,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "FixtureManager.__init__": {
            "name": "__init__",
            "location": 898,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "typing.Optional[asyncio.AbstractEventLoop]"
                ]
            }
        },
        "FixtureManager.loop": {
            "name": "loop",
            "location": 902,
            "return": [
                "asyncio.AbstractEventLoop"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixtureManager.create_fixture": {
            "name": "create_fixture",
            "location": 913,
            "return": [
                "Fixture"
            ],
            "arguments": {
                "self": [],
                "canonical_name": [
                    "str"
                ],
                "args": [
                    "typing.Optional[nanaimo.Namespace]"
                ],
                "loop": [
                    "typing.Optional[asyncio.AbstractEventLoop]"
                ]
            }
        },
        "PluggyFixtureManager.type_factory": {
            "name": "type_factory",
            "location": 936,
            "return": [
                "typing.Callable[([], typing.Type['nanaimo.fixtures.Fixture'])]"
            ],
            "arguments": {
                "type_getter": [
                    "typing.Callable[([], typing.Type['nanaimo.fixtures.Fixture'])]"
                ]
            }
        },
        "PluggyFixtureManager.__init__": {
            "name": "__init__",
            "location": 942,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubprocessFixture.SubprocessMessageAccumulator.__init__": {
            "name": "__init__",
            "location": 645,
            "return": [],
            "arguments": {
                "self": [],
                "minimum_level": [
                    "int"
                ]
            }
        },
        "SubprocessFixture.SubprocessMessageAccumulator.filter": {
            "name": "filter",
            "location": 650,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "logging.LogRecord"
                ]
            }
        },
        "SubprocessFixture.SubprocessMessageMatcher.__init__": {
            "name": "__init__",
            "location": 667,
            "return": [],
            "arguments": {
                "self": [],
                "pattern": [
                    "typing.Any"
                ],
                "minimum_level": [
                    "int"
                ]
            }
        },
        "SubprocessFixture.SubprocessMessageMatcher.match_count": {
            "name": "match_count",
            "location": 674,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubprocessFixture.SubprocessMessageMatcher.matches": {
            "name": "matches",
            "location": 681,
            "return": [
                "typing.List"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubprocessFixture.SubprocessMessageMatcher.filter": {
            "name": "filter",
            "location": 684,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "logging.LogRecord"
                ]
            }
        },
        "SubprocessFixture._NoopStreamReader.__init__": {
            "name": "__init__",
            "location": 837,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nanaimo-master/src/nanaimo/version.py": {},
    "nanaimo-master/src/nanaimo/__init__.py": {
        "assert_success": {
            "name": "assert_success",
            "location": 566,
            "return": [
                "Artifacts"
            ],
            "arguments": {
                "artifacts": [
                    "Artifacts"
                ]
            }
        },
        "assert_success_if": {
            "name": "assert_success_if",
            "location": 612,
            "return": [
                "Artifacts"
            ],
            "arguments": {
                "artifacts": [
                    "Artifacts"
                ],
                "conditional": [
                    "typing.Callable[([Artifacts], bool)]"
                ]
            }
        },
        "set_subprocess_environment": {
            "name": "set_subprocess_environment",
            "location": 672,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "Namespace"
                ]
            }
        },
        "Arguments.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "inner_arguments": [
                    "typing.Any"
                ],
                "defaults": [
                    "typing.Optional[ArgumentDefaults]"
                ],
                "required_prefix": [
                    "typing.Optional[str]"
                ],
                "filter_duplicates": [
                    "bool"
                ]
            }
        },
        "Arguments.required_prefix": {
            "name": "required_prefix",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "typing.Optional[str]"
                ]
            }
        },
        "Arguments.set_inner_arguments": {
            "name": "set_inner_arguments",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inner_arguments": [
                    "typing.Any"
                ]
            }
        },
        "Arguments.add_argument": {
            "name": "add_argument",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arguments._preparse_args": {
            "name": "_preparse_args",
            "location": 215,
            "return": [
                "typing.Tuple[(int, str)]"
            ],
            "arguments": {
                "cls": [],
                "args": [
                    "typing.Tuple"
                ]
            }
        },
        "Arguments._rewrite_with_prefix": {
            "name": "_rewrite_with_prefix",
            "location": 227,
            "return": [
                "typing.Tuple"
            ],
            "arguments": {
                "self": [],
                "inout_args": [
                    "typing.Tuple"
                ]
            }
        },
        "Namespace.__init__": {
            "name": "__init__",
            "location": 354,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [
                    "typing.Optional[typing.Any]"
                ],
                "defaults": [
                    "typing.Optional[ArgumentDefaults]"
                ],
                "allow_none_values": [
                    "bool"
                ]
            }
        },
        "Namespace.__getattr__": {
            "name": "__getattr__",
            "location": 365,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Namespace.__contains__": {
            "name": "__contains__",
            "location": 376,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Namespace.get_as_merged_dict": {
            "name": "get_as_merged_dict",
            "location": 384,
            "return": [
                "typing.Mapping[(str, typing.Any)]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Namespace.merge": {
            "name": "merge",
            "location": 405,
            "return": [
                "'Namespace.T'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Artifacts.combine": {
            "name": "combine",
            "location": 453,
            "return": [
                "'Artifacts'"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Artifacts.__init__": {
            "name": "__init__",
            "location": 523,
            "return": [],
            "arguments": {
                "self": [],
                "result_code": [
                    "int"
                ],
                "parent": [
                    "typing.Optional[typing.Any]"
                ],
                "defaults": [
                    "typing.Optional[ArgumentDefaults]"
                ],
                "allow_none_values": [
                    "bool"
                ]
            }
        },
        "Artifacts.result_code": {
            "name": "result_code",
            "location": 541,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_result": [
                    "int"
                ]
            }
        },
        "Artifacts.dump": {
            "name": "dump",
            "location": 544,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "logging.Logger"
                ],
                "log_level": [
                    "int"
                ]
            }
        },
        "Artifacts.__int__": {
            "name": "__int__",
            "location": 559,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nanaimo-master/src/nanaimo/__main__.py": {},
    "nanaimo-master/src/nanaimo/builtin/nanaimo_bar.py": {
        "pytest_nanaimo_fixture_type": {
            "name": "pytest_nanaimo_fixture_type",
            "location": 64,
            "return": [
                "typing.Type['nanaimo.fixtures.Fixture']"
            ],
            "arguments": {}
        },
        "Fixture.on_visit_test_arguments": {
            "name": "on_visit_test_arguments",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "arguments": [
                    "nanaimo.Arguments"
                ]
            }
        }
    },
    "nanaimo-master/src/nanaimo/builtin/nanaimo_cmd.py": {
        "pytest_nanaimo_fixture_type": {
            "name": "pytest_nanaimo_fixture_type",
            "location": 87,
            "return": [
                "typing.Type['nanaimo.fixtures.Fixture']"
            ],
            "arguments": {}
        },
        "Fixture.on_visit_test_arguments": {
            "name": "on_visit_test_arguments",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "arguments": [
                    "nanaimo.Arguments"
                ]
            }
        },
        "Fixture.on_construct_command": {
            "name": "on_construct_command",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arguments": [
                    "nanaimo.Namespace"
                ],
                "inout_artifacts": [
                    "nanaimo.Artifacts"
                ]
            }
        }
    },
    "nanaimo-master/src/nanaimo/builtin/nanaimo_gather.py": {
        "pytest_nanaimo_fixture_type": {
            "name": "pytest_nanaimo_fixture_type",
            "location": 98,
            "return": [
                "typing.Type['Fixture']"
            ],
            "arguments": {}
        },
        "Fixture.on_visit_test_arguments": {
            "name": "on_visit_test_arguments",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "arguments": [
                    "nanaimo.Arguments"
                ]
            }
        }
    },
    "nanaimo-master/src/nanaimo/builtin/nanaimo_scp.py": {
        "pytest_nanaimo_fixture_type": {
            "name": "pytest_nanaimo_fixture_type",
            "location": 75,
            "return": [
                "typing.Type['Fixture']"
            ],
            "arguments": {}
        },
        "Fixture.on_visit_test_arguments": {
            "name": "on_visit_test_arguments",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "arguments": [
                    "nanaimo.Arguments"
                ]
            }
        },
        "Fixture.on_construct_command": {
            "name": "on_construct_command",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "args": [
                    "nanaimo.Namespace"
                ],
                "inout_artifacts": [
                    "nanaimo.Artifacts"
                ]
            }
        }
    },
    "nanaimo-master/src/nanaimo/builtin/nanaimo_serial_watch.py": {
        "pytest_nanaimo_fixture_type": {
            "name": "pytest_nanaimo_fixture_type",
            "location": 149,
            "return": [
                "typing.Type['Fixture']"
            ],
            "arguments": {}
        },
        "Fixture.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "nanaimo.fixtures.FixtureManager"
                ],
                "args": [
                    "nanaimo.Namespace"
                ]
            }
        },
        "Fixture.on_visit_test_arguments": {
            "name": "on_visit_test_arguments",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "arguments": [
                    "nanaimo.Arguments"
                ]
            }
        }
    },
    "nanaimo-master/src/nanaimo/builtin/nanaimo_ssh.py": {
        "pytest_nanaimo_fixture_type": {
            "name": "pytest_nanaimo_fixture_type",
            "location": 64,
            "return": [
                "typing.Type['Fixture']"
            ],
            "arguments": {}
        },
        "Fixture.on_visit_test_arguments": {
            "name": "on_visit_test_arguments",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "arguments": [
                    "nanaimo.Arguments"
                ]
            }
        },
        "Fixture.on_construct_command": {
            "name": "on_construct_command",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "nanaimo.Namespace"
                ],
                "inout_artifacts": [
                    "nanaimo.Artifacts"
                ]
            }
        }
    },
    "nanaimo-master/src/nanaimo/builtin/__init__.py": {},
    "nanaimo-master/src/nanaimo/connections/uart.py": {
        "ConcurrentUart.new_default": {
            "name": "new_default",
            "location": 43,
            "return": [
                "'ConcurrentUart'"
            ],
            "arguments": {
                "cls": [],
                "port": [
                    "str"
                ],
                "baudrate": [
                    "int"
                ],
                "loop": [
                    "typing.Optional[asyncio.AbstractEventLoop]"
                ]
            }
        },
        "ConcurrentUart.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serial_port": [
                    "serial.Serial"
                ],
                "loop": [
                    "typing.Optional[asyncio.AbstractEventLoop]"
                ],
                "eol": [
                    "str"
                ],
                "echo": [
                    "bool"
                ]
            }
        },
        "ConcurrentUart.serial_port": {
            "name": "serial_port",
            "location": 65,
            "return": [
                "serial.Serial"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConcurrentUart.eol": {
            "name": "eol",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "eol": [
                    "str"
                ]
            }
        },
        "ConcurrentUart.echo": {
            "name": "echo",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "ConcurrentUart.timeout_seconds": {
            "name": "timeout_seconds",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "ConcurrentUart.extra_verbose": {
            "name": "extra_verbose",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extra_verbose": [
                    "bool"
                ]
            }
        },
        "ConcurrentUart.__enter__": {
            "name": "__enter__",
            "location": 104,
            "return": [
                "'ConcurrentUart'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConcurrentUart.__exit__": {
            "name": "__exit__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exception_type": [
                    "typing.Optional[typing.Any]"
                ],
                "exception_value": [
                    "typing.Optional[typing.Any]"
                ],
                "traceback": [
                    "typing.Optional[types.TracebackType]"
                ]
            }
        },
        "ConcurrentUart.readline": {
            "name": "readline",
            "location": 130,
            "return": [
                "typing.Optional[TimestampedLine]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConcurrentUart.writeline": {
            "name": "writeline",
            "location": 142,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "input_line": [
                    "str"
                ],
                "end": [
                    "typing.Optional[str]"
                ]
            }
        },
        "ConcurrentUart._buffer_input": {
            "name": "_buffer_input",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConcurrentUart._buffer_input_step": {
            "name": "_buffer_input_step",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "local_storage": [
                    "threading.local"
                ]
            }
        },
        "ConcurrentUart._buffer_output": {
            "name": "_buffer_output",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConcurrentUart._buffer_output_step": {
            "name": "_buffer_output_step",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nanaimo-master/src/nanaimo/connections/__init__.py": {
        "TimestampedLine.create": {
            "name": "create",
            "location": 40,
            "return": [
                "'TimestampedLine'"
            ],
            "arguments": {
                "cls": [],
                "line_text": [
                    "object"
                ],
                "timestamp_seconds": [
                    "float"
                ]
            }
        },
        "TimestampedLine.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "line_text": [
                    "object"
                ]
            }
        },
        "TimestampedLine.timestamp_seconds": {
            "name": "timestamp_seconds",
            "location": 49,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractSerial.on_visit_test_arguments": {
            "name": "on_visit_test_arguments",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "arguments": [
                    "nanaimo.Arguments"
                ]
            }
        },
        "AbstractAsyncSerial.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "typing.Optional[asyncio.AbstractEventLoop]"
                ]
            }
        },
        "AbstractAsyncSerial.loop": {
            "name": "loop",
            "location": 88,
            "return": [
                "asyncio.AbstractEventLoop"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractAsyncSerial.rx_buffer_overflows": {
            "name": "rx_buffer_overflows",
            "location": 92,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractAsyncSerial.stop": {
            "name": "stop",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractAsyncSerial.time": {
            "name": "time",
            "location": 98,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nanaimo-master/src/nanaimo/instruments/__init__.py": {},
    "nanaimo-master/src/nanaimo/instruments/bkprecision/__init__.py": {
        "pytest_nanaimo_fixture_type": {
            "name": "pytest_nanaimo_fixture_type",
            "location": 318,
            "return": [
                "typing.Type['nanaimo.fixtures.Fixture']"
            ],
            "arguments": {}
        },
        "Series1900BUart.mode_to_text": {
            "name": "mode_to_text",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "mode": [
                    "int"
                ]
            }
        },
        "Series1900BUart.default_serial_port": {
            "name": "default_serial_port",
            "location": 80,
            "return": [
                "typing.Generator[(AbstractAsyncSerial, None, None)]"
            ],
            "arguments": {
                "cls": [],
                "port": [
                    "typing.Union[(str, pathlib.Path)]"
                ]
            }
        },
        "Series1900BUart.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "manager": [
                    "nanaimo.fixtures.FixtureManager"
                ],
                "args": [
                    "nanaimo.Namespace"
                ]
            }
        },
        "Series1900BUart.on_visit_test_arguments": {
            "name": "on_visit_test_arguments",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "arguments": [
                    "nanaimo.Arguments"
                ]
            }
        },
        "Series1900BUart.is_volage_above_on_threshold": {
            "name": "is_volage_above_on_threshold",
            "location": 151,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "voltage": [
                    "float"
                ]
            }
        },
        "Series1900BUart.is_voltage_above_on_threshold": {
            "name": "is_voltage_above_on_threshold",
            "location": 158,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "voltage": [
                    "float"
                ]
            }
        },
        "Series1900BUart.is_volage_below_off_threshold": {
            "name": "is_volage_below_off_threshold",
            "location": 172,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "voltage": [
                    "float"
                ]
            }
        },
        "Series1900BUart.is_voltage_below_off_threshold": {
            "name": "is_voltage_below_off_threshold",
            "location": 178,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "voltage": [
                    "float"
                ]
            }
        }
    },
    "nanaimo-master/src/nanaimo/instruments/jlink/__init__.py": {
        "pytest_nanaimo_fixture_type": {
            "name": "pytest_nanaimo_fixture_type",
            "location": 138,
            "return": [
                "typing.Type['nanaimo.fixtures.Fixture']"
            ],
            "arguments": {}
        },
        "ProgramUploader.on_visit_test_arguments": {
            "name": "on_visit_test_arguments",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "arguments": [
                    "nanaimo.Arguments"
                ]
            }
        },
        "ProgramUploader.on_construct_command": {
            "name": "on_construct_command",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arguments": [
                    "nanaimo.Namespace"
                ],
                "inout_artifacts": [
                    "nanaimo.Artifacts"
                ]
            }
        }
    },
    "nanaimo-master/src/nanaimo/instruments/saleae/__init__.py": {
        "pytest_nanaimo_fixture_type": {
            "name": "pytest_nanaimo_fixture_type",
            "location": 83,
            "return": [
                "typing.Type['Fixture']"
            ],
            "arguments": {}
        },
        "Fixture.on_visit_test_arguments": {
            "name": "on_visit_test_arguments",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "arguments": [
                    "nanaimo.Arguments"
                ]
            }
        }
    },
    "nanaimo-master/src/nanaimo/instruments/ykush/__init__.py": {
        "pytest_nanaimo_fixture_type": {
            "name": "pytest_nanaimo_fixture_type",
            "location": 149,
            "return": [
                "typing.Type['Fixture']"
            ],
            "arguments": {}
        },
        "Fixture.on_visit_test_arguments": {
            "name": "on_visit_test_arguments",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "arguments": [
                    "nanaimo.Arguments"
                ]
            }
        },
        "Fixture.on_construct_command": {
            "name": "on_construct_command",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arguments": [
                    "nanaimo.Namespace"
                ],
                "inout_artifacts": [
                    "nanaimo.Artifacts"
                ]
            }
        }
    },
    "nanaimo-master/src/nanaimo/parsers/imu.py": {
        "YPR.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "on_record": [
                    "typing.Callable[([typing.Tuple[(float, float, float)]], None)]"
                ],
                "line_ending": [
                    "str"
                ]
            }
        },
        "YPR.reset": {
            "name": "reset",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YPR.parse_line": {
            "name": "parse_line",
            "location": 136,
            "return": [
                "typing.Optional[typing.Tuple[(float, float, float)]]"
            ],
            "arguments": {
                "cls": [],
                "line": [
                    "str"
                ]
            }
        },
        "YPR.push_bytes": {
            "name": "push_bytes",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ypr_bytes": [
                    "bytes"
                ]
            }
        }
    },
    "nanaimo-master/src/nanaimo/parsers/__init__.py": {},
    "nanaimo-master/src/nanaimo/parsers/gtest/__init__.py": {
        "Parser.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "timeout_seconds": [
                    "float"
                ],
                "loop": [
                    "typing.Optional[asyncio.AbstractEventLoop]"
                ]
            }
        }
    },
    "nanaimo-master/src/nanaimo/pytest/hooks.py": {
        "pytest_nanaimo_fixture_type": {
            "name": "pytest_nanaimo_fixture_type",
            "location": 27,
            "return": [
                "typing.Type['nanaimo.fixtures.Fixture']"
            ],
            "arguments": {}
        }
    },
    "nanaimo-master/src/nanaimo/pytest/plugin.py": {
        "create_pytest_fixture": {
            "name": "create_pytest_fixture",
            "location": 109,
            "return": [
                "'nanaimo.fixtures.Fixture'"
            ],
            "arguments": {
                "request": [
                    "typing.Any"
                ],
                "fixture_name": [
                    "str"
                ]
            }
        },
        "nanaimo_fixture_manager": {
            "name": "nanaimo_fixture_manager",
            "location": 127,
            "return": [
                "nanaimo.fixtures.FixtureManager"
            ],
            "arguments": {
                "request": [
                    "typing.Any"
                ]
            }
        },
        "nanaimo_arguments": {
            "name": "nanaimo_arguments",
            "location": 151,
            "return": [
                "nanaimo.Namespace"
            ],
            "arguments": {
                "request": [
                    "typing.Any"
                ]
            }
        },
        "nanaimo_log": {
            "name": "nanaimo_log",
            "location": 174,
            "return": [
                "logging.Logger"
            ],
            "arguments": {
                "request": [
                    "typing.Any"
                ]
            }
        },
        "assert_success": {
            "name": "assert_success",
            "location": 217,
            "return": [
                "nanaimo.Artifacts"
            ],
            "arguments": {
                "artifacts": [
                    "nanaimo.Artifacts"
                ]
            }
        },
        "assert_success_if": {
            "name": "assert_success_if",
            "location": 266,
            "return": [
                "nanaimo.Artifacts"
            ],
            "arguments": {
                "artifacts": [
                    "nanaimo.Artifacts"
                ],
                "conditional": [
                    "typing.Callable[([nanaimo.Artifacts], bool)]"
                ]
            }
        },
        "_get_display": {
            "name": "_get_display",
            "location": 362,
            "return": [
                "'nanaimo.display.CharacterDisplay'"
            ],
            "arguments": {
                "config": [
                    "_pytest.config.Config"
                ]
            }
        },
        "is_nait_mode": {
            "name": "is_nait_mode",
            "location": 381,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 483,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "'_pytest.config.argparsing.Parser'"
                ],
                "pluginmanager": [
                    "'_pytest.config.PytestPluginManager'"
                ]
            }
        },
        "pytest_addhooks": {
            "name": "pytest_addhooks",
            "location": 548,
            "return": [],
            "arguments": {
                "pluginmanager": []
            }
        },
        "pytest_collection": {
            "name": "pytest_collection",
            "location": 559,
            "return": [],
            "arguments": {
                "session": [
                    "_pytest.main.Session"
                ]
            }
        },
        "pytest_sessionstart": {
            "name": "pytest_sessionstart",
            "location": 578,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "_pytest.main.Session"
                ]
            }
        },
        "pytest_runtest_setup": {
            "name": "pytest_runtest_setup",
            "location": 590,
            "return": [
                "None"
            ],
            "arguments": {
                "item": [
                    "pytest.Item"
                ]
            }
        },
        "pytest_runtest_teardown": {
            "name": "pytest_runtest_teardown",
            "location": 603,
            "return": [
                "None"
            ],
            "arguments": {
                "item": [
                    "pytest.Item"
                ],
                "nextitem": [
                    "pytest.Item"
                ]
            }
        },
        "pytest_sessionfinish": {
            "name": "pytest_sessionfinish",
            "location": 616,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "_pytest.main.Session"
                ],
                "exitstatus": [
                    "int"
                ]
            }
        },
        "pytest_report_header": {
            "name": "pytest_report_header",
            "location": 631,
            "return": [
                "typing.List[str]"
            ],
            "arguments": {
                "config": [
                    "_pytest.config.Config"
                ],
                "startdir": []
            }
        },
        "pytest_terminal_summary": {
            "name": "pytest_terminal_summary",
            "location": 640,
            "return": [
                "None"
            ],
            "arguments": {
                "terminalreporter": [
                    "'_pytest.terminal.TerminalReporter'"
                ],
                "exitstatus": [
                    "int"
                ],
                "config": [
                    "_pytest.config.Config"
                ]
            }
        },
        "PytestFixtureManager.__init__": {
            "name": "__init__",
            "location": 340,
            "return": [],
            "arguments": {
                "self": [],
                "pluginmanager": [
                    "'_pytest.config.PytestPluginManager'"
                ],
                "loop": [
                    "typing.Optional[asyncio.AbstractEventLoop]"
                ]
            }
        },
        "PytestFixtureManager.create_fixture": {
            "name": "create_fixture",
            "location": 346,
            "return": [
                "nanaimo.fixtures.Fixture"
            ],
            "arguments": {
                "self": [],
                "canonical_name": [
                    "str"
                ],
                "args": [
                    "typing.Optional[nanaimo.Namespace]"
                ],
                "loop": [
                    "typing.Optional[asyncio.AbstractEventLoop]"
                ]
            }
        },
        "_NanaimoItem.__init__": {
            "name": "__init__",
            "location": 402,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [],
                "fixture_names": []
            }
        },
        "_NanaimoItem.on_setup": {
            "name": "on_setup",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_NanaimoItem.runtest": {
            "name": "runtest",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_NanaimoItem._prunetraceback": {
            "name": "_prunetraceback",
            "location": 430,
            "return": [],
            "arguments": {
                "self": [],
                "excinfo": []
            }
        },
        "_SyntheticPlugin.__init__": {
            "name": "__init__",
            "location": 451,
            "return": [],
            "arguments": {
                "self": [],
                "fixture_type": []
            }
        },
        "_SyntheticPlugin.fixture_type": {
            "name": "fixture_type",
            "location": 471,
            "return": [
                "typing.Type['nanaimo.fixtures.Fixture']"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SyntheticPlugin._create_pytest_fixture": {
            "name": "_create_pytest_fixture",
            "location": 474,
            "return": [
                "nanaimo.fixtures.Fixture"
            ],
            "arguments": {
                "self": [],
                "pytest_request": [
                    "typing.Any"
                ],
                "nanaimo_fixture_manager": [
                    "nanaimo.fixtures.FixtureManager"
                ],
                "fixture_type": [
                    "typing.Type['nanaimo.fixtures.Fixture']"
                ]
            }
        },
        "_SyntheticPlugin.__init__._generic_async_fixture": {
            "name": "_generic_async_fixture",
            "location": 456,
            "return": [],
            "arguments": {
                "request": [],
                "nanaimo_fixture_manager": []
            }
        }
    },
    "nanaimo-master/src/nanaimo/pytest/__init__.py": {},
    "nanaimo-master/test/conftest.py": {
        "run_nait": {
            "name": "run_nait",
            "location": 21,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "paths_for_test": {
            "name": "paths_for_test",
            "location": 43,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_config": {
            "name": "test_config",
            "location": 48,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "local_setup_cfg": {
            "name": "local_setup_cfg",
            "location": 53,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "nanaimo_defaults": {
            "name": "nanaimo_defaults",
            "location": 58,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "dummy_nanaimo_fixture": {
            "name": "dummy_nanaimo_fixture",
            "location": 64,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "mock_JLinkExe": {
            "name": "mock_JLinkExe",
            "location": 69,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_build_config_hex": {
            "name": "test_build_config_hex",
            "location": 74,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_jlink_template": {
            "name": "test_jlink_template",
            "location": 79,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "serial_simulator_type": {
            "name": "serial_simulator_type",
            "location": 84,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "build_output": {
            "name": "build_output",
            "location": 89,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "nanaimo_bar_from_conftest": {
            "name": "nanaimo_bar_from_conftest",
            "location": 97,
            "return": [
                "'nanaimo.fixtures.Fixture'"
            ],
            "arguments": {
                "nanaimo_fixture_manager": [],
                "nanaimo_arguments": []
            }
        },
        "run_nait._run_nait": {
            "name": "_run_nait",
            "location": 22,
            "return": [
                "subprocess.CompletedProcess"
            ],
            "arguments": {
                "args": [
                    "typing.List[str]"
                ],
                "check_result": [
                    "bool"
                ],
                "env": [
                    "typing.Optional[typing.Dict[(str, str)]]"
                ]
            }
        }
    },
    "nanaimo-master/test/test_artifacts.py": {
        "test_create_artifacts": {
            "name": "test_create_artifacts",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_missing_artifact": {
            "name": "test_missing_artifact",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_result_code": {
            "name": "test_result_code",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nanaimo-master/test/test_bkprecision.py": {
        "create_dummy_serial_port_factory": {
            "name": "create_dummy_serial_port_factory",
            "location": 21,
            "return": [
                "Series1900BUart.UartFactoryType"
            ],
            "arguments": {
                "fake_lines": [
                    "typing.List[str]"
                ],
                "serial_simulator_type": [
                    "typing.Type"
                ],
                "event_loop": [
                    "typing.Optional[asyncio.AbstractEventLoop]"
                ],
                "loop_fake_data": [
                    "bool"
                ]
            }
        },
        "to_namespace": {
            "name": "to_namespace",
            "location": 38,
            "return": [
                "nanaimo.Namespace"
            ],
            "arguments": {
                "fixture_type": [
                    "typing.Type[nanaimo.fixtures.Fixture]"
                ],
                "command": [
                    "str"
                ],
                "nanaimo_defaults": [
                    "nanaimo.config.ArgumentDefaults"
                ]
            }
        },
        "create_dummy_serial_port_factory.dummy_serial_port": {
            "name": "dummy_serial_port",
            "location": 28,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "port": [
                    "typing.Union[(str, pathlib.Path)]"
                ]
            }
        }
    },
    "nanaimo-master/test/test_instrument_jlink.py": {},
    "nanaimo-master/test/test_nait.py": {
        "test_arg_version": {
            "name": "test_arg_version",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "run_nait": []
            }
        },
        "test_help": {
            "name": "test_help",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "run_nait": []
            }
        },
        "test_nanaimo_bar": {
            "name": "test_nanaimo_bar",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "run_nait": []
            }
        },
        "test_environ": {
            "name": "test_environ",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "run_nait": []
            }
        }
    },
    "nanaimo-master/test/test_namespace.py": {
        "test_create_orphan": {
            "name": "test_create_orphan",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_single_parent": {
            "name": "test_create_single_parent",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_grandparent": {
            "name": "test_create_grandparent",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_merge": {
            "name": "test_merge",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_overrides": {
            "name": "test_overrides",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "test_config": [
                    "pathlib.Path"
                ]
            }
        },
        "test_setup_cfg": {
            "name": "test_setup_cfg",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "local_setup_cfg": [
                    "pathlib.Path"
                ]
            }
        },
        "test_setup_cfg_with_merge": {
            "name": "test_setup_cfg_with_merge",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "local_setup_cfg": [
                    "pathlib.Path"
                ]
            }
        },
        "test_setup_cfg_with_none_value": {
            "name": "test_setup_cfg_with_none_value",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "local_setup_cfg": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "nanaimo-master/test/test_nanaimo.py": {
        "test_uart_monitor": {
            "name": "test_uart_monitor",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "serial_simulator_type": [
                    "typing.Type"
                ]
            }
        },
        "test_enable_default_from_environ": {
            "name": "test_enable_default_from_environ",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "nanaimo_defaults": [
                    "nanaimo.config.ArgumentDefaults"
                ]
            }
        },
        "test_require_prefix": {
            "name": "test_require_prefix",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "required_prefix": [],
                "test_positional_args": [],
                "test_expected_args": []
            }
        },
        "test_set_subprocess_environment_no_environ": {
            "name": "test_set_subprocess_environment_no_environ",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_as_merged_dict": {
            "name": "test_get_as_merged_dict",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nanaimo-master/test/test_nanaimo_fixture.py": {
        "test_canonical_name": {
            "name": "test_canonical_name",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "dummy_nanaimo_fixture": [
                    "nanaimo.fixtures.Fixture"
                ]
            }
        },
        "test_gather_timeout.GatherTimeoutFixture.on_visit_test_arguments": {
            "name": "on_visit_test_arguments",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "arguments": [
                    "nanaimo.Arguments"
                ]
            }
        },
        "test_subprocess_fixture_logfile.SubprocessTestHarness.on_visit_test_arguments": {
            "name": "on_visit_test_arguments",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "arguments": [
                    "nanaimo.Arguments"
                ]
            }
        },
        "test_subprocess_fixture_logfile.SubprocessTestHarness.on_construct_command": {
            "name": "on_construct_command",
            "location": 196,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arguments": [
                    "nanaimo.Namespace"
                ],
                "inout_artifacts": [
                    "nanaimo.Artifacts"
                ]
            }
        },
        "test_subprocess_fixture_environment.SubprocessTestHarness.on_visit_test_arguments": {
            "name": "on_visit_test_arguments",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "arguments": [
                    "nanaimo.Arguments"
                ]
            }
        },
        "test_subprocess_fixture_environment.SubprocessTestHarness.on_construct_command": {
            "name": "on_construct_command",
            "location": 229,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arguments": [
                    "nanaimo.Namespace"
                ],
                "inout_artifacts": [
                    "nanaimo.Artifacts"
                ]
            }
        },
        "test_composite_fixture.Composite.__init__": {
            "name": "__init__",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "nanaimo.fixtures.FixtureManager"
                ],
                "args": [
                    "nanaimo.Namespace"
                ]
            }
        },
        "test_composite_fixture.Composite.on_visit_test_arguments": {
            "name": "on_visit_test_arguments",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "arguments": [
                    "nanaimo.Arguments"
                ]
            }
        },
        "test_subprocess_read_illegal_encoding.SubprocessTestHarness.on_visit_test_arguments": {
            "name": "on_visit_test_arguments",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "arguments": [
                    "nanaimo.Arguments"
                ]
            }
        },
        "test_subprocess_read_illegal_encoding.SubprocessTestHarness.on_construct_command": {
            "name": "on_construct_command",
            "location": 301,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arguments": [
                    "nanaimo.Namespace"
                ],
                "inout_artifacts": [
                    "nanaimo.Artifacts"
                ]
            }
        },
        "test_loop_into_fixture_arg.Dummy.__init__": {
            "name": "__init__",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "nanaimo.fixtures.FixtureManager"
                ],
                "args": [
                    "nanaimo.Namespace"
                ]
            }
        },
        "test_loop_into_fixture_arg.Dummy.on_visit_test_arguments": {
            "name": "on_visit_test_arguments",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "arguments": [
                    "nanaimo.Arguments"
                ]
            }
        }
    },
    "nanaimo-master/test/test_nanaimo_serial_watch.py": {
        "test_default_match.uart_factory": {
            "name": "uart_factory",
            "location": 25,
            "return": [
                "nanaimo.connections.uart.ConcurrentUart"
            ],
            "arguments": {}
        },
        "test_realistic_match.uart_factory": {
            "name": "uart_factory",
            "location": 53,
            "return": [
                "nanaimo.connections.uart.ConcurrentUart"
            ],
            "arguments": {}
        }
    },
    "nanaimo-master/test/test_parser_imu.py": {
        "common_test": {
            "name": "common_test",
            "location": 22,
            "return": [
                "typing.Tuple[(Handler, YPR)]"
            ],
            "arguments": {
                "binary_data": [
                    "typing.List[bytes]"
                ]
            }
        },
        "test_line_too_long": {
            "name": "test_line_too_long",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_junk_data": {
            "name": "test_junk_data",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_integers": {
            "name": "test_integers",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bulk_data": {
            "name": "test_bulk_data",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "paths_for_test": [
                    "typing.Any"
                ]
            }
        },
        "Handler.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Handler.__call__": {
            "name": "__call__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "typing.Tuple[(float, float, float)]"
                ]
            }
        }
    },
    "nanaimo-master/test/test_pytest_plugin.py": {
        "test_assert_success": {
            "name": "test_assert_success",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nanaimo-master/test/test_saleae.py": {},
    "nanaimo-master/test/test_subprocess.py": {
        "test_subprocess_match_filter.TestSubprocessFixture.on_construct_command": {
            "name": "on_construct_command",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arguments": [
                    "nanaimo.Namespace"
                ],
                "inout_artifacts": [
                    "nanaimo.Artifacts"
                ]
            }
        }
    },
    "nanaimo-master/test/test_ykush.py": {
        "test_ykush_exists": {
            "name": "test_ykush_exists",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "nanaimo_instr_ykush": [
                    "nanaimo.fixtures.Fixture"
                ]
            }
        }
    },
    "nanaimo-master/test/material/mock_JLinkExe.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "nanaimo-master/test/material/simulators.py": {
        "Serial.open": {
            "name": "open",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serial.close": {
            "name": "close",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serial.is_open": {
            "name": "is_open",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serial.flush": {
            "name": "flush",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serial.cancel_read": {
            "name": "cancel_read",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serial.timeout": {
            "name": "timeout",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "Serial.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "fake_data": [
                    "typing.List[str]"
                ],
                "fake_eol": [
                    "str"
                ],
                "loop_fake_data": [
                    "bool"
                ]
            }
        },
        "Serial.reset_fake_input": {
            "name": "reset_fake_input",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serial.read": {
            "name": "read",
            "location": 58,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serial.write": {
            "name": "write",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "FileLogger.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "dummy_source": [
                    "pathlib.Path"
                ],
                "log_file": [
                    "pathlib.Path"
                ],
                "cadence_seconds": [
                    "float"
                ],
                "echo": [
                    "bool"
                ]
            }
        },
        "FileLogger.__enter__": {
            "name": "__enter__",
            "location": 117,
            "return": [
                "'FileLogger'"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLogger.__exit__": {
            "name": "__exit__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exception_type": [
                    "typing.Optional[typing.Any]"
                ],
                "exception_value": [
                    "typing.Optional[typing.Any]"
                ],
                "traceback": [
                    "typing.Optional[types.TracebackType]"
                ]
            }
        },
        "FileLogger._write_log": {
            "name": "_write_log",
            "location": 133,
            "return": [],
            "arguments": {
                "write_condition": [],
                "run": [],
                "args": []
            }
        }
    },
    "nanaimo-master/test/material/unicode.py": {},
    "nanaimo-master/test/material/__init__.py": {
        "DummyFixture.__init__": {
            "name": "__init__",
            "location": 325,
            "return": [],
            "arguments": {
                "self": [],
                "manager": [
                    "nanaimo.fixtures.FixtureManager"
                ],
                "args": [
                    "nanaimo.Namespace"
                ]
            }
        },
        "DummyFixture.on_visit_test_arguments": {
            "name": "on_visit_test_arguments",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "arguments": [
                    "nanaimo.Arguments"
                ]
            }
        },
        "Paths.__init__": {
            "name": "__init__",
            "location": 345,
            "return": [],
            "arguments": {
                "self": [],
                "test_file": [
                    "str"
                ]
            }
        },
        "Paths.build_dir": {
            "name": "build_dir",
            "location": 362,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Paths.out_dir": {
            "name": "out_dir",
            "location": 368,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Paths._ensure_dir": {
            "name": "_ensure_dir",
            "location": 378,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "path_dir": [
                    "pathlib.Path"
                ]
            }
        }
    }
}
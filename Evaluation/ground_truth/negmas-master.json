{
    "negmas-master/setup.py": {},
    "negmas-master/docs/conf.py": {},
    "negmas-master/etc/run_notebooks.py": {},
    "negmas-master/negmas/checkpoints.py": {
        "CheckpointMixin.checkpoint_init": {
            "name": "checkpoint_init",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "step_attrib": [
                    "str"
                ],
                "every": [
                    "int"
                ],
                "folder": [
                    "(PathLike | None)"
                ],
                "filename": [
                    "(str | None)"
                ],
                "info": [
                    "(dict[(str, Any)] | None)"
                ],
                "exist_ok": [
                    "bool"
                ],
                "single": [
                    "bool"
                ]
            }
        },
        "CheckpointMixin.checkpoint_on_step_started": {
            "name": "checkpoint_on_step_started",
            "location": 56,
            "return": [
                "(Path | None)"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckpointMixin.checkpoint_final_step": {
            "name": "checkpoint_final_step",
            "location": 80,
            "return": [
                "(Path | None)"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckpointRunner.register_callback": {
            "name": "register_callback",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "Callable[([NamedObject, int], None)]"
                ]
            }
        },
        "CheckpointRunner.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "folder": [
                    "(str | Path)"
                ],
                "id": [
                    "(str | None)"
                ],
                "callback": [
                    "(Callable[([NamedObject, int], None)] | None)"
                ],
                "watch": [
                    "bool"
                ],
                "object_type": [
                    "type[NamedObject]"
                ]
            }
        },
        "CheckpointRunner.current_step": {
            "name": "current_step",
            "location": 143,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckpointRunner.goto": {
            "name": "goto",
            "location": 149,
            "return": [
                "(int | None)"
            ],
            "arguments": {
                "self": [],
                "step": [
                    "int"
                ],
                "exact": []
            }
        },
        "CheckpointRunner.step": {
            "name": "step",
            "location": 185,
            "return": [
                "(int | None)"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckpointRunner.run": {
            "name": "run",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckpointRunner.loaded_object": {
            "name": "loaded_object",
            "location": 204,
            "return": [
                "(NamedObject | None)"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckpointRunner.fork": {
            "name": "fork",
            "location": 208,
            "return": [
                "(NamedObject | None)"
            ],
            "arguments": {
                "self": [],
                "copy_past_checkpoints": [
                    "bool"
                ],
                "every": [
                    "int"
                ],
                "folder": [
                    "((str | Path) | None)"
                ],
                "filename": [
                    "(str | None)"
                ],
                "info": [
                    "(dict[(str, Any)] | None)"
                ],
                "exist_ok": [
                    "bool"
                ],
                "single": [
                    "bool"
                ]
            }
        },
        "CheckpointRunner.steps": {
            "name": "steps",
            "location": 276,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckpointRunner.reset": {
            "name": "reset",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckpointRunner.next_step": {
            "name": "next_step",
            "location": 286,
            "return": [
                "(int | None)"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckpointRunner.previous_step": {
            "name": "previous_step",
            "location": 294,
            "return": [
                "(int | None)"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckpointRunner.last_step": {
            "name": "last_step",
            "location": 304,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckpointRunner.first_step": {
            "name": "first_step",
            "location": 309,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/common.py": {
        "Distribution.type": {
            "name": "type",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Distribution.mean": {
            "name": "mean",
            "location": 45,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Distribution.prob": {
            "name": "prob",
            "location": 49,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "float"
                ]
            }
        },
        "Distribution.cum_prob": {
            "name": "cum_prob",
            "location": 53,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "mn": [
                    "float"
                ],
                "mx": [
                    "float"
                ]
            }
        },
        "Distribution.sample": {
            "name": "sample",
            "location": 57,
            "return": [
                "Iterable[float]"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int"
                ]
            }
        },
        "Distribution.loc": {
            "name": "loc",
            "location": 62,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Distribution.scale": {
            "name": "scale",
            "location": 67,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Distribution.min": {
            "name": "min",
            "location": 72,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Distribution.max": {
            "name": "max",
            "location": 77,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Distribution.is_uniform": {
            "name": "is_uniform",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Distribution.is_gaussian": {
            "name": "is_gaussian",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Distribution.is_crisp": {
            "name": "is_crisp",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Distribution.__call__": {
            "name": "__call__",
            "location": 93,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "float"
                ]
            }
        },
        "Distribution.__add__": {
            "name": "__add__",
            "location": 97,
            "return": [
                "Distribution"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Distribution.__sub__": {
            "name": "__sub__",
            "location": 101,
            "return": [
                "Distribution"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Distribution.__mul__": {
            "name": "__mul__",
            "location": 105,
            "return": [
                "Distribution"
            ],
            "arguments": {
                "self": [],
                "weight": [
                    "float"
                ]
            }
        },
        "Distribution.__lt__": {
            "name": "__lt__",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Distribution.__le__": {
            "name": "__le__",
            "location": 113,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Distribution.__eq__": {
            "name": "__eq__",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Distribution.__ne__": {
            "name": "__ne__",
            "location": 121,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Distribution.__gt__": {
            "name": "__gt__",
            "location": 125,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Distribution.__ge__": {
            "name": "__ge__",
            "location": 129,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Distribution.__float__": {
            "name": "__float__",
            "location": 133,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MechanismState.__hash__": {
            "name": "__hash__",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MechanismState.ended": {
            "name": "ended",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MechanismState.keys": {
            "name": "keys",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MechanismState.values": {
            "name": "values",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MechanismState.asdict": {
            "name": "asdict",
            "location": 244,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MechanismState.__getitem__": {
            "name": "__getitem__",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "NegotiatorMechanismInterface.cartesian_outcome_space": {
            "name": "cartesian_outcome_space",
            "location": 304,
            "return": [
                "CartesianOutcomeSpace"
            ],
            "arguments": {
                "self": []
            }
        },
        "NegotiatorMechanismInterface.discrete_outcome_space": {
            "name": "discrete_outcome_space",
            "location": 320,
            "return": [
                "DiscreteOutcomeSpace"
            ],
            "arguments": {
                "self": [],
                "levels": [
                    "int"
                ],
                "max_cardinality": [
                    "int"
                ]
            }
        },
        "NegotiatorMechanismInterface.params": {
            "name": "params",
            "location": 329,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NegotiatorMechanismInterface.random_outcomes": {
            "name": "random_outcomes",
            "location": 333,
            "return": [
                "list[Outcome]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "NegotiatorMechanismInterface.discrete_outcomes": {
            "name": "discrete_outcomes",
            "location": 347,
            "return": [
                "Iterable[Outcome]"
            ],
            "arguments": {
                "self": [],
                "max_cardinality": [
                    "(int | float)"
                ]
            }
        },
        "NegotiatorMechanismInterface.issues": {
            "name": "issues",
            "location": 364,
            "return": [
                "tuple[(Issue, ...)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NegotiatorMechanismInterface.outcomes": {
            "name": "outcomes",
            "location": 373,
            "return": [
                "(Iterable[Outcome] | None)"
            ],
            "arguments": {
                "self": []
            }
        },
        "NegotiatorMechanismInterface.participants": {
            "name": "participants",
            "location": 384,
            "return": [
                "list[NegotiatorInfo]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NegotiatorMechanismInterface.state": {
            "name": "state",
            "location": 388,
            "return": [
                "MechanismState"
            ],
            "arguments": {
                "self": []
            }
        },
        "NegotiatorMechanismInterface.requirements": {
            "name": "requirements",
            "location": 401,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "NegotiatorMechanismInterface.n_negotiators": {
            "name": "n_negotiators",
            "location": 411,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NegotiatorMechanismInterface.negotiator_ids": {
            "name": "negotiator_ids",
            "location": 416,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NegotiatorMechanismInterface.negotiator_names": {
            "name": "negotiator_names",
            "location": 421,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NegotiatorMechanismInterface.agent_ids": {
            "name": "agent_ids",
            "location": 426,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NegotiatorMechanismInterface.agent_names": {
            "name": "agent_names",
            "location": 431,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NegotiatorMechanismInterface.keys": {
            "name": "keys",
            "location": 435,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NegotiatorMechanismInterface.values": {
            "name": "values",
            "location": 438,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NegotiatorMechanismInterface.asdict": {
            "name": "asdict",
            "location": 441,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NegotiatorMechanismInterface.__getitem__": {
            "name": "__getitem__",
            "location": 445,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        }
    },
    "negmas-master/negmas/config.py": {
        "negmas_config": {
            "name": "negmas_config",
            "location": 46,
            "return": [],
            "arguments": {
                "key": [
                    "str"
                ],
                "default": []
            }
        }
    },
    "negmas-master/negmas/events.py": {
        "myvars": {
            "name": "myvars",
            "location": 73,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "EventSource.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EventSource.announce": {
            "name": "announce",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "event": [
                    "Event"
                ]
            }
        },
        "EventSource.register_listener": {
            "name": "register_listener",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "event_type": [
                    "(str | None)"
                ],
                "listener": [
                    "EventSink"
                ]
            }
        },
        "EventSink.on_event": {
            "name": "on_event",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "event": [
                    "Event"
                ],
                "sender": [
                    "EventSource"
                ]
            }
        },
        "EventLogger.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "file_name": [
                    "(str | Path)"
                ],
                "types": [
                    "(list[str] | None)"
                ]
            }
        },
        "EventLogger.reset_timer": {
            "name": "reset_timer",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EventLogger.on_event": {
            "name": "on_event",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "event": [
                    "Event"
                ],
                "sender": [
                    "EventSource"
                ]
            }
        },
        "Notifier.notify": {
            "name": "notify",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "notifiable": [
                    "Notifiable"
                ],
                "notification": [
                    "Notification"
                ]
            }
        },
        "Notifiable.add_handler": {
            "name": "add_handler",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "notification_type": [
                    "str"
                ],
                "callback": [
                    "Callable[([Notification, str], bool)]"
                ]
            }
        },
        "Notifiable.handlers": {
            "name": "handlers",
            "location": 179,
            "return": [
                "list[Callable[([Notification, str], bool)]]"
            ],
            "arguments": {
                "self": [],
                "notification_type": [
                    "str"
                ]
            }
        },
        "Notifiable.remove_handler": {
            "name": "remove_handler",
            "location": 191,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "notification_type": [
                    "str"
                ],
                "callback": [
                    "Callable[([Notification, str], bool)]"
                ]
            }
        },
        "Notifiable.on_notification": {
            "name": "on_notification",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "notification": [
                    "Notification"
                ],
                "notifier": [
                    "str"
                ]
            }
        },
        "Notifiable.on_notification_": {
            "name": "on_notification_",
            "location": 226,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "notification": [
                    "Notification"
                ],
                "notifier": [
                    "str"
                ]
            }
        },
        "EventLogger.on_event._simplify": {
            "name": "_simplify",
            "location": 108,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "negmas-master/negmas/exceptions.py": {},
    "negmas-master/negmas/ga.py": {
        "GAMechanism.generate": {
            "name": "generate",
            "location": 31,
            "return": [
                "list[Outcome]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "GAMechanism.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GAMechanism.crossover": {
            "name": "crossover",
            "location": 52,
            "return": [
                "Outcome"
            ],
            "arguments": {
                "self": [],
                "outcome1": [
                    "Outcome"
                ],
                "outcome2": [
                    "Outcome"
                ]
            }
        },
        "GAMechanism.mutate": {
            "name": "mutate",
            "location": 61,
            "return": [
                "Outcome"
            ],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ]
            }
        },
        "GAMechanism.select": {
            "name": "select",
            "location": 65,
            "return": [
                "list[Outcome]"
            ],
            "arguments": {
                "self": [],
                "outcomes": [
                    "list[Outcome]"
                ]
            }
        },
        "GAMechanism.next_generation": {
            "name": "next_generation",
            "location": 69,
            "return": [
                "list[Outcome]"
            ],
            "arguments": {
                "self": [],
                "parents": [
                    "list[Outcome]"
                ]
            }
        },
        "GAMechanism.update_ranks": {
            "name": "update_ranks",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GAMechanism.update_dominant_outcomes": {
            "name": "update_dominant_outcomes",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GAMechanism.round": {
            "name": "round",
            "location": 119,
            "return": [
                "MechanismRoundResult"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/generics.py": {
        "gmap": {
            "name": "gmap",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "group": [
                    "GenericMapping"
                ],
                "param": [
                    "Any"
                ]
            }
        },
        "iget": {
            "name": "iget",
            "location": 61,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": [
                    "IterableMapping"
                ],
                "_key": [
                    "Any"
                ],
                "default": []
            }
        },
        "gget": {
            "name": "gget",
            "location": 104,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": [
                    "GenericMapping"
                ],
                "_key": [
                    "Any"
                ],
                "default": []
            }
        },
        "ienumerate": {
            "name": "ienumerate",
            "location": 150,
            "return": [
                "Iterable[tuple[(Any, Any)]]"
            ],
            "arguments": {
                "x": [
                    "IterableMapping"
                ]
            }
        },
        "ivalues": {
            "name": "ivalues",
            "location": 193,
            "return": [
                "Iterable[Any]"
            ],
            "arguments": {
                "x": [
                    "IterableMapping"
                ]
            }
        },
        "ikeys": {
            "name": "ikeys",
            "location": 233,
            "return": [
                "Iterable[Any]"
            ],
            "arguments": {
                "x": [
                    "IterableMapping"
                ]
            }
        }
    },
    "negmas-master/negmas/inout.py": {
        "get_domain_issues": {
            "name": "get_domain_issues",
            "location": 465,
            "return": [
                "(Sequence[Issue] | None)"
            ],
            "arguments": {
                "domain_file_name": [
                    "(PathLike | str)"
                ],
                "n_discretization": [
                    "(int | None)"
                ],
                "safe_parsing": []
            }
        },
        "load_genius_domain": {
            "name": "load_genius_domain",
            "location": 493,
            "return": [
                "Scenario"
            ],
            "arguments": {
                "domain_file_name": [
                    "PathLike"
                ],
                "utility_file_names": [
                    "(Iterable[PathLike] | None)"
                ],
                "ignore_discount": [],
                "ignore_reserved": [],
                "safe_parsing": []
            }
        },
        "load_genius_domain_from_folder": {
            "name": "load_genius_domain_from_folder",
            "location": 572,
            "return": [
                "Scenario"
            ],
            "arguments": {
                "folder_name": [
                    "(str | PathLike)"
                ],
                "ignore_reserved": [],
                "ignore_discount": [],
                "safe_parsing": []
            }
        },
        "find_domain_and_utility_files": {
            "name": "find_domain_and_utility_files",
            "location": 673,
            "return": [
                "tuple[((PathLike | None), list[PathLike])]"
            ],
            "arguments": {
                "folder_name": []
            }
        },
        "Scenario.issues": {
            "name": "issues",
            "location": 57,
            "return": [
                "tuple[(Issue, ...)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scenario.to_genius_files": {
            "name": "to_genius_files",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "domain_path": [
                    "Path"
                ],
                "ufun_paths": [
                    "list[Path]"
                ]
            }
        },
        "Scenario.to_genius_folder": {
            "name": "to_genius_folder",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Path"
                ]
            }
        },
        "Scenario.n_negotiators": {
            "name": "n_negotiators",
            "location": 89,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scenario.n_issues": {
            "name": "n_issues",
            "location": 93,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scenario.issue_names": {
            "name": "issue_names",
            "location": 97,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scenario.to_numeric": {
            "name": "to_numeric",
            "location": 100,
            "return": [
                "Scenario"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scenario.to_single_issue": {
            "name": "to_single_issue",
            "location": 109,
            "return": [
                "Scenario"
            ],
            "arguments": {
                "self": [],
                "numeric": [],
                "stringify": []
            }
        },
        "Scenario.make_session": {
            "name": "make_session",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "negotiators": [
                    "((Callable[([], Negotiator)] | list[Negotiator]) | None)"
                ],
                "n_steps": [
                    "(int | None)"
                ],
                "time_limit": [
                    "(float | None)"
                ],
                "roles": [
                    "(list[str] | None)"
                ]
            }
        },
        "Scenario.scale_min": {
            "name": "scale_min",
            "location": 193,
            "return": [
                "Scenario"
            ],
            "arguments": {
                "self": [],
                "to": [
                    "float"
                ]
            }
        },
        "Scenario.scale_max": {
            "name": "scale_max",
            "location": 209,
            "return": [
                "Scenario"
            ],
            "arguments": {
                "self": [],
                "to": [
                    "float"
                ]
            }
        },
        "Scenario.normalize": {
            "name": "normalize",
            "location": 225,
            "return": [
                "Scenario"
            ],
            "arguments": {
                "self": [],
                "to": [
                    "tuple[(float, float)]"
                ]
            }
        },
        "Scenario.discretize": {
            "name": "discretize",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "levels": [
                    "int"
                ]
            }
        },
        "Scenario.remove_discounting": {
            "name": "remove_discounting",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scenario.remove_reserved_values": {
            "name": "remove_reserved_values",
            "location": 252,
            "return": [],
            "arguments": {
                "self": [],
                "r": [
                    "float"
                ]
            }
        },
        "Scenario.calc_stats": {
            "name": "calc_stats",
            "location": 258,
            "return": [
                "dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "max_cardinality": [
                    "int"
                ]
            }
        },
        "Scenario.serialize": {
            "name": "serialize",
            "location": 341,
            "return": [
                "dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scenario.to_yaml": {
            "name": "to_yaml",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "(Path | str)"
                ]
            }
        },
        "Scenario.to_json": {
            "name": "to_json",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "(Path | str)"
                ]
            }
        },
        "Scenario.dumpas": {
            "name": "dumpas",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "(Path | str)"
                ],
                "type": []
            }
        },
        "Scenario.from_genius_folder": {
            "name": "from_genius_folder",
            "location": 433,
            "return": [
                "(Scenario | None)"
            ],
            "arguments": {
                "path": [
                    "(PathLike | str)"
                ],
                "ignore_discount": [],
                "ignore_reserved": [],
                "safe_parsing": []
            }
        },
        "Scenario.from_genius_files": {
            "name": "from_genius_files",
            "location": 447,
            "return": [
                "(Scenario | None)"
            ],
            "arguments": {
                "domain": [
                    "PathLike"
                ],
                "ufuns": [
                    "Iterable[PathLike]"
                ],
                "ignore_discount": [],
                "ignore_reserved": [],
                "safe_parsing": []
            }
        },
        "Scenario.serialize.get_name": {
            "name": "get_name",
            "location": 351,
            "return": [],
            "arguments": {
                "x": [],
                "default": []
            }
        },
        "Scenario.serialize.adjust": {
            "name": "adjust",
            "location": 356,
            "return": [],
            "arguments": {
                "d": [],
                "default_name": [],
                "remove_dunder": [],
                "adjust_name": [],
                "ignored": [],
                "rename": []
            }
        }
    },
    "negmas-master/negmas/mechanisms.py": {
        "Mechanism.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "outcome_space": [
                    "(OutcomeSpace | None)"
                ],
                "issues": [
                    "(list[Issue] | None)"
                ],
                "outcomes": [
                    "((list[Outcome] | int) | None)"
                ],
                "n_steps": [
                    "(int | None)"
                ],
                "time_limit": [
                    "(float | None)"
                ],
                "hidden_time_limit": [
                    "float"
                ],
                "step_time_limit": [
                    "(float | None)"
                ],
                "negotiator_time_limit": [
                    "(float | None)"
                ],
                "max_n_agents": [
                    "(int | None)"
                ],
                "dynamic_entry": [],
                "annotation": [
                    "(dict[(str, Any)] | None)"
                ],
                "state_factory": [
                    "type[MechanismState]"
                ],
                "extra_callbacks": [],
                "checkpoint_every": [
                    "int"
                ],
                "checkpoint_folder": [
                    "(PathLike | None)"
                ],
                "checkpoint_filename": [
                    "(str | None)"
                ],
                "extra_checkpoint_info": [
                    "(dict[(str, Any)] | None)"
                ],
                "single_checkpoint": [
                    "bool"
                ],
                "exist_ok": [
                    "bool"
                ],
                "name": [],
                "genius_port": [
                    "int"
                ],
                "id": [
                    "(str | None)"
                ],
                "type_name": [
                    "(str | None)"
                ]
            }
        },
        "Mechanism.negotiators": {
            "name": "negotiators",
            "location": 216,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mechanism.participants": {
            "name": "participants",
            "location": 220,
            "return": [
                "list[NegotiatorInfo]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mechanism.is_valid": {
            "name": "is_valid",
            "location": 227,
            "return": [],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ]
            }
        },
        "Mechanism.outcome_space": {
            "name": "outcome_space",
            "location": 232,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mechanism.discrete_outcome_space": {
            "name": "discrete_outcome_space",
            "location": 235,
            "return": [
                "DiscreteOutcomeSpace"
            ],
            "arguments": {
                "self": [],
                "levels": [
                    "int"
                ],
                "max_cardinality": [
                    "int"
                ]
            }
        },
        "Mechanism.outcomes": {
            "name": "outcomes",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mechanism.discrete_outcomes": {
            "name": "discrete_outcomes",
            "location": 255,
            "return": [
                "list[Outcome]"
            ],
            "arguments": {
                "self": [],
                "levels": [
                    "int"
                ],
                "max_cardinality": [
                    "(int | float)"
                ]
            }
        },
        "Mechanism.random_outcomes": {
            "name": "random_outcomes",
            "location": 283,
            "return": [
                "list[Outcome]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "Mechanism.time": {
            "name": "time",
            "location": 305,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mechanism.remaining_time": {
            "name": "remaining_time",
            "location": 313,
            "return": [
                "(float | None)"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mechanism.relative_time": {
            "name": "relative_time",
            "location": 327,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mechanism.remaining_steps": {
            "name": "remaining_steps",
            "location": 343,
            "return": [
                "(int | None)"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mechanism.requirements": {
            "name": "requirements",
            "location": 359,
            "return": [],
            "arguments": {
                "self": [],
                "requirements": [
                    "dict[(str, (((((tuple[(((int | float) | str), ((int | float) | str))] | list) | set) | int) | float) | str))]"
                ]
            }
        },
        "Mechanism.is_satisfying": {
            "name": "is_satisfying",
            "location": 377,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "capabilities": [
                    "dict"
                ]
            }
        },
        "Mechanism.can_participate": {
            "name": "can_participate",
            "location": 446,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "Negotiator"
                ]
            }
        },
        "Mechanism.can_accept_more_agents": {
            "name": "can_accept_more_agents",
            "location": 472,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mechanism.can_enter": {
            "name": "can_enter",
            "location": 480,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "Negotiator"
                ]
            }
        },
        "Mechanism.state": {
            "name": "state",
            "location": 489,
            "return": [
                "MechanismState"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mechanism._get_nmi": {
            "name": "_get_nmi",
            "location": 513,
            "return": [
                "NegotiatorMechanismInterface"
            ],
            "arguments": {
                "self": [],
                "negotiator": [
                    "Negotiator"
                ]
            }
        },
        "Mechanism.add": {
            "name": "add",
            "location": 516,
            "return": [
                "(bool | None)"
            ],
            "arguments": {
                "self": [],
                "negotiator": [
                    "Negotiator"
                ]
            }
        },
        "Mechanism.get_negotiator": {
            "name": "get_negotiator",
            "location": 599,
            "return": [
                "(Negotiator | None)"
            ],
            "arguments": {
                "self": [],
                "nid": [
                    "str"
                ]
            }
        },
        "Mechanism.can_leave": {
            "name": "can_leave",
            "location": 603,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "Negotiator"
                ]
            }
        },
        "Mechanism.remove": {
            "name": "remove",
            "location": 611,
            "return": [
                "(bool | None)"
            ],
            "arguments": {
                "self": [],
                "negotiator": [
                    "Negotiator"
                ]
            }
        },
        "Mechanism.add_requirements": {
            "name": "add_requirements",
            "location": 634,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requirements": [
                    "dict"
                ]
            }
        },
        "Mechanism.remove_requirements": {
            "name": "remove_requirements",
            "location": 644,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requirements": [
                    "Iterable"
                ]
            }
        },
        "Mechanism.negotiator_index": {
            "name": "negotiator_index",
            "location": 650,
            "return": [
                "(int | None)"
            ],
            "arguments": {
                "self": [],
                "nid": [
                    "str"
                ]
            }
        },
        "Mechanism.negotiator_ids": {
            "name": "negotiator_ids",
            "location": 663,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mechanism.agent_ids": {
            "name": "agent_ids",
            "location": 667,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mechanism.agent_names": {
            "name": "agent_names",
            "location": 671,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mechanism.negotiator_names": {
            "name": "negotiator_names",
            "location": 675,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mechanism.agreement": {
            "name": "agreement",
            "location": 679,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mechanism.n_outcomes": {
            "name": "n_outcomes",
            "location": 683,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mechanism.issues": {
            "name": "issues",
            "location": 687,
            "return": [
                "list[Issue]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mechanism.completed": {
            "name": "completed",
            "location": 694,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mechanism.n_steps": {
            "name": "n_steps",
            "location": 698,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mechanism.time_limit": {
            "name": "time_limit",
            "location": 702,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mechanism.running": {
            "name": "running",
            "location": 706,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mechanism.dynamic_entry": {
            "name": "dynamic_entry",
            "location": 710,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mechanism.max_n_agents": {
            "name": "max_n_agents",
            "location": 714,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mechanism.state4history": {
            "name": "state4history",
            "location": 718,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mechanism._add_to_history": {
            "name": "_add_to_history",
            "location": 722,
            "return": [],
            "arguments": {
                "self": [],
                "state4history": []
            }
        },
        "Mechanism.on_mechanism_error": {
            "name": "on_mechanism_error",
            "location": 732,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mechanism.on_negotiation_end": {
            "name": "on_negotiation_end",
            "location": 744,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mechanism.on_negotiation_start": {
            "name": "on_negotiation_start",
            "location": 766,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mechanism.round": {
            "name": "round",
            "location": 771,
            "return": [
                "MechanismRoundResult"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mechanism.step": {
            "name": "step",
            "location": 782,
            "return": [
                "MechanismState"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mechanism.__next__": {
            "name": "__next__",
            "location": 955,
            "return": [
                "MechanismState"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mechanism.abort": {
            "name": "abort",
            "location": 962,
            "return": [
                "MechanismState"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mechanism.runall": {
            "name": "runall",
            "location": 993,
            "return": [
                "list[(MechanismState | None)]"
            ],
            "arguments": {
                "cls": [],
                "mechanisms": [
                    "list[Mechanism]"
                ],
                "keep_order": [],
                "method": []
            }
        },
        "Mechanism.stepall": {
            "name": "stepall",
            "location": 1039,
            "return": [
                "list[MechanismState]"
            ],
            "arguments": {
                "cls": [],
                "mechanisms": [
                    "list[Mechanism]"
                ],
                "keep_order": []
            }
        },
        "Mechanism.run": {
            "name": "run",
            "location": 1069,
            "return": [
                "MechanismState"
            ],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "Mechanism.history": {
            "name": "history",
            "location": 1087,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mechanism.stats": {
            "name": "stats",
            "location": 1091,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mechanism.current_step": {
            "name": "current_step",
            "location": 1095,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mechanism._get_preferencess": {
            "name": "_get_preferencess",
            "location": 1098,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mechanism.pareto_frontier": {
            "name": "pareto_frontier",
            "location": 1104,
            "return": [
                "tuple[(list[tuple[float]], list[Outcome])]"
            ],
            "arguments": {
                "self": [],
                "max_cardinality": [],
                "sort_by_welfare": []
            }
        },
        "Mechanism.nash_point": {
            "name": "nash_point",
            "location": 1123,
            "return": [
                "tuple[(tuple[float], Outcome)]"
            ],
            "arguments": {
                "self": [],
                "max_cardinality": [],
                "frontier": [
                    "(list[tuple[float]] | None)"
                ]
            }
        },
        "Mechanism.plot": {
            "name": "plot",
            "location": 1135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mechanism._get_ami": {
            "name": "_get_ami",
            "location": 1138,
            "return": [
                "NegotiatorMechanismInterface"
            ],
            "arguments": {
                "self": [],
                "negotiator": [
                    "Negotiator"
                ]
            }
        },
        "Mechanism.__iter__": {
            "name": "__iter__",
            "location": 1142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mechanism.__str__": {
            "name": "__str__",
            "location": 1145,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/mt.py": {
        "VetoMTMechanism.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VetoMTMechanism.next_outcome": {
            "name": "next_outcome",
            "location": 79,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "outcome": [
                    "(Outcome | None)"
                ]
            }
        },
        "VetoMTMechanism.round": {
            "name": "round",
            "location": 91,
            "return": [
                "MechanismRoundResult"
            ],
            "arguments": {
                "self": []
            }
        },
        "VetoMTMechanism.on_negotiation_end": {
            "name": "on_negotiation_end",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/protocols.py": {
        "XmlSerializable.from_xml_str": {
            "name": "from_xml_str",
            "location": 15,
            "return": [
                "X@@XmlSerializable@@"
            ],
            "arguments": {
                "cls": [
                    "type[X]"
                ],
                "xml_str": [
                    "str"
                ]
            }
        },
        "XmlSerializable.to_xml_str": {
            "name": "to_xml_str",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "XmlSerializable.from_genius": {
            "name": "from_genius",
            "location": 32,
            "return": [
                "X@@XmlSerializable@@"
            ],
            "arguments": {
                "cls": [
                    "type[X]"
                ],
                "file_name": [
                    "PathLike"
                ]
            }
        },
        "XmlSerializable.to_genius": {
            "name": "to_genius",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "PathLike"
                ]
            }
        },
        "DictSerializable.to_dict": {
            "name": "to_dict",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictSerializable.from_dict": {
            "name": "from_dict",
            "location": 73,
            "return": [
                "D@@DictSerializable@@"
            ],
            "arguments": {
                "cls": [
                    "type[D]"
                ],
                "v": [
                    "dict[(str, Any)]"
                ]
            }
        }
    },
    "negmas-master/negmas/serialization.py": {
        "serialize": {
            "name": "serialize",
            "location": 45,
            "return": [],
            "arguments": {
                "value": [],
                "deep": [],
                "add_type_field": [],
                "keep_private": [],
                "ignore_methods": [],
                "ignore_lambda": [],
                "shorten_type_field": [],
                "objmem": []
            }
        },
        "to_flat_dict": {
            "name": "to_flat_dict",
            "location": 238,
            "return": [
                "dict[(str, Any)]"
            ],
            "arguments": {
                "value": [],
                "deep": [],
                "add_type_field": [],
                "shorten_type_field": []
            }
        },
        "deserialize": {
            "name": "deserialize",
            "location": 271,
            "return": [],
            "arguments": {
                "d": [
                    "Any"
                ],
                "deep": [],
                "remove_type_field": [],
                "keep_private": [],
                "fallback_class_name": [
                    "(str | None)"
                ]
            }
        },
        "serialize.add_to_mem": {
            "name": "add_to_mem",
            "location": 81,
            "return": [],
            "arguments": {
                "x": [],
                "objmem": []
            }
        },
        "serialize.good_field": {
            "name": "good_field",
            "location": 88,
            "return": [],
            "arguments": {
                "k": [
                    "str"
                ],
                "v": [],
                "objmem": []
            }
        },
        "serialize.adjust_dict": {
            "name": "adjust_dict",
            "location": 101,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "serialize.get_type_field": {
            "name": "get_type_field",
            "location": 118,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "deserialize.good_field": {
            "name": "good_field",
            "location": 300,
            "return": [],
            "arguments": {
                "k": [
                    "str"
                ]
            }
        }
    },
    "negmas-master/negmas/st.py": {
        "VetoSTMechanism.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VetoSTMechanism.next_outcome": {
            "name": "next_outcome",
            "location": 72,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "outcome": [
                    "(Outcome | None)"
                ]
            }
        },
        "VetoSTMechanism.round": {
            "name": "round",
            "location": 84,
            "return": [
                "MechanismRoundResult"
            ],
            "arguments": {
                "self": []
            }
        },
        "VetoSTMechanism.on_negotiation_end": {
            "name": "on_negotiation_end",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VetoSTMechanism.plot": {
            "name": "plot",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "visible_negotiators": [
                    "(tuple[(int, int)] | tuple[(str, str)])"
                ],
                "show_all_offers": []
            }
        },
        "VetoSTMechanism.current_offer": {
            "name": "current_offer",
            "location": 260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HillClimbingSTMechanism.neighbors": {
            "name": "neighbors",
            "location": 272,
            "return": [
                "list[Outcome]"
            ],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ]
            }
        },
        "HillClimbingSTMechanism.__init__": {
            "name": "__init__",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HillClimbingSTMechanism.next_outcome": {
            "name": "next_outcome",
            "location": 315,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ]
            }
        },
        "HillClimbingSTMechanism.round": {
            "name": "round",
            "location": 332,
            "return": [
                "MechanismRoundResult"
            ],
            "arguments": {
                "self": []
            }
        },
        "HillClimbingSTMechanism.current_offer": {
            "name": "current_offer",
            "location": 361,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/utilities.py": {},
    "negmas-master/negmas/warnings.py": {
        "warn": {
            "name": "warn",
            "location": 35,
            "return": [],
            "arguments": {
                "message": [],
                "category": [],
                "stacklevel": [],
                "source": []
            }
        },
        "deprecated": {
            "name": "deprecated",
            "location": 40,
            "return": [],
            "arguments": {
                "message": []
            }
        }
    },
    "negmas-master/negmas/__init__.py": {},
    "negmas-master/negmas/concurrent/chain.py": {
        "ChainAMI.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChainAMI.confirm": {
            "name": "confirm",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "bool"
                ]
            }
        },
        "ChainNegotiator.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChainNegotiator.join": {
            "name": "join",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "nmi": [
                    "NegotiatorMechanismInterface"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "ChainNegotiator.confirm": {
            "name": "confirm",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "left": [
                    "bool"
                ]
            }
        },
        "ChainNegotiator.on_acceptance": {
            "name": "on_acceptance",
            "location": 89,
            "return": [
                "Offer"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ],
                "offer": [
                    "Offer"
                ]
            }
        },
        "ChainNegotiator.propose": {
            "name": "propose",
            "location": 102,
            "return": [
                "Offer"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "ChainNegotiator.respond": {
            "name": "respond",
            "location": 114,
            "return": [
                "ResponseType"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ],
                "outcome": [
                    "Outcome"
                ],
                "from_left": [
                    "bool"
                ],
                "temp": [
                    "bool"
                ]
            }
        },
        "MultiChainNegotiator.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiChainNegotiator.join": {
            "name": "join",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "nmi": [
                    "NegotiatorMechanismInterface"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "MultiChainNegotiator.confirm": {
            "name": "confirm",
            "location": 151,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "left": [
                    "bool"
                ]
            }
        },
        "MultiChainNegotiator.on_acceptance": {
            "name": "on_acceptance",
            "location": 164,
            "return": [
                "Offer"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ],
                "offer": [
                    "Offer"
                ]
            }
        },
        "MultiChainNegotiator.propose": {
            "name": "propose",
            "location": 177,
            "return": [
                "Offer"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "MultiChainNegotiator.respond": {
            "name": "respond",
            "location": 189,
            "return": [
                "ResponseType"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ],
                "outcome": [
                    "Outcome"
                ],
                "from_left": [
                    "bool"
                ],
                "temp": [
                    "bool"
                ],
                "source": [
                    "str"
                ]
            }
        },
        "ChainNegotiationsMechanism.__init__": {
            "name": "__init__",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChainNegotiationsMechanism._get_ami": {
            "name": "_get_ami",
            "location": 222,
            "return": [
                "NegotiatorMechanismInterface"
            ],
            "arguments": {
                "self": [],
                "negotiator": [
                    "Negotiator"
                ],
                "role": [
                    "str"
                ]
            }
        },
        "ChainNegotiationsMechanism.add": {
            "name": "add",
            "location": 251,
            "return": [
                "(bool | None)"
            ],
            "arguments": {
                "self": [],
                "negotiator": [
                    "Negotiator"
                ]
            }
        },
        "ChainNegotiationsMechanism._update_next": {
            "name": "_update_next",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChainNegotiationsMechanism.round": {
            "name": "round",
            "location": 282,
            "return": [
                "MechanismRoundResult"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChainNegotiationsMechanism.on_confirm": {
            "name": "on_confirm",
            "location": 367,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int"
                ],
                "left": [
                    "bool"
                ]
            }
        },
        "MultiChainNegotiationsMechanism.__init__": {
            "name": "__init__",
            "location": 388,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiChainNegotiationsMechanism._get_ami": {
            "name": "_get_ami",
            "location": 401,
            "return": [
                "NegotiatorMechanismInterface"
            ],
            "arguments": {
                "self": [],
                "negotiator": [
                    "Negotiator"
                ],
                "role": [
                    "str"
                ]
            }
        },
        "MultiChainNegotiationsMechanism.add": {
            "name": "add",
            "location": 430,
            "return": [
                "(bool | None)"
            ],
            "arguments": {
                "self": [],
                "negotiator": [
                    "Negotiator"
                ]
            }
        },
        "MultiChainNegotiationsMechanism._update_next": {
            "name": "_update_next",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiChainNegotiationsMechanism.round": {
            "name": "round",
            "location": 468,
            "return": [
                "MechanismRoundResult"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiChainNegotiationsMechanism.on_confirm": {
            "name": "on_confirm",
            "location": 558,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int"
                ],
                "left": [
                    "bool"
                ]
            }
        }
    },
    "negmas-master/negmas/concurrent/__init__.py": {},
    "negmas-master/negmas/elicitation/base.py": {
        "BaseElicitor.accuracy_limit": {
            "name": "accuracy_limit",
            "location": 25,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "cost": [
                    "float"
                ]
            }
        },
        "BaseElicitor.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "User"
                ]
            }
        },
        "BaseElicitor.init_elicitation": {
            "name": "init_elicitation",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "preferences": [
                    "(None | ((IPUtilityFunction | ScipyDistribution) | list[ScipyDistribution]))"
                ]
            }
        },
        "BaseElicitor.join": {
            "name": "join",
            "location": 165,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "nmi": [
                    "NegotiatorMechanismInterface"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "BaseElicitor.on_negotiation_start": {
            "name": "on_negotiation_start",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "BaseElicitor.utility_distributions": {
            "name": "utility_distributions",
            "location": 204,
            "return": [
                "list[ScipyDistribution]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseElicitor.user_preferences": {
            "name": "user_preferences",
            "location": 215,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "outcome": [
                    "(Outcome | None)"
                ]
            }
        },
        "BaseElicitor.elicitation_cost": {
            "name": "elicitation_cost",
            "location": 235,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseElicitor.elicitation_time": {
            "name": "elicitation_time",
            "location": 242,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseElicitor.maximum_attainable_utility": {
            "name": "maximum_attainable_utility",
            "location": 246,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseElicitor.minimum_guaranteed_utility": {
            "name": "minimum_guaranteed_utility",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseElicitor.on_opponent_model_updated": {
            "name": "on_opponent_model_updated",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "outcomes": [
                    "list[Outcome]"
                ],
                "old": [
                    "list[float]"
                ],
                "new": [
                    "list[float]"
                ]
            }
        },
        "BaseElicitor.on_partner_proposal": {
            "name": "on_partner_proposal",
            "location": 272,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ],
                "partner_id": [
                    "str"
                ],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "BaseElicitor.on_partner_response": {
            "name": "on_partner_response",
            "location": 296,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ],
                "partner_id": [
                    "str"
                ],
                "outcome": [
                    "Outcome"
                ],
                "response": [
                    "ResponseType"
                ]
            }
        },
        "BaseElicitor.before_eliciting": {
            "name": "before_eliciting",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseElicitor.elicit_single": {
            "name": "elicit_single",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "BaseElicitor.elicit": {
            "name": "elicit",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "BaseElicitor.utility_on_rejection": {
            "name": "utility_on_rejection",
            "location": 386,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "BaseElicitor.offering_utility": {
            "name": "offering_utility",
            "location": 400,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": [],
                "outcome": [],
                "state": []
            }
        },
        "BaseElicitor.best_offer": {
            "name": "best_offer",
            "location": 424,
            "return": [
                "tuple[((Outcome | None), float)]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "BaseElicitor.respond_": {
            "name": "respond_",
            "location": 455,
            "return": [
                "ResponseType"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "BaseElicitor.can_elicit": {
            "name": "can_elicit",
            "location": 508,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseElicitor.propose": {
            "name": "propose",
            "location": 512,
            "return": [
                "Outcome"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "BaseElicitor.offering_utilities": {
            "name": "offering_utilities",
            "location": 528,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "BaseElicitor.utility_on_acceptance": {
            "name": "utility_on_acceptance",
            "location": 546,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ]
            }
        },
        "BaseElicitor.utilities_on_rejection": {
            "name": "utilities_on_rejection",
            "location": 552,
            "return": [
                "list[Value]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "BaseElicitor.__getattr__": {
            "name": "__getattr__",
            "location": 564,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "BaseElicitor.__str__": {
            "name": "__str__",
            "location": 568,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/elicitation/baseline.py": {
        "DummyElicitor.utility_on_rejection": {
            "name": "utility_on_rejection",
            "location": 17,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "DummyElicitor.can_elicit": {
            "name": "can_elicit",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyElicitor.elicit_single": {
            "name": "elicit_single",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "DummyElicitor.init_elicitation": {
            "name": "init_elicitation",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "preferences": [
                    "((IPUtilityFunction | Distribution) | None)"
                ]
            }
        },
        "FullKnowledgeElicitor.utility_on_rejection": {
            "name": "utility_on_rejection",
            "location": 43,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "FullKnowledgeElicitor.can_elicit": {
            "name": "can_elicit",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FullKnowledgeElicitor.elicit_single": {
            "name": "elicit_single",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "FullKnowledgeElicitor.init_elicitation": {
            "name": "init_elicitation",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "preferences": [
                    "((IPUtilityFunction | Distribution) | None)"
                ]
            }
        }
    },
    "negmas-master/negmas/elicitation/common.py": {
        "_loc": {
            "name": "_loc",
            "location": 15,
            "return": [],
            "arguments": {
                "u": [
                    "Value"
                ]
            }
        },
        "_locs": {
            "name": "_locs",
            "location": 20,
            "return": [],
            "arguments": {
                "us": [
                    "Iterable[Value]"
                ]
            }
        },
        "_scale": {
            "name": "_scale",
            "location": 25,
            "return": [],
            "arguments": {
                "u": [
                    "Value"
                ]
            }
        },
        "_upper": {
            "name": "_upper",
            "location": 30,
            "return": [],
            "arguments": {
                "u": [
                    "Value"
                ]
            }
        },
        "_uppers": {
            "name": "_uppers",
            "location": 35,
            "return": [],
            "arguments": {
                "us": [
                    "Iterable[Value]"
                ]
            }
        },
        "argmax": {
            "name": "argmax",
            "location": 40,
            "return": [],
            "arguments": {
                "iterable": [
                    "Iterable[Any]"
                ]
            }
        },
        "argsort": {
            "name": "argsort",
            "location": 45,
            "return": [],
            "arguments": {
                "iterable": [
                    "Iterable[Any]"
                ]
            }
        },
        "argmin": {
            "name": "argmin",
            "location": 50,
            "return": [],
            "arguments": {
                "iterable": []
            }
        }
    },
    "negmas-master/negmas/elicitation/expectors.py": {
        "Expector.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "nmi": [
                    "(NegotiatorMechanismInterface | None)"
                ]
            }
        },
        "Expector.is_dependent_on_negotiation_info": {
            "name": "is_dependent_on_negotiation_info",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expector.__call__": {
            "name": "__call__",
            "location": 27,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "u": [
                    "Value"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "StaticExpector.is_dependent_on_negotiation_info": {
            "name": "is_dependent_on_negotiation_info",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StaticExpector.__call__": {
            "name": "__call__",
            "location": 36,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "u": [
                    "Value"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "MeanExpector.__call__": {
            "name": "__call__",
            "location": 41,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "u": [
                    "Value"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "MaxExpector.__call__": {
            "name": "__call__",
            "location": 46,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "u": [
                    "Value"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "MinExpector.__call__": {
            "name": "__call__",
            "location": 51,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "u": [
                    "Value"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "BalancedExpector.is_dependent_on_negotiation_info": {
            "name": "is_dependent_on_negotiation_info",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BalancedExpector.__call__": {
            "name": "__call__",
            "location": 59,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "u": [
                    "Value"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "AspiringExpector.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "nmi": [
                    "(NegotiatorMechanismInterface | None)"
                ],
                "max_aspiration": [],
                "aspiration_type": [
                    "(((Literal['linear'] | Literal['conceder']) | Literal['boulware']) | float)"
                ]
            }
        },
        "AspiringExpector.utility_at": {
            "name": "utility_at",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "AspiringExpector.is_dependent_on_negotiation_info": {
            "name": "is_dependent_on_negotiation_info",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AspiringExpector.__call__": {
            "name": "__call__",
            "location": 88,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "u": [
                    "Value"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        }
    },
    "negmas-master/negmas/elicitation/mechanism.py": {
        "uniform": {
            "name": "uniform",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "current_aspiration": {
            "name": "current_aspiration",
            "location": 58,
            "return": [
                "float"
            ],
            "arguments": {
                "elicitor": [],
                "outcome": [
                    "Outcome"
                ],
                "negotiation": [
                    "Mechanism"
                ]
            }
        },
        "create_negotiator": {
            "name": "create_negotiator",
            "location": 62,
            "return": [],
            "arguments": {
                "negotiator_type": [],
                "preferences": [],
                "can_propose": [],
                "outcomes": [],
                "toughness": []
            }
        },
        "_beg": {
            "name": "_beg",
            "location": 131,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "_scale": {
            "name": "_scale",
            "location": 138,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "_end": {
            "name": "_end",
            "location": 145,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "SAOElicitingMechanism.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "priors": [],
                "true_utilities": [],
                "elicitor_reserved_value": [],
                "cost": [],
                "opp_utility": [],
                "opponent": [],
                "n_steps": [],
                "time_limit": [],
                "base_agent": [],
                "opponent_model": [],
                "elicitation_strategy": [],
                "toughness": [],
                "elicitor_type": [],
                "history_file_name": [
                    "str"
                ],
                "screen_log": [
                    "bool"
                ],
                "dynamic_queries": [],
                "each_outcome_once": [],
                "rational_answer_probs": [],
                "update_related_queries": [],
                "resolution": [],
                "cost_assuming_titration": [],
                "name": [
                    "(str | None)"
                ]
            }
        },
        "SAOElicitingMechanism.generate_config": {
            "name": "generate_config",
            "location": 375,
            "return": [
                "dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "cost": [],
                "n_outcomes": [
                    "int"
                ],
                "rand_preferencess": [],
                "conflict": [
                    "float"
                ],
                "conflict_delta": [
                    "float"
                ],
                "winwin": [],
                "genius_folder": [
                    "str"
                ],
                "n_steps": [],
                "time_limit": [],
                "own_utility_uncertainty": [],
                "own_uncertainty_variablility": [],
                "own_reserved_value": [],
                "own_base_agent": [],
                "opponent_model_uncertainty": [],
                "opponent_model_adaptive": [],
                "opponent_proposes": [],
                "opponent_type": [],
                "opponent_toughness": [],
                "opponent_reserved_value": []
            }
        },
        "SAOElicitingMechanism.loginfo": {
            "name": "loginfo",
            "location": 478,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        },
        "SAOElicitingMechanism.logdebug": {
            "name": "logdebug",
            "location": 487,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "SAOElicitingMechanism.logwarning": {
            "name": "logwarning",
            "location": 496,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "SAOElicitingMechanism.logerror": {
            "name": "logerror",
            "location": 505,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "SAOElicitingMechanism.step": {
            "name": "step",
            "location": 514,
            "return": [
                "SAOState"
            ],
            "arguments": {
                "self": []
            }
        },
        "SAOElicitingMechanism.on_negotiation_start": {
            "name": "on_negotiation_start",
            "location": 523,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SAOElicitingMechanism.plot": {
            "name": "plot",
            "location": 556,
            "return": [],
            "arguments": {
                "self": [],
                "visible_negotiators": [],
                "consider_costs": []
            }
        },
        "SAOElicitingMechanism.on_negotiation_end": {
            "name": "on_negotiation_end",
            "location": 750,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SAOElicitingMechanism.__init__.create_elicitor": {
            "name": "create_elicitor",
            "location": 217,
            "return": [],
            "arguments": {
                "type_": [],
                "strategy": [],
                "opponent_model": []
            }
        }
    },
    "negmas-master/negmas/elicitation/pandora.py": {
        "weitzman_index_uniform": {
            "name": "weitzman_index_uniform",
            "location": 44,
            "return": [
                "float"
            ],
            "arguments": {
                "loc": [
                    "float"
                ],
                "scale": [
                    "float"
                ],
                "cost": [
                    "float"
                ],
                "time_discount": [
                    "float"
                ]
            }
        },
        "BasePandoraElicitor.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "User"
                ],
                "strategy": [
                    "EStrategy"
                ]
            }
        },
        "BasePandoraElicitor.utility_at": {
            "name": "utility_at",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "BasePandoraElicitor.utility_on_rejection": {
            "name": "utility_on_rejection",
            "location": 202,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "BasePandoraElicitor.update_cutoff_utility": {
            "name": "update_cutoff_utility",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePandoraElicitor.do_elicit": {
            "name": "do_elicit",
            "location": 227,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "BasePandoraElicitor.z_index": {
            "name": "z_index",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "updated_outcomes": [
                    "(list[Outcome] | None)"
                ]
            }
        },
        "BasePandoraElicitor.init_unknowns": {
            "name": "init_unknowns",
            "location": 326,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BasePandoraElicitor.offer_to_elicit": {
            "name": "offer_to_elicit",
            "location": 332,
            "return": [
                "tuple[(float, (int | None))]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePandoraElicitor.update_best_offer_utility": {
            "name": "update_best_offer_utility",
            "location": 351,
            "return": [],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ],
                "u": [
                    "Value"
                ]
            }
        },
        "BasePandoraElicitor.remove_best_offer_from_unknown_list": {
            "name": "remove_best_offer_from_unknown_list",
            "location": 364,
            "return": [
                "tuple[(float, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePandoraElicitor.elicit_single": {
            "name": "elicit_single",
            "location": 372,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "BasePandoraElicitor.init_elicitation": {
            "name": "init_elicitation",
            "location": 414,
            "return": [],
            "arguments": {
                "self": [],
                "preferences": [
                    "((IPUtilityFunction | Distribution) | None)"
                ]
            }
        },
        "BasePandoraElicitor.before_eliciting": {
            "name": "before_eliciting",
            "location": 434,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BasePandoraElicitor.can_elicit": {
            "name": "can_elicit",
            "location": 442,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePandoraElicitor.on_opponent_model_updated": {
            "name": "on_opponent_model_updated",
            "location": 450,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "outcomes": [
                    "list[Outcome]"
                ],
                "old": [
                    "list[float]"
                ],
                "new": [
                    "list[float]"
                ]
            }
        },
        "FullElicitor.__init__": {
            "name": "__init__",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strategy": [
                    "EStrategy"
                ],
                "user": [
                    "User"
                ],
                "epsilon": [],
                "true_utility_on_zero_cost": [],
                "base_negotiator": [
                    "SAONegotiator"
                ]
            }
        },
        "FullElicitor.update_best_offer_utility": {
            "name": "update_best_offer_utility",
            "location": 495,
            "return": [],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ],
                "u": [
                    "Value"
                ]
            }
        },
        "FullElicitor.init_elicitation": {
            "name": "init_elicitation",
            "location": 498,
            "return": [],
            "arguments": {
                "self": [],
                "preferences": [
                    "((IPUtilityFunction | Distribution) | None)"
                ]
            }
        },
        "FullElicitor.elicit": {
            "name": "elicit",
            "location": 508,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "FullElicitor.init_unknowns": {
            "name": "init_unknowns",
            "location": 519,
            "return": [
                "list[tuple[(float, int)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomElicitor.__init__": {
            "name": "__init__",
            "location": 529,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strategy": [
                    "EStrategy"
                ],
                "user": [
                    "User"
                ],
                "deep_elicitation": [],
                "true_utility_on_zero_cost": [],
                "base_negotiator": [
                    "SAONegotiator"
                ],
                "opponent_model_factory": [
                    "(None | Callable[([NegotiatorMechanismInterface], DiscreteAcceptanceModel)])"
                ],
                "single_elicitation_per_round": []
            }
        },
        "RandomElicitor.init_unknowns": {
            "name": "init_unknowns",
            "location": 555,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomElicitor.update_best_offer_utility": {
            "name": "update_best_offer_utility",
            "location": 564,
            "return": [],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ],
                "u": [
                    "Value"
                ]
            }
        },
        "PandoraElicitor.__init__": {
            "name": "__init__",
            "location": 586,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strategy": [
                    "EStrategy"
                ],
                "user": [
                    "User"
                ]
            }
        },
        "FastElicitor.__init__": {
            "name": "__init__",
            "location": 622,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FastElicitor.update_best_offer_utility": {
            "name": "update_best_offer_utility",
            "location": 626,
            "return": [],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ],
                "u": [
                    "Value"
                ]
            }
        },
        "FastElicitor.do_elicit": {
            "name": "do_elicit",
            "location": 629,
            "return": [],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "OptimalIncrementalElicitor.__init__": {
            "name": "__init__",
            "location": 640,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strategy": [
                    "EStrategy"
                ],
                "user": [
                    "User"
                ]
            }
        },
        "MeanElicitor.__init__": {
            "name": "__init__",
            "location": 658,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strategy": [
                    "EStrategy"
                ],
                "user": [
                    "User"
                ]
            }
        },
        "BalancedElicitor.__init__": {
            "name": "__init__",
            "location": 676,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strategy": [
                    "EStrategy"
                ],
                "user": [
                    "User"
                ]
            }
        },
        "AspiringElicitor.__init__": {
            "name": "__init__",
            "location": 696,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strategy": [
                    "EStrategy"
                ],
                "user": [
                    "User"
                ]
            }
        },
        "PessimisticElicitor.__init__": {
            "name": "__init__",
            "location": 727,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strategy": [
                    "EStrategy"
                ],
                "user": [
                    "User"
                ]
            }
        },
        "OptimisticElicitor.__init__": {
            "name": "__init__",
            "location": 745,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strategy": [
                    "EStrategy"
                ],
                "user": [
                    "User"
                ]
            }
        },
        "BasePandoraElicitor.z_index.qualityfun": {
            "name": "qualityfun",
            "location": 304,
            "return": [],
            "arguments": {
                "z": [],
                "distribution": [],
                "cost": []
            }
        }
    },
    "negmas-master/negmas/elicitation/queries.py": {
        "possible_queries": {
            "name": "possible_queries",
            "location": 327,
            "return": [
                "list[tuple[(Outcome, list[ScipyDistribution], float)]]"
            ],
            "arguments": {
                "nmi": [
                    "NegotiatorMechanismInterface"
                ],
                "strategy": [
                    "EStrategy"
                ],
                "user": [
                    "User"
                ],
                "outcome": [
                    "Outcome"
                ]
            }
        },
        "next_query": {
            "name": "next_query",
            "location": 384,
            "return": [
                "list[tuple[(Outcome, Query, float)]]"
            ],
            "arguments": {
                "strategy": [
                    "EStrategy"
                ],
                "user": [
                    "User"
                ],
                "outcome": [
                    "Outcome"
                ]
            }
        },
        "Constraint.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "full_range": [
                    "(Sequence[tuple[(float, float)]] | tuple[(float, float)])"
                ],
                "outcomes": [
                    "list[Outcome]"
                ]
            }
        },
        "Constraint.is_satisfied": {
            "name": "is_satisfied",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "preferences": [
                    "Preferences"
                ],
                "outcomes": [
                    "(Iterable[Outcome] | None)"
                ]
            }
        },
        "Constraint.marginals": {
            "name": "marginals",
            "location": 62,
            "return": [
                "list[ScipyDistribution]"
            ],
            "arguments": {
                "self": [],
                "outcomes": [
                    "Iterable[Outcome]"
                ]
            }
        },
        "Constraint.marginal": {
            "name": "marginal",
            "location": 66,
            "return": [
                "ScipyDistribution"
            ],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ]
            }
        },
        "Constraint.__repr__": {
            "name": "__repr__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Constraint.__str__": {
            "name": "__str__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MarginalNeutralConstraint.marginals": {
            "name": "marginals",
            "location": 80,
            "return": [
                "list[ScipyDistribution]"
            ],
            "arguments": {
                "self": [],
                "outcomes": [
                    "Iterable[Outcome]"
                ]
            }
        },
        "MarginalNeutralConstraint.marginal": {
            "name": "marginal",
            "location": 93,
            "return": [
                "ScipyDistribution"
            ],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ]
            }
        },
        "RankConstraint.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "rankings": [
                    "list[int]"
                ],
                "full_range": [
                    "(Sequence[tuple[(float, float)]] | tuple[(float, float)])"
                ],
                "outcomes": [
                    "list[Outcome]"
                ]
            }
        },
        "RankConstraint.is_satisfied": {
            "name": "is_satisfied",
            "location": 125,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "preferences": [
                    "Preferences"
                ],
                "outcomes": [
                    "(Iterable[Outcome] | None)"
                ]
            }
        },
        "ComparisonConstraint.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "op": [
                    "(str | Callable[([Value, Value], bool)])"
                ],
                "full_range": [
                    "(Sequence[tuple[(float, float)]] | tuple[(float, float)])"
                ],
                "outcomes": [
                    "list[Outcome]"
                ]
            }
        },
        "ComparisonConstraint.is_satisfied": {
            "name": "is_satisfied",
            "location": 171,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "preferences": [
                    "Preferences"
                ],
                "outcomes": [
                    "(Iterable[Outcome] | None)"
                ]
            }
        },
        "ComparisonConstraint.__str__": {
            "name": "__str__",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RangeConstraint.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "rng": [
                    "tuple"
                ],
                "full_range": [
                    "(Sequence[tuple[(float, float)]] | tuple[(float, float)])"
                ],
                "outcomes": [
                    "list[Outcome]"
                ],
                "eps": []
            }
        },
        "RangeConstraint.is_satisfied": {
            "name": "is_satisfied",
            "location": 224,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "preferences": [
                    "Preferences"
                ],
                "outcomes": [
                    "(Iterable[Outcome] | None)"
                ]
            }
        },
        "RangeConstraint.marginals": {
            "name": "marginals",
            "location": 243,
            "return": [
                "list[ScipyDistribution]"
            ],
            "arguments": {
                "self": [],
                "outcomes": [
                    "Iterable[Outcome]"
                ]
            }
        },
        "RangeConstraint.marginal": {
            "name": "marginal",
            "location": 256,
            "return": [
                "ScipyDistribution"
            ],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ]
            }
        },
        "RangeConstraint.__str__": {
            "name": "__str__",
            "location": 271,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Answer.__str__": {
            "name": "__str__",
            "location": 287,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.__str__": {
            "name": "__str__",
            "location": 308,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "possible_queries._possible_queries": {
            "name": "_possible_queries",
            "location": 342,
            "return": [],
            "arguments": {
                "outcome": [],
                "strategy": [],
                "nmi": []
            }
        },
        "next_query._next_query": {
            "name": "_next_query",
            "location": 394,
            "return": [],
            "arguments": {
                "outcome": [],
                "strategy": []
            }
        },
        "CostEvaluator.__init__": {
            "name": "__init__",
            "location": 407,
            "return": [],
            "arguments": {
                "self": [],
                "cost": [
                    "float"
                ]
            }
        },
        "CostEvaluator.__call__": {
            "name": "__call__",
            "location": 410,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "Query"
                ],
                "answer": [
                    "Answer"
                ]
            }
        }
    },
    "negmas-master/negmas/elicitation/strategy.py": {
        "EStrategy.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strategy": [
                    "str"
                ],
                "resolution": [],
                "stop_at_cost": [
                    "bool"
                ]
            }
        },
        "EStrategy.supported_strategies": {
            "name": "supported_strategies",
            "location": 43,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "EStrategy.next_query": {
            "name": "next_query",
            "location": 57,
            "return": [
                "(Query | None)"
            ],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ]
            }
        },
        "EStrategy.apply": {
            "name": "apply",
            "location": 208,
            "return": [
                "tuple[((Value | None), (QResponse | None))]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "User"
                ],
                "outcome": [
                    "Outcome"
                ]
            }
        },
        "EStrategy.utility_estimate": {
            "name": "utility_estimate",
            "location": 257,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ]
            }
        },
        "EStrategy.until": {
            "name": "until",
            "location": 265,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ],
                "user": [
                    "User"
                ],
                "dist": [
                    "(list[Value] | Value)"
                ]
            }
        },
        "EStrategy.on_enter": {
            "name": "on_enter",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nmi": [
                    "NegotiatorMechanismInterface"
                ],
                "preferences": [
                    "IPUtilityFunction"
                ]
            }
        },
        "EStrategy.until.within_a_target": {
            "name": "within_a_target",
            "location": 287,
            "return": [],
            "arguments": {
                "u": [],
                "targets": []
            }
        }
    },
    "negmas-master/negmas/elicitation/user.py": {
        "ElicitationRecord.__str__": {
            "name": "__str__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "cost": [
                    "float"
                ],
                "nmi": []
            }
        },
        "User.set": {
            "name": "set",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "preferences": [
                    "(Preferences | None)"
                ],
                "cost": [
                    "float"
                ]
            }
        },
        "User.ufun": {
            "name": "ufun",
            "location": 70,
            "return": [
                "UtilityFunction"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.ask": {
            "name": "ask",
            "location": 78,
            "return": [
                "QResponse"
            ],
            "arguments": {
                "self": [],
                "q": [
                    "(Query | None)"
                ]
            }
        },
        "User.cost_of_asking": {
            "name": "cost_of_asking",
            "location": 102,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "q": [
                    "(Query | None)"
                ],
                "answer_id": [
                    "int"
                ],
                "estimate_answer_cost": []
            }
        },
        "User.is_satisfied": {
            "name": "is_satisfied",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "constraint": [
                    "Constraint"
                ],
                "outcomes": []
            }
        },
        "User.elicited_queries": {
            "name": "elicited_queries",
            "location": 135,
            "return": [
                "list[ElicitationRecord]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/elicitation/voi.py": {
        "BaseVOIElicitor.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strategy": [
                    "EStrategy"
                ],
                "user": [
                    "User"
                ]
            }
        },
        "BaseVOIElicitor._query_eeu": {
            "name": "_query_eeu",
            "location": 122,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "query": [],
                "qindex": [],
                "outcome": [],
                "cost": [],
                "outcome_index": [],
                "eu_policy": [],
                "eeu": []
            }
        },
        "BaseVOIElicitor.init_query_eeus": {
            "name": "init_query_eeus",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseVOIElicitor.init_optimal_policy": {
            "name": "init_optimal_policy",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseVOIElicitor.init_elicitation": {
            "name": "init_elicitation",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "preferences": [
                    "((IPUtilityFunction | Distribution) | None)"
                ],
                "queries": [
                    "(list[Query] | None)"
                ]
            }
        },
        "BaseVOIElicitor.best_offer": {
            "name": "best_offer",
            "location": 223,
            "return": [
                "tuple[((Outcome | None), float)]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "BaseVOIElicitor.can_elicit": {
            "name": "can_elicit",
            "location": 254,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseVOIElicitor.best_offers": {
            "name": "best_offers",
            "location": 258,
            "return": [
                "list[tuple[((Outcome | None), float)]]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "BaseVOIElicitor.before_eliciting": {
            "name": "before_eliciting",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseVOIElicitor.on_opponent_model_updated": {
            "name": "on_opponent_model_updated",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "outcomes": [
                    "list[Outcome]"
                ],
                "old": [
                    "list[float]"
                ],
                "new": [
                    "list[float]"
                ]
            }
        },
        "BaseVOIElicitor.update_optimal_policy": {
            "name": "update_optimal_policy",
            "location": 284,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ],
                "outcome": [
                    "Outcome"
                ],
                "oldu": [
                    "float"
                ],
                "newu": [
                    "float"
                ]
            }
        },
        "BaseVOIElicitor.add_query": {
            "name": "add_query",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qeeu": [
                    "tuple[(float, int)]"
                ]
            }
        },
        "BaseVOIElicitor.elicit_single": {
            "name": "elicit_single",
            "location": 315,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "BaseVOIElicitor.utility_on_rejection": {
            "name": "utility_on_rejection",
            "location": 420,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "VOIElicitor.eeu": {
            "name": "eeu",
            "location": 438,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "policy": [
                    "np.ndarray"
                ],
                "eus": [
                    "np.ndarray"
                ]
            }
        },
        "VOIElicitor.init_optimal_policy": {
            "name": "init_optimal_policy",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VOIElicitor._query_eeu": {
            "name": "_query_eeu",
            "location": 498,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "query": [],
                "qindex": [],
                "outcome": [],
                "cost": [],
                "outcome_index": [],
                "eu_policy": [],
                "eeu": []
            }
        },
        "VOIFastElicitor.init_optimal_policy": {
            "name": "init_optimal_policy",
            "location": 533,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VOIFastElicitor._query_eeu": {
            "name": "_query_eeu",
            "location": 567,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "query": [],
                "qindex": [],
                "outcome": [],
                "cost": [],
                "outcome_index": [],
                "eu_policy": [],
                "eeu": []
            }
        },
        "VOINoUncertaintyElicitor.eeu": {
            "name": "eeu",
            "location": 636,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "policy": [
                    "np.ndarray"
                ],
                "eup": [
                    "np.ndarray"
                ]
            }
        },
        "VOINoUncertaintyElicitor.init_optimal_policy": {
            "name": "init_optimal_policy",
            "location": 656,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VOINoUncertaintyElicitor.init_query_eeus": {
            "name": "init_query_eeus",
            "location": 673,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VOINoUncertaintyElicitor.add_query": {
            "name": "add_query",
            "location": 676,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qeeu": [
                    "tuple[(float, int)]"
                ]
            }
        },
        "VOINoUncertaintyElicitor._query_eeu": {
            "name": "_query_eeu",
            "location": 679,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "query": [],
                "qindex": [],
                "outcome": [],
                "cost": [],
                "outcome_index": [],
                "eu_policy": [],
                "eeu": []
            }
        },
        "VOINoUncertaintyElicitor.elicit_single": {
            "name": "elicit_single",
            "location": 684,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "VOIOptimalElicitor.__init__": {
            "name": "__init__",
            "location": 706,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "User"
                ]
            }
        },
        "VOIOptimalElicitor._update_query_eeus": {
            "name": "_update_query_eeus",
            "location": 754,
            "return": [],
            "arguments": {
                "self": [],
                "k": [
                    "int"
                ],
                "outcome": [
                    "Outcome"
                ],
                "s": [],
                "p": [],
                "n": [],
                "eeu": [],
                "eus": []
            }
        },
        "VOIOptimalElicitor.init_query_eeus": {
            "name": "init_query_eeus",
            "location": 848,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VOIOptimalElicitor.init_optimal_policy": {
            "name": "init_optimal_policy",
            "location": 866,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VOIOptimalElicitor.init_elicitation": {
            "name": "init_elicitation",
            "location": 900,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "preferences": [
                    "((IPUtilityFunction | Distribution) | None)"
                ],
                "queries": [
                    "(list[Query] | None)"
                ]
            }
        },
        "VOIOptimalElicitor.best_offer": {
            "name": "best_offer",
            "location": 918,
            "return": [
                "tuple[((Outcome | None), float)]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "VOIOptimalElicitor.can_elicit": {
            "name": "can_elicit",
            "location": 940,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VOIOptimalElicitor.before_eliciting": {
            "name": "before_eliciting",
            "location": 943,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VOIOptimalElicitor.on_opponent_model_updated": {
            "name": "on_opponent_model_updated",
            "location": 946,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "outcomes": [
                    "list[Outcome]"
                ],
                "old": [
                    "list[float]"
                ],
                "new": [
                    "list[float]"
                ]
            }
        },
        "VOIOptimalElicitor.update_optimal_policy": {
            "name": "update_optimal_policy",
            "location": 953,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ],
                "outcome": [
                    "Outcome"
                ],
                "oldu": [
                    "float"
                ],
                "newu": [
                    "float"
                ]
            }
        },
        "VOIOptimalElicitor.elicit_single": {
            "name": "elicit_single",
            "location": 960,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "VOIOptimalElicitor.utility_on_rejection": {
            "name": "utility_on_rejection",
            "location": 1034,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "VOIOptimalElicitor.add_query": {
            "name": "add_query",
            "location": 1037,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qeeu": [
                    "tuple[(float, int)]"
                ]
            }
        }
    },
    "negmas-master/negmas/elicitation/__init__.py": {},
    "negmas-master/negmas/external/__init__.py": {},
    "negmas-master/negmas/genius/bridge.py": {
        "_kill_process": {
            "name": "_kill_process",
            "location": 74,
            "return": [],
            "arguments": {
                "proc_pid": []
            }
        },
        "genius_bridge_is_running": {
            "name": "genius_bridge_is_running",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "port": [
                    "int"
                ]
            }
        },
        "init_genius_bridge": {
            "name": "init_genius_bridge",
            "location": 131,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "((Path | str) | None)"
                ],
                "port": [
                    "int"
                ],
                "debug": [
                    "bool"
                ],
                "timeout": [
                    "float"
                ]
            }
        },
        "genius_bridge_is_installed": {
            "name": "genius_bridge_is_installed",
            "location": 202,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "GeniusBridge.__init__": {
            "name": "__init__",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeniusBridge.is_running": {
            "name": "is_running",
            "location": 224,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "port": [
                    "int"
                ]
            }
        },
        "GeniusBridge.is_installed": {
            "name": "is_installed",
            "location": 229,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": []
            }
        },
        "GeniusBridge.gateway": {
            "name": "gateway",
            "location": 234,
            "return": [],
            "arguments": {
                "cls": [],
                "port": [],
                "force": []
            }
        },
        "GeniusBridge.wait_until_listening": {
            "name": "wait_until_listening",
            "location": 275,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "port": [
                    "int"
                ],
                "timeout": [
                    "float"
                ]
            }
        },
        "GeniusBridge.start": {
            "name": "start",
            "location": 298,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [],
                "port": [
                    "int"
                ],
                "path": [
                    "(str | None)"
                ],
                "debug": [
                    "bool"
                ],
                "timeout": [
                    "float"
                ],
                "force_timeout": [
                    "bool"
                ],
                "save_logs": [
                    "bool"
                ],
                "log_path": [
                    "(os.PathLike | None)"
                ],
                "die_on_exit": [
                    "bool"
                ],
                "use_shell": [
                    "bool"
                ]
            }
        },
        "GeniusBridge._close_gateway": {
            "name": "_close_gateway",
            "location": 418,
            "return": [],
            "arguments": {
                "cls": [],
                "port": []
            }
        },
        "GeniusBridge.close_gateway": {
            "name": "close_gateway",
            "location": 434,
            "return": [],
            "arguments": {
                "cls": [],
                "port": []
            }
        },
        "GeniusBridge.close_gateways": {
            "name": "close_gateways",
            "location": 447,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "GeniusBridge.wait_until_not_listening": {
            "name": "wait_until_not_listening",
            "location": 456,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "port": [
                    "int"
                ],
                "timeout": [
                    "float"
                ]
            }
        },
        "GeniusBridge.shutdown": {
            "name": "shutdown",
            "location": 477,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "port": [
                    "int"
                ],
                "wait": [
                    "bool"
                ]
            }
        },
        "GeniusBridge.kill": {
            "name": "kill",
            "location": 510,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "port": [
                    "int"
                ],
                "wait": [
                    "bool"
                ]
            }
        },
        "GeniusBridge.kill_forced": {
            "name": "kill_forced",
            "location": 533,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "port": [
                    "int"
                ],
                "wait": [
                    "bool"
                ]
            }
        },
        "GeniusBridge.stop": {
            "name": "stop",
            "location": 559,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "port": [
                    "int"
                ]
            }
        },
        "GeniusBridge.restart": {
            "name": "restart",
            "location": 594,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "port": [
                    "int"
                ]
            }
        },
        "GeniusBridge.kill_threads": {
            "name": "kill_threads",
            "location": 614,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "port": [
                    "int"
                ],
                "wait_time": [
                    "float"
                ]
            }
        },
        "GeniusBridge.clean": {
            "name": "clean",
            "location": 639,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "port": []
            }
        },
        "GeniusBridge.clean_all": {
            "name": "clean_all",
            "location": 659,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": []
            }
        },
        "GeniusBridge.connect": {
            "name": "connect",
            "location": 669,
            "return": [
                "JavaObject"
            ],
            "arguments": {
                "cls": [],
                "port": [
                    "int"
                ]
            }
        }
    },
    "negmas-master/negmas/genius/common.py": {
        "get_free_tcp_port": {
            "name": "get_free_tcp_port",
            "location": 21,
            "return": [],
            "arguments": {}
        }
    },
    "negmas-master/negmas/genius/ginfo.py": {
        "get_name": {
            "name": "get_name",
            "location": 717,
            "return": [
                "str"
            ],
            "arguments": {
                "java_class": [
                    "str"
                ]
            }
        },
        "get_java_class": {
            "name": "get_java_class",
            "location": 722,
            "return": [
                "(str | None)"
            ],
            "arguments": {
                "name": []
            }
        },
        "get_anac_agents": {
            "name": "get_anac_agents",
            "location": 730,
            "return": [
                "list[tuple[(str, str)]]"
            ],
            "arguments": {}
        },
        "get_anac_agents.get_agents": {
            "name": "get_agents",
            "location": 758,
            "return": [
                "set[tuple[(str, str)]]"
            ],
            "arguments": {
                "year": [],
                "d": []
            }
        }
    },
    "negmas-master/negmas/genius/gnegotiators.py": {
        "Caduceus.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "YXAgent.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AgentX.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParsCat.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PonPokoAgent.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HardHeaded.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Gahboninho.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IAMhaggler2011.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BRAMAgent.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AgentK2.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TheNegotiator.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NiceTitForTat.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValueModelAgent.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CUHKAgent.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AgentLG.__init__": {
            "name": "__init__",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OMACagent.__init__": {
            "name": "__init__",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TheNegotiatorReloaded.__init__": {
            "name": "__init__",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MetaAgent.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TMFAgent.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AgentM.__init__": {
            "name": "__init__",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DoNA.__init__": {
            "name": "__init__",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WhaleAgent.__init__": {
            "name": "__init__",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Group2.__init__": {
            "name": "__init__",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "E2Agent.__init__": {
            "name": "__init__",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KGAgent.__init__": {
            "name": "__init__",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AgentYK.__init__": {
            "name": "__init__",
            "location": 232,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BraveCat.__init__": {
            "name": "__init__",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Atlas3.__init__": {
            "name": "__init__",
            "location": 244,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParsAgent.__init__": {
            "name": "__init__",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RandomDance.__init__": {
            "name": "__init__",
            "location": 256,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Kawaii.__init__": {
            "name": "__init__",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AgentBuyong.__init__": {
            "name": "__init__",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PhoenixParty.__init__": {
            "name": "__init__",
            "location": 276,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XianFaAgent.__init__": {
            "name": "__init__",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PokerFace.__init__": {
            "name": "__init__",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Farma.__init__": {
            "name": "__init__",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MyAgent.__init__": {
            "name": "__init__",
            "location": 300,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Atlas32016.__init__": {
            "name": "__init__",
            "location": 306,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ngent.__init__": {
            "name": "__init__",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GrandmaAgent.__init__": {
            "name": "__init__",
            "location": 318,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AgentHP2.__init__": {
            "name": "__init__",
            "location": 324,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Terra.__init__": {
            "name": "__init__",
            "location": 330,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CaduceusDC16.__init__": {
            "name": "__init__",
            "location": 336,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rubick.__init__": {
            "name": "__init__",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AgreeableAgent2018.__init__": {
            "name": "__init__",
            "location": 348,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MengWan.__init__": {
            "name": "__init__",
            "location": 356,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BetaOne.__init__": {
            "name": "__init__",
            "location": 362,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AgentK.__init__": {
            "name": "__init__",
            "location": 368,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Yushu.__init__": {
            "name": "__init__",
            "location": 374,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Nozomi.__init__": {
            "name": "__init__",
            "location": 380,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IAMhaggler.__init__": {
            "name": "__init__",
            "location": 386,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Gangster.__init__": {
            "name": "__init__",
            "location": 392,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Simpatico.__init__": {
            "name": "__init__",
            "location": 398,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TheFawkes.__init__": {
            "name": "__init__",
            "location": 404,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImmediateAcceptor.__init__": {
            "name": "__init__",
            "location": 410,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleAgent.__init__": {
            "name": "__init__",
            "location": 416,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RandomCounterOfferNegotiationParty.__init__": {
            "name": "__init__",
            "location": 422,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RandomParty.__init__": {
            "name": "__init__",
            "location": 430,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RandomParty2.__init__": {
            "name": "__init__",
            "location": 436,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeDependentAgentBoulware.__init__": {
            "name": "__init__",
            "location": 442,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeDependentAgentConceder.__init__": {
            "name": "__init__",
            "location": 448,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeDependentAgentHardliner.__init__": {
            "name": "__init__",
            "location": 454,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeDependentAgentLinear.__init__": {
            "name": "__init__",
            "location": 460,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoulwareNegotiationParty.__init__": {
            "name": "__init__",
            "location": 466,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimilarityAgent.__init__": {
            "name": "__init__",
            "location": 472,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptimalBidderSimple.__init__": {
            "name": "__init__",
            "location": 478,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ABMPAgent2.__init__": {
            "name": "__init__",
            "location": 484,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuzzyAgent.__init__": {
            "name": "__init__",
            "location": 490,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BayesianAgent.__init__": {
            "name": "__init__",
            "location": 496,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConcederNegotiationParty.__init__": {
            "name": "__init__",
            "location": 502,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/genius/negotiator.py": {
        "GeniusNegotiator.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "preferences": [
                    "(UtilityFunction | None)"
                ],
                "name": [
                    "(str | None)"
                ],
                "parent": [
                    "(Controller | None)"
                ],
                "owner": [
                    "Agent"
                ],
                "java_class_name": [
                    "(str | None)"
                ],
                "domain_file_name": [
                    "((str | Path) | None)"
                ],
                "utility_file_name": [
                    "((str | Path) | None)"
                ],
                "can_propose": [],
                "auto_load_java": [
                    "bool"
                ],
                "port": [
                    "int"
                ],
                "genius_bridge_path": [
                    "(str | None)"
                ],
                "strict": [
                    "(bool | None)"
                ]
            }
        },
        "GeniusNegotiator.is_connected": {
            "name": "is_connected",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeniusNegotiator.port": {
            "name": "port",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "port": []
            }
        },
        "GeniusNegotiator.robust_negotiators": {
            "name": "robust_negotiators",
            "location": 152,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "GeniusNegotiator.negotiators": {
            "name": "negotiators",
            "location": 159,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "cls": [],
                "agent_based": [],
                "party_based": []
            }
        },
        "GeniusNegotiator.random_negotiator_name": {
            "name": "random_negotiator_name",
            "location": 178,
            "return": [],
            "arguments": {
                "cls": [],
                "agent_based": [],
                "party_based": []
            }
        },
        "GeniusNegotiator.random_negotiator": {
            "name": "random_negotiator",
            "location": 187,
            "return": [
                "GeniusNegotiator"
            ],
            "arguments": {
                "cls": [],
                "agent_based": [],
                "party_based": [],
                "port": [
                    "int"
                ],
                "domain_file_name": [
                    "(str | None)"
                ],
                "utility_file_name": [
                    "(str | None)"
                ],
                "auto_load_java": [
                    "bool"
                ],
                "can_propose": [],
                "name": [
                    "(str | None)"
                ]
            }
        },
        "GeniusNegotiator._create": {
            "name": "_create",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeniusNegotiator._connect": {
            "name": "_connect",
            "location": 237,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "port": [
                    "int"
                ],
                "auto_load_java": [
                    "bool"
                ]
            }
        },
        "GeniusNegotiator.java_name": {
            "name": "java_name",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeniusNegotiator.join": {
            "name": "join",
            "location": 264,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "nmi": [
                    "NegotiatorMechanismInterface"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "GeniusNegotiator._outcome2str": {
            "name": "_outcome2str",
            "location": 324,
            "return": [],
            "arguments": {
                "self": [],
                "outcome": []
            }
        },
        "GeniusNegotiator.destroy_java_counterpart": {
            "name": "destroy_java_counterpart",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "GeniusNegotiator.on_negotiation_end": {
            "name": "on_negotiation_end",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "GeniusNegotiator.on_negotiation_start": {
            "name": "on_negotiation_start",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "GeniusNegotiator.cancel": {
            "name": "cancel",
            "location": 484,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": []
            }
        },
        "GeniusNegotiator.relative_time": {
            "name": "relative_time",
            "location": 491,
            "return": [
                "(float | None)"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeniusNegotiator._me": {
            "name": "_me",
            "location": 505,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeniusNegotiator.parse": {
            "name": "parse",
            "location": 510,
            "return": [
                "tuple[(ResponseType, (Outcome | None))]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str"
                ]
            }
        },
        "GeniusNegotiator.counter": {
            "name": "counter",
            "location": 584,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "offer": [
                    "(Outcome | None)"
                ]
            }
        },
        "GeniusNegotiator.propose": {
            "name": "propose",
            "location": 621,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "GeniusNegotiator.__str__": {
            "name": "__str__",
            "location": 626,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeniusNegotiator.parse.map_value": {
            "name": "map_value",
            "location": 540,
            "return": [],
            "arguments": {
                "issue": [
                    "Issue"
                ],
                "val": [
                    "str"
                ]
            }
        }
    },
    "negmas-master/negmas/genius/__init__.py": {},
    "negmas-master/negmas/helpers/generics.py": {},
    "negmas-master/negmas/helpers/inout.py": {
        "is_nonzero_file": {
            "name": "is_nonzero_file",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "fpath": [
                    "PathLike"
                ]
            }
        },
        "dump": {
            "name": "dump",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "d": [
                    "Any"
                ],
                "file_name": [
                    "((str | os.PathLike) | pathlib.Path)"
                ],
                "sort_keys": [],
                "compact": []
            }
        },
        "load": {
            "name": "load",
            "location": 422,
            "return": [
                "Any"
            ],
            "arguments": {
                "file_name": [
                    "((str | os.PathLike) | pathlib.Path)"
                ]
            }
        },
        "add_records": {
            "name": "add_records",
            "location": 459,
            "return": [
                "None"
            ],
            "arguments": {
                "file_name": [
                    "(str | os.PathLike)"
                ],
                "data": [
                    "Any"
                ],
                "col_names": [
                    "(list[str] | None)"
                ],
                "raise_exceptions": []
            }
        },
        "ConfigReader._split_key": {
            "name": "_split_key",
            "location": 61,
            "return": [
                "tuple[(str, (str | None))]"
            ],
            "arguments": {
                "cls": [],
                "key": [
                    "str"
                ]
            }
        },
        "ConfigReader._parse_children_config": {
            "name": "_parse_children_config",
            "location": 77,
            "return": [],
            "arguments": {
                "cls": [],
                "children": [],
                "scope": []
            }
        },
        "ConfigReader.read_config": {
            "name": "read_config",
            "location": 135,
            "return": [
                "dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "config": [
                    "(str | dict)"
                ],
                "section": [
                    "(str | None)"
                ]
            }
        },
        "ConfigReader.from_config": {
            "name": "from_config",
            "location": 190,
            "return": [],
            "arguments": {
                "cls": [],
                "config": [
                    "(str | dict)"
                ],
                "section": [
                    "(str | None)"
                ],
                "ignore_children": [
                    "bool"
                ],
                "try_parsing_children": [
                    "bool"
                ],
                "scope": []
            }
        },
        "NpEncoder.default": {
            "name": "default",
            "location": 323,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "NpDecorder.default": {
            "name": "default",
            "location": 349,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "ConfigReader.from_config._is_simple": {
            "name": "_is_simple",
            "location": 243,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "ConfigReader.from_config._set_simple_config": {
            "name": "_set_simple_config",
            "location": 257,
            "return": [
                "(dict[(str, Any)] | None)"
            ],
            "arguments": {
                "key": [],
                "v": []
            }
        },
        "ConfigReader.read_config.exists": {
            "name": "exists",
            "location": 155,
            "return": [],
            "arguments": {
                "nm": []
            }
        }
    },
    "negmas-master/negmas/helpers/logging.py": {
        "create_loggers": {
            "name": "create_loggers",
            "location": 32,
            "return": [
                "logging.Logger"
            ],
            "arguments": {
                "file_name": [
                    "(str | None)"
                ],
                "module_name": [
                    "(str | None)"
                ],
                "screen_level": [
                    "(int | None)"
                ],
                "file_level": [
                    "(int | None)"
                ],
                "format_str": [
                    "str"
                ],
                "colored": [
                    "bool"
                ],
                "app_wide_log_file": [
                    "bool"
                ],
                "module_wide_log_file": [
                    "bool"
                ]
            }
        }
    },
    "negmas-master/negmas/helpers/misc.py": {
        "nonmonotonic_minmax": {
            "name": "nonmonotonic_minmax",
            "location": 21,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "input": [
                    "Iterable"
                ],
                "f": [
                    "Callable[([Any], float)]"
                ]
            }
        },
        "nonmonotonic_multi_minmax": {
            "name": "nonmonotonic_multi_minmax",
            "location": 36,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "input": [
                    "Iterable[Iterable]"
                ],
                "f": [
                    "Callable[([Any], float)]"
                ]
            }
        },
        "monotonic_minmax": {
            "name": "monotonic_minmax",
            "location": 43,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "input": [
                    "HasMinMax"
                ],
                "f": [
                    "Callable[([Any], float)]"
                ]
            }
        },
        "monotonic_multi_minmax": {
            "name": "monotonic_multi_minmax",
            "location": 54,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "input": [
                    "Iterable[HasMinMax]"
                ],
                "f": [
                    "Callable[([Any], float)]"
                ]
            }
        },
        "remove_qoutes": {
            "name": "remove_qoutes",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "recover_qoutes": {
            "name": "recover_qoutes",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "make_callable": {
            "name": "make_callable",
            "location": 70,
            "return": [
                "Callable"
            ],
            "arguments": {
                "x": [
                    "(((dict | Sequence) | Callable) | None)"
                ]
            }
        }
    },
    "negmas-master/negmas/helpers/numeric.py": {
        "is_int_type": {
            "name": "is_int_type",
            "location": 39,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "is_float_type": {
            "name": "is_float_type",
            "location": 46,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "isint": {
            "name": "isint",
            "location": 53,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "isreal": {
            "name": "isreal",
            "location": 60,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "get_one_int": {
            "name": "get_one_int",
            "location": 67,
            "return": [],
            "arguments": {
                "i": [
                    "(int | tuple[(int, int)])"
                ]
            }
        },
        "get_one_float": {
            "name": "get_one_float",
            "location": 73,
            "return": [],
            "arguments": {
                "rng": [
                    "(float | tuple[(float, float)])"
                ]
            }
        },
        "make_range": {
            "name": "make_range",
            "location": 79,
            "return": [
                "tuple[(T, T)]"
            ],
            "arguments": {
                "x": [
                    "(T | tuple[(T, T)])"
                ]
            }
        },
        "truncated_mean": {
            "name": "truncated_mean",
            "location": 85,
            "return": [
                "(float | tuple[(float, (tuple[(float, float)] | None))])"
            ],
            "arguments": {
                "scores": [
                    "np.ndarray"
                ],
                "limits": [
                    "(tuple[(float, float)] | None)"
                ],
                "top_limit": [],
                "bottom_limit": [],
                "base": [],
                "return_limits": []
            }
        },
        "sample": {
            "name": "sample",
            "location": 190,
            "return": [],
            "arguments": {
                "n": [],
                "k": [],
                "grid": [],
                "compact": [],
                "endpoints": []
            }
        }
    },
    "negmas-master/negmas/helpers/prob.py": {
        "make_distribution": {
            "name": "make_distribution",
            "location": 173,
            "return": [
                "Distribution"
            ],
            "arguments": {
                "x": [
                    "(((int | float) | numbers.Real) | Distribution)"
                ]
            }
        },
        "uniform_around": {
            "name": "uniform_around",
            "location": 395,
            "return": [
                "Distribution"
            ],
            "arguments": {
                "value": [
                    "float"
                ],
                "range": [
                    "tuple[(float, float)]"
                ],
                "uncertainty": [
                    "float"
                ],
                "cls": [
                    "type[Distribution]"
                ]
            }
        },
        "Real.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "loc": [
                    "((int | float) | numbers.Real)"
                ],
                "type": [
                    "str"
                ],
                "scale": [
                    "float"
                ]
            }
        },
        "Real.__float__": {
            "name": "__float__",
            "location": 47,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Real.__call__": {
            "name": "__call__",
            "location": 50,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "float"
                ]
            }
        },
        "Real.loc": {
            "name": "loc",
            "location": 54,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Real.__copy__": {
            "name": "__copy__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Real.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "memo": []
            }
        },
        "Real.type": {
            "name": "type",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Real.mean": {
            "name": "mean",
            "location": 71,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Real.prob": {
            "name": "prob",
            "location": 75,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "float"
                ]
            }
        },
        "Real.cum_prob": {
            "name": "cum_prob",
            "location": 79,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "mn": [
                    "float"
                ],
                "mx": [
                    "float"
                ]
            }
        },
        "Real.sample": {
            "name": "sample",
            "location": 83,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int"
                ]
            }
        },
        "Real.scale": {
            "name": "scale",
            "location": 88,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Real.min": {
            "name": "min",
            "location": 93,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Real.max": {
            "name": "max",
            "location": 98,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Real.is_gaussian": {
            "name": "is_gaussian",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Real.is_uniform": {
            "name": "is_uniform",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Real.is_crisp": {
            "name": "is_crisp",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Real.__add__": {
            "name": "__add__",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Real.__sub__": {
            "name": "__sub__",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Real.__mul__": {
            "name": "__mul__",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Real.__lt__": {
            "name": "__lt__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Real.__le__": {
            "name": "__le__",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Real.__eq__": {
            "name": "__eq__",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Real.__ne__": {
            "name": "__ne__",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Real.__gt__": {
            "name": "__gt__",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Real.__ge__": {
            "name": "__ge__",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Real.__str__": {
            "name": "__str__",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScipyDistribution.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "str"
                ]
            }
        },
        "ScipyDistribution.__copy__": {
            "name": "__copy__",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScipyDistribution.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "memo": []
            }
        },
        "ScipyDistribution.type": {
            "name": "type",
            "location": 236,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScipyDistribution._make_dist": {
            "name": "_make_dist",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "type": [
                    "str"
                ],
                "loc": [
                    "float"
                ],
                "scale": [
                    "float"
                ]
            }
        },
        "ScipyDistribution.loc": {
            "name": "loc",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScipyDistribution.scale": {
            "name": "scale",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScipyDistribution.mean": {
            "name": "mean",
            "location": 253,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScipyDistribution.prob": {
            "name": "prob",
            "location": 263,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "float"
                ]
            }
        },
        "ScipyDistribution.cum_prob": {
            "name": "cum_prob",
            "location": 267,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "mn": [
                    "float"
                ],
                "mx": [
                    "float"
                ]
            }
        },
        "ScipyDistribution.sample": {
            "name": "sample",
            "location": 271,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int"
                ]
            }
        },
        "ScipyDistribution.min": {
            "name": "min",
            "location": 275,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScipyDistribution.max": {
            "name": "max",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScipyDistribution.is_gaussian": {
            "name": "is_gaussian",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScipyDistribution.is_uniform": {
            "name": "is_uniform",
            "location": 285,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScipyDistribution.is_crisp": {
            "name": "is_crisp",
            "location": 288,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScipyDistribution.__call__": {
            "name": "__call__",
            "location": 292,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "float"
                ]
            }
        },
        "ScipyDistribution.__add__": {
            "name": "__add__",
            "location": 296,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ScipyDistribution.__sub__": {
            "name": "__sub__",
            "location": 301,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ScipyDistribution.__mul__": {
            "name": "__mul__",
            "location": 306,
            "return": [],
            "arguments": {
                "self": [],
                "weight": [
                    "float"
                ]
            }
        },
        "ScipyDistribution.__lt__": {
            "name": "__lt__",
            "location": 313,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ScipyDistribution.__le__": {
            "name": "__le__",
            "location": 319,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ScipyDistribution.__eq__": {
            "name": "__eq__",
            "location": 335,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ScipyDistribution.__ne__": {
            "name": "__ne__",
            "location": 349,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ScipyDistribution.__gt__": {
            "name": "__gt__",
            "location": 353,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ScipyDistribution.__ge__": {
            "name": "__ge__",
            "location": 359,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ScipyDistribution.__float__": {
            "name": "__float__",
            "location": 363,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScipyDistribution.__str__": {
            "name": "__str__",
            "location": 367,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UniformDistribution.__init__": {
            "name": "__init__",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loc": [
                    "float"
                ],
                "scale": [
                    "float"
                ]
            }
        },
        "NormalDistribution.__init__": {
            "name": "__init__",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loc": [
                    "float"
                ],
                "scale": [
                    "float"
                ]
            }
        }
    },
    "negmas-master/negmas/helpers/strings.py": {
        "shorten": {
            "name": "shorten",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "length": [
                    "int"
                ],
                "common_parts": []
            }
        },
        "unique_name": {
            "name": "unique_name",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "base": [],
                "add_time": [],
                "add_host": [],
                "rand_digits": [],
                "sep": []
            }
        },
        "shortest_unique_names": {
            "name": "shortest_unique_names",
            "location": 121,
            "return": [],
            "arguments": {
                "strs": [
                    "list[str]"
                ],
                "sep": [],
                "max_compression": [],
                "guarantee_unique": []
            }
        },
        "snake_case": {
            "name": "snake_case",
            "location": 196,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "camel_case": {
            "name": "camel_case",
            "location": 217,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "capitalize_first": [
                    "bool"
                ],
                "lower_first": [
                    "bool"
                ]
            }
        },
        "_pretty_string": {
            "name": "_pretty_string",
            "location": 254,
            "return": [
                "str"
            ],
            "arguments": {
                "src": [],
                "dpth": [],
                "current_key": [],
                "tab_size": []
            }
        },
        "pretty_string": {
            "name": "pretty_string",
            "location": 288,
            "return": [
                "str"
            ],
            "arguments": {
                "src": [],
                "tab_size": [],
                "compact": []
            }
        },
        "exception2str": {
            "name": "exception2str",
            "location": 311,
            "return": [
                "str"
            ],
            "arguments": {
                "limit": [],
                "chain": []
            }
        },
        "humanize_time": {
            "name": "humanize_time",
            "location": 315,
            "return": [],
            "arguments": {
                "secs": [],
                "align": [],
                "always_show_all_units": [],
                "show_us": [],
                "show_ms": [],
                "always_show_from": []
            }
        },
        "_pretty_string.tabs": {
            "name": "tabs",
            "location": 266,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "negmas-master/negmas/helpers/timeout.py": {
        "force_single_thread": {
            "name": "force_single_thread",
            "location": 24,
            "return": [],
            "arguments": {
                "on": [
                    "bool"
                ]
            }
        },
        "single_thread": {
            "name": "single_thread",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "is_single_thread": {
            "name": "is_single_thread",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "cleanup": {
            "name": "cleanup",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "TimeoutCaller.get_pool": {
            "name": "get_pool",
            "location": 51,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TimeoutCaller.run": {
            "name": "run",
            "location": 57,
            "return": [],
            "arguments": {
                "cls": [],
                "to_run": [],
                "timeout": [
                    "float"
                ]
            }
        },
        "TimeoutCaller.cleanup": {
            "name": "cleanup",
            "location": 70,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "negmas-master/negmas/helpers/types.py": {
        "get_full_type_name": {
            "name": "get_full_type_name",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "t": [
                    "((type[Any] | Callable) | str)"
                ]
            }
        },
        "import_by_name": {
            "name": "import_by_name",
            "location": 55,
            "return": [
                "Any"
            ],
            "arguments": {
                "full_name": [
                    "str"
                ]
            }
        },
        "get_class": {
            "name": "get_class",
            "location": 72,
            "return": [
                "type"
            ],
            "arguments": {
                "class_name": [
                    "(str | type)"
                ],
                "module_name": [
                    "(str | None)"
                ],
                "scope": [
                    "(dict | None)"
                ],
                "allow_nonstandard_names": []
            }
        },
        "instantiate": {
            "name": "instantiate",
            "location": 106,
            "return": [
                "Any"
            ],
            "arguments": {
                "class_name": [
                    "(str | type)"
                ],
                "module_name": [
                    "(str | None)"
                ],
                "scope": [
                    "(dict | None)"
                ]
            }
        },
        "is_lambda_function": {
            "name": "is_lambda_function",
            "location": 116,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "is_partial_function": {
            "name": "is_partial_function",
            "location": 121,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "is_lambda_or_partial_function": {
            "name": "is_lambda_or_partial_function",
            "location": 126,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "is_type": {
            "name": "is_type",
            "location": 131,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "is_not_type": {
            "name": "is_not_type",
            "location": 136,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "is_not_lambda_nor_partial_function": {
            "name": "is_not_lambda_nor_partial_function",
            "location": 141,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "is_jsonable": {
            "name": "is_jsonable",
            "location": 148,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "negmas-master/negmas/helpers/__init__.py": {},
    "negmas-master/negmas/models/acceptance.py": {
        "DiscreteAcceptanceModel.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "outcomes": [
                    "Collection[Outcome]"
                ]
            }
        },
        "DiscreteAcceptanceModel.probability_of_acceptance_indx": {
            "name": "probability_of_acceptance_indx",
            "location": 58,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "outcome_index": [
                    "int"
                ]
            }
        },
        "DiscreteAcceptanceModel.probability_of_acceptance": {
            "name": "probability_of_acceptance",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ]
            }
        },
        "DiscreteAcceptanceModel.update_rejected_indx": {
            "name": "update_rejected_indx",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "outcome_index": [
                    "int"
                ]
            }
        },
        "DiscreteAcceptanceModel.update_rejected": {
            "name": "update_rejected",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ]
            }
        },
        "DiscreteAcceptanceModel.update_offered_indx": {
            "name": "update_offered_indx",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "outcome_index": [
                    "int"
                ]
            }
        },
        "DiscreteAcceptanceModel.update_offered": {
            "name": "update_offered",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "outcome": []
            }
        },
        "DiscreteAcceptanceModel.update_accepted": {
            "name": "update_accepted",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "outcome": []
            }
        },
        "DiscreteAcceptanceModel.acceptance_probabilities": {
            "name": "acceptance_probabilities",
            "location": 88,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdaptiveDiscreteAcceptanceModel.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "outcomes": [
                    "Collection[Outcome]"
                ],
                "n_negotiators": [
                    "int"
                ],
                "prob": [
                    "(float | list[float])"
                ],
                "end_prob": [],
                "p_accept_after_reject": [],
                "p_reject_after_accept": [],
                "rejection_discount": [],
                "rejection_delta": [],
                "not_offering_rejection_ratio": []
            }
        },
        "AdaptiveDiscreteAcceptanceModel.from_negotiation": {
            "name": "from_negotiation",
            "location": 132,
            "return": [
                "AdaptiveDiscreteAcceptanceModel"
            ],
            "arguments": {
                "cls": [],
                "nmi": [
                    "NegotiatorMechanismInterface"
                ],
                "prob": [
                    "(float | list)"
                ],
                "end_prob": [],
                "p_accept_after_reject": [],
                "p_reject_after_accept": []
            }
        },
        "AdaptiveDiscreteAcceptanceModel.probability_of_acceptance_indx": {
            "name": "probability_of_acceptance_indx",
            "location": 153,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "outcome_index": [
                    "int"
                ]
            }
        },
        "AdaptiveDiscreteAcceptanceModel.acceptance_probabilities": {
            "name": "acceptance_probabilities",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdaptiveDiscreteAcceptanceModel._update": {
            "name": "_update",
            "location": 160,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "float"
                ],
                "real_rejection": [
                    "bool"
                ]
            }
        },
        "AdaptiveDiscreteAcceptanceModel.update_rejected_indx": {
            "name": "update_rejected_indx",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "outcome_index": [
                    "int"
                ]
            }
        },
        "AdaptiveDiscreteAcceptanceModel.update_offered_indx": {
            "name": "update_offered_indx",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "outcome_index": [
                    "int"
                ]
            }
        },
        "RandomDiscreteAcceptanceModel.__init__": {
            "name": "__init__",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "outcomes": [
                    "Collection[Outcome]"
                ]
            }
        },
        "RandomDiscreteAcceptanceModel.probability_of_acceptance_indx": {
            "name": "probability_of_acceptance_indx",
            "location": 192,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "outcome_index": [
                    "int"
                ]
            }
        },
        "RandomDiscreteAcceptanceModel.update_rejected_indx": {
            "name": "update_rejected_indx",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "outcome_index": [
                    "int"
                ]
            }
        },
        "RandomDiscreteAcceptanceModel.update_offered_indx": {
            "name": "update_offered_indx",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "outcome_index": [
                    "int"
                ]
            }
        },
        "ConstantDiscreteAcceptanceModel.__init__": {
            "name": "__init__",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "outcomes": [
                    "Collection[Outcome]"
                ]
            }
        },
        "ConstantDiscreteAcceptanceModel.probability_of_acceptance_indx": {
            "name": "probability_of_acceptance_indx",
            "location": 206,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "outcome_index": [
                    "int"
                ]
            }
        },
        "ConstantDiscreteAcceptanceModel.update_rejected_indx": {
            "name": "update_rejected_indx",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "outcome_index": [
                    "int"
                ]
            }
        },
        "ConstantDiscreteAcceptanceModel.update_offered_indx": {
            "name": "update_offered_indx",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "outcome_index": [
                    "int"
                ]
            }
        },
        "PeekingDiscreteAcceptanceModel.__init__": {
            "name": "__init__",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "outcomes": [
                    "Collection[Outcome]"
                ],
                "opponents": [
                    "(SAONegotiator | Collection[SAONegotiator])"
                ]
            }
        },
        "PeekingDiscreteAcceptanceModel.probability_of_acceptance_indx": {
            "name": "probability_of_acceptance_indx",
            "location": 227,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "outcome_index": [
                    "int"
                ]
            }
        },
        "PeekingDiscreteAcceptanceModel.update_rejected_indx": {
            "name": "update_rejected_indx",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "outcome_index": [
                    "int"
                ]
            }
        },
        "PeekingDiscreteAcceptanceModel.update_offered_indx": {
            "name": "update_offered_indx",
            "location": 243,
            "return": [],
            "arguments": {
                "self": [],
                "outcome_index": [
                    "int"
                ]
            }
        },
        "PeekingProbabilisticDiscreteAcceptanceModel.__init__": {
            "name": "__init__",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "outcomes": [
                    "Collection[Outcome]"
                ],
                "opponents": [
                    "(SAONegotiator | Collection[SAONegotiator])"
                ]
            }
        },
        "PeekingProbabilisticDiscreteAcceptanceModel.probability_of_acceptance_indx": {
            "name": "probability_of_acceptance_indx",
            "location": 258,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "outcome_index": [
                    "int"
                ]
            }
        },
        "PeekingProbabilisticDiscreteAcceptanceModel.update_rejected_indx": {
            "name": "update_rejected_indx",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "outcome_index": [
                    "int"
                ]
            }
        },
        "PeekingProbabilisticDiscreteAcceptanceModel.update_offered_indx": {
            "name": "update_offered_indx",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "outcome_index": [
                    "int"
                ]
            }
        },
        "AggregatingDiscreteAcceptanceModel.__init__": {
            "name": "__init__",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "outcomes": [
                    "Collection[Outcome]"
                ],
                "models": [
                    "list[DiscreteAcceptanceModel]"
                ],
                "weights": [
                    "(list[float] | None)"
                ]
            }
        },
        "AggregatingDiscreteAcceptanceModel.probability_of_acceptance_indx": {
            "name": "probability_of_acceptance_indx",
            "location": 289,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "outcome_index": [
                    "int"
                ]
            }
        },
        "AggregatingDiscreteAcceptanceModel.update_rejected_indx": {
            "name": "update_rejected_indx",
            "location": 295,
            "return": [],
            "arguments": {
                "self": [],
                "outcome_index": [
                    "int"
                ]
            }
        },
        "AggregatingDiscreteAcceptanceModel.update_offered_indx": {
            "name": "update_offered_indx",
            "location": 299,
            "return": [],
            "arguments": {
                "self": [],
                "outcome_index": [
                    "int"
                ]
            }
        },
        "UncertainOpponentModel.__init__": {
            "name": "__init__",
            "location": 319,
            "return": [],
            "arguments": {
                "self": [],
                "outcomes": [
                    "Collection[Outcome]"
                ],
                "opponents": [
                    "(SAONegotiator | Collection[SAONegotiator])"
                ],
                "uncertainty": [
                    "float"
                ],
                "adaptive": [
                    "bool"
                ],
                "rejection_discount": [
                    "float"
                ],
                "rejection_delta": [
                    "float"
                ],
                "constant_base": [],
                "accesses_real_acceptance": []
            }
        }
    },
    "negmas-master/negmas/models/future.py": {
        "FutureUtilityRegressor.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "regressor_factory": []
            }
        },
        "FutureUtilityRegressor.fit": {
            "name": "fit",
            "location": 22,
            "return": [
                "FutureUtilityRegressor"
            ],
            "arguments": {
                "self": [],
                "times": [],
                "utils": []
            }
        },
        "FutureUtilityRegressor.predict_utility": {
            "name": "predict_utility",
            "location": 30,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "times": []
            }
        },
        "FutureUtilityRegressor.predict_utility_prob": {
            "name": "predict_utility_prob",
            "location": 35,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "times": [],
                "return_cov": []
            }
        },
        "FutureUtilityRegressor.predict_time": {
            "name": "predict_time",
            "location": 39,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "utils": []
            }
        },
        "FutureUtilityRegressor.predict_time_prob": {
            "name": "predict_time_prob",
            "location": 44,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "utils": [],
                "return_cov": []
            }
        }
    },
    "negmas-master/negmas/models/preferences.py": {},
    "negmas-master/negmas/models/strategy.py": {},
    "negmas-master/negmas/models/__init__.py": {},
    "negmas-master/negmas/negotiators/common.py": {},
    "negmas-master/negmas/negotiators/controlled.py": {
        "ControlledNegotiator.__getattribute__": {
            "name": "__getattribute__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        }
    },
    "negmas-master/negmas/negotiators/controller.py": {
        "Controller.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "default_negotiator_type": [
                    "((str | type[ControlledNegotiator]) | None)"
                ],
                "default_negotiator_params": [
                    "(dict[(str, Any)] | None)"
                ],
                "parent": [
                    "((Controller | Agent) | None)"
                ],
                "auto_kill": [
                    "bool"
                ]
            }
        },
        "Controller.reset": {
            "name": "reset",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Controller.negotiators": {
            "name": "negotiators",
            "location": 92,
            "return": [
                "dict[(str, NegotiatorInfo)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.active_negotiators": {
            "name": "active_negotiators",
            "location": 100,
            "return": [
                "dict[(str, NegotiatorInfo)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.states": {
            "name": "states",
            "location": 115,
            "return": [
                "dict[(str, MechanismState)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.make_negotiator": {
            "name": "make_negotiator",
            "location": 126,
            "return": [
                "ControlledNegotiatorType@@Negotiator@@"
            ],
            "arguments": {
                "self": [],
                "negotiator_type": [
                    "((str | ControlledNegotiatorType) | None)"
                ],
                "name": [
                    "(str | None)"
                ]
            }
        },
        "Controller.add_negotiator": {
            "name": "add_negotiator",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "negotiator": [
                    "Negotiator"
                ],
                "cntxt": [
                    "Any"
                ]
            }
        },
        "Controller.create_negotiator": {
            "name": "create_negotiator",
            "location": 178,
            "return": [
                "ControlledNegotiatorType@@Negotiator@@"
            ],
            "arguments": {
                "self": [],
                "negotiator_type": [
                    "((str | ControlledNegotiatorType) | None)"
                ],
                "name": [
                    "(str | None)"
                ],
                "cntxt": [
                    "Any"
                ]
            }
        },
        "Controller.call": {
            "name": "call",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "negotiator": [
                    "ControlledNegotiator"
                ],
                "method": [
                    "str"
                ]
            }
        },
        "Controller.kill_negotiator": {
            "name": "kill_negotiator",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "negotiator_id": [
                    "str"
                ],
                "force": [
                    "bool"
                ]
            }
        },
        "Controller.partner_negotiator_ids": {
            "name": "partner_negotiator_ids",
            "location": 245,
            "return": [
                "(list[str] | None)"
            ],
            "arguments": {
                "self": [],
                "negotiator_id": [
                    "str"
                ]
            }
        },
        "Controller.partner_negotiator_names": {
            "name": "partner_negotiator_names",
            "location": 258,
            "return": [
                "(list[str] | None)"
            ],
            "arguments": {
                "self": [],
                "negotiator_id": [
                    "str"
                ]
            }
        },
        "Controller.partner_agent_ids": {
            "name": "partner_agent_ids",
            "location": 271,
            "return": [
                "(list[str] | None)"
            ],
            "arguments": {
                "self": [],
                "negotiator_id": [
                    "str"
                ]
            }
        },
        "Controller.partner_agent_names": {
            "name": "partner_agent_names",
            "location": 285,
            "return": [
                "(list[str] | None)"
            ],
            "arguments": {
                "self": [],
                "negotiator_id": [
                    "str"
                ]
            }
        },
        "Controller.before_join": {
            "name": "before_join",
            "location": 299,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "negotiator_id": [
                    "str"
                ],
                "nmi": [
                    "NegotiatorMechanismInterface"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "Controller.after_join": {
            "name": "after_join",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "negotiator_id": [
                    "str"
                ],
                "nmi": [
                    "NegotiatorMechanismInterface"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "Controller.join": {
            "name": "join",
            "location": 346,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "negotiator_id": [
                    "str"
                ],
                "nmi": [
                    "NegotiatorMechanismInterface"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "Controller.on_negotiation_start": {
            "name": "on_negotiation_start",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "negotiator_id": [
                    "str"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "Controller.on_round_start": {
            "name": "on_round_start",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "negotiator_id": [
                    "str"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "Controller.on_mechanism_error": {
            "name": "on_mechanism_error",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "negotiator_id": [
                    "str"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "Controller.on_round_end": {
            "name": "on_round_end",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "negotiator_id": [
                    "str"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "Controller.on_leave": {
            "name": "on_leave",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "negotiator_id": [
                    "str"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "Controller.on_negotiation_end": {
            "name": "on_negotiation_end",
            "location": 473,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "negotiator_id": [
                    "str"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "Controller.on_notification": {
            "name": "on_notification",
            "location": 489,
            "return": [],
            "arguments": {
                "self": [],
                "negotiator_id": [
                    "str"
                ],
                "notification": [
                    "Notification"
                ],
                "notifier": [
                    "str"
                ]
            }
        },
        "Controller.__str__": {
            "name": "__str__",
            "location": 499,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/negotiators/helpers.py": {
        "TimeCurve.utility_range": {
            "name": "utility_range",
            "location": 22,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "float"
                ]
            }
        },
        "Aspiration.utility_at": {
            "name": "utility_at",
            "location": 33,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "float"
                ]
            }
        },
        "Aspiration.utility_range": {
            "name": "utility_range",
            "location": 36,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "float"
                ]
            }
        },
        "ExpAspiration.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "max_aspiration": [
                    "float"
                ],
                "aspiration_type": [
                    "(((Literal['boulware'] | Literal['conceder']) | Literal['linear']) | float)"
                ]
            }
        },
        "ExpAspiration.utility_at": {
            "name": "utility_at",
            "location": 74,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "float"
                ]
            }
        },
        "PolyAspiration.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "max_aspiration": [
                    "float"
                ],
                "aspiration_type": [
                    "((((Literal['boulware'] | Literal['conceder']) | Literal['linear']) | Literal['hardheaded']) | float)"
                ]
            }
        },
        "PolyAspiration.utility_at": {
            "name": "utility_at",
            "location": 131,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "float"
                ]
            }
        }
    },
    "negmas-master/negmas/negotiators/modular.py": {
        "ModularNegotiator.insert_component": {
            "name": "insert_component",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "component": [
                    "Component"
                ],
                "name": [
                    "(str | None)"
                ],
                "index": [
                    "int"
                ],
                "override": [
                    "bool"
                ]
            }
        },
        "ModularNegotiator.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModularNegotiator.components": {
            "name": "components",
            "location": 73,
            "return": [
                "tuple[(Component, ...)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModularNegotiator.remove_component_at": {
            "name": "remove_component_at",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "ModularNegotiator.remove_component": {
            "name": "remove_component",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ModularNegotiator.on_preferences_changed": {
            "name": "on_preferences_changed",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "changes": [
                    "list[PreferencesChange]"
                ]
            }
        },
        "ModularNegotiator.join": {
            "name": "join",
            "location": 95,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "nmi": [
                    "NegotiatorMechanismInterface"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "ModularNegotiator.on_negotiation_start": {
            "name": "on_negotiation_start",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "ModularNegotiator.on_round_start": {
            "name": "on_round_start",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "ModularNegotiator.on_round_end": {
            "name": "on_round_end",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "ModularNegotiator.on_leave": {
            "name": "on_leave",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "ModularNegotiator.on_negotiation_end": {
            "name": "on_negotiation_end",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "ModularNegotiator.on_mechanism_error": {
            "name": "on_mechanism_error",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        }
    },
    "negmas-master/negmas/negotiators/negotiator.py": {
        "Negotiator.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "(str | None)"
                ],
                "preferences": [
                    "(Preferences | None)"
                ],
                "ufun": [
                    "(BaseUtilityFunction | None)"
                ],
                "parent": [
                    "(Controller | None)"
                ],
                "owner": [
                    "(Agent | None)"
                ],
                "id": [
                    "(str | None)"
                ],
                "type_name": [
                    "(str | None)"
                ]
            }
        },
        "Negotiator.ami": {
            "name": "ami",
            "location": 74,
            "return": [
                "NegotiatorMechanismInterface"
            ],
            "arguments": {
                "self": []
            }
        },
        "Negotiator.nmi": {
            "name": "nmi",
            "location": 81,
            "return": [
                "NegotiatorMechanismInterface"
            ],
            "arguments": {
                "self": []
            }
        },
        "Negotiator.owner": {
            "name": "owner",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "owner": []
            }
        },
        "Negotiator._set_pref_os": {
            "name": "_set_pref_os",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Negotiator.set_preferences": {
            "name": "set_preferences",
            "location": 100,
            "return": [
                "(Preferences | None)"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Preferences"
                ],
                "force": []
            }
        },
        "Negotiator._reset_pref_os": {
            "name": "_reset_pref_os",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Negotiator.parent": {
            "name": "parent",
            "location": 118,
            "return": [
                "(Controller | None)"
            ],
            "arguments": {
                "self": []
            }
        },
        "Negotiator.before_death": {
            "name": "before_death",
            "location": 122,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cntxt": [
                    "dict[(str, Any)]"
                ]
            }
        },
        "Negotiator._dissociate": {
            "name": "_dissociate",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Negotiator.is_acceptable_as_agreement": {
            "name": "is_acceptable_as_agreement",
            "location": 137,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ]
            }
        },
        "Negotiator.isin": {
            "name": "isin",
            "location": 155,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "negotiation_id": [
                    "(str | None)"
                ]
            }
        },
        "Negotiator.capabilities": {
            "name": "capabilities",
            "location": 175,
            "return": [
                "dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Negotiator.remove_capability": {
            "name": "remove_capability",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Negotiator.add_capabilities": {
            "name": "add_capabilities",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capabilities": [
                    "dict"
                ]
            }
        },
        "Negotiator.join": {
            "name": "join",
            "location": 215,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "nmi": [
                    "NegotiatorMechanismInterface"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "Negotiator.on_negotiation_start": {
            "name": "on_negotiation_start",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "Negotiator._on_negotiation_start": {
            "name": "_on_negotiation_start",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "Negotiator.on_round_start": {
            "name": "on_round_start",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "Negotiator.on_mechanism_error": {
            "name": "on_mechanism_error",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "Negotiator.on_round_end": {
            "name": "on_round_end",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "Negotiator.on_leave": {
            "name": "on_leave",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "Negotiator.on_negotiation_end": {
            "name": "on_negotiation_end",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "Negotiator._on_negotiation_end": {
            "name": "_on_negotiation_end",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "Negotiator.on_notification": {
            "name": "on_notification",
            "location": 375,
            "return": [],
            "arguments": {
                "self": [],
                "notification": [
                    "Notification"
                ],
                "notifier": [
                    "str"
                ]
            }
        },
        "Negotiator.cancel": {
            "name": "cancel",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": []
            }
        },
        "Negotiator.__str__": {
            "name": "__str__",
            "location": 418,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/negotiators/simple.py": {
        "EvaluatorNegotiator.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvaluatorNegotiator.evaluate": {
            "name": "evaluate",
            "location": 45,
            "return": [
                "(Value | None)"
            ],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ]
            }
        },
        "RealComparatorNegotiator.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RealComparatorNegotiator.difference": {
            "name": "difference",
            "location": 65,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "Outcome"
                ],
                "second": [
                    "Outcome"
                ]
            }
        },
        "RealComparatorNegotiator.is_better": {
            "name": "is_better",
            "location": 81,
            "return": [
                "(bool | None)"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "Outcome"
                ],
                "second": [
                    "Outcome"
                ]
            }
        },
        "BinaryComparatorNegotiator.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryComparatorNegotiator.is_better": {
            "name": "is_better",
            "location": 112,
            "return": [
                "(bool | None)"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "Outcome"
                ],
                "second": [
                    "Outcome"
                ],
                "epsilon": [
                    "float"
                ]
            }
        },
        "NLevelsComparatorNegotiator.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NLevelsComparatorNegotiator.generate_thresholds": {
            "name": "generate_thresholds",
            "location": 154,
            "return": [
                "list[float]"
            ],
            "arguments": {
                "cls": [],
                "n": [
                    "int"
                ],
                "ufun_min": [
                    "float"
                ],
                "ufun_max": [
                    "float"
                ],
                "scale": [
                    "((str | Callable[([float], float)]) | None)"
                ]
            }
        },
        "NLevelsComparatorNegotiator.equiprobable_thresholds": {
            "name": "equiprobable_thresholds",
            "location": 186,
            "return": [
                "list[float]"
            ],
            "arguments": {
                "cls": [],
                "n": [
                    "int"
                ],
                "preferences": [
                    "Preferences"
                ],
                "issues": [
                    "list[Issue]"
                ],
                "n_samples": [
                    "int"
                ]
            }
        },
        "NLevelsComparatorNegotiator.thresholds": {
            "name": "thresholds",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "thresholds": [
                    "list[float]"
                ]
            }
        },
        "NLevelsComparatorNegotiator.compare_nlevels": {
            "name": "compare_nlevels",
            "location": 227,
            "return": [
                "(int | None)"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "Outcome"
                ],
                "second": [
                    "Outcome"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "NLevelsComparatorNegotiator.is_better": {
            "name": "is_better",
            "location": 274,
            "return": [
                "(bool | None)"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "Outcome"
                ],
                "second": [
                    "Outcome"
                ],
                "epsilon": [
                    "float"
                ]
            }
        },
        "RankerWithWeightsNegotiator.__init__": {
            "name": "__init__",
            "location": 306,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RankerWithWeightsNegotiator.rank_with_weights": {
            "name": "rank_with_weights",
            "location": 311,
            "return": [
                "list[tuple[(int, float)]]"
            ],
            "arguments": {
                "self": [],
                "outcomes": [
                    "(list[Outcome] | None)"
                ],
                "descending": []
            }
        },
        "RankerWithWeightsNegotiator.is_better": {
            "name": "is_better",
            "location": 329,
            "return": [
                "(bool | None)"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "Outcome"
                ],
                "second": [
                    "Outcome"
                ],
                "epsilon": [
                    "float"
                ]
            }
        },
        "RankerNegotiator.__init__": {
            "name": "__init__",
            "location": 361,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RankerNegotiator.rank": {
            "name": "rank",
            "location": 366,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "self": [],
                "outcomes": [
                    "list[(Outcome | None)]"
                ],
                "descending": []
            }
        },
        "RankerNegotiator.is_better": {
            "name": "is_better",
            "location": 378,
            "return": [
                "(bool | None)"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "Outcome"
                ],
                "second": [
                    "Outcome"
                ],
                "epsilon": [
                    "float"
                ]
            }
        },
        "SorterNegotiator.__init__": {
            "name": "__init__",
            "location": 411,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SorterNegotiator.sort": {
            "name": "sort",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "outcomes": [
                    "list[(Outcome | None)]"
                ],
                "descending": []
            }
        }
    },
    "negmas-master/negmas/negotiators/__init__.py": {},
    "negmas-master/negmas/negotiators/components/component.py": {
        "__setattr__": {
            "name": "__setattr__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "__delattr__": {
            "name": "__delattr__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Component.negotiator": {
            "name": "negotiator",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Component.set_negotiator": {
            "name": "set_negotiator",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "negotiator": [
                    "Negotiator"
                ]
            }
        },
        "Component.on_preferences_changed": {
            "name": "on_preferences_changed",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "changes": [
                    "list[PreferencesChange]"
                ]
            }
        },
        "Component.can_join": {
            "name": "can_join",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "nmi": [
                    "NegotiatorMechanismInterface"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "Component.after_join": {
            "name": "after_join",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nmi": [
                    "NegotiatorMechanismInterface"
                ]
            }
        },
        "Component.on_negotiation_start": {
            "name": "on_negotiation_start",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "Component.on_round_start": {
            "name": "on_round_start",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "Component.on_round_end": {
            "name": "on_round_end",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "Component.on_leave": {
            "name": "on_leave",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "Component.on_negotiation_end": {
            "name": "on_negotiation_end",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "Component.on_mechanism_error": {
            "name": "on_mechanism_error",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        }
    },
    "negmas-master/negmas/negotiators/components/__init__.py": {},
    "negmas-master/negmas/outcomes/base_issue.py": {
        "make_issue": {
            "name": "make_issue",
            "location": 24,
            "return": [],
            "arguments": {
                "values": []
            }
        },
        "Issue.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [],
                "name": [
                    "(str | None)"
                ]
            }
        },
        "Issue.__copy__": {
            "name": "__copy__",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Issue.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "memodict": []
            }
        },
        "Issue.value_type": {
            "name": "value_type",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Issue.values": {
            "name": "values",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Issue.has_limits": {
            "name": "has_limits",
            "location": 149,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Issue.is_numeric": {
            "name": "is_numeric",
            "location": 155,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Issue.has_finite_limits": {
            "name": "has_finite_limits",
            "location": 161,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Issue.is_integer": {
            "name": "is_integer",
            "location": 172,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Issue.is_float": {
            "name": "is_float",
            "location": 178,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Issue.is_continuous": {
            "name": "is_continuous",
            "location": 187,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Issue.is_discrete": {
            "name": "is_discrete",
            "location": 193,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Issue.is_finite": {
            "name": "is_finite",
            "location": 199,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Issue.is_discrete_valued": {
            "name": "is_discrete_valued",
            "location": 205,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Issue.cardinality": {
            "name": "cardinality",
            "location": 212,
            "return": [
                "(int | float)"
            ],
            "arguments": {
                "self": []
            }
        },
        "Issue.rand": {
            "name": "rand",
            "location": 217,
            "return": [
                "((int | float) | str)"
            ],
            "arguments": {
                "self": []
            }
        },
        "Issue.rand_valid": {
            "name": "rand_valid",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Issue.from_dict": {
            "name": "from_dict",
            "location": 227,
            "return": [],
            "arguments": {
                "cls": [],
                "d": []
            }
        },
        "Issue.to_dict": {
            "name": "to_dict",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Issue.is_valid": {
            "name": "is_valid",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "Issue.contains": {
            "name": "contains",
            "location": 257,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "issue": [
                    "Issue"
                ]
            }
        },
        "Issue.type": {
            "name": "type",
            "location": 266,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Issue.ordered_value_generator": {
            "name": "ordered_value_generator",
            "location": 273,
            "return": [
                "Generator[(int, None, None)]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "((int | float) | None)"
                ],
                "grid": [],
                "compact": [],
                "endpoints": []
            }
        },
        "Issue.value_generator": {
            "name": "value_generator",
            "location": 300,
            "return": [
                "Generator[(Any, None, None)]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "((int | float) | None)"
                ],
                "grid": [],
                "compact": [],
                "endpoints": []
            }
        },
        "Issue.to_discrete": {
            "name": "to_discrete",
            "location": 324,
            "return": [
                "DiscreteIssue"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "((int | float) | None)"
                ],
                "grid": [],
                "compact": [],
                "endpoints": []
            }
        },
        "Issue._to_xml_str": {
            "name": "_to_xml_str",
            "location": 350,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "indx": [
                    "int"
                ]
            }
        },
        "Issue.value_at": {
            "name": "value_at",
            "location": 354,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "Issue.rand_outcomes": {
            "name": "rand_outcomes",
            "location": 361,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "with_replacement": [],
                "fail_if_not_enough": []
            }
        },
        "Issue.rand_invalid": {
            "name": "rand_invalid",
            "location": 377,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Issue.all": {
            "name": "all",
            "location": 381,
            "return": [
                "Generator[(Any, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Issue.__getitem__": {
            "name": "__getitem__",
            "location": 391,
            "return": [],
            "arguments": {
                "self": [],
                "indx": []
            }
        },
        "Issue.__iter__": {
            "name": "__iter__",
            "location": 394,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Issue.__contains__": {
            "name": "__contains__",
            "location": 397,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Issue.__len__": {
            "name": "__len__",
            "location": 409,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Issue.__eq__": {
            "name": "__eq__",
            "location": 412,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Issue.__hash__": {
            "name": "__hash__",
            "location": 415,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Issue.__repr__": {
            "name": "__repr__",
            "location": 418,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Issue.__str__": {
            "name": "__str__",
            "location": 421,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscreteIssue.cardinality": {
            "name": "cardinality",
            "location": 431,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiscreteIssue.is_continuous": {
            "name": "is_continuous",
            "location": 435,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiscreteIssue.all": {
            "name": "all",
            "location": 440,
            "return": [
                "Generator[(Any, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiscreteIssue.ordered_value_generator": {
            "name": "ordered_value_generator",
            "location": 454,
            "return": [
                "Generator[(Any, None, None)]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "((int | float) | None)"
                ],
                "grid": [],
                "compact": [],
                "endpoints": []
            }
        },
        "DiscreteIssue.value_generator": {
            "name": "value_generator",
            "location": 463,
            "return": [
                "Generator[(Any, None, None)]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "((int | float) | None)"
                ],
                "grid": [],
                "compact": [],
                "endpoints": []
            }
        },
        "DiscreteIssue.value_at": {
            "name": "value_at",
            "location": 474,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "DiscreteIssue.rand": {
            "name": "rand",
            "location": 479,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscreteIssue.rand_outcomes": {
            "name": "rand_outcomes",
            "location": 483,
            "return": [
                "Iterable[Outcome]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "with_replacement": [],
                "fail_if_not_enough": []
            }
        },
        "DiscreteIssue.is_valid": {
            "name": "is_valid",
            "location": 502,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "DiscreteIssue.__getitem__": {
            "name": "__getitem__",
            "location": 505,
            "return": [],
            "arguments": {
                "self": [],
                "indx": []
            }
        }
    },
    "negmas-master/negmas/outcomes/callable_issue.py": {
        "CallableIssue.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [],
                "name": []
            }
        },
        "CallableIssue._to_xml_str": {
            "name": "_to_xml_str",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "indx": []
            }
        },
        "CallableIssue.type": {
            "name": "type",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallableIssue.is_uncountable": {
            "name": "is_uncountable",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallableIssue.is_continuous": {
            "name": "is_continuous",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallableIssue.ordered_value_generator": {
            "name": "ordered_value_generator",
            "location": 35,
            "return": [
                "Generator[(Any, None, None)]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "((int | float) | None)"
                ],
                "grid": [],
                "compact": [],
                "endpoints": []
            }
        },
        "CallableIssue.value_generator": {
            "name": "value_generator",
            "location": 42,
            "return": [
                "Generator[(Any, None, None)]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "((int | float) | None)"
                ],
                "grid": [],
                "compact": [],
                "endpoints": []
            }
        },
        "CallableIssue.rand": {
            "name": "rand",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CallableIssue.rand_outcomes": {
            "name": "rand_outcomes",
            "location": 53,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "with_replacement": [],
                "fail_if_not_enough": []
            }
        },
        "CallableIssue.rand_invalid": {
            "name": "rand_invalid",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CallableIssue.is_valid": {
            "name": "is_valid",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CallableIssue.value_at": {
            "name": "value_at",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        }
    },
    "negmas-master/negmas/outcomes/cardinal_issue.py": {
        "CardinalIssue.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [],
                "name": []
            }
        }
    },
    "negmas-master/negmas/outcomes/categorical_issue.py": {
        "CategoricalIssue.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [],
                "name": []
            }
        },
        "CategoricalIssue.type": {
            "name": "type",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoricalIssue._to_xml_str": {
            "name": "_to_xml_str",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "indx": []
            }
        },
        "CategoricalIssue.is_continuous": {
            "name": "is_continuous",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoricalIssue.is_uncountable": {
            "name": "is_uncountable",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoricalIssue.all": {
            "name": "all",
            "location": 46,
            "return": [
                "Generator[(Any, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoricalIssue.rand_invalid": {
            "name": "rand_invalid",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/outcomes/common.py": {
        "check_one_at_most": {
            "name": "check_one_at_most",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "outcome_space": [],
                "issues": [],
                "outcomes": []
            }
        },
        "check_one_and_only": {
            "name": "check_one_and_only",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "outcome_space": [],
                "issues": [],
                "outcomes": []
            }
        },
        "os_or_none": {
            "name": "os_or_none",
            "location": 62,
            "return": [
                "(OutcomeSpace | None)"
            ],
            "arguments": {
                "outcome_space": [],
                "issues": [],
                "outcomes": []
            }
        },
        "ensure_os": {
            "name": "ensure_os",
            "location": 84,
            "return": [
                "OutcomeSpace"
            ],
            "arguments": {
                "outcome_space": [],
                "issues": [],
                "outcomes": []
            }
        }
    },
    "negmas-master/negmas/outcomes/contiguous_issue.py": {
        "ContiguousIssue.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "(int | tuple[(int, int)])"
                ],
                "name": [
                    "(str | None)"
                ]
            }
        },
        "ContiguousIssue._to_xml_str": {
            "name": "_to_xml_str",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "indx": []
            }
        },
        "ContiguousIssue.all": {
            "name": "all",
            "location": 45,
            "return": [
                "Generator[(int, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContiguousIssue.cardinality": {
            "name": "cardinality",
            "location": 49,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContiguousIssue.ordered_value_generator": {
            "name": "ordered_value_generator",
            "location": 52,
            "return": [
                "Generator[(int, None, None)]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "((int | float) | None)"
                ],
                "grid": [],
                "compact": [],
                "endpoints": []
            }
        },
        "ContiguousIssue.value_generator": {
            "name": "value_generator",
            "location": 60,
            "return": [
                "Generator[(int, None, None)]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "((int | float) | None)"
                ],
                "grid": [],
                "compact": [],
                "endpoints": []
            }
        },
        "ContiguousIssue.to_discrete": {
            "name": "to_discrete",
            "location": 70,
            "return": [
                "DiscreteIssue"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "(int | None)"
                ],
                "grid": [],
                "compact": [],
                "endpoints": []
            }
        },
        "ContiguousIssue.rand": {
            "name": "rand",
            "location": 83,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContiguousIssue.rand_outcomes": {
            "name": "rand_outcomes",
            "location": 87,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "with_replacement": [],
                "fail_if_not_enough": []
            }
        },
        "ContiguousIssue.rand_invalid": {
            "name": "rand_invalid",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContiguousIssue.is_continuous": {
            "name": "is_continuous",
            "location": 112,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContiguousIssue.value_at": {
            "name": "value_at",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "ContiguousIssue.contains": {
            "name": "contains",
            "location": 120,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "issue": [
                    "Issue"
                ]
            }
        }
    },
    "negmas-master/negmas/outcomes/continuous_issue.py": {
        "ContinuousIssue.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [],
                "name": [],
                "n_levels": []
            }
        },
        "ContinuousIssue._to_xml_str": {
            "name": "_to_xml_str",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "indx": []
            }
        },
        "ContinuousIssue.to_dict": {
            "name": "to_dict",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContinuousIssue.cardinality": {
            "name": "cardinality",
            "location": 40,
            "return": [
                "(int | float)"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContinuousIssue.type": {
            "name": "type",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContinuousIssue.is_continuous": {
            "name": "is_continuous",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContinuousIssue.is_uncountable": {
            "name": "is_uncountable",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContinuousIssue.rand": {
            "name": "rand",
            "location": 53,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContinuousIssue.ordered_value_generator": {
            "name": "ordered_value_generator",
            "location": 60,
            "return": [
                "Generator[(float, None, None)]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "((int | float) | None)"
                ],
                "grid": [],
                "compact": [],
                "endpoints": []
            }
        },
        "ContinuousIssue.value_generator": {
            "name": "value_generator",
            "location": 84,
            "return": [
                "Generator[(float, None, None)]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "((int | float) | None)"
                ],
                "grid": [],
                "compact": [],
                "endpoints": []
            }
        },
        "ContinuousIssue.rand_outcomes": {
            "name": "rand_outcomes",
            "location": 93,
            "return": [
                "list[float]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "with_replacement": [],
                "fail_if_not_enough": []
            }
        },
        "ContinuousIssue.rand_invalid": {
            "name": "rand_invalid",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContinuousIssue.all": {
            "name": "all",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContinuousIssue.value_at": {
            "name": "value_at",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "ContinuousIssue.contains": {
            "name": "contains",
            "location": 122,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "issue": [
                    "Issue"
                ]
            }
        }
    },
    "negmas-master/negmas/outcomes/infinite.py": {
        "CountableInfiniteIssue.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "tuple[((int | float), (int | float))]"
                ]
            }
        },
        "CountableInfiniteIssue.is_continuous": {
            "name": "is_continuous",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CountableInfiniteIssue.is_integer": {
            "name": "is_integer",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CountableInfiniteIssue.cardinality": {
            "name": "cardinality",
            "location": 53,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "CountableInfiniteIssue.rand_invalid": {
            "name": "rand_invalid",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CountableInfiniteIssue.value_at": {
            "name": "value_at",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "CountableInfiniteIssue.contains": {
            "name": "contains",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "issue": [
                    "Issue"
                ]
            }
        },
        "ContinuousInfiniteIssue.contains": {
            "name": "contains",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "issue": [
                    "Issue"
                ]
            }
        }
    },
    "negmas-master/negmas/outcomes/issue_ops.py": {
        "num_outcomes": {
            "name": "num_outcomes",
            "location": 43,
            "return": [
                "(int | float)"
            ],
            "arguments": {
                "issues": [
                    "Sequence[Issue]"
                ]
            }
        },
        "enumerate_discrete_issues": {
            "name": "enumerate_discrete_issues",
            "location": 56,
            "return": [
                "list[Outcome]"
            ],
            "arguments": {
                "issues": [
                    "Sequence[DiscreteIssue]"
                ]
            }
        },
        "sample_outcomes": {
            "name": "sample_outcomes",
            "location": 69,
            "return": [
                "list[Outcome]"
            ],
            "arguments": {
                "issues": [
                    "Sequence[Issue]"
                ],
                "n_outcomes": [
                    "(int | None)"
                ],
                "min_per_dim": [
                    "int"
                ],
                "expansion_policy": []
            }
        },
        "_sample_issues": {
            "name": "_sample_issues",
            "location": 206,
            "return": [
                "Iterable[Outcome]"
            ],
            "arguments": {
                "issues": [
                    "Sequence[Issue]"
                ],
                "n": [
                    "int"
                ],
                "with_replacement": [],
                "n_total": [],
                "old_values": [],
                "trial": [],
                "max_trials": []
            }
        },
        "sample_issues": {
            "name": "sample_issues",
            "location": 261,
            "return": [
                "Iterable[Outcome]"
            ],
            "arguments": {
                "issues": [
                    "Sequence[Issue]"
                ],
                "n_outcomes": [
                    "int"
                ],
                "with_replacement": [
                    "bool"
                ],
                "fail_if_not_enough": []
            }
        },
        "enumerate_issues": {
            "name": "enumerate_issues",
            "location": 321,
            "return": [
                "list[Outcome]"
            ],
            "arguments": {
                "issues": [
                    "Sequence[Issue]"
                ],
                "max_cardinality": [
                    "(int | None)"
                ]
            }
        },
        "issues_from_outcomes": {
            "name": "issues_from_outcomes",
            "location": 356,
            "return": [
                "tuple[DiscreteIssue]"
            ],
            "arguments": {
                "outcomes": [
                    "(Sequence[Outcome] | int)"
                ],
                "numeric_as_ranges": [
                    "bool"
                ],
                "issue_names": [
                    "(list[str] | None)"
                ]
            }
        },
        "issues_to_xml_str": {
            "name": "issues_to_xml_str",
            "location": 464,
            "return": [
                "str"
            ],
            "arguments": {
                "issues": [
                    "Sequence[Issue]"
                ]
            }
        },
        "issues_to_genius": {
            "name": "issues_to_genius",
            "location": 537,
            "return": [
                "None"
            ],
            "arguments": {
                "issues": [
                    "Sequence[Issue]"
                ],
                "file_name": [
                    "(PathLike | str)"
                ]
            }
        },
        "issues_from_xml_str": {
            "name": "issues_from_xml_str",
            "location": 584,
            "return": [
                "tuple[((Sequence[Issue] | None), (Sequence[str] | None))]"
            ],
            "arguments": {
                "xml_str": [
                    "str"
                ],
                "safe_parsing": [],
                "n_discretization": [
                    "(int | None)"
                ]
            }
        },
        "issues_from_genius": {
            "name": "issues_from_genius",
            "location": 735,
            "return": [
                "tuple[((Sequence[Issue] | None), (Sequence[str] | None))]"
            ],
            "arguments": {
                "file_name": [
                    "(PathLike | str)"
                ],
                "safe_parsing": [],
                "n_discretization": [
                    "(int | None)"
                ]
            }
        },
        "generate_issues": {
            "name": "generate_issues",
            "location": 779,
            "return": [
                "tuple[(Issue, ...)]"
            ],
            "arguments": {
                "params": [
                    "Sequence[((((int | list[str]) | tuple[(int, int)]) | Callable) | tuple[(float, float)])]"
                ],
                "counts": [
                    "(list[int] | None)"
                ],
                "names": [
                    "(list[str] | None)"
                ]
            }
        },
        "discretize_and_enumerate_issues": {
            "name": "discretize_and_enumerate_issues",
            "location": 818,
            "return": [
                "list[Outcome]"
            ],
            "arguments": {
                "issues": [
                    "Iterable[Issue]"
                ],
                "n_discretization": [
                    "(int | None)"
                ],
                "max_cardinality": [
                    "(int | None)"
                ]
            }
        },
        "combine_issues": {
            "name": "combine_issues",
            "location": 841,
            "return": [
                "(Issue | None)"
            ],
            "arguments": {
                "issues": [
                    "Sequence[Issue]"
                ],
                "name": [
                    "(str | None)"
                ],
                "keep_value_names": [],
                "issue_sep": [],
                "value_sep": []
            }
        },
        "issues_from_outcomes.convert_type": {
            "name": "convert_type",
            "location": 386,
            "return": [],
            "arguments": {
                "v": [],
                "old": [],
                "values": []
            }
        }
    },
    "negmas-master/negmas/outcomes/ordinal_issue.py": {
        "generate_values": {
            "name": "generate_values",
            "location": 15,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "OrdinalIssue.ordered_value_generator": {
            "name": "ordered_value_generator",
            "location": 31,
            "return": [
                "Generator[(Any, None, None)]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "grid": [],
                "compact": [],
                "endpoints": []
            }
        },
        "DiscreteOrdinalIssue.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [],
                "name": []
            }
        },
        "DiscreteOrdinalIssue._to_xml_str": {
            "name": "_to_xml_str",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "indx": []
            }
        },
        "DiscreteOrdinalIssue.all": {
            "name": "all",
            "location": 77,
            "return": [
                "Generator[(Any, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiscreteOrdinalIssue.rand_invalid": {
            "name": "rand_invalid",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscreteOrdinalIssue.ordered_value_generator": {
            "name": "ordered_value_generator",
            "location": 91,
            "return": [
                "Generator[(Any, None, None)]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "grid": [],
                "compact": [],
                "endpoints": []
            }
        }
    },
    "negmas-master/negmas/outcomes/outcome_ops.py": {
        "_is_single": {
            "name": "_is_single",
            "location": 35,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "outcome2dict": {
            "name": "outcome2dict",
            "location": 51,
            "return": [
                "(dict[(str, Any)] | None)"
            ],
            "arguments": {
                "outcome": [
                    "(Outcome | None)"
                ],
                "issues": [
                    "Sequence[(str | Issue)]"
                ]
            }
        },
        "dict2outcome": {
            "name": "dict2outcome",
            "location": 109,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "d": [
                    "(dict[(str, Any)] | None)"
                ],
                "issues": [
                    "list[(str | Issue)]"
                ]
            }
        },
        "generalized_minkowski_distance": {
            "name": "generalized_minkowski_distance",
            "location": 131,
            "return": [
                "float"
            ],
            "arguments": {
                "a": [
                    "Outcome"
                ],
                "b": [
                    "Outcome"
                ],
                "outcome_space": [
                    "(OutcomeSpace | None)"
                ]
            }
        },
        "min_dist": {
            "name": "min_dist",
            "location": 206,
            "return": [
                "float"
            ],
            "arguments": {
                "test_outcome": [
                    "Outcome"
                ],
                "outcomes": [
                    "Sequence[Outcome]"
                ],
                "outcome_space": [
                    "(OutcomeSpace | None)"
                ],
                "distance_fun": [
                    "DistanceFun"
                ]
            }
        },
        "outcome_is_valid": {
            "name": "outcome_is_valid",
            "location": 233,
            "return": [
                "bool"
            ],
            "arguments": {
                "outcome": [
                    "Outcome"
                ],
                "issues": [
                    "Iterable[Issue]"
                ]
            }
        },
        "outcome_types_are_ok": {
            "name": "outcome_types_are_ok",
            "location": 289,
            "return": [
                "bool"
            ],
            "arguments": {
                "outcome": [
                    "Outcome"
                ],
                "issues": [
                    "Iterable[Issue]"
                ]
            }
        },
        "cast_value_types": {
            "name": "cast_value_types",
            "location": 303,
            "return": [
                "Outcome"
            ],
            "arguments": {
                "outcome": [
                    "Outcome"
                ],
                "issues": [
                    "Iterable[Issue]"
                ]
            }
        },
        "outcome_is_complete": {
            "name": "outcome_is_complete",
            "location": 317,
            "return": [
                "bool"
            ],
            "arguments": {
                "outcome": [
                    "Outcome"
                ],
                "issues": [
                    "Sequence[Issue]"
                ]
            }
        },
        "outcome_in_range": {
            "name": "outcome_in_range",
            "location": 377,
            "return": [
                "bool"
            ],
            "arguments": {
                "outcome": [
                    "Outcome"
                ],
                "outcome_range": [
                    "OutcomeRange"
                ]
            }
        }
    },
    "negmas-master/negmas/outcomes/outcome_space.py": {
        "make_os": {
            "name": "make_os",
            "location": 49,
            "return": [
                "CartesianOutcomeSpace"
            ],
            "arguments": {
                "issues": [
                    "(Sequence[Issue] | None)"
                ],
                "outcomes": [
                    "(Sequence[Outcome] | None)"
                ],
                "name": [
                    "(str | None)"
                ]
            }
        },
        "CartesianOutcomeSpace.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CartesianOutcomeSpace.contains_issue": {
            "name": "contains_issue",
            "location": 97,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "Issue"
                ]
            }
        },
        "CartesianOutcomeSpace.is_valid": {
            "name": "is_valid",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ]
            }
        },
        "CartesianOutcomeSpace.is_discrete": {
            "name": "is_discrete",
            "location": 104,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CartesianOutcomeSpace.is_finite": {
            "name": "is_finite",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CartesianOutcomeSpace.contains_os": {
            "name": "contains_os",
            "location": 112,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "OutcomeSpace"
                ]
            }
        },
        "CartesianOutcomeSpace.to_dict": {
            "name": "to_dict",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CartesianOutcomeSpace.from_dict": {
            "name": "from_dict",
            "location": 139,
            "return": [],
            "arguments": {
                "cls": [],
                "d": []
            }
        },
        "CartesianOutcomeSpace.issue_names": {
            "name": "issue_names",
            "location": 143,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CartesianOutcomeSpace.cardinality": {
            "name": "cardinality",
            "location": 148,
            "return": [
                "(int | float)"
            ],
            "arguments": {
                "self": []
            }
        },
        "CartesianOutcomeSpace.is_compact": {
            "name": "is_compact",
            "location": 152,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CartesianOutcomeSpace.is_all_continuous": {
            "name": "is_all_continuous",
            "location": 156,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CartesianOutcomeSpace.is_not_discrete": {
            "name": "is_not_discrete",
            "location": 160,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CartesianOutcomeSpace.is_numeric": {
            "name": "is_numeric",
            "location": 164,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CartesianOutcomeSpace.is_integer": {
            "name": "is_integer",
            "location": 168,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CartesianOutcomeSpace.is_float": {
            "name": "is_float",
            "location": 172,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CartesianOutcomeSpace.to_discrete": {
            "name": "to_discrete",
            "location": 176,
            "return": [
                "DiscreteCartesianOutcomeSpace"
            ],
            "arguments": {
                "self": [],
                "levels": [
                    "(int | float)"
                ],
                "max_cardinality": [
                    "(int | float)"
                ]
            }
        },
        "CartesianOutcomeSpace.from_xml_str": {
            "name": "from_xml_str",
            "location": 206,
            "return": [
                "CartesianOutcomeSpace"
            ],
            "arguments": {
                "cls": [],
                "xml_str": [
                    "str"
                ],
                "safe_parsing": [],
                "name": []
            }
        },
        "CartesianOutcomeSpace.from_outcomes": {
            "name": "from_outcomes",
            "location": 222,
            "return": [
                "DiscreteCartesianOutcomeSpace"
            ],
            "arguments": {
                "outcomes": [
                    "list[Outcome]"
                ],
                "numeric_as_ranges": [
                    "bool"
                ],
                "issue_names": [
                    "(list[str] | None)"
                ],
                "name": [
                    "(str | None)"
                ]
            }
        },
        "CartesianOutcomeSpace.to_xml_str": {
            "name": "to_xml_str",
            "location": 232,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CartesianOutcomeSpace.are_types_ok": {
            "name": "are_types_ok",
            "location": 235,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ]
            }
        },
        "CartesianOutcomeSpace.ensure_correct_types": {
            "name": "ensure_correct_types",
            "location": 239,
            "return": [
                "Outcome"
            ],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ]
            }
        },
        "CartesianOutcomeSpace.sample": {
            "name": "sample",
            "location": 243,
            "return": [
                "Iterable[Outcome]"
            ],
            "arguments": {
                "self": [],
                "n_outcomes": [
                    "int"
                ],
                "with_replacement": [
                    "bool"
                ],
                "fail_if_not_enough": []
            }
        },
        "CartesianOutcomeSpace.cardinality_if_discretized": {
            "name": "cardinality_if_discretized",
            "location": 253,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "levels": [
                    "int"
                ],
                "max_cardinality": [
                    "(int | float)"
                ]
            }
        },
        "CartesianOutcomeSpace.to_largest_discrete": {
            "name": "to_largest_discrete",
            "location": 263,
            "return": [
                "DiscreteCartesianOutcomeSpace"
            ],
            "arguments": {
                "self": [],
                "levels": [
                    "int"
                ],
                "max_cardinality": [
                    "(int | float)"
                ]
            }
        },
        "CartesianOutcomeSpace.enumerate_or_sample": {
            "name": "enumerate_or_sample",
            "location": 275,
            "return": [
                "Iterable[Outcome]"
            ],
            "arguments": {
                "self": [],
                "levels": [
                    "(int | float)"
                ],
                "max_cardinality": [
                    "(int | float)"
                ]
            }
        },
        "CartesianOutcomeSpace.to_single_issue": {
            "name": "to_single_issue",
            "location": 301,
            "return": [
                "DiscreteCartesianOutcomeSpace"
            ],
            "arguments": {
                "self": [],
                "numeric": [],
                "stringify": [],
                "levels": [
                    "int"
                ],
                "max_cardinality": [
                    "(int | float)"
                ]
            }
        },
        "CartesianOutcomeSpace.__contains__": {
            "name": "__contains__",
            "location": 324,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "DiscreteCartesianOutcomeSpace.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 352,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscreteCartesianOutcomeSpace.cardinality": {
            "name": "cardinality",
            "location": 360,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiscreteCartesianOutcomeSpace.cardinality_if_discretized": {
            "name": "cardinality_if_discretized",
            "location": 363,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "levels": [
                    "int"
                ],
                "max_cardinality": [
                    "(int | float)"
                ]
            }
        },
        "DiscreteCartesianOutcomeSpace.enumerate": {
            "name": "enumerate",
            "location": 368,
            "return": [
                "Iterable[Outcome]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiscreteCartesianOutcomeSpace.limit_cardinality": {
            "name": "limit_cardinality",
            "location": 373,
            "return": [
                "DiscreteCartesianOutcomeSpace"
            ],
            "arguments": {
                "self": [],
                "max_cardinality": [
                    "(int | float)"
                ],
                "levels": [
                    "(int | float)"
                ]
            }
        },
        "DiscreteCartesianOutcomeSpace.is_discrete": {
            "name": "is_discrete",
            "location": 434,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiscreteCartesianOutcomeSpace.to_discrete": {
            "name": "to_discrete",
            "location": 438,
            "return": [
                "DiscreteOutcomeSpace"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiscreteCartesianOutcomeSpace.to_single_issue": {
            "name": "to_single_issue",
            "location": 441,
            "return": [
                "DiscreteCartesianOutcomeSpace"
            ],
            "arguments": {
                "self": [],
                "numeric": [],
                "stringify": []
            }
        },
        "DiscreteCartesianOutcomeSpace.sample": {
            "name": "sample",
            "location": 473,
            "return": [
                "Iterable[Outcome]"
            ],
            "arguments": {
                "self": [],
                "n_outcomes": [
                    "int"
                ],
                "with_replacement": [
                    "bool"
                ],
                "fail_if_not_enough": []
            }
        },
        "DiscreteCartesianOutcomeSpace.__iter__": {
            "name": "__iter__",
            "location": 497,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscreteCartesianOutcomeSpace.__len__": {
            "name": "__len__",
            "location": 500,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiscreteCartesianOutcomeSpace.limit_cardinality._reduce_total_cardinality": {
            "name": "_reduce_total_cardinality",
            "location": 393,
            "return": [],
            "arguments": {
                "new_levels": [],
                "max_cardinality": [],
                "new_cardinality": []
            }
        }
    },
    "negmas-master/negmas/outcomes/protocols.py": {
        "OutcomeSpace.is_valid": {
            "name": "is_valid",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ]
            }
        },
        "OutcomeSpace.are_types_ok": {
            "name": "are_types_ok",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ]
            }
        },
        "OutcomeSpace.ensure_correct_types": {
            "name": "ensure_correct_types",
            "location": 39,
            "return": [
                "Outcome"
            ],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ]
            }
        },
        "OutcomeSpace.cardinality": {
            "name": "cardinality",
            "location": 44,
            "return": [
                "(int | float)"
            ],
            "arguments": {
                "self": []
            }
        },
        "OutcomeSpace.is_numeric": {
            "name": "is_numeric",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OutcomeSpace.is_integer": {
            "name": "is_integer",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OutcomeSpace.is_float": {
            "name": "is_float",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OutcomeSpace.to_discrete": {
            "name": "to_discrete",
            "location": 60,
            "return": [
                "DiscreteOutcomeSpace"
            ],
            "arguments": {
                "self": [],
                "levels": [
                    "(int | float)"
                ],
                "max_cardinality": [
                    "(int | float)"
                ]
            }
        },
        "OutcomeSpace.sample": {
            "name": "sample",
            "location": 76,
            "return": [
                "Iterable[Outcome]"
            ],
            "arguments": {
                "self": [],
                "n_outcomes": [
                    "int"
                ],
                "with_replacement": [
                    "bool"
                ],
                "fail_if_not_enough": []
            }
        },
        "OutcomeSpace.to_largest_discrete": {
            "name": "to_largest_discrete",
            "location": 85,
            "return": [
                "DiscreteOutcomeSpace"
            ],
            "arguments": {
                "self": [],
                "levels": [
                    "int"
                ],
                "max_cardinality": [
                    "(int | float)"
                ]
            }
        },
        "OutcomeSpace.cardinality_if_discretized": {
            "name": "cardinality_if_discretized",
            "location": 90,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "levels": [
                    "int"
                ],
                "max_cardinality": [
                    "(int | float)"
                ]
            }
        },
        "OutcomeSpace.enumerate_or_sample": {
            "name": "enumerate_or_sample",
            "location": 100,
            "return": [
                "Iterable[Outcome]"
            ],
            "arguments": {
                "self": [],
                "levels": [
                    "(int | float)"
                ],
                "max_cardinality": [
                    "(int | float)"
                ]
            }
        },
        "OutcomeSpace.is_discrete": {
            "name": "is_discrete",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OutcomeSpace.is_finite": {
            "name": "is_finite",
            "location": 112,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OutcomeSpace.__contains__": {
            "name": "__contains__",
            "location": 116,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "((Outcome | OutcomeSpace) | Issue)"
                ]
            }
        },
        "DiscreteOutcomeSpace.cardinality": {
            "name": "cardinality",
            "location": 131,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiscreteOutcomeSpace.enumerate": {
            "name": "enumerate",
            "location": 135,
            "return": [
                "Iterable[Outcome]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiscreteOutcomeSpace.limit_cardinality": {
            "name": "limit_cardinality",
            "location": 141,
            "return": [
                "DiscreteOutcomeSpace"
            ],
            "arguments": {
                "self": [],
                "max_cardinality": [
                    "(int | float)"
                ],
                "levels": [
                    "(int | float)"
                ]
            }
        },
        "DiscreteOutcomeSpace.to_single_issue": {
            "name": "to_single_issue",
            "location": 155,
            "return": [
                "CartesianOutcomeSpace"
            ],
            "arguments": {
                "self": [],
                "numeric": [
                    "bool"
                ],
                "stringify": [
                    "bool"
                ]
            }
        },
        "DiscreteOutcomeSpace.sample": {
            "name": "sample",
            "location": 160,
            "return": [
                "Iterable[Outcome]"
            ],
            "arguments": {
                "self": [],
                "n_outcomes": [
                    "int"
                ],
                "with_replacement": [
                    "bool"
                ],
                "fail_if_not_enough": []
            }
        },
        "DiscreteOutcomeSpace.is_discrete": {
            "name": "is_discrete",
            "location": 168,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiscreteOutcomeSpace.to_discrete": {
            "name": "to_discrete",
            "location": 172,
            "return": [
                "DiscreteOutcomeSpace"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiscreteOutcomeSpace.__iter__": {
            "name": "__iter__",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscreteOutcomeSpace.__len__": {
            "name": "__len__",
            "location": 178,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/outcomes/range_issue.py": {
        "RangeIssue.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [],
                "name": []
            }
        },
        "RangeIssue.is_valid": {
            "name": "is_valid",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        }
    },
    "negmas-master/negmas/outcomes/__init__.py": {},
    "negmas-master/negmas/preferences/base.py": {},
    "negmas-master/negmas/preferences/base_ufun.py": {
        "BaseUtilityFunction.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseUtilityFunction.eval": {
            "name": "eval",
            "location": 60,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "BaseUtilityFunction.to_stationary": {
            "name": "to_stationary",
            "location": 63,
            "return": [
                "T@@BaseUtilityFunction@@"
            ],
            "arguments": {
                "self": [
                    "T@@BaseUtilityFunction@@"
                ]
            }
        },
        "BaseUtilityFunction.extreme_outcomes": {
            "name": "extreme_outcomes",
            "location": 68,
            "return": [
                "tuple[(Outcome, Outcome)]"
            ],
            "arguments": {
                "self": [],
                "outcome_space": [
                    "(OutcomeSpace | None)"
                ],
                "issues": [
                    "(Iterable[Issue] | None)"
                ],
                "outcomes": [
                    "(Iterable[Outcome] | None)"
                ],
                "max_cardinality": []
            }
        },
        "BaseUtilityFunction.minmax": {
            "name": "minmax",
            "location": 97,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "outcome_space": [
                    "(OutcomeSpace | None)"
                ],
                "issues": [
                    "(list[Issue] | None)"
                ],
                "outcomes": [
                    "(list[Outcome] | None)"
                ],
                "max_cardinality": [],
                "above_reserve": []
            }
        },
        "BaseUtilityFunction.reserved_distribution": {
            "name": "reserved_distribution",
            "location": 137,
            "return": [
                "Distribution"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUtilityFunction.max": {
            "name": "max",
            "location": 140,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUtilityFunction.min": {
            "name": "min",
            "location": 144,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUtilityFunction.best": {
            "name": "best",
            "location": 148,
            "return": [
                "Outcome"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUtilityFunction.worst": {
            "name": "worst",
            "location": 152,
            "return": [
                "Outcome"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUtilityFunction.eval_normalized": {
            "name": "eval_normalized",
            "location": 156,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "(Outcome | None)"
                ],
                "above_reserve": [
                    "bool"
                ],
                "expected_limits": [
                    "bool"
                ]
            }
        },
        "BaseUtilityFunction.invert": {
            "name": "invert",
            "location": 198,
            "return": [
                "InverseUFun"
            ],
            "arguments": {
                "self": [],
                "inverter": [
                    "(type[InverseUFun] | None)"
                ]
            }
        },
        "BaseUtilityFunction.is_volatile": {
            "name": "is_volatile",
            "location": 215,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUtilityFunction.is_session_dependent": {
            "name": "is_session_dependent",
            "location": 218,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUtilityFunction.is_state_dependent": {
            "name": "is_state_dependent",
            "location": 221,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUtilityFunction.scale_by": {
            "name": "scale_by",
            "location": 224,
            "return": [
                "(WeightedUtilityFunction | T)"
            ],
            "arguments": {
                "self": [
                    "T@@BaseUtilityFunction@@"
                ],
                "scale": [
                    "float"
                ],
                "scale_reserved": []
            }
        },
        "BaseUtilityFunction.scale_min_for": {
            "name": "scale_min_for",
            "location": 239,
            "return": [
                "T@@BaseUtilityFunction@@"
            ],
            "arguments": {
                "self": [
                    "T@@BaseUtilityFunction@@"
                ],
                "to": [
                    "float"
                ],
                "outcome_space": [
                    "(OutcomeSpace | None)"
                ],
                "issues": [
                    "(list[Issue] | None)"
                ],
                "outcomes": [
                    "(list[Outcome] | None)"
                ],
                "rng": [
                    "(tuple[(float, float)] | None)"
                ]
            }
        },
        "BaseUtilityFunction.scale_min": {
            "name": "scale_min",
            "location": 254,
            "return": [
                "T@@BaseUtilityFunction@@"
            ],
            "arguments": {
                "self": [
                    "T@@BaseUtilityFunction@@"
                ],
                "to": [
                    "float"
                ],
                "rng": [
                    "(tuple[(float, float)] | None)"
                ]
            }
        },
        "BaseUtilityFunction.scale_max_for": {
            "name": "scale_max_for",
            "location": 257,
            "return": [
                "T@@BaseUtilityFunction@@"
            ],
            "arguments": {
                "self": [
                    "T@@BaseUtilityFunction@@"
                ],
                "to": [
                    "float"
                ],
                "outcome_space": [
                    "(OutcomeSpace | None)"
                ],
                "issues": [
                    "(list[Issue] | None)"
                ],
                "outcomes": [
                    "(list[Outcome] | None)"
                ],
                "rng": [
                    "(tuple[(float, float)] | None)"
                ]
            }
        },
        "BaseUtilityFunction.scale_max": {
            "name": "scale_max",
            "location": 272,
            "return": [
                "T@@BaseUtilityFunction@@"
            ],
            "arguments": {
                "self": [
                    "T@@BaseUtilityFunction@@"
                ],
                "to": [
                    "float"
                ],
                "rng": [
                    "(tuple[(float, float)] | None)"
                ]
            }
        },
        "BaseUtilityFunction.normalize_for": {
            "name": "normalize_for",
            "location": 275,
            "return": [
                "(T | ConstUtilityFunction)"
            ],
            "arguments": {
                "self": [
                    "T@@BaseUtilityFunction@@"
                ],
                "to": [
                    "tuple[(float, float)]"
                ],
                "outcome_space": [
                    "(OutcomeSpace | None)"
                ]
            }
        },
        "BaseUtilityFunction.normalize": {
            "name": "normalize",
            "location": 306,
            "return": [
                "(T | ConstUtilityFunction)"
            ],
            "arguments": {
                "self": [
                    "T@@BaseUtilityFunction@@"
                ],
                "to": [
                    "tuple[(float, float)]"
                ]
            }
        },
        "BaseUtilityFunction.shift_by": {
            "name": "shift_by",
            "location": 330,
            "return": [
                "(WeightedUtilityFunction | T)"
            ],
            "arguments": {
                "self": [
                    "T@@BaseUtilityFunction@@"
                ],
                "offset": [
                    "float"
                ],
                "shift_reserved": []
            }
        },
        "BaseUtilityFunction.shift_min_for": {
            "name": "shift_min_for",
            "location": 344,
            "return": [
                "T@@BaseUtilityFunction@@"
            ],
            "arguments": {
                "self": [
                    "T@@BaseUtilityFunction@@"
                ],
                "to": [
                    "float"
                ],
                "outcome_space": [
                    "(OutcomeSpace | None)"
                ],
                "issues": [
                    "(list[Issue] | None)"
                ],
                "outcomes": [
                    "(list[Outcome] | None)"
                ],
                "rng": [
                    "(tuple[(float, float)] | None)"
                ]
            }
        },
        "BaseUtilityFunction.shift_max_for": {
            "name": "shift_max_for",
            "location": 359,
            "return": [
                "T@@BaseUtilityFunction@@"
            ],
            "arguments": {
                "self": [
                    "T@@BaseUtilityFunction@@"
                ],
                "to": [
                    "float"
                ],
                "outcome_space": [
                    "(OutcomeSpace | None)"
                ],
                "issues": [
                    "(list[Issue] | None)"
                ],
                "outcomes": [
                    "(list[Outcome] | None)"
                ],
                "rng": [
                    "(tuple[(float, float)] | None)"
                ]
            }
        },
        "BaseUtilityFunction._do_rank": {
            "name": "_do_rank",
            "location": 374,
            "return": [],
            "arguments": {
                "self": [],
                "vals": [],
                "descending": []
            }
        },
        "BaseUtilityFunction.argrank_with_weights": {
            "name": "argrank_with_weights",
            "location": 386,
            "return": [
                "list[tuple[(list[(Outcome | None)], float)]]"
            ],
            "arguments": {
                "self": [],
                "outcomes": [
                    "list[(Outcome | None)]"
                ],
                "descending": []
            }
        },
        "BaseUtilityFunction.argrank": {
            "name": "argrank",
            "location": 403,
            "return": [
                "list[list[(Outcome | None)]]"
            ],
            "arguments": {
                "self": [],
                "outcomes": [
                    "list[(Outcome | None)]"
                ],
                "descending": []
            }
        },
        "BaseUtilityFunction.rank_with_weights": {
            "name": "rank_with_weights",
            "location": 416,
            "return": [
                "list[tuple[(list[(Outcome | None)], float)]]"
            ],
            "arguments": {
                "self": [],
                "outcomes": [
                    "list[(Outcome | None)]"
                ],
                "descending": []
            }
        },
        "BaseUtilityFunction.rank": {
            "name": "rank",
            "location": 433,
            "return": [
                "list[list[(Outcome | None)]]"
            ],
            "arguments": {
                "self": [],
                "outcomes": [
                    "list[(Outcome | None)]"
                ],
                "descending": []
            }
        },
        "BaseUtilityFunction.eu": {
            "name": "eu",
            "location": 446,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "(Outcome | None)"
                ]
            }
        },
        "BaseUtilityFunction.to_crisp": {
            "name": "to_crisp",
            "location": 452,
            "return": [
                "UtilityFunction"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUtilityFunction.to_prob": {
            "name": "to_prob",
            "location": 457,
            "return": [
                "ProbUtilityFunction"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUtilityFunction.to_dict": {
            "name": "to_dict",
            "location": 462,
            "return": [
                "dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUtilityFunction.from_dict": {
            "name": "from_dict",
            "location": 473,
            "return": [],
            "arguments": {
                "cls": [],
                "d": []
            }
        },
        "BaseUtilityFunction.sample_outcome_with_utility": {
            "name": "sample_outcome_with_utility",
            "location": 478,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "rng": [
                    "tuple[(float, float)]"
                ],
                "outcome_space": [
                    "(OutcomeSpace | None)"
                ],
                "issues": [
                    "(list[Issue] | None)"
                ],
                "outcomes": [
                    "(list[Outcome] | None)"
                ],
                "n_trials": [
                    "int"
                ]
            }
        },
        "BaseUtilityFunction.from_xml_str": {
            "name": "from_xml_str",
            "location": 521,
            "return": [
                "tuple[((BaseUtilityFunction | None), (float | None))]"
            ],
            "arguments": {
                "cls": [],
                "xml_str": [
                    "str"
                ],
                "issues": [
                    "Iterable[Issue]"
                ],
                "safe_parsing": [],
                "ignore_discount": [],
                "ignore_reserved": [],
                "name": [
                    "(str | None)"
                ]
            }
        },
        "BaseUtilityFunction.from_genius": {
            "name": "from_genius",
            "location": 821,
            "return": [
                "tuple[((BaseUtilityFunction | None), (float | None))]"
            ],
            "arguments": {
                "cls": [],
                "file_name": [
                    "(PathLike | str)"
                ]
            }
        },
        "BaseUtilityFunction.to_xml_str": {
            "name": "to_xml_str",
            "location": 861,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "issues": [
                    "(Iterable[Issue] | None)"
                ],
                "discount_factor": []
            }
        },
        "BaseUtilityFunction.to_genius": {
            "name": "to_genius",
            "location": 897,
            "return": [],
            "arguments": {
                "self": [],
                "file_name": [
                    "(PathLike | str)"
                ],
                "issues": [
                    "(Iterable[Issue] | None)"
                ]
            }
        },
        "BaseUtilityFunction.difference_prob": {
            "name": "difference_prob",
            "location": 936,
            "return": [
                "Distribution"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "(Outcome | None)"
                ],
                "second": [
                    "(Outcome | None)"
                ]
            }
        },
        "BaseUtilityFunction.is_not_worse": {
            "name": "is_not_worse",
            "location": 949,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "(Outcome | None)"
                ],
                "second": [
                    "(Outcome | None)"
                ]
            }
        },
        "BaseUtilityFunction.difference": {
            "name": "difference",
            "location": 952,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "(Outcome | None)"
                ],
                "second": [
                    "(Outcome | None)"
                ]
            }
        },
        "BaseUtilityFunction.__call__": {
            "name": "__call__",
            "location": 958,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "(Outcome | None)"
                ]
            }
        },
        "_General.is_session_dependent": {
            "name": "is_session_dependent",
            "location": 989,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_General.is_volatile": {
            "name": "is_volatile",
            "location": 992,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_General.is_state_dependent": {
            "name": "is_state_dependent",
            "location": 995,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_General.is_stationary": {
            "name": "is_stationary",
            "location": 998,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUtilityFunction.from_xml_str._get_hyperrects": {
            "name": "_get_hyperrects",
            "location": 601,
            "return": [],
            "arguments": {
                "ufun": [],
                "max_utility": [],
                "utiltype": []
            }
        }
    },
    "negmas-master/negmas/preferences/complex.py": {
        "_DependenceMixin.is_session_dependent": {
            "name": "is_session_dependent",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_DependenceMixin.is_stationary": {
            "name": "is_stationary",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_DependenceMixin.is_volatile": {
            "name": "is_volatile",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_DependenceMixin.is_state_dependent": {
            "name": "is_state_dependent",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WeightedUtilityFunction.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "ufuns": [
                    "Iterable[BaseUtilityFunction]"
                ],
                "weights": [
                    "(Iterable[float] | None)"
                ]
            }
        },
        "WeightedUtilityFunction.to_stationary": {
            "name": "to_stationary",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WeightedUtilityFunction.random": {
            "name": "random",
            "location": 65,
            "return": [
                "WeightedUtilityFunction"
            ],
            "arguments": {
                "cls": [],
                "outcome_space": [],
                "reserved_value": [],
                "normalized": [],
                "n_ufuns": [],
                "ufun_types": []
            }
        },
        "WeightedUtilityFunction.eval": {
            "name": "eval",
            "location": 89,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "WeightedUtilityFunction.to_dict": {
            "name": "to_dict",
            "location": 117,
            "return": [
                "dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WeightedUtilityFunction.from_dict": {
            "name": "from_dict",
            "location": 127,
            "return": [],
            "arguments": {
                "cls": [],
                "d": [
                    "dict[(str, Any)]"
                ]
            }
        },
        "ComplexNonlinearUtilityFunction.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "ufuns": [
                    "Iterable[BaseUtilityFunction]"
                ],
                "combination_function": []
            }
        },
        "ComplexNonlinearUtilityFunction.to_stationary": {
            "name": "to_stationary",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ComplexNonlinearUtilityFunction.random": {
            "name": "random",
            "location": 162,
            "return": [
                "ComplexNonlinearUtilityFunction"
            ],
            "arguments": {
                "cls": [],
                "outcome_space": [],
                "reserved_value": [],
                "normalized": [],
                "n_ufuns": [],
                "ufun_types": []
            }
        },
        "ComplexNonlinearUtilityFunction.to_dict": {
            "name": "to_dict",
            "location": 186,
            "return": [
                "dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNonlinearUtilityFunction.from_dict": {
            "name": "from_dict",
            "location": 195,
            "return": [],
            "arguments": {
                "cls": [],
                "d": [
                    "dict[(str, Any)]"
                ]
            }
        },
        "ComplexNonlinearUtilityFunction.eval": {
            "name": "eval",
            "location": 201,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "Outcome"
                ]
            }
        }
    },
    "negmas-master/negmas/preferences/crisp_ufun.py": {
        "UtilityFunction.eval": {
            "name": "eval",
            "location": 28,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "UtilityFunction.to_crisp": {
            "name": "to_crisp",
            "location": 31,
            "return": [
                "UtilityFunction"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilityFunction.generate_bilateral": {
            "name": "generate_bilateral",
            "location": 35,
            "return": [
                "tuple[(UtilityFunction, UtilityFunction)]"
            ],
            "arguments": {
                "cls": [],
                "outcomes": [
                    "(int | list[Outcome])"
                ],
                "conflict_level": [
                    "float"
                ],
                "conflict_delta": []
            }
        },
        "UtilityFunction.generate_random_bilateral": {
            "name": "generate_random_bilateral",
            "location": 102,
            "return": [
                "tuple[(UtilityFunction, UtilityFunction)]"
            ],
            "arguments": {
                "cls": [],
                "outcomes": [
                    "(int | list[Outcome])"
                ]
            }
        },
        "UtilityFunction.generate_random": {
            "name": "generate_random",
            "location": 133,
            "return": [
                "list[UtilityFunction]"
            ],
            "arguments": {
                "cls": [],
                "n": [
                    "int"
                ],
                "outcomes": [
                    "(int | list[Outcome])"
                ],
                "normalized": [
                    "bool"
                ]
            }
        },
        "UtilityFunction.is_not_worse": {
            "name": "is_not_worse",
            "location": 163,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "Outcome"
                ],
                "second": [
                    "Outcome"
                ]
            }
        },
        "UtilityFunction.difference_prob": {
            "name": "difference_prob",
            "location": 166,
            "return": [
                "Distribution"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "Outcome"
                ],
                "second": [
                    "Outcome"
                ]
            }
        },
        "UtilityFunction.minmax": {
            "name": "minmax",
            "location": 174,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "outcome_space": [
                    "(OutcomeSpace | None)"
                ],
                "issues": [
                    "((list[Issue] | tuple[Issue]) | None)"
                ],
                "outcomes": [
                    "((list[Outcome] | tuple[Outcome]) | None)"
                ],
                "max_cardinality": [],
                "above_reserve": []
            }
        },
        "UtilityFunction.eval_normalized": {
            "name": "eval_normalized",
            "location": 212,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "(Outcome | None)"
                ],
                "above_reserve": [
                    "bool"
                ],
                "expected_limits": [
                    "bool"
                ]
            }
        },
        "UtilityFunction.__call__": {
            "name": "__call__",
            "location": 250,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "(Outcome | None)"
                ]
            }
        },
        "UtilityFunction.__getitem__": {
            "name": "__getitem__",
            "location": 274,
            "return": [
                "(float | None)"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "(Outcome | None)"
                ]
            }
        },
        "CrispAdapter.__init__": {
            "name": "__init__",
            "location": 284,
            "return": [],
            "arguments": {
                "self": [],
                "prob": [
                    "BaseUtilityFunction"
                ]
            }
        },
        "CrispAdapter.eval": {
            "name": "eval",
            "location": 287,
            "return": [],
            "arguments": {
                "self": [],
                "offer": []
            }
        },
        "CrispAdapter.to_stationary": {
            "name": "to_stationary",
            "location": 290,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/preferences/discounted.py": {
        "DiscountedUtilityFunction.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "ufun": [
                    "BaseUtilityFunction"
                ]
            }
        },
        "DiscountedUtilityFunction.is_state_dependent": {
            "name": "is_state_dependent",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscountedUtilityFunction.to_stationary": {
            "name": "to_stationary",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpDiscountedUFun.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "ufun": [
                    "BaseUtilityFunction"
                ],
                "discount": [
                    "(float | None)"
                ],
                "factor": [
                    "(str | Callable[([MechanismState], float)])"
                ],
                "name": [],
                "reserved_value": [
                    "Value"
                ],
                "dynamic_reservation": [],
                "id": []
            }
        },
        "ExpDiscountedUFun.minmax": {
            "name": "minmax",
            "location": 63,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "outcome_space": [],
                "issues": [],
                "outcomes": [],
                "max_cardinality": []
            }
        },
        "ExpDiscountedUFun.shift_by": {
            "name": "shift_by",
            "location": 68,
            "return": [
                "ExpDiscountedUFun"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "float"
                ],
                "shift_reserved": [
                    "bool"
                ]
            }
        },
        "ExpDiscountedUFun.scale_by": {
            "name": "scale_by",
            "location": 81,
            "return": [
                "ExpDiscountedUFun"
            ],
            "arguments": {
                "self": [],
                "scale": [
                    "float"
                ],
                "scale_reserved": [
                    "bool"
                ]
            }
        },
        "ExpDiscountedUFun.to_dict": {
            "name": "to_dict",
            "location": 94,
            "return": [
                "dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpDiscountedUFun.from_dict": {
            "name": "from_dict",
            "location": 105,
            "return": [],
            "arguments": {
                "cls": [],
                "d": [
                    "dict[(str, Any)]"
                ]
            }
        },
        "ExpDiscountedUFun.random": {
            "name": "random",
            "location": 111,
            "return": [
                "ExpDiscountedUFun"
            ],
            "arguments": {
                "cls": [],
                "issues": [],
                "reserved_value": [],
                "normalized": [],
                "discount_range": [],
                "base_preferences_type": [
                    "(str | type[BaseUtilityFunction])"
                ]
            }
        },
        "ExpDiscountedUFun.eval_on_state": {
            "name": "eval_on_state",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "offer": [
                    "Outcome"
                ],
                "nmi": [
                    "(NegotiatorMechanismInterface | None)"
                ],
                "state": [
                    "(MechanismState | None)"
                ]
            }
        },
        "ExpDiscountedUFun.xml": {
            "name": "xml",
            "location": 164,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "issues": [
                    "list[Issue]"
                ]
            }
        },
        "ExpDiscountedUFun.base_type": {
            "name": "base_type",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpDiscountedUFun.type": {
            "name": "type",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpDiscountedUFun.__getattr__": {
            "name": "__getattr__",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "ExpDiscountedUFun.__str__": {
            "name": "__str__",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinDiscountedUFun.__init__": {
            "name": "__init__",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "ufun": [
                    "BaseUtilityFunction"
                ],
                "cost": [
                    "(float | None)"
                ],
                "factor": [
                    "(str | Callable[([MechanismState], float)])"
                ],
                "power": [
                    "(float | None)"
                ],
                "name": [],
                "reserved_value": [
                    "Value"
                ],
                "dynamic_reservation": [],
                "id": []
            }
        },
        "LinDiscountedUFun.to_dict": {
            "name": "to_dict",
            "location": 232,
            "return": [
                "dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinDiscountedUFun.from_dict": {
            "name": "from_dict",
            "location": 244,
            "return": [],
            "arguments": {
                "cls": [],
                "d": [
                    "dict[(str, Any)]"
                ]
            }
        },
        "LinDiscountedUFun.eval_on_state": {
            "name": "eval_on_state",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "offer": [
                    "Outcome"
                ],
                "nmi": [
                    "(NegotiatorMechanismInterface | None)"
                ],
                "state": [
                    "(MechanismState | None)"
                ]
            }
        },
        "LinDiscountedUFun.xml": {
            "name": "xml",
            "location": 266,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "issues": [
                    "list[Issue]"
                ]
            }
        },
        "LinDiscountedUFun.base_type": {
            "name": "base_type",
            "location": 287,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinDiscountedUFun.type": {
            "name": "type",
            "location": 291,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinDiscountedUFun.random": {
            "name": "random",
            "location": 295,
            "return": [
                "LinDiscountedUFun"
            ],
            "arguments": {
                "cls": [],
                "issues": [],
                "reserved_value": [],
                "normalized": [],
                "cost_range": [],
                "power_range": [],
                "base_preferences_type": [
                    "(type[BaseUtilityFunction] | str)"
                ]
            }
        },
        "LinDiscountedUFun.__getattr__": {
            "name": "__getattr__",
            "location": 327,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "LinDiscountedUFun.__str__": {
            "name": "__str__",
            "location": 330,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/preferences/inv_ufun.py": {
        "SamplingInverseUtilityFunction.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "ufun": [
                    "BaseUtilityFunction"
                ],
                "max_samples_per_call": [
                    "int"
                ]
            }
        },
        "SamplingInverseUtilityFunction.initialized": {
            "name": "initialized",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SamplingInverseUtilityFunction.ufun": {
            "name": "ufun",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SamplingInverseUtilityFunction.init": {
            "name": "init",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SamplingInverseUtilityFunction.all": {
            "name": "all",
            "location": 42,
            "return": [
                "list[Outcome]"
            ],
            "arguments": {
                "self": [],
                "rng": [
                    "(float | tuple[(float, float)])"
                ]
            }
        },
        "SamplingInverseUtilityFunction.some": {
            "name": "some",
            "location": 61,
            "return": [
                "list[Outcome]"
            ],
            "arguments": {
                "self": [],
                "rng": [
                    "(float | tuple[(float, float)])"
                ],
                "normalized": [
                    "bool"
                ],
                "n": [
                    "(int | None)"
                ]
            }
        },
        "SamplingInverseUtilityFunction.worst_in": {
            "name": "worst_in",
            "location": 92,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "rng": [
                    "(float | tuple[(float, float)])"
                ],
                "normalized": [
                    "bool"
                ]
            }
        },
        "SamplingInverseUtilityFunction.best_in": {
            "name": "best_in",
            "location": 105,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "rng": [
                    "(float | tuple[(float, float)])"
                ],
                "normalized": [
                    "bool"
                ]
            }
        },
        "SamplingInverseUtilityFunction.one_in": {
            "name": "one_in",
            "location": 118,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "rng": [
                    "(float | tuple[(float, float)])"
                ],
                "normalized": [
                    "float"
                ]
            }
        },
        "SamplingInverseUtilityFunction.minmax": {
            "name": "minmax",
            "location": 132,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SamplingInverseUtilityFunction.extreme_outcomes": {
            "name": "extreme_outcomes",
            "location": 141,
            "return": [
                "tuple[(Outcome, Outcome)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SamplingInverseUtilityFunction.__call__": {
            "name": "__call__",
            "location": 150,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "rng": [
                    "(float | tuple[(float, float)])"
                ],
                "normalized": [
                    "bool"
                ]
            }
        },
        "PresortingInverseUtilityFunction.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "ufun": [
                    "BaseUtilityFunction"
                ],
                "levels": [
                    "int"
                ],
                "max_cache_size": [
                    "int"
                ]
            }
        },
        "PresortingInverseUtilityFunction.initialized": {
            "name": "initialized",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PresortingInverseUtilityFunction.ufun": {
            "name": "ufun",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PresortingInverseUtilityFunction.reset": {
            "name": "reset",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PresortingInverseUtilityFunction.init": {
            "name": "init",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PresortingInverseUtilityFunction._normalize_range": {
            "name": "_normalize_range",
            "location": 218,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "rng": [
                    "(float | tuple[(float, float)])"
                ],
                "normalized": [
                    "bool"
                ]
            }
        },
        "PresortingInverseUtilityFunction.some": {
            "name": "some",
            "location": 233,
            "return": [
                "list[Outcome]"
            ],
            "arguments": {
                "self": [],
                "rng": [
                    "(float | tuple[(float, float)])"
                ],
                "normalized": [
                    "bool"
                ],
                "n": [
                    "(int | None)"
                ]
            }
        },
        "PresortingInverseUtilityFunction.all": {
            "name": "all",
            "location": 267,
            "return": [
                "list[Outcome]"
            ],
            "arguments": {
                "self": [],
                "rng": [
                    "(float | tuple[(float, float)])"
                ],
                "normalized": [
                    "bool"
                ]
            }
        },
        "PresortingInverseUtilityFunction.worst_in": {
            "name": "worst_in",
            "location": 293,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "rng": [
                    "(float | tuple[(float, float)])"
                ],
                "normalized": [
                    "bool"
                ]
            }
        },
        "PresortingInverseUtilityFunction.best_in": {
            "name": "best_in",
            "location": 311,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "rng": [
                    "(float | tuple[(float, float)])"
                ],
                "normalized": [
                    "bool"
                ]
            }
        },
        "PresortingInverseUtilityFunction.one_in": {
            "name": "one_in",
            "location": 326,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "rng": [
                    "(float | tuple[(float, float)])"
                ],
                "normalized": [
                    "bool"
                ]
            }
        },
        "PresortingInverseUtilityFunction.within_fractions": {
            "name": "within_fractions",
            "location": 334,
            "return": [
                "list[Outcome]"
            ],
            "arguments": {
                "self": [],
                "rng": [
                    "tuple[(float, float)]"
                ]
            }
        },
        "PresortingInverseUtilityFunction.within_indices": {
            "name": "within_indices",
            "location": 344,
            "return": [
                "list[Outcome]"
            ],
            "arguments": {
                "self": [],
                "rng": [
                    "tuple[(int, int)]"
                ]
            }
        },
        "PresortingInverseUtilityFunction.min": {
            "name": "min",
            "location": 356,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "PresortingInverseUtilityFunction.max": {
            "name": "max",
            "location": 366,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "PresortingInverseUtilityFunction.worst": {
            "name": "worst",
            "location": 376,
            "return": [
                "Outcome"
            ],
            "arguments": {
                "self": []
            }
        },
        "PresortingInverseUtilityFunction.best": {
            "name": "best",
            "location": 386,
            "return": [
                "Outcome"
            ],
            "arguments": {
                "self": []
            }
        },
        "PresortingInverseUtilityFunction.minmax": {
            "name": "minmax",
            "location": 396,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PresortingInverseUtilityFunction.extreme_outcomes": {
            "name": "extreme_outcomes",
            "location": 405,
            "return": [
                "tuple[(Outcome, Outcome)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PresortingInverseUtilityFunction.__call__": {
            "name": "__call__",
            "location": 414,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "rng": [
                    "(float | tuple[(float, float)])"
                ],
                "normalized": [
                    "bool"
                ]
            }
        }
    },
    "negmas-master/negmas/preferences/mixins.py": {
        "VolatileUFunMixin.is_volatile": {
            "name": "is_volatile",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionDependentUFunMixin.eval_on_session": {
            "name": "eval_on_session",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "offer": [
                    "Outcome"
                ],
                "nmi": [
                    "(NegotiatorMechanismInterface | None)"
                ]
            }
        },
        "SessionDependentUFunMixin.eval": {
            "name": "eval",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "SessionDependentUFunMixin.is_session_dependent": {
            "name": "is_session_dependent",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionDependentUFunMixin.is_state_dependent": {
            "name": "is_state_dependent",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StateDependentUFunMixin.eval_on_state": {
            "name": "eval_on_state",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "offer": [
                    "Outcome"
                ],
                "nmi": [
                    "(NegotiatorMechanismInterface | None)"
                ],
                "state": [
                    "(MechanismState | None)"
                ]
            }
        },
        "StateDependentUFunMixin.eval": {
            "name": "eval",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "StateDependentUFunMixin.is_session_dependent": {
            "name": "is_session_dependent",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StateDependentUFunMixin.is_state_dependent": {
            "name": "is_state_dependent",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StationaryMixin.is_session_dependent": {
            "name": "is_session_dependent",
            "location": 98,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StationaryMixin.is_volatile": {
            "name": "is_volatile",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StationaryMixin.is_state_dependent": {
            "name": "is_state_dependent",
            "location": 104,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StationaryMixin.is_stationary": {
            "name": "is_stationary",
            "location": 107,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StationaryMixin.to_stationary": {
            "name": "to_stationary",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/preferences/ops.py": {
        "make_discounted_ufun": {
            "name": "make_discounted_ufun",
            "location": 42,
            "return": [
                "(DiscountedUtilityFunction | UFunType)"
            ],
            "arguments": {
                "ufun": [
                    "UFunType@@UtilityFunction@@ProbUtilityFunction@@"
                ],
                "cost_per_round": [
                    "(float | None)"
                ],
                "power_per_round": [
                    "(float | None)"
                ],
                "discount_per_round": [
                    "(float | None)"
                ],
                "cost_per_relative_time": [
                    "(float | None)"
                ],
                "power_per_relative_time": [
                    "(float | None)"
                ],
                "discount_per_relative_time": [
                    "(float | None)"
                ],
                "cost_per_real_time": [
                    "(float | None)"
                ],
                "power_per_real_time": [
                    "(float | None)"
                ],
                "discount_per_real_time": [
                    "(float | None)"
                ],
                "dynamic_reservation": [
                    "bool"
                ]
            }
        },
        "_pareto_frontier": {
            "name": "_pareto_frontier",
            "location": 117,
            "return": [
                "tuple[(list[tuple[float]], list[int])]"
            ],
            "arguments": {
                "points": [],
                "eps": [],
                "sort_by_welfare": []
            }
        },
        "nash_point": {
            "name": "nash_point",
            "location": 176,
            "return": [
                "tuple[((tuple[(float, ...)] | None), (int | None))]"
            ],
            "arguments": {
                "ufuns": [
                    "Iterable[UtilityFunction]"
                ],
                "frontier": [
                    "Iterable[tuple[float]]"
                ],
                "outcome_space": [
                    "(OutcomeSpace | None)"
                ],
                "issues": [
                    "(tuple[Issue] | None)"
                ],
                "outcomes": [
                    "(tuple[Outcome] | None)"
                ]
            }
        },
        "pareto_frontier": {
            "name": "pareto_frontier",
            "location": 230,
            "return": [
                "tuple[(list[tuple[(float, ...)]], list[int])]"
            ],
            "arguments": {
                "ufuns": [
                    "Iterable[UtilityFunction]"
                ],
                "outcomes": [
                    "(Iterable[Outcome] | None)"
                ],
                "issues": [
                    "(Iterable[Issue] | None)"
                ],
                "n_discretization": [
                    "(int | None)"
                ],
                "sort_by_welfare": []
            }
        },
        "scale_max": {
            "name": "scale_max",
            "location": 270,
            "return": [
                "UFunType@@UtilityFunction@@ProbUtilityFunction@@"
            ],
            "arguments": {
                "ufun": [
                    "UFunType@@UtilityFunction@@ProbUtilityFunction@@"
                ],
                "to": [
                    "float"
                ],
                "outcome_space": [
                    "(OutcomeSpace | None)"
                ],
                "issues": [
                    "(list[Issue] | None)"
                ],
                "outcomes": [
                    "(list[Outcome] | None)"
                ]
            }
        },
        "normalize": {
            "name": "normalize",
            "location": 294,
            "return": [
                "BaseUtilityFunction"
            ],
            "arguments": {
                "ufun": [
                    "BaseUtilityFunction"
                ],
                "to": [
                    "tuple[(float, float)]"
                ],
                "outcome_space": [
                    "(OutcomeSpace | None)"
                ],
                "issues": [
                    "(list[Issue] | None)"
                ],
                "outcomes": [
                    "(list[Outcome] | None)"
                ]
            }
        },
        "sample_outcome_with_utility": {
            "name": "sample_outcome_with_utility",
            "location": 318,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "ufun": [
                    "BaseUtilityFunction"
                ],
                "rng": [
                    "tuple[(float, float)]"
                ],
                "outcome_space": [
                    "(OutcomeSpace | None)"
                ],
                "issues": [
                    "(list[Issue] | None)"
                ],
                "outcomes": [
                    "(list[Outcome] | None)"
                ],
                "n_trials": [
                    "int"
                ]
            }
        },
        "extreme_outcomes": {
            "name": "extreme_outcomes",
            "location": 347,
            "return": [
                "tuple[(Outcome, Outcome)]"
            ],
            "arguments": {
                "ufun": [
                    "UtilityFunction"
                ],
                "outcome_space": [
                    "(OutcomeSpace | None)"
                ],
                "issues": [
                    "(list[Issue] | None)"
                ],
                "outcomes": [
                    "(list[Outcome] | None)"
                ],
                "max_cardinality": []
            }
        },
        "minmax": {
            "name": "minmax",
            "location": 376,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "ufun": [
                    "UtilityFunction"
                ],
                "outcome_space": [
                    "(OutcomeSpace | None)"
                ],
                "issues": [
                    "(list[Issue] | None)"
                ],
                "outcomes": [
                    "(list[Outcome] | None)"
                ],
                "max_cardinality": []
            }
        },
        "opposition_level": {
            "name": "opposition_level",
            "location": 404,
            "return": [
                "float"
            ],
            "arguments": {
                "ufuns": [
                    "(list[UtilityFunction] | tuple[(UtilityFunction, ...)])"
                ],
                "max_utils": [
                    "(float | tuple[(float, float)])"
                ],
                "outcomes": [
                    "(((int | list[Outcome]) | tuple[(Outcome, ...)]) | None)"
                ],
                "issues": [
                    "(list[Issue] | None)"
                ],
                "max_tests": [
                    "int"
                ]
            }
        },
        "conflict_level": {
            "name": "conflict_level",
            "location": 471,
            "return": [
                "float"
            ],
            "arguments": {
                "u1": [
                    "UtilityFunction"
                ],
                "u2": [
                    "UtilityFunction"
                ],
                "outcomes": [
                    "((int | list[Outcome]) | tuple[Outcome])"
                ],
                "max_tests": [
                    "int"
                ]
            }
        },
        "winwin_level": {
            "name": "winwin_level",
            "location": 538,
            "return": [
                "float"
            ],
            "arguments": {
                "u1": [
                    "UtilityFunction"
                ],
                "u2": [
                    "UtilityFunction"
                ],
                "outcomes": [
                    "((int | list[Outcome]) | tuple[Outcome])"
                ],
                "max_tests": [
                    "int"
                ]
            }
        }
    },
    "negmas-master/negmas/preferences/preferences.py": {
        "Preferences.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Preferences.is_volatile": {
            "name": "is_volatile",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Preferences.is_not_worse": {
            "name": "is_not_worse",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "(Outcome | None)"
                ],
                "second": [
                    "(Outcome | None)"
                ]
            }
        },
        "Preferences.is_session_dependent": {
            "name": "is_session_dependent",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Preferences.is_state_dependent": {
            "name": "is_state_dependent",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Preferences.to_dict": {
            "name": "to_dict",
            "location": 80,
            "return": [
                "dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Preferences.from_dict": {
            "name": "from_dict",
            "location": 91,
            "return": [],
            "arguments": {
                "cls": [],
                "d": []
            }
        },
        "Preferences.is_stationary": {
            "name": "is_stationary",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Preferences.changes": {
            "name": "changes",
            "location": 104,
            "return": [
                "list[PreferencesChange]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Preferences.type": {
            "name": "type",
            "location": 110,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Preferences.base_type": {
            "name": "base_type",
            "location": 132,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Preferences.is_better": {
            "name": "is_better",
            "location": 141,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "(Outcome | None)"
                ],
                "second": [
                    "(Outcome | None)"
                ]
            }
        },
        "Preferences.is_equivalent": {
            "name": "is_equivalent",
            "location": 156,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "(Outcome | None)"
                ],
                "second": [
                    "(Outcome | None)"
                ]
            }
        },
        "Preferences.is_not_better": {
            "name": "is_not_better",
            "location": 171,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "Outcome"
                ],
                "second": [
                    "(Outcome | None)"
                ]
            }
        },
        "Preferences.is_worse": {
            "name": "is_worse",
            "location": 186,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "(Outcome | None)"
                ],
                "second": [
                    "(Outcome | None)"
                ]
            }
        }
    },
    "negmas-master/negmas/preferences/prob_ufun.py": {
        "ProbUtilityFunction.eval": {
            "name": "eval",
            "location": 24,
            "return": [
                "Distribution"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "ProbUtilityFunction.to_prob": {
            "name": "to_prob",
            "location": 27,
            "return": [
                "ProbUtilityFunction"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProbUtilityFunction.generate_bilateral": {
            "name": "generate_bilateral",
            "location": 31,
            "return": [
                "tuple[(ProbUtilityFunction, ProbUtilityFunction)]"
            ],
            "arguments": {
                "cls": [],
                "outcomes": [
                    "(int | list[Outcome])"
                ],
                "conflict_level": [
                    "float"
                ],
                "conflict_delta": [],
                "scale": [
                    "(float | tuple[(float, float)])"
                ]
            }
        },
        "ProbUtilityFunction.generate_random_bilateral": {
            "name": "generate_random_bilateral",
            "location": 124,
            "return": [
                "tuple[(ProbUtilityFunction, ProbUtilityFunction)]"
            ],
            "arguments": {
                "cls": [],
                "outcomes": [
                    "(int | list[Outcome])"
                ],
                "scale": [
                    "float"
                ]
            }
        },
        "ProbUtilityFunction.generate_random": {
            "name": "generate_random",
            "location": 179,
            "return": [
                "list[ProbUtilityFunction]"
            ],
            "arguments": {
                "cls": [],
                "n": [
                    "int"
                ],
                "outcomes": [
                    "(int | list[Outcome])"
                ],
                "normalized": [
                    "bool"
                ],
                "scale": [
                    "(float | tuple[(float, float)])"
                ]
            }
        },
        "ProbUtilityFunction.__call__": {
            "name": "__call__",
            "location": 225,
            "return": [
                "Distribution"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "(Outcome | None)"
                ]
            }
        },
        "ProbAdapter.__init__": {
            "name": "__init__",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "ufun": [
                    "BaseUtilityFunction"
                ]
            }
        },
        "ProbAdapter.eval": {
            "name": "eval",
            "location": 261,
            "return": [],
            "arguments": {
                "self": [],
                "offer": []
            }
        },
        "ProbAdapter.to_stationary": {
            "name": "to_stationary",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/preferences/protocols.py": {
        "XmlSerializableUFun.from_genius": {
            "name": "from_genius",
            "location": 49,
            "return": [
                "X@@XmlSerializable@@"
            ],
            "arguments": {
                "cls": [
                    "type[X]"
                ],
                "issues": [
                    "list[Issue]"
                ],
                "file_name": [
                    "PathLike"
                ]
            }
        },
        "XmlSerializableUFun.xml": {
            "name": "xml",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "issues": [
                    "list[Issue]"
                ]
            }
        },
        "BasePref.type": {
            "name": "type",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePref.base_type": {
            "name": "base_type",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePref.is_volatile": {
            "name": "is_volatile",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePref.is_session_dependent": {
            "name": "is_session_dependent",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePref.is_state_dependent": {
            "name": "is_state_dependent",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePref.is_stationary": {
            "name": "is_stationary",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasReservedValue.reserved_distribution": {
            "name": "reserved_distribution",
            "location": 114,
            "return": [
                "Distribution"
            ],
            "arguments": {
                "self": []
            }
        },
        "StationaryConvertible.to_stationary": {
            "name": "to_stationary",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ordinal.is_not_worse": {
            "name": "is_not_worse",
            "location": 140,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "(Outcome | None)"
                ],
                "second": [
                    "(Outcome | None)"
                ]
            }
        },
        "Ordinal.is_better": {
            "name": "is_better",
            "location": 156,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "(Outcome | None)"
                ],
                "second": [
                    "(Outcome | None)"
                ]
            }
        },
        "Ordinal.is_equivalent": {
            "name": "is_equivalent",
            "location": 171,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "(Outcome | None)"
                ],
                "second": [
                    "(Outcome | None)"
                ]
            }
        },
        "Ordinal.is_not_better": {
            "name": "is_not_better",
            "location": 186,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "Outcome"
                ],
                "second": [
                    "(Outcome | None)"
                ]
            }
        },
        "Ordinal.is_worse": {
            "name": "is_worse",
            "location": 201,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "(Outcome | None)"
                ],
                "second": [
                    "(Outcome | None)"
                ]
            }
        },
        "CardinalProb.difference_prob": {
            "name": "difference_prob",
            "location": 229,
            "return": [
                "Distribution"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "Outcome"
                ],
                "second": [
                    "Outcome"
                ]
            }
        },
        "CardinalCrisp.difference": {
            "name": "difference",
            "location": 242,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "Outcome"
                ],
                "second": [
                    "Outcome"
                ]
            }
        },
        "UFun.eval": {
            "name": "eval",
            "location": 252,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "UFun.eval_normalized": {
            "name": "eval_normalized",
            "location": 258,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "(Outcome | None)"
                ],
                "above_reserve": [
                    "bool"
                ],
                "expected_limits": [
                    "bool"
                ]
            }
        },
        "UFun.minmax": {
            "name": "minmax",
            "location": 282,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UFun.__call__": {
            "name": "__call__",
            "location": 287,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "(Outcome | None)"
                ]
            }
        },
        "UFunCrisp.eval": {
            "name": "eval",
            "location": 298,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "UFunCrisp.to_stationary": {
            "name": "to_stationary",
            "location": 301,
            "return": [
                "T@@UFunCrisp@@"
            ],
            "arguments": {
                "self": [
                    "T@@UFunCrisp@@"
                ]
            }
        },
        "UFunCrisp.__call__": {
            "name": "__call__",
            "location": 304,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "(Outcome | None)"
                ]
            }
        },
        "UFunProb.eval": {
            "name": "eval",
            "location": 313,
            "return": [
                "Distribution"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "UFunProb.__call__": {
            "name": "__call__",
            "location": 316,
            "return": [
                "Distribution"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "(Outcome | None)"
                ]
            }
        },
        "OrdinalRanking.rank": {
            "name": "rank",
            "location": 325,
            "return": [
                "list[list[(Outcome | None)]]"
            ],
            "arguments": {
                "self": [],
                "outcomes": [
                    "list[(Outcome | None)]"
                ],
                "descending": []
            }
        },
        "OrdinalRanking.argrank": {
            "name": "argrank",
            "location": 336,
            "return": [
                "list[list[(int | None)]]"
            ],
            "arguments": {
                "self": [],
                "outcomes": [
                    "list[(Outcome | None)]"
                ],
                "descending": []
            }
        },
        "CardinalRanking.rank_with_weights": {
            "name": "rank_with_weights",
            "location": 352,
            "return": [
                "list[tuple[(tuple[(Outcome | None)], float)]]"
            ],
            "arguments": {
                "self": [],
                "outcomes": [
                    "list[(Outcome | None)]"
                ],
                "descending": []
            }
        },
        "CardinalRanking.argrank_with_weights": {
            "name": "argrank_with_weights",
            "location": 368,
            "return": [
                "list[tuple[(tuple[(Outcome | None)], float)]]"
            ],
            "arguments": {
                "self": [],
                "outcomes": [
                    "list[(Outcome | None)]"
                ],
                "descending": []
            }
        },
        "InverseUFun.__init__": {
            "name": "__init__",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ufun": [
                    "UFun"
                ]
            }
        },
        "InverseUFun.init": {
            "name": "init",
            "location": 394,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InverseUFun.some": {
            "name": "some",
            "location": 400,
            "return": [
                "list[Outcome]"
            ],
            "arguments": {
                "self": [],
                "rng": [
                    "(float | tuple[(float, float)])"
                ],
                "normalized": [
                    "bool"
                ],
                "n": [
                    "(int | None)"
                ]
            }
        },
        "InverseUFun.one_in": {
            "name": "one_in",
            "location": 417,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "rng": [
                    "(float | tuple[(float, float)])"
                ],
                "normalized": [
                    "bool"
                ]
            }
        },
        "InverseUFun.best_in": {
            "name": "best_in",
            "location": 429,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "rng": [
                    "(float | tuple[(float, float)])"
                ],
                "normalized": [
                    "bool"
                ]
            }
        },
        "InverseUFun.worst_in": {
            "name": "worst_in",
            "location": 441,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "rng": [
                    "(float | tuple[(float, float)])"
                ],
                "normalized": [
                    "bool"
                ]
            }
        },
        "InverseUFun.within_fractions": {
            "name": "within_fractions",
            "location": 453,
            "return": [
                "list[Outcome]"
            ],
            "arguments": {
                "self": [],
                "rng": [
                    "tuple[(float, float)]"
                ]
            }
        },
        "InverseUFun.within_indices": {
            "name": "within_indices",
            "location": 459,
            "return": [
                "list[Outcome]"
            ],
            "arguments": {
                "self": [],
                "rng": [
                    "tuple[(int, int)]"
                ]
            }
        },
        "InverseUFun.min": {
            "name": "min",
            "location": 468,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "InverseUFun.max": {
            "name": "max",
            "location": 477,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "InverseUFun.worst": {
            "name": "worst",
            "location": 486,
            "return": [
                "Outcome"
            ],
            "arguments": {
                "self": []
            }
        },
        "InverseUFun.best": {
            "name": "best",
            "location": 492,
            "return": [
                "Outcome"
            ],
            "arguments": {
                "self": []
            }
        },
        "InverseUFun.minmax": {
            "name": "minmax",
            "location": 498,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InverseUFun.extreme_outcomes": {
            "name": "extreme_outcomes",
            "location": 507,
            "return": [
                "tuple[(Outcome, Outcome)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InverseUFun.__call__": {
            "name": "__call__",
            "location": 516,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "rng": [
                    "(float | tuple[(float, float)])"
                ],
                "normalized": [
                    "bool"
                ]
            }
        },
        "HasRange.minmax": {
            "name": "minmax",
            "location": 528,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "outcome_space": [
                    "(OutcomeSpace | None)"
                ],
                "issues": [
                    "(list[Issue] | None)"
                ],
                "outcomes": [
                    "((list[Outcome] | int) | None)"
                ],
                "max_cardinality": [],
                "above_reserve": []
            }
        },
        "HasRange.extreme_outcomes": {
            "name": "extreme_outcomes",
            "location": 551,
            "return": [
                "tuple[(Outcome, Outcome)]"
            ],
            "arguments": {
                "self": [],
                "outcome_space": [
                    "(OutcomeSpace | None)"
                ],
                "issues": [
                    "(list[Issue] | None)"
                ],
                "outcomes": [
                    "((list[Outcome] | int) | None)"
                ],
                "max_cardinality": []
            }
        },
        "HasRange.max": {
            "name": "max",
            "location": 572,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasRange.min": {
            "name": "min",
            "location": 578,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasRange.best": {
            "name": "best",
            "location": 584,
            "return": [
                "Outcome"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasRange.worst": {
            "name": "worst",
            "location": 590,
            "return": [
                "Outcome"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fun.dim": {
            "name": "dim",
            "location": 611,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fun.minmax": {
            "name": "minmax",
            "location": 614,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "input": []
            }
        },
        "Fun.shift_by": {
            "name": "shift_by",
            "location": 618,
            "return": [
                "Fun"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "float"
                ]
            }
        },
        "Fun.scale_by": {
            "name": "scale_by",
            "location": 622,
            "return": [
                "Fun"
            ],
            "arguments": {
                "self": [],
                "scale": [
                    "float"
                ]
            }
        },
        "Fun.__call__": {
            "name": "__call__",
            "location": 625,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "SingleIssueFun.dim": {
            "name": "dim",
            "location": 634,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingleIssueFun.minmax": {
            "name": "minmax",
            "location": 637,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "Issue"
                ]
            }
        },
        "SingleIssueFun.shift_by": {
            "name": "shift_by",
            "location": 640,
            "return": [
                "Fun"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "float"
                ]
            }
        },
        "SingleIssueFun.scale_by": {
            "name": "scale_by",
            "location": 643,
            "return": [
                "Fun"
            ],
            "arguments": {
                "self": [],
                "scale": [
                    "float"
                ]
            }
        },
        "SingleIssueFun.xml": {
            "name": "xml",
            "location": 646,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "indx": [
                    "int"
                ],
                "issue": [
                    "Issue"
                ],
                "bias": []
            }
        },
        "SingleIssueFun.min": {
            "name": "min",
            "location": 649,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "Issue"
                ]
            }
        },
        "SingleIssueFun.max": {
            "name": "max",
            "location": 652,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "Issue"
                ]
            }
        },
        "MultiIssueFun.dim": {
            "name": "dim",
            "location": 661,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiIssueFun.minmax": {
            "name": "minmax",
            "location": 664,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "tuple[Issue]"
                ]
            }
        },
        "MultiIssueFun.shift_by": {
            "name": "shift_by",
            "location": 667,
            "return": [
                "MultiIssueFun"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "float"
                ],
                "change_bias": [
                    "bool"
                ]
            }
        },
        "MultiIssueFun.scale_by": {
            "name": "scale_by",
            "location": 670,
            "return": [
                "MultiIssueFun"
            ],
            "arguments": {
                "self": [],
                "scale": [
                    "float"
                ]
            }
        },
        "MultiIssueFun.xml": {
            "name": "xml",
            "location": 673,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "indx": [
                    "int"
                ],
                "issues": [
                    "list[Issue]"
                ],
                "bias": []
            }
        },
        "MultiIssueFun.__call__": {
            "name": "__call__",
            "location": 676,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "tuple"
                ]
            }
        },
        "Shiftable.shift_by": {
            "name": "shift_by",
            "location": 685,
            "return": [
                "Shiftable"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "float"
                ],
                "shift_reserved": []
            }
        },
        "Shiftable.shift_min": {
            "name": "shift_min",
            "location": 689,
            "return": [
                "Shiftable"
            ],
            "arguments": {
                "self": [],
                "to": [
                    "float"
                ],
                "rng": [
                    "(tuple[(float, float)] | None)"
                ]
            }
        },
        "Shiftable.shift_max": {
            "name": "shift_max",
            "location": 693,
            "return": [
                "Shiftable"
            ],
            "arguments": {
                "self": [],
                "to": [
                    "float"
                ],
                "rng": [
                    "(tuple[(float, float)] | None)"
                ]
            }
        },
        "Scalable.scale_by": {
            "name": "scale_by",
            "location": 702,
            "return": [
                "Scalable"
            ],
            "arguments": {
                "self": [],
                "scale": [
                    "float"
                ],
                "scale_reserved": []
            }
        },
        "Scalable.scale_min": {
            "name": "scale_min",
            "location": 706,
            "return": [
                "Scalable"
            ],
            "arguments": {
                "self": [],
                "to": [
                    "float"
                ],
                "rng": [
                    "(tuple[(float, float)] | None)"
                ]
            }
        },
        "Scalable.scale_max": {
            "name": "scale_max",
            "location": 710,
            "return": [
                "Scalable"
            ],
            "arguments": {
                "self": [],
                "to": [
                    "float"
                ],
                "rng": [
                    "(tuple[(float, float)] | None)"
                ]
            }
        },
        "PartiallyShiftable.shift_min_for": {
            "name": "shift_min_for",
            "location": 719,
            "return": [
                "PartiallyScalable"
            ],
            "arguments": {
                "self": [],
                "to": [],
                "outcome_space": [
                    "(OutcomeSpace | None)"
                ],
                "issues": [
                    "(list[Issue] | None)"
                ],
                "outcomes": [
                    "(list[Outcome] | None)"
                ],
                "rng": [
                    "(tuple[(float, float)] | None)"
                ]
            }
        },
        "PartiallyShiftable.shift_max_for": {
            "name": "shift_max_for",
            "location": 730,
            "return": [
                "PartiallyScalable"
            ],
            "arguments": {
                "self": [],
                "to": [
                    "float"
                ],
                "outcome_space": [
                    "(OutcomeSpace | None)"
                ],
                "issues": [
                    "(list[Issue] | None)"
                ],
                "outcomes": [
                    "(list[Outcome] | None)"
                ],
                "rng": [
                    "(tuple[(float, float)] | None)"
                ]
            }
        },
        "PartiallyScalable.scale_min_for": {
            "name": "scale_min_for",
            "location": 746,
            "return": [
                "PartiallyScalable"
            ],
            "arguments": {
                "self": [],
                "to": [
                    "float"
                ],
                "outcome_space": [
                    "(OutcomeSpace | None)"
                ],
                "issues": [
                    "(list[Issue] | None)"
                ],
                "outcomes": [
                    "(list[Outcome] | None)"
                ],
                "rng": [
                    "(tuple[(float, float)] | None)"
                ]
            }
        },
        "PartiallyScalable.scale_max_for": {
            "name": "scale_max_for",
            "location": 757,
            "return": [
                "PartiallyScalable"
            ],
            "arguments": {
                "self": [],
                "to": [
                    "float"
                ],
                "outcome_space": [
                    "(OutcomeSpace | None)"
                ],
                "issues": [
                    "(list[Issue] | None)"
                ],
                "outcomes": [
                    "(list[Outcome] | None)"
                ],
                "rng": [
                    "(tuple[(float, float)] | None)"
                ]
            }
        },
        "Normalizable.normalize": {
            "name": "normalize",
            "location": 776,
            "return": [
                "N@@Normalizable@@"
            ],
            "arguments": {
                "self": [
                    "N@@Normalizable@@"
                ],
                "to": [
                    "tuple[(float, float)]"
                ]
            }
        },
        "Randomizable.random": {
            "name": "random",
            "location": 789,
            "return": [
                "Randomizable"
            ],
            "arguments": {
                "cls": [],
                "outcome_space": [],
                "reserved_value": [],
                "normalized": []
            }
        }
    },
    "negmas-master/negmas/preferences/value_fun.py": {
        "make_fun_from_xml": {
            "name": "make_fun_from_xml",
            "location": 726,
            "return": [
                "tuple[(BaseFun, str)]"
            ],
            "arguments": {
                "item": []
            }
        },
        "BaseFun.dim": {
            "name": "dim",
            "location": 51,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFun.minmax": {
            "name": "minmax",
            "location": 55,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "Issue"
                ]
            }
        },
        "BaseFun.from_dict": {
            "name": "from_dict",
            "location": 59,
            "return": [],
            "arguments": {
                "cls": [],
                "d": [
                    "dict"
                ]
            }
        },
        "BaseFun.to_dict": {
            "name": "to_dict",
            "location": 65,
            "return": [
                "dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFun.min": {
            "name": "min",
            "location": 68,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "Issue"
                ]
            }
        },
        "BaseFun.max": {
            "name": "max",
            "location": 72,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "Issue"
                ]
            }
        },
        "TableFun.minmax": {
            "name": "minmax",
            "location": 82,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "Issue"
                ]
            }
        },
        "TableFun.shift_by": {
            "name": "shift_by",
            "location": 85,
            "return": [
                "TableFun"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "float"
                ]
            }
        },
        "TableFun.scale_by": {
            "name": "scale_by",
            "location": 91,
            "return": [
                "TableFun"
            ],
            "arguments": {
                "self": [],
                "scale": [
                    "float"
                ]
            }
        },
        "TableFun.xml": {
            "name": "xml",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "indx": [
                    "int"
                ],
                "issue": [
                    "Issue"
                ],
                "bias": []
            }
        },
        "TableFun.__call__": {
            "name": "__call__",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "AffineFun.minmax": {
            "name": "minmax",
            "location": 127,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "Issue"
                ]
            }
        },
        "AffineFun.shift_by": {
            "name": "shift_by",
            "location": 130,
            "return": [
                "AffineFun"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "float"
                ]
            }
        },
        "AffineFun.scale_by": {
            "name": "scale_by",
            "location": 133,
            "return": [
                "AffineFun"
            ],
            "arguments": {
                "self": [],
                "scale": [
                    "float"
                ]
            }
        },
        "AffineFun.xml": {
            "name": "xml",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "indx": [
                    "int"
                ],
                "issue": [
                    "Issue"
                ],
                "bias": []
            }
        },
        "AffineFun.__call__": {
            "name": "__call__",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ]
            }
        },
        "ConstFun.minmax": {
            "name": "minmax",
            "location": 161,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "Issue"
                ]
            }
        },
        "ConstFun.shift_by": {
            "name": "shift_by",
            "location": 164,
            "return": [
                "ConstFun"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "float"
                ]
            }
        },
        "ConstFun.scale_by": {
            "name": "scale_by",
            "location": 167,
            "return": [
                "AffineFun"
            ],
            "arguments": {
                "self": [],
                "scale": [
                    "float"
                ]
            }
        },
        "ConstFun.xml": {
            "name": "xml",
            "location": 170,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "indx": [
                    "int"
                ],
                "issue": [
                    "Issue"
                ],
                "bias": []
            }
        },
        "ConstFun.__call__": {
            "name": "__call__",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ]
            }
        },
        "LinearFun.bias": {
            "name": "bias",
            "location": 182,
            "return": [],
            "arguments": {
                "sef": []
            }
        },
        "LinearFun.minmax": {
            "name": "minmax",
            "location": 186,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "Issue"
                ]
            }
        },
        "LinearFun.shift_by": {
            "name": "shift_by",
            "location": 189,
            "return": [
                "AffineFun"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "float"
                ]
            }
        },
        "LinearFun.scale_by": {
            "name": "scale_by",
            "location": 192,
            "return": [
                "LinearFun"
            ],
            "arguments": {
                "self": [],
                "scale": [
                    "float"
                ]
            }
        },
        "LinearFun.xml": {
            "name": "xml",
            "location": 195,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "indx": [
                    "int"
                ],
                "issue": [
                    "Issue"
                ],
                "bias": []
            }
        },
        "LinearFun.__call__": {
            "name": "__call__",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ]
            }
        },
        "IdentityFun.minmax": {
            "name": "minmax",
            "location": 205,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "Issue"
                ]
            }
        },
        "IdentityFun.shift_by": {
            "name": "shift_by",
            "location": 208,
            "return": [
                "ConstFun"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "float"
                ]
            }
        },
        "IdentityFun.scale_by": {
            "name": "scale_by",
            "location": 211,
            "return": [
                "LinearFun"
            ],
            "arguments": {
                "self": [],
                "scale": [
                    "float"
                ]
            }
        },
        "IdentityFun.xml": {
            "name": "xml",
            "location": 214,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "indx": [
                    "int"
                ],
                "issue": [
                    "Issue"
                ],
                "bias": []
            }
        },
        "IdentityFun.__call__": {
            "name": "__call__",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ]
            }
        },
        "LambdaFun.__post_init__": {
            "name": "__post_init__",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LambdaFun.minmax": {
            "name": "minmax",
            "location": 236,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "input": []
            }
        },
        "LambdaFun.shift_by": {
            "name": "shift_by",
            "location": 246,
            "return": [
                "LambdaFun"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "float"
                ],
                "change_bias": [
                    "bool"
                ]
            }
        },
        "LambdaFun.scale_by": {
            "name": "scale_by",
            "location": 255,
            "return": [
                "LambdaFun"
            ],
            "arguments": {
                "self": [],
                "scale": [
                    "float"
                ]
            }
        },
        "LambdaFun.xml": {
            "name": "xml",
            "location": 266,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "indx": [
                    "int"
                ],
                "issue": [
                    "Issue"
                ],
                "bias": []
            }
        },
        "LambdaFun.__call__": {
            "name": "__call__",
            "location": 276,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "Any"
                ]
            }
        },
        "QuadraticFun.minmax": {
            "name": "minmax",
            "location": 287,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "input": []
            }
        },
        "QuadraticFun.shift_by": {
            "name": "shift_by",
            "location": 302,
            "return": [
                "QuadraticFun"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "float"
                ]
            }
        },
        "QuadraticFun.scale_by": {
            "name": "scale_by",
            "location": 305,
            "return": [
                "QuadraticFun"
            ],
            "arguments": {
                "self": [],
                "scale": [
                    "float"
                ]
            }
        },
        "QuadraticFun.xml": {
            "name": "xml",
            "location": 310,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "indx": [
                    "int"
                ],
                "issue": [
                    "Issue"
                ],
                "bias": []
            }
        },
        "QuadraticFun.__call__": {
            "name": "__call__",
            "location": 326,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ]
            }
        },
        "PolynomialFun.minmax": {
            "name": "minmax",
            "location": 336,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "input": []
            }
        },
        "PolynomialFun.shift_by": {
            "name": "shift_by",
            "location": 340,
            "return": [
                "PolynomialFun"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "float"
                ]
            }
        },
        "PolynomialFun.scale_by": {
            "name": "scale_by",
            "location": 343,
            "return": [
                "PolynomialFun"
            ],
            "arguments": {
                "self": [],
                "scale": [
                    "float"
                ]
            }
        },
        "PolynomialFun.xml": {
            "name": "xml",
            "location": 346,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "indx": [
                    "int"
                ],
                "issue": [
                    "Issue"
                ],
                "bias": []
            }
        },
        "PolynomialFun.__call__": {
            "name": "__call__",
            "location": 370,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ]
            }
        },
        "TriangularFun.shift_by": {
            "name": "shift_by",
            "location": 381,
            "return": [
                "TriangularFun"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "float"
                ]
            }
        },
        "TriangularFun.scale_by": {
            "name": "scale_by",
            "location": 386,
            "return": [
                "TriangularFun"
            ],
            "arguments": {
                "self": [],
                "scale": [
                    "float"
                ]
            }
        },
        "TriangularFun.minmax": {
            "name": "minmax",
            "location": 395,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "input": []
            }
        },
        "TriangularFun.xml": {
            "name": "xml",
            "location": 399,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "indx": [
                    "int"
                ],
                "issue": [
                    "Issue"
                ],
                "bias": []
            }
        },
        "TriangularFun.__call__": {
            "name": "__call__",
            "location": 417,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ]
            }
        },
        "ExponentialFun.minmax": {
            "name": "minmax",
            "location": 432,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "input": []
            }
        },
        "ExponentialFun.shift_by": {
            "name": "shift_by",
            "location": 436,
            "return": [
                "ExponentialFun"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "float"
                ]
            }
        },
        "ExponentialFun.scale_by": {
            "name": "scale_by",
            "location": 439,
            "return": [
                "ExponentialFun"
            ],
            "arguments": {
                "self": [],
                "scale": [
                    "float"
                ]
            }
        },
        "ExponentialFun.xml": {
            "name": "xml",
            "location": 444,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "indx": [
                    "int"
                ],
                "issue": [
                    "Issue"
                ],
                "bias": []
            }
        },
        "ExponentialFun.__call__": {
            "name": "__call__",
            "location": 460,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ]
            }
        },
        "CosFun.minmax": {
            "name": "minmax",
            "location": 472,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "input": []
            }
        },
        "CosFun.shift_by": {
            "name": "shift_by",
            "location": 476,
            "return": [
                "CosFun"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "float"
                ]
            }
        },
        "CosFun.scale_by": {
            "name": "scale_by",
            "location": 484,
            "return": [
                "CosFun"
            ],
            "arguments": {
                "self": [],
                "scale": [
                    "float"
                ]
            }
        },
        "CosFun.xml": {
            "name": "xml",
            "location": 492,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "indx": [
                    "int"
                ],
                "issue": [
                    "Issue"
                ],
                "bias": []
            }
        },
        "CosFun.__call__": {
            "name": "__call__",
            "location": 508,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ]
            }
        },
        "SinFun.minmax": {
            "name": "minmax",
            "location": 520,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "input": []
            }
        },
        "SinFun.shift_by": {
            "name": "shift_by",
            "location": 524,
            "return": [
                "SinFun"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "float"
                ]
            }
        },
        "SinFun.scale_by": {
            "name": "scale_by",
            "location": 532,
            "return": [
                "SinFun"
            ],
            "arguments": {
                "self": [],
                "scale": [
                    "float"
                ]
            }
        },
        "SinFun.xml": {
            "name": "xml",
            "location": 540,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "indx": [
                    "int"
                ],
                "issue": [
                    "Issue"
                ],
                "bias": []
            }
        },
        "SinFun.__call__": {
            "name": "__call__",
            "location": 556,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ]
            }
        },
        "LogFun.minmax": {
            "name": "minmax",
            "location": 568,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "input": []
            }
        },
        "LogFun.shift_by": {
            "name": "shift_by",
            "location": 572,
            "return": [
                "LogFun"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "float"
                ]
            }
        },
        "LogFun.scale_by": {
            "name": "scale_by",
            "location": 577,
            "return": [
                "LogFun"
            ],
            "arguments": {
                "self": [],
                "scale": [
                    "float"
                ]
            }
        },
        "LogFun.xml": {
            "name": "xml",
            "location": 585,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "indx": [
                    "int"
                ],
                "issue": [
                    "Issue"
                ],
                "bias": []
            }
        },
        "LogFun.__call__": {
            "name": "__call__",
            "location": 601,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ]
            }
        },
        "TableMultiFun.minmax": {
            "name": "minmax",
            "location": 610,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "Iterable[Issue]"
                ]
            }
        },
        "TableMultiFun.shift_by": {
            "name": "shift_by",
            "location": 613,
            "return": [
                "TableMultiFun"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "float"
                ]
            }
        },
        "TableMultiFun.scale_by": {
            "name": "scale_by",
            "location": 619,
            "return": [
                "TableMultiFun"
            ],
            "arguments": {
                "self": [],
                "scale": [
                    "float"
                ]
            }
        },
        "TableMultiFun.dim": {
            "name": "dim",
            "location": 625,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableMultiFun.xml": {
            "name": "xml",
            "location": 630,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "indx": [
                    "int"
                ],
                "issues": [
                    "list[Issue]"
                ],
                "bias": []
            }
        },
        "TableMultiFun.__call__": {
            "name": "__call__",
            "location": 633,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "AffineMultiFun.minmax": {
            "name": "minmax",
            "location": 643,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "Iterable[Issue]"
                ]
            }
        },
        "AffineMultiFun.shift_by": {
            "name": "shift_by",
            "location": 646,
            "return": [
                "AffineMultiFun"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "float"
                ]
            }
        },
        "AffineMultiFun.scale_by": {
            "name": "scale_by",
            "location": 649,
            "return": [
                "AffineMultiFun"
            ],
            "arguments": {
                "self": [],
                "scale": [
                    "float"
                ]
            }
        },
        "AffineMultiFun.dim": {
            "name": "dim",
            "location": 654,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AffineMultiFun.xml": {
            "name": "xml",
            "location": 657,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "indx": [
                    "int"
                ],
                "issues": [
                    "list[Issue]"
                ],
                "bias": []
            }
        },
        "AffineMultiFun.__call__": {
            "name": "__call__",
            "location": 660,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "tuple"
                ]
            }
        },
        "LinearMultiFun.bias": {
            "name": "bias",
            "location": 669,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinearMultiFun.minmax": {
            "name": "minmax",
            "location": 673,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "Iterable[Issue]"
                ]
            }
        },
        "LinearMultiFun.shift_by": {
            "name": "shift_by",
            "location": 676,
            "return": [
                "AffineMultiFun"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "float"
                ]
            }
        },
        "LinearMultiFun.scale_by": {
            "name": "scale_by",
            "location": 679,
            "return": [
                "LinearMultiFun"
            ],
            "arguments": {
                "self": [],
                "scale": [
                    "float"
                ]
            }
        },
        "LinearMultiFun.dim": {
            "name": "dim",
            "location": 682,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearMultiFun.xml": {
            "name": "xml",
            "location": 685,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "indx": [
                    "int"
                ],
                "issues": [
                    "list[Issue]"
                ],
                "bias": []
            }
        },
        "LinearMultiFun.__call__": {
            "name": "__call__",
            "location": 688,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "tuple"
                ]
            }
        },
        "LambdaMultiFun.minmax": {
            "name": "minmax",
            "location": 700,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "input": []
            }
        },
        "LambdaMultiFun.shift_by": {
            "name": "shift_by",
            "location": 710,
            "return": [
                "AffineMultiFun"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "float"
                ]
            }
        },
        "LambdaMultiFun.scale_by": {
            "name": "scale_by",
            "location": 713,
            "return": [
                "LinearMultiFun"
            ],
            "arguments": {
                "self": [],
                "scale": [
                    "float"
                ]
            }
        },
        "LambdaMultiFun.dim": {
            "name": "dim",
            "location": 716,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LambdaMultiFun.xml": {
            "name": "xml",
            "location": 719,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "indx": [
                    "int"
                ],
                "issues": [
                    "list[Issue]"
                ],
                "bias": []
            }
        },
        "LambdaMultiFun.__call__": {
            "name": "__call__",
            "location": 722,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "Any"
                ]
            }
        }
    },
    "negmas-master/negmas/preferences/__init__.py": {},
    "negmas-master/negmas/preferences/crisp/const.py": {
        "ConstUtilityFunction.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Value"
                ]
            }
        },
        "ConstUtilityFunction.to_dict": {
            "name": "to_dict",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConstUtilityFunction.from_dict": {
            "name": "from_dict",
            "location": 45,
            "return": [],
            "arguments": {
                "cls": [],
                "d": []
            }
        },
        "ConstUtilityFunction.eval": {
            "name": "eval",
            "location": 49,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "ConstUtilityFunction.xml": {
            "name": "xml",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "issues": [
                    "list[Issue]"
                ]
            }
        },
        "ConstUtilityFunction.random": {
            "name": "random",
            "location": 66,
            "return": [
                "ConstUtilityFunction"
            ],
            "arguments": {
                "cls": [],
                "issues": [],
                "reserved_value": [],
                "normalized": [],
                "value_range": []
            }
        },
        "ConstUtilityFunction.__str__": {
            "name": "__str__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/preferences/crisp/linear.py": {
        "_rand_mapping": {
            "name": "_rand_mapping",
            "location": 33,
            "return": [],
            "arguments": {
                "x": [],
                "r": []
            }
        },
        "_rand_mapping_normalized": {
            "name": "_rand_mapping_normalized",
            "location": 37,
            "return": [],
            "arguments": {
                "x": [],
                "mx": [],
                "mn": [],
                "r": []
            }
        },
        "_random_mapping": {
            "name": "_random_mapping",
            "location": 41,
            "return": [],
            "arguments": {
                "issue": [
                    "Issue"
                ],
                "normalized": []
            }
        },
        "AffineUtilityFunction.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "weights": [
                    "(((dict[(str, float)] | list[float]) | tuple[(float, ...)]) | None)"
                ],
                "bias": [
                    "float"
                ]
            }
        },
        "AffineUtilityFunction.bias": {
            "name": "bias",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AffineUtilityFunction.weights": {
            "name": "weights",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AffineUtilityFunction.values": {
            "name": "values",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AffineUtilityFunction.eval": {
            "name": "eval",
            "location": 173,
            "return": [
                "(float | None)"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "(Outcome | None)"
                ]
            }
        },
        "AffineUtilityFunction.xml": {
            "name": "xml",
            "location": 178,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "issues": [
                    "(list[Issue] | None)"
                ]
            }
        },
        "AffineUtilityFunction.random": {
            "name": "random",
            "location": 240,
            "return": [],
            "arguments": {
                "cls": [],
                "issues": [
                    "(list[Issue] | tuple[(Issue, ...)])"
                ],
                "reserved_value": [],
                "normalized": []
            }
        },
        "AffineUtilityFunction.to_dict": {
            "name": "to_dict",
            "location": 280,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AffineUtilityFunction.from_dict": {
            "name": "from_dict",
            "location": 290,
            "return": [],
            "arguments": {
                "cls": [],
                "d": [
                    "dict"
                ]
            }
        },
        "AffineUtilityFunction.shift_by": {
            "name": "shift_by",
            "location": 298,
            "return": [
                "AffineUtilityFunction"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "float"
                ],
                "shift_reserved": [
                    "bool"
                ]
            }
        },
        "AffineUtilityFunction.scale_by": {
            "name": "scale_by",
            "location": 311,
            "return": [
                "AffineUtilityFunction"
            ],
            "arguments": {
                "self": [],
                "scale": [
                    "float"
                ],
                "scale_reserved": [
                    "bool"
                ]
            }
        },
        "AffineUtilityFunction.normalize_for": {
            "name": "normalize_for",
            "location": 327,
            "return": [
                "(ConstUtilityFunction | AffineUtilityFunction)"
            ],
            "arguments": {
                "self": [],
                "to": [
                    "tuple[(float, float)]"
                ],
                "outcome_space": [
                    "(OutcomeSpace | None)"
                ]
            }
        },
        "AffineUtilityFunction.normalize": {
            "name": "normalize",
            "location": 382,
            "return": [
                "((ConstUtilityFunction | AffineUtilityFunction) | LinearUtilityFunction)"
            ],
            "arguments": {
                "self": [],
                "to": [
                    "tuple[(float, float)]"
                ]
            }
        },
        "AffineUtilityFunction.extreme_outcomes": {
            "name": "extreme_outcomes",
            "location": 389,
            "return": [
                "tuple[(Outcome, Outcome)]"
            ],
            "arguments": {
                "self": [],
                "outcome_space": [
                    "(OutcomeSpace | None)"
                ],
                "issues": [
                    "(list[Issue] | None)"
                ],
                "outcomes": [
                    "(list[Outcome] | None)"
                ],
                "max_cardinality": []
            }
        },
        "AffineUtilityFunction.__str__": {
            "name": "__str__",
            "location": 460,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinearUtilityFunction.__init__": {
            "name": "__init__",
            "location": 484,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "weights": [
                    "(((dict[(str, float)] | list[float]) | tuple[(float, ...)]) | None)"
                ]
            }
        },
        "LinearAdditiveUtilityFunction.__init__": {
            "name": "__init__",
            "location": 558,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "((dict[(str, SingleIssueFun)] | tuple[(SingleIssueFun, ...)]) | list[SingleIssueFun])"
                ],
                "weights": [
                    "(((Mapping[(Any, float)] | list[float]) | tuple[(float, ...)]) | None)"
                ],
                "bias": [
                    "float"
                ]
            }
        },
        "LinearAdditiveUtilityFunction.weights": {
            "name": "weights",
            "location": 633,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinearAdditiveUtilityFunction.eval": {
            "name": "eval",
            "location": 636,
            "return": [
                "(float | None)"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "(Outcome | None)"
                ]
            }
        },
        "LinearAdditiveUtilityFunction.xml": {
            "name": "xml",
            "location": 651,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "issues": [
                    "(list[Issue] | None)"
                ]
            }
        },
        "LinearAdditiveUtilityFunction.to_dict": {
            "name": "to_dict",
            "location": 719,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinearAdditiveUtilityFunction.from_dict": {
            "name": "from_dict",
            "location": 729,
            "return": [],
            "arguments": {
                "cls": [],
                "d": [
                    "dict"
                ]
            }
        },
        "LinearAdditiveUtilityFunction.extreme_outcomes": {
            "name": "extreme_outcomes",
            "location": 738,
            "return": [
                "tuple[(Outcome, Outcome)]"
            ],
            "arguments": {
                "self": [],
                "outcome_space": [
                    "(OutcomeSpace | None)"
                ],
                "issues": [
                    "(list[Issue] | None)"
                ],
                "outcomes": [
                    "(list[Outcome] | None)"
                ],
                "max_cardinality": []
            }
        },
        "LinearAdditiveUtilityFunction.random": {
            "name": "random",
            "location": 813,
            "return": [],
            "arguments": {
                "cls": [],
                "issues": [
                    "list[Issue]"
                ],
                "reserved_value": [],
                "normalized": []
            }
        },
        "LinearAdditiveUtilityFunction.shift_by": {
            "name": "shift_by",
            "location": 840,
            "return": [
                "LinearAdditiveUtilityFunction"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "float"
                ],
                "shift_reserved": [
                    "bool"
                ],
                "change_bias_only": [
                    "bool"
                ]
            }
        },
        "LinearAdditiveUtilityFunction.scale_by": {
            "name": "scale_by",
            "location": 867,
            "return": [
                "LinearAdditiveUtilityFunction"
            ],
            "arguments": {
                "self": [],
                "scale": [
                    "float"
                ],
                "scale_reserved": [
                    "bool"
                ],
                "change_weights_only": [
                    "bool"
                ],
                "normalize_weights": [
                    "bool"
                ]
            }
        },
        "LinearAdditiveUtilityFunction.__str__": {
            "name": "__str__",
            "location": 902,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/preferences/crisp/mapping.py": {
        "MappingUtilityFunction.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapping": [
                    "OutcomeUtilityMapping"
                ],
                "default": []
            }
        },
        "MappingUtilityFunction.to_dict": {
            "name": "to_dict",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MappingUtilityFunction.from_dict": {
            "name": "from_dict",
            "location": 105,
            "return": [],
            "arguments": {
                "cls": [],
                "d": []
            }
        },
        "MappingUtilityFunction.eval": {
            "name": "eval",
            "location": 110,
            "return": [
                "((Distribution | float) | None)"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "(Outcome | None)"
                ]
            }
        },
        "MappingUtilityFunction.xml": {
            "name": "xml",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "issues": [
                    "list[Issue]"
                ]
            }
        },
        "MappingUtilityFunction.random": {
            "name": "random",
            "location": 172,
            "return": [],
            "arguments": {
                "cls": [],
                "outcome_space": [
                    "OutcomeSpace"
                ],
                "reserved_value": [],
                "normalized": [],
                "max_cardinality": [
                    "int"
                ]
            }
        },
        "MappingUtilityFunction.__str__": {
            "name": "__str__",
            "location": 200,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/preferences/crisp/nonlinear.py": {
        "NonLinearAggregationUtilityFunction.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "((dict[(str, GenericMapping)] | list[GenericMapping]) | None)"
                ],
                "f": [
                    "Callable[([tuple[float]], float)]"
                ]
            }
        },
        "NonLinearAggregationUtilityFunction.xml": {
            "name": "xml",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "issues": [
                    "list[Issue]"
                ]
            }
        },
        "NonLinearAggregationUtilityFunction.to_dict": {
            "name": "to_dict",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NonLinearAggregationUtilityFunction.from_dict": {
            "name": "from_dict",
            "location": 109,
            "return": [],
            "arguments": {
                "cls": [],
                "d": []
            }
        },
        "NonLinearAggregationUtilityFunction.eval": {
            "name": "eval",
            "location": 115,
            "return": [
                "(float | None)"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "(Outcome | None)"
                ]
            }
        },
        "HyperRectangleUtilityFunction.adjust_params": {
            "name": "adjust_params",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HyperRectangleUtilityFunction.__init__": {
            "name": "__init__",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "outcome_ranges": [
                    "Iterable[OutcomeRange]"
                ],
                "utilities": [
                    "(list[float] | list[OutcomeUtilityMapping])"
                ],
                "weights": [
                    "(list[float] | None)"
                ],
                "ignore_issues_not_in_input": [],
                "ignore_failing_range_utilities": [],
                "bias": [
                    "float"
                ]
            }
        },
        "HyperRectangleUtilityFunction.xml": {
            "name": "xml",
            "location": 221,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "issues": [
                    "list[Issue]"
                ]
            }
        },
        "HyperRectangleUtilityFunction.to_stationary": {
            "name": "to_stationary",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HyperRectangleUtilityFunction.random": {
            "name": "random",
            "location": 306,
            "return": [
                "HyperRectangleUtilityFunction"
            ],
            "arguments": {
                "cls": [],
                "outcome_space": [],
                "reserved_value": [],
                "normalized": [],
                "rectangles": []
            }
        },
        "HyperRectangleUtilityFunction.to_dict": {
            "name": "to_dict",
            "location": 317,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HyperRectangleUtilityFunction.from_dict": {
            "name": "from_dict",
            "location": 330,
            "return": [],
            "arguments": {
                "cls": [],
                "d": []
            }
        },
        "HyperRectangleUtilityFunction.eval": {
            "name": "eval",
            "location": 336,
            "return": [
                "(float | None)"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "(Outcome | None)"
                ]
            }
        },
        "NonlinearHyperRectangleUtilityFunction.__init__": {
            "name": "__init__",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hypervolumes": [
                    "Iterable[OutcomeRange]"
                ],
                "mappings": [
                    "list[OutcomeUtilityMapping]"
                ],
                "f": [
                    "Callable[([list[float]], float)]"
                ],
                "name": [
                    "(str | None)"
                ],
                "reserved_value": [
                    "float"
                ],
                "id": []
            }
        },
        "NonlinearHyperRectangleUtilityFunction.xml": {
            "name": "xml",
            "location": 399,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "issues": [
                    "list[Issue]"
                ]
            }
        },
        "NonlinearHyperRectangleUtilityFunction.to_dict": {
            "name": "to_dict",
            "location": 402,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NonlinearHyperRectangleUtilityFunction.from_dict": {
            "name": "from_dict",
            "location": 413,
            "return": [],
            "arguments": {
                "cls": [],
                "d": []
            }
        },
        "NonlinearHyperRectangleUtilityFunction.eval": {
            "name": "eval",
            "location": 419,
            "return": [
                "(float | None)"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "(Outcome | None)"
                ]
            }
        }
    },
    "negmas-master/negmas/preferences/crisp/random_ufun.py": {
        "RandomUtilityFunction.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "rng": [
                    "tuple[(float, float)]"
                ]
            }
        },
        "RandomUtilityFunction.eval": {
            "name": "eval",
            "location": 32,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "(Outcome | None)"
                ]
            }
        }
    },
    "negmas-master/negmas/preferences/crisp/rankonly_ufun.py": {
        "RankOnlyUtilityFunction.eval": {
            "name": "eval",
            "location": 32,
            "return": [
                "(int | None)"
            ],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ]
            }
        },
        "RankOnlyUtilityFunction.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "ufun": [
                    "BaseUtilityFunction"
                ],
                "randomize_equal": [
                    "bool"
                ],
                "eps": [],
                "name": [
                    "(str | None)"
                ],
                "id": [
                    "(str | None)"
                ],
                "type_name": [
                    "(str | None)"
                ]
            }
        },
        "RankOnlyUtilityFunction.to_mapping_ufun": {
            "name": "to_mapping_ufun",
            "location": 84,
            "return": [
                "MappingUtilityFunction"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/preferences/crisp/__init__.py": {},
    "negmas-master/negmas/preferences/prob/independent.py": {
        "IPUtilityFunction.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "outcomes": [
                    "Iterable[Outcome]"
                ],
                "distributions": [
                    "(Iterable[Distribution] | None)"
                ],
                "issue_names": [
                    "(Iterable[str] | None)"
                ]
            }
        },
        "IPUtilityFunction.random": {
            "name": "random",
            "location": 90,
            "return": [
                "IPUtilityFunction"
            ],
            "arguments": {
                "cls": [],
                "outcome_space": [],
                "reserved_value": [],
                "normalized": [],
                "dist_limits": []
            }
        },
        "IPUtilityFunction.key": {
            "name": "key",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ]
            }
        },
        "IPUtilityFunction.distribution": {
            "name": "distribution",
            "location": 114,
            "return": [
                "Distribution"
            ],
            "arguments": {
                "self": [],
                "outcome": [
                    "Outcome"
                ]
            }
        },
        "IPUtilityFunction.from_mapping": {
            "name": "from_mapping",
            "location": 126,
            "return": [
                "IPUtilityFunction"
            ],
            "arguments": {
                "cls": [],
                "mapping": [
                    "dict[(Outcome, Value)]"
                ],
                "range": [
                    "tuple[(float, float)]"
                ],
                "uncertainty": [
                    "float"
                ],
                "variability": [
                    "float"
                ],
                "reserved_value": [
                    "float"
                ]
            }
        },
        "IPUtilityFunction.from_preferences": {
            "name": "from_preferences",
            "location": 189,
            "return": [
                "IPUtilityFunction"
            ],
            "arguments": {
                "cls": [],
                "u": [
                    "ProbMappingUtilityFunction"
                ],
                "range": [
                    "tuple[(float, float)]"
                ],
                "uncertainty": [
                    "float"
                ],
                "variability": [
                    "float"
                ]
            }
        },
        "IPUtilityFunction.is_state_dependent": {
            "name": "is_state_dependent",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IPUtilityFunction.sample": {
            "name": "sample",
            "location": 256,
            "return": [
                "MappingUtilityFunction"
            ],
            "arguments": {
                "self": []
            }
        },
        "IPUtilityFunction.eval": {
            "name": "eval",
            "location": 278,
            "return": [
                "Distribution"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "IPUtilityFunction.xml": {
            "name": "xml",
            "location": 297,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "issues": [
                    "list[Issue]"
                ]
            }
        },
        "IPUtilityFunction.__str__": {
            "name": "__str__",
            "location": 300,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/preferences/prob/locscale.py": {
        "ILSUtilityFunction.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "type": [
                    "str"
                ],
                "loc": [
                    "UtilityFunction"
                ],
                "scale": [
                    "UtilityFunction"
                ]
            }
        },
        "ILSUtilityFunction.eval": {
            "name": "eval",
            "location": 27,
            "return": [
                "ScipyDistribution"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "UniformUtilityFunction.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "loc": [
                    "UtilityFunction"
                ],
                "scale": [
                    "UtilityFunction"
                ]
            }
        },
        "GaussianUtilityFunction.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "loc": [
                    "UtilityFunction"
                ],
                "scale": [
                    "UtilityFunction"
                ]
            }
        }
    },
    "negmas-master/negmas/preferences/prob/mapping.py": {
        "ProbMappingUtilityFunction.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapping": [
                    "OutcomeUtilityMapping"
                ],
                "default": []
            }
        },
        "ProbMappingUtilityFunction.to_dict": {
            "name": "to_dict",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProbMappingUtilityFunction.from_dict": {
            "name": "from_dict",
            "location": 64,
            "return": [],
            "arguments": {
                "cls": [],
                "d": []
            }
        },
        "ProbMappingUtilityFunction.eval": {
            "name": "eval",
            "location": 69,
            "return": [
                "((Distribution | float) | None)"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "(Outcome | None)"
                ]
            }
        },
        "ProbMappingUtilityFunction.xml": {
            "name": "xml",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "issues": [
                    "list[Issue]"
                ]
            }
        },
        "ProbMappingUtilityFunction.random": {
            "name": "random",
            "location": 84,
            "return": [],
            "arguments": {
                "cls": [],
                "outcome_space": [
                    "OutcomeSpace"
                ],
                "reserved_value": [],
                "normalized": [],
                "max_cardinality": [
                    "int"
                ],
                "type": [
                    "str"
                ]
            }
        },
        "ProbMappingUtilityFunction.__str__": {
            "name": "__str__",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/preferences/prob/random_ufun.py": {
        "ProbRandomUtilityFunction.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "locs": [
                    "tuple[(float, float)]"
                ],
                "scales": [
                    "tuple[(float, float)]"
                ],
                "types": [
                    "tuple[(str, ...)]"
                ]
            }
        },
        "ProbRandomUtilityFunction.eval": {
            "name": "eval",
            "location": 40,
            "return": [
                "Distribution"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "(Outcome | None)"
                ]
            }
        }
    },
    "negmas-master/negmas/preferences/prob/__init__.py": {},
    "negmas-master/negmas/sao/common.py": {
        "all_negotiator_types": {
            "name": "all_negotiator_types",
            "location": 62,
            "return": [
                "list[SAONegotiator]"
            ],
            "arguments": {}
        }
    },
    "negmas-master/negmas/sao/controllers.py": {
        "SAOController.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "default_negotiator_type": [],
                "default_negotiator_params": [],
                "auto_kill": [],
                "name": [],
                "preferences": [],
                "ufun": []
            }
        },
        "SAOController.before_join": {
            "name": "before_join",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "negotiator_id": [
                    "str"
                ],
                "nmi": [
                    "NegotiatorMechanismInterface"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "SAOController.create_negotiator": {
            "name": "create_negotiator",
            "location": 98,
            "return": [
                "ControlledNegotiatorType@@SAONegotiator@@"
            ],
            "arguments": {
                "self": [],
                "negotiator_type": [
                    "((str | ControlledNegotiatorType) | None)"
                ],
                "name": [
                    "(str | None)"
                ],
                "cntxt": [
                    "Any"
                ]
            }
        },
        "SAOController.after_join": {
            "name": "after_join",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "negotiator_id": []
            }
        },
        "SAOController.propose": {
            "name": "propose",
            "location": 122,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "negotiator_id": [
                    "str"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "SAOController.respond": {
            "name": "respond",
            "location": 129,
            "return": [
                "ResponseType"
            ],
            "arguments": {
                "self": [],
                "negotiator_id": [
                    "str"
                ],
                "state": [
                    "MechanismState"
                ],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "SAOController.on_negotiation_end": {
            "name": "on_negotiation_end",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "negotiator_id": [
                    "str"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "SAOController.on_negotiation_start": {
            "name": "on_negotiation_start",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "negotiator_id": [
                    "str"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "SAORandomController.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SAORandomController.propose": {
            "name": "propose",
            "location": 158,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "negotiator_id": [
                    "str"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "SAORandomController.respond": {
            "name": "respond",
            "location": 167,
            "return": [
                "ResponseType"
            ],
            "arguments": {
                "self": [],
                "negotiator_id": [
                    "str"
                ],
                "state": [
                    "MechanismState"
                ],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "SAOSyncController.__init__": {
            "name": "__init__",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SAOSyncController.reset": {
            "name": "reset",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SAOSyncController.first_offer": {
            "name": "first_offer",
            "location": 210,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "negotiator_id": [
                    "str"
                ]
            }
        },
        "SAOSyncController.first_proposals": {
            "name": "first_proposals",
            "location": 238,
            "return": [
                "dict[(str, (Outcome | None))]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SAOSyncController.propose": {
            "name": "propose",
            "location": 247,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "negotiator_id": [
                    "str"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "SAOSyncController.counter_all": {
            "name": "counter_all",
            "location": 273,
            "return": [
                "dict[(str, SAOResponse)]"
            ],
            "arguments": {
                "self": [],
                "offers": [
                    "dict[(str, Outcome)]"
                ],
                "states": [
                    "dict[(str, SAOState)]"
                ]
            }
        },
        "SAOSyncController.respond": {
            "name": "respond",
            "location": 289,
            "return": [
                "ResponseType"
            ],
            "arguments": {
                "self": [],
                "negotiator_id": [
                    "str"
                ],
                "state": [
                    "SAOState"
                ],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "SAOSyncController.on_negotiation_end": {
            "name": "on_negotiation_end",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "negotiator_id": [
                    "str"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "SAORandomSyncController.__init__": {
            "name": "__init__",
            "location": 371,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SAORandomSyncController.make_response": {
            "name": "make_response",
            "location": 396,
            "return": [
                "ResponseType"
            ],
            "arguments": {
                "self": []
            }
        },
        "SAORandomSyncController.counter_all": {
            "name": "counter_all",
            "location": 403,
            "return": [],
            "arguments": {
                "self": [],
                "offers": [],
                "states": []
            }
        },
        "SAORandomSyncController.first_proposals": {
            "name": "first_proposals",
            "location": 415,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SAOSingleAgreementController.__init__": {
            "name": "__init__",
            "location": 459,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SAOSingleAgreementController.on_negotiation_end": {
            "name": "on_negotiation_end",
            "location": 465,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "negotiator_id": [
                    "str"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "SAOSingleAgreementController.best_outcome": {
            "name": "best_outcome",
            "location": 470,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "negotiator": [
                    "str"
                ],
                "state": [
                    "(SAOState | None)"
                ]
            }
        },
        "SAOSingleAgreementController.is_better": {
            "name": "is_better",
            "location": 507,
            "return": [],
            "arguments": {
                "self": [],
                "a": [
                    "(Outcome | None)"
                ],
                "b": [
                    "(Outcome | None)"
                ],
                "negotiator": [
                    "str"
                ],
                "state": [
                    "SAOState"
                ]
            }
        },
        "SAOSingleAgreementController.make_offer": {
            "name": "make_offer",
            "location": 522,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "negotiator": [
                    "str"
                ],
                "state": [
                    "SAOState"
                ],
                "best_offer": [
                    "(Outcome | None)"
                ],
                "best_from": [
                    "(str | None)"
                ]
            }
        },
        "SAOSingleAgreementController.is_acceptable": {
            "name": "is_acceptable",
            "location": 560,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "Outcome"
                ],
                "source": [
                    "str"
                ],
                "state": [
                    "SAOState"
                ]
            }
        },
        "SAOSingleAgreementController.best_offer": {
            "name": "best_offer",
            "location": 574,
            "return": [
                "(str | None)"
            ],
            "arguments": {
                "self": [],
                "offers": [
                    "dict[(str, Outcome)]"
                ]
            }
        },
        "SAOSingleAgreementController.counter_all": {
            "name": "counter_all",
            "location": 586,
            "return": [
                "dict[(str, SAOResponse)]"
            ],
            "arguments": {
                "self": [],
                "offers": [
                    "dict[(str, Outcome)]"
                ],
                "states": [
                    "dict[(str, SAOState)]"
                ]
            }
        },
        "SAOSingleAgreementController.first_proposals": {
            "name": "first_proposals",
            "location": 694,
            "return": [
                "dict[(str, (Outcome | None))]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SAOSingleAgreementController.response_to_best_offer": {
            "name": "response_to_best_offer",
            "location": 707,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "negotiator": [
                    "str"
                ],
                "state": [
                    "SAOState"
                ],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "SAOSingleAgreementController.after_join": {
            "name": "after_join",
            "location": 725,
            "return": [],
            "arguments": {
                "self": [],
                "negotiator_id": [],
                "nmi": [],
                "state": []
            }
        },
        "SAOMetaNegotiatorController.__init__": {
            "name": "__init__",
            "location": 756,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SAOMetaNegotiatorController.propose": {
            "name": "propose",
            "location": 764,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "negotiator_id": [
                    "str"
                ],
                "state": [
                    "SAOState"
                ]
            }
        },
        "SAOMetaNegotiatorController.respond": {
            "name": "respond",
            "location": 772,
            "return": [
                "ResponseType"
            ],
            "arguments": {
                "self": [],
                "negotiator_id": [
                    "str"
                ],
                "state": [
                    "SAOState"
                ],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "SAOSingleAgreementRandomController.__init__": {
            "name": "__init__",
            "location": 792,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SAOSingleAgreementRandomController.is_acceptable": {
            "name": "is_acceptable",
            "location": 796,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "Outcome"
                ],
                "source": [
                    "str"
                ],
                "state": [
                    "SAOState"
                ]
            }
        },
        "SAOSingleAgreementRandomController.best_offer": {
            "name": "best_offer",
            "location": 799,
            "return": [
                "(str | None)"
            ],
            "arguments": {
                "self": [],
                "offers": [
                    "dict[(str, Outcome)]"
                ]
            }
        },
        "SAOSingleAgreementRandomController.is_better": {
            "name": "is_better",
            "location": 802,
            "return": [],
            "arguments": {
                "self": [],
                "a": [
                    "Outcome"
                ],
                "b": [
                    "Outcome"
                ],
                "negotiator": [
                    "str"
                ],
                "state": [
                    "SAOState"
                ]
            }
        },
        "SAOSingleAgreementAspirationController.__init__": {
            "name": "__init__",
            "location": 829,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SAOSingleAgreementAspirationController.utility_at": {
            "name": "utility_at",
            "location": 841,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "SAOSingleAgreementAspirationController.is_acceptable": {
            "name": "is_acceptable",
            "location": 844,
            "return": [],
            "arguments": {
                "self": [],
                "offer": [
                    "Outcome"
                ],
                "source": [
                    "str"
                ],
                "state": [
                    "SAOState"
                ]
            }
        },
        "SAOSingleAgreementAspirationController.is_better": {
            "name": "is_better",
            "location": 849,
            "return": [],
            "arguments": {
                "self": [],
                "a": [
                    "Outcome"
                ],
                "b": [
                    "Outcome"
                ],
                "negotiator": [
                    "str"
                ],
                "state": [
                    "SAOState"
                ]
            }
        },
        "SAOSingleAgreementAspirationController.best_offer": {
            "name": "best_offer",
            "location": 854,
            "return": [],
            "arguments": {
                "self": [],
                "offers": []
            }
        },
        "SAOSingleAgreementAspirationController.best_outcome": {
            "name": "best_outcome",
            "location": 866,
            "return": [],
            "arguments": {
                "self": [],
                "negotiator": [],
                "state": []
            }
        }
    },
    "negmas-master/negmas/sao/mechanism.py": {
        "SAOMechanism.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "dynamic_entry": [],
                "extra_callbacks": [],
                "end_on_no_response": [],
                "avoid_ultimatum": [],
                "check_offers": [],
                "enforce_issue_types": [],
                "cast_offers": [],
                "ignore_negotiator_exceptions": [],
                "offering_is_accepting": [],
                "allow_offering_just_rejected_outcome": [],
                "name": [
                    "(str | None)"
                ],
                "max_wait": [
                    "int"
                ],
                "sync_calls": [
                    "bool"
                ]
            }
        },
        "SAOMechanism.add": {
            "name": "add",
            "location": 153,
            "return": [
                "(bool | None)"
            ],
            "arguments": {
                "self": [],
                "negotiator": [
                    "SAONegotiator"
                ]
            }
        },
        "SAOMechanism.set_sync_call": {
            "name": "set_sync_call",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "v": [
                    "bool"
                ]
            }
        },
        "SAOMechanism._agent_info": {
            "name": "_agent_info",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SAOMechanism._stop_waiting": {
            "name": "_stop_waiting",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "negotiator_id": []
            }
        },
        "SAOMechanism.round": {
            "name": "round",
            "location": 203,
            "return": [
                "MechanismRoundResult"
            ],
            "arguments": {
                "self": []
            }
        },
        "SAOMechanism.full_trace": {
            "name": "full_trace",
            "location": 670,
            "return": [
                "list[TraceElement]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SAOMechanism.extended_trace": {
            "name": "extended_trace",
            "location": 719,
            "return": [
                "list[tuple[(int, str, Outcome)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SAOMechanism.trace": {
            "name": "trace",
            "location": 748,
            "return": [
                "list[tuple[(str, Outcome)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SAOMechanism.negotiator_offers": {
            "name": "negotiator_offers",
            "location": 775,
            "return": [
                "list[Outcome]"
            ],
            "arguments": {
                "self": [],
                "negotiator_id": [
                    "str"
                ]
            }
        },
        "SAOMechanism.negotiator_full_trace": {
            "name": "negotiator_full_trace",
            "location": 779,
            "return": [
                "list[tuple[(float, float, int, Outcome, str)]]"
            ],
            "arguments": {
                "self": [],
                "negotiator_id": [
                    "str"
                ]
            }
        },
        "SAOMechanism.offers": {
            "name": "offers",
            "location": 790,
            "return": [
                "list[Outcome]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SAOMechanism._step": {
            "name": "_step",
            "location": 795,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SAOMechanism.plot": {
            "name": "plot",
            "location": 801,
            "return": [],
            "arguments": {
                "self": [],
                "plotting_negotiators": [
                    "(tuple[(int, int)] | tuple[(str, str)])"
                ],
                "save_fig": [
                    "bool"
                ],
                "path": [
                    "(str | None)"
                ],
                "fig_name": [
                    "(str | None)"
                ],
                "ignore_none_offers": [
                    "bool"
                ],
                "with_lines": [
                    "bool"
                ],
                "show_agreement": [
                    "bool"
                ],
                "show_pareto_distance": [
                    "bool"
                ],
                "show_nash_distance": [
                    "bool"
                ],
                "show_end_reason": [
                    "bool"
                ],
                "show_last_negotiator": [
                    "bool"
                ],
                "show_annotations": [
                    "bool"
                ],
                "show_reserved": [
                    "bool"
                ],
                "colors": [
                    "(list | None)"
                ],
                "markers": [
                    "(list[str] | None)"
                ],
                "colormap": [
                    "str"
                ],
                "ylimits": [
                    "(tuple[(float, float)] | None)"
                ]
            }
        },
        "SAOMechanism.round._safe_counter": {
            "name": "_safe_counter",
            "location": 216,
            "return": [
                "tuple[((SAOResponse | None), bool)]"
            ],
            "arguments": {
                "negotiator": []
            }
        },
        "SAOMechanism.full_trace.response": {
            "name": "response",
            "location": 673,
            "return": [],
            "arguments": {
                "state": [
                    "SAOState"
                ]
            }
        },
        "SAOMechanism.full_trace.not_equal": {
            "name": "not_equal",
            "location": 694,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "SAOMechanism.extended_trace.not_equal": {
            "name": "not_equal",
            "location": 726,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "SAOMechanism.trace.not_equal": {
            "name": "not_equal",
            "location": 754,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        }
    },
    "negmas-master/negmas/sao/plots.py": {
        "get_cmap": {
            "name": "get_cmap",
            "location": 35,
            "return": [],
            "arguments": {
                "n": [],
                "name": []
            }
        },
        "make_colors_and_markers": {
            "name": "make_colors_and_markers",
            "location": 43,
            "return": [],
            "arguments": {
                "colors": [],
                "markers": [],
                "n": [
                    "int"
                ],
                "colormap": []
            }
        },
        "plot_offer_utilities": {
            "name": "plot_offer_utilities",
            "location": 52,
            "return": [],
            "arguments": {
                "trace": [
                    "list[TraceElement]"
                ],
                "negotiator": [
                    "str"
                ],
                "plotting_ufuns": [
                    "list[UtilityFunction]"
                ],
                "plotting_negotiators": [
                    "list[str]"
                ],
                "ignore_none_offers": [
                    "bool"
                ],
                "name_map": [
                    "((dict[(str, str)] | Callable[([str], str)]) | None)"
                ],
                "colors": [
                    "(list | None)"
                ],
                "markers": [
                    "(list | None)"
                ],
                "colormap": [
                    "str"
                ],
                "ax": [
                    "(Axes | None)"
                ],
                "sharey": [],
                "xdim": [
                    "str"
                ],
                "ylimits": [
                    "(tuple[(float, float)] | None)"
                ],
                "show_legend": [],
                "show_x_label": [],
                "ignore_markers_limit": [],
                "show_reserved": []
            }
        },
        "plot_2dutils": {
            "name": "plot_2dutils",
            "location": 150,
            "return": [],
            "arguments": {
                "trace": [
                    "list[TraceElement]"
                ],
                "plotting_ufuns": [
                    "list[UtilityFunction]"
                ],
                "plotting_negotiators": [
                    "list[str]"
                ],
                "offering_negotiators": [
                    "(list[str] | None)"
                ],
                "agreement": [
                    "(Outcome | None)"
                ],
                "outcome_space": [
                    "(OutcomeSpace | None)"
                ],
                "issues": [
                    "(list[Issue] | None)"
                ],
                "outcomes": [
                    "(list[Outcome] | None)"
                ],
                "with_lines": [
                    "bool"
                ],
                "show_annotations": [
                    "bool"
                ],
                "show_agreement": [
                    "bool"
                ],
                "show_pareto_distance": [
                    "bool"
                ],
                "show_nash_distance": [
                    "bool"
                ],
                "show_reserved": [
                    "bool"
                ],
                "end_reason": [
                    "(str | None)"
                ],
                "last_negotiator": [
                    "(str | None)"
                ],
                "name_map": [
                    "((dict[(str, str)] | Callable[([str], str)]) | None)"
                ],
                "colors": [
                    "(list | None)"
                ],
                "markers": [
                    "(list[str] | None)"
                ],
                "colormap": [
                    "str"
                ],
                "ax": [
                    "(Axes | None)"
                ]
            }
        },
        "plot_mechanism_run": {
            "name": "plot_mechanism_run",
            "location": 387,
            "return": [],
            "arguments": {
                "mechanism": [],
                "negotiators": [
                    "((tuple[(int, int)] | tuple[(str, str)]) | None)"
                ],
                "save_fig": [
                    "bool"
                ],
                "path": [
                    "(str | None)"
                ],
                "fig_name": [
                    "(str | None)"
                ],
                "ignore_none_offers": [
                    "bool"
                ],
                "with_lines": [
                    "bool"
                ],
                "show_agreement": [
                    "bool"
                ],
                "show_pareto_distance": [
                    "bool"
                ],
                "show_nash_distance": [
                    "bool"
                ],
                "show_end_reason": [
                    "bool"
                ],
                "show_last_negotiator": [
                    "bool"
                ],
                "show_annotations": [
                    "bool"
                ],
                "show_reserved": [
                    "bool"
                ],
                "colors": [
                    "(list | None)"
                ],
                "markers": [
                    "(list[str] | None)"
                ],
                "colormap": [
                    "str"
                ],
                "ylimits": [
                    "(tuple[(float, float)] | None)"
                ],
                "common_legend": []
            }
        }
    },
    "negmas-master/negmas/sao/__init__.py": {},
    "negmas-master/negmas/sao/components/acceptance.py": {
        "ACConst.__call__": {
            "name": "__call__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "offer": []
            }
        },
        "ACLastKReceived.after_join": {
            "name": "after_join",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nmi": []
            }
        },
        "ACLastKReceived.before_responding": {
            "name": "before_responding",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "offer": [
                    "(Outcome | None)"
                ]
            }
        },
        "ACLastKReceived.__call__": {
            "name": "__call__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "offer": []
            }
        },
        "ACLastFractionReceived.before_responding": {
            "name": "before_responding",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "offer": [
                    "(Outcome | None)"
                ]
            }
        },
        "ACLastFractionReceived.__call__": {
            "name": "__call__",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "offer": []
            }
        },
        "AcceptFinalOffer.__call__": {
            "name": "__call__",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "offer": []
            }
        },
        "ACLast.after_proposing": {
            "name": "after_proposing",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "offer": [
                    "(Outcome | None)"
                ]
            }
        },
        "ACLast.__call__": {
            "name": "__call__",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "offer": []
            }
        },
        "AcceptBetween.__call__": {
            "name": "__call__",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "offer": []
            }
        },
        "ACTime.__call__": {
            "name": "__call__",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "offer": []
            }
        },
        "ACNext.__call__": {
            "name": "__call__",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "offer": []
            }
        },
        "TFTAcceptanceStrategy.__call__": {
            "name": "__call__",
            "location": 252,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "offer": []
            }
        },
        "RandomAcceptanceStrategy.__call__": {
            "name": "__call__",
            "location": 278,
            "return": [
                "ResponseType"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "AcceptBest.on_preferences_changed": {
            "name": "on_preferences_changed",
            "location": 300,
            "return": [],
            "arguments": {
                "self": [],
                "changes": [
                    "list[PreferencesChange]"
                ]
            }
        },
        "AcceptBest.__call__": {
            "name": "__call__",
            "location": 304,
            "return": [
                "ResponseType"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "AcceptTop.on_preferences_changed": {
            "name": "on_preferences_changed",
            "location": 325,
            "return": [],
            "arguments": {
                "self": [],
                "changes": [
                    "list[PreferencesChange]"
                ]
            }
        },
        "AcceptTop.__call__": {
            "name": "__call__",
            "location": 339,
            "return": [
                "ResponseType"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "AcceptAbove.on_preferences_changed": {
            "name": "on_preferences_changed",
            "location": 360,
            "return": [],
            "arguments": {
                "self": [],
                "changes": [
                    "list[PreferencesChange]"
                ]
            }
        },
        "AcceptAbove.__call__": {
            "name": "__call__",
            "location": 364,
            "return": [
                "ResponseType"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "EndImmediately.__call__": {
            "name": "__call__",
            "location": 381,
            "return": [
                "ResponseType"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "RejectAlways.__call__": {
            "name": "__call__",
            "location": 391,
            "return": [
                "ResponseType"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "AcceptImmediately.__call__": {
            "name": "__call__",
            "location": 401,
            "return": [
                "ResponseType"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "LimitedOutcomesAcceptanceStrategy.from_outcome_list": {
            "name": "from_outcome_list",
            "location": 420,
            "return": [],
            "arguments": {
                "cls": [],
                "outcomes": [
                    "list[Outcome]"
                ],
                "prob": [
                    "(list[float] | float)"
                ],
                "p_ending": [
                    "float"
                ]
            }
        },
        "LimitedOutcomesAcceptanceStrategy.__call__": {
            "name": "__call__",
            "location": 432,
            "return": [
                "ResponseType"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "NegotiatorAcceptanceStrategy.__call__": {
            "name": "__call__",
            "location": 454,
            "return": [
                "ResponseType"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "ConcensusAcceptanceStrategy.filter": {
            "name": "filter",
            "location": 466,
            "return": [
                "FilterResult"
            ],
            "arguments": {
                "self": [],
                "indx": [
                    "int"
                ],
                "response": [
                    "ResponseType"
                ]
            }
        },
        "ConcensusAcceptanceStrategy.decide": {
            "name": "decide",
            "location": 480,
            "return": [
                "ResponseType"
            ],
            "arguments": {
                "self": [],
                "indices": [
                    "list[int]"
                ],
                "responses": [
                    "list[ResponseType]"
                ]
            }
        },
        "ConcensusAcceptanceStrategy.__call__": {
            "name": "__call__",
            "location": 485,
            "return": [
                "ResponseType"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "AllAcceptanceStrategies.filter": {
            "name": "filter",
            "location": 503,
            "return": [
                "FilterResult"
            ],
            "arguments": {
                "self": [],
                "indx": [
                    "int"
                ],
                "response": [
                    "ResponseType"
                ]
            }
        },
        "AllAcceptanceStrategies.decide": {
            "name": "decide",
            "location": 510,
            "return": [
                "ResponseType"
            ],
            "arguments": {
                "self": [],
                "indices": [
                    "list[int]"
                ],
                "responses": [
                    "list[ResponseType]"
                ]
            }
        },
        "AnyAcceptanceStrategy.filter": {
            "name": "filter",
            "location": 520,
            "return": [
                "FilterResult"
            ],
            "arguments": {
                "self": [],
                "indx": [
                    "int"
                ],
                "response": [
                    "ResponseType"
                ]
            }
        },
        "AnyAcceptanceStrategy.decide": {
            "name": "decide",
            "location": 527,
            "return": [
                "ResponseType"
            ],
            "arguments": {
                "self": [],
                "indices": [
                    "list[int]"
                ],
                "responses": [
                    "list[ResponseType]"
                ]
            }
        }
    },
    "negmas-master/negmas/sao/components/base.py": {
        "SAOComponent.before_proposing": {
            "name": "before_proposing",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ]
            }
        },
        "SAOComponent.after_proposing": {
            "name": "after_proposing",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "offer": [
                    "(Outcome | None)"
                ]
            }
        },
        "SAOComponent.before_responding": {
            "name": "before_responding",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "offer": [
                    "(Outcome | None)"
                ]
            }
        },
        "SAOComponent.after_responding": {
            "name": "after_responding",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "offer": [
                    "(Outcome | None)"
                ],
                "response": [
                    "ResponseType"
                ]
            }
        },
        "SAOComponent.on_partner_joined": {
            "name": "on_partner_joined",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "partner": [
                    "str"
                ]
            }
        },
        "SAOComponent.on_partner_left": {
            "name": "on_partner_left",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "partner": [
                    "str"
                ]
            }
        },
        "SAOComponent.on_partner_ended": {
            "name": "on_partner_ended",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "partner": [
                    "str"
                ]
            }
        },
        "SAOComponent.on_partner_proposal": {
            "name": "on_partner_proposal",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "partner_id": [
                    "str"
                ],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "SAOComponent.on_partner_refused_to_propose": {
            "name": "on_partner_refused_to_propose",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "partner_id": [
                    "str"
                ]
            }
        },
        "SAOComponent.on_partner_response": {
            "name": "on_partner_response",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "partner_id": [
                    "str"
                ],
                "outcome": [
                    "(Outcome | None)"
                ],
                "response": [
                    "ResponseType"
                ]
            }
        },
        "AcceptanceStrategy.respond": {
            "name": "respond",
            "location": 125,
            "return": [
                "ResponseType"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "offer": [
                    "(Outcome | None)"
                ]
            }
        },
        "AcceptanceStrategy.__not__": {
            "name": "__not__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AcceptanceStrategy.__call__": {
            "name": "__call__",
            "location": 147,
            "return": [
                "ResponseType"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "offer": [
                    "(Outcome | None)"
                ]
            }
        },
        "AcceptanceStrategy.__and__": {
            "name": "__and__",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "s": [
                    "AcceptanceStrategy"
                ]
            }
        },
        "AcceptanceStrategy.__or__": {
            "name": "__or__",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "s": [
                    "AcceptanceStrategy"
                ]
            }
        },
        "RejectionStrategy.__call__": {
            "name": "__call__",
            "location": 173,
            "return": [
                "ResponseType"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "offer": [
                    "(Outcome | None)"
                ]
            }
        },
        "OfferingStrategy.propose": {
            "name": "propose",
            "location": 184,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ]
            }
        },
        "OfferingStrategy.__call__": {
            "name": "__call__",
            "location": 203,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ]
            }
        },
        "OfferingStrategy.__and__": {
            "name": "__and__",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "s": [
                    "OfferingStrategy"
                ]
            }
        },
        "OfferingStrategy.__or__": {
            "name": "__or__",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "s": [
                    "OfferingStrategy"
                ]
            }
        }
    },
    "negmas-master/negmas/sao/components/concession.py": {
        "ConcessionRecommender.__call__": {
            "name": "__call__",
            "location": 29,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "partner_concession": [
                    "Value"
                ],
                "state": [
                    "SAOState"
                ]
            }
        },
        "KindConcessionRecommender.set_inverter": {
            "name": "set_inverter",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inverter": [
                    "(UtilityInverter | None)"
                ]
            }
        },
        "KindConcessionRecommender.set_negotiator": {
            "name": "set_negotiator",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "negotiator": [
                    "SAONegotiator"
                ]
            }
        },
        "KindConcessionRecommender.__call__": {
            "name": "__call__",
            "location": 61,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "partner_concession": [
                    "Value"
                ],
                "state": [
                    "SAOState"
                ]
            }
        }
    },
    "negmas-master/negmas/sao/components/inverter.py": {
        "make_inverter": {
            "name": "make_inverter",
            "location": 28,
            "return": [
                "InverseUFun"
            ],
            "arguments": {
                "ufun": [
                    "BaseUtilityFunction"
                ],
                "ufun_inverter": [
                    "(Callable[([BaseUtilityFunction], InverseUFun)] | None)"
                ],
                "rank_only": [
                    "bool"
                ],
                "max_cardinality": [
                    "(int | float)"
                ]
            }
        },
        "UtilityBasedOutcomeSetRecommender.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "rank_only": [
                    "bool"
                ],
                "ufun_inverter": [
                    "(Callable[([BaseUtilityFunction], InverseUFun)] | None)"
                ],
                "max_cardinality": [
                    "(int | float)"
                ],
                "eps": [
                    "float"
                ],
                "inversion_method": [
                    "((((Literal['min'] | Literal['max']) | Literal['one']) | Literal['some']) | Literal['all'])"
                ]
            }
        },
        "UtilityBasedOutcomeSetRecommender.set_negotiator": {
            "name": "set_negotiator",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "negotiator": [
                    "SAONegotiator"
                ]
            }
        },
        "UtilityBasedOutcomeSetRecommender.on_preferences_changed": {
            "name": "on_preferences_changed",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "changes": [
                    "list[PreferencesChange]"
                ]
            }
        },
        "UtilityBasedOutcomeSetRecommender.before_proposing": {
            "name": "before_proposing",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ]
            }
        },
        "UtilityBasedOutcomeSetRecommender.scale_utilities": {
            "name": "scale_utilities",
            "location": 143,
            "return": [
                "tuple[(float, ...)]"
            ],
            "arguments": {
                "self": [],
                "urange": [
                    "tuple[(float, ...)]"
                ]
            }
        },
        "UtilityBasedOutcomeSetRecommender.tolerance": {
            "name": "tolerance",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UtilityBasedOutcomeSetRecommender.ufun_max": {
            "name": "ufun_max",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UtilityBasedOutcomeSetRecommender.ufun_min": {
            "name": "ufun_min",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UtilityBasedOutcomeSetRecommender.__call__": {
            "name": "__call__",
            "location": 183,
            "return": [
                "Sequence[Outcome]"
            ],
            "arguments": {
                "self": [],
                "urange": [
                    "tuple[(float, float)]"
                ],
                "state": [
                    "SAOState"
                ]
            }
        },
        "UtilityInverter.set_negotiator": {
            "name": "set_negotiator",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "negotiator": [
                    "SAONegotiator"
                ]
            }
        },
        "UtilityInverter.__init__": {
            "name": "__init__",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UtilityInverter.on_preferences_changed": {
            "name": "on_preferences_changed",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "changes": [
                    "list[PreferencesChange]"
                ]
            }
        },
        "UtilityInverter.before_proposing": {
            "name": "before_proposing",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ]
            }
        },
        "UtilityInverter.scale_utilities": {
            "name": "scale_utilities",
            "location": 243,
            "return": [],
            "arguments": {
                "self": [],
                "urange": []
            }
        },
        "UtilityInverter.tolerance": {
            "name": "tolerance",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UtilityInverter.ufun_max": {
            "name": "ufun_max",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UtilityInverter.ufun_min": {
            "name": "ufun_min",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UtilityInverter.__call__": {
            "name": "__call__",
            "location": 258,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "urange": [
                    "tuple[(float, float)]"
                ],
                "state": [
                    "SAOState"
                ]
            }
        }
    },
    "negmas-master/negmas/sao/components/offering.py": {
        "TFTOfferingStrategy.before_responding": {
            "name": "before_responding",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "offer": [
                    "(Outcome | None)"
                ]
            }
        },
        "TFTOfferingStrategy.__call__": {
            "name": "__call__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "OfferBest.on_preferences_changed": {
            "name": "on_preferences_changed",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "changes": [
                    "list[PreferencesChange]"
                ]
            }
        },
        "OfferBest.__call__": {
            "name": "__call__",
            "location": 99,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ]
            }
        },
        "OfferTop.on_preferences_changed": {
            "name": "on_preferences_changed",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "changes": [
                    "list[PreferencesChange]"
                ]
            }
        },
        "OfferTop.__call__": {
            "name": "__call__",
            "location": 129,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ]
            }
        },
        "NoneOfferingStrategy.__call__": {
            "name": "__call__",
            "location": 144,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ]
            }
        },
        "RandomOfferingStrategy.__call__": {
            "name": "__call__",
            "location": 154,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ]
            }
        },
        "LimitedOutcomesOfferingStrategy.__call__": {
            "name": "__call__",
            "location": 170,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "retry": []
            }
        },
        "NegotiatorOfferingStrategy.__call__": {
            "name": "__call__",
            "location": 202,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ]
            }
        },
        "ConcensusOfferingStrategy.filter": {
            "name": "filter",
            "location": 214,
            "return": [
                "FilterResult"
            ],
            "arguments": {
                "self": [],
                "indx": [
                    "int"
                ],
                "offer": [
                    "(Outcome | None)"
                ]
            }
        },
        "ConcensusOfferingStrategy.decide": {
            "name": "decide",
            "location": 228,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "indices": [
                    "list[int]"
                ],
                "responses": [
                    "list[(Outcome | None)]"
                ]
            }
        },
        "ConcensusOfferingStrategy.__call__": {
            "name": "__call__",
            "location": 235,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ]
            }
        },
        "UnanimousConcensusOfferingStrategy.decide": {
            "name": "decide",
            "location": 255,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "indices": [
                    "list[int]"
                ],
                "responses": [
                    "list[(Outcome | None)]"
                ]
            }
        },
        "RandomConcensusOfferingStrategy.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RandomConcensusOfferingStrategy.decide": {
            "name": "decide",
            "location": 278,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "indices": [
                    "list[int]"
                ],
                "responses": [
                    "list[(Outcome | None)]"
                ]
            }
        },
        "UtilBasedConcensusOfferingStrategy.decide_util": {
            "name": "decide_util",
            "location": 301,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "utils": [
                    "list[Value]"
                ]
            }
        },
        "UtilBasedConcensusOfferingStrategy.decide": {
            "name": "decide",
            "location": 306,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "indices": [
                    "list[int]"
                ],
                "responses": [
                    "list[(Outcome | None)]"
                ]
            }
        },
        "MyBestConcensusOfferingStrategy.decide_util": {
            "name": "decide_util",
            "location": 322,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "utils": [
                    "list[Value]"
                ]
            }
        },
        "MyWorstConcensusOfferingStrategy.decide_util": {
            "name": "decide_util",
            "location": 332,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "utils": [
                    "list[Value]"
                ]
            }
        }
    },
    "negmas-master/negmas/sao/components/selectors.py": {
        "additive_score": {
            "name": "additive_score",
            "location": 42,
            "return": [
                "Sequence[tuple[(float, Outcome)]]"
            ],
            "arguments": {
                "outcomes": [
                    "Sequence[Outcome]"
                ],
                "partner_offers": [
                    "Sequence[Outcome]"
                ],
                "ufun": [
                    "BaseUtilityFunction"
                ],
                "distance_fun": [
                    "DistanceFun"
                ],
                "u_weight": [
                    "float"
                ]
            }
        },
        "multiplicative_score": {
            "name": "multiplicative_score",
            "location": 80,
            "return": [
                "Sequence[tuple[(float, Outcome)]]"
            ],
            "arguments": {
                "outcomes": [
                    "Sequence[Outcome]"
                ],
                "partner_offers": [
                    "Sequence[Outcome]"
                ],
                "ufun": [
                    "BaseUtilityFunction"
                ],
                "distance_fun": [
                    "DistanceFun"
                ]
            }
        },
        "make_inverter": {
            "name": "make_inverter",
            "location": 114,
            "return": [
                "InverseUFun"
            ],
            "arguments": {
                "ufun": [
                    "BaseUtilityFunction"
                ],
                "ufun_inverter": [
                    "(Callable[([BaseUtilityFunction], InverseUFun)] | None)"
                ],
                "rank_only": [
                    "bool"
                ],
                "max_cardinality": [
                    "int"
                ]
            }
        },
        "NoFiltering": {
            "name": "NoFiltering",
            "location": 147,
            "return": [
                "Sequence[Outcome]"
            ],
            "arguments": {
                "outcomes": [
                    "Sequence[Outcome]"
                ],
                "state": [
                    "SAOState"
                ]
            }
        },
        "KeepFirst": {
            "name": "KeepFirst",
            "location": 151,
            "return": [
                "Sequence[Outcome]"
            ],
            "arguments": {
                "outcomes": [
                    "Sequence[Outcome]"
                ],
                "state": [
                    "SAOState"
                ]
            }
        },
        "KeepLast": {
            "name": "KeepLast",
            "location": 155,
            "return": [
                "Sequence[Outcome]"
            ],
            "arguments": {
                "outcomes": [
                    "Sequence[Outcome]"
                ],
                "state": [
                    "SAOState"
                ]
            }
        },
        "OfferFilterProtocol.__call__": {
            "name": "__call__",
            "location": 141,
            "return": [
                "Sequence[Outcome]"
            ],
            "arguments": {
                "self": [],
                "outcomes": [
                    "Sequence[Outcome]"
                ],
                "state": [
                    "SAOState"
                ]
            }
        },
        "OfferSelectorProtocol.__call__": {
            "name": "__call__",
            "location": 164,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "outcomes": [
                    "Sequence[Outcome]"
                ],
                "state": [
                    "SAOState"
                ]
            }
        },
        "OfferSelector.__call__": {
            "name": "__call__",
            "location": 174,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "outcomes": [
                    "Sequence[Outcome]"
                ],
                "state": [
                    "SAOState"
                ]
            }
        },
        "RandomOfferSelector.__call__": {
            "name": "__call__",
            "location": 179,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "outcomes": [
                    "Sequence[Outcome]"
                ],
                "state": [
                    "SAOState"
                ]
            }
        },
        "BestOfferSelector.__call__": {
            "name": "__call__",
            "location": 186,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "outcomes": [
                    "Sequence[Outcome]"
                ],
                "state": [
                    "SAOState"
                ]
            }
        },
        "MedianOfferSelector.__call__": {
            "name": "__call__",
            "location": 207,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "outcomes": [
                    "Sequence[Outcome]"
                ],
                "state": [
                    "SAOState"
                ]
            }
        },
        "WorstOfferSelector.__call__": {
            "name": "__call__",
            "location": 229,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "outcomes": [
                    "Sequence[Outcome]"
                ],
                "state": [
                    "SAOState"
                ]
            }
        },
        "OfferOrientedSelector.__init__": {
            "name": "__init__",
            "location": 254,
            "return": [],
            "arguments": {
                "self": [],
                "distance_fun": [
                    "DistanceFun"
                ]
            }
        },
        "OfferOrientedSelector.__call__": {
            "name": "__call__",
            "location": 261,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "outcomes": [
                    "Sequence[Outcome]"
                ],
                "state": [
                    "SAOState"
                ]
            }
        },
        "FirstOfferOrientedSelector.before_responding": {
            "name": "before_responding",
            "location": 284,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "offer": [
                    "(Outcome | None)"
                ]
            }
        },
        "LastOfferOrientedSelector.before_responding": {
            "name": "before_responding",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "offer": [
                    "(Outcome | None)"
                ]
            }
        },
        "BestOfferOrientedSelector.before_responding": {
            "name": "before_responding",
            "location": 310,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "offer": [
                    "(Outcome | None)"
                ]
            }
        },
        "OutcomeSetOrientedSelector.__init__": {
            "name": "__init__",
            "location": 330,
            "return": [],
            "arguments": {
                "self": [],
                "distance_fun": [
                    "DistanceFun"
                ],
                "offer_filter": [
                    "OfferFilterProtocol"
                ]
            }
        },
        "OutcomeSetOrientedSelector.calculate_scores": {
            "name": "calculate_scores",
            "location": 342,
            "return": [
                "Sequence[tuple[(float, Outcome)]]"
            ],
            "arguments": {
                "self": [],
                "outcomes": [
                    "Sequence[Outcome]"
                ],
                "pivots": [
                    "list[Outcome]"
                ],
                "state": [
                    "SAOState"
                ]
            }
        },
        "OutcomeSetOrientedSelector.__call__": {
            "name": "__call__",
            "location": 347,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "outcomes": [
                    "Sequence[Outcome]"
                ],
                "state": [
                    "SAOState"
                ]
            }
        },
        "PartnerOffersOrientedSelector.before_responding": {
            "name": "before_responding",
            "location": 366,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "offer": [
                    "(Outcome | None)"
                ]
            }
        },
        "MultiplicativePartnerOffersOrientedSelector.calculate_scores": {
            "name": "calculate_scores",
            "location": 380,
            "return": [
                "Sequence[tuple[(float, Outcome)]]"
            ],
            "arguments": {
                "self": [],
                "outcomes": [
                    "Sequence[Outcome]"
                ],
                "pivots": [
                    "list[Outcome]"
                ],
                "state": [
                    "SAOState"
                ]
            }
        },
        "AdditivePartnerOffersOrientedSelector.__init__": {
            "name": "__init__",
            "location": 402,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdditivePartnerOffersOrientedSelector.calculate_scores": {
            "name": "calculate_scores",
            "location": 406,
            "return": [
                "Sequence[tuple[(float, Outcome)]]"
            ],
            "arguments": {
                "self": [],
                "outcomes": [
                    "Sequence[Outcome]"
                ],
                "pivots": [
                    "list[Outcome]"
                ],
                "state": [
                    "SAOState"
                ]
            }
        }
    },
    "negmas-master/negmas/sao/components/__init__.py": {},
    "negmas-master/negmas/sao/components/models/ufun.py": {
        "ZeroSumModel.on_preferences_changed": {
            "name": "on_preferences_changed",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "changes": [
                    "list[PreferencesChange]"
                ]
            }
        },
        "ZeroSumModel.eval": {
            "name": "eval",
            "location": 60,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "ZeroSumModel.eval_normalized": {
            "name": "eval_normalized",
            "location": 65,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "(Outcome | None)"
                ],
                "above_reserve": [
                    "bool"
                ],
                "expected_limits": [
                    "bool"
                ]
            }
        },
        "FrequencyUFunModel.eval": {
            "name": "eval",
            "location": 85,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "FrequencyLinearUFunModel.eval": {
            "name": "eval",
            "location": 94,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "Outcome"
                ]
            }
        }
    },
    "negmas-master/negmas/sao/components/models/__init__.py": {},
    "negmas-master/negmas/sao/negotiators/base.py": {
        "SAONegotiator.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "preferences": [
                    "(Preferences | None)"
                ],
                "ufun": [
                    "(BaseUtilityFunction | None)"
                ],
                "name": [
                    "(str | None)"
                ],
                "parent": [
                    "(Controller | None)"
                ],
                "owner": [
                    "(Agent | None)"
                ],
                "id": [
                    "(str | None)"
                ],
                "type_name": [
                    "(str | None)"
                ],
                "can_propose": [
                    "bool"
                ]
            }
        },
        "SAONegotiator.on_notification": {
            "name": "on_notification",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "notification": [
                    "Notification"
                ],
                "notifier": [
                    "str"
                ]
            }
        },
        "SAONegotiator.propose": {
            "name": "propose",
            "location": 85,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ]
            }
        },
        "SAONegotiator.propose_": {
            "name": "propose_",
            "location": 99,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ]
            }
        },
        "SAONegotiator.respond": {
            "name": "respond",
            "location": 123,
            "return": [
                "ResponseType"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "SAONegotiator.respond_": {
            "name": "respond_",
            "location": 166,
            "return": [
                "ResponseType"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "SAONegotiator.counter": {
            "name": "counter",
            "location": 201,
            "return": [
                "SAOResponse"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "offer": [
                    "(Outcome | None)"
                ]
            }
        },
        "SAONegotiator.on_partner_proposal": {
            "name": "on_partner_proposal",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "partner_id": [
                    "str"
                ],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "SAONegotiator.on_partner_refused_to_propose": {
            "name": "on_partner_refused_to_propose",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "partner_id": [
                    "str"
                ]
            }
        },
        "SAONegotiator.on_partner_response": {
            "name": "on_partner_response",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "partner_id": [
                    "str"
                ],
                "outcome": [
                    "Outcome"
                ],
                "response": [
                    "ResponseType"
                ]
            }
        }
    },
    "negmas-master/negmas/sao/negotiators/controlled.py": {
        "ControlledSAONegotiator.propose": {
            "name": "propose",
            "location": 20,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "ControlledSAONegotiator.respond": {
            "name": "respond",
            "location": 25,
            "return": [
                "ResponseType"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "ControlledSAONegotiator.on_negotiation_start": {
            "name": "on_negotiation_start",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "ControlledSAONegotiator.on_negotiation_end": {
            "name": "on_negotiation_end",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "ControlledSAONegotiator.join": {
            "name": "join",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "nmi": [],
                "state": []
            }
        }
    },
    "negmas-master/negmas/sao/negotiators/limited.py": {
        "LimitedOutcomesNegotiator.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "acceptable_outcomes": [
                    "(list[Outcome] | None)"
                ],
                "acceptance_probabilities": [
                    "((float | list[float]) | None)"
                ],
                "proposable_outcomes": [
                    "(list[Outcome] | None)"
                ],
                "p_ending": [],
                "p_no_response": [],
                "preferences": [],
                "ufun": []
            }
        },
        "LimitedOutcomesAcceptor.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "acceptable_outcomes": [
                    "(list[Outcome] | None)"
                ],
                "acceptance_probabilities": [
                    "(list[float] | None)"
                ],
                "p_ending": [],
                "preferences": [],
                "ufun": []
            }
        }
    },
    "negmas-master/negmas/sao/negotiators/nice.py": {
        "NiceNegotiator.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/sao/negotiators/randneg.py": {
        "RandomNegotiator.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p_acceptance": [],
                "p_rejection": [],
                "p_ending": [],
                "can_propose": []
            }
        }
    },
    "negmas-master/negmas/sao/negotiators/timebased.py": {
        "make_curve": {
            "name": "make_curve",
            "location": 45,
            "return": [
                "(TC | PolyAspiration)"
            ],
            "arguments": {
                "curve": [
                    "((((TC | Literal['boulware']) | Literal['conceder']) | Literal['linear']) | float)"
                ],
                "starting_utility": [
                    "float"
                ]
            }
        },
        "make_offer_selector": {
            "name": "make_offer_selector",
            "location": 59,
            "return": [
                "Callable[([tuple[(float, float)], bool], (Outcome | None))]"
            ],
            "arguments": {
                "inverse_ufun": [
                    "InverseUFun"
                ],
                "selector": [
                    "(((Callable[([Sequence[Outcome]], Outcome)] | Literal['best']) | Literal['worst']) | None)"
                ]
            }
        },
        "TimeBasedNegotiator.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeBasedNegotiator.utility_range_to_propose": {
            "name": "utility_range_to_propose",
            "location": 122,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "TimeBasedNegotiator.utility_range_to_accept": {
            "name": "utility_range_to_accept",
            "location": 125,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "TimeBasedConcedingNegotiator.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoulwareTBNegotiator.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinearTBNegotiator.__init__": {
            "name": "__init__",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConcederTBNegotiator.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AspirationNegotiator.__init__": {
            "name": "__init__",
            "location": 232,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AspirationNegotiator.tolerance": {
            "name": "tolerance",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AspirationNegotiator.utility_at": {
            "name": "utility_at",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "AspirationNegotiator.ufun_max": {
            "name": "ufun_max",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AspirationNegotiator.ufun_min": {
            "name": "ufun_min",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OfferOrientedNegotiator.__init__": {
            "name": "__init__",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FirstOfferOrientedTBNegotiator.__init__": {
            "name": "__init__",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BestOfferOrientedTBNegotiator.__init__": {
            "name": "__init__",
            "location": 301,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LastOfferOrientedTBNegotiator.__init__": {
            "name": "__init__",
            "location": 316,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiplicativeParetoFollowingTBNegotiator.__init__": {
            "name": "__init__",
            "location": 333,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdditiveParetoFollowingTBNegotiator.__init__": {
            "name": "__init__",
            "location": 359,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiplicativeLastOfferFollowingTBNegotiator.__init__": {
            "name": "__init__",
            "location": 385,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdditiveLastOfferFollowingTBNegotiator.__init__": {
            "name": "__init__",
            "location": 408,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiplicativeFirstFollowingTBNegotiator.__init__": {
            "name": "__init__",
            "location": 431,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdditiveFirstFollowingTBNegotiator.__init__": {
            "name": "__init__",
            "location": 454,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/sao/negotiators/titfortat.py": {
        "NaiveTitForTatNegotiator.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/sao/negotiators/tough.py": {
        "ToughNegotiator.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "can_propose": []
            }
        },
        "TopFractionNegotiator.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "min_utility": [],
                "top_fraction": [],
                "best_first": [],
                "can_propose": []
            }
        },
        "TopFractionNegotiator.propose": {
            "name": "propose",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        }
    },
    "negmas-master/negmas/sao/negotiators/utilbased.py": {
        "UtilBasedNegotiator.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UtilBasedNegotiator.utility_range_to_propose": {
            "name": "utility_range_to_propose",
            "location": 56,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "UtilBasedNegotiator.utility_range_to_accept": {
            "name": "utility_range_to_accept",
            "location": 60,
            "return": [
                "tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "UtilBasedNegotiator.respond": {
            "name": "respond",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "offer": []
            }
        },
        "UtilBasedNegotiator.propose": {
            "name": "propose",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "UtilBasedNegotiator.on_preferences_changed": {
            "name": "on_preferences_changed",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "changes": [
                    "list[PreferencesChange]"
                ]
            }
        }
    },
    "negmas-master/negmas/sao/negotiators/__init__.py": {},
    "negmas-master/negmas/sao/negotiators/modular/boa.py": {
        "make_boa": {
            "name": "make_boa",
            "location": 15,
            "return": [],
            "arguments": {
                "acceptance": [
                    "((AcceptanceStrategy | SAONegotiator) | None)"
                ],
                "offering": [
                    "((OfferingStrategy | SAONegotiator) | None)"
                ],
                "model": [
                    "(Model | None)"
                ],
                "extra_components": [
                    "(list[SAOComponent] | None)"
                ],
                "extra_component_names": [
                    "(list[str] | None)"
                ]
            }
        },
        "BOANegotiator.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [],
            "arguments": {}
        }
    },
    "negmas-master/negmas/sao/negotiators/modular/mapneg.py": {
        "MAPNegotiator.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MAPNegotiator.generate_response": {
            "name": "generate_response",
            "location": 76,
            "return": [
                "ResponseType"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "MAPNegotiator.generate_proposal": {
            "name": "generate_proposal",
            "location": 81,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ]
            }
        }
    },
    "negmas-master/negmas/sao/negotiators/modular/modular.py": {
        "SAOModularNegotiator.components": {
            "name": "components",
            "location": 27,
            "return": [
                "tuple[(SAOComponent, ...)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SAOModularNegotiator.generate_response": {
            "name": "generate_response",
            "location": 31,
            "return": [
                "ResponseType"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "SAOModularNegotiator.generate_proposal": {
            "name": "generate_proposal",
            "location": 35,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ]
            }
        },
        "SAOModularNegotiator.propose": {
            "name": "propose",
            "location": 38,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ]
            }
        },
        "SAOModularNegotiator.respond": {
            "name": "respond",
            "location": 46,
            "return": [
                "ResponseType"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "SAOModularNegotiator.on_partner_joined": {
            "name": "on_partner_joined",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "partner": [
                    "str"
                ]
            }
        },
        "SAOModularNegotiator.on_partner_left": {
            "name": "on_partner_left",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "partner": [
                    "str"
                ]
            }
        },
        "SAOModularNegotiator.on_partner_ended": {
            "name": "on_partner_ended",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "partner": [
                    "str"
                ]
            }
        },
        "SAOModularNegotiator.on_partner_proposal": {
            "name": "on_partner_proposal",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "partner_id": [
                    "str"
                ],
                "offer": [
                    "Outcome"
                ]
            }
        },
        "SAOModularNegotiator.on_partner_refused_to_propose": {
            "name": "on_partner_refused_to_propose",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "partner_id": [
                    "str"
                ]
            }
        },
        "SAOModularNegotiator.on_partner_response": {
            "name": "on_partner_response",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SAOState"
                ],
                "partner_id": [
                    "str"
                ],
                "outcome": [
                    "Outcome"
                ],
                "response": [
                    "ResponseType"
                ]
            }
        }
    },
    "negmas-master/negmas/sao/negotiators/modular/__init__.py": {},
    "negmas-master/negmas/scripts/app.py": {
        "default_log_path": {
            "name": "default_log_path",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "default_tournament_path": {
            "name": "default_tournament_path",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "print_progress": {
            "name": "print_progress",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [],
                "i": [],
                "n": []
            }
        },
        "print_world_progress": {
            "name": "print_world_progress",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "world": []
            }
        },
        "cli": {
            "name": "cli",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "tournament": {
            "name": "tournament",
            "location": 108,
            "return": [],
            "arguments": {
                "ctx": [],
                "ignore_warnings": []
            }
        },
        "create": {
            "name": "create",
            "location": 246,
            "return": [],
            "arguments": {
                "ctx": [],
                "name": [],
                "timeout": [],
                "log": [],
                "verbosity": [],
                "reveal_names": [],
                "runs": [],
                "configs": [],
                "max_runs": [],
                "competitors": [],
                "world_config": [],
                "non_competitors": [],
                "compact": [],
                "agents": [],
                "log_ufuns": [],
                "log_negs": [],
                "raise_exceptions": [],
                "steps_min": [],
                "steps_max": [],
                "path": [],
                "cw": [],
                "world_generator": [],
                "config_generator": [],
                "assigner": [],
                "scorer": []
            }
        },
        "display_results": {
            "name": "display_results",
            "location": 449,
            "return": [],
            "arguments": {
                "results": [],
                "metric": [],
                "significance": []
            }
        },
        "run": {
            "name": "run",
            "location": 577,
            "return": [],
            "arguments": {
                "ctx": [],
                "name": [],
                "verbosity": [],
                "parallel": [],
                "distributed": [],
                "ip": [],
                "port": [],
                "compact": [],
                "path": [],
                "log": [],
                "metric": [],
                "significance": [],
                "eval": []
            }
        },
        "eval": {
            "name": "eval",
            "location": 658,
            "return": [],
            "arguments": {
                "ctx": [],
                "path": [],
                "metric": [],
                "significance": [],
                "compile": [],
                "verbose": []
            }
        },
        "winners": {
            "name": "winners",
            "location": 709,
            "return": [],
            "arguments": {
                "ctx": [],
                "name": [],
                "log": [],
                "recursive": [],
                "metric": [],
                "significance": [],
                "compile": [],
                "verbose": []
            }
        },
        "_path": {
            "name": "_path",
            "location": 740,
            "return": [
                "Path"
            ],
            "arguments": {
                "path": []
            }
        },
        "combine": {
            "name": "combine",
            "location": 773,
            "return": [],
            "arguments": {
                "path": [],
                "dest": [],
                "verbose": []
            }
        },
        "combine_results": {
            "name": "combine_results",
            "location": 815,
            "return": [],
            "arguments": {
                "path": [],
                "dest": [],
                "metric": [],
                "significance": [],
                "compile": [],
                "verbose": []
            }
        },
        "genius": {
            "name": "genius",
            "location": 856,
            "return": [],
            "arguments": {
                "path": [],
                "port": [],
                "debug": [],
                "timeout": []
            }
        },
        "download_and_set": {
            "name": "download_and_set",
            "location": 870,
            "return": [],
            "arguments": {
                "key": [],
                "url": [],
                "file_name": []
            }
        },
        "genius_setup": {
            "name": "genius_setup",
            "location": 899,
            "return": [],
            "arguments": {}
        },
        "version": {
            "name": "version",
            "location": 907,
            "return": [],
            "arguments": {}
        },
        "gui_option": {
            "name": "gui_option",
            "location": 38,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "negmas-master/negmas/scripts/__init__.py": {},
    "negmas-master/negmas/scripts/vendor/__init__.py": {},
    "negmas-master/negmas/scripts/vendor/quick/quick.py": {
        "generate_label": {
            "name": "generate_label",
            "location": 211,
            "return": [],
            "arguments": {
                "opt": []
            }
        },
        "argument_command": {
            "name": "argument_command",
            "location": 334,
            "return": [],
            "arguments": {
                "to_command": []
            }
        },
        "bool_flag_option": {
            "name": "bool_flag_option",
            "location": 414,
            "return": [],
            "arguments": {
                "opt": []
            }
        },
        "count_option": {
            "name": "count_option",
            "location": 439,
            "return": [],
            "arguments": {
                "opt": []
            }
        },
        "multi_text_arguement": {
            "name": "multi_text_arguement",
            "location": 459,
            "return": [],
            "arguments": {
                "opt": []
            }
        },
        "select_type_validator": {
            "name": "select_type_validator",
            "location": 474,
            "return": [
                "QtGui.QValidator"
            ],
            "arguments": {
                "tp": [
                    "click.types.ParamType"
                ]
            }
        },
        "select_opt_validator": {
            "name": "select_opt_validator",
            "location": 484,
            "return": [],
            "arguments": {
                "opt": []
            }
        },
        "opt_to_widget": {
            "name": "opt_to_widget",
            "location": 489,
            "return": [],
            "arguments": {
                "opt": []
            }
        },
        "_to_widget": {
            "name": "_to_widget",
            "location": 509,
            "return": [],
            "arguments": {
                "opt": []
            }
        },
        "layout_append_opts": {
            "name": "layout_append_opts",
            "location": 528,
            "return": [],
            "arguments": {
                "layout": [],
                "opts": []
            }
        },
        "generate_sysargv": {
            "name": "generate_sysargv",
            "location": 547,
            "return": [],
            "arguments": {
                "cmd_list": []
            }
        },
        "gui_it": {
            "name": "gui_it",
            "location": 830,
            "return": [
                "None"
            ],
            "arguments": {
                "click_func": [],
                "style": []
            }
        },
        "gui_option": {
            "name": "gui_option",
            "location": 849,
            "return": [
                "click.core.BaseCommand"
            ],
            "arguments": {
                "f": [
                    "click.core.BaseCommand"
                ]
            }
        },
        "GStyle.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "style": []
            }
        },
        "GStyle.check_style": {
            "name": "check_style",
            "location": 91,
            "return": [],
            "arguments": {
                "style": []
            }
        },
        "GListView.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "opt": []
            }
        },
        "GListView.key_press": {
            "name": "key_press",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "GItemModel.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "n": [],
                "parent": [],
                "opt_type": [],
                "default": []
            }
        },
        "GItemModel.insertRow": {
            "name": "insertRow",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "idx": [],
                "val": []
            }
        },
        "GItemModel.data": {
            "name": "data",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "role": []
            }
        },
        "GEditDelegate.createEditor": {
            "name": "createEditor",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [],
                "option": [],
                "index": []
            }
        },
        "GEditDelegate.setEditorData": {
            "name": "setEditorData",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "editor": [],
                "index": []
            }
        },
        "GEditDelegate.setModelData": {
            "name": "setModelData",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "editor": [],
                "model": [],
                "index": []
            }
        },
        "GStringLineEditor.to_widget": {
            "name": "to_widget",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "opt": [],
                "validator": []
            }
        },
        "GIntLineEditor.to_widget": {
            "name": "to_widget",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "opt": []
            }
        },
        "GFloatLineEditor.to_widget": {
            "name": "to_widget",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "opt": []
            }
        },
        "GFileDialog.__init__": {
            "name": "__init__",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GFileDialog.accept_all": {
            "name": "accept_all",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GLineEdit_path.__init__": {
            "name": "__init__",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [],
                "exists": [],
                "file_okay": [],
                "dir_okay": []
            }
        },
        "GLineEdit_path.run_dialog": {
            "name": "run_dialog",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GLineEdit_path.from_option": {
            "name": "from_option",
            "location": 293,
            "return": [],
            "arguments": {
                "opt": [],
                "parent": []
            }
        },
        "GPathGLindEidt_path.to_widget": {
            "name": "to_widget",
            "location": 302,
            "return": [],
            "arguments": {
                "self": [],
                "opt": []
            }
        },
        "_GLabeledSlider.__init__": {
            "name": "__init__",
            "location": 316,
            "return": [],
            "arguments": {
                "self": [],
                "min": [],
                "max": [],
                "val": []
            }
        },
        "_GLabeledSlider.__init_label": {
            "name": "__init_label",
            "location": 326,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "argument_command.tc": {
            "name": "tc",
            "location": 335,
            "return": [],
            "arguments": {}
        },
        "GSlider.__init__": {
            "name": "__init__",
            "location": 342,
            "return": [],
            "arguments": {
                "self": [],
                "min": [],
                "max": [],
                "default": []
            }
        },
        "GSlider.value": {
            "name": "value",
            "location": 354,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GSlider.__init_slider": {
            "name": "__init_slider",
            "location": 357,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GSlider.__init_label": {
            "name": "__init_label",
            "location": 370,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GIntRangeGSlider.to_widget": {
            "name": "to_widget",
            "location": 379,
            "return": [],
            "arguments": {
                "self": [],
                "opt": []
            }
        },
        "GIntRangeSlider.to_widget": {
            "name": "to_widget",
            "location": 388,
            "return": [],
            "arguments": {
                "self": [],
                "opt": []
            }
        },
        "GIntRangeLineEditor.to_widget": {
            "name": "to_widget",
            "location": 405,
            "return": [],
            "arguments": {
                "self": [],
                "opt": []
            }
        },
        "bool_flag_option.to_command": {
            "name": "to_command",
            "location": 421,
            "return": [],
            "arguments": {}
        },
        "GChoiceComboBox.to_widget": {
            "name": "to_widget",
            "location": 430,
            "return": [],
            "arguments": {
                "self": [],
                "opt": []
            }
        },
        "count_option.to_command": {
            "name": "to_command",
            "location": 442,
            "return": [],
            "arguments": {}
        },
        "GTupleGListView.to_widget": {
            "name": "to_widget",
            "location": 448,
            "return": [],
            "arguments": {
                "self": [],
                "opt": []
            }
        },
        "multi_text_arguement.to_command": {
            "name": "to_command",
            "location": 462,
            "return": [],
            "arguments": {}
        },
        "_Spliter.__init__": {
            "name": "__init__",
            "location": 559,
            "return": [],
            "arguments": {
                "self": [],
                "parent": []
            }
        },
        "CommandLayout.__init__": {
            "name": "__init__",
            "location": 585,
            "return": [],
            "arguments": {
                "self": [],
                "func": [],
                "run_exit": [],
                "parent_layout": []
            }
        },
        "CommandLayout.add_sysargv": {
            "name": "add_sysargv",
            "location": 599,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandLayout.append_opts": {
            "name": "append_opts",
            "location": 604,
            "return": [],
            "arguments": {
                "self": [],
                "opts": []
            }
        },
        "CommandLayout.generate_cmd_button": {
            "name": "generate_cmd_button",
            "location": 631,
            "return": [],
            "arguments": {
                "self": [],
                "label": [],
                "cmd_slot": [],
                "tooltip": []
            }
        },
        "CommandLayout.add_cmd_button": {
            "name": "add_cmd_button",
            "location": 640,
            "return": [],
            "arguments": {
                "self": [],
                "label": [],
                "cmd_slot": [],
                "pos": []
            }
        },
        "CommandLayout.add_cmd_buttons": {
            "name": "add_cmd_buttons",
            "location": 648,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "CommandLayout.clean_sysargv": {
            "name": "clean_sysargv",
            "location": 660,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RunCommand.__init__": {
            "name": "__init__",
            "location": 664,
            "return": [],
            "arguments": {
                "self": [],
                "func": [],
                "run_exit": []
            }
        },
        "RunCommand.run": {
            "name": "run",
            "location": 670,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GCommand.__init__": {
            "name": "__init__",
            "location": 689,
            "return": [],
            "arguments": {
                "self": [],
                "new_thread": []
            }
        },
        "GOption.__init__": {
            "name": "__init__",
            "location": 694,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GuiStream.flush": {
            "name": "flush",
            "location": 710,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GuiStream.write": {
            "name": "write",
            "location": 713,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "OutputEdit.print": {
            "name": "print",
            "location": 717,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "App.__init__": {
            "name": "__init__",
            "location": 725,
            "return": [],
            "arguments": {
                "self": [],
                "func": [],
                "run_exit": [],
                "new_thread": [],
                "output": [],
                "left": [],
                "top": [],
                "width": [],
                "height": []
            }
        },
        "App.initOutput": {
            "name": "initOutput",
            "location": 751,
            "return": [],
            "arguments": {
                "self": [],
                "output": []
            }
        },
        "App.initCommandUI": {
            "name": "initCommandUI",
            "location": 766,
            "return": [],
            "arguments": {
                "self": [],
                "func": [],
                "run_exit": [],
                "parent_layout": []
            }
        },
        "App.initUI": {
            "name": "initUI",
            "location": 798,
            "return": [],
            "arguments": {
                "self": [],
                "run_exit": [],
                "geometry": []
            }
        },
        "App.copy_cmd": {
            "name": "copy_cmd",
            "location": 811,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "App.run_cmd": {
            "name": "run_cmd",
            "location": 822,
            "return": [],
            "arguments": {
                "self": [],
                "new_thread": []
            }
        },
        "gui_option.run_gui_it": {
            "name": "run_gui_it",
            "location": 852,
            "return": [],
            "arguments": {
                "ctx": [],
                "param": [],
                "value": []
            }
        },
        "GStringLineEditor.to_widget.to_command": {
            "name": "to_command",
            "location": 228,
            "return": [],
            "arguments": {}
        },
        "GPathGLindEidt_path.to_widget.to_command": {
            "name": "to_command",
            "location": 310,
            "return": [],
            "arguments": {}
        },
        "GIntRangeGSlider.to_widget.to_command": {
            "name": "to_command",
            "location": 382,
            "return": [],
            "arguments": {}
        },
        "GIntRangeSlider.to_widget.to_command": {
            "name": "to_command",
            "location": 399,
            "return": [],
            "arguments": {}
        },
        "GIntRangeLineEditor.to_widget.to_command": {
            "name": "to_command",
            "location": 409,
            "return": [],
            "arguments": {}
        },
        "GChoiceComboBox.to_widget.to_command": {
            "name": "to_command",
            "location": 434,
            "return": [],
            "arguments": {}
        },
        "GTupleGListView.to_widget.to_command": {
            "name": "to_command",
            "location": 451,
            "return": [],
            "arguments": {}
        },
        "CommandLayout.append_opts._nwidgets": {
            "name": "_nwidgets",
            "location": 608,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "negmas-master/negmas/scripts/vendor/quick/__init__.py": {},
    "negmas-master/negmas/situated/action.py": {},
    "negmas-master/negmas/situated/adapter.py": {
        "Adapter.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "include_adapter_type_name": [
                    "(bool | None)"
                ],
                "include_obj_type_name": []
            }
        },
        "Adapter.adapted_object": {
            "name": "adapted_object",
            "location": 57,
            "return": [
                "Entity"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "Entity"
                ]
            }
        },
        "Adapter.short_type_name": {
            "name": "short_type_name",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Adapter.type_name": {
            "name": "type_name",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Adapter.init": {
            "name": "init",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Adapter.step": {
            "name": "step",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Adapter.__getattr__": {
            "name": "__getattr__",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "attr": []
            }
        }
    },
    "negmas-master/negmas/situated/agent.py": {
        "Agent.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "(str | None)"
                ],
                "type_postfix": [
                    "str"
                ],
                "preferences": [
                    "(Preferences | None)"
                ],
                "ufun": [
                    "(UtilityFunction | None)"
                ]
            }
        },
        "Agent.initialized": {
            "name": "initialized",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.unsigned_contracts": {
            "name": "unsigned_contracts",
            "location": 76,
            "return": [
                "list[Contract]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.requested_negotiations": {
            "name": "requested_negotiations",
            "location": 83,
            "return": [
                "list[NegotiationRequestInfo]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.accepted_negotiation_requests": {
            "name": "accepted_negotiation_requests",
            "location": 93,
            "return": [
                "list[NegotiationRequestInfo]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.negotiation_requests": {
            "name": "negotiation_requests",
            "location": 104,
            "return": [
                "list[NegotiationRequestInfo]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.running_negotiations": {
            "name": "running_negotiations",
            "location": 114,
            "return": [
                "list[RunningNegotiationInfo]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.awi": {
            "name": "awi",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "awi": [
                    "AgentWorldInterface"
                ]
            }
        },
        "Agent.create_negotiation_request": {
            "name": "create_negotiation_request",
            "location": 133,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "issues": [
                    "list[Issue]"
                ],
                "partners": [
                    "list[str]"
                ],
                "annotation": [
                    "(dict[(str, Any)] | None)"
                ],
                "negotiator": [
                    "(Negotiator | None)"
                ],
                "extra": [
                    "(dict[(str, Any)] | None)"
                ]
            }
        },
        "Agent._request_negotiation": {
            "name": "_request_negotiation",
            "location": 167,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "issues": [
                    "list[Issue]"
                ],
                "partners": [
                    "list[str]"
                ],
                "roles": [
                    "(list[str] | None)"
                ],
                "annotation": [
                    "(dict[(str, Any)] | None)"
                ],
                "mechanism_name": [
                    "(str | None)"
                ],
                "mechanism_params": [
                    "(dict[(str, Any)] | None)"
                ],
                "negotiator": [
                    "(Negotiator | None)"
                ],
                "extra": [
                    "(dict[(str, Any)] | None)"
                ],
                "group": [
                    "(str | None)"
                ]
            }
        },
        "Agent.on_event": {
            "name": "on_event",
            "location": 244,
            "return": [],
            "arguments": {
                "self": [],
                "event": [
                    "Event"
                ],
                "sender": [
                    "EventSource"
                ]
            }
        },
        "Agent.on_neg_request_rejected": {
            "name": "on_neg_request_rejected",
            "location": 252,
            "return": [],
            "arguments": {
                "self": [],
                "req_id": [
                    "str"
                ],
                "by": [
                    "(list[str] | None)"
                ]
            }
        },
        "Agent.on_neg_request_rejected_": {
            "name": "on_neg_request_rejected_",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "req_id": [
                    "str"
                ],
                "by": [
                    "(list[str] | None)"
                ]
            }
        },
        "Agent.on_neg_request_accepted": {
            "name": "on_neg_request_accepted",
            "location": 283,
            "return": [],
            "arguments": {
                "self": [],
                "req_id": [
                    "str"
                ],
                "mechanism": [
                    "NegotiatorMechanismInterface"
                ]
            }
        },
        "Agent.on_neg_request_accepted_": {
            "name": "on_neg_request_accepted_",
            "location": 288,
            "return": [],
            "arguments": {
                "self": [],
                "req_id": [
                    "str"
                ],
                "mechanism": [
                    "NegotiatorMechanismInterface"
                ]
            }
        },
        "Agent.on_negotiation_failure": {
            "name": "on_negotiation_failure",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "partners": [
                    "list[str]"
                ],
                "annotation": [
                    "dict[(str, Any)]"
                ],
                "mechanism": [
                    "NegotiatorMechanismInterface"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "Agent.on_negotiation_failure_": {
            "name": "on_negotiation_failure_",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "partners": [
                    "list[str]"
                ],
                "annotation": [
                    "dict[(str, Any)]"
                ],
                "mechanism": [
                    "NegotiatorMechanismInterface"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "Agent.on_negotiation_success": {
            "name": "on_negotiation_success",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "mechanism": [
                    "NegotiatorMechanismInterface"
                ]
            }
        },
        "Agent.on_negotiation_success_": {
            "name": "on_negotiation_success_",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "mechanism": [
                    "NegotiatorMechanismInterface"
                ]
            }
        },
        "Agent.on_contract_signed": {
            "name": "on_contract_signed",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "Agent.on_contract_signed_": {
            "name": "on_contract_signed_",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "Agent.on_contract_cancelled": {
            "name": "on_contract_cancelled",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "rejectors": [
                    "list[str]"
                ]
            }
        },
        "Agent.on_contract_cancelled_": {
            "name": "on_contract_cancelled_",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "rejectors": [
                    "list[str]"
                ]
            }
        },
        "Agent._respond_to_negotiation_request": {
            "name": "_respond_to_negotiation_request",
            "location": 367,
            "return": [
                "(Negotiator | None)"
            ],
            "arguments": {
                "self": [],
                "initiator": [
                    "str"
                ],
                "partners": [
                    "list[str]"
                ],
                "issues": [
                    "list[Issue]"
                ],
                "annotation": [
                    "dict[(str, Any)]"
                ],
                "mechanism": [
                    "NegotiatorMechanismInterface"
                ],
                "role": [
                    "(str | None)"
                ],
                "req_id": [
                    "(str | None)"
                ]
            }
        },
        "Agent.respond_to_negotiation_request_": {
            "name": "respond_to_negotiation_request_",
            "location": 399,
            "return": [
                "(Negotiator | None)"
            ],
            "arguments": {
                "self": [],
                "initiator": [
                    "str"
                ],
                "partners": [
                    "list[str]"
                ],
                "issues": [
                    "list[Issue]"
                ],
                "annotation": [
                    "dict[(str, Any)]"
                ],
                "mechanism": [
                    "NegotiatorMechanismInterface"
                ],
                "role": [
                    "(str | None)"
                ],
                "req_id": [
                    "(str | None)"
                ]
            }
        },
        "Agent.on_simulation_step_ended": {
            "name": "on_simulation_step_ended",
            "location": 436,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Agent.on_simulation_step_started": {
            "name": "on_simulation_step_started",
            "location": 439,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Agent.step": {
            "name": "step",
            "location": 443,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Agent.init": {
            "name": "init",
            "location": 447,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Agent.on_contracts_finalized": {
            "name": "on_contracts_finalized",
            "location": 450,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signed": [
                    "list[Contract]"
                ],
                "cancelled": [
                    "list[Contract]"
                ],
                "rejectors": [
                    "list[list[str]]"
                ]
            }
        },
        "Agent.set_renegotiation_agenda": {
            "name": "set_renegotiation_agenda",
            "location": 480,
            "return": [
                "(RenegotiationRequest | None)"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "breaches": [
                    "list[Breach]"
                ]
            }
        },
        "Agent.respond_to_renegotiation_request": {
            "name": "respond_to_renegotiation_request",
            "location": 499,
            "return": [
                "(Negotiator | None)"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "breaches": [
                    "list[Breach]"
                ],
                "agenda": [
                    "RenegotiationRequest"
                ]
            }
        },
        "Agent.sign_contract": {
            "name": "sign_contract",
            "location": 515,
            "return": [
                "(str | None)"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "Agent.sign_all_contracts": {
            "name": "sign_all_contracts",
            "location": 520,
            "return": [
                "(((None | str) | dict[(str, (str | None))]) | list[(str | None)])"
            ],
            "arguments": {
                "self": [],
                "contracts": [
                    "list[Contract]"
                ]
            }
        },
        "Agent.on_contract_executed": {
            "name": "on_contract_executed",
            "location": 548,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "Agent.on_contract_breached": {
            "name": "on_contract_breached",
            "location": 554,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "breaches": [
                    "list[Breach]"
                ],
                "resolution": [
                    "(Contract | None)"
                ]
            }
        },
        "Agent.__str__": {
            "name": "__str__",
            "location": 566,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/situated/awi.py": {
        "AgentWorldInterface.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "world": [
                    "World"
                ],
                "agent": [
                    "Agent"
                ]
            }
        },
        "AgentWorldInterface.execute": {
            "name": "execute",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "Action"
                ],
                "callback": [
                    "(Callable[([Action, bool], Any)] | None)"
                ]
            }
        },
        "AgentWorldInterface.state": {
            "name": "state",
            "location": 43,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentWorldInterface.relative_time": {
            "name": "relative_time",
            "location": 48,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentWorldInterface.current_step": {
            "name": "current_step",
            "location": 53,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentWorldInterface.n_steps": {
            "name": "n_steps",
            "location": 58,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentWorldInterface.default_signing_delay": {
            "name": "default_signing_delay",
            "location": 63,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentWorldInterface.run_negotiation": {
            "name": "run_negotiation",
            "location": 66,
            "return": [
                "(tuple[(Contract, NegotiatorMechanismInterface)] | None)"
            ],
            "arguments": {
                "self": [],
                "issues": [
                    "Collection[Issue]"
                ],
                "partners": [
                    "Collection[(str | Agent)]"
                ],
                "negotiator": [
                    "Negotiator"
                ],
                "preferences": [
                    "(Preferences | None)"
                ],
                "caller_role": [
                    "(str | None)"
                ],
                "roles": [
                    "(Collection[str] | None)"
                ],
                "annotation": [
                    "(dict[(str, Any)] | None)"
                ],
                "mechanism_name": [
                    "(str | None)"
                ],
                "mechanism_params": [
                    "(dict[(str, Any)] | None)"
                ]
            }
        },
        "AgentWorldInterface.run_negotiations": {
            "name": "run_negotiations",
            "location": 125,
            "return": [
                "list[tuple[(Contract, NegotiatorMechanismInterface)]]"
            ],
            "arguments": {
                "self": [],
                "issues": [
                    "(list[Issue] | list[list[Issue]])"
                ],
                "partners": [
                    "list[list[(str | Agent)]]"
                ],
                "negotiators": [
                    "list[Negotiator]"
                ],
                "preferences": [
                    "list[Preferences]"
                ],
                "caller_roles": [
                    "list[str]"
                ],
                "roles": [
                    "(list[(list[str] | None)] | None)"
                ],
                "annotations": [
                    "(list[(dict[(str, Any)] | None)] | None)"
                ],
                "mechanism_names": [
                    "((str | list[str]) | None)"
                ],
                "mechanism_params": [
                    "((dict[(str, Any)] | list[dict[(str, Any)]]) | None)"
                ],
                "all_or_none": [
                    "bool"
                ]
            }
        },
        "AgentWorldInterface.request_negotiation_about": {
            "name": "request_negotiation_about",
            "location": 185,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "issues": [
                    "list[Issue]"
                ],
                "partners": [
                    "list[str]"
                ],
                "req_id": [
                    "str"
                ],
                "roles": [
                    "(list[str] | None)"
                ],
                "annotation": [
                    "(dict[(str, Any)] | None)"
                ],
                "mechanism_name": [
                    "(str | None)"
                ],
                "mechanism_params": [
                    "(dict[(str, Any)] | None)"
                ],
                "group": [
                    "(str | None)"
                ]
            }
        },
        "AgentWorldInterface.params": {
            "name": "params",
            "location": 251,
            "return": [
                "dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentWorldInterface.loginfo": {
            "name": "loginfo",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "AgentWorldInterface.logwarning": {
            "name": "logwarning",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "AgentWorldInterface.logdebug": {
            "name": "logdebug",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "AgentWorldInterface.logerror": {
            "name": "logerror",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "AgentWorldInterface.loginfo_agent": {
            "name": "loginfo_agent",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "AgentWorldInterface.logwarning_agent": {
            "name": "logwarning_agent",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "AgentWorldInterface.logdebug_agent": {
            "name": "logdebug_agent",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "AgentWorldInterface.logerror_agent": {
            "name": "logerror_agent",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "AgentWorldInterface.bb_query": {
            "name": "bb_query",
            "location": 351,
            "return": [
                "(dict[(str, Any)] | None)"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "((str | list[str]) | None)"
                ],
                "query": [
                    "Any"
                ],
                "query_keys": []
            }
        },
        "AgentWorldInterface.bb_read": {
            "name": "bb_read",
            "location": 381,
            "return": [
                "(Any | None)"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "AgentWorldInterface.bb_record": {
            "name": "bb_record",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "str"
                ],
                "value": [
                    "Any"
                ],
                "key": [
                    "(str | None)"
                ]
            }
        },
        "AgentWorldInterface.bb_remove": {
            "name": "bb_remove",
            "location": 412,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "((list[str] | str) | None)"
                ]
            }
        },
        "AgentWorldInterface.settings": {
            "name": "settings",
            "location": 441,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AgentWorldInterface.initialized": {
            "name": "initialized",
            "location": 447,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentWorldInterface.unsigned_contracts": {
            "name": "unsigned_contracts",
            "location": 452,
            "return": [
                "list[Contract]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentWorldInterface.requested_negotiations": {
            "name": "requested_negotiations",
            "location": 459,
            "return": [
                "list[NegotiationRequestInfo]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentWorldInterface.accepted_negotiation_requests": {
            "name": "accepted_negotiation_requests",
            "location": 469,
            "return": [
                "list[NegotiationRequestInfo]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentWorldInterface.negotiation_requests": {
            "name": "negotiation_requests",
            "location": 479,
            "return": [
                "list[NegotiationRequestInfo]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentWorldInterface.running_negotiations": {
            "name": "running_negotiations",
            "location": 489,
            "return": [
                "list[RunningNegotiationInfo]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/situated/breaches.py": {
        "Breach.as_dict": {
            "name": "as_dict",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Breach.__hash__": {
            "name": "__hash__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/situated/bulletinboard.py": {
        "BulletinBoard.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BulletinBoard.add_section": {
            "name": "add_section",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "BulletinBoard.query": {
            "name": "query",
            "location": 48,
            "return": [
                "(dict[(str, Any)] | None)"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "((str | list[str]) | None)"
                ],
                "query": [
                    "Any"
                ],
                "query_keys": []
            }
        },
        "BulletinBoard.satisfies": {
            "name": "satisfies",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "value": [
                    "Any"
                ],
                "query": [
                    "Any"
                ]
            }
        },
        "BulletinBoard.read": {
            "name": "read",
            "location": 115,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "BulletinBoard.record": {
            "name": "record",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "str"
                ],
                "value": [
                    "Any"
                ],
                "key": [
                    "(str | None)"
                ]
            }
        },
        "BulletinBoard.remove": {
            "name": "remove",
            "location": 155,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "((list[str] | str) | None)"
                ]
            }
        },
        "BulletinBoard.data": {
            "name": "data",
            "location": 232,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/situated/common.py": {},
    "negmas-master/negmas/situated/contract.py": {
        "Contract.__hash__": {
            "name": "__hash__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/situated/entity.py": {
        "Entity.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "type_postfix": [
                    "str"
                ]
            }
        },
        "Entity._shorten": {
            "name": "_shorten",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "long_name": []
            }
        },
        "Entity._type_name": {
            "name": "_type_name",
            "location": 33,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Entity.type_name": {
            "name": "type_name",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Entity.short_type_name": {
            "name": "short_type_name",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Entity.type_postfix": {
            "name": "type_postfix",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Entity.init": {
            "name": "init",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Entity.init_": {
            "name": "init_",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Entity.step": {
            "name": "step",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Entity.step_": {
            "name": "step_",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/situated/helpers.py": {
        "safe_min": {
            "name": "safe_min",
            "location": 11,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "deflistdict": {
            "name": "deflistdict",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "show_edge_colors": {
            "name": "show_edge_colors",
            "location": 24,
            "return": [],
            "arguments": {}
        }
    },
    "negmas-master/negmas/situated/mechanismfactory.py": {
        "MechanismFactory.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "world": [
                    "World"
                ],
                "mechanism_name": [
                    "str"
                ],
                "mechanism_params": [
                    "dict[(str, Any)]"
                ],
                "issues": [
                    "list[Issue]"
                ],
                "req_id": [
                    "str"
                ],
                "caller": [
                    "Agent"
                ],
                "partners": [
                    "list[Agent]"
                ],
                "roles": [
                    "(list[str] | None)"
                ],
                "annotation": [
                    "(dict[(str, Any)] | None)"
                ],
                "neg_n_steps": [
                    "(int | None)"
                ],
                "neg_time_limit": [
                    "(int | None)"
                ],
                "neg_step_time_limit": [],
                "allow_self_negotiation": [],
                "log_ufuns_file": [],
                "group": [
                    "(str | None)"
                ]
            }
        },
        "MechanismFactory._create_negotiation_session": {
            "name": "_create_negotiation_session",
            "location": 58,
            "return": [
                "Mechanism"
            ],
            "arguments": {
                "self": [],
                "mechanism": [
                    "Mechanism"
                ],
                "responses": [
                    "Iterable[tuple[(Negotiator, str)]]"
                ],
                "partners": [
                    "list[Agent]"
                ]
            }
        },
        "MechanismFactory._start_negotiation": {
            "name": "_start_negotiation",
            "location": 97,
            "return": [
                "(NegotiationInfo | None)"
            ],
            "arguments": {
                "self": [],
                "mechanism_name": [],
                "mechanism_params": [
                    "dict[(str, Any)]"
                ],
                "roles": [],
                "caller": [],
                "partners": [],
                "annotation": [],
                "issues": [],
                "req_id": []
            }
        },
        "MechanismFactory.init": {
            "name": "init",
            "location": 264,
            "return": [
                "(NegotiationInfo | None)"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/situated/mixins.py": {
        "TimeInAgreementMixin.init": {
            "name": "init",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "time_field": []
            }
        },
        "TimeInAgreementMixin.on_contract_signed": {
            "name": "on_contract_signed",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [
                    "World"
                ],
                "contract": [
                    "Contract"
                ]
            }
        },
        "TimeInAgreementMixin.executable_contracts": {
            "name": "executable_contracts",
            "location": 31,
            "return": [
                "Collection[Contract]"
            ],
            "arguments": {
                "self": [
                    "World"
                ]
            }
        },
        "TimeInAgreementMixin.delete_executed_contracts": {
            "name": "delete_executed_contracts",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [
                    "World"
                ]
            }
        },
        "TimeInAgreementMixin.get_dropped_contracts": {
            "name": "get_dropped_contracts",
            "location": 63,
            "return": [
                "Collection[Contract]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoContractExecutionMixin.delete_executed_contracts": {
            "name": "delete_executed_contracts",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [
                    "World"
                ]
            }
        },
        "NoContractExecutionMixin.executable_contracts": {
            "name": "executable_contracts",
            "location": 83,
            "return": [
                "Collection[Contract]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoContractExecutionMixin.start_contract_execution": {
            "name": "start_contract_execution",
            "location": 86,
            "return": [
                "set[Breach]"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "NoContractExecutionMixin.complete_contract_execution": {
            "name": "complete_contract_execution",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "breaches": [
                    "list[Breach]"
                ],
                "resolution": [
                    "Contract"
                ]
            }
        },
        "NoResponsesMixin.on_neg_request_rejected": {
            "name": "on_neg_request_rejected",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "req_id": [
                    "str"
                ],
                "by": [
                    "(list[str] | None)"
                ]
            }
        },
        "NoResponsesMixin.on_neg_request_accepted": {
            "name": "on_neg_request_accepted",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "req_id": [
                    "str"
                ],
                "mechanism": [
                    "NegotiatorMechanismInterface"
                ]
            }
        },
        "NoResponsesMixin.on_negotiation_failure": {
            "name": "on_negotiation_failure",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "partners": [
                    "list[str]"
                ],
                "annotation": [
                    "dict[(str, Any)]"
                ],
                "mechanism": [
                    "NegotiatorMechanismInterface"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "NoResponsesMixin.on_negotiation_success": {
            "name": "on_negotiation_success",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "mechanism": [
                    "NegotiatorMechanismInterface"
                ]
            }
        },
        "NoResponsesMixin.on_contract_signed": {
            "name": "on_contract_signed",
            "location": 120,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "NoResponsesMixin.on_contract_cancelled": {
            "name": "on_contract_cancelled",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "rejectors": [
                    "list[str]"
                ]
            }
        },
        "NoResponsesMixin.set_renegotiation_agenda": {
            "name": "set_renegotiation_agenda",
            "location": 126,
            "return": [
                "(RenegotiationRequest | None)"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "breaches": [
                    "list[Breach]"
                ]
            }
        },
        "NoResponsesMixin.respond_to_renegotiation_request": {
            "name": "respond_to_renegotiation_request",
            "location": 131,
            "return": [
                "(Negotiator | None)"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "breaches": [
                    "list[Breach]"
                ],
                "agenda": [
                    "RenegotiationRequest"
                ]
            }
        },
        "NoResponsesMixin.on_contract_executed": {
            "name": "on_contract_executed",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "NoResponsesMixin.on_contract_breached": {
            "name": "on_contract_breached",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "breaches": [
                    "list[Breach]"
                ],
                "resolution": [
                    "(Contract | None)"
                ]
            }
        }
    },
    "negmas-master/negmas/situated/monitors.py": {
        "StatsMonitor.init": {
            "name": "init",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "stats": [
                    "dict[(str, Any)]"
                ],
                "world_name": [
                    "str"
                ]
            }
        },
        "StatsMonitor.step": {
            "name": "step",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "stats": [
                    "dict[(str, Any)]"
                ],
                "world_name": [
                    "str"
                ]
            }
        },
        "WorldMonitor.init": {
            "name": "init",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "world": [
                    "World"
                ]
            }
        },
        "WorldMonitor.step": {
            "name": "step",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "world": [
                    "World"
                ]
            }
        }
    },
    "negmas-master/negmas/situated/neg.py": {
        "_unwrap_negotiators": {
            "name": "_unwrap_negotiators",
            "location": 144,
            "return": [],
            "arguments": {
                "types": [],
                "params": []
            }
        },
        "_wrap_in_agents": {
            "name": "_wrap_in_agents",
            "location": 167,
            "return": [],
            "arguments": {
                "types": [],
                "params": [],
                "agent_types": []
            }
        },
        "NegAgent.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NegAgent.short_type_name": {
            "name": "short_type_name",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NegAgent.type_name": {
            "name": "type_name",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NegAgent._type_name": {
            "name": "_type_name",
            "location": 62,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "NegAgent.make_negotiator": {
            "name": "make_negotiator",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "preferences": [
                    "(Preferences | None)"
                ]
            }
        },
        "NegAgent._respond_to_negotiation_request": {
            "name": "_respond_to_negotiation_request",
            "location": 71,
            "return": [
                "(Negotiator | None)"
            ],
            "arguments": {
                "self": [],
                "initiator": [
                    "str"
                ],
                "partners": [
                    "list[str]"
                ],
                "issues": [
                    "list[Issue]"
                ],
                "annotation": [
                    "dict[(str, Any)]"
                ],
                "mechanism": [
                    "NegotiatorMechanismInterface"
                ],
                "role": [
                    "(str | None)"
                ],
                "req_id": [
                    "(str | None)"
                ]
            }
        },
        "NegAgent.step": {
            "name": "step",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NegAgent.init": {
            "name": "init",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NegAgent.on_neg_request_rejected": {
            "name": "on_neg_request_rejected",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "req_id": [
                    "str"
                ],
                "by": [
                    "(list[str] | None)"
                ]
            }
        },
        "NegAgent.on_neg_request_accepted": {
            "name": "on_neg_request_accepted",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "req_id": [
                    "str"
                ],
                "mechanism": [
                    "NegotiatorMechanismInterface"
                ]
            }
        },
        "NegAgent.on_negotiation_failure": {
            "name": "on_negotiation_failure",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "partners": [
                    "list[str]"
                ],
                "annotation": [
                    "dict[(str, Any)]"
                ],
                "mechanism": [
                    "NegotiatorMechanismInterface"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "NegAgent.on_negotiation_success": {
            "name": "on_negotiation_success",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "mechanism": [
                    "NegotiatorMechanismInterface"
                ]
            }
        },
        "NegAgent.on_contract_signed": {
            "name": "on_contract_signed",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "NegAgent.on_contract_cancelled": {
            "name": "on_contract_cancelled",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "rejectors": [
                    "list[str]"
                ]
            }
        },
        "NegAgent.respond_to_renegotiation_request": {
            "name": "respond_to_renegotiation_request",
            "location": 118,
            "return": [
                "(Negotiator | None)"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "breaches": [
                    "list[Breach]"
                ],
                "agenda": [
                    "RenegotiationRequest"
                ]
            }
        },
        "NegAgent.on_contract_executed": {
            "name": "on_contract_executed",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "NegAgent.on_contract_breached": {
            "name": "on_contract_breached",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "breaches": [
                    "list[Breach]"
                ],
                "resolution": [
                    "(Contract | None)"
                ]
            }
        },
        "NegAgent.set_renegotiation_agenda": {
            "name": "set_renegotiation_agenda",
            "location": 135,
            "return": [
                "(RenegotiationRequest | None)"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "breaches": [
                    "list[Breach]"
                ]
            }
        },
        "NegDomain.to_dict": {
            "name": "to_dict",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NegDomain.from_dict": {
            "name": "from_dict",
            "location": 234,
            "return": [],
            "arguments": {
                "cls": [],
                "d": []
            }
        },
        "_NegAWI.get_preferences": {
            "name": "get_preferences",
            "location": 254,
            "return": [],
            "arguments": {
                "self": [],
                "uid": [
                    "int"
                ]
            }
        },
        "NegWorld.__init__": {
            "name": "__init__",
            "location": 275,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NegWorld.simulation_step": {
            "name": "simulation_step",
            "location": 368,
            "return": [],
            "arguments": {
                "self": [],
                "stage": []
            }
        },
        "NegWorld.received_utility": {
            "name": "received_utility",
            "location": 422,
            "return": [],
            "arguments": {
                "self": [],
                "aid": [
                    "str"
                ]
            }
        },
        "NegWorld.agreement_rate": {
            "name": "agreement_rate",
            "location": 427,
            "return": [],
            "arguments": {
                "self": [],
                "aid": [
                    "str"
                ]
            }
        },
        "NegWorld.partner_utility": {
            "name": "partner_utility",
            "location": 432,
            "return": [],
            "arguments": {
                "self": [],
                "aid": [
                    "str"
                ]
            }
        },
        "NegWorld.received_advantage": {
            "name": "received_advantage",
            "location": 437,
            "return": [],
            "arguments": {
                "self": [],
                "aid": [
                    "str"
                ]
            }
        },
        "NegWorld.partner_advantage": {
            "name": "partner_advantage",
            "location": 442,
            "return": [],
            "arguments": {
                "self": [],
                "aid": [
                    "str"
                ]
            }
        },
        "NegWorld.competitors": {
            "name": "competitors",
            "location": 448,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NegWorld.partners": {
            "name": "partners",
            "location": 452,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NegWorld.post_step_stats": {
            "name": "post_step_stats",
            "location": 455,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NegWorld.pre_step_stats": {
            "name": "pre_step_stats",
            "location": 472,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NegWorld.order_contracts_for_execution": {
            "name": "order_contracts_for_execution",
            "location": 475,
            "return": [
                "Collection[Contract]"
            ],
            "arguments": {
                "self": [],
                "contracts": [
                    "Collection[Contract]"
                ]
            }
        },
        "NegWorld.contract_record": {
            "name": "contract_record",
            "location": 480,
            "return": [
                "dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "NegWorld.breach_record": {
            "name": "breach_record",
            "location": 483,
            "return": [
                "dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "breach": [
                    "Breach"
                ]
            }
        },
        "NegWorld.contract_size": {
            "name": "contract_size",
            "location": 486,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "NegWorld.delete_executed_contracts": {
            "name": "delete_executed_contracts",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NegWorld.execute_action": {
            "name": "execute_action",
            "location": 493,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "Action"
                ],
                "agent": [
                    "Agent"
                ],
                "callback": [
                    "(Callable | None)"
                ]
            }
        },
        "NegWorld.get_private_state": {
            "name": "get_private_state",
            "location": 499,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "Agent"
                ]
            }
        },
        "NegWorld.executable_contracts": {
            "name": "executable_contracts",
            "location": 503,
            "return": [
                "Collection[Contract]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NegWorld.start_contract_execution": {
            "name": "start_contract_execution",
            "location": 506,
            "return": [
                "set[Breach]"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "NegWorld.complete_contract_execution": {
            "name": "complete_contract_execution",
            "location": 509,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "breaches": [
                    "list[Breach]"
                ],
                "resolution": [
                    "Contract"
                ]
            }
        },
        "NegWorld.__init__.add_agents": {
            "name": "add_agents",
            "location": 354,
            "return": [],
            "arguments": {
                "types": [],
                "params": [],
                "wrappers": [],
                "target": []
            }
        },
        "NegWorld.simulation_step.unormalize": {
            "name": "unormalize",
            "location": 369,
            "return": [],
            "arguments": {
                "u": [],
                "indx": []
            }
        },
        "NegWorld.simulation_step.calcu": {
            "name": "calcu",
            "location": 378,
            "return": [],
            "arguments": {
                "ufun": [],
                "indx": [],
                "agreement": []
            }
        }
    },
    "negmas-master/negmas/situated/save.py": {
        "save_stats": {
            "name": "save_stats",
            "location": 20,
            "return": [],
            "arguments": {
                "world": [
                    "World"
                ],
                "log_dir": [
                    "(PathLike | str)"
                ],
                "params": [
                    "(dict[(str, Any)] | None)"
                ],
                "stats_file_name": [
                    "(str | None)"
                ]
            }
        },
        "save_stats.is_json_serializable": {
            "name": "is_json_serializable",
            "location": 40,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "negmas-master/negmas/situated/simple.py": {
        "SimpleWorld.delete_executed_contracts": {
            "name": "delete_executed_contracts",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleWorld.post_step_stats": {
            "name": "post_step_stats",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleWorld.pre_step_stats": {
            "name": "pre_step_stats",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleWorld.order_contracts_for_execution": {
            "name": "order_contracts_for_execution",
            "location": 31,
            "return": [
                "Collection[Contract]"
            ],
            "arguments": {
                "self": [],
                "contracts": [
                    "Collection[Contract]"
                ]
            }
        },
        "SimpleWorld.contract_record": {
            "name": "contract_record",
            "location": 36,
            "return": [
                "dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "SimpleWorld.breach_record": {
            "name": "breach_record",
            "location": 39,
            "return": [
                "dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "breach": [
                    "Breach"
                ]
            }
        },
        "SimpleWorld.contract_size": {
            "name": "contract_size",
            "location": 42,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        }
    },
    "negmas-master/negmas/situated/world.py": {
        "_path": {
            "name": "_path",
            "location": 73,
            "return": [
                "Path"
            ],
            "arguments": {
                "path": []
            }
        },
        "World.stats": {
            "name": "stats",
            "location": 177,
            "return": [
                "dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.breach_fraction": {
            "name": "breach_fraction",
            "location": 181,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.n_saved_contracts": {
            "name": "n_saved_contracts",
            "location": 191,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "ignore_no_issue": [
                    "bool"
                ]
            }
        },
        "World.agreement_fraction": {
            "name": "agreement_fraction",
            "location": 203,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.cancellation_fraction": {
            "name": "cancellation_fraction",
            "location": 212,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.loginfo": {
            "name": "loginfo",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ],
                "event": [
                    "(Event | None)"
                ]
            }
        },
        "World.set_bulletin_board": {
            "name": "set_bulletin_board",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "bulletin_board": []
            }
        },
        "World.__init__": {
            "name": "__init__",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "bulletin_board": [
                    "(BulletinBoard | None)"
                ],
                "n_steps": [],
                "time_limit": [],
                "negotiation_speed": [],
                "neg_n_steps": [],
                "neg_time_limit": [],
                "neg_step_time_limit": [],
                "shuffle_negotiations": [],
                "negotiation_quota_per_step": [],
                "negotiation_quota_per_simulation": [],
                "default_signing_delay": [],
                "force_signing": [],
                "batch_signing": [],
                "breach_processing": [],
                "mechanisms": [
                    "(dict[(str, dict[(str, Any)])] | None)"
                ],
                "awi_type": [
                    "str"
                ],
                "start_negotiations_immediately": [
                    "bool"
                ],
                "log_folder": [],
                "log_to_file": [],
                "log_ufuns": [],
                "log_negotiations": [
                    "bool"
                ],
                "log_to_screen": [
                    "bool"
                ],
                "log_stats_every": [
                    "int"
                ],
                "log_file_level": [],
                "log_screen_level": [],
                "no_logs": [],
                "event_file_name": [],
                "event_types": [],
                "log_file_name": [],
                "save_signed_contracts": [
                    "bool"
                ],
                "save_cancelled_contracts": [
                    "bool"
                ],
                "save_negotiations": [
                    "bool"
                ],
                "save_resolved_breaches": [
                    "bool"
                ],
                "save_unresolved_breaches": [
                    "bool"
                ],
                "ignore_agent_exceptions": [
                    "bool"
                ],
                "ignore_negotiation_exceptions": [
                    "bool"
                ],
                "ignore_contract_execution_exceptions": [
                    "bool"
                ],
                "ignore_simulation_exceptions": [
                    "bool"
                ],
                "safe_stats_monitoring": [
                    "bool"
                ],
                "construct_graphs": [
                    "bool"
                ],
                "checkpoint_every": [
                    "int"
                ],
                "checkpoint_folder": [
                    "((str | Path) | None)"
                ],
                "checkpoint_filename": [
                    "(str | None)"
                ],
                "extra_checkpoint_info": [
                    "(dict[(str, Any)] | None)"
                ],
                "single_checkpoint": [
                    "bool"
                ],
                "exist_ok": [
                    "bool"
                ],
                "operations": [
                    "Collection[Operations]"
                ],
                "info": [
                    "(dict[(str, Any)] | None)"
                ],
                "genius_port": [
                    "int"
                ],
                "disable_agent_printing": [
                    "bool"
                ],
                "name": [
                    "(str | None)"
                ],
                "id": [
                    "(str | None)"
                ]
            }
        },
        "World.is_basic_stat": {
            "name": "is_basic_stat",
            "location": 582,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        },
        "World.current_step": {
            "name": "current_step",
            "location": 592,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "World._agent_logger": {
            "name": "_agent_logger",
            "location": 595,
            "return": [
                "logging.Logger"
            ],
            "arguments": {
                "self": [],
                "aid": [
                    "str"
                ]
            }
        },
        "World.logdebug_agent": {
            "name": "logdebug_agent",
            "location": 611,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aid": [
                    "str"
                ],
                "s": [
                    "str"
                ],
                "event": [
                    "(Event | None)"
                ]
            }
        },
        "World.on_event": {
            "name": "on_event",
            "location": 626,
            "return": [],
            "arguments": {
                "self": [],
                "event": [
                    "Event"
                ],
                "sender": [
                    "EventSource"
                ]
            }
        },
        "World.log_folder": {
            "name": "log_folder",
            "location": 642,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "World.loginfo_agent": {
            "name": "loginfo_agent",
            "location": 645,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aid": [
                    "str"
                ],
                "s": [
                    "str"
                ],
                "event": [
                    "(Event | None)"
                ]
            }
        },
        "World.logwarning_agent": {
            "name": "logwarning_agent",
            "location": 660,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aid": [
                    "str"
                ],
                "s": [
                    "str"
                ],
                "event": [
                    "(Event | None)"
                ]
            }
        },
        "World.logerror_agent": {
            "name": "logerror_agent",
            "location": 675,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aid": [
                    "str"
                ],
                "s": [
                    "str"
                ],
                "event": [
                    "(Event | None)"
                ]
            }
        },
        "World.logdebug": {
            "name": "logdebug",
            "location": 690,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ],
                "event": [
                    "(Event | None)"
                ]
            }
        },
        "World.logwarning": {
            "name": "logwarning",
            "location": 704,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ],
                "event": [
                    "(Event | None)"
                ]
            }
        },
        "World.logerror": {
            "name": "logerror",
            "location": 718,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ],
                "event": [
                    "(Event | None)"
                ]
            }
        },
        "World.time": {
            "name": "time",
            "location": 733,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.remaining_time": {
            "name": "remaining_time",
            "location": 746,
            "return": [
                "(float | None)"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.relative_time": {
            "name": "relative_time",
            "location": 757,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.remaining_steps": {
            "name": "remaining_steps",
            "location": 770,
            "return": [
                "(int | None)"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.breach_record": {
            "name": "breach_record",
            "location": 778,
            "return": [
                "dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "breach": [
                    "Breach"
                ]
            }
        },
        "World._register_breach": {
            "name": "_register_breach",
            "location": 781,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "breach": [
                    "Breach"
                ]
            }
        },
        "World.saved_negotiations": {
            "name": "saved_negotiations",
            "location": 793,
            "return": [
                "list[dict[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.on_exception": {
            "name": "on_exception",
            "location": 796,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "Entity"
                ],
                "e": [
                    "Exception"
                ]
            }
        },
        "World.call": {
            "name": "call",
            "location": 805,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "Agent"
                ],
                "method": [
                    "Callable"
                ]
            }
        },
        "World._add_edges": {
            "name": "_add_edges",
            "location": 847,
            "return": [],
            "arguments": {
                "self": [],
                "src": [
                    "(Agent | str)"
                ],
                "dst": [
                    "list[(Agent | str)]"
                ],
                "target": [
                    "dict[(int, dict[(tuple[(Agent, Agent)], list[dict[(str, Any)]])])]"
                ],
                "bi": [],
                "issues": [
                    "(list[Issue] | None)"
                ],
                "agreement": [
                    "(dict[(str, Any)] | None)"
                ]
            }
        },
        "World.is_valid_contract": {
            "name": "is_valid_contract",
            "location": 873,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "World._sign_contract": {
            "name": "_sign_contract",
            "location": 892,
            "return": [
                "(list[str] | None)"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "World.on_contract_processed": {
            "name": "on_contract_processed",
            "location": 948,
            "return": [],
            "arguments": {
                "self": [],
                "contract": []
            }
        },
        "World.contract_record": {
            "name": "contract_record",
            "location": 969,
            "return": [
                "dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "World._contract_record": {
            "name": "_contract_record",
            "location": 972,
            "return": [
                "dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "World.on_contract_signed": {
            "name": "on_contract_signed",
            "location": 978,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "World.on_contract_cancelled": {
            "name": "on_contract_cancelled",
            "location": 1038,
            "return": [],
            "arguments": {
                "self": [],
                "contract": []
            }
        },
        "World._process_unsigned": {
            "name": "_process_unsigned",
            "location": 1069,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "World._make_negotiation_record": {
            "name": "_make_negotiation_record",
            "location": 1153,
            "return": [
                "dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "negotiation": [
                    "NegotiationInfo"
                ]
            }
        },
        "World._log_negotiation": {
            "name": "_log_negotiation",
            "location": 1195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "negotiation": [
                    "NegotiationInfo"
                ]
            }
        },
        "World.n_simulation_exceptions": {
            "name": "n_simulation_exceptions",
            "location": 1211,
            "return": [
                "dict[(int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.n_contract_exceptions": {
            "name": "n_contract_exceptions",
            "location": 1221,
            "return": [
                "dict[(int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.n_mechanism_exceptions": {
            "name": "n_mechanism_exceptions",
            "location": 1231,
            "return": [
                "dict[(int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.n_total_simulation_exceptions": {
            "name": "n_total_simulation_exceptions",
            "location": 1241,
            "return": [
                "dict[(int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.n_agent_exceptions": {
            "name": "n_agent_exceptions",
            "location": 1259,
            "return": [
                "dict[(str, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.n_total_agent_exceptions": {
            "name": "n_total_agent_exceptions",
            "location": 1269,
            "return": [
                "dict[(str, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.n_negotiator_exceptions": {
            "name": "n_negotiator_exceptions",
            "location": 1281,
            "return": [
                "dict[(str, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.is_valid_agreement": {
            "name": "is_valid_agreement",
            "location": 1290,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "negotiation": [
                    "NegotiationInfo"
                ],
                "agreement": [
                    "Outcome"
                ],
                "mechanism": [
                    "Mechanism"
                ]
            }
        },
        "World.on_contract_concluded": {
            "name": "on_contract_concluded",
            "location": 1313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "to_be_signed_at": [
                    "int"
                ]
            }
        },
        "World._register_contract": {
            "name": "_register_contract",
            "location": 1339,
            "return": [
                "(Contract | None)"
            ],
            "arguments": {
                "self": [],
                "mechanism": [],
                "negotiation": [],
                "to_be_signed_at": []
            }
        },
        "World._register_failed_negotiation": {
            "name": "_register_failed_negotiation",
            "location": 1417,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mechanism": [],
                "negotiation": []
            }
        },
        "World._tobe_signed_at": {
            "name": "_tobe_signed_at",
            "location": 1453,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "agreement": [
                    "Outcome"
                ],
                "force_immediate_signing": []
            }
        },
        "World._step_a_mechanism": {
            "name": "_step_a_mechanism",
            "location": 1460,
            "return": [
                "tuple[((Contract | None), bool)]"
            ],
            "arguments": {
                "self": [],
                "mechanism": [],
                "force_immediate_signing": []
            }
        },
        "World._step_negotiations": {
            "name": "_step_negotiations",
            "location": 1515,
            "return": [
                "tuple[(list[(Contract | None)], list[bool], int, int, int, int)]"
            ],
            "arguments": {
                "self": [],
                "mechanisms": [
                    "list[Mechanism]"
                ],
                "n_steps": [
                    "((int | float) | None)"
                ],
                "force_immediate_signing": [],
                "partners": [
                    "list[list[Agent]]"
                ]
            }
        },
        "World.append_stats": {
            "name": "append_stats",
            "location": 1575,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "World.step": {
            "name": "step",
            "location": 1583,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.total_time": {
            "name": "total_time",
            "location": 1966,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "World.saved_breaches": {
            "name": "saved_breaches",
            "location": 1971,
            "return": [
                "list[dict[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.resolved_breaches": {
            "name": "resolved_breaches",
            "location": 1975,
            "return": [
                "list[dict[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.unresolved_breaches": {
            "name": "unresolved_breaches",
            "location": 1979,
            "return": [
                "list[dict[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.run": {
            "name": "run",
            "location": 1982,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "World.run_with_progress": {
            "name": "run_with_progress",
            "location": 1991,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "(Callable[([int], None)] | None)"
                ]
            }
        },
        "World.register": {
            "name": "register",
            "location": 2002,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "Entity"
                ],
                "simulation_priority": [
                    "int"
                ]
            }
        },
        "World.register_stats_monitor": {
            "name": "register_stats_monitor",
            "location": 2020,
            "return": [],
            "arguments": {
                "self": [],
                "m": [
                    "StatsMonitor"
                ]
            }
        },
        "World.unregister_stats_monitor": {
            "name": "unregister_stats_monitor",
            "location": 2023,
            "return": [],
            "arguments": {
                "self": [],
                "m": [
                    "StatsMonitor"
                ]
            }
        },
        "World.register_world_monitor": {
            "name": "register_world_monitor",
            "location": 2026,
            "return": [],
            "arguments": {
                "self": [],
                "m": [
                    "WorldMonitor"
                ]
            }
        },
        "World.unregister_world_monitor": {
            "name": "unregister_world_monitor",
            "location": 2029,
            "return": [],
            "arguments": {
                "self": [],
                "m": [
                    "WorldMonitor"
                ]
            }
        },
        "World.join": {
            "name": "join",
            "location": 2032,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "Agent"
                ],
                "simulation_priority": [
                    "int"
                ]
            }
        },
        "World._combine_edges": {
            "name": "_combine_edges",
            "location": 2052,
            "return": [],
            "arguments": {
                "self": [],
                "beg": [
                    "int"
                ],
                "end": [
                    "int"
                ],
                "target": [
                    "dict[(int, dict[(tuple[(Agent, Agent)], list[dict[(str, Any)]])])]"
                ]
            }
        },
        "World._get_edges": {
            "name": "_get_edges",
            "location": 2074,
            "return": [
                "list[tuple[(Agent, Agent, int)]]"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "dict[(int, dict[(tuple[(Agent, Agent)], list[dict[(str, Any)]])])]"
                ],
                "step": [
                    "int"
                ]
            }
        },
        "World._register_negotiation": {
            "name": "_register_negotiation",
            "location": 2082,
            "return": [
                "tuple[((NegotiationInfo | None), (Contract | None), (Mechanism | None))]"
            ],
            "arguments": {
                "self": [],
                "mechanism_name": [],
                "mechanism_params": [],
                "roles": [],
                "caller": [],
                "partners": [],
                "annotation": [],
                "issues": [],
                "req_id": [],
                "run_to_completion": [],
                "may_run_immediately": [],
                "group": [
                    "(str | None)"
                ]
            }
        },
        "World._unregister_negotiation": {
            "name": "_unregister_negotiation",
            "location": 2187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "neg": [
                    "MechanismFactory"
                ]
            }
        },
        "World.request_negotiation_about": {
            "name": "request_negotiation_about",
            "location": 2192,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "req_id": [
                    "str"
                ],
                "caller": [
                    "Agent"
                ],
                "issues": [
                    "list[Issue]"
                ],
                "partners": [
                    "list[(Agent | str)]"
                ],
                "roles": [
                    "(list[str] | None)"
                ],
                "annotation": [
                    "(dict[(str, Any)] | None)"
                ],
                "mechanism_name": [
                    "(str | None)"
                ],
                "mechanism_params": [
                    "(dict[(str, Any)] | None)"
                ],
                "group": [
                    "(str | None)"
                ]
            }
        },
        "World.run_negotiation": {
            "name": "run_negotiation",
            "location": 2295,
            "return": [
                "tuple[((Contract | None), (NegotiatorMechanismInterface | None))]"
            ],
            "arguments": {
                "self": [],
                "caller": [
                    "Agent"
                ],
                "issues": [
                    "list[Issue]"
                ],
                "partners": [
                    "list[(str | Agent)]"
                ],
                "negotiator": [
                    "Negotiator"
                ],
                "preferences": [
                    "(Preferences | None)"
                ],
                "caller_role": [
                    "(str | None)"
                ],
                "roles": [
                    "(list[str] | None)"
                ],
                "annotation": [
                    "(dict[(str, Any)] | None)"
                ],
                "mechanism_name": [
                    "(str | None)"
                ],
                "mechanism_params": [
                    "(dict[(str, Any)] | None)"
                ]
            }
        },
        "World.run_negotiations": {
            "name": "run_negotiations",
            "location": 2407,
            "return": [
                "list[tuple[(Contract, NegotiatorMechanismInterface)]]"
            ],
            "arguments": {
                "self": [],
                "caller": [
                    "Agent"
                ],
                "issues": [
                    "(list[Issue] | list[list[Issue]])"
                ],
                "partners": [
                    "list[list[(str | Agent)]]"
                ],
                "negotiators": [
                    "list[Negotiator]"
                ],
                "preferences": [
                    "(list[Preferences] | None)"
                ],
                "caller_roles": [
                    "(list[str] | None)"
                ],
                "roles": [
                    "(list[(list[str] | None)] | None)"
                ],
                "annotations": [
                    "(list[(dict[(str, Any)] | None)] | None)"
                ],
                "mechanism_names": [
                    "((str | list[str]) | None)"
                ],
                "mechanism_params": [
                    "((dict[(str, Any)] | list[dict[(str, Any)]]) | None)"
                ],
                "all_or_none": [
                    "bool"
                ]
            }
        },
        "World._log_header": {
            "name": "_log_header",
            "location": 2580,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "World.ignore_contract": {
            "name": "ignore_contract",
            "location": 2585,
            "return": [],
            "arguments": {
                "self": [],
                "contract": [],
                "as_dropped": []
            }
        },
        "World.saved_contracts": {
            "name": "saved_contracts",
            "location": 2618,
            "return": [
                "list[dict[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.executed_contracts": {
            "name": "executed_contracts",
            "location": 2622,
            "return": [
                "list[dict[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.signed_contracts": {
            "name": "signed_contracts",
            "location": 2628,
            "return": [
                "list[dict[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.nullified_contracts": {
            "name": "nullified_contracts",
            "location": 2634,
            "return": [
                "list[dict[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.erred_contracts": {
            "name": "erred_contracts",
            "location": 2640,
            "return": [
                "list[dict[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.cancelled_contracts": {
            "name": "cancelled_contracts",
            "location": 2646,
            "return": [
                "list[dict[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.save_config": {
            "name": "save_config",
            "location": 2651,
            "return": [],
            "arguments": {
                "self": [],
                "file_name": [
                    "str"
                ]
            }
        },
        "World._process_breach": {
            "name": "_process_breach",
            "location": 2664,
            "return": [
                "(Contract | None)"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "breaches": [
                    "list[Breach]"
                ],
                "force_immediate_signing": []
            }
        },
        "World.save_gif": {
            "name": "save_gif",
            "location": 2934,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "((str | Path) | None)"
                ],
                "what": [
                    "Collection[str]"
                ],
                "who": [
                    "(Callable[([Agent], bool)] | None)"
                ],
                "together": [
                    "bool"
                ],
                "draw_every": [
                    "int"
                ],
                "fps": [
                    "int"
                ]
            }
        },
        "World.business_size": {
            "name": "business_size",
            "location": 2980,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.n_negotiation_rounds_successful": {
            "name": "n_negotiation_rounds_successful",
            "location": 2985,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.n_negotiation_rounds_failed": {
            "name": "n_negotiation_rounds_failed",
            "location": 2993,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.contract_execution_fraction": {
            "name": "contract_execution_fraction",
            "location": 3001,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.contract_dropping_fraction": {
            "name": "contract_dropping_fraction",
            "location": 3010,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.contract_err_fraction": {
            "name": "contract_err_fraction",
            "location": 3019,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.contract_nullification_fraction": {
            "name": "contract_nullification_fraction",
            "location": 3028,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.breach_level": {
            "name": "breach_level",
            "location": 3037,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.delete_executed_contracts": {
            "name": "delete_executed_contracts",
            "location": 3046,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.executable_contracts": {
            "name": "executable_contracts",
            "location": 3050,
            "return": [
                "Collection[Contract]"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.get_dropped_contracts": {
            "name": "get_dropped_contracts",
            "location": 3053,
            "return": [
                "Collection[Contract]"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.post_step_stats": {
            "name": "post_step_stats",
            "location": 3058,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "World.pre_step_stats": {
            "name": "pre_step_stats",
            "location": 3063,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "World.update_stats": {
            "name": "update_stats",
            "location": 3068,
            "return": [],
            "arguments": {
                "self": [],
                "stage": [
                    "int"
                ]
            }
        },
        "World.order_contracts_for_execution": {
            "name": "order_contracts_for_execution",
            "location": 3091,
            "return": [
                "Collection[Contract]"
            ],
            "arguments": {
                "self": [],
                "contracts": [
                    "Collection[Contract]"
                ]
            }
        },
        "World.start_contract_execution": {
            "name": "start_contract_execution",
            "location": 3098,
            "return": [
                "(set[Breach] | None)"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "World.complete_contract_execution": {
            "name": "complete_contract_execution",
            "location": 3122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "breaches": [
                    "list[Breach]"
                ],
                "resolution": [
                    "Contract"
                ]
            }
        },
        "World.execute_action": {
            "name": "execute_action",
            "location": 3138,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "Action"
                ],
                "agent": [
                    "Agent"
                ],
                "callback": [
                    "(Callable | None)"
                ]
            }
        },
        "World.get_private_state": {
            "name": "get_private_state",
            "location": 3144,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "Agent"
                ]
            }
        },
        "World.simulation_step": {
            "name": "simulation_step",
            "location": 3148,
            "return": [],
            "arguments": {
                "self": [],
                "stage": [
                    "int"
                ]
            }
        },
        "World.contract_size": {
            "name": "contract_size",
            "location": 3162,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "World.__getstate__": {
            "name": "__getstate__",
            "location": 3172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "World.__setstate__": {
            "name": "__setstate__",
            "location": 3178,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "World._sign_contract._do_sign": {
            "name": "_do_sign",
            "location": 899,
            "return": [],
            "arguments": {
                "c": [],
                "p": []
            }
        },
        "World.step._run_negotiations": {
            "name": "_run_negotiations",
            "location": 1639,
            "return": [],
            "arguments": {
                "n_steps": [
                    "(int | None)"
                ]
            }
        },
        "World.step._step_agents": {
            "name": "_step_agents",
            "location": 1672,
            "return": [],
            "arguments": {}
        },
        "World.step._sign_contracts": {
            "name": "_sign_contracts",
            "location": 1685,
            "return": [],
            "arguments": {}
        },
        "World.step._simulation_step": {
            "name": "_simulation_step",
            "location": 1688,
            "return": [],
            "arguments": {}
        },
        "World.step._execute_contracts": {
            "name": "_execute_contracts",
            "location": 1700,
            "return": [],
            "arguments": {}
        },
        "World.step._stats_update": {
            "name": "_stats_update",
            "location": 1885,
            "return": [],
            "arguments": {}
        },
        "World._combine_edges.add_dicts": {
            "name": "add_dicts",
            "location": 2061,
            "return": [],
            "arguments": {
                "d1": [],
                "d2": []
            }
        },
        "World.graph": {
            "name": "graph",
            "location": 2741,
            "return": [
                "(nx.Graph | list[nx.Graph])"
            ],
            "arguments": {
                "self": [],
                "steps": [
                    "((tuple[(int, int)] | int) | None)"
                ],
                "what": [
                    "Collection[str]"
                ],
                "who": [
                    "(Callable[([Agent], bool)] | None)"
                ],
                "together": [
                    "bool"
                ]
            }
        },
        "World.draw": {
            "name": "draw",
            "location": 2789,
            "return": [
                "(tuple[(Axis, nx.Graph)] | tuple[(Axis, list[nx.Graph])])"
            ],
            "arguments": {
                "self": [],
                "steps": [
                    "((tuple[(int, int)] | int) | None)"
                ],
                "what": [
                    "Collection[str]"
                ],
                "who": [
                    "(Callable[([Agent], bool)] | None)"
                ],
                "where": [
                    "(Callable[([Agent], (int | tuple[(float, float)]))] | None)"
                ],
                "together": [
                    "bool"
                ],
                "axs": [
                    "(Collection[Axis] | None)"
                ],
                "ncols": [
                    "int"
                ],
                "figsize": [
                    "tuple[(int, int)]"
                ],
                "show_node_labels": [],
                "show_edge_labels": []
            }
        },
        "World.save_gif.plot_frame": {
            "name": "plot_frame",
            "location": 2951,
            "return": [],
            "arguments": {
                "s": []
            }
        }
    },
    "negmas-master/negmas/situated/__init__.py": {},
    "negmas-master/negmas/tests/fixtures.py": {
        "bissue": {
            "name": "bissue",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "hamlet": {
            "name": "hamlet",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "uissue": {
            "name": "uissue",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "cissue": {
            "name": "cissue",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "dissue": {
            "name": "dissue",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "sissue": {
            "name": "sissue",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "int_issues": {
            "name": "int_issues",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "issues": {
            "name": "issues",
            "location": 44,
            "return": [],
            "arguments": {
                "cissue": [],
                "dissue": [],
                "sissue": []
            }
        },
        "valid_outcome_dict": {
            "name": "valid_outcome_dict",
            "location": 49,
            "return": [],
            "arguments": {
                "issues": []
            }
        },
        "invalid_outcome_dict": {
            "name": "invalid_outcome_dict",
            "location": 57,
            "return": [],
            "arguments": {
                "issues": []
            }
        },
        "valid_outcome_list": {
            "name": "valid_outcome_list",
            "location": 65,
            "return": [],
            "arguments": {
                "int_issues": []
            }
        },
        "invalid_outcome_list": {
            "name": "invalid_outcome_list",
            "location": 73,
            "return": [],
            "arguments": {
                "int_issues": []
            }
        }
    },
    "negmas-master/negmas/tests/test_basic_agent.py": {},
    "negmas-master/negmas/tests/test_cli.py": {
        "test_main": {
            "name": "test_main",
            "location": 8,
            "return": [],
            "arguments": {}
        }
    },
    "negmas-master/negmas/tests/test_ga.py": {
        "test_ga_mechanism": {
            "name": "test_ga_mechanism",
            "location": 10,
            "return": [],
            "arguments": {
                "n_negotiators": [],
                "n_outcomes": []
            }
        }
    },
    "negmas-master/negmas/tests/test_genius.py": {
        "init_genius": {
            "name": "init_genius",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "test_genius_agent": {
            "name": "test_genius_agent",
            "location": 41,
            "return": [],
            "arguments": {
                "init_genius": []
            }
        },
        "test_genius_agent_top2016_caduceus_first": {
            "name": "test_genius_agent_top2016_caduceus_first",
            "location": 91,
            "return": [],
            "arguments": {
                "init_genius": []
            }
        },
        "do_run": {
            "name": "do_run",
            "location": 135,
            "return": [],
            "arguments": {
                "first_type": [],
                "second_type": []
            }
        },
        "test_genius_agent_top2016_yx_second_classes": {
            "name": "test_genius_agent_top2016_yx_second_classes",
            "location": 178,
            "return": [],
            "arguments": {
                "init_genius": [],
                "first_type": [],
                "second_type": []
            }
        },
        "test_genius_agent_top2016_yx_second": {
            "name": "test_genius_agent_top2016_yx_second",
            "location": 186,
            "return": [],
            "arguments": {
                "init_genius": []
            }
        },
        "test_genius_agent_step_limit": {
            "name": "test_genius_agent_step_limit",
            "location": 236,
            "return": [],
            "arguments": {
                "init_genius": []
            }
        },
        "test_genius_agent_step_long_session": {
            "name": "test_genius_agent_step_long_session",
            "location": 281,
            "return": [],
            "arguments": {
                "init_genius": []
            }
        },
        "test_genius_agent_same_utility_with_normalization": {
            "name": "test_genius_agent_same_utility_with_normalization",
            "location": 323,
            "return": [],
            "arguments": {}
        },
        "test_genius_agent_same_utility": {
            "name": "test_genius_agent_same_utility",
            "location": 362,
            "return": [],
            "arguments": {}
        },
        "TestGeniusAgentSessions.prepare": {
            "name": "prepare",
            "location": 398,
            "return": [],
            "arguments": {
                "self": [],
                "utils": [],
                "single_issue": []
            }
        },
        "TestGeniusAgentSessions.test_genius_agents_can_run_on_converted_single_issue_preferences1": {
            "name": "test_genius_agents_can_run_on_converted_single_issue_preferences1",
            "location": 429,
            "return": [],
            "arguments": {
                "self": [],
                "init_genius": []
            }
        },
        "TestGeniusAgentSessions.test_genius_agents_can_run_on_converted_single_issue_preferences2": {
            "name": "test_genius_agents_can_run_on_converted_single_issue_preferences2",
            "location": 446,
            "return": [],
            "arguments": {
                "self": [],
                "init_genius": []
            }
        },
        "TestGeniusAgentSessions.test_genius_agents_can_run_on_converted_single_issue": {
            "name": "test_genius_agents_can_run_on_converted_single_issue",
            "location": 463,
            "return": [],
            "arguments": {
                "self": [],
                "init_genius": []
            }
        },
        "TestGeniusAgentSessions.test_genius_agents_can_run_on_converted_multiple_issues": {
            "name": "test_genius_agents_can_run_on_converted_multiple_issues",
            "location": 485,
            "return": [],
            "arguments": {
                "self": [],
                "init_genius": []
            }
        },
        "TestGeniusAgentSessions.test_genius_agent_example": {
            "name": "test_genius_agent_example",
            "location": 531,
            "return": [],
            "arguments": {
                "self": [],
                "init_genius": []
            }
        }
    },
    "negmas-master/negmas/tests/test_helpers.py": {
        "test_shortest_names": {
            "name": "test_shortest_names",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "test_create_loggers_with_default_params": {
            "name": "test_create_loggers_with_default_params",
            "location": 36,
            "return": [],
            "arguments": {
                "capsys": []
            }
        },
        "disabled_test_create_loggers_with_file_params": {
            "name": "disabled_test_create_loggers_with_file_params",
            "location": 44,
            "return": [],
            "arguments": {
                "capsys": [],
                "tmpdir": []
            }
        },
        "test_unique_name_defaults": {
            "name": "test_unique_name_defaults",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "test_unique_name_no_time": {
            "name": "test_unique_name_no_time",
            "location": 73,
            "return": [],
            "arguments": {}
        },
        "test_unique_name_with_path": {
            "name": "test_unique_name_with_path",
            "location": 77,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_is_nonzero_file": {
            "name": "test_is_nonzero_file",
            "location": 82,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_pretty_string": {
            "name": "test_pretty_string",
            "location": 96,
            "return": [],
            "arguments": {
                "capsys": []
            }
        },
        "test_config_reader": {
            "name": "test_config_reader",
            "location": 110,
            "return": [],
            "arguments": {}
        },
        "test_config_reader_with_enum": {
            "name": "test_config_reader_with_enum",
            "location": 124,
            "return": [],
            "arguments": {}
        },
        "test_config_reader_ignoring_children": {
            "name": "test_config_reader_ignoring_children",
            "location": 146,
            "return": [],
            "arguments": {}
        },
        "test_config_reader_with_subobjects": {
            "name": "test_config_reader_with_subobjects",
            "location": 186,
            "return": [],
            "arguments": {}
        },
        "B.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "bb": [],
                "bbdefault": []
            }
        },
        "Other.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "o": []
            }
        },
        "C.__init__": {
            "name": "__init__",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "cc": [],
                "b": [
                    "B"
                ],
                "others": []
            }
        },
        "C.set_others": {
            "name": "set_others",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "others": []
            }
        },
        "A.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": [],
                "c": []
            }
        },
        "test_config_reader.A.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": []
            }
        },
        "test_config_reader_with_enum.A.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": [],
                "e": [
                    "E"
                ]
            }
        },
        "test_config_reader_ignoring_children.A.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": []
            }
        }
    },
    "negmas-master/negmas/tests/test_inout.py": {
        "scenarios_folder": {
            "name": "scenarios_folder",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_importing_file_without_exceptions": {
            "name": "test_importing_file_without_exceptions",
            "location": 18,
            "return": [],
            "arguments": {
                "scenarios_folder": []
            }
        },
        "test_simple_run_with_aspiration_agents": {
            "name": "test_simple_run_with_aspiration_agents",
            "location": 23,
            "return": [],
            "arguments": {}
        }
    },
    "negmas-master/negmas/tests/test_integration.py": {
        "test_a_session": {
            "name": "test_a_session",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "test_buy_sell_session": {
            "name": "test_buy_sell_session",
            "location": 36,
            "return": [],
            "arguments": {}
        }
    },
    "negmas-master/negmas/tests/test_issue.py": {
        "test_type": {
            "name": "test_type",
            "location": 11,
            "return": [],
            "arguments": {
                "hamlet": [],
                "cissue": [],
                "dissue": []
            }
        },
        "test_is_continuous": {
            "name": "test_is_continuous",
            "location": 17,
            "return": [],
            "arguments": {
                "cissue": [],
                "dissue": [],
                "hamlet": []
            }
        },
        "test_is_discrete": {
            "name": "test_is_discrete",
            "location": 23,
            "return": [],
            "arguments": {
                "cissue": [],
                "dissue": [],
                "hamlet": []
            }
        },
        "test_string_conversion": {
            "name": "test_string_conversion",
            "location": 29,
            "return": [],
            "arguments": {
                "uissue": [],
                "hamlet": []
            }
        },
        "test_cartinatlity": {
            "name": "test_cartinatlity",
            "location": 34,
            "return": [],
            "arguments": {
                "cissue": [],
                "dissue": [],
                "hamlet": []
            }
        },
        "test_n_outcomes": {
            "name": "test_n_outcomes",
            "location": 40,
            "return": [],
            "arguments": {
                "cissue": [],
                "dissue": [],
                "hamlet": []
            }
        },
        "test_rand": {
            "name": "test_rand",
            "location": 47,
            "return": [],
            "arguments": {
                "cissue": [],
                "dissue": [],
                "hamlet": [],
                "bissue": []
            }
        },
        "test_rand_invalid": {
            "name": "test_rand_invalid",
            "location": 55,
            "return": [],
            "arguments": {
                "cissue": [],
                "dissue": [],
                "hamlet": [],
                "bissue": []
            }
        },
        "test_possibilities": {
            "name": "test_possibilities",
            "location": 63,
            "return": [],
            "arguments": {
                "cissue": [],
                "dissue": [],
                "hamlet": [],
                "bissue": []
            }
        },
        "test_issue_generation_defaults": {
            "name": "test_issue_generation_defaults",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "test_issue_generation_multiples": {
            "name": "test_issue_generation_multiples",
            "location": 87,
            "return": [],
            "arguments": {}
        }
    },
    "negmas-master/negmas/tests/test_negotiators.py": {
        "test_tough_asp_negotiator": {
            "name": "test_tough_asp_negotiator",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "test_tough_tit_for_tat_negotiator": {
            "name": "test_tough_tit_for_tat_negotiator",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_asp_negotaitor": {
            "name": "test_asp_negotaitor",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "test_tit_for_tat_negotiators_agree_in_the_middle": {
            "name": "test_tit_for_tat_negotiators_agree_in_the_middle",
            "location": 106,
            "return": [],
            "arguments": {}
        },
        "test_top_only_negotiator": {
            "name": "test_top_only_negotiator",
            "location": 140,
            "return": [],
            "arguments": {}
        },
        "test_tft_propose": {
            "name": "test_tft_propose",
            "location": 168,
            "return": [],
            "arguments": {}
        },
        "test_tit_for_tat_against_asp_negotiators": {
            "name": "test_tit_for_tat_against_asp_negotiators",
            "location": 220,
            "return": [],
            "arguments": {}
        },
        "test_best_only_asp_negotiator": {
            "name": "test_best_only_asp_negotiator",
            "location": 263,
            "return": [],
            "arguments": {}
        },
        "test_controller": {
            "name": "test_controller",
            "location": 289,
            "return": [],
            "arguments": {}
        },
        "test_negotiator_checkpoint": {
            "name": "test_negotiator_checkpoint",
            "location": 316,
            "return": [],
            "arguments": {}
        },
        "test_smart_aspiration": {
            "name": "test_smart_aspiration",
            "location": 320,
            "return": [],
            "arguments": {}
        },
        "test_outcome_space_setting_resetting": {
            "name": "test_outcome_space_setting_resetting",
            "location": 355,
            "return": [],
            "arguments": {}
        }
    },
    "negmas-master/negmas/tests/test_outcomes.py": {
        "test_dict_outcomes": {
            "name": "test_dict_outcomes",
            "location": 20,
            "return": [],
            "arguments": {
                "issues": [],
                "valid_outcome_dict": [],
                "invalid_outcome_dict": []
            }
        },
        "test_list_outcomes": {
            "name": "test_list_outcomes",
            "location": 25,
            "return": [],
            "arguments": {
                "int_issues": [],
                "valid_outcome_list": [],
                "invalid_outcome_list": []
            }
        },
        "test_from_outcomes": {
            "name": "test_from_outcomes",
            "location": 30,
            "return": [],
            "arguments": {}
        }
    },
    "negmas-master/negmas/tests/test_preferences.py": {
        "test_preferences_range_linear_late_issues": {
            "name": "test_preferences_range_linear_late_issues",
            "location": 29,
            "return": [],
            "arguments": {
                "n_issues": []
            }
        },
        "test_preferences_range_linear": {
            "name": "test_preferences_range_linear",
            "location": 41,
            "return": [],
            "arguments": {
                "n_issues": []
            }
        },
        "test_preferences_range_general": {
            "name": "test_preferences_range_general",
            "location": 53,
            "return": [],
            "arguments": {
                "n_issues": []
            }
        },
        "test_pareto_frontier_does_not_depend_on_order": {
            "name": "test_pareto_frontier_does_not_depend_on_order",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "test_linear_utility": {
            "name": "test_linear_utility",
            "location": 102,
            "return": [],
            "arguments": {}
        },
        "test_linear_utility_construction": {
            "name": "test_linear_utility_construction",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "test_hypervolume_utility": {
            "name": "test_hypervolume_utility",
            "location": 142,
            "return": [],
            "arguments": {}
        },
        "test_dict_conversion": {
            "name": "test_dict_conversion",
            "location": 236,
            "return": [],
            "arguments": {
                "utype": []
            }
        },
        "test_inverse_genius_domain": {
            "name": "test_inverse_genius_domain",
            "location": 247,
            "return": [],
            "arguments": {}
        },
        "test_random_linear_utils_are_normalized": {
            "name": "test_random_linear_utils_are_normalized",
            "location": 271,
            "return": [],
            "arguments": {}
        },
        "_order": {
            "name": "_order",
            "location": 289,
            "return": [],
            "arguments": {
                "u": [
                    "list[float]"
                ]
            }
        },
        "_check_order": {
            "name": "_check_order",
            "location": 293,
            "return": [],
            "arguments": {
                "u": [
                    "list[float]"
                ]
            }
        },
        "_relative_fraction": {
            "name": "_relative_fraction",
            "location": 298,
            "return": [],
            "arguments": {
                "u": [
                    "list[float]"
                ]
            }
        },
        "test_can_normalize_affine_and_linear_ufun": {
            "name": "test_can_normalize_affine_and_linear_ufun",
            "location": 319,
            "return": [],
            "arguments": {
                "weights": [],
                "bias": [],
                "rng": []
            }
        },
        "test_normalization": {
            "name": "test_normalization",
            "location": 382,
            "return": [],
            "arguments": {}
        },
        "test_rank_only_ufun_randomize_no_reserve": {
            "name": "test_rank_only_ufun_randomize_no_reserve",
            "location": 443,
            "return": [],
            "arguments": {}
        },
        "test_rank_only_ufun_randomize": {
            "name": "test_rank_only_ufun_randomize",
            "location": 470,
            "return": [],
            "arguments": {}
        },
        "test_rank_only_ufun_no_randomize": {
            "name": "test_rank_only_ufun_no_randomize",
            "location": 497,
            "return": [],
            "arguments": {}
        }
    },
    "negmas-master/negmas/tests/test_protocols.py": {
        "mechanism": {
            "name": "mechanism",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "static_mechanism": {
            "name": "static_mechanism",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "dynamic_mechanism": {
            "name": "dynamic_mechanism",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "test_set_requirements": {
            "name": "test_set_requirements",
            "location": 51,
            "return": [],
            "arguments": {
                "mechanism": []
            }
        },
        "test_can_work_with_no_requirements": {
            "name": "test_can_work_with_no_requirements",
            "location": 76,
            "return": [],
            "arguments": {
                "mechanism": []
            }
        },
        "test_can_check_compatibility": {
            "name": "test_can_check_compatibility",
            "location": 80,
            "return": [],
            "arguments": {
                "mechanism": []
            }
        },
        "test_different_capability_types": {
            "name": "test_different_capability_types",
            "location": 124,
            "return": [],
            "arguments": {
                "mechanism": []
            }
        },
        "test_can_accept_more_agents": {
            "name": "test_can_accept_more_agents",
            "location": 181,
            "return": [],
            "arguments": {}
        },
        "test_dynamic_entry": {
            "name": "test_dynamic_entry",
            "location": 190,
            "return": [],
            "arguments": {
                "static_mechanism": [
                    "Mechanism"
                ]
            }
        },
        "test_mechanism_fails_on_less_than_two_agents": {
            "name": "test_mechanism_fails_on_less_than_two_agents",
            "location": 199,
            "return": [],
            "arguments": {
                "static_mechanism": []
            }
        },
        "test_mechanism_fails_on_less_than_two_agents_dynamic": {
            "name": "test_mechanism_fails_on_less_than_two_agents_dynamic",
            "location": 208,
            "return": [],
            "arguments": {
                "dynamic_mechanism": []
            }
        },
        "test_mechanisms_get_some_rounds": {
            "name": "test_mechanisms_get_some_rounds",
            "location": 219,
            "return": [],
            "arguments": {}
        },
        "test_alternating_offers_mechanism_fails_on_no_offerer": {
            "name": "test_alternating_offers_mechanism_fails_on_no_offerer",
            "location": 248,
            "return": [],
            "arguments": {}
        },
        "test_alternating_offers_mechanism_with_one_agent_run": {
            "name": "test_alternating_offers_mechanism_with_one_agent_run",
            "location": 272,
            "return": [],
            "arguments": {}
        },
        "test_same_utility_leads_to_agreement": {
            "name": "test_same_utility_leads_to_agreement",
            "location": 291,
            "return": [],
            "arguments": {}
        },
        "MyMechanism.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "dynamic_entry": []
            }
        },
        "MyMechanism.round": {
            "name": "round",
            "location": 26,
            "return": [
                "MechanismRoundResult"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/tests/test_situated.py": {
        "test_world_has_times": {
            "name": "test_world_has_times",
            "location": 288,
            "return": [],
            "arguments": {}
        },
        "test_world_records_exceptions": {
            "name": "test_world_records_exceptions",
            "location": 302,
            "return": [],
            "arguments": {}
        },
        "test_world_runs_with_some_negs": {
            "name": "test_world_runs_with_some_negs",
            "location": 323,
            "return": [],
            "arguments": {}
        },
        "test_config_reader_with_a_world": {
            "name": "test_config_reader_with_a_world",
            "location": 339,
            "return": [],
            "arguments": {}
        },
        "test_config_reader_with_a_world_with_enum": {
            "name": "test_config_reader_with_a_world_with_enum",
            "location": 350,
            "return": [],
            "arguments": {}
        },
        "test_world_picklable": {
            "name": "test_world_picklable",
            "location": 363,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_world_auto_checkpoint": {
            "name": "test_world_auto_checkpoint",
            "location": 390,
            "return": [],
            "arguments": {
                "tmp_path": [],
                "single_checkpoint": [],
                "checkpoint_every": [],
                "exist_ok": []
            }
        },
        "test_world_checkpoint": {
            "name": "test_world_checkpoint",
            "location": 427,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_agent_checkpoint": {
            "name": "test_agent_checkpoint",
            "location": 474,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_agent_checkpoint_in_world": {
            "name": "test_agent_checkpoint_in_world",
            "location": 497,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_cannot_start_a_neg_with_no_outcomes": {
            "name": "test_cannot_start_a_neg_with_no_outcomes",
            "location": 526,
            "return": [],
            "arguments": {}
        },
        "test_world_monitor": {
            "name": "test_world_monitor",
            "location": 537,
            "return": [],
            "arguments": {}
        },
        "DummyWorld.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "n_steps": [],
                "negotiation_speed": []
            }
        },
        "DummyWorld.complete_contract_execution": {
            "name": "complete_contract_execution",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "breaches": [
                    "list[Breach]"
                ],
                "resolved": [
                    "bool"
                ]
            }
        },
        "DummyWorld.get_contract_finalization_time": {
            "name": "get_contract_finalization_time",
            "location": 45,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "DummyWorld.get_contract_execution_time": {
            "name": "get_contract_execution_time",
            "location": 48,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "DummyWorld.contract_size": {
            "name": "contract_size",
            "location": 51,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "DummyWorld.join": {
            "name": "join",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "Agent"
                ],
                "simulation_priority": [
                    "int"
                ]
            }
        },
        "DummyWorld.delete_executed_contracts": {
            "name": "delete_executed_contracts",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyWorld.executable_contracts": {
            "name": "executable_contracts",
            "location": 61,
            "return": [
                "Collection[Contract]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyWorld.post_step_stats": {
            "name": "post_step_stats",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DummyWorld.pre_step_stats": {
            "name": "pre_step_stats",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DummyWorld.order_contracts_for_execution": {
            "name": "order_contracts_for_execution",
            "location": 70,
            "return": [
                "Collection[Contract]"
            ],
            "arguments": {
                "self": [],
                "contracts": [
                    "Collection[Contract]"
                ]
            }
        },
        "DummyWorld.contract_record": {
            "name": "contract_record",
            "location": 75,
            "return": [
                "dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "DummyWorld.start_contract_execution": {
            "name": "start_contract_execution",
            "location": 78,
            "return": [
                "set[Breach]"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "DummyWorld._process_breach": {
            "name": "_process_breach",
            "location": 81,
            "return": [
                "(Contract | None)"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "breaches": [
                    "list[Breach]"
                ],
                "force_immediate_signing": []
            }
        },
        "DummyWorld.breach_record": {
            "name": "breach_record",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "breach": [
                    "Breach"
                ]
            }
        },
        "DummyWorld.execute_action": {
            "name": "execute_action",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "Action"
                ],
                "agent": [
                    "Agent"
                ],
                "callback": [
                    "Callable"
                ]
            }
        },
        "DummyWorld.get_private_state": {
            "name": "get_private_state",
            "location": 94,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "Agent"
                ]
            }
        },
        "DummyWorld.simulation_step": {
            "name": "simulation_step",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "stage": [
                    "int"
                ]
            }
        },
        "DummyAgent.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DummyAgent.init": {
            "name": "init",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DummyAgent._respond_to_negotiation_request": {
            "name": "_respond_to_negotiation_request",
            "location": 111,
            "return": [
                "(Negotiator | None)"
            ],
            "arguments": {
                "self": [],
                "initiator": [
                    "str"
                ],
                "partners": [
                    "list[str]"
                ],
                "issues": [
                    "list[Issue]"
                ],
                "annotation": [
                    "dict[(str, Any)]"
                ],
                "mechanism": [
                    "NegotiatorMechanismInterface"
                ],
                "role": [
                    "(str | None)"
                ],
                "req_id": [
                    "(str | None)"
                ]
            }
        },
        "DummyAgent.on_neg_request_rejected": {
            "name": "on_neg_request_rejected",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "req_id": [
                    "str"
                ],
                "by": [
                    "(list[str] | None)"
                ]
            }
        },
        "DummyAgent.on_neg_request_accepted": {
            "name": "on_neg_request_accepted",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "req_id": [
                    "str"
                ],
                "mechanism": [
                    "NegotiatorMechanismInterface"
                ]
            }
        },
        "DummyAgent.on_negotiation_failure": {
            "name": "on_negotiation_failure",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "partners": [
                    "list[str]"
                ],
                "annotation": [
                    "dict[(str, Any)]"
                ],
                "mechanism": [
                    "NegotiatorMechanismInterface"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "DummyAgent.on_negotiation_success": {
            "name": "on_negotiation_success",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "mechanism": [
                    "NegotiatorMechanismInterface"
                ]
            }
        },
        "DummyAgent.on_contract_signed": {
            "name": "on_contract_signed",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "DummyAgent.on_contract_cancelled": {
            "name": "on_contract_cancelled",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "rejectors": [
                    "list[str]"
                ]
            }
        },
        "DummyAgent.sign_contract": {
            "name": "sign_contract",
            "location": 156,
            "return": [
                "(str | None)"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "DummyAgent.on_contract_executed": {
            "name": "on_contract_executed",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "DummyAgent.on_contract_breached": {
            "name": "on_contract_breached",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "breaches": [
                    "list[Breach]"
                ],
                "resolution": [
                    "(Contract | None)"
                ]
            }
        },
        "DummyAgent.set_renegotiation_agenda": {
            "name": "set_renegotiation_agenda",
            "location": 167,
            "return": [
                "(RenegotiationRequest | None)"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "breaches": [
                    "list[Breach]"
                ]
            }
        },
        "DummyAgent.respond_to_renegotiation_request": {
            "name": "respond_to_renegotiation_request",
            "location": 172,
            "return": [
                "(Negotiator | None)"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "breaches": [
                    "list[Breach]"
                ],
                "agenda": [
                    "RenegotiationRequest"
                ]
            }
        },
        "DummyAgent.step": {
            "name": "step",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExceptionAgent.__init__": {
            "name": "__init__",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ExceptionAgent.init": {
            "name": "init",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExceptionAgent._respond_to_negotiation_request": {
            "name": "_respond_to_negotiation_request",
            "location": 203,
            "return": [
                "(Negotiator | None)"
            ],
            "arguments": {
                "self": [],
                "initiator": [
                    "str"
                ],
                "partners": [
                    "list[str]"
                ],
                "issues": [
                    "list[Issue]"
                ],
                "annotation": [
                    "dict[(str, Any)]"
                ],
                "mechanism": [
                    "NegotiatorMechanismInterface"
                ],
                "role": [
                    "(str | None)"
                ],
                "req_id": [
                    "(str | None)"
                ]
            }
        },
        "ExceptionAgent.on_neg_request_rejected": {
            "name": "on_neg_request_rejected",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "req_id": [
                    "str"
                ],
                "by": [
                    "(list[str] | None)"
                ]
            }
        },
        "ExceptionAgent.on_neg_request_accepted": {
            "name": "on_neg_request_accepted",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "req_id": [
                    "str"
                ],
                "mechanism": [
                    "NegotiatorMechanismInterface"
                ]
            }
        },
        "ExceptionAgent.on_negotiation_failure": {
            "name": "on_negotiation_failure",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "partners": [
                    "list[str]"
                ],
                "annotation": [
                    "dict[(str, Any)]"
                ],
                "mechanism": [
                    "NegotiatorMechanismInterface"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "ExceptionAgent.on_negotiation_success": {
            "name": "on_negotiation_success",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "mechanism": [
                    "NegotiatorMechanismInterface"
                ]
            }
        },
        "ExceptionAgent.on_contract_signed": {
            "name": "on_contract_signed",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "ExceptionAgent.on_contract_cancelled": {
            "name": "on_contract_cancelled",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "rejectors": [
                    "list[str]"
                ]
            }
        },
        "ExceptionAgent.sign_contract": {
            "name": "sign_contract",
            "location": 249,
            "return": [
                "(str | None)"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "ExceptionAgent.on_contract_executed": {
            "name": "on_contract_executed",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "ExceptionAgent.on_contract_breached": {
            "name": "on_contract_breached",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "breaches": [
                    "list[Breach]"
                ],
                "resolution": [
                    "(Contract | None)"
                ]
            }
        },
        "ExceptionAgent.set_renegotiation_agenda": {
            "name": "set_renegotiation_agenda",
            "location": 260,
            "return": [
                "(RenegotiationRequest | None)"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "breaches": [
                    "list[Breach]"
                ]
            }
        },
        "ExceptionAgent.respond_to_renegotiation_request": {
            "name": "respond_to_renegotiation_request",
            "location": 265,
            "return": [
                "(Negotiator | None)"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "breaches": [
                    "list[Breach]"
                ],
                "agenda": [
                    "RenegotiationRequest"
                ]
            }
        },
        "ExceptionAgent.step": {
            "name": "step",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MyMonitor.on_event": {
            "name": "on_event",
            "location": 522,
            "return": [],
            "arguments": {
                "self": [],
                "event": [
                    "Event"
                ],
                "sender": [
                    "EventSource"
                ]
            }
        }
    },
    "negmas-master/negmas/tests/test_st.py": {
        "test_can_work": {
            "name": "test_can_work",
            "location": 13,
            "return": [],
            "arguments": {
                "n_negotiators": [],
                "n_outcomes": [],
                "n_steps": []
            }
        },
        "test_hill_climbing_mechanism": {
            "name": "test_hill_climbing_mechanism",
            "location": 29,
            "return": [],
            "arguments": {
                "n_negotiators": [],
                "n_outcomes": []
            }
        }
    },
    "negmas-master/negmas/tests/__init__.py": {},
    "negmas-master/negmas/tournaments/neg.py": {
        "neg_config_generator": {
            "name": "neg_config_generator",
            "location": 36,
            "return": [
                "list[dict[(str, Any)]]"
            ],
            "arguments": {
                "n_competitors": [
                    "int"
                ],
                "domains": [
                    "Generator[(NegDomain, None, None)]"
                ],
                "n_agents_per_competitor": [
                    "int"
                ],
                "agent_names_reveal_type": [
                    "bool"
                ],
                "non_competitors": [
                    "(tuple[(str | NegAgent)] | None)"
                ],
                "non_competitor_params": [
                    "(tuple[dict[(str, Any)]] | None)"
                ],
                "compact": [
                    "bool"
                ]
            }
        },
        "neg_config_assigner": {
            "name": "neg_config_assigner",
            "location": 91,
            "return": [
                "list[list[dict[(str, Any)]]]"
            ],
            "arguments": {
                "config": [
                    "list[dict[(str, Any)]]"
                ],
                "max_n_worlds": [
                    "int"
                ],
                "n_agents_per_competitor": [
                    "int"
                ],
                "fair": [
                    "bool"
                ],
                "competitors": [
                    "Sequence[(type[Negotiator] | type[Agent])]"
                ],
                "params": [
                    "Sequence[dict[(str, Any)]]"
                ],
                "dynamic_non_competitors": [
                    "(list[type[Agent]] | None)"
                ],
                "dynamic_non_competitor_params": [
                    "(list[dict[(str, Any)]] | None)"
                ],
                "exclude_competitors_from_reassignment": [
                    "bool"
                ]
            }
        },
        "neg_world_generator": {
            "name": "neg_world_generator",
            "location": 117,
            "return": [],
            "arguments": {}
        },
        "neg_score_calculator": {
            "name": "neg_score_calculator",
            "location": 130,
            "return": [
                "WorldRunResults"
            ],
            "arguments": {
                "worlds": [
                    "list[NegWorld]"
                ],
                "scoring_context": [
                    "dict[(str, Any)]"
                ],
                "dry_run": [
                    "bool"
                ],
                "scoring_method": [
                    "str"
                ]
            }
        },
        "_update_kwargs": {
            "name": "_update_kwargs",
            "location": 184,
            "return": [],
            "arguments": {
                "kwargs": [],
                "domains": [],
                "competitors": []
            }
        },
        "create_neg_tournament": {
            "name": "create_neg_tournament",
            "location": 200,
            "return": [
                "PathLike"
            ],
            "arguments": {
                "competitors": [
                    "Sequence[(str | type[Agent])]"
                ],
                "domains": [
                    "Generator[(NegDomain, None, None)]"
                ],
                "competitor_params": [
                    "(Sequence[(dict | None)] | None)"
                ]
            }
        },
        "neg_tournament": {
            "name": "neg_tournament",
            "location": 248,
            "return": [
                "(TournamentResults | PathLike)"
            ],
            "arguments": {
                "competitors": [
                    "Sequence[((str | type[Agent]) | type[Negotiator])]"
                ],
                "domains": [
                    "Generator[(NegDomain, None, None)]"
                ],
                "competitor_params": [
                    "(Sequence[(dict | None)] | None)"
                ]
            }
        },
        "random_discrete_domains": {
            "name": "random_discrete_domains",
            "location": 308,
            "return": [
                "Generator[(NegDomain, None, None)]"
            ],
            "arguments": {
                "issues": [
                    "list[((Issue | int) | tuple[(int, int)])]"
                ],
                "partners": [
                    "list[Negotiator]"
                ],
                "n_negotiators": [],
                "positions": [
                    "(int | tuple[(int, int)])"
                ],
                "normalized": [],
                "ufun_type": [],
                "roles": [
                    "(list[str] | None)"
                ],
                "partner_extraction_method": []
            }
        },
        "domains_from_list": {
            "name": "domains_from_list",
            "location": 396,
            "return": [],
            "arguments": {
                "domains": [
                    "list[NegDomain]"
                ]
            }
        },
        "random_discrete_domains.intin": {
            "name": "intin",
            "location": 351,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "random_discrete_domains.partners_generator": {
            "name": "partners_generator",
            "location": 368,
            "return": [],
            "arguments": {}
        }
    },
    "negmas-master/negmas/tournaments/tournaments.py": {
        "to_file": {
            "name": "to_file",
            "location": 63,
            "return": [],
            "arguments": {
                "x": [],
                "f": []
            }
        },
        "from_file": {
            "name": "from_file",
            "location": 74,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "_hash": {
            "name": "_hash",
            "location": 115,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "score_adapter": {
            "name": "score_adapter",
            "location": 229,
            "return": [
                "WorldRunResults"
            ],
            "arguments": {
                "scores_data": [
                    "dict[(str, Any)]"
                ]
            }
        },
        "combine_partially_run_worlds": {
            "name": "combine_partially_run_worlds",
            "location": 471,
            "return": [
                "list[Path]"
            ],
            "arguments": {
                "tournament_path": [
                    "(str | Path)"
                ],
                "min_time_fraction": [
                    "float"
                ],
                "min_real_time": [
                    "float"
                ],
                "min_n_steps": [
                    "int"
                ],
                "min_n_attempts": [
                    "int"
                ],
                "dry_run": [
                    "bool"
                ]
            }
        },
        "_path": {
            "name": "_path",
            "location": 504,
            "return": [
                "Path"
            ],
            "arguments": {
                "path": [
                    "(str | Path)"
                ]
            }
        },
        "_run_id": {
            "name": "_run_id",
            "location": 512,
            "return": [],
            "arguments": {
                "config_set": []
            }
        },
        "_run_worlds": {
            "name": "_run_worlds",
            "location": 519,
            "return": [
                "tuple[(str, list[str], (WorldRunResults | None), (WorldSetRunStats | None), (AgentStats | None), (AgentStats | None))]"
            ],
            "arguments": {
                "worlds_params": [
                    "list[dict[(str, Any)]]"
                ],
                "world_generator": [
                    "WorldGenerator"
                ],
                "score_calculator": [
                    "Callable[([list[World], dict[(str, Any)], bool], WorldRunResults)]"
                ],
                "world_progress_callback": [
                    "(Callable[([(World | None)], None)] | None)"
                ],
                "dry_run": [
                    "bool"
                ],
                "save_world_stats": [
                    "bool"
                ],
                "override_ran_worlds": [
                    "bool"
                ],
                "save_progress_every": [
                    "int"
                ],
                "attempts_path": [],
                "max_attempts": [],
                "verbose": []
            }
        },
        "run_world": {
            "name": "run_world",
            "location": 973,
            "return": [
                "tuple[(str, list[str], (WorldRunResults | None), (WorldSetRunStats | None), (AgentStats | None), (AgentStats | None))]"
            ],
            "arguments": {
                "world_params": [
                    "dict"
                ],
                "dry_run": [
                    "bool"
                ],
                "save_world_stats": [
                    "bool"
                ],
                "attempts_path": [],
                "max_attempts": [],
                "verbose": []
            }
        },
        "run_worlds": {
            "name": "run_worlds",
            "location": 1042,
            "return": [
                "tuple[(str, list[str], (WorldRunResults | None), (WorldSetRunStats | None), (AgentStats | None), (AgentStats | None))]"
            ],
            "arguments": {
                "worlds_params": [
                    "list[dict]"
                ],
                "dry_run": [
                    "bool"
                ],
                "save_world_stats": [
                    "bool"
                ],
                "attempts_path": [],
                "max_attempts": [],
                "verbose": []
            }
        },
        "process_world_run": {
            "name": "process_world_run",
            "location": 1122,
            "return": [
                "tuple[(list[dict[(str, Any)]], dict[(str, list[dict[(str, Any)]])])]"
            ],
            "arguments": {
                "run_id": [
                    "str"
                ],
                "results": [
                    "(WorldRunResults | None)"
                ],
                "tournament_name": [
                    "str"
                ]
            }
        },
        "_get_executor": {
            "name": "_get_executor",
            "location": 1189,
            "return": [],
            "arguments": {
                "method": [],
                "verbose": [],
                "scheduler_ip": [],
                "scheduler_port": [],
                "total_timeout": []
            }
        },
        "_submit_all": {
            "name": "_submit_all",
            "location": 1228,
            "return": [],
            "arguments": {
                "executor": [],
                "assigned": [],
                "run_ids": [],
                "world_generator": [],
                "score_calculator": [],
                "world_progress_callback": [],
                "override_ran_worlds": [],
                "attempts_path": [],
                "verbose": [],
                "max_attempts": []
            }
        },
        "save_run_results": {
            "name": "save_run_results",
            "location": 1274,
            "return": [],
            "arguments": {
                "run_id": [],
                "score_": [],
                "world_stats_": [],
                "type_stats_": [],
                "agent_stats_": [],
                "tournament_progress_callback": [],
                "world_paths": [],
                "name": [],
                "verbose": [],
                "_strt": [],
                "attempts_path": [],
                "n_world_configs": [],
                "i": []
            }
        },
        "_run_parallel": {
            "name": "_run_parallel",
            "location": 1329,
            "return": [
                "None"
            ],
            "arguments": {
                "parallelism": [],
                "scheduler_ip": [],
                "scheduler_port": [],
                "verbose": [],
                "assigned": [],
                "world_generator": [],
                "tournament_progress_callback": [],
                "world_progress_callback": [],
                "n_worlds": [],
                "name": [],
                "score_calculator": [],
                "save_world_stats": [],
                "scores_file": [],
                "world_stats_file": [],
                "type_stats_file": [],
                "agent_stats_file": [],
                "run_ids": [],
                "print_exceptions": [],
                "override_ran_worlds": [],
                "attempts_path": [],
                "total_timeout": [],
                "max_attempts": []
            }
        },
        "_divide_into_sets": {
            "name": "_divide_into_sets",
            "location": 1424,
            "return": [],
            "arguments": {
                "competitors": [],
                "n_competitors_per_world": []
            }
        },
        "get_world_paths": {
            "name": "get_world_paths",
            "location": 1446,
            "return": [],
            "arguments": {}
        },
        "run_tournament": {
            "name": "run_tournament",
            "location": 1488,
            "return": [
                "None"
            ],
            "arguments": {
                "tournament_path": [
                    "(str | Path)"
                ],
                "world_generator": [
                    "(WorldGenerator | None)"
                ],
                "score_calculator": [
                    "(Callable[([list[World], dict[(str, Any)], bool], WorldRunResults)] | None)"
                ],
                "total_timeout": [
                    "(int | None)"
                ],
                "parallelism": [],
                "scheduler_ip": [
                    "(str | None)"
                ],
                "scheduler_port": [
                    "(str | None)"
                ],
                "tournament_progress_callback": [
                    "(Callable[([(WorldRunResults | None), int, int], None)] | None)"
                ],
                "world_progress_callback": [
                    "(Callable[([(World | None)], None)] | None)"
                ],
                "verbose": [
                    "bool"
                ],
                "compact": [
                    "(bool | None)"
                ],
                "print_exceptions": [
                    "bool"
                ],
                "override_ran_worlds": [
                    "bool"
                ],
                "max_attempts": [
                    "int"
                ]
            }
        },
        "create_tournament": {
            "name": "create_tournament",
            "location": 1763,
            "return": [
                "Path"
            ],
            "arguments": {
                "competitors": [
                    "Sequence[(str | type[Agent])]"
                ],
                "config_generator": [
                    "ConfigGenerator"
                ],
                "config_assigner": [
                    "ConfigAssigner"
                ],
                "world_generator": [
                    "WorldGenerator"
                ],
                "score_calculator": [
                    "Callable[([list[World], dict[(str, Any)], bool], WorldRunResults)]"
                ],
                "competitor_params": [
                    "(Sequence[dict[(str, Any)]] | None)"
                ],
                "n_competitors_per_world": [
                    "(int | None)"
                ],
                "round_robin": [
                    "bool"
                ],
                "agent_names_reveal_type": [],
                "n_agents_per_competitor": [],
                "n_configs": [
                    "int"
                ],
                "max_worlds_per_config": [
                    "int"
                ],
                "n_runs_per_world": [
                    "int"
                ],
                "max_n_configs": [
                    "(int | None)"
                ],
                "n_runs_per_config": [
                    "(int | None)"
                ],
                "base_tournament_path": [
                    "((Path | str) | None)"
                ],
                "total_timeout": [
                    "(int | None)"
                ],
                "parallelism": [],
                "scheduler_ip": [
                    "(str | None)"
                ],
                "scheduler_port": [
                    "(str | None)"
                ],
                "non_competitors": [
                    "(tuple[(str | Any)] | None)"
                ],
                "non_competitor_params": [
                    "(tuple[dict[(str, Any)]] | None)"
                ],
                "dynamic_non_competitors": [
                    "(tuple[(str | Any)] | None)"
                ],
                "dynamic_non_competitor_params": [
                    "(tuple[dict[(str, Any)]] | None)"
                ],
                "exclude_competitors_from_reassignment": [
                    "bool"
                ],
                "name": [
                    "(str | None)"
                ],
                "verbose": [
                    "bool"
                ],
                "compact": [
                    "bool"
                ],
                "save_video_fraction": [
                    "float"
                ],
                "forced_logs_fraction": [
                    "float"
                ],
                "video_params": [],
                "video_saver": []
            }
        },
        "extract_basic_stats": {
            "name": "extract_basic_stats",
            "location": 2181,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "_combine_stats": {
            "name": "_combine_stats",
            "location": 2203,
            "return": [
                "(pd.DataFrame | None)"
            ],
            "arguments": {
                "stats": [
                    "(pd.DataFrame | None)"
                ]
            }
        },
        "combine_tournament_stats": {
            "name": "combine_tournament_stats",
            "location": 2256,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "sources": [
                    "Iterable[(str | Path)]"
                ],
                "dest": [
                    "((str | Path) | None)"
                ],
                "verbose": []
            }
        },
        "compile_results": {
            "name": "compile_results",
            "location": 2284,
            "return": [],
            "arguments": {
                "path": [
                    "((str | Path) | Path)"
                ]
            }
        },
        "combine_tournament_results": {
            "name": "combine_tournament_results",
            "location": 2320,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "sources": [
                    "Iterable[(str | Path)]"
                ],
                "dest": [
                    "((str | Path) | None)"
                ],
                "verbose": []
            }
        },
        "evaluate_tournament": {
            "name": "evaluate_tournament",
            "location": 2348,
            "return": [
                "TournamentResults"
            ],
            "arguments": {
                "tournament_path": [
                    "(((str | Path) | Path) | None)"
                ],
                "scores": [
                    "(pd.DataFrame | None)"
                ],
                "stats": [
                    "(pd.DataFrame | None)"
                ],
                "world_stats": [
                    "(pd.DataFrame | None)"
                ],
                "type_stats": [
                    "(pd.DataFrame | None)"
                ],
                "agent_stats": [
                    "(pd.DataFrame | None)"
                ],
                "metric": [
                    "(str | Callable[([pd.DataFrame], float)])"
                ],
                "verbose": [
                    "bool"
                ],
                "recursive": [
                    "bool"
                ],
                "extra_scores_to_use": [
                    "(str | None)"
                ],
                "compile": [
                    "bool"
                ]
            }
        },
        "tournament": {
            "name": "tournament",
            "location": 2574,
            "return": [
                "(TournamentResults | Path)"
            ],
            "arguments": {
                "competitors": [
                    "Sequence[(str | type[Agent])]"
                ],
                "config_generator": [
                    "ConfigGenerator"
                ],
                "config_assigner": [
                    "ConfigAssigner"
                ],
                "world_generator": [
                    "WorldGenerator"
                ],
                "score_calculator": [
                    "Callable[([list[World], dict[(str, Any)], bool], WorldRunResults)]"
                ],
                "competitor_params": [
                    "(Sequence[dict[(str, Any)]] | None)"
                ],
                "n_competitors_per_world": [
                    "(int | None)"
                ],
                "round_robin": [
                    "bool"
                ],
                "stage_winners_fraction": [
                    "float"
                ],
                "agent_names_reveal_type": [],
                "n_agents_per_competitor": [],
                "n_configs": [
                    "int"
                ],
                "max_worlds_per_config": [
                    "int"
                ],
                "n_runs_per_world": [
                    "int"
                ],
                "max_n_configs": [
                    "(int | None)"
                ],
                "n_runs_per_config": [
                    "(int | None)"
                ],
                "tournament_path": [
                    "(str | None)"
                ],
                "total_timeout": [
                    "(int | None)"
                ],
                "parallelism": [],
                "scheduler_ip": [
                    "(str | None)"
                ],
                "scheduler_port": [
                    "(str | None)"
                ],
                "tournament_progress_callback": [
                    "(Callable[([(WorldRunResults | None), int, int], None)] | None)"
                ],
                "world_progress_callback": [
                    "(Callable[([(World | None)], None)] | None)"
                ],
                "non_competitors": [
                    "(tuple[(str | Any)] | None)"
                ],
                "non_competitor_params": [
                    "(tuple[dict[(str, Any)]] | None)"
                ],
                "dynamic_non_competitors": [
                    "(tuple[(str | Any)] | None)"
                ],
                "dynamic_non_competitor_params": [
                    "(tuple[dict[(str, Any)]] | None)"
                ],
                "exclude_competitors_from_reassignment": [
                    "bool"
                ],
                "name": [
                    "(str | None)"
                ],
                "verbose": [
                    "bool"
                ],
                "configs_only": [
                    "bool"
                ],
                "compact": [
                    "bool"
                ],
                "print_exceptions": [
                    "bool"
                ],
                "metric": [],
                "save_video_fraction": [
                    "float"
                ],
                "forced_logs_fraction": [
                    "float"
                ],
                "video_params": [],
                "video_saver": [],
                "max_attempts": [
                    "int"
                ],
                "extra_scores_to_use": [
                    "(str | None)"
                ]
            }
        },
        "is_already_run": {
            "name": "is_already_run",
            "location": 2825,
            "return": [
                "bool"
            ],
            "arguments": {
                "world_params": []
            }
        },
        "combine_tournaments": {
            "name": "combine_tournaments",
            "location": 2829,
            "return": [
                "tuple[(int, int)]"
            ],
            "arguments": {
                "sources": [
                    "Iterable[(str | Path)]"
                ],
                "dest": [
                    "(str | Path)"
                ],
                "verbose": []
            }
        },
        "WorldGenerator.__call__": {
            "name": "__call__",
            "location": 133,
            "return": [
                "World"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigGenerator.__call__": {
            "name": "__call__",
            "location": 158,
            "return": [
                "list[dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "n_competitors": [
                    "int"
                ],
                "n_agents_per_competitor": [
                    "int"
                ],
                "agent_names_reveal_type": [
                    "bool"
                ],
                "non_competitors": [
                    "(tuple[(str | Any)] | None)"
                ],
                "non_competitor_params": [
                    "(tuple[dict[(str, Any)]] | None)"
                ],
                "compact": [
                    "bool"
                ]
            }
        },
        "ConfigAssigner.__call__": {
            "name": "__call__",
            "location": 192,
            "return": [
                "list[list[dict[(str, Any)]]]"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "list[dict[(str, Any)]]"
                ],
                "max_n_worlds": [
                    "int"
                ],
                "n_agents_per_competitor": [
                    "int"
                ],
                "fair": [
                    "bool"
                ],
                "competitors": [
                    "Sequence[(str | type[Agent])]"
                ],
                "params": [
                    "Sequence[dict[(str, Any)]]"
                ],
                "dynamic_non_competitors": [
                    "(Sequence[(str | type[Agent])] | None)"
                ],
                "dynamic_non_competitor_params": [
                    "(Sequence[dict[(str, Any)]] | None)"
                ],
                "exclude_competitors_from_reassignment": [
                    "bool"
                ]
            }
        },
        "AgentStats.to_record": {
            "name": "to_record",
            "location": 304,
            "return": [],
            "arguments": {
                "self": [],
                "world": [],
                "label": []
            }
        },
        "AgentStats.from_records": {
            "name": "from_records",
            "location": 322,
            "return": [],
            "arguments": {
                "cls": [],
                "records": [
                    "list[dict[(str, Any)]]"
                ],
                "label": [
                    "str"
                ]
            }
        },
        "WorldSetRunStats.to_record": {
            "name": "to_record",
            "location": 402,
            "return": [],
            "arguments": {
                "self": [],
                "world": []
            }
        },
        "WorldSetRunStats.from_records": {
            "name": "from_records",
            "location": 406,
            "return": [],
            "arguments": {
                "cls": [],
                "records": [
                    "list[dict[(str, Any)]]"
                ]
            }
        },
        "TournamentResults.__str__": {
            "name": "__str__",
            "location": 457,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_combine_stats.get_last": {
            "name": "get_last",
            "location": 2216,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "_combine_stats.adjust_name": {
            "name": "adjust_name",
            "location": 2235,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "tournament._run_eval": {
            "name": "_run_eval",
            "location": 2719,
            "return": [],
            "arguments": {
                "competitors_": [],
                "stage_name": []
            }
        },
        "tournament._keep_n": {
            "name": "_keep_n",
            "location": 2780,
            "return": [],
            "arguments": {
                "competitors_": [],
                "results_": [],
                "n": []
            }
        }
    },
    "negmas-master/negmas/tournaments/__init__.py": {},
    "negmas-master/negmas/types/named.py": {
        "NamedObject.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "(str | None)"
                ]
            }
        },
        "NamedObject.create": {
            "name": "create",
            "location": 62,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "NamedObject.spawn_object": {
            "name": "spawn_object",
            "location": 67,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "NamedObject.spawn": {
            "name": "spawn",
            "location": 99,
            "return": [],
            "arguments": {
                "cls": [],
                "spawn_as": [],
                "spawn_params": [
                    "(dict[(str, Any)] | None)"
                ]
            }
        },
        "NamedObject.name": {
            "name": "name",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "NamedObject.uuid": {
            "name": "uuid",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "uuid": []
            }
        },
        "NamedObject.id": {
            "name": "id",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "NamedObject.checkpoint": {
            "name": "checkpoint",
            "location": 154,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "PathLike"
                ],
                "file_name": [
                    "(str | None)"
                ],
                "info": [
                    "(dict[(str, Any)] | None)"
                ],
                "exist_ok": [
                    "bool"
                ],
                "single_checkpoint": [
                    "bool"
                ],
                "step_attribs": [
                    "tuple[(str, ...)]"
                ]
            }
        },
        "NamedObject.from_checkpoint": {
            "name": "from_checkpoint",
            "location": 250,
            "return": [
                "(NamedObject | tuple[(NamedObject, dict[(str, Any)])])"
            ],
            "arguments": {
                "cls": [],
                "file_name": [
                    "(Path | str)"
                ],
                "return_info": []
            }
        },
        "NamedObject.checkpoint_info": {
            "name": "checkpoint_info",
            "location": 279,
            "return": [
                "dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "file_name": [
                    "(Path | str)"
                ]
            }
        },
        "NamedObject.type_name": {
            "name": "type_name",
            "location": 293,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamedObject.short_type_name": {
            "name": "short_type_name",
            "location": 299,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/types/rational.py": {
        "Rational._set_pref_owner": {
            "name": "_set_pref_owner",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rational.on_preferences_changed": {
            "name": "on_preferences_changed",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "changes": [
                    "list[PreferencesChange]"
                ]
            }
        },
        "Rational.set_preferences": {
            "name": "set_preferences",
            "location": 81,
            "return": [
                "(Preferences | None)"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "(Preferences | None)"
                ],
                "force": []
            }
        },
        "Rational.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "(str | None)"
                ],
                "preferences": [
                    "(Preferences | None)"
                ],
                "ufun": [
                    "(BaseUtilityFunction | None)"
                ],
                "id": [
                    "(str | None)"
                ],
                "type_name": [
                    "(str | None)"
                ]
            }
        },
        "Rational.preferences": {
            "name": "preferences",
            "location": 122,
            "return": [
                "(Preferences | None)"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rational.crisp_ufun": {
            "name": "crisp_ufun",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "v": [
                    "UtilityFunction"
                ]
            }
        },
        "Rational.prob_ufun": {
            "name": "prob_ufun",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "v": [
                    "ProbUtilityFunction"
                ]
            }
        },
        "Rational.ufun": {
            "name": "ufun",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "v": [
                    "BaseUtilityFunction"
                ]
            }
        },
        "Rational.has_preferences": {
            "name": "has_preferences",
            "location": 182,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rational.has_cardinal_preferences": {
            "name": "has_cardinal_preferences",
            "location": 187,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rational.reserved_outcome": {
            "name": "reserved_outcome",
            "location": 196,
            "return": [
                "(Outcome | None)"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rational.reserved_value": {
            "name": "reserved_value",
            "location": 217,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/types/runnable.py": {
        "Runnable.current_step": {
            "name": "current_step",
            "location": 18,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Runnable.step": {
            "name": "step",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Runnable.run": {
            "name": "run",
            "location": 25,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "negmas-master/negmas/types/__init__.py": {},
    "negmas-master/tests/switches.py": {},
    "negmas-master/tests/test_base_issue.py": {
        "test_make_issue_generation": {
            "name": "test_make_issue_generation",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "test_value_generation_ordinal": {
            "name": "test_value_generation_ordinal",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "test_can_create_different_types": {
            "name": "test_can_create_different_types",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_contains_discrete_list": {
            "name": "test_contains_discrete_list",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_contains_discrete": {
            "name": "test_contains_discrete",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "test_contains_continuous": {
            "name": "test_contains_continuous",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "test_can_loop_over_discrete_issue": {
            "name": "test_can_loop_over_discrete_issue",
            "location": 78,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "test_can_loop_over_continuous_issue": {
            "name": "test_can_loop_over_continuous_issue",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "test_values_contained_in_issues_contiguous": {
            "name": "test_values_contained_in_issues_contiguous",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "test_values_contained_in_outcome_spaces": {
            "name": "test_values_contained_in_outcome_spaces",
            "location": 128,
            "return": [],
            "arguments": {}
        },
        "test_ordinal_issue_with_multiple_int_types": {
            "name": "test_ordinal_issue_with_multiple_int_types",
            "location": 149,
            "return": [],
            "arguments": {}
        },
        "test_ordinal_issue_with_multiple_float_types": {
            "name": "test_ordinal_issue_with_multiple_float_types",
            "location": 157,
            "return": [],
            "arguments": {}
        }
    },
    "negmas-master/tests/test_checkpoints.py": {
        "checkpoint_every": {
            "name": "checkpoint_every",
            "location": 15,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "test_can_run_from_checkpoint": {
            "name": "test_can_run_from_checkpoint",
            "location": 133,
            "return": [],
            "arguments": {
                "tmp_path": [],
                "checkpoint_every": [],
                "exist_ok": [],
                "copy": [],
                "fork_after_reset": []
            }
        }
    },
    "negmas-master/tests/test_common.py": {
        "test_checkpoint": {
            "name": "test_checkpoint",
            "location": 40,
            "return": [],
            "arguments": {
                "tmp_path": [],
                "exist_ok": [],
                "with_name": [],
                "with_info": [],
                "single_checkpoint": [],
                "step_attribs": []
            }
        }
    },
    "negmas-master/tests/test_genius.py": {
        "test_get_genius_agents_example": {
            "name": "test_get_genius_agents_example",
            "location": 30,
            "return": [],
            "arguments": {
                "bilateral": []
            }
        },
        "test_inclusion_of_sets_in_get_agents": {
            "name": "test_inclusion_of_sets_in_get_agents",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "test_genius_does_not_freeze": {
            "name": "test_genius_does_not_freeze",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "test_old_agent": {
            "name": "test_old_agent",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "test_old_agent2": {
            "name": "test_old_agent2",
            "location": 134,
            "return": [],
            "arguments": {}
        },
        "test_genius_agents_run_using_hypothesis": {
            "name": "test_genius_agents_run_using_hypothesis",
            "location": 178,
            "return": [],
            "arguments": {
                "agent_name1": [],
                "agent_name2": [],
                "single_issue": []
            }
        },
        "test_genius_agent_gets_preferences": {
            "name": "test_genius_agent_gets_preferences",
            "location": 211,
            "return": [],
            "arguments": {}
        },
        "test_genius_agents_run_example": {
            "name": "test_genius_agents_run_example",
            "location": 244,
            "return": [],
            "arguments": {}
        },
        "test_agentk_perceives_time": {
            "name": "test_agentk_perceives_time",
            "location": 283,
            "return": [],
            "arguments": {}
        },
        "test_2genius_together": {
            "name": "test_2genius_together",
            "location": 383,
            "return": [],
            "arguments": {
                "a1": [],
                "a2": [],
                "n_steps": [],
                "time_limit": []
            }
        },
        "test_caudacius_caudacius": {
            "name": "test_caudacius_caudacius",
            "location": 410,
            "return": [],
            "arguments": {}
        }
    },
    "negmas-master/tests/test_genius_bridge.py": {
        "init_genius": {
            "name": "init_genius",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_genius_bridge_cleaning": {
            "name": "test_genius_bridge_cleaning",
            "location": 22,
            "return": [],
            "arguments": {
                "init_genius": []
            }
        },
        "test_genius_bridge_shuttingdown": {
            "name": "test_genius_bridge_shuttingdown",
            "location": 30,
            "return": [],
            "arguments": {
                "init_genius": []
            }
        },
        "test_genius_bridge_killing_threads": {
            "name": "test_genius_bridge_killing_threads",
            "location": 39,
            "return": [],
            "arguments": {
                "init_genius": []
            }
        },
        "test_genius_bridge_killing_polietly": {
            "name": "test_genius_bridge_killing_polietly",
            "location": 48,
            "return": [],
            "arguments": {
                "init_genius": []
            }
        },
        "test_genius_bridge_killing_forcibly": {
            "name": "test_genius_bridge_killing_forcibly",
            "location": 57,
            "return": [],
            "arguments": {
                "init_genius": []
            }
        },
        "test_genius_bridge_starting": {
            "name": "test_genius_bridge_starting",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "test_genius_bridge_restarting": {
            "name": "test_genius_bridge_restarting",
            "location": 76,
            "return": [],
            "arguments": {}
        }
    },
    "negmas-master/tests/test_genius_negotiators_all.py": {
        "do_run": {
            "name": "do_run",
            "location": 102,
            "return": [],
            "arguments": {
                "agent_factory": [],
                "base_folder": [],
                "opponent_preferences": [],
                "agent_preferences": [],
                "agent_starts": [],
                "opponent_factory": [],
                "n_steps": [],
                "time_limit": []
            }
        },
        "do_test_same_ufun": {
            "name": "do_test_same_ufun",
            "location": 132,
            "return": [],
            "arguments": {
                "agent_factory": [],
                "base_folder": [],
                "n_steps": [],
                "time_limit": [],
                "n_trials": []
            }
        },
        "do_test_genius_agent": {
            "name": "do_test_genius_agent",
            "location": 157,
            "return": [],
            "arguments": {
                "AgentFactory": [],
                "must_agree_if_same_preferences": [],
                "java_class_name": []
            }
        },
        "test_all_negotiators": {
            "name": "test_all_negotiators",
            "location": 210,
            "return": [],
            "arguments": {
                "negotiator": []
            }
        },
        "test_boulware_party": {
            "name": "test_boulware_party",
            "location": 218,
            "return": [],
            "arguments": {}
        },
        "test_boulware_agent": {
            "name": "test_boulware_agent",
            "location": 228,
            "return": [],
            "arguments": {}
        },
        "test_AgentX": {
            "name": "test_AgentX",
            "location": 236,
            "return": [],
            "arguments": {}
        },
        "test_YXAgent": {
            "name": "test_YXAgent",
            "location": 244,
            "return": [],
            "arguments": {}
        },
        "test_Caduceus": {
            "name": "test_Caduceus",
            "location": 252,
            "return": [],
            "arguments": {}
        },
        "test_ParsCat": {
            "name": "test_ParsCat",
            "location": 260,
            "return": [],
            "arguments": {}
        },
        "test_ParsAgent": {
            "name": "test_ParsAgent",
            "location": 268,
            "return": [],
            "arguments": {}
        },
        "test_PonPokoAgent": {
            "name": "test_PonPokoAgent",
            "location": 276,
            "return": [],
            "arguments": {}
        },
        "test_RandomDance": {
            "name": "test_RandomDance",
            "location": 284,
            "return": [],
            "arguments": {}
        },
        "test_Atlas32016": {
            "name": "test_Atlas32016",
            "location": 292,
            "return": [],
            "arguments": {}
        },
        "test_MyAgent": {
            "name": "test_MyAgent",
            "location": 300,
            "return": [],
            "arguments": {}
        },
        "test_Farma": {
            "name": "test_Farma",
            "location": 308,
            "return": [],
            "arguments": {}
        },
        "test_PokerFace": {
            "name": "test_PokerFace",
            "location": 316,
            "return": [],
            "arguments": {}
        },
        "test_AgentBuyong": {
            "name": "test_AgentBuyong",
            "location": 324,
            "return": [],
            "arguments": {}
        },
        "test_Kawaii": {
            "name": "test_Kawaii",
            "location": 332,
            "return": [],
            "arguments": {}
        },
        "test_Atlas3": {
            "name": "test_Atlas3",
            "location": 340,
            "return": [],
            "arguments": {}
        },
        "test_AgentYK": {
            "name": "test_AgentYK",
            "location": 348,
            "return": [],
            "arguments": {}
        },
        "test_Group2": {
            "name": "test_Group2",
            "location": 356,
            "return": [],
            "arguments": {}
        },
        "test_WhaleAgent": {
            "name": "test_WhaleAgent",
            "location": 364,
            "return": [],
            "arguments": {}
        },
        "test_DoNA": {
            "name": "test_DoNA",
            "location": 372,
            "return": [],
            "arguments": {}
        },
        "test_AgentM": {
            "name": "test_AgentM",
            "location": 380,
            "return": [],
            "arguments": {}
        },
        "test_TMFAgent": {
            "name": "test_TMFAgent",
            "location": 388,
            "return": [],
            "arguments": {}
        },
        "test_OMACagent": {
            "name": "test_OMACagent",
            "location": 396,
            "return": [],
            "arguments": {}
        },
        "test_AgentLG": {
            "name": "test_AgentLG",
            "location": 404,
            "return": [],
            "arguments": {}
        },
        "test_CUHKAgent": {
            "name": "test_CUHKAgent",
            "location": 412,
            "return": [],
            "arguments": {}
        },
        "test_ValueModelAgent": {
            "name": "test_ValueModelAgent",
            "location": 420,
            "return": [],
            "arguments": {}
        },
        "test_NiceTitForTat": {
            "name": "test_NiceTitForTat",
            "location": 428,
            "return": [],
            "arguments": {}
        },
        "test_TheNegotiator": {
            "name": "test_TheNegotiator",
            "location": 436,
            "return": [],
            "arguments": {}
        },
        "test_AgentK2": {
            "name": "test_AgentK2",
            "location": 444,
            "return": [],
            "arguments": {}
        },
        "test_BRAMAgent": {
            "name": "test_BRAMAgent",
            "location": 452,
            "return": [],
            "arguments": {}
        },
        "test_IAMhaggler2011": {
            "name": "test_IAMhaggler2011",
            "location": 460,
            "return": [],
            "arguments": {}
        },
        "test_Gahboninho": {
            "name": "test_Gahboninho",
            "location": 468,
            "return": [],
            "arguments": {}
        },
        "test_HardHeaded": {
            "name": "test_HardHeaded",
            "location": 476,
            "return": [],
            "arguments": {}
        },
        "test_AgentK": {
            "name": "test_AgentK",
            "location": 484,
            "return": [],
            "arguments": {}
        },
        "test_Yushu": {
            "name": "test_Yushu",
            "location": 492,
            "return": [],
            "arguments": {}
        },
        "test_Nozomi": {
            "name": "test_Nozomi",
            "location": 500,
            "return": [],
            "arguments": {}
        },
        "test_IAMhaggler": {
            "name": "test_IAMhaggler",
            "location": 508,
            "return": [],
            "arguments": {}
        },
        "test_Terra": {
            "name": "test_Terra",
            "location": 516,
            "return": [],
            "arguments": {}
        },
        "test_Gangster": {
            "name": "test_Gangster",
            "location": 524,
            "return": [],
            "arguments": {}
        },
        "test_TheFawkes": {
            "name": "test_TheFawkes",
            "location": 532,
            "return": [],
            "arguments": {}
        },
        "test_MetaAgent": {
            "name": "test_MetaAgent",
            "location": 540,
            "return": [],
            "arguments": {}
        },
        "test_TheNegotiatorReloaded": {
            "name": "test_TheNegotiatorReloaded",
            "location": 548,
            "return": [],
            "arguments": {}
        },
        "test_Simpatico": {
            "name": "test_Simpatico",
            "location": 556,
            "return": [],
            "arguments": {}
        },
        "test_ConcederNegotiationParty": {
            "name": "test_ConcederNegotiationParty",
            "location": 564,
            "return": [],
            "arguments": {}
        },
        "test_BayesianAgent": {
            "name": "test_BayesianAgent",
            "location": 572,
            "return": [],
            "arguments": {}
        },
        "test_FuzzyAgent": {
            "name": "test_FuzzyAgent",
            "location": 580,
            "return": [],
            "arguments": {}
        },
        "test_ABMPAgent2": {
            "name": "test_ABMPAgent2",
            "location": 588,
            "return": [],
            "arguments": {}
        },
        "test_OptimalBidderSimple": {
            "name": "test_OptimalBidderSimple",
            "location": 596,
            "return": [],
            "arguments": {}
        },
        "test_SimilarityAgent": {
            "name": "test_SimilarityAgent",
            "location": 604,
            "return": [],
            "arguments": {}
        },
        "test_BoulwareNegotiationParty": {
            "name": "test_BoulwareNegotiationParty",
            "location": 612,
            "return": [],
            "arguments": {}
        },
        "test_TimeDependentAgentLinear": {
            "name": "test_TimeDependentAgentLinear",
            "location": 620,
            "return": [],
            "arguments": {}
        },
        "test_TimeDependentAgentHardliner": {
            "name": "test_TimeDependentAgentHardliner",
            "location": 628,
            "return": [],
            "arguments": {}
        },
        "test_TimeDependentAgentConceder": {
            "name": "test_TimeDependentAgentConceder",
            "location": 636,
            "return": [],
            "arguments": {}
        },
        "test_TimeDependentAgentBoulware": {
            "name": "test_TimeDependentAgentBoulware",
            "location": 644,
            "return": [],
            "arguments": {}
        },
        "test_RandomParty2": {
            "name": "test_RandomParty2",
            "location": 652,
            "return": [],
            "arguments": {}
        },
        "test_RandomParty": {
            "name": "test_RandomParty",
            "location": 660,
            "return": [],
            "arguments": {}
        },
        "test_RandomCounterOfferNegotiationParty": {
            "name": "test_RandomCounterOfferNegotiationParty",
            "location": 668,
            "return": [],
            "arguments": {}
        },
        "test_SimpleAgent": {
            "name": "test_SimpleAgent",
            "location": 676,
            "return": [],
            "arguments": {}
        },
        "test_ImmediateAcceptor": {
            "name": "test_ImmediateAcceptor",
            "location": 684,
            "return": [],
            "arguments": {}
        },
        "test_Rubick": {
            "name": "test_Rubick",
            "location": 695,
            "return": [],
            "arguments": {}
        },
        "test_CaduceusDC16": {
            "name": "test_CaduceusDC16",
            "location": 703,
            "return": [],
            "arguments": {}
        },
        "test_BetaOne": {
            "name": "test_BetaOne",
            "location": 711,
            "return": [],
            "arguments": {}
        },
        "test_AgreeableAgent2018": {
            "name": "test_AgreeableAgent2018",
            "location": 719,
            "return": [],
            "arguments": {}
        },
        "test_MengWan": {
            "name": "test_MengWan",
            "location": 727,
            "return": [],
            "arguments": {}
        },
        "test_GrandmaAgent": {
            "name": "test_GrandmaAgent",
            "location": 735,
            "return": [],
            "arguments": {}
        },
        "test_XianFaAgent": {
            "name": "test_XianFaAgent",
            "location": 743,
            "return": [],
            "arguments": {}
        },
        "test_PhoenixParty": {
            "name": "test_PhoenixParty",
            "location": 751,
            "return": [],
            "arguments": {}
        },
        "test_AgentHP2": {
            "name": "test_AgentHP2",
            "location": 759,
            "return": [],
            "arguments": {}
        },
        "test_KGAgent": {
            "name": "test_KGAgent",
            "location": 767,
            "return": [],
            "arguments": {}
        },
        "test_E2Agent": {
            "name": "test_E2Agent",
            "location": 775,
            "return": [],
            "arguments": {}
        },
        "test_Ngent": {
            "name": "test_Ngent",
            "location": 783,
            "return": [],
            "arguments": {}
        }
    },
    "negmas-master/tests/test_inout.py": {
        "scenarios_folder": {
            "name": "scenarios_folder",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "get_all_scenarios": {
            "name": "get_all_scenarios",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "test_reading_writing_linear_preferences": {
            "name": "test_reading_writing_linear_preferences",
            "location": 84,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_importing_file_without_exceptions": {
            "name": "test_importing_file_without_exceptions",
            "location": 109,
            "return": [],
            "arguments": {
                "scenarios_folder": []
            }
        },
        "test_simple_run_with_aspiration_agents": {
            "name": "test_simple_run_with_aspiration_agents",
            "location": 114,
            "return": [],
            "arguments": {}
        },
        "compared_two_domains": {
            "name": "compared_two_domains",
            "location": 127,
            "return": [],
            "arguments": {
                "domain": [],
                "domain2": []
            }
        },
        "do_enc_dec_trial": {
            "name": "do_enc_dec_trial",
            "location": 181,
            "return": [],
            "arguments": {
                "tmp": [],
                "folder_name": [],
                "with_discounting": []
            }
        },
        "test_encoding_decoding_example_AMPOvsCity": {
            "name": "test_encoding_decoding_example_AMPOvsCity",
            "location": 202,
            "return": [],
            "arguments": {
                "tmp_path": [],
                "disc": []
            }
        },
        "test_encoding_decoding_example_group_8_holiday": {
            "name": "test_encoding_decoding_example_group_8_holiday",
            "location": 208,
            "return": [],
            "arguments": {
                "tmp_path": [],
                "disc": []
            }
        },
        "test_encoding_decoding_all_without_discounting": {
            "name": "test_encoding_decoding_all_without_discounting",
            "location": 221,
            "return": [],
            "arguments": {
                "tmp_path": [],
                "folder_name": []
            }
        },
        "test_encoding_decoding_all_with_discounting": {
            "name": "test_encoding_decoding_all_with_discounting",
            "location": 226,
            "return": [],
            "arguments": {
                "tmp_path": [],
                "folder_name": []
            }
        }
    },
    "negmas-master/tests/test_jupyter.py": {
        "notebooks": {
            "name": "notebooks",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_notebook": {
            "name": "test_notebook",
            "location": 22,
            "return": [],
            "arguments": {
                "notebook": []
            }
        }
    },
    "negmas-master/tests/test_neg_tournaments.py": {
        "test_can_run_world": {
            "name": "test_can_run_world",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_can_run_tournament": {
            "name": "test_can_run_tournament",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "test_can_run_tournament_from_generator": {
            "name": "test_can_run_tournament_from_generator",
            "location": 87,
            "return": [],
            "arguments": {}
        }
    },
    "negmas-master/tests/test_outcome_space.py": {},
    "negmas-master/tests/test_prob_ufun.py": {
        "test_construction": {
            "name": "test_construction",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "negmas-master/tests/test_sao.py": {
        "test_do_nothing_never_gets_agreements": {
            "name": "test_do_nothing_never_gets_agreements",
            "location": 30,
            "return": [],
            "arguments": {
                "opp": [],
                "start": [],
                "rejector": [],
                "avoid_ultimatum": []
            }
        },
        "test_has_correct_type_name": {
            "name": "test_has_correct_type_name",
            "location": 52,
            "return": [],
            "arguments": {
                "factory": [],
                "name": [],
                "short_name": []
            }
        }
    },
    "negmas-master/tests/test_sao_negotiators.py": {
        "run_buyer_seller": {
            "name": "run_buyer_seller",
            "location": 16,
            "return": [],
            "arguments": {
                "buyer": [],
                "seller": [],
                "normalized": []
            }
        },
        "kind_tft": {
            "name": "kind_tft",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "test_buy_sell_asp_asp": {
            "name": "test_buy_sell_asp_asp",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "test_buy_sell_tft_tft": {
            "name": "test_buy_sell_tft_tft",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "test_buy_sell_asp_tft": {
            "name": "test_buy_sell_asp_tft",
            "location": 87,
            "return": [],
            "arguments": {}
        }
    },
    "negmas-master/tests/test_sao_slow.py": {
        "test_hidden_time_limit_words": {
            "name": "test_hidden_time_limit_words",
            "location": 243,
            "return": [],
            "arguments": {}
        },
        "test_neg_run_no_waiting": {
            "name": "test_neg_run_no_waiting",
            "location": 269,
            "return": [],
            "arguments": {}
        },
        "test_neg_sync_loop": {
            "name": "test_neg_sync_loop",
            "location": 295,
            "return": [],
            "arguments": {
                "keep_order": []
            }
        },
        "test_neg_run_sync": {
            "name": "test_neg_run_sync",
            "location": 337,
            "return": [],
            "arguments": {
                "n_negotiators": []
            }
        },
        "test_exceptions_are_saved": {
            "name": "test_exceptions_are_saved",
            "location": 384,
            "return": [],
            "arguments": {}
        },
        "test_on_negotiation_start": {
            "name": "test_on_negotiation_start",
            "location": 412,
            "return": [],
            "arguments": {}
        },
        "test_round_n_agents": {
            "name": "test_round_n_agents",
            "location": 418,
            "return": [],
            "arguments": {
                "n_negotiators": []
            }
        },
        "test_mechanism_can_run": {
            "name": "test_mechanism_can_run",
            "location": 431,
            "return": [],
            "arguments": {
                "n_negotiators": []
            }
        },
        "test_mechanism_runs_with_offering_not_accepting": {
            "name": "test_mechanism_runs_with_offering_not_accepting",
            "location": 443,
            "return": [],
            "arguments": {
                "n_negotiators": [],
                "oia": []
            }
        },
        "test_mechanism_runall": {
            "name": "test_mechanism_runall",
            "location": 465,
            "return": [],
            "arguments": {
                "n_negotiators": [],
                "oia": []
            }
        },
        "test_sync_controller": {
            "name": "test_sync_controller",
            "location": 500,
            "return": [],
            "arguments": {
                "n_negotiations": [],
                "n_negotiators": [],
                "oia": []
            }
        },
        "test_pickling_mechanism": {
            "name": "test_pickling_mechanism",
            "location": 530,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_checkpointing_mechanism": {
            "name": "test_checkpointing_mechanism",
            "location": 563,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_sync_controller_gets_all_offers": {
            "name": "test_sync_controller_gets_all_offers",
            "location": 616,
            "return": [],
            "arguments": {
                "n_negs": []
            }
        },
        "test_single_agreement_gets_one_agreement": {
            "name": "test_single_agreement_gets_one_agreement",
            "location": 643,
            "return": [],
            "arguments": {
                "n_negs": [],
                "strict": []
            }
        },
        "test_loops_are_broken": {
            "name": "test_loops_are_broken",
            "location": 686,
            "return": [],
            "arguments": {
                "keep_order": []
            }
        },
        "test_can_create_all_negotiator_types": {
            "name": "test_can_create_all_negotiator_types",
            "location": 742,
            "return": [],
            "arguments": {
                "typ": []
            }
        },
        "test_can_run_all_negotiators": {
            "name": "test_can_run_all_negotiators",
            "location": 763,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "w1p": [],
                "w1q": [],
                "w2p": [],
                "w2q": [],
                "r1": [],
                "r2": []
            }
        },
        "test_can_run_asp_tit": {
            "name": "test_can_run_asp_tit",
            "location": 774,
            "return": [],
            "arguments": {}
        },
        "test_acceptable_outcomes": {
            "name": "test_acceptable_outcomes",
            "location": 786,
            "return": [],
            "arguments": {}
        },
        "test_cast_offers_tuple": {
            "name": "test_cast_offers_tuple",
            "location": 808,
            "return": [],
            "arguments": {}
        },
        "test_fail_on_incorrect_types_tuple_or_dict": {
            "name": "test_fail_on_incorrect_types_tuple_or_dict",
            "location": 827,
            "return": [],
            "arguments": {}
        },
        "test_no_check_offers_tuple": {
            "name": "test_no_check_offers_tuple",
            "location": 843,
            "return": [],
            "arguments": {}
        },
        "test_no_limits_raise_warning": {
            "name": "test_no_limits_raise_warning",
            "location": 864,
            "return": [],
            "arguments": {}
        },
        "test_single_mechanism_history_with_waiting": {
            "name": "test_single_mechanism_history_with_waiting",
            "location": 890,
            "return": [],
            "arguments": {
                "avoid_ultimatum": [],
                "n_steps": [],
                "n_waits": [],
                "n_waits2": []
            }
        },
        "test_neg_sync_loop_receives_all_offers": {
            "name": "test_neg_sync_loop_receives_all_offers",
            "location": 1034,
            "return": [],
            "arguments": {
                "keep_order": [],
                "n_first": [],
                "n_second": [],
                "avoid_ultimatum": [],
                "end_on_no_response": []
            }
        },
        "test_times_are_calculated": {
            "name": "test_times_are_calculated",
            "location": 1125,
            "return": [],
            "arguments": {
                "n_outcomes": [],
                "n_negotiators": [],
                "n_steps": []
            }
        },
        "test_aspiration_continuous_issues": {
            "name": "test_aspiration_continuous_issues",
            "location": 1163,
            "return": [],
            "arguments": {
                "n_negotiators": [],
                "n_issues": [],
                "presort": [],
                "stochastic": []
            }
        },
        "test_auto_checkpoint": {
            "name": "test_auto_checkpoint",
            "location": 1226,
            "return": [],
            "arguments": {
                "tmp_path": [],
                "single_checkpoint": [],
                "checkpoint_every": [],
                "exist_ok": []
            }
        },
        "test_genius_in_sao_with_time_limit_and_nsteps_raises_warning": {
            "name": "test_genius_in_sao_with_time_limit_and_nsteps_raises_warning",
            "location": 1278,
            "return": [],
            "arguments": {}
        },
        "test_genius_in_sao_with_time_limit_or_nsteps_raises_no_warning": {
            "name": "test_genius_in_sao_with_time_limit_or_nsteps_raises_no_warning",
            "location": 1303,
            "return": [],
            "arguments": {}
        },
        "make_mapping": {
            "name": "make_mapping",
            "location": 1340,
            "return": [],
            "arguments": {}
        },
        "make_linear": {
            "name": "make_linear",
            "location": 1354,
            "return": [],
            "arguments": {}
        },
        "_run_neg": {
            "name": "_run_neg",
            "location": 1362,
            "return": [],
            "arguments": {
                "agents": [],
                "utils": [],
                "outcome_space": []
            }
        },
        "test_bilateral_timebased": {
            "name": "test_bilateral_timebased",
            "location": 1397,
            "return": [],
            "arguments": {
                "typ": [],
                "linear": [],
                "starting": [],
                "opp": []
            }
        },
        "test_bilateral_timebased_example": {
            "name": "test_bilateral_timebased_example",
            "location": 1412,
            "return": [],
            "arguments": {}
        },
        "test_multilateral_timebased": {
            "name": "test_multilateral_timebased",
            "location": 1436,
            "return": [],
            "arguments": {
                "neg_types": []
            }
        },
        "try_negotiator": {
            "name": "try_negotiator",
            "location": 1451,
            "return": [],
            "arguments": {
                "cls": [],
                "replace_buyer": [],
                "replace_seller": [],
                "plot": [],
                "n_steps": []
            }
        },
        "test_specific_negotiator_buy_selling": {
            "name": "test_specific_negotiator_buy_selling",
            "location": 1510,
            "return": [],
            "arguments": {
                "negotiator": []
            }
        },
        "MyRaisingNegotiator.counter": {
            "name": "counter",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "offer": []
            }
        },
        "MySyncController.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MySyncController.respond": {
            "name": "respond",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "negotiator_id": [],
                "state": [],
                "offer": []
            }
        },
        "MySyncController.propose": {
            "name": "propose",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "negotiator_id": [],
                "state": []
            }
        },
        "MySyncController.counter_all": {
            "name": "counter_all",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "offers": [],
                "states": []
            }
        },
        "MySyncController.first_offer": {
            "name": "first_offer",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "negotiator_id": [
                    "str"
                ]
            }
        },
        "InfiniteLoopNegotiator.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InfiniteLoopNegotiator.counter": {
            "name": "counter",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "offer": []
            }
        },
        "InfiniteLoopNegotiator.stop": {
            "name": "stop",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeWaster.__init__": {
            "name": "__init__",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeWaster.counter": {
            "name": "counter",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "offer": []
            }
        },
        "MySAOSync.counter_all": {
            "name": "counter_all",
            "location": 486,
            "return": [
                "dict[(str, SAOResponse)]"
            ],
            "arguments": {
                "self": [],
                "offers": [
                    "dict[(str, Outcome)]"
                ],
                "states": [
                    "dict[(str, SAOState)]"
                ]
            }
        },
        "MyNegotiator.propose": {
            "name": "propose",
            "location": 799,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "MyNegotiator.respond": {
            "name": "respond",
            "location": 802,
            "return": [],
            "arguments": {
                "self": [],
                "offer": [],
                "state": []
            }
        },
        "test_sync_controller_gets_all_offers.MyController.counter_all": {
            "name": "counter_all",
            "location": 621,
            "return": [],
            "arguments": {
                "self": [],
                "offers": [],
                "states": []
            }
        }
    },
    "negmas-master/tests/test_trips_world.py": {
        "test_trips_run_random": {
            "name": "test_trips_run_random",
            "location": 277,
            "return": [],
            "arguments": {}
        },
        "AWI.n_negs": {
            "name": "n_negs",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AWI.agents": {
            "name": "agents",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AWI.request_negotiation": {
            "name": "request_negotiation",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "partners": [
                    "list[str]"
                ],
                "negotiator": [
                    "SAONegotiator"
                ]
            }
        },
        "TripsWorld.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TripsWorld.join": {
            "name": "join",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "ufun": [],
                "breach_prob": []
            }
        },
        "TripsWorld.simulation_step": {
            "name": "simulation_step",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "stage": [
                    "int"
                ]
            }
        },
        "TripsWorld.get_private_state": {
            "name": "get_private_state",
            "location": 96,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "Agent"
                ]
            }
        },
        "TripsWorld.execute_action": {
            "name": "execute_action",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "Action"
                ],
                "agent": [
                    "Agent"
                ],
                "callback": [
                    "(Callable | None)"
                ]
            }
        },
        "TripsWorld.on_contract_signed": {
            "name": "on_contract_signed",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "TripsWorld.executable_contracts": {
            "name": "executable_contracts",
            "location": 111,
            "return": [
                "Collection[Contract]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TripsWorld.order_contracts_for_execution": {
            "name": "order_contracts_for_execution",
            "location": 116,
            "return": [
                "Collection[Contract]"
            ],
            "arguments": {
                "self": [],
                "contracts": [
                    "Collection[Contract]"
                ]
            }
        },
        "TripsWorld.start_contract_execution": {
            "name": "start_contract_execution",
            "location": 123,
            "return": [
                "(set[Breach] | None)"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "TripsWorld.complete_contract_execution": {
            "name": "complete_contract_execution",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "breaches": [
                    "list[Breach]"
                ],
                "resolution": [
                    "Contract"
                ]
            }
        },
        "TripsWorld.delete_executed_contracts": {
            "name": "delete_executed_contracts",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TripsWorld.contract_record": {
            "name": "contract_record",
            "location": 158,
            "return": [
                "dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "TripsWorld.breach_record": {
            "name": "breach_record",
            "location": 162,
            "return": [
                "dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "breach": [
                    "Breach"
                ]
            }
        },
        "TripsWorld.contract_size": {
            "name": "contract_size",
            "location": 166,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "TripsWorld.post_step_stats": {
            "name": "post_step_stats",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Person.step": {
            "name": "step",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Person.init": {
            "name": "init",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Person.respond_to_negotiation_request": {
            "name": "respond_to_negotiation_request",
            "location": 190,
            "return": [
                "(Negotiator | None)"
            ],
            "arguments": {
                "self": [],
                "initiator": [
                    "str"
                ],
                "partners": [
                    "list[str]"
                ],
                "mechanism": [
                    "NegotiatorMechanismInterface"
                ]
            }
        },
        "Person._respond_to_negotiation_request": {
            "name": "_respond_to_negotiation_request",
            "location": 198,
            "return": [
                "(Negotiator | None)"
            ],
            "arguments": {
                "self": [],
                "initiator": [
                    "str"
                ],
                "partners": [
                    "list[str]"
                ],
                "issues": [
                    "list[Issue]"
                ],
                "annotation": [
                    "dict[(str, Any)]"
                ],
                "mechanism": [
                    "NegotiatorMechanismInterface"
                ],
                "role": [
                    "(str | None)"
                ],
                "req_id": [
                    "(str | None)"
                ]
            }
        },
        "Person.on_neg_request_rejected": {
            "name": "on_neg_request_rejected",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "req_id": [
                    "str"
                ],
                "by": [
                    "(list[str] | None)"
                ]
            }
        },
        "Person.on_neg_request_accepted": {
            "name": "on_neg_request_accepted",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "req_id": [
                    "str"
                ],
                "mechanism": [
                    "NegotiatorMechanismInterface"
                ]
            }
        },
        "Person.on_negotiation_failure": {
            "name": "on_negotiation_failure",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "partners": [
                    "list[str]"
                ],
                "annotation": [
                    "dict[(str, Any)]"
                ],
                "mechanism": [
                    "NegotiatorMechanismInterface"
                ],
                "state": [
                    "MechanismState"
                ]
            }
        },
        "Person.on_negotiation_success": {
            "name": "on_negotiation_success",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "mechanism": [
                    "NegotiatorMechanismInterface"
                ]
            }
        },
        "Person.set_renegotiation_agenda": {
            "name": "set_renegotiation_agenda",
            "location": 232,
            "return": [
                "(RenegotiationRequest | None)"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "breaches": [
                    "list[Breach]"
                ]
            }
        },
        "Person.respond_to_renegotiation_request": {
            "name": "respond_to_renegotiation_request",
            "location": 237,
            "return": [
                "(Negotiator | None)"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "breaches": [
                    "list[Breach]"
                ],
                "agenda": [
                    "RenegotiationRequest"
                ]
            }
        },
        "Person.on_contract_executed": {
            "name": "on_contract_executed",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ]
            }
        },
        "Person.on_contract_breached": {
            "name": "on_contract_breached",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Contract"
                ],
                "breaches": [
                    "list[Breach]"
                ],
                "resolution": [
                    "(Contract | None)"
                ]
            }
        },
        "RandomPerson.step": {
            "name": "step",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RandomPerson.init": {
            "name": "init",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RandomPerson.respond_to_negotiation_request": {
            "name": "respond_to_negotiation_request",
            "location": 267,
            "return": [
                "(Negotiator | None)"
            ],
            "arguments": {
                "self": [],
                "initiator": [
                    "str"
                ],
                "partners": [
                    "list[str]"
                ],
                "mechanism": [
                    "NegotiatorMechanismInterface"
                ]
            }
        }
    },
    "negmas-master/tests/__init__.py": {}
}
{
    "nine43-master/main.py": {
        "main": {
            "name": "main",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nine43-master/net.py": {
        "JSONStream.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "stream": [
                    "trio.abc.Stream"
                ]
            }
        },
        "JSONStream.__str__": {
            "name": "__str__",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONStream.__repr__": {
            "name": "__repr__",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONStream.__eq__": {
            "name": "__eq__",
            "location": 114,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "Any"
                ]
            }
        }
    },
    "nine43-master/typings.py": {},
    "nine43-master/utils.py": {
        "truncate_middle": {
            "name": "truncate_middle",
            "location": 1,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "size": [
                    "int"
                ]
            }
        }
    },
    "nine43-master/client/const.py": {},
    "nine43-master/client/resman.py": {
        "get_image": {
            "name": "get_image",
            "location": 16,
            "return": [
                "pygame.Surface"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "get_font": {
            "name": "get_font",
            "location": 23,
            "return": [
                "Font"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "fontedit": {
            "name": "fontedit",
            "location": 35,
            "return": [
                "Iterator[Font]"
            ],
            "arguments": {
                "fontname": [
                    "Union[(str, Font)]"
                ]
            }
        }
    },
    "nine43-master/client/types.py": {
        "Screen.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "surf": [
                    "pygame.Surface"
                ]
            }
        },
        "Scene.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "nursery": [
                    "Nursery"
                ],
                "screen": [
                    "Screen"
                ],
                "pdata": [
                    "SimpleNamespace"
                ]
            }
        },
        "Scene.update": {
            "name": "update",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scene.render": {
            "name": "render",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scene.close": {
            "name": "close",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scene.finish": {
            "name": "finish",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scene.debug_text": {
            "name": "debug_text",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scene.next_scene": {
            "name": "next_scene",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scene.handle_event": {
            "name": "handle_event",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "pygame.event.EventType"
                ]
            }
        },
        "Scene.__str__": {
            "name": "__str__",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scene.__repr__": {
            "name": "__repr__",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scene.state": {
            "name": "state",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "Tuple[(int, str)]"
                ]
            }
        }
    },
    "nine43-master/client/__init__.py": {
        "get_screen": {
            "name": "get_screen",
            "location": 19,
            "return": [
                "Screen"
            ],
            "arguments": {}
        },
        "show_debug": {
            "name": "show_debug",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "screen": [
                    "Screen"
                ],
                "scene": [
                    "Scene"
                ],
                "fps": [
                    "float"
                ]
            }
        }
    },
    "nine43-master/client/gui/button.py": {
        "Button.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "on_click": [
                    "Callable[([], None)]"
                ],
                "screen": [
                    "Screen"
                ]
            }
        },
        "Button.handle_event": {
            "name": "handle_event",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Event"
                ]
            }
        },
        "Button.render": {
            "name": "render",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Button.alter": {
            "name": "alter",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        }
    },
    "nine43-master/client/gui/modal.py": {
        "Modal.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "title": [
                    "str"
                ],
                "content": [
                    "str"
                ],
                "ok": [
                    "str"
                ],
                "on_ok": [
                    "Callable[([], None)]"
                ],
                "width": [
                    "int"
                ],
                "screen": [
                    "Screen"
                ]
            }
        },
        "Modal.moved": {
            "name": "moved",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Modal.alter": {
            "name": "alter",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "str"
                ],
                "content": [
                    "str"
                ],
                "width": [
                    "int"
                ],
                "ok": [
                    "str"
                ]
            }
        },
        "Modal.handle_event": {
            "name": "handle_event",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "Event"
                ]
            }
        },
        "Modal.render": {
            "name": "render",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nine43-master/client/gui/text.py": {
        "split_words": {
            "name": "split_words",
            "location": 9,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "height": {
            "name": "height",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {
                "font": [
                    "Font"
                ],
                "width": [
                    "int"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "render": {
            "name": "render",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "surf": [
                    "pygame.Surface"
                ],
                "font": [
                    "Font"
                ],
                "text": [
                    "str"
                ]
            }
        }
    },
    "nine43-master/client/gui/types.py": {
        "GuiItem.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GuiItem.render": {
            "name": "render",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GuiItem.handle_event": {
            "name": "handle_event",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Event"
                ]
            }
        },
        "GuiItem.repr": {
            "name": "repr",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GuiItem.__str__": {
            "name": "__str__",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GuiItem.__repr__": {
            "name": "__repr__",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nine43-master/client/gui/__init__.py": {},
    "nine43-master/client/scenes/connect.py": {
        "Connect.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "nursery": [
                    "Nursery"
                ],
                "screen": [
                    "Screen"
                ],
                "pdata": [
                    "SimpleNamespace"
                ]
            }
        },
        "Connect.update": {
            "name": "update",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connect.render": {
            "name": "render",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connect.next_scene": {
            "name": "next_scene",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connect.finish": {
            "name": "finish",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nine43-master/client/scenes/lobby.py": {
        "Lobby.render": {
            "name": "render",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lobby.next_scene": {
            "name": "next_scene",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lobby.finish": {
            "name": "finish",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nine43-master/client/scenes/test.py": {
        "Test.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "nursery": [
                    "Nursery"
                ],
                "screen": [
                    "Screen"
                ],
                "pdata": [
                    "SimpleNamespace"
                ]
            }
        },
        "Test.handle_event": {
            "name": "handle_event",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "Event"
                ]
            }
        },
        "Test.render": {
            "name": "render",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.show_modal": {
            "name": "show_modal",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.next_scene": {
            "name": "next_scene",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.finish": {
            "name": "finish",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.hide_modal": {
            "name": "hide_modal",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nine43-master/client/scenes/username.py": {
        "Username.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "nursery": [
                    "Nursery"
                ],
                "screen": [
                    "Screen"
                ],
                "pdata": [
                    "SimpleNamespace"
                ]
            }
        },
        "Username.hide_modal": {
            "name": "hide_modal",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Username.handle_event": {
            "name": "handle_event",
            "location": 82,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "Event"
                ]
            }
        },
        "Username.update": {
            "name": "update",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Username.render": {
            "name": "render",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Username.next_scene": {
            "name": "next_scene",
            "location": 173,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Username.finish": {
            "name": "finish",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nine43-master/client/scenes/__init__.py": {},
    "nine43-master/server/initiator.py": {},
    "nine43-master/server/lobby.py": {},
    "nine43-master/server/submanager.py": {},
    "nine43-master/server/types.py": {
        "Player.__eq__": {
            "name": "__eq__",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "Any"
                ]
            }
        },
        "Player.__str__": {
            "name": "__str__",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Player.__repr__": {
            "name": "__repr__",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.__str__": {
            "name": "__str__",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.__repr__": {
            "name": "__repr__",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lockable.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "val": [
                    "T"
                ]
            }
        },
        "Lockable.release": {
            "name": "release",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lockable.val": {
            "name": "val",
            "location": 58,
            "return": [
                "T"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nine43-master/server/__init__.py": {},
    "nine43-master/server/sub/fin.py": {},
    "nine43-master/server/sub/select.py": {},
    "nine43-master/server/sub/world.py": {},
    "nine43-master/server/sub/__init__.py": {
        "load_worlds_metadata": {
            "name": "load_worlds_metadata",
            "location": 21,
            "return": [
                "Tuple[(Dict[(str, str)], ...)]"
            ],
            "arguments": {}
        }
    },
    "nine43-master/stubs/pygame/bufferproxy.py": {
        "BufferProxy.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Any"
                ]
            }
        },
        "BufferProxy.write": {
            "name": "write",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "bytes"
                ],
                "offset": [
                    "int"
                ]
            }
        }
    },
    "nine43-master/stubs/pygame/color.py": {
        "Color.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rgbvalue": [
                    "Union[(Text, int)]"
                ]
            }
        },
        "Color.normalize": {
            "name": "normalize",
            "location": 20,
            "return": [
                "Tuple[(float, float, float, float)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Color.correct_gamma": {
            "name": "correct_gamma",
            "location": 21,
            "return": [
                "Color"
            ],
            "arguments": {
                "self": [],
                "gamma": [
                    "float"
                ]
            }
        },
        "Color.set_length": {
            "name": "set_length",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "len": [
                    "int"
                ]
            }
        }
    },
    "nine43-master/stubs/pygame/display.py": {
        "set_mode": {
            "name": "set_mode",
            "location": 5,
            "return": [
                "Surface"
            ],
            "arguments": {
                "resolution": [
                    "Tuple[(int, int)]"
                ],
                "flags": [
                    "int"
                ],
                "depth": [
                    "int"
                ]
            }
        },
        "flip": {
            "name": "flip",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "update": {
            "name": "update",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "rs": [
                    "List[Rect]"
                ]
            }
        }
    },
    "nine43-master/stubs/pygame/draw.py": {
        "rect": {
            "name": "rect",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "surf": [
                    "Surface"
                ],
                "color": [
                    "ValidColor"
                ],
                "rect": [
                    "Rect"
                ],
                "width": [
                    "int"
                ]
            }
        },
        "polygon": {
            "name": "polygon",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "surf": [
                    "Surface"
                ],
                "color": [
                    "ValidColor"
                ],
                "pointlist": [
                    "PointList"
                ],
                "width": [
                    "int"
                ]
            }
        },
        "circle": {
            "name": "circle",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "surf": [
                    "Surface"
                ],
                "color": [
                    "ValidColor"
                ],
                "pos": [
                    "Point"
                ],
                "radius": [
                    "int"
                ],
                "width": [
                    "int"
                ]
            }
        },
        "ellipse": {
            "name": "ellipse",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "surf": [
                    "Surface"
                ],
                "color": [
                    "ValidColor"
                ],
                "rect": [
                    "Rect"
                ],
                "width": [
                    "int"
                ]
            }
        },
        "arc": {
            "name": "arc",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "surf": [
                    "Surface"
                ],
                "color": [
                    "ValidColor"
                ],
                "rect": [
                    "Rect"
                ],
                "start": [
                    "float"
                ],
                "end": [
                    "float"
                ],
                "width": [
                    "int"
                ]
            }
        },
        "line": {
            "name": "line",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "surf": [
                    "Surface"
                ],
                "color": [
                    "ValidColor"
                ],
                "start": [
                    "Point"
                ],
                "end": [
                    "Point"
                ],
                "width": [
                    "int"
                ]
            }
        },
        "lines": {
            "name": "lines",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "surf": [
                    "Surface"
                ],
                "color": [
                    "ValidColor"
                ],
                "pointlist": [
                    "PointList"
                ],
                "width": [
                    "int"
                ]
            }
        },
        "aaline": {
            "name": "aaline",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "surf": [
                    "Surface"
                ],
                "color": [
                    "ValidColor"
                ],
                "start": [
                    "Point"
                ],
                "end": [
                    "Point"
                ],
                "width": [
                    "int"
                ]
            }
        },
        "aalines": {
            "name": "aalines",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "surf": [
                    "Surface"
                ],
                "color": [
                    "ValidColor"
                ],
                "pointlist": [
                    "PointList"
                ],
                "width": [
                    "int"
                ]
            }
        }
    },
    "nine43-master/stubs/pygame/event.py": {
        "pump": {
            "name": "pump",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get": {
            "name": "get",
            "location": 19,
            "return": [
                "List[EventType]"
            ],
            "arguments": {
                "type": [
                    "_EventIds"
                ]
            }
        },
        "poll": {
            "name": "poll",
            "location": 20,
            "return": [
                "EventType"
            ],
            "arguments": {}
        },
        "wait": {
            "name": "wait",
            "location": 21,
            "return": [
                "EventType"
            ],
            "arguments": {}
        },
        "peak": {
            "name": "peak",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "type": [
                    "_EventIds"
                ]
            }
        },
        "clear": {
            "name": "clear",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "type": [
                    "_EventIds"
                ]
            }
        },
        "event_name": {
            "name": "event_name",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "type": [
                    "int"
                ]
            }
        },
        "set_blocked": {
            "name": "set_blocked",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "type": [
                    "Optional[_EventIds]"
                ]
            }
        },
        "set_allowed": {
            "name": "set_allowed",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "type": [
                    "Optional[_EventIds]"
                ]
            }
        },
        "get_blocked": {
            "name": "get_blocked",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "type": [
                    "int"
                ]
            }
        },
        "set_grab": {
            "name": "set_grab",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "grab": [
                    "bool"
                ]
            }
        },
        "get_grab": {
            "name": "get_grab",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "post": {
            "name": "post",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "EventType"
                ]
            }
        },
        "EventType.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "int"
                ]
            }
        },
        "EventType.__getattr__": {
            "name": "__getattr__",
            "location": 10,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "nine43-master/stubs/pygame/freetype.py": {
        "get_error": {
            "name": "get_error",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_version": {
            "name": "get_version",
            "location": 8,
            "return": [
                "Tuple[(int, int, int)]"
            ],
            "arguments": {}
        },
        "init": {
            "name": "init",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "cache_size": [
                    "int"
                ],
                "resolution": [
                    "int"
                ]
            }
        },
        "quit": {
            "name": "quit",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "was_init": {
            "name": "was_init",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "get_cache_size": {
            "name": "get_cache_size",
            "location": 12,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "get_default_resolution": {
            "name": "get_default_resolution",
            "location": 13,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "set_default_resolution": {
            "name": "set_default_resolution",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "res": [
                    "int"
                ]
            }
        },
        "SysFont": {
            "name": "SysFont",
            "location": 17,
            "return": [
                "Font"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "size": [
                    "int"
                ],
                "bold": [
                    "bool"
                ],
                "italic": [
                    "bool"
                ]
            }
        },
        "get_default_font": {
            "name": "get_default_font",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "Font.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "file": [
                    "str"
                ],
                "size": [
                    "int"
                ],
                "font_index": [
                    "int"
                ],
                "resolution": [
                    "int"
                ],
                "ucs4": [
                    "bool"
                ]
            }
        },
        "Font.render_raw_to": {
            "name": "render_raw_to",
            "location": 58,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": [],
                "array": [
                    "List[List[int]]"
                ],
                "text": [
                    "Optional[str]"
                ],
                "dest": [
                    "Optional[Dest]"
                ],
                "style": [
                    "int"
                ],
                "rotation": [
                    "int"
                ],
                "size": [
                    "int"
                ],
                "invert": [
                    "bool"
                ]
            }
        },
        "Font.render_raw": {
            "name": "render_raw",
            "location": 68,
            "return": [
                "Tuple[(bytes, Tuple[(int, int)])]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "Optional[str]"
                ],
                "style": [
                    "int"
                ],
                "rotation": [
                    "int"
                ],
                "size": [
                    "int"
                ],
                "invert": [
                    "bool"
                ]
            }
        },
        "Font.render_to": {
            "name": "render_to",
            "location": 76,
            "return": [
                "Rect"
            ],
            "arguments": {
                "self": [],
                "surf": [
                    "Surface"
                ],
                "dest": [
                    "Dest"
                ],
                "text": [
                    "Optional[str]"
                ],
                "fgcolor": [
                    "Optional[ValidColor]"
                ],
                "bgcolor": [
                    "Optional[ValidColor]"
                ],
                "style": [
                    "int"
                ],
                "rotation": [
                    "int"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "Font.render": {
            "name": "render",
            "location": 87,
            "return": [
                "Tuple[(Surface, Rect)]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "Optional[str]"
                ],
                "fgcolor": [
                    "Optional[ValidColor]"
                ],
                "bgcolor": [
                    "Optional[ValidColor]"
                ],
                "style": [
                    "int"
                ],
                "rotation": [
                    "int"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "Font.get_sizes": {
            "name": "get_sizes",
            "location": 96,
            "return": [
                "List[Tuple[(int, int, int, float, float)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Font.get_sized_glyph_height": {
            "name": "get_sized_glyph_height",
            "location": 97,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int"
                ]
            }
        },
        "Font.get_sized_height": {
            "name": "get_sized_height",
            "location": 98,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int"
                ]
            }
        },
        "Font.get_sized_descender": {
            "name": "get_sized_descender",
            "location": 99,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int"
                ]
            }
        },
        "Font.get_sized_ascender": {
            "name": "get_sized_ascender",
            "location": 100,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int"
                ]
            }
        },
        "Font.get_metrics": {
            "name": "get_metrics",
            "location": 101,
            "return": [
                "List[Tuple[(int, int, int, int, float, float)]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "Font.get_rect": {
            "name": "get_rect",
            "location": 104,
            "return": [
                "Rect"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "style": [
                    "int"
                ],
                "rotation": [
                    "int"
                ],
                "size": [
                    "int"
                ]
            }
        }
    },
    "nine43-master/stubs/pygame/image.py": {
        "load": {
            "name": "load",
            "location": 7,
            "return": [
                "Surface"
            ],
            "arguments": {
                "filobj": [
                    "io.FileIO"
                ],
                "hint": [
                    "str"
                ]
            }
        },
        "save": {
            "name": "save",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "surf": [
                    "Surface"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "get_extended": {
            "name": "get_extended",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "tostring": {
            "name": "tostring",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "Surface"
                ],
                "format": [
                    "int"
                ],
                "flipped": [
                    "bool"
                ]
            }
        },
        "fromstring": {
            "name": "fromstring",
            "location": 13,
            "return": [
                "Surface"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "size": [
                    "Tuple[(int, int)]"
                ],
                "format": [
                    "int"
                ],
                "flipped": [
                    "bool"
                ]
            }
        },
        "frombuffer": {
            "name": "frombuffer",
            "location": 16,
            "return": [
                "Surface"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "size": [
                    "Tuple[(int, int)]"
                ],
                "format": [
                    "int"
                ]
            }
        }
    },
    "nine43-master/stubs/pygame/joystick.py": {
        "init": {
            "name": "init",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "quit": {
            "name": "quit",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_init": {
            "name": "get_init",
            "location": 5,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "get_count": {
            "name": "get_count",
            "location": 6,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "Joystick.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int"
                ]
            }
        },
        "Joystick.init": {
            "name": "init",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Joystick.quit": {
            "name": "quit",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Joystick.get_init": {
            "name": "get_init",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Joystick.get_id": {
            "name": "get_id",
            "location": 13,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Joystick.get_name": {
            "name": "get_name",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Joystick.get_numaxes": {
            "name": "get_numaxes",
            "location": 15,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Joystick.get_axis": {
            "name": "get_axis",
            "location": 16,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "axis_number": [
                    "int"
                ]
            }
        },
        "Joystick.get_numballs": {
            "name": "get_numballs",
            "location": 17,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Joystick.get_ball": {
            "name": "get_ball",
            "location": 18,
            "return": [
                "Tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "ball_number": [
                    "int"
                ]
            }
        },
        "Joystick.get_numbuttons": {
            "name": "get_numbuttons",
            "location": 19,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Joystick.get_button": {
            "name": "get_button",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "button": [
                    "int"
                ]
            }
        },
        "Joystick.get_numhats": {
            "name": "get_numhats",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Joystick.get_hat": {
            "name": "get_hat",
            "location": 22,
            "return": [
                "Tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "hat_number": [
                    "int"
                ]
            }
        }
    },
    "nine43-master/stubs/pygame/key.py": {
        "get_focused": {
            "name": "get_focused",
            "location": 3,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "get_pressed": {
            "name": "get_pressed",
            "location": 4,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "get_mods": {
            "name": "get_mods",
            "location": 5,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "set_mods": {
            "name": "set_mods",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "set_repeat": {
            "name": "set_repeat",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "delay": [
                    "int"
                ],
                "interval": [
                    "int"
                ]
            }
        },
        "get_repeat": {
            "name": "get_repeat",
            "location": 11,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {}
        },
        "name": {
            "name": "name",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "int"
                ]
            }
        }
    },
    "nine43-master/stubs/pygame/locals.py": {},
    "nine43-master/stubs/pygame/rect.py": {
        "Rect.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "left_top_width_height": [
                    "Iterable[float]"
                ]
            }
        },
        "Rect.copy": {
            "name": "copy",
            "location": 47,
            "return": [
                "'Rect'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rect.move": {
            "name": "move",
            "location": 48,
            "return": [
                "'Rect'"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "Rect.move_ip": {
            "name": "move_ip",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "Rect.inflate": {
            "name": "inflate",
            "location": 50,
            "return": [
                "'Rect'"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "Rect.inflate_ip": {
            "name": "inflate_ip",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "Rect.clamp": {
            "name": "clamp",
            "location": 52,
            "return": [
                "'Rect'"
            ],
            "arguments": {
                "self": [],
                "rect": [
                    "'Rect'"
                ]
            }
        },
        "Rect.clamp_ip": {
            "name": "clamp_ip",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rect": [
                    "'Rect'"
                ]
            }
        },
        "Rect.clip": {
            "name": "clip",
            "location": 54,
            "return": [
                "'Rect'"
            ],
            "arguments": {
                "self": [],
                "rect": [
                    "'Rect'"
                ]
            }
        },
        "Rect.union": {
            "name": "union",
            "location": 55,
            "return": [
                "'Rect'"
            ],
            "arguments": {
                "self": [],
                "rect": [
                    "'Rect'"
                ]
            }
        },
        "Rect.union_ip": {
            "name": "union_ip",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rect": [
                    "'Rect'"
                ]
            }
        },
        "Rect.unionall": {
            "name": "unionall",
            "location": 57,
            "return": [
                "'Rect'"
            ],
            "arguments": {
                "self": [],
                "rect_sequence": [
                    "Sequence['Rect']"
                ]
            }
        },
        "Rect.unionall_ip": {
            "name": "unionall_ip",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rect_sequence": [
                    "Sequence['Rect']"
                ]
            }
        },
        "Rect.fit": {
            "name": "fit",
            "location": 59,
            "return": [
                "'Rect'"
            ],
            "arguments": {
                "self": [],
                "rect": [
                    "'Rect'"
                ]
            }
        },
        "Rect.normalize": {
            "name": "normalize",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rect.contains": {
            "name": "contains",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "rect": [
                    "'Rect'"
                ]
            }
        },
        "Rect.collidepoint": {
            "name": "collidepoint",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x_y": [
                    "Iterable[float]"
                ]
            }
        },
        "Rect.colliderect": {
            "name": "colliderect",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "rect": [
                    "'Rect'"
                ]
            }
        },
        "Rect.collidelist": {
            "name": "collidelist",
            "location": 67,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "rect_list": [
                    "List['Rect']"
                ]
            }
        },
        "Rect.collidelistall": {
            "name": "collidelistall",
            "location": 68,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "rect_list": [
                    "List['Rect']"
                ]
            }
        },
        "Rect.collidedict": {
            "name": "collidedict",
            "location": 77,
            "return": [
                "Tuple[(_K, 'Rect')]"
            ],
            "arguments": {
                "self": [],
                "rect_dict": [
                    "Dict[(_K, 'Rect')]"
                ],
                "values": [
                    "bool"
                ]
            }
        },
        "Rect.collidedictall": {
            "name": "collidedictall",
            "location": 85,
            "return": [
                "List[Tuple[(_K, 'Rect')]]"
            ],
            "arguments": {
                "self": [],
                "rect_dict": [
                    "Dict[(_K, 'Rect')]"
                ],
                "values": [
                    "bool"
                ]
            }
        }
    },
    "nine43-master/stubs/pygame/surface.py": {
        "Surface.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "width_height": [
                    "Tuple[(float, float)]"
                ],
                "flags": [
                    "int"
                ],
                "surface": [
                    "Surface"
                ]
            }
        },
        "Surface.blit": {
            "name": "blit",
            "location": 26,
            "return": [
                "Rect"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Surface"
                ],
                "dest": [
                    "Union[(Sequence[float], Rect)]"
                ],
                "area": [
                    "Optional[Rect]"
                ],
                "special_flags": [
                    "int"
                ]
            }
        },
        "Surface.convert": {
            "name": "convert",
            "location": 40,
            "return": [
                "Surface"
            ],
            "arguments": {
                "self": []
            }
        },
        "Surface.convert_alpha": {
            "name": "convert_alpha",
            "location": 44,
            "return": [
                "Surface"
            ],
            "arguments": {
                "self": []
            }
        },
        "Surface.copy": {
            "name": "copy",
            "location": 45,
            "return": [
                "Surface"
            ],
            "arguments": {
                "self": []
            }
        },
        "Surface.fill": {
            "name": "fill",
            "location": 46,
            "return": [
                "Rect"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "ValidColor"
                ],
                "rect": [
                    "Optional[Rect]"
                ],
                "special_flags": [
                    "int"
                ]
            }
        },
        "Surface.scroll": {
            "name": "scroll",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dx": [
                    "int"
                ],
                "dy": [
                    "int"
                ]
            }
        },
        "Surface.set_colorkey": {
            "name": "set_colorkey",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "None"
                ]
            }
        },
        "Surface.get_colorkey": {
            "name": "get_colorkey",
            "location": 54,
            "return": [
                "Optional[_RgbaOutput]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Surface.set_alpha": {
            "name": "set_alpha",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "None"
                ]
            }
        },
        "Surface.get_alpha": {
            "name": "get_alpha",
            "location": 59,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Surface.lock": {
            "name": "lock",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Surface.unlock": {
            "name": "unlock",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Surface.mustlock": {
            "name": "mustlock",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Surface.get_locked": {
            "name": "get_locked",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Surface.get_locks": {
            "name": "get_locks",
            "location": 64,
            "return": [
                "Tuple[(Any, ...)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Surface.get_at": {
            "name": "get_at",
            "location": 65,
            "return": [
                "_RgbaOutput"
            ],
            "arguments": {
                "self": [],
                "x_y": [
                    "Sequence[int]"
                ]
            }
        },
        "Surface.set_at": {
            "name": "set_at",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x_y": [
                    "Sequence[int]"
                ],
                "color": [
                    "ValidColor"
                ]
            }
        },
        "Surface.get_at_mapped": {
            "name": "get_at_mapped",
            "location": 67,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "x_y": [
                    "Sequence[int]"
                ]
            }
        },
        "Surface.get_palette": {
            "name": "get_palette",
            "location": 68,
            "return": [
                "List[_RgbaOutput]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Surface.get_palette_at": {
            "name": "get_palette_at",
            "location": 69,
            "return": [
                "_RgbaOutput"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "Surface.set_palette": {
            "name": "set_palette",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "palette": [
                    "List[_RgbaInput]"
                ]
            }
        },
        "Surface.set_palette_at": {
            "name": "set_palette_at",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ],
                "color": [
                    "_RgbaInput"
                ]
            }
        },
        "Surface.map_rgb": {
            "name": "map_rgb",
            "location": 72,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "_RgbaInput"
                ]
            }
        },
        "Surface.unmap_rgb": {
            "name": "unmap_rgb",
            "location": 73,
            "return": [
                "_RgbaOutput"
            ],
            "arguments": {
                "self": [],
                "mapped_int": [
                    "int"
                ]
            }
        },
        "Surface.set_clip": {
            "name": "set_clip",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rect": [
                    "Optional[Rect]"
                ]
            }
        },
        "Surface.get_clip": {
            "name": "get_clip",
            "location": 75,
            "return": [
                "Rect"
            ],
            "arguments": {
                "self": []
            }
        },
        "Surface.subsurface": {
            "name": "subsurface",
            "location": 76,
            "return": [
                "Surface"
            ],
            "arguments": {
                "self": [],
                "rect": [
                    "Rect"
                ]
            }
        },
        "Surface.get_parent": {
            "name": "get_parent",
            "location": 77,
            "return": [
                "Surface"
            ],
            "arguments": {
                "self": []
            }
        },
        "Surface.get_abs_parent": {
            "name": "get_abs_parent",
            "location": 78,
            "return": [
                "Surface"
            ],
            "arguments": {
                "self": []
            }
        },
        "Surface.get_offset": {
            "name": "get_offset",
            "location": 79,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Surface.get_abs_offset": {
            "name": "get_abs_offset",
            "location": 80,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Surface.get_size": {
            "name": "get_size",
            "location": 81,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Surface.get_width": {
            "name": "get_width",
            "location": 82,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Surface.get_height": {
            "name": "get_height",
            "location": 83,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Surface.get_rect": {
            "name": "get_rect",
            "location": 84,
            "return": [
                "Rect"
            ],
            "arguments": {
                "self": []
            }
        },
        "Surface.get_bitsize": {
            "name": "get_bitsize",
            "location": 85,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Surface.get_bytesize": {
            "name": "get_bytesize",
            "location": 86,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Surface.get_flags": {
            "name": "get_flags",
            "location": 87,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Surface.get_pitch": {
            "name": "get_pitch",
            "location": 88,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Surface.get_masks": {
            "name": "get_masks",
            "location": 89,
            "return": [
                "_RgbaOutput"
            ],
            "arguments": {
                "self": []
            }
        },
        "Surface.set_masks": {
            "name": "set_masks",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "_RgbaInput"
                ]
            }
        },
        "Surface.get_shifts": {
            "name": "get_shifts",
            "location": 91,
            "return": [
                "_RgbaOutput"
            ],
            "arguments": {
                "self": []
            }
        },
        "Surface.set_shifts": {
            "name": "set_shifts",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "_RgbaInput"
                ]
            }
        },
        "Surface.get_losses": {
            "name": "get_losses",
            "location": 93,
            "return": [
                "_RgbaOutput"
            ],
            "arguments": {
                "self": []
            }
        },
        "Surface.get_bounding_rect": {
            "name": "get_bounding_rect",
            "location": 94,
            "return": [
                "Rect"
            ],
            "arguments": {
                "self": [],
                "min_alpha": [
                    "int"
                ]
            }
        },
        "Surface.get_view": {
            "name": "get_view",
            "location": 95,
            "return": [
                "BufferProxy"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "Text"
                ]
            }
        },
        "Surface.get_buffer": {
            "name": "get_buffer",
            "location": 96,
            "return": [
                "BufferProxy"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nine43-master/stubs/pygame/time.py": {
        "get_ticks": {
            "name": "get_ticks",
            "location": 1,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "wait": {
            "name": "wait",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "ms": [
                    "int"
                ]
            }
        },
        "delay": {
            "name": "delay",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {
                "ms": [
                    "int"
                ]
            }
        },
        "set_timer": {
            "name": "set_timer",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "e": [
                    "int"
                ],
                "ms": [
                    "int"
                ]
            }
        },
        "Clock.tick": {
            "name": "tick",
            "location": 7,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "framerate": [
                    "float"
                ]
            }
        },
        "Clock.tick_busy_loop": {
            "name": "tick_busy_loop",
            "location": 8,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "framerate": [
                    "float"
                ]
            }
        },
        "Clock.get_time": {
            "name": "get_time",
            "location": 9,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Clock.get_rawtime": {
            "name": "get_rawtime",
            "location": 10,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Clock.get_fps": {
            "name": "get_fps",
            "location": 11,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nine43-master/stubs/pygame/__init__.py": {
        "init": {
            "name": "init",
            "location": 29,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {}
        },
        "quit": {
            "name": "quit",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nine43-master/stubs/pytest/__init__.py": {
        "raises": {
            "name": "raises",
            "location": 7,
            "return": [
                "ContextManager[Tuple[(type, Any, Any)]]"
            ],
            "arguments": {
                "type": [
                    "type"
                ],
                "err": [
                    "str"
                ]
            }
        }
    },
    "nine43-master/tests/net.py": {},
    "nine43-master/tests/test_lockable.py": {},
    "nine43-master/tests/__init__.py": {
        "new_stream_pair": {
            "name": "new_stream_pair",
            "location": 6,
            "return": [
                "Tuple[(net.JSONStream, net.JSONStream)]"
            ],
            "arguments": {}
        }
    },
    "nine43-master/tests/client/test_resman.py": {
        "test_get_font": {
            "name": "test_get_font",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fontedit": {
            "name": "test_fontedit",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nine43-master/tests/client/gui/test_button.py": {},
    "nine43-master/tests/client/scenes/test_connect.py": {
        "server.get_handler": {
            "name": "get_handler",
            "location": 36,
            "return": [
                "Callable[([trio.abc.Stream], Awaitable[None])]"
            ],
            "arguments": {
                "nursery": [
                    "Nursery"
                ]
            }
        }
    },
    "nine43-master/tests/server/test_initiator.py": {
        "new_half_stream_pair": {
            "name": "new_half_stream_pair",
            "location": 10,
            "return": [
                "Tuple[(net.JSONStream, trio.abc.Stream)]"
            ],
            "arguments": {}
        }
    },
    "nine43-master/tests/server/test_lobby.py": {
        "new_stream_player": {
            "name": "new_stream_player",
            "location": 17,
            "return": [
                "Tuple[(Player, Player)]"
            ],
            "arguments": {
                "username": [
                    "str"
                ]
            }
        }
    },
    "nine43-master/tests/server/test_select.py": {},
    "nine43-master/tests/server/__init__.py": {}
}
{
    "nominally-master/noxfile.py": {
        "supported_pythons": {
            "name": "supported_pythons",
            "location": 32,
            "return": [],
            "arguments": {
                "classifiers_file": []
            }
        },
        "pypi_needs_new_version": {
            "name": "pypi_needs_new_version",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "get_tagged_version": {
            "name": "get_tagged_version",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "get_package_version": {
            "name": "get_package_version",
            "location": 85,
            "return": [],
            "arguments": {
                "defined_in": []
            }
        },
        "get_docs_version": {
            "name": "get_docs_version",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "search_in_file": {
            "name": "search_in_file",
            "location": 98,
            "return": [],
            "arguments": {
                "path": [],
                "pattern": [],
                "encoding": []
            }
        },
        "get_pypi_version": {
            "name": "get_pypi_version",
            "location": 106,
            "return": [],
            "arguments": {
                "encoding": []
            }
        },
        "lint_flake8": {
            "name": "lint_flake8",
            "location": 116,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "lint_pylint": {
            "name": "lint_pylint",
            "location": 121,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "lint_typing": {
            "name": "lint_typing",
            "location": 128,
            "return": [],
            "arguments": {
                "session": [],
                "subfolder": []
            }
        },
        "lint_black": {
            "name": "lint_black",
            "location": 133,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "lint_todos": {
            "name": "lint_todos",
            "location": 138,
            "return": [],
            "arguments": {
                "_": []
            }
        },
        "pytest": {
            "name": "pytest",
            "location": 146,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "make_sure_various_cli_invocations_do_not_crash": {
            "name": "make_sure_various_cli_invocations_do_not_crash",
            "location": 157,
            "return": [],
            "arguments": {
                "session": [],
                "cmds": []
            }
        },
        "coverage": {
            "name": "coverage",
            "location": 165,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "lint_docs": {
            "name": "lint_docs",
            "location": 173,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "build_docs": {
            "name": "build_docs",
            "location": 178,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "deploy_to_pypi": {
            "name": "deploy_to_pypi",
            "location": 200,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "autopush_repo": {
            "name": "autopush_repo",
            "location": 211,
            "return": [],
            "arguments": {
                "session": []
            }
        }
    },
    "nominally-master/setup.py": {},
    "nominally-master/docs/conf.py": {
        "get_module_version": {
            "name": "get_module_version",
            "location": 17,
            "return": [],
            "arguments": {}
        }
    },
    "nominally-master/nominally/api.py": {
        "parse_name": {
            "name": "parse_name",
            "location": 10,
            "return": [
                "T.Dict[(str, T.Any)]"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "cli": {
            "name": "cli",
            "location": 18,
            "return": [
                "int"
            ],
            "arguments": {
                "arguments": [
                    "T.Optional[T.Sequence[str]]"
                ]
            }
        },
        "cli_help": {
            "name": "cli_help",
            "location": 34,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "cli_report": {
            "name": "cli_report",
            "location": 45,
            "return": [
                "int"
            ],
            "arguments": {
                "raw_name": [
                    "str"
                ],
                "details": [
                    "bool"
                ]
            }
        },
        "cli_version": {
            "name": "cli_version",
            "location": 53,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "nominally-master/nominally/config.py": {},
    "nominally-master/nominally/parser.py": {
        "word_count_bouncer": {
            "name": "word_count_bouncer",
            "location": 20,
            "return": [
                "T.Callable[([T.Any], T.Any)]"
            ],
            "arguments": {
                "minimum": [
                    "int"
                ]
            }
        },
        "word_count_bouncer.decorator_bouncer": {
            "name": "decorator_bouncer",
            "location": 29,
            "return": [
                "T.Callable[([T.Any, WordContainer], WordContainer)]"
            ],
            "arguments": {
                "func": [
                    "T.Callable[([T.Any, WordContainer], WordContainer)]"
                ]
            }
        },
        "Name.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "str"
                ]
            }
        },
        "Name._pre_clean": {
            "name": "_pre_clean",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "Name._pre_process": {
            "name": "_pre_process",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        },
        "Name.clean": {
            "name": "clean",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "s": [
                    "str"
                ]
            }
        },
        "Name.strip_pointlessness": {
            "name": "strip_pointlessness",
            "location": 127,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "Name._archive_cleaned": {
            "name": "_archive_cleaned",
            "location": 130,
            "return": [
                "T.Set[str]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        },
        "Name._process": {
            "name": "_process",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "preprocessed_str": [
                    "str"
                ]
            }
        },
        "Name._post_process": {
            "name": "_post_process",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name._sweep_suffixes": {
            "name": "_sweep_suffixes",
            "location": 149,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        },
        "Name._sweep_junior": {
            "name": "_sweep_junior",
            "location": 162,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        },
        "Name._sweep_nicknames": {
            "name": "_sweep_nicknames",
            "location": 172,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        },
        "Name._string_to_clusters": {
            "name": "_string_to_clusters",
            "location": 190,
            "return": [
                "Clusters"
            ],
            "arguments": {
                "remaining": [
                    "str"
                ]
            }
        },
        "Name._extract_title": {
            "name": "_extract_title",
            "location": 198,
            "return": [
                "Clusters"
            ],
            "arguments": {
                "self": [],
                "clusters": [
                    "Clusters"
                ]
            }
        },
        "Name._remove_numbers": {
            "name": "_remove_numbers",
            "location": 214,
            "return": [
                "Clusters"
            ],
            "arguments": {
                "cls": [],
                "cluster": [
                    "Clusters"
                ]
            }
        },
        "Name._deep_number_clean": {
            "name": "_deep_number_clean",
            "location": 223,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "s": [
                    "str"
                ]
            }
        },
        "Name._post_clean": {
            "name": "_post_clean",
            "location": 227,
            "return": [
                "T.Dict[(str, Cluster)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name._clean_cluster": {
            "name": "_clean_cluster",
            "location": 231,
            "return": [
                "Cluster"
            ],
            "arguments": {
                "cls": [],
                "cluster": [
                    "Cluster"
                ],
                "condense": [
                    "bool"
                ]
            }
        },
        "Name._grab_junior": {
            "name": "_grab_junior",
            "location": 237,
            "return": [
                "Clusters"
            ],
            "arguments": {
                "self": [],
                "clusters": [
                    "Clusters"
                ]
            }
        },
        "Name._remove_from_clusters": {
            "name": "_remove_from_clusters",
            "location": 268,
            "return": [
                "Clusters"
            ],
            "arguments": {
                "clusters": [
                    "Clusters"
                ],
                "s": [
                    "str"
                ]
            }
        },
        "Name._extract_last_first_middle": {
            "name": "_extract_last_first_middle",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "clusters": [
                    "Clusters"
                ]
            }
        },
        "Name._extract_first": {
            "name": "_extract_first",
            "location": 279,
            "return": [
                "Clusters"
            ],
            "arguments": {
                "self": [],
                "clusters": [
                    "Clusters"
                ]
            }
        },
        "Name._extract_last": {
            "name": "_extract_last",
            "location": 293,
            "return": [
                "Clusters"
            ],
            "arguments": {
                "self": [],
                "clusters": [
                    "Clusters"
                ]
            }
        },
        "Name._flip_last_name_to_right": {
            "name": "_flip_last_name_to_right",
            "location": 304,
            "return": [
                "Clusters"
            ],
            "arguments": {
                "cls": [],
                "clusters": [
                    "Clusters"
                ]
            }
        },
        "Name._cluster_words": {
            "name": "_cluster_words",
            "location": 311,
            "return": [
                "Cluster"
            ],
            "arguments": {
                "cls": [],
                "cluster": [
                    "Cluster"
                ]
            }
        },
        "Name._combine_conjunctions": {
            "name": "_combine_conjunctions",
            "location": 323,
            "return": [
                "Cluster"
            ],
            "arguments": {
                "cls": [],
                "cluster": [
                    "Cluster"
                ]
            }
        },
        "Name._combine_rightmost_prefixes": {
            "name": "_combine_rightmost_prefixes",
            "location": 336,
            "return": [
                "Cluster"
            ],
            "arguments": {
                "cls": [],
                "cluster": [
                    "Cluster"
                ]
            }
        },
        "Name.__eq__": {
            "name": "__eq__",
            "location": 350,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T.Any"
                ]
            }
        },
        "Name.__getattr__": {
            "name": "__getattr__",
            "location": 357,
            "return": [
                "T.Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Name.__getitem__": {
            "name": "__getitem__",
            "location": 366,
            "return": [
                "T.Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Name.__len__": {
            "name": "__len__",
            "location": 370,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.__iter__": {
            "name": "__iter__",
            "location": 374,
            "return": [
                "T.Iterator[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.__repr__": {
            "name": "__repr__",
            "location": 378,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.__str__": {
            "name": "__str__",
            "location": 385,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.parsable": {
            "name": "parsable",
            "location": 409,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.raw": {
            "name": "raw",
            "location": 414,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.cleaned": {
            "name": "cleaned",
            "location": 419,
            "return": [
                "T.Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.report": {
            "name": "report",
            "location": 423,
            "return": [
                "T.Dict[(str, T.Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "word_count_bouncer.decorator_bouncer.wrapper_bouncer": {
            "name": "wrapper_bouncer",
            "location": 35,
            "return": [
                "WordContainer"
            ],
            "arguments": {
                "obj": [
                    "T.Any"
                ],
                "countable": [
                    "WordContainer"
                ]
            }
        }
    },
    "nominally-master/nominally/utilities.py": {
        "flatten_once": {
            "name": "flatten_once",
            "location": 4,
            "return": [
                "T.List[T.Any]"
            ],
            "arguments": {
                "nested_list": [
                    "T.List[T.Any]"
                ]
            }
        },
        "remove_falsy": {
            "name": "remove_falsy",
            "location": 8,
            "return": [
                "T.List[T.Any]"
            ],
            "arguments": {
                "seq": [
                    "T.List[T.Any]"
                ]
            }
        },
        "prettier_print": {
            "name": "prettier_print",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "dictionary": [
                    "T.Mapping[(str, T.Any)]"
                ]
            }
        }
    },
    "nominally-master/nominally/__init__.py": {},
    "nominally-master/nominally/__main__.py": {},
    "nominally-master/stubs/unidecode/__init__.py": {
        "_warn_if_not_unicode": {
            "name": "_warn_if_not_unicode",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "unidecode_expect_ascii": {
            "name": "unidecode_expect_ascii",
            "location": 2,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "unidecode_expect_nonascii": {
            "name": "unidecode_expect_nonascii",
            "location": 3,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "_unidecode": {
            "name": "_unidecode",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        }
    },
    "nominally-master/test/conftest.py": {
        "dict_entry_test": {
            "name": "dict_entry_test",
            "location": 9,
            "return": [],
            "arguments": {
                "testclass": [],
                "entry": []
            }
        },
        "load_bank": {
            "name": "load_bank",
            "location": 17,
            "return": [],
            "arguments": {
                "glob": []
            }
        },
        "make_ids": {
            "name": "make_ids",
            "location": 26,
            "return": [],
            "arguments": {
                "entry": []
            }
        },
        "add_output_spacing": {
            "name": "add_output_spacing",
            "location": 31,
            "return": [],
            "arguments": {}
        }
    },
    "nominally-master/test/test_api.py": {
        "very_rough_clean": {
            "name": "very_rough_clean",
            "location": 18,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "TestParseName.test_literally_just_dict_of_name": {
            "name": "test_literally_just_dict_of_name",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParseName.test_is_quiet": {
            "name": "test_is_quiet",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "capsys": []
            }
        },
        "TestCLIFairlySimply.test_cli_choices": {
            "name": "test_cli_choices",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "capsys": [],
                "arg_in": [],
                "string_out": []
            }
        },
        "TestCLIFairlySimply.test_raw_cli_run_does_not_break": {
            "name": "test_raw_cli_run_does_not_break",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "capsys": []
            }
        },
        "TestCLIFairlySimply.test_cli_report": {
            "name": "test_cli_report",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "capsys": []
            }
        },
        "TestCLIFairlySimply.test_cli_version": {
            "name": "test_cli_version",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "capsys": []
            }
        },
        "TestCLIFairlySimply.test_cli_help": {
            "name": "test_cli_help",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "capsys": []
            }
        }
    },
    "nominally-master/test/test_cleaning.py": {
        "issue_4_clean_nicknames": {
            "name": "issue_4_clean_nicknames",
            "location": 108,
            "return": [],
            "arguments": {}
        },
        "issue_32_strip_hyphens": {
            "name": "issue_32_strip_hyphens",
            "location": 125,
            "return": [],
            "arguments": {
                "entry": []
            }
        },
        "issue_52_hyphenated_number": {
            "name": "issue_52_hyphenated_number",
            "location": 129,
            "return": [],
            "arguments": {}
        },
        "issue_53_smart_quotes": {
            "name": "issue_53_smart_quotes",
            "location": 147,
            "return": [],
            "arguments": {
                "raw": []
            }
        },
        "TestCleanName.t_force_lower": {
            "name": "t_force_lower",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "raw": []
            }
        },
        "TestCleanName.t_drop_emoji": {
            "name": "t_drop_emoji",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "raw": []
            }
        },
        "TestCleanName.t_convert_unicode": {
            "name": "t_convert_unicode",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "raw": []
            }
        },
        "TestCleanName.t_drop_spacing": {
            "name": "t_drop_spacing",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "raw": []
            }
        },
        "TestCleanName.t_colons_and_commas": {
            "name": "t_colons_and_commas",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "raw": []
            }
        },
        "TestCleanName.t_ignore_most_symbols": {
            "name": "t_ignore_most_symbols",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "raw": []
            }
        },
        "TestCleanName.t_handle_certain_symbols": {
            "name": "t_handle_certain_symbols",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "raw": [],
                "cooked": []
            }
        },
        "TestCleanName.t_strip_margin_hyphens": {
            "name": "t_strip_margin_hyphens",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "raw": [],
                "cooked": []
            }
        }
    },
    "nominally-master/test/test_name_blasting.py": {
        "test_all_name_banks": {
            "name": "test_all_name_banks",
            "location": 10,
            "return": [],
            "arguments": {
                "entry": []
            }
        },
        "issue_30_check_fingerprint": {
            "name": "issue_30_check_fingerprint",
            "location": 15,
            "return": [],
            "arguments": {
                "entry": []
            }
        },
        "fingerprint": {
            "name": "fingerprint",
            "location": 29,
            "return": [],
            "arguments": {
                "s": []
            }
        }
    },
    "nominally-master/test/test_name_core.py": {
        "test_string_output": {
            "name": "test_string_output",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_repr_output": {
            "name": "test_repr_output",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "issue_24_cleaned_output_as_sets": {
            "name": "issue_24_cleaned_output_as_sets",
            "location": 36,
            "return": [],
            "arguments": {
                "raw": [],
                "cleaned": []
            }
        },
        "test_dict_output": {
            "name": "test_dict_output",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "test_report_output": {
            "name": "test_report_output",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "test_parse_name_output": {
            "name": "test_parse_name_output",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "test_some_message_about_parsability": {
            "name": "test_some_message_about_parsability",
            "location": 61,
            "return": [],
            "arguments": {
                "raw": []
            }
        },
        "test_no_message_about_parsability": {
            "name": "test_no_message_about_parsability",
            "location": 68,
            "return": [],
            "arguments": {
                "raw": []
            }
        },
        "test_no_equality_of_unparsables": {
            "name": "test_no_equality_of_unparsables",
            "location": 75,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "test_equality": {
            "name": "test_equality",
            "location": 83,
            "return": [],
            "arguments": {
                "raw_one": [],
                "raw_two": []
            }
        },
        "test_dict_equality": {
            "name": "test_dict_equality",
            "location": 91,
            "return": [],
            "arguments": {}
        },
        "test_inequality": {
            "name": "test_inequality",
            "location": 126,
            "return": [],
            "arguments": {
                "other": []
            }
        },
        "test_as_list": {
            "name": "test_as_list",
            "location": 131,
            "return": [],
            "arguments": {}
        },
        "test_via_getitem": {
            "name": "test_via_getitem",
            "location": 143,
            "return": [],
            "arguments": {}
        },
        "test_via_attribute": {
            "name": "test_via_attribute",
            "location": 153,
            "return": [],
            "arguments": {}
        },
        "test_do_not_invent_attributes": {
            "name": "test_do_not_invent_attributes",
            "location": 163,
            "return": [],
            "arguments": {}
        },
        "issue_6_name_to_name": {
            "name": "issue_6_name_to_name",
            "location": 169,
            "return": [],
            "arguments": {}
        },
        "issue_3_allow_outer_only_single_quotes": {
            "name": "issue_3_allow_outer_only_single_quotes",
            "location": 175,
            "return": [],
            "arguments": {}
        },
        "issue_3_do_not_overcapture_single_quotes": {
            "name": "issue_3_do_not_overcapture_single_quotes",
            "location": 180,
            "return": [],
            "arguments": {}
        }
    },
    "nominally-master/test/test_parse_ordering.py": {},
    "nominally-master/test/test_prefix_conjunction.py": {
        "only_weird_prefixes": {
            "name": "only_weird_prefixes",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_prefix_combining": {
            "name": "test_prefix_combining",
            "location": 19,
            "return": [],
            "arguments": {
                "incoming": [],
                "outgoing": []
            }
        },
        "test_prefix_avoid": {
            "name": "test_prefix_avoid",
            "location": 33,
            "return": [],
            "arguments": {
                "static": []
            }
        },
        "test_conjunction_combine": {
            "name": "test_conjunction_combine",
            "location": 45,
            "return": [],
            "arguments": {
                "incoming": [],
                "outgoing": []
            }
        },
        "test_conjunction_avoid": {
            "name": "test_conjunction_avoid",
            "location": 57,
            "return": [],
            "arguments": {
                "static": []
            }
        },
        "issue_14_mc_and_mac_as_prefix": {
            "name": "issue_14_mc_and_mac_as_prefix",
            "location": 68,
            "return": [],
            "arguments": {
                "first": [],
                "second": []
            }
        },
        "issue_22_consistently_handle_of_prefixes_in_first_name": {
            "name": "issue_22_consistently_handle_of_prefixes_in_first_name",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "issue_26_and_issue_37_prefixes": {
            "name": "issue_26_and_issue_37_prefixes",
            "location": 228,
            "return": [],
            "arguments": {
                "entry": []
            }
        }
    },
    "nominally-master/test/test_suffix_and_title.py": {
        "fake_working": {
            "name": "fake_working",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_sweep_suffixes": {
            "name": "test_sweep_suffixes",
            "location": 23,
            "return": [],
            "arguments": {
                "incoming": [],
                "outs": [],
                "outwork": []
            }
        },
        "correct_loose_ordering": {
            "name": "correct_loose_ordering",
            "location": 30,
            "return": [],
            "arguments": {
                "pre": [],
                "post": []
            }
        },
        "test_too_many_name_parts_post_suffix": {
            "name": "test_too_many_name_parts_post_suffix",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_way_too_many_name_parts_post_suffix": {
            "name": "test_way_too_many_name_parts_post_suffix",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "issue_8_final_suffix_resolutions_updated_for_issue_12": {
            "name": "issue_8_final_suffix_resolutions_updated_for_issue_12",
            "location": 70,
            "return": [],
            "arguments": {
                "entry": []
            }
        },
        "issue_12_fix_trailing_v": {
            "name": "issue_12_fix_trailing_v",
            "location": 83,
            "return": [],
            "arguments": {
                "entry": []
            }
        },
        "issue_12_make_trailing_x_and_vii_working_by_removing_suffix_options": {
            "name": "issue_12_make_trailing_x_and_vii_working_by_removing_suffix_options",
            "location": 99,
            "return": [],
            "arguments": {
                "entry": []
            }
        },
        "issue_7_allow_initials_written_properly": {
            "name": "issue_7_allow_initials_written_properly",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "issue_14_support_proper_initials": {
            "name": "issue_14_support_proper_initials",
            "location": 123,
            "return": [],
            "arguments": {
                "entry": []
            }
        },
        "issue_15_limit_generational_suffixes": {
            "name": "issue_15_limit_generational_suffixes",
            "location": 140,
            "return": [],
            "arguments": {
                "entry": []
            }
        },
        "issue_25_more_suffix_issues": {
            "name": "issue_25_more_suffix_issues",
            "location": 153,
            "return": [],
            "arguments": {
                "entry": []
            }
        },
        "test_junior_with_gen_suffix": {
            "name": "test_junior_with_gen_suffix",
            "location": 189,
            "return": [],
            "arguments": {
                "entry": []
            }
        },
        "test_unit_grab_junior": {
            "name": "test_unit_grab_junior",
            "location": 206,
            "return": [],
            "arguments": {
                "clusters": []
            }
        },
        "test_unit_do_not_grab_junior": {
            "name": "test_unit_do_not_grab_junior",
            "location": 216,
            "return": [],
            "arguments": {
                "clusters": []
            }
        },
        "issue_31_allow_ordinals": {
            "name": "issue_31_allow_ordinals",
            "location": 234,
            "return": [],
            "arguments": {
                "entry": []
            }
        },
        "test_last_names_and_junior_non_prefixed_": {
            "name": "test_last_names_and_junior_non_prefixed_",
            "location": 249,
            "return": [],
            "arguments": {
                "entry": []
            }
        },
        "issue_54_add_to_titles": {
            "name": "issue_54_add_to_titles",
            "location": 294,
            "return": [],
            "arguments": {
                "entry": []
            }
        }
    },
    "nominally-master/test/test_unbreakable.py": {
        "test_alphabetical_text_does_not_break": {
            "name": "test_alphabetical_text_does_not_break",
            "location": 22,
            "return": [],
            "arguments": {
                "raw": []
            }
        },
        "test_characters_do_not_break": {
            "name": "test_characters_do_not_break",
            "location": 29,
            "return": [],
            "arguments": {
                "raw": []
            }
        },
        "test_commas_do_not_break": {
            "name": "test_commas_do_not_break",
            "location": 36,
            "return": [],
            "arguments": {
                "raw1": [],
                "raw2": [],
                "raw3": []
            }
        },
        "issue_40_smart_quotes": {
            "name": "issue_40_smart_quotes",
            "location": 41,
            "return": [],
            "arguments": {}
        }
    },
    "nominally-master/test/test_utilities.py": {
        "test_remove_falsy": {
            "name": "test_remove_falsy",
            "location": 18,
            "return": [],
            "arguments": {
                "incoming": [],
                "outgoing": []
            }
        },
        "TestFlatten.t_nothing_from_nothing_leaves_nothing": {
            "name": "t_nothing_from_nothing_leaves_nothing",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "incoming": []
            }
        },
        "TestFlatten.t_flatten_onces": {
            "name": "t_flatten_onces",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "example": []
            }
        },
        "TestFlatten.t_only_flatten_onces_one_level": {
            "name": "t_only_flatten_onces_one_level",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "nominally-master/test/test__issues.py": {},
    "nominally-master/test/__init__.py": {}
}
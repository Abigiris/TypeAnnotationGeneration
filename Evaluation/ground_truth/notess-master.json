{
    "notess-master/gunicorn_config.py": {},
    "notess-master/run.py": {},
    "notess-master/setup_mongo_for_test.py": {},
    "notess-master/app/api.py": {
        "hello": {
            "name": "hello",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "load_editor": {
            "name": "load_editor",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "notes_page": {
            "name": "notes_page",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "edit_page": {
            "name": "edit_page",
            "location": 43,
            "return": [],
            "arguments": {}
        }
    },
    "notess-master/app/__init__.py": {},
    "notess-master/app/knowledge/api.py": {
        "get_keywords": {
            "name": "get_keywords",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "prune_keywords": {
            "name": "prune_keywords",
            "location": 31,
            "return": [],
            "arguments": {
                "keywords": []
            }
        },
        "compute_threshold": {
            "name": "compute_threshold",
            "location": 49,
            "return": [],
            "arguments": {
                "keywords": []
            }
        },
        "add_descriptions": {
            "name": "add_descriptions",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "add_descriptions_to_keywords_dict": {
            "name": "add_descriptions_to_keywords_dict",
            "location": 78,
            "return": [],
            "arguments": {
                "keyword_dict_list": []
            }
        }
    },
    "notess-master/app/knowledge/__init__.py": {},
    "notess-master/app/knowledge/dbpedia/dbpedia.py": {
        "DBPediaAPI.search": {
            "name": "search",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "keyword": []
            }
        },
        "DBPediaAPI.QueryResult.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "keyword": [],
                "json_string": []
            }
        },
        "DBPediaAPI.QueryResult.has_results": {
            "name": "has_results",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DBPediaAPI.QueryResult.__bool__": {
            "name": "__bool__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DBPediaAPI.QueryResult.get_first_description": {
            "name": "get_first_description",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DBPediaAPI.QueryResult.get_responses": {
            "name": "get_responses",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DBPediaAPI.QueryResult.get_descriptions": {
            "name": "get_descriptions",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DBPediaAPI.QueryResult.__str__": {
            "name": "__str__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DBPediaAPI.QueryResult.__repr__": {
            "name": "__repr__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "notess-master/app/knowledge/dbpedia/schema.py": {},
    "notess-master/app/knowledge/dbpedia/__init__.py": {},
    "notess-master/app/knowledge/watson/watson.py": {
        "WatsonAPI.get_keywords": {
            "name": "get_keywords",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "input": []
            }
        }
    },
    "notess-master/app/knowledge/watson/__init__.py": {},
    "notess-master/app/store/database.py": {
        "Database.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Database.add_user": {
            "name": "add_user",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "username": [],
                "first_name": [],
                "last_name": [],
                "email": []
            }
        },
        "Database.update_user": {
            "name": "update_user",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "username": []
            }
        },
        "Database.get_user": {
            "name": "get_user",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "username": []
            }
        },
        "Database.delete_user": {
            "name": "delete_user",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "username": []
            }
        },
        "Database.add_class": {
            "name": "add_class",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "username": [],
                "class_name": []
            }
        },
        "Database.update_class": {
            "name": "update_class",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "username": [],
                "class_name": [],
                "content": []
            }
        },
        "Database.get_class": {
            "name": "get_class",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "username": [],
                "class_name": []
            }
        },
        "Database.get_all_classes": {
            "name": "get_all_classes",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "username": []
            }
        },
        "Database.delete_class": {
            "name": "delete_class",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "username": [],
                "class_name": []
            }
        },
        "Database.delete_all_classes": {
            "name": "delete_all_classes",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "username": []
            }
        },
        "Database.add_note": {
            "name": "add_note",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ],
                "class_name": [
                    "str"
                ],
                "note_name": [
                    "str"
                ],
                "text": [
                    "str"
                ],
                "force_id": [
                    "str"
                ]
            }
        },
        "Database.update_note": {
            "name": "update_note",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "username": [],
                "note_id": [],
                "content": []
            }
        },
        "Database.get_note": {
            "name": "get_note",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "username": [],
                "note_id": []
            }
        },
        "Database.get_notes_by_name": {
            "name": "get_notes_by_name",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Database.get_all_notes": {
            "name": "get_all_notes",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "username": [],
                "class_name": []
            }
        },
        "Database.delete_note": {
            "name": "delete_note",
            "location": 140,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "username": [],
                "note_id": []
            }
        },
        "Database.delete_all_notes": {
            "name": "delete_all_notes",
            "location": 144,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "username": []
            }
        },
        "Database.add_transcript": {
            "name": "add_transcript",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ],
                "note_id": [
                    "str"
                ],
                "text": [
                    "str"
                ],
                "recording_link": [
                    "str"
                ]
            }
        },
        "Database.update_transcript": {
            "name": "update_transcript",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "username": [],
                "transcript_id": [],
                "content": []
            }
        },
        "Database.get_transcript": {
            "name": "get_transcript",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "username": [],
                "transcript_id": []
            }
        },
        "Database.get_all_transcripts": {
            "name": "get_all_transcripts",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "username": [],
                "note_id": []
            }
        },
        "Database.delete_transcript": {
            "name": "delete_transcript",
            "location": 176,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "username": [],
                "transcript_id": []
            }
        },
        "Database.delete_all_transcripts": {
            "name": "delete_all_transcripts",
            "location": 180,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "username": []
            }
        },
        "Database.add_keyword": {
            "name": "add_keyword",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ],
                "note_id": [
                    "str"
                ],
                "transcript_id": [
                    "str"
                ],
                "text": [
                    "str"
                ],
                "relevance": [
                    "float"
                ],
                "description": [
                    "str"
                ],
                "link_dbpedia": [
                    "str"
                ],
                "link_wikipedia": [
                    "str"
                ]
            }
        },
        "Database.update_keyword": {
            "name": "update_keyword",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "username": [],
                "keyword_id": []
            }
        },
        "Database.get_keyword": {
            "name": "get_keyword",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "username": [],
                "keyword_id": []
            }
        },
        "Database.get_all_keywords": {
            "name": "get_all_keywords",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "username": [],
                "class_name": [],
                "note_id": [],
                "transcript_id": []
            }
        },
        "Database.delete_keyword": {
            "name": "delete_keyword",
            "location": 231,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "username": [],
                "keyword_id": []
            }
        },
        "Database.delete_all_keywords": {
            "name": "delete_all_keywords",
            "location": 235,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "username": []
            }
        },
        "Database.write_audio": {
            "name": "write_audio",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "file_": [],
                "filename": [],
                "content_type": []
            }
        },
        "Database.read_audio": {
            "name": "read_audio",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "file_id": []
            }
        }
    },
    "notess-master/app/store/__init__.py": {},
    "notess-master/app/user/__init__.py": {},
    "notess-master/app/user/api/schema.py": {},
    "notess-master/app/user/api/__init__.py": {
        "fix_oid": {
            "name": "fix_oid",
            "location": 23,
            "return": [],
            "arguments": {
                "potential_oid": []
            }
        },
        "create_one_user": {
            "name": "create_one_user",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "get_one_user": {
            "name": "get_one_user",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "get_one_class": {
            "name": "get_one_class",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "get_all_classes": {
            "name": "get_all_classes",
            "location": 99,
            "return": [],
            "arguments": {}
        },
        "create_new_class": {
            "name": "create_new_class",
            "location": 109,
            "return": [],
            "arguments": {}
        },
        "save_existing_class": {
            "name": "save_existing_class",
            "location": 129,
            "return": [],
            "arguments": {}
        },
        "get_all_notes": {
            "name": "get_all_notes",
            "location": 148,
            "return": [],
            "arguments": {}
        },
        "get_class_notes": {
            "name": "get_class_notes",
            "location": 160,
            "return": [],
            "arguments": {}
        },
        "create_new_note": {
            "name": "create_new_note",
            "location": 174,
            "return": [],
            "arguments": {}
        },
        "save_existing_note": {
            "name": "save_existing_note",
            "location": 198,
            "return": [],
            "arguments": {}
        },
        "get_one_note": {
            "name": "get_one_note",
            "location": 244,
            "return": [],
            "arguments": {}
        },
        "update_transcript": {
            "name": "update_transcript",
            "location": 262,
            "return": [],
            "arguments": {}
        },
        "create_transcript": {
            "name": "create_transcript",
            "location": 294,
            "return": [],
            "arguments": {}
        },
        "get_one_transcripts": {
            "name": "get_one_transcripts",
            "location": 328,
            "return": [],
            "arguments": {}
        },
        "get_all_transcripts": {
            "name": "get_all_transcripts",
            "location": 342,
            "return": [],
            "arguments": {}
        },
        "get_note_transcripts": {
            "name": "get_note_transcripts",
            "location": 352,
            "return": [],
            "arguments": {}
        },
        "add_keyword": {
            "name": "add_keyword",
            "location": 367,
            "return": [],
            "arguments": {}
        },
        "get_all_keywords": {
            "name": "get_all_keywords",
            "location": 388,
            "return": [],
            "arguments": {}
        },
        "get_class_keywords": {
            "name": "get_class_keywords",
            "location": 397,
            "return": [],
            "arguments": {}
        },
        "get_note_keywords": {
            "name": "get_note_keywords",
            "location": 410,
            "return": [],
            "arguments": {}
        },
        "get_transcript_keywords": {
            "name": "get_transcript_keywords",
            "location": 423,
            "return": [],
            "arguments": {}
        }
    },
    "notess-master/app/user/authentication/__init__.py": {},
    "notess-master/tests/test_api.py": {
        "APITestCase.setUp": {
            "name": "setUp",
            "location": 5,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "APITestCase.tearDown": {
            "name": "tearDown",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "APITestCase.test_docs": {
            "name": "test_docs",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "APITestCase.test_docs_no_user_id": {
            "name": "test_docs_no_user_id",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "APITestCase.test_docs_no_note_id": {
            "name": "test_docs_no_note_id",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "notess-master/tests/test_example.py": {
        "ExampleTest.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExampleTest.test_index": {
            "name": "test_index",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "notess-master/tests/__init__.py": {},
    "notess-master/tests/test_knowledge/test_api.py": {
        "TestAPI.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.tearDown": {
            "name": "tearDown",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.testAPIGetKeywords": {
            "name": "testAPIGetKeywords",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "mock_get_keywords": []
            }
        },
        "TestAPI.test_add_descriptions": {
            "name": "test_add_descriptions",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "mock_api_search": []
            }
        },
        "TestAPI.test_add_descriptions_to_keywords_dict_no_description": {
            "name": "test_add_descriptions_to_keywords_dict_no_description",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "mock_api_search": []
            }
        },
        "TestAPI.test_add_descriptions_to_keywords_dict_check_substring": {
            "name": "test_add_descriptions_to_keywords_dict_check_substring",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "mock_api_search": []
            }
        },
        "TestAPI.test_add_descriptions_to_keywords_dict_extra_element": {
            "name": "test_add_descriptions_to_keywords_dict_extra_element",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "mock_api_search": []
            }
        },
        "TestAPI.test_add_descriptions_to_keywords_dict_has_description": {
            "name": "test_add_descriptions_to_keywords_dict_has_description",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "mock_api_search": []
            }
        },
        "TestAPI.test_add_descriptions_to_keywords_dict_combined": {
            "name": "test_add_descriptions_to_keywords_dict_combined",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "mock_api_search": []
            }
        }
    },
    "notess-master/tests/test_knowledge/__init__.py": {},
    "notess-master/tests/test_knowledge/test_dbpedia/test_dbpedia.py": {
        "TestDBPedia.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDBPedia.tearDown": {
            "name": "tearDown",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDBPedia.testSearch_empty": {
            "name": "testSearch_empty",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDBPedia.testSearchKeyword_empty": {
            "name": "testSearchKeyword_empty",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDBPedia.testSearchKeyword_oneResult": {
            "name": "testSearchKeyword_oneResult",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDBPedia.testSearchKeyword_manyResults": {
            "name": "testSearchKeyword_manyResults",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponse.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        }
    },
    "notess-master/tests/test_knowledge/test_watson/test_watson.py": {
        "TestWatson.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWatson.tearDown": {
            "name": "tearDown",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWatson.testComputeThreshold_sameRelevance": {
            "name": "testComputeThreshold_sameRelevance",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWatson.testComputeThreshold_uniqueRelevance": {
            "name": "testComputeThreshold_uniqueRelevance",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWatson.testComputeThreshold_emptyList": {
            "name": "testComputeThreshold_emptyList",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWatson.testPruneList_noPruning": {
            "name": "testPruneList_noPruning",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWatson.testPruneList_somePruning": {
            "name": "testPruneList_somePruning",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWatson.testGetKeywords": {
            "name": "testGetKeywords",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "notess-master/tests/test_knowledge/test_watson/__init__.py": {},
    "notess-master/tests/test_store/test_database.py": {
        "myValidate": {
            "name": "myValidate",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "loaded_json": [],
                "schema": []
            }
        },
        "TestBasicDB.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBasicDB.testDatabaseExists": {
            "name": "testDatabaseExists",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "notess-master/tests/test_user/test_api.py": {
        "myValidate": {
            "name": "myValidate",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "loaded_json": [],
                "schema": []
            }
        },
        "generate_test_keyword_variant": {
            "name": "generate_test_keyword_variant",
            "location": 358,
            "return": [],
            "arguments": {
                "variant": [
                    "str"
                ],
                "getstr": [
                    "str"
                ],
                "get": [
                    "bool"
                ],
                "status": [
                    "int"
                ]
            }
        },
        "TestUserAPI.setUp": {
            "name": "setUp",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUserAPI.testCreateUser": {
            "name": "testCreateUser",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUserAPI.testOneUser": {
            "name": "testOneUser",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUserAPI.testOneUserFailPath": {
            "name": "testOneUserFailPath",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUserAPI.testOneUserFailPath2": {
            "name": "testOneUserFailPath2",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClassAPI.setUp": {
            "name": "setUp",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClassAPI.testOneClass": {
            "name": "testOneClass",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClassAPI.testAllClass": {
            "name": "testAllClass",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClassAPI.testAllClassFail": {
            "name": "testAllClassFail",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClassAPI.testNewClass": {
            "name": "testNewClass",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClassAPI.testNewClassWithData": {
            "name": "testNewClassWithData",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClassAPI.testUpdateClass": {
            "name": "testUpdateClass",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClassAPI.testUpdateClassNoData": {
            "name": "testUpdateClassNoData",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotesAPI.setUp": {
            "name": "setUp",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotesAPI.testNewNote": {
            "name": "testNewNote",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotesAPI.testNewNoteEmpty": {
            "name": "testNewNoteEmpty",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotesAPI.testGetNote": {
            "name": "testGetNote",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotesAPI.testGetNote_notExist": {
            "name": "testGetNote_notExist",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotesAPI.testGetNote_noNoteId": {
            "name": "testGetNote_noNoteId",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotesAPI.testGetNote_noUserId": {
            "name": "testGetNote_noUserId",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotesAPI.testUpdateNote": {
            "name": "testUpdateNote",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotesAPI.testUpdateNoteEmpty": {
            "name": "testUpdateNoteEmpty",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotesAPI.testAllNotes": {
            "name": "testAllNotes",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotesAPI.testAllNotesFail": {
            "name": "testAllNotesFail",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotesAPI.testOneClass": {
            "name": "testOneClass",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotesAPI.testOneClassFail": {
            "name": "testOneClassFail",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotesAPI.testOneClassFail2": {
            "name": "testOneClassFail2",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTranscriptAPI.setUp": {
            "name": "setUp",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTranscriptAPI.testNewTranscript": {
            "name": "testNewTranscript",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTranscriptAPI.testGetOneTranscript": {
            "name": "testGetOneTranscript",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTranscriptAPI.testUpdateTranscript": {
            "name": "testUpdateTranscript",
            "location": 309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTranscriptAPI.testTranscriptsByNote": {
            "name": "testTranscriptsByNote",
            "location": 339,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTranscriptAPI.testTranscriptsByNoteFail": {
            "name": "testTranscriptsByNoteFail",
            "location": 344,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTranscriptAPI.testAllTranscripts": {
            "name": "testAllTranscripts",
            "location": 348,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTranscriptAPI.testAllTranscriptsFail": {
            "name": "testAllTranscriptsFail",
            "location": 353,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKeywordAPI.setUp": {
            "name": "setUp",
            "location": 368,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKeywordAPI.testNewKeyword": {
            "name": "testNewKeyword",
            "location": 377,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKeywordAPI.testAllKeywords": {
            "name": "testAllKeywords",
            "location": 394,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKeywordAPI.testAllKeywordsFail": {
            "name": "testAllKeywordsFail",
            "location": 398,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKeywordAPI.testClassKeyword": {
            "name": "testClassKeyword",
            "location": 402,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKeywordAPI.testClassKeywordFail": {
            "name": "testClassKeywordFail",
            "location": 406,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKeywordAPI.testNoteKeyword": {
            "name": "testNoteKeyword",
            "location": 410,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKeywordAPI.testNoteKeywordFail": {
            "name": "testNoteKeywordFail",
            "location": 414,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKeywordAPI.testTranscriptKeyword": {
            "name": "testTranscriptKeyword",
            "location": 418,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKeywordAPI.testTranscriptKeywordsFail": {
            "name": "testTranscriptKeywordsFail",
            "location": 422,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "generate_test_keyword_variant.inner_func": {
            "name": "inner_func",
            "location": 360,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "notess-master/tests/test_user/__init__.py": {}
}
{
    "opensight-master/opensight.py": {
        "main": {
            "name": "main",
            "location": 19,
            "return": [],
            "arguments": {}
        }
    },
    "opensight-master/opsi/__init__.py": {},
    "opensight-master/opsi/backend/network.py": {
        "set_network_mode": {
            "name": "set_network_mode",
            "location": 5,
            "return": [],
            "arguments": {
                "dhcp": [
                    "bool"
                ],
                "team_number": [
                    "int"
                ],
                "static_ip_extension": [
                    "int"
                ],
                "lifespan": [
                    "'Lifespan'"
                ]
            }
        },
        "dhcpcd_writable": {
            "name": "dhcpcd_writable",
            "location": 30,
            "return": [],
            "arguments": {}
        }
    },
    "opensight-master/opsi/backend/upgrade.py": {
        "ensure_apt": {
            "name": "ensure_apt",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "upgrade_opsi": {
            "name": "upgrade_opsi",
            "location": 29,
            "return": [],
            "arguments": {
                "archive": [],
                "lifespan": []
            }
        }
    },
    "opensight-master/opsi/backend/__init__.py": {},
    "opensight-master/opsi/lifespan/lifespan.py": {
        "register_modules": {
            "name": "register_modules",
            "location": 45,
            "return": [],
            "arguments": {
                "program": [],
                "module_path": []
            }
        },
        "Lifespan.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Lifespan.load_persistence": {
            "name": "load_persistence",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "program": []
            }
        },
        "Lifespan.using_systemd": {
            "name": "using_systemd",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lifespan.netconf_writable": {
            "name": "netconf_writable",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lifespan.make_threads": {
            "name": "make_threads",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lifespan.main_loop": {
            "name": "main_loop",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lifespan.catch_signal": {
            "name": "catch_signal",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "signum": [],
                "frame": []
            }
        },
        "Lifespan.terminate": {
            "name": "terminate",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lifespan.shutdown_threads": {
            "name": "shutdown_threads",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lifespan.restart": {
            "name": "restart",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "host": []
            }
        },
        "Lifespan.shutdown": {
            "name": "shutdown",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "host": []
            }
        }
    },
    "opensight-master/opsi/lifespan/webserverthread.py": {
        "WebserverThread.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "app": []
            }
        }
    },
    "opensight-master/opsi/lifespan/__init__.py": {},
    "opensight-master/opsi/manager/link.py": {
        "Link.get": {
            "name": "get",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeLink.get": {
            "name": "get",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StaticLink.get": {
            "name": "get",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "opensight-master/opsi/manager/manager.py": {
        "import_module": {
            "name": "import_module",
            "location": 21,
            "return": [],
            "arguments": {
                "path": [
                    "ModulePath"
                ]
            }
        },
        "Manager.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "pipeline": []
            }
        },
        "Manager.is_valid_function": {
            "name": "is_valid_function",
            "location": 68,
            "return": [],
            "arguments": {
                "cls": [],
                "module": []
            }
        },
        "Manager.get_module_info": {
            "name": "get_module_info",
            "location": 77,
            "return": [],
            "arguments": {
                "cls": [],
                "module": []
            }
        },
        "Manager.register_module": {
            "name": "register_module",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "ModulePath"
                ]
            }
        },
        "Manager.pipeline_update": {
            "name": "pipeline_update",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Manager.shutdown": {
            "name": "shutdown",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Manager.is_valid_function.closure": {
            "name": "closure",
            "location": 69,
            "return": [],
            "arguments": {
                "func": []
            }
        }
    },
    "opensight-master/opsi/manager/manager_schema.py": {
        "isinstance_partial": {
            "name": "isinstance_partial",
            "location": 19,
            "return": [
                "Callable[([Any], bool)]"
            ],
            "arguments": {
                "type": [
                    "Type"
                ]
            }
        },
        "does_match": {
            "name": "does_match",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "name": [
                    "str"
                ],
                "asserter": [
                    "Callable[([Any], bool)]"
                ]
            }
        },
        "isfunction": {
            "name": "isfunction",
            "location": 162,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "ishook": {
            "name": "ishook",
            "location": 251,
            "return": [],
            "arguments": {
                "hook": []
            }
        },
        "isinstance_partial.partial": {
            "name": "partial",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": []
            }
        },
        "Function.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 47,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Function.dispose": {
            "name": "dispose",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Function.run": {
            "name": "run",
            "location": 117,
            "return": [
                "Outputs"
            ],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "Function.on_start": {
            "name": "on_start",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Function.validate_settings": {
            "name": "validate_settings",
            "location": 124,
            "return": [],
            "arguments": {
                "cls": [],
                "settings": []
            }
        },
        "Function.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "settings": [
                    "Settings"
                ]
            }
        },
        "Function._private_dispose": {
            "name": "_private_dispose",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Function._private_run": {
            "name": "_private_run",
            "location": 145,
            "return": [
                "Outputs"
            ],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "Function._private_validate_settings": {
            "name": "_private_validate_settings",
            "location": 151,
            "return": [],
            "arguments": {
                "cls": [],
                "settings": []
            }
        },
        "Hook.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hook.update_cache": {
            "name": "update_cache",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hook.get_skips": {
            "name": "get_skips",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Hook.get_output_deps": {
            "name": "get_output_deps",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "output": []
            }
        },
        "Hook.cancel_node": {
            "name": "cancel_node",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Hook.cancel_current": {
            "name": "cancel_current",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hook.cancel_output": {
            "name": "cancel_output",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "output": [
                    "str"
                ]
            }
        },
        "Hook.add_listener": {
            "name": "add_listener",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "event": [
                    "str"
                ],
                "function": [
                    "callable"
                ]
            }
        },
        "Hook.remove_listener": {
            "name": "remove_listener",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "event": [
                    "str"
                ],
                "function": [
                    "callable"
                ]
            }
        },
        "Hook.startup": {
            "name": "startup",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hook.shutdown": {
            "name": "shutdown",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hook.pipeline_update": {
            "name": "pipeline_update",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hook.get_fps": {
            "name": "get_fps",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Function.__init_subclass__.error": {
            "name": "error",
            "location": 48,
            "return": [],
            "arguments": {
                "msg": []
            }
        }
    },
    "opensight-master/opsi/manager/netdict.py": {
        "NetworkDict.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "table": [
                    "str"
                ],
                "networktable": [
                    "NetworkTablesInstance"
                ]
            }
        },
        "NetworkDict._cleanup_path": {
            "name": "_cleanup_path",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "NetworkDict._get_path": {
            "name": "_get_path",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "NetworkDict._get_entry": {
            "name": "_get_entry",
            "location": 44,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "NetworkDict.get_subtable": {
            "name": "get_subtable",
            "location": 61,
            "return": [
                "'NetworkDict'"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str"
                ]
            }
        },
        "NetworkDict.get": {
            "name": "get",
            "location": 68,
            "return": [
                "NT_TYPES"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "default": [
                    "NT_TYPES"
                ]
            }
        },
        "NetworkDict.set_safe": {
            "name": "set_safe",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "NT_TYPES"
                ]
            }
        },
        "NetworkDict.set": {
            "name": "set",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "NT_TYPES"
                ]
            }
        },
        "NetworkDict._delete_table": {
            "name": "_delete_table",
            "location": 123,
            "return": [],
            "arguments": {
                "cls": [],
                "nttable": []
            }
        },
        "NetworkDict.delete_table": {
            "name": "delete_table",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "table": []
            }
        },
        "NetworkDict.delete": {
            "name": "delete",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "NetworkDict.exists": {
            "name": "exists",
            "location": 146,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "NetworkDict.__getitem__": {
            "name": "__getitem__",
            "location": 151,
            "return": [
                "NT_TYPES"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "NetworkDict.__setitem__": {
            "name": "__setitem__",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "NetworkDict.__delitem__": {
            "name": "__delitem__",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "NetworkDict.__contains__": {
            "name": "__contains__",
            "location": 160,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        }
    },
    "opensight-master/opsi/manager/pipeline.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "func": [
                    "Type[Function]"
                ],
                "id": [
                    "UUID"
                ]
            }
        },
        "Node.next_frame": {
            "name": "next_frame",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.reset_links": {
            "name": "reset_links",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.ensure_init": {
            "name": "ensure_init",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.dispose": {
            "name": "dispose",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.set_static_link": {
            "name": "set_static_link",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "item": [
                    "Any"
                ]
            }
        },
        "Node.set_static_links": {
            "name": "set_static_links",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "vals": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Node.run": {
            "name": "run",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "program": []
            }
        },
        "Pipeline.run": {
            "name": "run",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.mainloop": {
            "name": "mainloop",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.get_dependents": {
            "name": "get_dependents",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Pipeline.cancel_nodes": {
            "name": "cancel_nodes",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "nodes": []
            }
        },
        "Pipeline.create_node": {
            "name": "create_node",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "func": [
                    "Type[Function]"
                ],
                "uuid": [
                    "UUID"
                ]
            }
        },
        "Pipeline.create_links": {
            "name": "create_links",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "input_node_id": [],
                "links": [
                    "Links"
                ]
            }
        },
        "Pipeline.clear": {
            "name": "clear",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.dispose_all": {
            "name": "dispose_all",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.prune_nodetree": {
            "name": "prune_nodetree",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "new_node_ids": []
            }
        }
    },
    "opensight-master/opsi/manager/program.py": {
        "Program.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "lifespan": []
            }
        },
        "Program.create_node": {
            "name": "create_node",
            "location": 24,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": [],
                "func_type": [
                    "str"
                ],
                "uuid": [
                    "UUID"
                ]
            }
        },
        "Program.mainloop": {
            "name": "mainloop",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "shutdown": []
            }
        }
    },
    "opensight-master/opsi/manager/types.py": {
        "_RangeBaseType.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "min": [],
                "max": []
            }
        },
        "_RangeBaseType._convert": {
            "name": "_convert",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "_RangeBaseType.in_range": {
            "name": "in_range",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "_RangeBaseType.ensure_in_range": {
            "name": "ensure_in_range",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "val": [],
                "name": []
            }
        },
        "_RangeBaseType.serialize": {
            "name": "serialize",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Slide.create": {
            "name": "create",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "RangeType.create": {
            "name": "create",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "min": [],
                "max": []
            }
        }
    },
    "opensight-master/opsi/manager/__init__.py": {},
    "opensight-master/opsi/modules/color.py": {
        "Blur.run": {
            "name": "run",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "HSVRange.run": {
            "name": "run",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "Greyscale.run": {
            "name": "run",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "Canny.run": {
            "name": "run",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "AbsoluteDifferenceRGB.run": {
            "name": "run",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "AbsoluteDifferenceHSV.run": {
            "name": "run",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "ClampMax.run": {
            "name": "run",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "ClampMin.run": {
            "name": "run",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "ColorSampler.run": {
            "name": "run",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "ColorDetector.run": {
            "name": "run",
            "location": 298,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "Resize.run": {
            "name": "run",
            "location": 343,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "ColorBalance.run": {
            "name": "run",
            "location": 362,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "ColorDetector.run.hue_dist": {
            "name": "hue_dist",
            "location": 299,
            "return": [],
            "arguments": {
                "test": [
                    "int"
                ],
                "reference": [
                    "int"
                ]
            }
        }
    },
    "opensight-master/opsi/modules/contour.py": {
        "FindContours.run": {
            "name": "run",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "ConvexHulls.run": {
            "name": "run",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "ContourApproximate.run": {
            "name": "run",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "FindCenter.run": {
            "name": "run",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "FindAngle.calculate_focal_length": {
            "name": "calculate_focal_length",
            "location": 112,
            "return": [],
            "arguments": {
                "cls": [],
                "diagonalFOV": [],
                "horizontalAspect": [],
                "verticalAspect": []
            }
        },
        "FindAngle.run": {
            "name": "run",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "FindCorners.run": {
            "name": "run",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "FindArea.run": {
            "name": "run",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        }
    },
    "opensight-master/opsi/modules/contour_filters.py": {
        "ContourFilter.check_contour": {
            "name": "check_contour",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "contour": [
                    "Contour"
                ]
            }
        },
        "ContourFilter.run": {
            "name": "run",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "AreaFilter.check_contour": {
            "name": "check_contour",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "contour": [
                    "Contour"
                ]
            }
        },
        "BoundingRectFilter.check_contour": {
            "name": "check_contour",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "contour": [
                    "Contour"
                ]
            }
        },
        "MinRectFilter.check_contour": {
            "name": "check_contour",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "contour": [
                    "Contour"
                ]
            }
        },
        "SpeckleFilter.run": {
            "name": "run",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "AspectRatioFilter.check_contour": {
            "name": "check_contour",
            "location": 130,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "contour": [
                    "Contour"
                ]
            }
        },
        "OrientationFilter.check_contour": {
            "name": "check_contour",
            "location": 154,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "contour": [
                    "Contour"
                ]
            }
        },
        "AngleFilter.check_contour": {
            "name": "check_contour",
            "location": 173,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "contour": [
                    "Contour"
                ]
            }
        },
        "Sort.run": {
            "name": "run",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        }
    },
    "opensight-master/opsi/modules/gpio.py": {
        "LED.on_start": {
            "name": "on_start",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LED.run": {
            "name": "run",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "PWMLED.on_start": {
            "name": "on_start",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "opensight-master/opsi/modules/gpu.py": {
        "ThresholdGPU.on_start": {
            "name": "on_start",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ThresholdGPU.lower_upper_from_settings": {
            "name": "lower_upper_from_settings",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ThresholdGPU.run": {
            "name": "run",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "BlurGPU.on_start": {
            "name": "on_start",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlurGPU.run": {
            "name": "run",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "BlurAndThreshold.on_start": {
            "name": "on_start",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlurAndThreshold.lower_upper_from_settings": {
            "name": "lower_upper_from_settings",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlurAndThreshold.run": {
            "name": "run",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "GreenMinusRed.on_start": {
            "name": "on_start",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GreenMinusRed.run": {
            "name": "run",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        }
    },
    "opensight-master/opsi/modules/image.py": {
        "Rotate.run": {
            "name": "run",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "RotateNoCrop.run": {
            "name": "run",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "Flip.run": {
            "name": "run",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        }
    },
    "opensight-master/opsi/modules/logic.py": {
        "Toggle.run": {
            "name": "run",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "Freeze.run": {
            "name": "run",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "If.run": {
            "name": "run",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "SwitchBoolean.run": {
            "name": "run",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "SwitchNumber.run": {
            "name": "run",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "NOP.run": {
            "name": "run",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        }
    },
    "opensight-master/opsi/modules/mask.py": {
        "Erode.validate_settings": {
            "name": "validate_settings",
            "location": 16,
            "return": [],
            "arguments": {
                "cls": [],
                "settings": []
            }
        },
        "Erode._impl": {
            "name": "_impl",
            "location": 31,
            "return": [],
            "arguments": {
                "cls": [],
                "imgBW": [],
                "size": []
            }
        },
        "Erode.run": {
            "name": "run",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "Dilate._impl": {
            "name": "_impl",
            "location": 41,
            "return": [],
            "arguments": {
                "cls": [],
                "imgBW": [],
                "size": []
            }
        },
        "Invert.run": {
            "name": "run",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "Join.run": {
            "name": "run",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        }
    },
    "opensight-master/opsi/modules/shapes.py": {
        "FindCircles.run": {
            "name": "run",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "FindLines.run": {
            "name": "run",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        }
    },
    "opensight-master/opsi/modules/solve_pnp.py": {
        "get_calibration_files": {
            "name": "get_calibration_files",
            "location": 17,
            "return": [],
            "arguments": {
                "persist": [
                    "Persistence"
                ]
            }
        },
        "SolvePNP.on_start": {
            "name": "on_start",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SolvePNP.run": {
            "name": "run",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "Position2D.run": {
            "name": "run",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "VisualizeTargetPose.on_start": {
            "name": "on_start",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VisualizeTargetPose.run": {
            "name": "run",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        }
    },
    "opensight-master/opsi/modules/__init__.py": {},
    "opensight-master/opsi/modules/disabled/eight.py": {
        "TupleTest.run": {
            "name": "run",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "PointTest.run": {
            "name": "run",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        }
    },
    "opensight-master/opsi/modules/disabled/five.py": {
        "Five.run": {
            "name": "run",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "Sum.run": {
            "name": "run",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "Multiply.run": {
            "name": "run",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        }
    },
    "opensight-master/opsi/modules/disabled/seven.py": {
        "IsInRange.run": {
            "name": "run",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        }
    },
    "opensight-master/opsi/modules/disabled/six.py": {
        "Boolean.run": {
            "name": "run",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "Number.run": {
            "name": "run",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "String.run": {
            "name": "run",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "ToString.run": {
            "name": "run",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "Concat.run": {
            "name": "run",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "Add.run": {
            "name": "run",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "Subtract.run": {
            "name": "run",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "Multiply.run": {
            "name": "run",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "Divide.run": {
            "name": "run",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "Random.run": {
            "name": "run",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "Print.run": {
            "name": "run",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        }
    },
    "opensight-master/opsi/modules/draw/fps.py": {
        "DrawFPS.run": {
            "name": "run",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        }
    },
    "opensight-master/opsi/modules/draw/shapes.py": {
        "DrawCircles.run": {
            "name": "run",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "DrawSegments.run": {
            "name": "run",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "DrawCorners.run": {
            "name": "run",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        }
    },
    "opensight-master/opsi/modules/draw/__init__.py": {
        "DrawText.run": {
            "name": "run",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "DrawContours.run": {
            "name": "run",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "BitwiseAND.run": {
            "name": "run",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        }
    },
    "opensight-master/opsi/modules/nt/get.py": {
        "GetNT.on_start": {
            "name": "on_start",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetNT.run": {
            "name": "run",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        }
    },
    "opensight-master/opsi/modules/nt/put.py": {
        "PutNT.validate_settings": {
            "name": "validate_settings",
            "location": 18,
            "return": [],
            "arguments": {
                "cls": [],
                "settings": []
            }
        },
        "PutNT.on_start": {
            "name": "on_start",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PutNT.validate_paths": {
            "name": "validate_paths",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PutNT.prefixed_key": {
            "name": "prefixed_key",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "PutNT.write_dict_to_path": {
            "name": "write_dict_to_path",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "value_dict": []
            }
        },
        "PutNT.run": {
            "name": "run",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "PutNT.dispose": {
            "name": "dispose",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "opensight-master/opsi/modules/nt/__init__.py": {
        "init_networktables": {
            "name": "init_networktables",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "deinit_networktables": {
            "name": "deinit_networktables",
            "location": 22,
            "return": [],
            "arguments": {}
        }
    },
    "opensight-master/opsi/modules/videoio/h264.py": {
        "EngineManager.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "hook": []
            }
        },
        "EngineManager.register": {
            "name": "register",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "func": [
                    "'H264CameraServer'"
                ]
            }
        },
        "EngineManager.unregister": {
            "name": "unregister",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "func": [
                    "'H264CameraServer'"
                ]
            }
        },
        "EngineManager.start": {
            "name": "start",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EngineManager.restart_engine": {
            "name": "restart_engine",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EngineManager.shutdown": {
            "name": "shutdown",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "H264CameraServer.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "fps": [
                    "int"
                ]
            }
        },
        "H264CameraServer.run": {
            "name": "run",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [
                    "'CameraServer.Inputs'"
                ]
            }
        },
        "H264CameraServer.dispose": {
            "name": "dispose",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "H264CameraServer.register": {
            "name": "register",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "EngineInstance": []
            }
        },
        "H264CameraServer.unregister": {
            "name": "unregister",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "EngineInstance": []
            }
        },
        "H264CameraServer.shmem_socket": {
            "name": "shmem_socket",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "H264CameraServer.encoder": {
            "name": "encoder",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "H264CameraServer.pipeline": {
            "name": "pipeline",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "opensight-master/opsi/modules/videoio/input.py": {
        "get_settings": {
            "name": "get_settings",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "get_codec": {
            "name": "get_codec",
            "location": 62,
            "return": [],
            "arguments": {
                "v4l2_out": []
            }
        },
        "get_cam_info": {
            "name": "get_cam_info",
            "location": 76,
            "return": [],
            "arguments": {
                "cam": []
            }
        },
        "sort_modes": {
            "name": "sort_modes",
            "location": 88,
            "return": [],
            "arguments": {
                "mode": []
            }
        },
        "get_modes": {
            "name": "get_modes",
            "location": 100,
            "return": [],
            "arguments": {}
        },
        "parse_cammode": {
            "name": "parse_cammode",
            "location": 158,
            "return": [],
            "arguments": {
                "mode": []
            }
        },
        "controls": {
            "name": "controls",
            "location": 176,
            "return": [],
            "arguments": {
                "fps": []
            }
        },
        "create_capture": {
            "name": "create_capture",
            "location": 182,
            "return": [],
            "arguments": {
                "settings": []
            }
        },
        "create_capture.set_property": {
            "name": "set_property",
            "location": 183,
            "return": [],
            "arguments": {
                "prop": [],
                "value": []
            }
        }
    },
    "opensight-master/opsi/modules/videoio/mjpeg.py": {
        "ASGILifespan.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "receive": []
            }
        },
        "ASGILifespan.is_msg_start": {
            "name": "is_msg_start",
            "location": 44,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "ASGILifespan.is_msg_end": {
            "name": "is_msg_end",
            "location": 48,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "ASGILifespan.end": {
            "name": "end",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ASGIApplication.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "receive": [],
                "send": []
            }
        },
        "ASGIApplication._encode_bytes": {
            "name": "_encode_bytes",
            "location": 117,
            "return": [],
            "arguments": {
                "val": []
            }
        },
        "ASGIApplication._convert_headers": {
            "name": "_convert_headers",
            "location": 121,
            "return": [],
            "arguments": {
                "cls": [],
                "headers": []
            }
        },
        "ASGIStreamer.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "receive": [],
                "send": []
            }
        },
        "MjpegResponse.__init__": {
            "name": "__init__",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "src": []
            }
        },
        "MjpegResponse.get_values": {
            "name": "get_values",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CamHook.__init__": {
            "name": "__init__",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CamHook._update": {
            "name": "_update",
            "location": 265,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CamHook.endpoint": {
            "name": "endpoint",
            "location": 268,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "CamHook.register": {
            "name": "register",
            "location": 274,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "CamHook.unregister": {
            "name": "unregister",
            "location": 288,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "CameraSource.__init__": {
            "name": "__init__",
            "location": 301,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CameraSource.quality": {
            "name": "quality",
            "location": 313,
            "return": [],
            "arguments": {
                "self": [],
                "quality": []
            }
        },
        "CameraSource.img": {
            "name": "img",
            "location": 321,
            "return": [],
            "arguments": {
                "self": [],
                "img": []
            }
        },
        "CameraSource.shutdown": {
            "name": "shutdown",
            "location": 379,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MjpegCameraServer.__init__": {
            "name": "__init__",
            "location": 386,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MjpegCameraServer.run": {
            "name": "run",
            "location": 389,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "MjpegCameraServer.dispose": {
            "name": "dispose",
            "location": 392,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CamHook.endpoint.image": {
            "name": "image",
            "location": 269,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "opensight-master/opsi/modules/videoio/__init__.py": {
        "CameraInput.on_start": {
            "name": "on_start",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CameraInput.run": {
            "name": "run",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "CameraInput.dispose": {
            "name": "dispose",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CameraServer.validate_settings": {
            "name": "validate_settings",
            "location": 77,
            "return": [],
            "arguments": {
                "cls": [],
                "settings": []
            }
        },
        "CameraServer.on_start": {
            "name": "on_start",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CameraServer.run": {
            "name": "run",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "CameraServer.dispose": {
            "name": "dispose",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CameraServer.id": {
            "name": "id",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "opensight-master/opsi/util/cache.py": {
        "cached_property.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "func": [],
                "name": [],
                "doc": []
            }
        },
        "cached_property.__set__": {
            "name": "__set__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "value": []
            }
        },
        "cached_property.__get__": {
            "name": "__get__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "type": []
            }
        }
    },
    "opensight-master/opsi/util/concurrency.py": {
        "FifoLock.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "queue": []
            }
        },
        "FifoLock.__enter__": {
            "name": "__enter__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FifoLock.__exit__": {
            "name": "__exit__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FifoLock.run": {
            "name": "run",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Snippet.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Snippet.run_abandon": {
            "name": "run_abandon",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Snippet.done": {
            "name": "done",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ThreadBase.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "args": [],
                "name": [],
                "autostart": []
            }
        },
        "ThreadBase.start": {
            "name": "start",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ThreadBase.__make_thread__": {
            "name": "__make_thread__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "args": []
            }
        },
        "ShutdownThread.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "args": [],
                "timeout": []
            }
        },
        "ShutdownThread.__make_thread__": {
            "name": "__make_thread__",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "args": []
            }
        },
        "ShutdownThread.terminate": {
            "name": "terminate",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ShutdownThread.__stop__": {
            "name": "__stop__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ShutdownThread.shutdown": {
            "name": "shutdown",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AsyncThread.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "coroutine": []
            }
        },
        "AsyncThread.__make_thread__": {
            "name": "__make_thread__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "args": []
            }
        },
        "AsyncThread.run_coro": {
            "name": "run_coro",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "coro": []
            }
        },
        "AsyncThread.wait_for_task": {
            "name": "wait_for_task",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "task": [],
                "timeout": []
            }
        },
        "AsyncThread.__stop__": {
            "name": "__stop__",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AsyncThread.shutdown": {
            "name": "shutdown",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "opensight-master/opsi/util/fps.py": {
        "FPS.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FPS.update": {
            "name": "update",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FPS.reset": {
            "name": "reset",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "opensight-master/opsi/util/networking.py": {
        "is_port_open": {
            "name": "is_port_open",
            "location": 9,
            "return": [],
            "arguments": {
                "port": []
            }
        },
        "get_static_hostname": {
            "name": "get_static_hostname",
            "location": 20,
            "return": [],
            "arguments": {
                "prefix": []
            }
        },
        "get_server_url": {
            "name": "get_server_url",
            "location": 31,
            "return": [],
            "arguments": {
                "lifespan": [],
                "port": [],
                "prefix": []
            }
        },
        "get_nt_server": {
            "name": "get_nt_server",
            "location": 55,
            "return": [],
            "arguments": {
                "network": []
            }
        },
        "choose_port": {
            "name": "choose_port",
            "location": 65,
            "return": [],
            "arguments": {
                "ports": []
            }
        }
    },
    "opensight-master/opsi/util/path.py": {
        "join": {
            "name": "join",
            "location": 6,
            "return": [],
            "arguments": {
                "dir": [],
                "file": []
            }
        }
    },
    "opensight-master/opsi/util/persistence.py": {
        "Persistence.__new__": {
            "name": "__new__",
            "location": 20,
            "return": [],
            "arguments": {
                "cls": [],
                "path": []
            }
        },
        "Persistence.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "Persistence._get_nt_path": {
            "name": "_get_nt_path",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Persistence._get_path": {
            "name": "_get_path",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Persistence.nodetree": {
            "name": "nodetree",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "nodetree": [
                    "NodeTreeN"
                ]
            }
        },
        "Persistence.prefs": {
            "name": "prefs",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "prefs": [
                    "Preferences"
                ]
            }
        },
        "Persistence.update_nodetree": {
            "name": "update_nodetree",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Persistence.enabled": {
            "name": "enabled",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Persistence.profile": {
            "name": "profile",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Persistence.network": {
            "name": "network",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Persistence.add_calibration_file": {
            "name": "add_calibration_file",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "file": [
                    "UploadFile"
                ]
            }
        },
        "Persistence.get_all_calibration_files": {
            "name": "get_all_calibration_files",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Persistence.get_calibration_file_path": {
            "name": "get_calibration_file_path",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "NullPersistence._get_path": {
            "name": "_get_path",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "opensight-master/opsi/util/templating.py": {
        "TemplateFolder": {
            "name": "TemplateFolder",
            "location": 6,
            "return": [],
            "arguments": {
                "directory": []
            }
        },
        "LiteralTemplate": {
            "name": "LiteralTemplate",
            "location": 25,
            "return": [],
            "arguments": {
                "template": []
            }
        },
        "TemplateFolder.create_template": {
            "name": "create_template",
            "location": 14,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "LiteralTemplate.endpoint": {
            "name": "endpoint",
            "location": 30,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "TemplateFolder.create_template.endpoint": {
            "name": "endpoint",
            "location": 15,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "opensight-master/opsi/util/unduplicator.py": {
        "Unduplicator.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unduplicator.add": {
            "name": "add",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Unduplicator.remove": {
            "name": "remove",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        }
    },
    "opensight-master/opsi/util/cv/contour.py": {
        "Contour.nt_serialize": {
            "name": "nt_serialize",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Contour.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "raw": [
                    "ndarray"
                ],
                "res": [
                    "Point"
                ]
            }
        },
        "Contour.convex_hull": {
            "name": "convex_hull",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Contour.moments": {
            "name": "moments",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Contour.area": {
            "name": "area",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Contour.pixel_centroid": {
            "name": "pixel_centroid",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Contour.centroid": {
            "name": "centroid",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Contour._arc_length": {
            "name": "_arc_length",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Contour.perimeter": {
            "name": "perimeter",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Contour.approximate": {
            "name": "approximate",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "epsilon": []
            }
        },
        "Contour.to_rect": {
            "name": "to_rect",
            "location": 94,
            "return": [
                "Rect"
            ],
            "arguments": {
                "self": []
            }
        },
        "Contour.to_min_area_rect": {
            "name": "to_min_area_rect",
            "location": 98,
            "return": [
                "RotatedRect"
            ],
            "arguments": {
                "self": []
            }
        },
        "Contour.points": {
            "name": "points",
            "location": 102,
            "return": [
                "List[Point]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Contour.corners": {
            "name": "corners",
            "location": 106,
            "return": [
                "Tuple[(bool, Union[(Corners, None)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Contours.nt_serialize": {
            "name": "nt_serialize",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Contours.__init__": {
            "name": "__init__",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Contours.from_img": {
            "name": "from_img",
            "location": 180,
            "return": [],
            "arguments": {
                "cls": [],
                "img": [
                    "MatBW"
                ]
            }
        },
        "Contours.from_raw": {
            "name": "from_raw",
            "location": 191,
            "return": [],
            "arguments": {
                "cls": [],
                "raw": [
                    "List[ndarray]"
                ],
                "res": []
            }
        },
        "Contours.from_contours": {
            "name": "from_contours",
            "location": 200,
            "return": [],
            "arguments": {
                "cls": [],
                "contours": [
                    "List[Contour]"
                ],
                "res": []
            }
        },
        "Contours.raw": {
            "name": "raw",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Contours.l": {
            "name": "l",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Contours.convex_hulls": {
            "name": "convex_hulls",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Contours.approximate": {
            "name": "approximate",
            "location": 227,
            "return": [],
            "arguments": {
                "self": [],
                "epsilon": []
            }
        },
        "Contours.centroids": {
            "name": "centroids",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Contours.centroid_of_all": {
            "name": "centroid_of_all",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Contour.corners.centerDistance": {
            "name": "centerDistance",
            "location": 112,
            "return": [],
            "arguments": {
                "point": [
                    "Point"
                ]
            }
        }
    },
    "opensight-master/opsi/util/cv/file_storage.py": {
        "read_calibration_file": {
            "name": "read_calibration_file",
            "location": 7,
            "return": [],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "write_calibration_file": {
            "name": "write_calibration_file",
            "location": 20,
            "return": [],
            "arguments": {
                "path": [
                    "str"
                ],
                "camera_matrix": [],
                "distortion_coefficients": []
            }
        }
    },
    "opensight-master/opsi/util/cv/mat.py": {
        "Mat.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "img": [
                    "ndarray"
                ]
            }
        },
        "Mat.from_matbw": {
            "name": "from_matbw",
            "location": 27,
            "return": [
                "'Mat'"
            ],
            "arguments": {
                "cls": [],
                "matbw": [
                    "'MatBW'"
                ]
            }
        },
        "Mat.mat": {
            "name": "mat",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mat.matBW": {
            "name": "matBW",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mat.blur": {
            "name": "blur",
            "location": 40,
            "return": [
                "'Mat'"
            ],
            "arguments": {
                "self": [],
                "radius": [
                    "int"
                ]
            }
        },
        "Mat.hsv_threshold": {
            "name": "hsv_threshold",
            "location": 57,
            "return": [
                "'MatBW'"
            ],
            "arguments": {
                "self": [],
                "hue": [
                    "'Range'"
                ],
                "sat": [
                    "'Range'"
                ],
                "lum": [
                    "'Range'"
                ]
            }
        },
        "Mat.encode_jpg": {
            "name": "encode_jpg",
            "location": 69,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "quality": []
            }
        },
        "Mat.greyscale": {
            "name": "greyscale",
            "location": 78,
            "return": [
                "'Mat'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mat.hsv": {
            "name": "hsv",
            "location": 83,
            "return": [
                "'Mat'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mat.resize": {
            "name": "resize",
            "location": 87,
            "return": [
                "'Mat'"
            ],
            "arguments": {
                "self": [],
                "res": [
                    "Point"
                ]
            }
        },
        "Mat.color_balance": {
            "name": "color_balance",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "red_balance": [
                    "float"
                ],
                "blue_balance": [
                    "float"
                ]
            }
        },
        "Mat.canny": {
            "name": "canny",
            "location": 97,
            "return": [
                "'MatBW'"
            ],
            "arguments": {
                "self": [],
                "threshold_lower": [],
                "threshold_upper": []
            }
        },
        "Mat.hough_circles": {
            "name": "hough_circles",
            "location": 100,
            "return": [
                "'Circles'"
            ],
            "arguments": {
                "self": [],
                "dp": [
                    "int"
                ],
                "min_dist": [
                    "int"
                ],
                "param1": [
                    "int"
                ],
                "param2": [
                    "int"
                ],
                "min_radius": [
                    "int"
                ],
                "max_radius": [
                    "int"
                ]
            }
        },
        "Mat.abs_diff": {
            "name": "abs_diff",
            "location": 124,
            "return": [
                "'Mat'"
            ],
            "arguments": {
                "self": [],
                "scalar": [
                    "ndarray"
                ]
            }
        },
        "Mat.flip_horizontally": {
            "name": "flip_horizontally",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mat.flip_vertically": {
            "name": "flip_vertically",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mat.rotate": {
            "name": "rotate",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "angle": []
            }
        },
        "Mat.rotate_no_crop": {
            "name": "rotate_no_crop",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "angle": []
            }
        },
        "MatBW.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "img": [
                    "ndarray"
                ]
            }
        },
        "MatBW.mat": {
            "name": "mat",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MatBW.matBW": {
            "name": "matBW",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MatBW.erode": {
            "name": "erode",
            "location": 158,
            "return": [
                "'MatBW'"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int"
                ]
            }
        },
        "MatBW.dilate": {
            "name": "dilate",
            "location": 163,
            "return": [
                "'MatBW'"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int"
                ]
            }
        },
        "MatBW.invert": {
            "name": "invert",
            "location": 169,
            "return": [
                "'MatBW'"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatBW.join": {
            "name": "join",
            "location": 173,
            "return": [
                "'MatBW'"
            ],
            "arguments": {
                "cls": [],
                "img1": [
                    "'MatBW'"
                ],
                "img2": [
                    "'MatBW'"
                ]
            }
        },
        "MatBW.hough_lines": {
            "name": "hough_lines",
            "location": 176,
            "return": [
                "'Segments'"
            ],
            "arguments": {
                "self": [],
                "rho": [
                    "int"
                ],
                "threshold": [
                    "int"
                ],
                "min_length": [
                    "int"
                ],
                "max_gap": [
                    "int"
                ],
                "theta": [
                    "float"
                ]
            }
        },
        "Color.nt_serialize": {
            "name": "nt_serialize",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "opensight-master/opsi/util/cv/shape.py": {
        "Point.nt_serialize": {
            "name": "nt_serialize",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point._make_rev": {
            "name": "_make_rev",
            "location": 22,
            "return": [],
            "arguments": {
                "cls": [],
                "iter": []
            }
        },
        "Point.area": {
            "name": "area",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point.hypot": {
            "name": "hypot",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point.perimeter": {
            "name": "perimeter",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point.normalize": {
            "name": "normalize",
            "location": 38,
            "return": [
                "'Point'"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "'Point'"
                ]
            }
        },
        "Shape.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Shape.perimeter": {
            "name": "perimeter",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Shape.area": {
            "name": "area",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rect.nt_serialize": {
            "name": "nt_serialize",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rect.from_params": {
            "name": "from_params",
            "location": 69,
            "return": [],
            "arguments": {
                "cls": [],
                "x": [],
                "y": [],
                "width": [],
                "height": []
            }
        },
        "Rect.from_contour": {
            "name": "from_contour",
            "location": 78,
            "return": [],
            "arguments": {
                "cls": [],
                "contour_raw": []
            }
        },
        "Rect.tr": {
            "name": "tr",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rect.bl": {
            "name": "bl",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rect.br": {
            "name": "br",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rect.center": {
            "name": "center",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rect.perimeter": {
            "name": "perimeter",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rect.area": {
            "name": "area",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RotatedRect.nt_serialize": {
            "name": "nt_serialize",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RotatedRect.from_params": {
            "name": "from_params",
            "location": 118,
            "return": [],
            "arguments": {
                "cls": [],
                "center": [],
                "size": [],
                "angle": []
            }
        },
        "RotatedRect.from_contour": {
            "name": "from_contour",
            "location": 128,
            "return": [],
            "arguments": {
                "cls": [],
                "contour_raw": []
            }
        },
        "RotatedRect.box_points": {
            "name": "box_points",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RotatedRect.perimeter": {
            "name": "perimeter",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RotatedRect.area": {
            "name": "area",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RotatedRect.vertical_angle": {
            "name": "vertical_angle",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Corners.nt_serialize": {
            "name": "nt_serialize",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Corners.to_matrix": {
            "name": "to_matrix",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Corners.calculate_pose": {
            "name": "calculate_pose",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "object_points": [],
                "camera_matrix": [],
                "distortion_coefficients": []
            }
        },
        "Pose3D.nt_serialize": {
            "name": "nt_serialize",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pose3D.position_2d": {
            "name": "position_2d",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "tilt_angle": [
                    "float"
                ]
            }
        },
        "Pose3D.object_to_image_points": {
            "name": "object_to_image_points",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "obj_points": [],
                "camera_matrix": [],
                "distortion_coefficients": []
            }
        },
        "Circles.nt_serialize": {
            "name": "nt_serialize",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Segments.nt_serialize": {
            "name": "nt_serialize",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "opensight-master/opsi/util/cv/__init__.py": {},
    "opensight-master/opsi/util/cv/cuda/wrappers.py": {
        "CudaThresholdWrapper.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "lower": [],
                "upper": []
            }
        },
        "CudaThresholdWrapper.update_kernel": {
            "name": "update_kernel",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "lower": [],
                "upper": []
            }
        },
        "CudaThresholdWrapper.compile_kernel": {
            "name": "compile_kernel",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "lower": [],
                "upper": []
            }
        },
        "CudaThresholdWrapper.apply": {
            "name": "apply",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "source_array": []
            }
        },
        "CudaBlurWrapper.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "radius": []
            }
        },
        "CudaBlurWrapper.update_radius": {
            "name": "update_radius",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "radius": []
            }
        },
        "CudaBlurWrapper.apply": {
            "name": "apply",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "source_array": []
            }
        },
        "CudaThresholdAndBlurWrapper.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "lower": [],
                "upper": [],
                "radius": []
            }
        },
        "CudaThresholdAndBlurWrapper.update_radius": {
            "name": "update_radius",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "radius": []
            }
        },
        "CudaThresholdAndBlurWrapper.update_kernel": {
            "name": "update_kernel",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "lower": [],
                "upper": []
            }
        },
        "CudaThresholdAndBlurWrapper.compile_kernel": {
            "name": "compile_kernel",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "lower": [],
                "upper": []
            }
        },
        "CudaThresholdAndBlurWrapper.apply": {
            "name": "apply",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "source_array": []
            }
        },
        "CudaGreenMinusRedWrapper.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "thresh": []
            }
        },
        "CudaGreenMinusRedWrapper.update_kernel": {
            "name": "update_kernel",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "thresh": []
            }
        },
        "CudaGreenMinusRedWrapper.compile_kernel": {
            "name": "compile_kernel",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "thresh": []
            }
        },
        "CudaGreenMinusRedWrapper.apply": {
            "name": "apply",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "source_array": []
            }
        }
    },
    "opensight-master/opsi/webserver/api.py": {
        "Api.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "parent_app": [],
                "program": [],
                "prefix": []
            }
        },
        "Api.importerror_handler": {
            "name": "importerror_handler",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "exc": []
            }
        },
        "Api.read_funcs": {
            "name": "read_funcs",
            "location": 49,
            "return": [
                "SchemaF"
            ],
            "arguments": {
                "self": []
            }
        },
        "Api.read_nodes": {
            "name": "read_nodes",
            "location": 52,
            "return": [
                "NodeTreeN"
            ],
            "arguments": {
                "self": []
            }
        },
        "Api.save_nodes": {
            "name": "save_nodes",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Api.save_calibration": {
            "name": "save_calibration",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Api.upgrade": {
            "name": "upgrade",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "file": [
                    "UploadFile"
                ]
            }
        },
        "Api.shutdown": {
            "name": "shutdown",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Api.restart": {
            "name": "restart",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Api.shutdown_host": {
            "name": "shutdown_host",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Api.restart_host": {
            "name": "restart_host",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Api.profile": {
            "name": "profile",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "profile": [
                    "int"
                ]
            }
        },
        "Api.network": {
            "name": "network",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "opensight-master/opsi/webserver/app.py": {
        "WebServer.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "program": [],
                "frontend": [
                    "str"
                ],
                "port": [
                    "int"
                ],
                "prefix": []
            }
        },
        "WebServer.make_hooks": {
            "name": "make_hooks",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebServer.trailingslash_redirect": {
            "name": "trailingslash_redirect",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "WebServer.get_funcs": {
            "name": "get_funcs",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebServer.get_nodes": {
            "name": "get_nodes",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebServer.set_nodes": {
            "name": "set_nodes",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str"
                ]
            }
        }
    },
    "opensight-master/opsi/webserver/schema.py": {
        "Network.team_formatter": {
            "name": "team_formatter",
            "location": 81,
            "return": [],
            "arguments": {
                "cls": [],
                "team": []
            }
        },
        "Network.team_str": {
            "name": "team_str",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Network.static_ext_str_formatter": {
            "name": "static_ext_str_formatter",
            "location": 97,
            "return": [],
            "arguments": {
                "cls": [],
                "static_ext": []
            }
        }
    },
    "opensight-master/opsi/webserver/serialize.py": {
        "_rangetype_serialize": {
            "name": "_rangetype_serialize",
            "location": 33,
            "return": [],
            "arguments": {
                "type": []
            }
        },
        "_slide_serialize": {
            "name": "_slide_serialize",
            "location": 40,
            "return": [],
            "arguments": {
                "type": []
            }
        },
        "_tuple_serialize": {
            "name": "_tuple_serialize",
            "location": 47,
            "return": [],
            "arguments": {
                "type": []
            }
        },
        "get_type": {
            "name": "get_type",
            "location": 80,
            "return": [
                "InputOutputF"
            ],
            "arguments": {
                "_type": [
                    "Type"
                ]
            }
        },
        "get_field_type": {
            "name": "get_field_type",
            "location": 99,
            "return": [
                "InputOutputF"
            ],
            "arguments": {
                "field": []
            }
        },
        "get_types": {
            "name": "get_types",
            "location": 106,
            "return": [],
            "arguments": {
                "types": []
            }
        },
        "get_settings_types": {
            "name": "get_settings_types",
            "location": 115,
            "return": [],
            "arguments": {
                "types": []
            }
        },
        "_serialize_funcs": {
            "name": "_serialize_funcs",
            "location": 124,
            "return": [
                "List[FunctionF]"
            ],
            "arguments": {
                "funcs": [
                    "Dict[(str, Type[Function])]"
                ]
            }
        },
        "_serialize_modules": {
            "name": "_serialize_modules",
            "location": 137,
            "return": [
                "List[ModuleF]"
            ],
            "arguments": {
                "modules": [
                    "Dict[(str, ModuleItem)]"
                ]
            }
        },
        "export_manager": {
            "name": "export_manager",
            "location": 148,
            "return": [
                "SchemaF"
            ],
            "arguments": {
                "manager": [
                    "Manager"
                ]
            }
        },
        "_prune_factory": {
            "name": "_prune_factory",
            "location": 159,
            "return": [],
            "arguments": {
                "inp": []
            }
        },
        "_serialize_settings": {
            "name": "_serialize_settings",
            "location": 167,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "settings": []
            }
        },
        "_serialize_link": {
            "name": "_serialize_link",
            "location": 174,
            "return": [
                "Optional[LinkN]"
            ],
            "arguments": {
                "link": [
                    "Optional[Link]"
                ]
            }
        },
        "_serialize_input": {
            "name": "_serialize_input",
            "location": 186,
            "return": [
                "InputN"
            ],
            "arguments": {
                "link": [
                    "Optional[Link]"
                ]
            }
        },
        "export_nodetree": {
            "name": "export_nodetree",
            "location": 198,
            "return": [
                "NodeTreeN"
            ],
            "arguments": {
                "pipeline": [
                    "Pipeline"
                ]
            }
        },
        "_process_node_links": {
            "name": "_process_node_links",
            "location": 265,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "program": [],
                "node": [
                    "NodeN"
                ],
                "ids": []
            }
        },
        "_process_widget": {
            "name": "_process_widget",
            "location": 305,
            "return": [],
            "arguments": {
                "type": [
                    "Type"
                ],
                "val": []
            }
        },
        "_process_node_inputs": {
            "name": "_process_node_inputs",
            "location": 317,
            "return": [],
            "arguments": {
                "program": [],
                "node": [
                    "NodeN"
                ],
                "ids": []
            }
        },
        "_process_node_settings": {
            "name": "_process_node_settings",
            "location": 332,
            "return": [],
            "arguments": {
                "program": [],
                "node": [
                    "NodeN"
                ]
            }
        },
        "_remove_unneeded_nodes": {
            "name": "_remove_unneeded_nodes",
            "location": 402,
            "return": [
                "Tuple[(NodeTreeN, bool)]"
            ],
            "arguments": {
                "program": [],
                "nodetree": [
                    "NodeTreeN"
                ]
            }
        },
        "import_nodetree": {
            "name": "import_nodetree",
            "location": 468,
            "return": [],
            "arguments": {
                "program": [],
                "nodetree": [
                    "NodeTreeN"
                ],
                "force_save": [
                    "bool"
                ]
            }
        },
        "NodeTreeImportError.__init__": {
            "name": "__init__",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "program": [],
                "node": [
                    "NodeN"
                ],
                "msg": []
            }
        }
    },
    "opensight-master/opsi/webserver/test.py": {
        "WebserverTest.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "WebserverTest._ensure_client": {
            "name": "_ensure_client",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebserverTest.request": {
            "name": "request",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "method": [],
                "path": [],
                "data": []
            }
        },
        "WebserverTest.get": {
            "name": "get",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "WebserverTest.post": {
            "name": "post",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "data": []
            }
        }
    },
    "opensight-master/opsi/webserver/__init__.py": {}
}
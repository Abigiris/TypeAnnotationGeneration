{
    "pacs-master/functional_tests.py": {
        "_find_root": {
            "name": "_find_root",
            "location": 393,
            "return": [],
            "arguments": {
                "acc_list": []
            }
        },
        "_assert_contains": {
            "name": "_assert_contains",
            "location": 398,
            "return": [],
            "arguments": {
                "list_": [],
                "key": [],
                "value": []
            }
        },
        "_assert_not_contains": {
            "name": "_assert_not_contains",
            "location": 405,
            "return": [],
            "arguments": {
                "list_": [],
                "key": [],
                "value": []
            }
        },
        "_select_by": {
            "name": "_select_by",
            "location": 411,
            "return": [],
            "arguments": {
                "list_": [],
                "key": [],
                "value": []
            }
        },
        "FunctionalTests.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionalTests.assert_response_status_okay": {
            "name": "assert_response_status_okay",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "resp": []
            }
        },
        "FunctionalTests.get_json": {
            "name": "get_json",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "FunctionalTests.post_json": {
            "name": "post_json",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "json": []
            }
        },
        "FunctionalTests.patch_json": {
            "name": "patch_json",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "json": []
            }
        },
        "FunctionalTests.test_unlogged_user_cant_make_queries": {
            "name": "test_unlogged_user_cant_make_queries",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionalTests.test_creates_an_account_hierarchy": {
            "name": "test_creates_an_account_hierarchy",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionalTests.test_user_changes_name_of_account": {
            "name": "test_user_changes_name_of_account",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionalTests.test_user_changes_account_hierarchy": {
            "name": "test_user_changes_account_hierarchy",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionalTests.test_first_transaction": {
            "name": "test_first_transaction",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionalTests.test_check_balance_and_add_transaction": {
            "name": "test_check_balance_and_add_transaction",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionalTests.test_get_account_journal": {
            "name": "test_get_account_journal",
            "location": 303,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_TestRequests.get": {
            "name": "get",
            "location": 427,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "_TestRequests.post": {
            "name": "post",
            "location": 430,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "json": []
            }
        },
        "_TestRequests.patch": {
            "name": "patch",
            "location": 437,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "json": []
            }
        },
        "_TestRequests.delete": {
            "name": "delete",
            "location": 444,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        }
    },
    "pacs-master/manage.py": {},
    "pacs-master/tasks.py": {
        "_run_pytest": {
            "name": "_run_pytest",
            "location": 60,
            "return": [],
            "arguments": {
                "c": [],
                "opts": []
            }
        },
        "_populate_db": {
            "name": "_populate_db",
            "location": 64,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "prepare_virtualenv": {
            "name": "prepare_virtualenv",
            "location": 78,
            "return": [],
            "arguments": {
                "c": [],
                "path": [],
                "force": []
            }
        },
        "unit_test": {
            "name": "unit_test",
            "location": 93,
            "return": [],
            "arguments": {
                "c": [],
                "opts": []
            }
        },
        "func_test": {
            "name": "func_test",
            "location": 99,
            "return": [],
            "arguments": {
                "c": [],
                "opts": []
            }
        },
        "test": {
            "name": "test",
            "location": 105,
            "return": [],
            "arguments": {
                "c": [],
                "opts": []
            }
        },
        "populate_db": {
            "name": "populate_db",
            "location": 111,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "runserver": {
            "name": "runserver",
            "location": 117,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "migrate": {
            "name": "migrate",
            "location": 124,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "PacsContext.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Context"
                ]
            }
        },
        "PacsContext.run": {
            "name": "run",
            "location": 25,
            "return": [
                "Result"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "str"
                ],
                "pty": [
                    "bool"
                ]
            }
        },
        "PacsContext.cd": {
            "name": "cd",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "dir_": [
                    "str"
                ]
            }
        },
        "PacsContext.prefix": {
            "name": "prefix",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "cmd": [
                    "str"
                ]
            }
        },
        "PacsContext.run_manage": {
            "name": "run_manage",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "cmd": [
                    "str"
                ],
                "pty": [
                    "bool"
                ]
            }
        },
        "PacsTask.__call__": {
            "name": "__call__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Context"
                ]
            }
        }
    },
    "pacs-master/accounts/apps.py": {},
    "pacs-master/accounts/journal.py": {
        "Journal.get_balances": {
            "name": "get_balances",
            "location": 27,
            "return": [
                "List[Balance]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pacs-master/accounts/models.py": {
        "get_root_acc": {
            "name": "get_root_acc",
            "location": 128,
            "return": [
                "Account"
            ],
            "arguments": {}
        },
        "get_currency_price_change_rebalance_acc": {
            "name": "get_currency_price_change_rebalance_acc",
            "location": 133,
            "return": [
                "Account"
            ],
            "arguments": {}
        },
        "AccountFactory.__call__": {
            "name": "__call__",
            "location": 24,
            "return": [
                "Account"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "acc_type": [
                    "AccTypeEnum"
                ],
                "parent": [
                    "Account"
                ]
            }
        },
        "AccountFactory._validate_acc_type_obj": {
            "name": "_validate_acc_type_obj",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "acc_type_obj": []
            }
        },
        "Account.get_name": {
            "name": "get_name",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Account.set_name": {
            "name": "set_name",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str"
                ]
            }
        },
        "Account.get_parent": {
            "name": "get_parent",
            "location": 82,
            "return": [
                "Account"
            ],
            "arguments": {
                "self": []
            }
        },
        "Account.set_parent": {
            "name": "set_parent",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Account"
                ]
            }
        },
        "Account.get_acc_type": {
            "name": "get_acc_type",
            "location": 96,
            "return": [
                "AccTypeEnum"
            ],
            "arguments": {
                "self": []
            }
        },
        "Account.allows_children": {
            "name": "allows_children",
            "location": 102,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Account.allows_movements": {
            "name": "allows_movements",
            "location": 107,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pacs-master/accounts/serializers.py": {
        "AccTypeField.to_internal_value": {
            "name": "to_internal_value",
            "location": 14,
            "return": [
                "AccTypeEnum"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str"
                ]
            }
        },
        "AccTypeField.to_representation": {
            "name": "to_representation",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "AccTypeEnum"
                ]
            }
        },
        "AccountSerializer.create": {
            "name": "create",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "validated_data": []
            }
        },
        "AccountSerializer.update": {
            "name": "update",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "validated_data": []
            }
        }
    },
    "pacs-master/accounts/views.py": {
        "AccountViewSet.journal": {
            "name": "journal",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "pk": []
            }
        },
        "AccountViewSet.journal.get_transaction_base_qset": {
            "name": "get_transaction_base_qset",
            "location": 19,
            "return": [],
            "arguments": {}
        }
    },
    "pacs-master/accounts/__init__.py": {},
    "pacs-master/accounts/management/commands/populate_accounts.py": {
        "_populate_account": {
            "name": "_populate_account",
            "location": 36,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pacs-master/accounts/migrations/0001_initial.py": {},
    "pacs-master/accounts/migrations/__init__.py": {},
    "pacs-master/accounts/tests/factories.py": {
        "AccountTestFactory._create": {
            "name": "_create",
            "location": 21,
            "return": [],
            "arguments": {
                "cls": [],
                "model_class": []
            }
        }
    },
    "pacs-master/accounts/tests/test_accounts_journal.py": {
        "TestJournal.gen_transaction_mock": {
            "name": "gen_transaction_mock",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "money_for_account": []
            }
        },
        "TestJournal.test_get_balances": {
            "name": "test_get_balances",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pacs-master/accounts/tests/test_accounts_management.py": {
        "PopulateAccountTestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PopulateAccountTestCase.test_account_type_populator": {
            "name": "test_account_type_populator",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PopulateAccountTestCase.test_account_populator": {
            "name": "test_account_populator",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pacs-master/accounts/tests/test_accounts_models.py": {
        "AccountsModelTestCase.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAccountFactory.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAccountFactory.update_data": {
            "name": "update_data",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAccountFactory.call": {
            "name": "call",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAccountFactory.test_base_creation": {
            "name": "test_base_creation",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAccountFactory.test_invalid_account_type_raises_err": {
            "name": "test_invalid_account_type_raises_err",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAccountFactory.test_invalid_parent_raises_err": {
            "name": "test_invalid_parent_raises_err",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAccountFactory.test_parent_cant_be_null": {
            "name": "test_parent_cant_be_null",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAccount.test_get_acc_type": {
            "name": "test_get_acc_type",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pacs-master/accounts/tests/test_accounts_serializers.py": {
        "TestAccTypeField.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAccTypeField.test_to_internal_value": {
            "name": "test_to_internal_value",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAccTypeField.test_to_internal_value_wrong_raises_validation_error": {
            "name": "test_to_internal_value_wrong_raises_validation_error",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAccTypeField.test_to_representation": {
            "name": "test_to_representation",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAccountSerializer_creation.setUp": {
            "name": "setUp",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAccountSerializer_creation.create": {
            "name": "create",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAccountSerializer_creation.test_create_account": {
            "name": "test_create_account",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAccountSerializer_creation.test_create_acc_repeated_name_raises_validation_error": {
            "name": "test_create_acc_repeated_name_raises_validation_error",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAccountSerializer_creation.test_create_acc_pk_is_ignored_if_parsed": {
            "name": "test_create_acc_pk_is_ignored_if_parsed",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAccountSerializer_update.setUp": {
            "name": "setUp",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAccountSerializer_update.update": {
            "name": "update",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAccountSerializer_update.test_acc_type_is_imutable": {
            "name": "test_acc_type_is_imutable",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAccountSerializer_update.test_acc_type_does_not_raises_if_equal_to_current": {
            "name": "test_acc_type_does_not_raises_if_equal_to_current",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAccountSerializer_update.test_update_name_and_parent": {
            "name": "test_update_name_and_parent",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAccountSerializer_update.test_update_parent_that_cant_have_child_raises_err": {
            "name": "test_update_parent_that_cant_have_child_raises_err",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJournalSerializer.test_serializes_account_as_pk": {
            "name": "test_serializes_account_as_pk",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJournalSerializer.test_serializes_initial_balance": {
            "name": "test_serializes_initial_balance",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "m_to_representation": []
            }
        },
        "TestJournalSerializer.test_serializes_transactions": {
            "name": "test_serializes_transactions",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "m_to_representation": []
            }
        },
        "TestJournalSerializer.test_serializes_balances_from_get_balances": {
            "name": "test_serializes_balances_from_get_balances",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "m_to_representation": []
            }
        }
    },
    "pacs-master/accounts/tests/test_accounts_views.py": {
        "AccountViewTestCase.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AccountViewTestCase.populate_accounts": {
            "name": "populate_accounts",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAccountViewset.test_url_resolves_to_view_function": {
            "name": "test_url_resolves_to_view_function",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAccountViewset.test_url_for_specific_account_resolves_to_view_func": {
            "name": "test_url_for_specific_account_resolves_to_view_func",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAccountViewset.test_get_count_queries": {
            "name": "test_get_count_queries",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAccountViewset.test_get_for_list_of_accounts": {
            "name": "test_get_for_list_of_accounts",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAccountViewset.test_get_for_single_account": {
            "name": "test_get_for_single_account",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAccountViewset.test_post_for_new_account": {
            "name": "test_post_for_new_account",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAccountViewset.test_post_for_new_account_with_wrong_name": {
            "name": "test_post_for_new_account_with_wrong_name",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAccountViewset.test_patch_account": {
            "name": "test_patch_account",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAccountViewset.test_patch_account_type_raises_error": {
            "name": "test_patch_account_type_raises_error",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAccountViewset.test_delete_account": {
            "name": "test_delete_account",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAccountViewset.test_get_journal": {
            "name": "test_get_journal",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "m_Transaction_objects": [],
                "m_Journal": [],
                "m_JournalSerializer": []
            }
        }
    },
    "pacs-master/accounts/tests/__init__.py": {},
    "pacs-master/common/management.py": {
        "TablePopulator.__call__": {
            "name": "__call__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pacs-master/common/models.py": {
        "new_money_quantity_field": {
            "name": "new_money_quantity_field",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "new_price_field": {
            "name": "new_price_field",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "full_clean_and_save": {
            "name": "full_clean_and_save",
            "location": 42,
            "return": [
                "m.Model"
            ],
            "arguments": {
                "x": [
                    "m.Model"
                ]
            }
        },
        "list_to_queryset": {
            "name": "list_to_queryset",
            "location": 48,
            "return": [
                "m.QuerySet"
            ],
            "arguments": {
                "lst": [
                    "List[m.Model]"
                ]
            }
        },
        "NameField.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pacs-master/common/pagination.py": {
        "OptionalPageNumberPaginator.paginate_queryset": {
            "name": "paginate_queryset",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "queryset": [],
                "request": [],
                "view": []
            }
        },
        "OptionalPageNumberPaginator.get_paginated_response": {
            "name": "get_paginated_response",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "OptionalPageNumberPaginator.to_html": {
            "name": "to_html",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptionalPageNumberPaginator.get_results": {
            "name": "get_results",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "pacs-master/common/test.py": {
        "PacsTestCase.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pacs-master/common/utils.py": {
        "utcdatetime": {
            "name": "utcdatetime",
            "location": 9,
            "return": [
                "datetime"
            ],
            "arguments": {}
        },
        "decimals_equal": {
            "name": "decimals_equal",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "one": [
                    "Decimal"
                ],
                "two": [
                    "Decimal"
                ]
            }
        },
        "round_decimal": {
            "name": "round_decimal",
            "location": 17,
            "return": [
                "Decimal"
            ],
            "arguments": {
                "x": [
                    "Decimal"
                ]
            }
        }
    },
    "pacs-master/common/__init__.py": {},
    "pacs-master/common/tests/test_common.py": {
        "TestCommon.test_decimals_equal_equal": {
            "name": "test_decimals_equal_equal",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCommon.test_decimals_equal_not_equal_limit": {
            "name": "test_decimals_equal_not_equal_limit",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCommon.test_decimals_equal_not_equal": {
            "name": "test_decimals_equal_not_equal",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pacs-master/common/tests/test_common_pagination.py": {
        "TestOptionalPageNumberPaginator.test_get_paginated_response_delegates": {
            "name": "test_get_paginated_response_delegates",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOptionalPageNumberPaginator.test_get_to_html_delegates": {
            "name": "test_get_to_html_delegates",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOptionalPageNumberPaginator.test_get_results_delegates": {
            "name": "test_get_results_delegates",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOptionalPageNumberPaginator.test_paginate_queryset_delegates_if_page": {
            "name": "test_paginate_queryset_delegates_if_page",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pacs-master/common/tests/__init__.py": {},
    "pacs-master/currencies/apps.py": {},
    "pacs-master/currencies/models.py": {
        "get_default_currency": {
            "name": "get_default_currency",
            "location": 46,
            "return": [
                "Currency"
            ],
            "arguments": {}
        },
        "CurrencyFactory.__call__": {
            "name": "__call__",
            "location": 17,
            "return": [
                "Currency"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Currency.get_name": {
            "name": "get_name",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pacs-master/currencies/money.py": {
        "Money.__eq__": {
            "name": "__eq__",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Balance.get_for_currency": {
            "name": "get_for_currency",
            "location": 34,
            "return": [
                "Money"
            ],
            "arguments": {
                "self": [],
                "currency": [
                    "Currency"
                ]
            }
        },
        "Balance.add_money": {
            "name": "add_money",
            "location": 41,
            "return": [
                "Balance"
            ],
            "arguments": {
                "self": [],
                "money": [
                    "Money"
                ]
            }
        },
        "Balance.add_moneys": {
            "name": "add_moneys",
            "location": 45,
            "return": [
                "Balance"
            ],
            "arguments": {
                "self": [],
                "moneys": [
                    "List[Money]"
                ]
            }
        },
        "Balance.get_currencies": {
            "name": "get_currencies",
            "location": 51,
            "return": [
                "Set[Currency]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Balance.get_moneys": {
            "name": "get_moneys",
            "location": 55,
            "return": [
                "List[Money]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Balance.__eq__": {
            "name": "__eq__",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        }
    },
    "pacs-master/currencies/serializers.py": {
        "MoneySerializer.create": {
            "name": "create",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "validated_data": []
            }
        },
        "BalanceSerializer.to_representation": {
            "name": "to_representation",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Balance"
                ]
            }
        }
    },
    "pacs-master/currencies/views.py": {},
    "pacs-master/currencies/__init__.py": {},
    "pacs-master/currencies/management/commands/populate_currencies.py": {
        "Command.handle": {
            "name": "handle",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pacs-master/currencies/migrations/0001_initial.py": {},
    "pacs-master/currencies/migrations/0002_auto_20181201_1228.py": {},
    "pacs-master/currencies/migrations/__init__.py": {},
    "pacs-master/currencies/tests/factories.py": {},
    "pacs-master/currencies/tests/test_currency_models.py": {
        "CurrencyModelTestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCurrencyFactory.test_base": {
            "name": "test_base",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCurrency.test_get_name": {
            "name": "test_get_name",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCurrency.test_currency_base": {
            "name": "test_currency_base",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFun_get_default_currency.test_base": {
            "name": "test_base",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pacs-master/currencies/tests/test_currency_money.py": {
        "TestBalance.test_get_for_currency_empty": {
            "name": "test_get_for_currency_empty",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBalance.test_get_for_currency_not_present_return_zero": {
            "name": "test_get_for_currency_not_present_return_zero",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBalance.test_get_for_currency_present_two_movements": {
            "name": "test_get_for_currency_present_two_movements",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBalance.test_get_for_currencies_multiple_currencies": {
            "name": "test_get_for_currencies_multiple_currencies",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBalance.test_add_money_zero": {
            "name": "test_add_money_zero",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBalance.test_add_money_two_long": {
            "name": "test_add_money_two_long",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBalance.test_get_currencies_base": {
            "name": "test_get_currencies_base",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBalance.test_equal_true": {
            "name": "test_equal_true",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBalance.test_equal_false_diff_currencies": {
            "name": "test_equal_false_diff_currencies",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBalance.test_equal_false_diff_quantities": {
            "name": "test_equal_false_diff_quantities",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMoney.test_base": {
            "name": "test_base",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pacs-master/currencies/tests/test_currency_serializers.py": {
        "TestMoneySerializer.test_create_base": {
            "name": "test_create_base",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCurrencySerializer_create.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCurrencySerializer_create.create": {
            "name": "create",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCurrencySerializer_create.test_base": {
            "name": "test_base",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCurrencySerializer_create.test_imutable_read_only": {
            "name": "test_imutable_read_only",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCurrencySerializer_create.test_repeated_name_raises_err": {
            "name": "test_repeated_name_raises_err",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBalanceSerializer.test_serializes_as_list_of_moneys": {
            "name": "test_serializes_as_list_of_moneys",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "m_to_representation": []
            }
        }
    },
    "pacs-master/currencies/tests/test_currency_views.py": {
        "CurrencyViewTestCase.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCurrencyView.test_url_resolves_to_view_function": {
            "name": "test_url_resolves_to_view_function",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCurrencyView.test_url_for_specific_currency_resolves_to_view": {
            "name": "test_url_for_specific_currency_resolves_to_view",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCurrencyView.test_get_currencies": {
            "name": "test_get_currencies",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCurrencyView.test_get_single_currency": {
            "name": "test_get_single_currency",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCurrencyView.test_post_single_currency": {
            "name": "test_post_single_currency",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pacs-master/currencies/tests/test_management_commands.py": {
        "TestPopulateCurrencies.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPopulateCurrencies.test_base": {
            "name": "test_base",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPopulateCurrencies.test_skip": {
            "name": "test_skip",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pacs-master/currencies/tests/__init__.py": {},
    "pacs-master/deploy_tools/fabfile.py": {
        "deploy": {
            "name": "deploy",
            "location": 10,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "_install_server_deps": {
            "name": "_install_server_deps",
            "location": 54,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "_create_pacs_user": {
            "name": "_create_pacs_user",
            "location": 62,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "_upload_env_file": {
            "name": "_upload_env_file",
            "location": 73,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "_add_pub_key_to_allowed_keys": {
            "name": "_add_pub_key_to_allowed_keys",
            "location": 80,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "_create_directories": {
            "name": "_create_directories",
            "location": 94,
            "return": [],
            "arguments": {
                "c": [],
                "dirs": []
            }
        },
        "_git_clone": {
            "name": "_git_clone",
            "location": 99,
            "return": [],
            "arguments": {
                "c": [],
                "repo_url": [],
                "commit": [],
                "source_folder": []
            }
        },
        "_prepare_virtualenv": {
            "name": "_prepare_virtualenv",
            "location": 108,
            "return": [],
            "arguments": {
                "c": [],
                "venv_folder": [],
                "source_folder": []
            }
        },
        "_prepare_static_files": {
            "name": "_prepare_static_files",
            "location": 115,
            "return": [],
            "arguments": {
                "c": [],
                "venv_folder": [],
                "source_folder": []
            }
        },
        "_update_db": {
            "name": "_update_db",
            "location": 120,
            "return": [],
            "arguments": {
                "c": [],
                "venv_folder": [],
                "source_folder": []
            }
        },
        "_setup_nginx": {
            "name": "_setup_nginx",
            "location": 127,
            "return": [],
            "arguments": {
                "c": [],
                "source_folder": []
            }
        },
        "_setup_gunicorn": {
            "name": "_setup_gunicorn",
            "location": 146,
            "return": [],
            "arguments": {
                "c": [],
                "source_folder": []
            }
        },
        "_setup_db_backup": {
            "name": "_setup_db_backup",
            "location": 158,
            "return": [],
            "arguments": {
                "c": [],
                "source_folder": []
            }
        },
        "_create_pacs_user._pacs_user_exists": {
            "name": "_pacs_user_exists",
            "location": 65,
            "return": [],
            "arguments": {
                "c": []
            }
        }
    },
    "pacs-master/movements/apps.py": {},
    "pacs-master/movements/filters.py": {
        "TransactionFilterSet.filter_account": {
            "name": "filter_account",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "queryset": [],
                "name": [],
                "account_id": []
            }
        }
    },
    "pacs-master/movements/models.py": {
        "TransactionFactory.__call__": {
            "name": "__call__",
            "location": 26,
            "return": [
                "Transaction"
            ],
            "arguments": {
                "self": [],
                "description": [
                    "str"
                ],
                "date_": [
                    "datetime.date"
                ],
                "movements_specs": [
                    "List[MovementSpec]"
                ]
            }
        },
        "TransactionQuerySet.filter_by_account": {
            "name": "filter_by_account",
            "location": 43,
            "return": [
                "TransactionQuerySet"
            ],
            "arguments": {
                "self": [],
                "acc": [
                    "Account"
                ]
            }
        },
        "Transaction.get_description": {
            "name": "get_description",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transaction.set_description": {
            "name": "set_description",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str"
                ]
            }
        },
        "Transaction.get_date": {
            "name": "get_date",
            "location": 80,
            "return": [
                "datetime.date"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transaction.set_date": {
            "name": "set_date",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "datetime.date"
                ]
            }
        },
        "Transaction.get_movements_specs": {
            "name": "get_movements_specs",
            "location": 87,
            "return": [
                "List[MovementSpec]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transaction.get_moneys_for_account": {
            "name": "get_moneys_for_account",
            "location": 93,
            "return": [
                "List[Money]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "Account"
                ]
            }
        },
        "Transaction.set_movements": {
            "name": "set_movements",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "movements_specs": [
                    "List[MovementSpec]"
                ]
            }
        },
        "Transaction._convert_specs": {
            "name": "_convert_specs",
            "location": 114,
            "return": [
                "MovementSpec"
            ],
            "arguments": {
                "self": [],
                "mov_spec": [
                    "MovementSpec"
                ]
            }
        },
        "MovementSpec._account_validator": {
            "name": "_account_validator",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "attribute": [],
                "account": []
            }
        },
        "MovementSpec.from_movement": {
            "name": "from_movement",
            "location": 140,
            "return": [
                "MovementSpec"
            ],
            "arguments": {
                "cls": [],
                "mov": [
                    "Movement"
                ]
            }
        },
        "Movement.get_date": {
            "name": "get_date",
            "location": 171,
            "return": [
                "datetime.date"
            ],
            "arguments": {
                "self": []
            }
        },
        "Movement.get_account": {
            "name": "get_account",
            "location": 174,
            "return": [
                "Account"
            ],
            "arguments": {
                "self": []
            }
        },
        "Movement.get_transaction": {
            "name": "get_transaction",
            "location": 177,
            "return": [
                "Transaction"
            ],
            "arguments": {
                "self": []
            }
        },
        "Movement.get_money": {
            "name": "get_money",
            "location": 180,
            "return": [
                "Money"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactionMovementSpecListValidator.fail": {
            "name": "fail",
            "location": 204,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "TransactionMovementSpecListValidator.validate": {
            "name": "validate",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "movement_specs": [
                    "List[MovementSpec]"
                ]
            }
        }
    },
    "pacs-master/movements/serializers.py": {
        "MovementSpecSerializer.create": {
            "name": "create",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "validated_data": []
            }
        },
        "TransactionSerializer.create": {
            "name": "create",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "validated_data": []
            }
        },
        "TransactionSerializer.update": {
            "name": "update",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "Transaction"
                ],
                "validated_data": []
            }
        }
    },
    "pacs-master/movements/views.py": {
        "_get_transaction_qset": {
            "name": "_get_transaction_qset",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "pacs-master/movements/__init__.py": {},
    "pacs-master/movements/migrations/0001_initial.py": {},
    "pacs-master/movements/migrations/__init__.py": {},
    "pacs-master/movements/tests/factories.py": {
        "TransactionTestFactory._create": {
            "name": "_create",
            "location": 37,
            "return": [],
            "arguments": {
                "cls": [],
                "model_class": []
            }
        },
        "MovementTestFactory.create_batch_qset": {
            "name": "create_batch_qset",
            "location": 51,
            "return": [
                "QuerySet"
            ],
            "arguments": {
                "cls": [],
                "n": [
                    "int"
                ]
            }
        }
    },
    "pacs-master/movements/tests/test_movements_filters.py": {
        "TestTransactionFilterSet.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionFilterSet.test_filter_by_account_id": {
            "name": "test_filter_by_account_id",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionFilterSet.test_filter_by_parent_account_id": {
            "name": "test_filter_by_parent_account_id",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionFilterSet.test_count_query_number_for_large_account_hierarchies": {
            "name": "test_count_query_number_for_large_account_hierarchies",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pacs-master/movements/tests/test_movements_models.py": {
        "MovementsModelsTestCase.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionQueryset_filter_by_account.test_base": {
            "name": "test_base",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionFactory.setUp": {
            "name": "setUp",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionFactory.data_update": {
            "name": "data_update",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionFactory.call": {
            "name": "call",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionFactory.test_base": {
            "name": "test_base",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionFactory.test_fails_if_movements_have_a_single_acc": {
            "name": "test_fails_if_movements_have_a_single_acc",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionFactory.test_fails_on_unbalanced_movements_and_single_account": {
            "name": "test_fails_on_unbalanced_movements_and_single_account",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionFactory.test_fails_if_duplicated_currency_account_pair": {
            "name": "test_fails_if_duplicated_currency_account_pair",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionModel.test_set_movements_base": {
            "name": "test_set_movements_base",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMovementSpec.test_from_movement": {
            "name": "test_from_movement",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMovementModel.test_get_money": {
            "name": "test_get_money",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pacs-master/movements/tests/test_movements_serializers.py": {
        "MovementsSerializersTestCase.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMovementSpecSerializer.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMovementSpecSerializer.create": {
            "name": "create",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMovementSpecSerializer.test_create_base": {
            "name": "test_create_base",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransactionSerializerTest.setUp": {
            "name": "setUp",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransactionSerializerTest.create": {
            "name": "create",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransactionSerializerTest.update": {
            "name": "update",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "TransactionSerializerTest.test_from_data_base": {
            "name": "test_from_data_base",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransactionSerializerTest.test_update_description": {
            "name": "test_update_description",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransactionSerializerTest.test_update_movements_specs": {
            "name": "test_update_movements_specs",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransactionSerializerTest.test_update_date": {
            "name": "test_update_date",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pacs-master/movements/tests/test_movements_views.py": {
        "MovementsViewsTestCase.populate_accounts": {
            "name": "populate_accounts",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionView.setUp": {
            "name": "setUp",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionView.test_url_resolves_to_view_function": {
            "name": "test_url_resolves_to_view_function",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionView.test_url_for_specific_transaction_resolves_to_view": {
            "name": "test_url_for_specific_transaction_resolves_to_view",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionView.test_get_transactions": {
            "name": "test_get_transactions",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionView.test_get_transactions_count_queries": {
            "name": "test_get_transactions_count_queries",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionView.test_get_transaction_with_pagination": {
            "name": "test_get_transaction_with_pagination",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionView.test_get_transaction_returns_in_chronological_order": {
            "name": "test_get_transaction_returns_in_chronological_order",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionView.test_get_transaction_filtered_by_account": {
            "name": "test_get_transaction_filtered_by_account",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionView.test_get_single_transaction": {
            "name": "test_get_single_transaction",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionView.test_post_with_account_that_does_not_allow_children_raises_err": {
            "name": "test_post_with_account_that_does_not_allow_children_raises_err",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionView.test_post_single_transaction": {
            "name": "test_post_single_transaction",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionView.test_post_transaction_with_empty_movements_returns_error": {
            "name": "test_post_transaction_with_empty_movements_returns_error",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionView.test_post_transaction_with_one_single_movements_returns_error": {
            "name": "test_post_transaction_with_one_single_movements_returns_error",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionView.test_post_single_account_raises_err": {
            "name": "test_post_single_account_raises_err",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionView.test_patch_transaction_with_single_currency_but_unmatched_values_err": {
            "name": "test_patch_transaction_with_single_currency_but_unmatched_values_err",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionView.test_patch_transaction": {
            "name": "test_patch_transaction",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionView.test_delete_transaction": {
            "name": "test_delete_transaction",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pacs-master/movements/tests/__init__.py": {},
    "pacs-master/pacs/settings.py": {},
    "pacs-master/pacs/urls.py": {},
    "pacs-master/pacs/wsgi.py": {},
    "pacs-master/pacs/__init__.py": {},
    "pacs-master/pacs_auth/middleware.py": {
        "PacsAuthMiddleware.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "get_response": []
            }
        },
        "PacsAuthMiddleware.__call__": {
            "name": "__call__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "pacs-master/pacs_auth/test_middlewares.py": {
        "TestPacsAuthMiddleware.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPacsAuthMiddleware.test_raises_403_if_token_is_not_present": {
            "name": "test_raises_403_if_token_is_not_present",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPacsAuthMiddleware.test_raises_403_if_token_is_incorrect": {
            "name": "test_raises_403_if_token_is_incorrect",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPacsAuthMiddleware.test_parses_request_if_token_is_set": {
            "name": "test_parses_request_if_token_is_set",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pacs-master/pacs_auth/__init__.py": {}
}
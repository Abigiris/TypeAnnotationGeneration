{
    "palu-main/palu/parser.py": {
        "_validate_recursive": {
            "name": "_validate_recursive",
            "location": 40,
            "return": [],
            "arguments": {
                "tree": [
                    "Tree"
                ],
                "node": [
                    "Node"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 48,
            "return": [
                "SourceFile"
            ],
            "arguments": {
                "source": [
                    "bytes"
                ]
            }
        },
        "PaluSyntaxError.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": [],
                "line": [],
                "column": []
            }
        },
        "Transformer.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transformer.transform": {
            "name": "transform",
            "location": 59,
            "return": [
                "SourceFile"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "Tree"
                ],
                "source": [
                    "bytes"
                ]
            }
        },
        "Transformer.transform_statement": {
            "name": "transform_statement",
            "location": 77,
            "return": [
                "PaluNode"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "TSNode"
                ],
                "source": [
                    "bytes"
                ]
            }
        },
        "Transformer.transform_mod": {
            "name": "transform_mod",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "TSNode"
                ],
                "source": [
                    "bytes"
                ]
            }
        },
        "Transformer.transform_declare_stmt": {
            "name": "transform_declare_stmt",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "TSNode"
                ],
                "source": [
                    "bytes"
                ]
            }
        },
        "Transformer.transform_external_stmt": {
            "name": "transform_external_stmt",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "TSNode"
                ],
                "source": [
                    "bytes"
                ]
            }
        },
        "Transformer.transform_while_stmt": {
            "name": "transform_while_stmt",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "TSNode"
                ],
                "source": [
                    "bytes"
                ]
            }
        },
        "Transformer.transform_if_stmt": {
            "name": "transform_if_stmt",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "TSNode"
                ],
                "source": [
                    "bytes"
                ]
            }
        },
        "Transformer.transform_return_stmt": {
            "name": "transform_return_stmt",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "TSNode"
                ],
                "source": [
                    "bytes"
                ]
            }
        },
        "Transformer.transform_type_alias": {
            "name": "transform_type_alias",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "TSNode"
                ],
                "source": [
                    "bytes"
                ]
            }
        },
        "Transformer.transform_expr": {
            "name": "transform_expr",
            "location": 209,
            "return": [
                "PaluNode"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "TSNode"
                ],
                "source": [
                    "bytes"
                ]
            }
        },
        "Transformer.transform_ident_expr": {
            "name": "transform_ident_expr",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "TSNode"
                ],
                "source": [
                    "bytes"
                ]
            }
        },
        "Transformer.transform_binary_expr": {
            "name": "transform_binary_expr",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "TSNode"
                ],
                "source": [
                    "bytes"
                ]
            }
        },
        "Transformer.transform_unary_expr": {
            "name": "transform_unary_expr",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "TSNode"
                ],
                "source": [
                    "bytes"
                ]
            }
        },
        "Transformer.transform_condition_expr": {
            "name": "transform_condition_expr",
            "location": 265,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "TSNode"
                ],
                "source": [
                    "bytes"
                ]
            }
        },
        "Transformer.transform_call_expr": {
            "name": "transform_call_expr",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "TSNode"
                ],
                "source": [
                    "bytes"
                ]
            }
        },
        "Transformer.transform_func_stmt": {
            "name": "transform_func_stmt",
            "location": 293,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "TSNode"
                ],
                "source": [
                    "bytes"
                ]
            }
        },
        "Transformer.transform_parenthesized_expr": {
            "name": "transform_parenthesized_expr",
            "location": 315,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "TSNode"
                ],
                "source": [
                    "bytes"
                ]
            }
        },
        "Transformer.transform_assignment_stmt": {
            "name": "transform_assignment_stmt",
            "location": 322,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "TSNode"
                ],
                "source": [
                    "bytes"
                ]
            }
        },
        "Transformer.transform_number_literal": {
            "name": "transform_number_literal",
            "location": 337,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "TSNode"
                ],
                "source": [
                    "bytes"
                ]
            }
        },
        "Transformer.transform_string_literal": {
            "name": "transform_string_literal",
            "location": 340,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "TSNode"
                ],
                "source": [
                    "bytes"
                ]
            }
        },
        "Transformer.transform_true_lit": {
            "name": "transform_true_lit",
            "location": 343,
            "return": [
                "BooleanLiteral"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "TSNode"
                ],
                "source": [
                    "bytes"
                ]
            }
        },
        "Transformer.transform_false_lit": {
            "name": "transform_false_lit",
            "location": 346,
            "return": [
                "BooleanLiteral"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "TSNode"
                ],
                "source": [
                    "bytes"
                ]
            }
        },
        "Transformer.transform_null_lit": {
            "name": "transform_null_lit",
            "location": 349,
            "return": [
                "NullLiteral"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "TSNode"
                ]
            }
        },
        "Transformer._transform_typed_ident": {
            "name": "_transform_typed_ident",
            "location": 352,
            "return": [
                "TypedIdent"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "TSNode"
                ],
                "source": [
                    "bytes"
                ]
            }
        },
        "Transformer._transform_codeblock": {
            "name": "_transform_codeblock",
            "location": 371,
            "return": [
                "Sequence[PaluNode]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "TSNode"
                ],
                "source": [
                    "bytes"
                ]
            }
        },
        "Transformer._transform_argument_list": {
            "name": "_transform_argument_list",
            "location": 374,
            "return": [
                "Sequence[PaluNode]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "TSNode"
                ],
                "source": [
                    "bytes"
                ]
            }
        },
        "Transformer._transform_params": {
            "name": "_transform_params",
            "location": 377,
            "return": [
                "Sequence[Union[(TypedIdent, str)]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "TSNode"
                ],
                "source": [
                    "bytes"
                ]
            }
        },
        "Transformer.get_text": {
            "name": "get_text",
            "location": 389,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "TSNode"
                ],
                "source": [
                    "bytes"
                ]
            }
        }
    },
    "palu-main/palu/transpiler.py": {
        "_Emitter.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Emitter.emit": {
            "name": "emit",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "this": [],
                "data": []
            }
        },
        "_Emitter.on": {
            "name": "on",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "_type": []
            }
        },
        "Transpiler.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transpiler.enter": {
            "name": "enter",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "scope": []
            }
        },
        "Transpiler.leave": {
            "name": "leave",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transpiler._emit": {
            "name": "_emit",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "Node"
                ]
            }
        },
        "Transpiler._write": {
            "name": "_write",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transpiler._transpile_source_file": {
            "name": "_transpile_source_file",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "SourceFile"
                ]
            }
        },
        "Transpiler._transpile_mod_declare": {
            "name": "_transpile_mod_declare",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "mod": [
                    "ModDeclare"
                ]
            }
        },
        "Transpiler._transpile_ident_expr": {
            "name": "_transpile_ident_expr",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "ident_expr": [
                    "IdentExpr"
                ]
            }
        },
        "Transpiler._transpile_number_literal": {
            "name": "_transpile_number_literal",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "literal": [
                    "NumberLiteral"
                ]
            }
        },
        "Transpiler._transpile_boolean_literal": {
            "name": "_transpile_boolean_literal",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "literal": [
                    "BooleanLiteral"
                ]
            }
        },
        "Transpiler._transpile_null_literal": {
            "name": "_transpile_null_literal",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "_": [
                    "NullLiteral"
                ]
            }
        },
        "Transpiler._transpile_string_literal": {
            "name": "_transpile_string_literal",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "literal": [
                    "StringLiteral"
                ]
            }
        },
        "Transpiler._transpile_declare_stmt": {
            "name": "_transpile_declare_stmt",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "decl": [
                    "DeclareStatement"
                ]
            }
        },
        "Transpiler._transpile_external_stmt": {
            "name": "_transpile_external_stmt",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "external_stmt": [
                    "ExternalStatement"
                ]
            }
        },
        "Transpiler._transpile_external_var": {
            "name": "_transpile_external_var",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "external_var_spec": [
                    "ExternalVariableSpec"
                ]
            }
        },
        "Transpiler._transpile_external_fn": {
            "name": "_transpile_external_fn",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "external_fn_spec": [
                    "ExternalFunctionSpec"
                ]
            }
        },
        "Transpiler._transpile_while_loop": {
            "name": "_transpile_while_loop",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "while_loop": [
                    "WhileLoop"
                ]
            }
        },
        "Transpiler._transpile_empty_stmt": {
            "name": "_transpile_empty_stmt",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "_": [
                    "EmptyStatement"
                ]
            }
        },
        "Transpiler._transpile_if_stmt": {
            "name": "_transpile_if_stmt",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "if_stmt": [
                    "If"
                ]
            }
        },
        "Transpiler._transpile_return_stmt": {
            "name": "_transpile_return_stmt",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "ret": [
                    "ReturnStatement"
                ]
            }
        },
        "Transpiler._transpile_func": {
            "name": "_transpile_func",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "fn": [
                    "Func"
                ]
            }
        },
        "Transpiler._transpile_call_expr": {
            "name": "_transpile_call_expr",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "call_expr": [
                    "CallExpr"
                ]
            }
        },
        "Transpiler._transpile_typed_ident": {
            "name": "_transpile_typed_ident",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "typed_ident": [
                    "TypedIdent"
                ]
            }
        },
        "Transpiler._transpile_type_alias_stmt": {
            "name": "_transpile_type_alias_stmt",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "stmt": [
                    "TypeAliasStatement"
                ]
            }
        },
        "Transpiler._transpile_parenthesized_expr": {
            "name": "_transpile_parenthesized_expr",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "expr": [
                    "ParenthesizedExpr"
                ]
            }
        },
        "Transpiler._transpile_binary_expr": {
            "name": "_transpile_binary_expr",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "bin_expr": [
                    "BinaryExpr"
                ]
            }
        },
        "Transpiler._transpile_unary_expr": {
            "name": "_transpile_unary_expr",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "unary": [
                    "UnaryExpr"
                ]
            }
        },
        "Transpiler._transpile_condition_expr": {
            "name": "_transpile_condition_expr",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "expr": [
                    "ConditionExpr"
                ]
            }
        },
        "Transpiler._transpile_assignment_expr": {
            "name": "_transpile_assignment_expr",
            "location": 231,
            "return": [],
            "arguments": {
                "self": [],
                "expr": [
                    "AssignmentExpr"
                ]
            }
        },
        "Transpiler.transpile": {
            "name": "transpile",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "Node"
                ]
            }
        },
        "_Emitter.on.wrapper": {
            "name": "wrapper",
            "location": 29,
            "return": [],
            "arguments": {
                "func": []
            }
        }
    },
    "palu-main/palu/__init__.py": {},
    "palu-main/palu/__main__.py": {
        "run": {
            "name": "run",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "palu-main/palu/ast/expr.py": {
        "TypedIdent.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ident": [
                    "str"
                ],
                "typing": [],
                "is_pointer": []
            }
        },
        "IdentExpr.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Tuple[(int, int)]"
                ],
                "end": [
                    "Tuple[(int, int)]"
                ]
            }
        },
        "BinaryExpr.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Tuple[(int, int)]"
                ],
                "end": [
                    "Tuple[(int, int)]"
                ],
                "op": [
                    "BinaryOp"
                ],
                "left": [
                    "Node"
                ],
                "right": [
                    "Node"
                ]
            }
        },
        "UnaryExpr.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Tuple[(int, int)]"
                ],
                "end": [
                    "Tuple[(int, int)]"
                ],
                "op": [
                    "UnaryOp"
                ],
                "expr": [
                    "Node"
                ]
            }
        },
        "ConditionExpr.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Tuple[(int, int)]"
                ],
                "end": [
                    "Tuple[(int, int)]"
                ],
                "condition": [
                    "Node"
                ],
                "consequence": [
                    "Node"
                ],
                "alternative": [
                    "Node"
                ]
            }
        },
        "CallExpr.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Tuple[(int, int)]"
                ],
                "end": [
                    "Tuple[(int, int)]"
                ],
                "ident": [
                    "IdentExpr"
                ]
            }
        },
        "ParenthesizedExpr.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Tuple[(int, int)]"
                ],
                "end": [
                    "Tuple[(int, int)]"
                ],
                "expr": [
                    "Node"
                ]
            }
        },
        "AssignmentExpr.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "start": [
                    "Tuple[(int, int)]"
                ],
                "end": [
                    "Tuple[(int, int)]"
                ],
                "left": [
                    "IdentExpr"
                ],
                "op": [
                    "AsssignmentOp"
                ],
                "right": [
                    "Node"
                ]
            }
        }
    },
    "palu-main/palu/ast/func.py": {
        "Func.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "start": [
                    "Tuple[(int, int)]"
                ],
                "end": [
                    "Tuple[(int, int)]"
                ],
                "name": [
                    "str"
                ],
                "params": [
                    "Sequence"
                ],
                "ret": [],
                "body": [
                    "Sequence[Node]"
                ]
            }
        }
    },
    "palu-main/palu/ast/literals.py": {
        "NumberLiteral.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Tuple[(int, int)]"
                ],
                "end": [
                    "Tuple[(int, int)]"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "StringLiteral.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Tuple[(int, int)]"
                ],
                "end": [
                    "Tuple[(int, int)]"
                ],
                "text": []
            }
        },
        "BooleanLiteral.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Tuple[(int, int)]"
                ],
                "end": [
                    "Tuple[(int, int)]"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "NullLiteral.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Tuple[(int, int)]"
                ],
                "end": [
                    "Tuple[(int, int)]"
                ]
            }
        }
    },
    "palu-main/palu/ast/node.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Tuple[(int, int)]"
                ],
                "end": [
                    "Tuple[(int, int)]"
                ]
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "palu-main/palu/ast/op.py": {},
    "palu-main/palu/ast/source.py": {
        "ModDeclare.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Tuple[(int, int)]"
                ],
                "end": [
                    "Tuple[(int, int)]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "SourceFile.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Tuple[(int, int)]"
                ],
                "end": [
                    "Tuple[(int, int)]"
                ],
                "statements": [
                    "Sequence[Node]"
                ]
            }
        }
    },
    "palu-main/palu/ast/statements.py": {
        "EmptyStatement.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Tuple[(int, int)]"
                ],
                "end": [
                    "Tuple[(int, int)]"
                ]
            }
        },
        "DeclareStatement.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Tuple[(int, int)]"
                ],
                "end": [
                    "Tuple[(int, int)]"
                ],
                "typed_ident": [],
                "initial_value": [
                    "Node"
                ]
            }
        },
        "ExternalStatement.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Tuple[(int, int)]"
                ],
                "end": [
                    "Tuple[(int, int)]"
                ],
                "spec": []
            }
        },
        "ExternalFunctionSpec.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Tuple[(int, int)]"
                ],
                "end": [
                    "Tuple[(int, int)]"
                ],
                "ident": [],
                "params": [],
                "returns": []
            }
        },
        "ExternalVariableSpec.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Tuple[(int, int)]"
                ],
                "end": [
                    "Tuple[(int, int)]"
                ],
                "typed_ident": []
            }
        },
        "WhileLoop.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Tuple[(int, int)]"
                ],
                "end": [
                    "Tuple[(int, int)]"
                ],
                "condition": [
                    "Node"
                ],
                "statements": [
                    "Sequence[Node]"
                ]
            }
        },
        "If.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Tuple[(int, int)]"
                ],
                "end": [
                    "Tuple[(int, int)]"
                ],
                "condition": [
                    "Node"
                ],
                "consequence": [
                    "Sequence[Node]"
                ],
                "alternative": [
                    "Optional[Sequence[Node]]"
                ]
            }
        },
        "ReturnStatement.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Tuple[(int, int)]"
                ],
                "end": [
                    "Tuple[(int, int)]"
                ],
                "expr": [
                    "Node"
                ]
            }
        },
        "TypeAliasStatement.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Tuple[(int, int)]"
                ],
                "end": [
                    "Tuple[(int, int)]"
                ],
                "ident": [
                    "str"
                ],
                "typing": [],
                "is_pointer": []
            }
        }
    },
    "palu-main/palu/ast/__init__.py": {},
    "palu-main/palu/typechecker/predefined.py": {},
    "palu-main/palu/typechecker/scope.py": {
        "SymbolRedefinedException.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "PaluSymbol"
                ],
                "previous": [
                    "PaluSymbol"
                ]
            }
        },
        "ScopedSymbol.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "'Scope'"
                ],
                "sym": [
                    "PaluSymbol"
                ]
            }
        },
        "ScopedSymbol.mangling_name": {
            "name": "mangling_name",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scope.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]"
                ],
                "kind": [
                    "'ScopeKind'"
                ]
            }
        },
        "Scope.name_mangling": {
            "name": "name_mangling",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Scope.lookup": {
            "name": "lookup",
            "location": 51,
            "return": [
                "Optional[ScopedSymbol]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Scope.add_symbol": {
            "name": "add_symbol",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scope.add_child_scope": {
            "name": "add_child_scope",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "scope": [
                    "'Scope'"
                ]
            }
        }
    },
    "palu-main/palu/typechecker/symbol.py": {
        "AmbiguousException.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "PaluSymbol.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "specifier": [
                    "Optional['PaluSymbol']"
                ],
                "qualifiers": [
                    "Sequence[Qualifier]"
                ]
            }
        },
        "PaluSymbol.name": {
            "name": "name",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PaluSymbol.specifier": {
            "name": "specifier",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PaluSymbol.is_static": {
            "name": "is_static",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PaluSymbol.is_export": {
            "name": "is_export",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PaluSymbol.is_extern": {
            "name": "is_extern",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PaluSymbol.is_const": {
            "name": "is_const",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PaluSymbol.is_volatile": {
            "name": "is_volatile",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PaluSymbol.is_variable": {
            "name": "is_variable",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PaluSymbol.is_pointer": {
            "name": "is_pointer",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PaluSymbol.is_slice": {
            "name": "is_slice",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PaluSymbol.is_array": {
            "name": "is_array",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PaluSymbol.array_size": {
            "name": "array_size",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PaluSymbol.is_function": {
            "name": "is_function",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PaluSymbol.params": {
            "name": "params",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PaluSymbol.ret": {
            "name": "ret",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PaluSymbol.function_receiver": {
            "name": "function_receiver",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PaluSymbol.is_struct": {
            "name": "is_struct",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PaluSymbol.struct_fields": {
            "name": "struct_fields",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PaluSymbol.is_union": {
            "name": "is_union",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PaluSymbol.union_fields": {
            "name": "union_fields",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PaluSymbol.is_enum": {
            "name": "is_enum",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PaluSymbol.enum_fields": {
            "name": "enum_fields",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PaluSymbol.is_type_alias": {
            "name": "is_type_alias",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PaluSymbol.is_type_decl": {
            "name": "is_type_decl",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PaluSymbol.is_builtin_type": {
            "name": "is_builtin_type",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "palu-main/palu/typechecker/__init__.py": {},
    "palu-main/test/test_fib.py": {
        "test_compile_fib": {
            "name": "test_compile_fib",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "palu-main/test/__init__.py": {}
}
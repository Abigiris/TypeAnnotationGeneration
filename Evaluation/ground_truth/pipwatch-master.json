{
    "pipwatch-master/api/setup.py": {
        "read_requirements": {
            "name": "read_requirements",
            "location": 8,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "pipwatch-master/api/pipwatch_api/application.py": {
        "get_flask_application": {
            "name": "get_flask_application",
            "location": 13,
            "return": [
                "Flask"
            ],
            "arguments": {
                "settings_override": [
                    "Dict"
                ]
            }
        }
    },
    "pipwatch-master/api/pipwatch_api/main.py": {
        "main": {
            "name": "main",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pipwatch-master/api/pipwatch_api/version.py": {},
    "pipwatch-master/api/pipwatch_api/__init__.py": {},
    "pipwatch-master/api/pipwatch_api/celery_components/broker.py": {
        "Broker.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "Logger"
                ]
            }
        },
        "Broker.get_all_active_tasks": {
            "name": "get_all_active_tasks",
            "location": 28,
            "return": [
                "List[ActiveTask]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Broker.send_task": {
            "name": "send_task",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "task_name": [
                    "str"
                ],
                "args": [
                    "Any"
                ],
                "kwargs": [
                    "Any"
                ]
            }
        },
        "Broker.check_task": {
            "name": "check_task",
            "location": 50,
            "return": [
                "AsyncResult"
            ],
            "arguments": {
                "self": [],
                "task_id": [
                    "str"
                ]
            }
        },
        "ProjectUpdateBroker.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "Logger"
                ]
            }
        },
        "ProjectUpdateBroker.send_update_request": {
            "name": "send_update_request",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "int"
                ]
            }
        },
        "ProjectUpdateBroker._get_update_request_payload": {
            "name": "_get_update_request_payload",
            "location": 82,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "project": [
                    "Project"
                ]
            }
        }
    },
    "pipwatch-master/api/pipwatch_api/celery_components/__init__.py": {},
    "pipwatch-master/api/pipwatch_api/core/after_request_handlers.py": {
        "allow_any_cors_request": {
            "name": "allow_any_cors_request",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "request"
                ]
            }
        }
    },
    "pipwatch-master/api/pipwatch_api/core/before_request_handlers.py": {
        "log_incoming_request": {
            "name": "log_incoming_request",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pipwatch-master/api/pipwatch_api/core/configuration.py": {
        "load_config_file": {
            "name": "load_config_file",
            "location": 24,
            "return": [
                "ConfigParser"
            ],
            "arguments": {}
        },
        "configure_logger": {
            "name": "configure_logger",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "configure_celery_app": {
            "name": "configure_celery_app",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "celery_app": [
                    "Celery"
                ]
            }
        },
        "configure_sqlalchemy": {
            "name": "configure_sqlalchemy",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "application": [
                    "Flask"
                ],
                "sql_alchemy_instance": [
                    "SQLAlchemy"
                ]
            }
        },
        "configure_flask_application": {
            "name": "configure_flask_application",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "application": [
                    "Flask"
                ],
                "settings_override": [
                    "Dict"
                ]
            }
        }
    },
    "pipwatch-master/api/pipwatch_api/core/log_formatter.py": {},
    "pipwatch-master/api/pipwatch_api/core/__init__.py": {},
    "pipwatch-master/api/pipwatch_api/datastore/models.py": {
        "Tag.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Tag.__str__": {
            "name": "__str__",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.__repr__": {
            "name": "__repr__",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitRepository.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flavour": [
                    "str"
                ],
                "url": [
                    "str"
                ],
                "upstream_url": [
                    "str"
                ],
                "github_api_address": [
                    "str"
                ],
                "github_project_name": [
                    "str"
                ],
                "github_project_owner": [
                    "str"
                ],
                "project_id": [
                    "int"
                ]
            }
        },
        "GitRepository.__str__": {
            "name": "__str__",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitRepository.__repr__": {
            "name": "__repr__",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Namespace.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Namespace.__str__": {
            "name": "__str__",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Namespace.__repr__": {
            "name": "__repr__",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "check_command": [],
                "namespace_id": [
                    "int"
                ]
            }
        },
        "Project.__str__": {
            "name": "__str__",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.__repr__": {
            "name": "__repr__",
            "location": 141,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequirementsFile.__init__": {
            "name": "__init__",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "status": [
                    "str"
                ],
                "project_id": [
                    "int"
                ]
            }
        },
        "RequirementsFile.__str__": {
            "name": "__str__",
            "location": 170,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequirementsFile.__repr__": {
            "name": "__repr__",
            "location": 174,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Requirement.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "current_version": [
                    "str"
                ],
                "desired_version": [
                    "str"
                ],
                "status": [
                    "str"
                ],
                "requirements_file_id": [
                    "int"
                ]
            }
        },
        "Requirement.__str__": {
            "name": "__str__",
            "location": 211,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Requirement.__repr__": {
            "name": "__repr__",
            "location": 215,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pipwatch-master/api/pipwatch_api/datastore/seed.py": {
        "seed_database": {
            "name": "seed_database",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "database_instance": [
                    "SQLAlchemy"
                ]
            }
        }
    },
    "pipwatch-master/api/pipwatch_api/datastore/stores.py": {
        "DefaultStore.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "T@@Model@@"
                ],
                "database": [
                    "SQLAlchemy"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "DefaultStore._naive_get_columns_names": {
            "name": "_naive_get_columns_names",
            "location": 29,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultStore._additional_document_handler": {
            "name": "_additional_document_handler",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "entity": [
                    "T@@Model@@"
                ],
                "document": [
                    "Dict"
                ]
            }
        },
        "DefaultStore.create": {
            "name": "create",
            "location": 42,
            "return": [
                "T@@Model@@"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "Dict"
                ]
            }
        },
        "DefaultStore.read": {
            "name": "read",
            "location": 62,
            "return": [
                "Optional[T]"
            ],
            "arguments": {
                "self": [],
                "document_id": [
                    "int"
                ]
            }
        },
        "DefaultStore.read_all": {
            "name": "read_all",
            "location": 71,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultStore.update": {
            "name": "update",
            "location": 76,
            "return": [
                "Optional[T]"
            ],
            "arguments": {
                "self": [],
                "document_id": [
                    "int"
                ],
                "document": [
                    "Dict"
                ]
            }
        },
        "DefaultStore.delete": {
            "name": "delete",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "document_id": [
                    "int"
                ]
            }
        },
        "WithNestedDocumentsStore.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "T@@Model@@"
                ],
                "database": [
                    "SQLAlchemy"
                ],
                "logger": [
                    "Logger"
                ],
                "nested_documents_specs": [
                    "List[NestedDocument]"
                ]
            }
        },
        "WithNestedDocumentsStore._load_nested_documents_properties_names": {
            "name": "_load_nested_documents_properties_names",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WithNestedDocumentsStore._persist_nested_document": {
            "name": "_persist_nested_document",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "entity": [
                    "T@@Model@@"
                ],
                "document": [
                    "Dict"
                ],
                "nested_doc_key": [
                    "str"
                ],
                "nested_doc_model": [
                    "Model"
                ],
                "differentiator_property": [
                    "str"
                ]
            }
        },
        "WithNestedDocumentsStore._additional_document_handler": {
            "name": "_additional_document_handler",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "entity": [
                    "T@@Model@@"
                ],
                "document": [
                    "Dict"
                ]
            }
        }
    },
    "pipwatch-master/api/pipwatch_api/datastore/__init__.py": {},
    "pipwatch-master/api/pipwatch_api/namespaces/version_one.py": {
        "get_api_version_one": {
            "name": "get_api_version_one",
            "location": 16,
            "return": [
                "Blueprint"
            ],
            "arguments": {}
        }
    },
    "pipwatch-master/api/pipwatch_api/namespaces/__init__.py": {},
    "pipwatch-master/api/pipwatch_api/namespaces/v1/git_repository.py": {
        "GitRepositories.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GitRepositories.get": {
            "name": "get",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GitRepositories.post": {
            "name": "post",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GitRepository.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GitRepository.get": {
            "name": "get",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "git_repo_id": [
                    "int"
                ]
            }
        },
        "GitRepository.put": {
            "name": "put",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "git_repo_id": [
                    "int"
                ]
            }
        },
        "GitRepository.delete": {
            "name": "delete",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "git_repo_id": [
                    "int"
                ]
            }
        }
    },
    "pipwatch-master/api/pipwatch_api/namespaces/v1/namespaces.py": {
        "Namespaces.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Namespaces.get": {
            "name": "get",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Namespaces.post": {
            "name": "post",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Namespace.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Namespace.get": {
            "name": "get",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "namespace_id": [
                    "int"
                ]
            }
        },
        "Namespace.put": {
            "name": "put",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "namespace_id": [
                    "int"
                ]
            }
        },
        "Namespace.delete": {
            "name": "delete",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "namespace_id": [
                    "int"
                ]
            }
        }
    },
    "pipwatch-master/api/pipwatch_api/namespaces/v1/projects.py": {
        "Projects.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Projects.get": {
            "name": "get",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Projects.post": {
            "name": "post",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Project.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Project.get": {
            "name": "get",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "project_id": [
                    "int"
                ]
            }
        },
        "Project.put": {
            "name": "put",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "project_id": [
                    "int"
                ]
            }
        },
        "Project.delete": {
            "name": "delete",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "project_id": [
                    "int"
                ]
            }
        }
    },
    "pipwatch-master/api/pipwatch_api/namespaces/v1/projects_updates.py": {
        "ProjectUpdates.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProjectUpdates.get": {
            "name": "get",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProjectsUpdate.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProjectsUpdate.post": {
            "name": "post",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "project_id": [
                    "int"
                ]
            }
        },
        "ProjectsUpdateStatus.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProjectsUpdateStatus.get": {
            "name": "get",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "task_id": [
                    "str"
                ]
            }
        },
        "ProjectsUpdateStatus._async_result_to_dict": {
            "name": "_async_result_to_dict",
            "location": 69,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "task_result": [
                    "AsyncResult"
                ]
            }
        }
    },
    "pipwatch-master/api/pipwatch_api/namespaces/v1/requirements.py": {
        "Requirements.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Requirements.get": {
            "name": "get",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Requirements.post": {
            "name": "post",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Requirement.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Requirement.get": {
            "name": "get",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "requirement_id": [
                    "int"
                ]
            }
        },
        "Requirement.put": {
            "name": "put",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "requirement_id": [
                    "int"
                ]
            }
        },
        "Requirement.delete": {
            "name": "delete",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "requirement_id": [
                    "int"
                ]
            }
        }
    },
    "pipwatch-master/api/pipwatch_api/namespaces/v1/requirements_files.py": {
        "RequirementsFiles.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RequirementsFiles.get": {
            "name": "get",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RequirementsFiles.post": {
            "name": "post",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RequirementsFile.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RequirementsFile.get": {
            "name": "get",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "requirements_file_id": [
                    "int"
                ]
            }
        },
        "RequirementsFile.put": {
            "name": "put",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "requirements_file_id": [
                    "int"
                ]
            }
        },
        "RequirementsFile.delete": {
            "name": "delete",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "requirements_file_id": [
                    "int"
                ]
            }
        }
    },
    "pipwatch-master/api/pipwatch_api/namespaces/v1/status.py": {
        "Status.get": {
            "name": "get",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pipwatch-master/api/pipwatch_api/namespaces/v1/tags.py": {
        "Tags.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tags.get": {
            "name": "get",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tags.post": {
            "name": "post",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.get": {
            "name": "get",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "tag_id": [
                    "int"
                ]
            }
        },
        "Tag.put": {
            "name": "put",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "tag_id": [
                    "int"
                ]
            }
        },
        "Tag.delete": {
            "name": "delete",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "tag_id": [
                    "int"
                ]
            }
        }
    },
    "pipwatch-master/api/pipwatch_api/namespaces/v1/__init__.py": {},
    "pipwatch-master/api/tests/conftest.py": {
        "get_test_database_path": {
            "name": "get_test_database_path",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "app": {
            "name": "app",
            "location": 20,
            "return": [
                "Flask"
            ],
            "arguments": {}
        },
        "app_client": {
            "name": "app_client",
            "location": 39,
            "return": [
                "Flask"
            ],
            "arguments": {
                "app": []
            }
        },
        "database_session_wide": {
            "name": "database_session_wide",
            "location": 47,
            "return": [
                "SQLAlchemy"
            ],
            "arguments": {
                "app": []
            }
        },
        "database": {
            "name": "database",
            "location": 64,
            "return": [
                "SQLAlchemy"
            ],
            "arguments": {
                "database_session_wide": [],
                "mocker": []
            }
        }
    },
    "pipwatch-master/api/tests/test_sanity.py": {
        "test_sanity": {
            "name": "test_sanity",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pipwatch-master/api/tests/utils.py": {
        "JSONResponse.json": {
            "name": "json",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pipwatch-master/api/tests/__init__.py": {},
    "pipwatch-master/api/tests/datastore/test_seed.py": {
        "test_seed_database": {
            "name": "test_seed_database",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "database": []
            }
        }
    },
    "pipwatch-master/api/tests/datastore/test_stores.py": {
        "default_store_fixture": {
            "name": "default_store_fixture",
            "location": 26,
            "return": [
                "DefaultStore"
            ],
            "arguments": {
                "database": []
            }
        },
        "with_nested_documents_store_fixture": {
            "name": "with_nested_documents_store_fixture",
            "location": 122,
            "return": [
                "WithNestedDocumentsStore"
            ],
            "arguments": {
                "database": []
            }
        },
        "ModelMock.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "id": [
                    "int"
                ]
            }
        },
        "ModelMock.get": {
            "name": "get",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaultStore.test_naive_get_columns_names": {
            "name": "test_naive_get_columns_names",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default_store_fixture": [],
                "mocker": []
            }
        },
        "TestDefaultStore.test_create": {
            "name": "test_create",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default_store_fixture": [],
                "mocker": []
            }
        },
        "TestDefaultStore.test_read": {
            "name": "test_read",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default_store_fixture": [],
                "mocker": []
            }
        },
        "TestDefaultStore.test_read_document_not_found": {
            "name": "test_read_document_not_found",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default_store_fixture": [],
                "mocker": []
            }
        },
        "TestDefaultStore.test_read_all": {
            "name": "test_read_all",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default_store_fixture": [],
                "mocker": []
            }
        },
        "TestDefaultStore.test_update_document_not_found": {
            "name": "test_update_document_not_found",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default_store_fixture": [],
                "mocker": []
            }
        },
        "TestDefaultStore.test_update_document": {
            "name": "test_update_document",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default_store_fixture": [],
                "mocker": []
            }
        },
        "TestDefaultStore.test_delete_document_not_found": {
            "name": "test_delete_document_not_found",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default_store_fixture": [],
                "mocker": []
            }
        },
        "TestDefaultStore.test_delete_document": {
            "name": "test_delete_document",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default_store_fixture": [],
                "mocker": []
            }
        },
        "TestWithNestedDocumentsStore.test_persist_nested_document": {
            "name": "test_persist_nested_document",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "with_nested_documents_store_fixture": [],
                "mocker": []
            }
        }
    },
    "pipwatch-master/api/tests/datastore/__init__.py": {},
    "pipwatch-master/api/tests/namespaces/test_version_one.py": {
        "test_get_api_version_one": {
            "name": "test_get_api_version_one",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "pipwatch-master/api/tests/namespaces/__init__.py": {},
    "pipwatch-master/api/tests/namespaces/v1/conftest.py": {
        "default_store_fixture": {
            "name": "default_store_fixture",
            "location": 9,
            "return": [
                "DefaultStore"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "get_model_repr": {
            "name": "get_model_repr",
            "location": 30,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {}
        },
        "AsyncResultMock.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "info": [],
                "state": [],
                "task_id": []
            }
        }
    },
    "pipwatch-master/api/tests/namespaces/v1/test_git_repositories.py": {
        "test_default_get_returns_all_git_repos": {
            "name": "test_default_get_returns_all_git_repos",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "app_client": [],
                "default_store_fixture": [],
                "mocker": []
            }
        },
        "test_post_creates_a_new_git_repo": {
            "name": "test_post_creates_a_new_git_repo",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "payload": [],
                "content_type": [],
                "asserts": [],
                "app_client": [],
                "default_store_fixture": [],
                "mocker": []
            }
        },
        "test_get_id_returns_document": {
            "name": "test_get_id_returns_document",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "document_id": [],
                "mock_response": [],
                "asserts": [],
                "app_client": [],
                "default_store_fixture": [],
                "mocker": []
            }
        },
        "test_put_updates_document": {
            "name": "test_put_updates_document",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "document_id": [],
                "mock_response": [],
                "payload": [],
                "asserts": [],
                "app_client": [],
                "default_store_fixture": [],
                "mocker": []
            }
        },
        "test_delete_git_repository": {
            "name": "test_delete_git_repository",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "app_client": [],
                "default_store_fixture": [],
                "mocker": []
            }
        }
    },
    "pipwatch-master/api/tests/namespaces/v1/test_namespace.py": {
        "test_default_get_returns_all_namespaces": {
            "name": "test_default_get_returns_all_namespaces",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "app_client": [],
                "default_store_fixture": [],
                "mocker": []
            }
        },
        "test_post_creates_a_new_namespace": {
            "name": "test_post_creates_a_new_namespace",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "payload": [],
                "content_type": [],
                "asserts": [],
                "app_client": [],
                "default_store_fixture": [],
                "mocker": []
            }
        },
        "test_get_id_returns_document": {
            "name": "test_get_id_returns_document",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "document_id": [],
                "mock_response": [],
                "asserts": [],
                "app_client": [],
                "default_store_fixture": [],
                "mocker": []
            }
        },
        "test_put_updates_document": {
            "name": "test_put_updates_document",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "document_id": [],
                "mock_response": [],
                "payload": [],
                "asserts": [],
                "app_client": [],
                "default_store_fixture": [],
                "mocker": []
            }
        },
        "test_delete_namespace": {
            "name": "test_delete_namespace",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "app_client": [],
                "default_store_fixture": [],
                "mocker": []
            }
        }
    },
    "pipwatch-master/api/tests/namespaces/v1/test_projects.py": {
        "test_default_get_returns_all_projects": {
            "name": "test_default_get_returns_all_projects",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "app_client": [],
                "default_store_fixture": [],
                "mocker": []
            }
        },
        "test_post_creates_a_new_project": {
            "name": "test_post_creates_a_new_project",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "payload": [],
                "content_type": [],
                "asserts": [],
                "app_client": [],
                "default_store_fixture": [],
                "mocker": []
            }
        },
        "test_get_id_returns_document": {
            "name": "test_get_id_returns_document",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "document_id": [],
                "mock_response": [],
                "asserts": [],
                "app_client": [],
                "default_store_fixture": [],
                "mocker": []
            }
        },
        "test_put_updates_document": {
            "name": "test_put_updates_document",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "document_id": [],
                "mock_response": [],
                "payload": [],
                "asserts": [],
                "app_client": [],
                "default_store_fixture": [],
                "mocker": []
            }
        },
        "test_delete_project": {
            "name": "test_delete_project",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "app_client": [],
                "default_store_fixture": [],
                "mocker": []
            }
        }
    },
    "pipwatch-master/api/tests/namespaces/v1/test_projects_updates.py": {
        "test_post_creates_a_new_task": {
            "name": "test_post_creates_a_new_task",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "app_client": [],
                "mocker": []
            }
        },
        "test_get_task_status": {
            "name": "test_get_task_status",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "app_client": [],
                "mocker": []
            }
        }
    },
    "pipwatch-master/api/tests/namespaces/v1/test_requirements.py": {
        "test_default_get_returns_all_requirements": {
            "name": "test_default_get_returns_all_requirements",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "app_client": [],
                "default_store_fixture": [],
                "mocker": []
            }
        },
        "test_post_creates_a_new_requirement": {
            "name": "test_post_creates_a_new_requirement",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "payload": [],
                "content_type": [],
                "asserts": [],
                "app_client": [],
                "default_store_fixture": [],
                "mocker": []
            }
        },
        "test_get_id_returns_document": {
            "name": "test_get_id_returns_document",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "document_id": [],
                "mock_response": [],
                "asserts": [],
                "app_client": [],
                "default_store_fixture": [],
                "mocker": []
            }
        },
        "test_put_updates_document": {
            "name": "test_put_updates_document",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "document_id": [],
                "mock_response": [],
                "payload": [],
                "asserts": [],
                "app_client": [],
                "default_store_fixture": [],
                "mocker": []
            }
        },
        "test_delete_requirement": {
            "name": "test_delete_requirement",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "app_client": [],
                "default_store_fixture": [],
                "mocker": []
            }
        }
    },
    "pipwatch-master/api/tests/namespaces/v1/test_requirements_files.py": {
        "test_default_get_returns_all_requirements_files": {
            "name": "test_default_get_returns_all_requirements_files",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "app_client": [],
                "default_store_fixture": [],
                "mocker": []
            }
        },
        "test_post_creates_a_new_requirements_file": {
            "name": "test_post_creates_a_new_requirements_file",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "payload": [],
                "content_type": [],
                "asserts": [],
                "app_client": [],
                "default_store_fixture": [],
                "mocker": []
            }
        },
        "test_get_id_returns_document": {
            "name": "test_get_id_returns_document",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "document_id": [],
                "mock_response": [],
                "asserts": [],
                "app_client": [],
                "default_store_fixture": [],
                "mocker": []
            }
        },
        "test_put_updates_document": {
            "name": "test_put_updates_document",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "document_id": [],
                "mock_response": [],
                "payload": [],
                "asserts": [],
                "app_client": [],
                "default_store_fixture": [],
                "mocker": []
            }
        },
        "test_delete_requirements_file": {
            "name": "test_delete_requirements_file",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "app_client": [],
                "default_store_fixture": [],
                "mocker": []
            }
        }
    },
    "pipwatch-master/api/tests/namespaces/v1/test_status.py": {
        "test_status_should_return_ok": {
            "name": "test_status_should_return_ok",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "app_client": []
            }
        }
    },
    "pipwatch-master/api/tests/namespaces/v1/test_tags.py": {
        "test_default_get_returns_all_tags": {
            "name": "test_default_get_returns_all_tags",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "app_client": [],
                "default_store_fixture": [],
                "mocker": []
            }
        },
        "test_post_creates_a_new_tag": {
            "name": "test_post_creates_a_new_tag",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "payload": [],
                "content_type": [],
                "asserts": [],
                "app_client": [],
                "default_store_fixture": [],
                "mocker": []
            }
        },
        "test_get_id_returns_document": {
            "name": "test_get_id_returns_document",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "document_id": [],
                "mock_response": [],
                "asserts": [],
                "app_client": [],
                "default_store_fixture": [],
                "mocker": []
            }
        },
        "test_put_updates_document": {
            "name": "test_put_updates_document",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "document_id": [],
                "mock_response": [],
                "payload": [],
                "asserts": [],
                "app_client": [],
                "default_store_fixture": [],
                "mocker": []
            }
        },
        "test_delete_tag": {
            "name": "test_delete_tag",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "app_client": [],
                "default_store_fixture": [],
                "mocker": []
            }
        }
    },
    "pipwatch-master/api/tests/namespaces/v1/__init__.py": {},
    "pipwatch-master/worker/setup.py": {
        "read_requirements": {
            "name": "read_requirements",
            "location": 8,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "pipwatch-master/worker/pipwatch_worker/main.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pipwatch-master/worker/pipwatch_worker/version.py": {},
    "pipwatch-master/worker/pipwatch_worker/__init__.py": {},
    "pipwatch-master/worker/pipwatch_worker/celery_components/application.py": {},
    "pipwatch-master/worker/pipwatch_worker/celery_components/tasks.py": {
        "process_project": {
            "name": "process_project",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "processing_request": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "pipwatch-master/worker/pipwatch_worker/celery_components/__init__.py": {},
    "pipwatch-master/worker/pipwatch_worker/core/configuration.py": {
        "load_config_file": {
            "name": "load_config_file",
            "location": 20,
            "return": [
                "ConfigParser"
            ],
            "arguments": {}
        },
        "configure_logger": {
            "name": "configure_logger",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "configure_celery_app": {
            "name": "configure_celery_app",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "celery_app": [
                    "Celery"
                ]
            }
        }
    },
    "pipwatch-master/worker/pipwatch_worker/core/data_models.py": {
        "GitRepositorySchema.to_git_repository": {
            "name": "to_git_repository",
            "location": 20,
            "return": [
                "'GitRepository'"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[(Any, Any)]"
                ]
            }
        },
        "GitRepository.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int"
                ],
                "flavour": [
                    "str"
                ],
                "url": [
                    "str"
                ],
                "upstream_url": [
                    "str"
                ],
                "github_api_address": [
                    "str"
                ],
                "github_project_name": [
                    "str"
                ],
                "github_project_owner": [
                    "str"
                ]
            }
        },
        "GitRepository.to_dict": {
            "name": "to_dict",
            "location": 48,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitRepository.from_dict": {
            "name": "from_dict",
            "location": 53,
            "return": [
                "'GitRepository'"
            ],
            "arguments": {
                "cls": [],
                "dictionary": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "GitRepository.__str__": {
            "name": "__str__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GitRepository.__repr__": {
            "name": "__repr__",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequirementSchema.to_requirement": {
            "name": "to_requirement",
            "location": 89,
            "return": [
                "'Requirement'"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[(Any, Any)]"
                ]
            }
        },
        "Requirement.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int"
                ],
                "name": [
                    "str"
                ],
                "current_version": [
                    "str"
                ],
                "desired_version": [
                    "str"
                ],
                "status": [
                    "str"
                ]
            }
        },
        "Requirement.to_dict": {
            "name": "to_dict",
            "location": 112,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Requirement.from_dict": {
            "name": "from_dict",
            "location": 117,
            "return": [
                "'Requirement'"
            ],
            "arguments": {
                "cls": [],
                "dictionary": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Requirement.__str__": {
            "name": "__str__",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Requirement.__repr__": {
            "name": "__repr__",
            "location": 125,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequirementsFileSchema.to_requirements_file": {
            "name": "to_requirements_file",
            "location": 150,
            "return": [
                "'RequirementsFile'"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[(Any, Any)]"
                ]
            }
        },
        "RequirementsFile.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int"
                ],
                "path": [
                    "str"
                ],
                "status": [
                    "str"
                ],
                "requirements": [
                    "List[Requirement]"
                ]
            }
        },
        "RequirementsFile.to_dict": {
            "name": "to_dict",
            "location": 172,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequirementsFile.from_dict": {
            "name": "from_dict",
            "location": 177,
            "return": [
                "'RequirementsFile'"
            ],
            "arguments": {
                "cls": [],
                "dictionary": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "RequirementsFile.__str__": {
            "name": "__str__",
            "location": 181,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequirementsFile.__repr__": {
            "name": "__repr__",
            "location": 185,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectSchema.to_project": {
            "name": "to_project",
            "location": 211,
            "return": [
                "'Project'"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[(Any, Any)]"
                ]
            }
        },
        "Project.__init__": {
            "name": "__init__",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int"
                ],
                "namespace_id": [
                    "int"
                ],
                "name": [
                    "str"
                ],
                "git_repository": [
                    "GitRepository"
                ],
                "check_command": [
                    "str"
                ],
                "requirements_files": [
                    "List[RequirementsFile]"
                ]
            }
        },
        "Project.to_dict": {
            "name": "to_dict",
            "location": 237,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.from_dict": {
            "name": "from_dict",
            "location": 242,
            "return": [
                "'Project'"
            ],
            "arguments": {
                "cls": [],
                "dictionary": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Project.__str__": {
            "name": "__str__",
            "location": 246,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.__repr__": {
            "name": "__repr__",
            "location": 250,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pipwatch-master/worker/pipwatch_worker/core/log_formatter.py": {},
    "pipwatch-master/worker/pipwatch_worker/core/utils.py": {
        "get_pip_script_name": {
            "name": "get_pip_script_name",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "pipwatch-master/worker/pipwatch_worker/core/__init__.py": {},
    "pipwatch-master/worker/pipwatch_worker/worker/commands.py": {
        "RepositoriesCacheMixin.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RepositoriesCacheMixin._load_repositories_cache_config": {
            "name": "_load_repositories_cache_config",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "int"
                ]
            }
        },
        "Command.__call__": {
            "name": "__call__",
            "location": 44,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str"
                ],
                "cwd": [
                    "str"
                ]
            }
        },
        "Command._projects_dir_path": {
            "name": "_projects_dir_path",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._project_dir_path": {
            "name": "_project_dir_path",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._execute": {
            "name": "_execute",
            "location": 59,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str"
                ],
                "cwd": [
                    "str"
                ]
            }
        },
        "Git.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "int"
                ],
                "project_url": [
                    "str"
                ],
                "project_upstream": [
                    "str"
                ]
            }
        },
        "Git.__call__": {
            "name": "__call__",
            "location": 83,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str"
                ],
                "cwd": [
                    "str"
                ]
            }
        },
        "Git._clone_repository": {
            "name": "_clone_repository",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "cwd": [
                    "str"
                ]
            }
        },
        "Git._setup_upstream": {
            "name": "_setup_upstream",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "cwd": [
                    "str"
                ]
            }
        },
        "FromVirtualenv.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "int"
                ],
                "venv_command_name": [
                    "str"
                ],
                "venv_dir": [
                    "str"
                ]
            }
        },
        "FromVirtualenv._venv_bin_directory_path": {
            "name": "_venv_bin_directory_path",
            "location": 132,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromVirtualenv._venv_creation_command": {
            "name": "_venv_creation_command",
            "location": 138,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromVirtualenv.__call__": {
            "name": "__call__",
            "location": 150,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str"
                ],
                "cwd": [
                    "str"
                ]
            }
        }
    },
    "pipwatch-master/worker/pipwatch_worker/worker/states.py": {},
    "pipwatch-master/worker/pipwatch_worker/worker/worker.py": {
        "Worker.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "update_celery_state_method": [
                    "Callable[([str], None)]"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "Worker.run": {
            "name": "run",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project_to_process": [
                    "Project"
                ]
            }
        },
        "Worker.fail": {
            "name": "fail",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.initialize": {
            "name": "initialize",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project_to_process": [
                    "Project"
                ]
            }
        },
        "Worker.clone": {
            "name": "clone",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.parse_requirements": {
            "name": "parse_requirements",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.check_updates": {
            "name": "check_updates",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.update_metadata": {
            "name": "update_metadata",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.attempt_update": {
            "name": "attempt_update",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.commit_changes": {
            "name": "commit_changes",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.push_changes": {
            "name": "push_changes",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.success": {
            "name": "success",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.trigger": {
            "name": "trigger",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transition_trigger": [
                    "str"
                ]
            }
        },
        "Worker._save_packages_with_locked_versions": {
            "name": "_save_packages_with_locked_versions",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._rollback_requirements_desired_versions": {
            "name": "_rollback_requirements_desired_versions",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Worker._dry_runs_only": {
            "name": "_dry_runs_only",
            "location": 248,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pipwatch-master/worker/pipwatch_worker/worker/__init__.py": {},
    "pipwatch-master/worker/pipwatch_worker/worker/operations/attempting_updates.py": {
        "AttemptUpdate.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "Logger"
                ],
                "project_details": [
                    "Project"
                ]
            }
        },
        "AttemptUpdate.__call__": {
            "name": "__call__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttemptUpdate._check": {
            "name": "_check",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttemptUpdate._update_requirement_file": {
            "name": "_update_requirement_file",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requirements_file": [
                    "RequirementsFile"
                ]
            }
        }
    },
    "pipwatch-master/worker/pipwatch_worker/worker/operations/checking_updates.py": {
        "CheckUpdates.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "Logger"
                ],
                "project_details": [
                    "Project"
                ]
            }
        },
        "CheckUpdates.__call__": {
            "name": "__call__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckUpdates._install_packages": {
            "name": "_install_packages",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckUpdates._get_outdated_packages": {
            "name": "_get_outdated_packages",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckUpdates._update_project_details": {
            "name": "_update_project_details",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pipwatch-master/worker/pipwatch_worker/worker/operations/cloning.py": {
        "Clone.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "Logger"
                ],
                "project_details": [
                    "Project"
                ]
            }
        },
        "Clone.__call__": {
            "name": "__call__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Clone._handle_upstream_sync": {
            "name": "_handle_upstream_sync",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pipwatch-master/worker/pipwatch_worker/worker/operations/commiting_changes.py": {
        "CommitChanges.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "Logger"
                ],
                "project_details": [
                    "Project"
                ]
            }
        },
        "CommitChanges.__call__": {
            "name": "__call__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "commit_msg": [
                    "str"
                ]
            }
        }
    },
    "pipwatch-master/worker/pipwatch_worker/worker/operations/gerrit.py": {
        "GitReview.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "Logger"
                ],
                "project_details": [
                    "Project"
                ]
            }
        },
        "GitReview.__call__": {
            "name": "__call__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pipwatch-master/worker/pipwatch_worker/worker/operations/github.py": {
        "PullRequest.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "Logger"
                ],
                "project_details": [
                    "Project"
                ]
            }
        },
        "PullRequest.__call__": {
            "name": "__call__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PullRequest._get_pull_request_body": {
            "name": "_get_pull_request_body",
            "location": 25,
            "return": [
                "Dict[(str, Union[(bool, str)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PullRequest._create_pull_request": {
            "name": "_create_pull_request",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pipwatch-master/worker/pipwatch_worker/worker/operations/git_push.py": {
        "GitPush.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "Logger"
                ],
                "project_details": [
                    "Project"
                ]
            }
        },
        "GitPush.__call__": {
            "name": "__call__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pipwatch-master/worker/pipwatch_worker/worker/operations/operation.py": {
        "Operation.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "Logger"
                ],
                "project_details": [
                    "Project"
                ]
            }
        },
        "Operation.__call__": {
            "name": "__call__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pipwatch-master/worker/pipwatch_worker/worker/operations/parsing.py": {
        "Parse.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "Logger"
                ],
                "project_details": [
                    "Project"
                ]
            }
        },
        "Parse.__call__": {
            "name": "__call__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parse._parse_requirements_file": {
            "name": "_parse_requirements_file",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requirements_file": [
                    "RequirementsFile"
                ]
            }
        },
        "Parse._parse_requirement": {
            "name": "_parse_requirement",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "RequirementsFile"
                ],
                "requirement": [
                    "Any"
                ]
            }
        }
    },
    "pipwatch-master/worker/pipwatch_worker/worker/operations/updating.py": {
        "Update.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "Logger"
                ],
                "project_details": [
                    "Project"
                ]
            }
        },
        "Update.__call__": {
            "name": "__call__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Update._update_requirements_file": {
            "name": "_update_requirements_file",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "RequirementsFile"
                ]
            }
        }
    },
    "pipwatch-master/worker/pipwatch_worker/worker/operations/__init__.py": {},
    "pipwatch-master/worker/tests/conftest.py": {},
    "pipwatch-master/worker/tests/test_sanity.py": {
        "test_sanity": {
            "name": "test_sanity",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pipwatch-master/worker/tests/__init__.py": {}
}
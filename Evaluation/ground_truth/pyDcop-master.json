{
    "pyDcop-master/setup.py": {},
    "pyDcop-master/docs/conf.py": {},
    "pyDcop-master/docs/tutorials/dsa-tuto.py": {
        "DsaTutoComputation.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "computation_definition": [
                    "ComputationDef"
                ]
            }
        },
        "DsaTutoComputation.on_start": {
            "name": "on_start",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DsaTutoComputation.on_value_msg": {
            "name": "on_value_msg",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "variable_name": [],
                "recv_msg": [],
                "t": []
            }
        },
        "DsaTutoComputation.evaluate_cycle": {
            "name": "evaluate_cycle",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DsaTutoComputation.is_cycle_complete": {
            "name": "is_cycle_complete",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DsaTutoComputation.compute_best_value": {
            "name": "compute_best_value",
            "location": 105,
            "return": [
                "Tuple[(Any, float)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyDcop-master/docs/tutorials/dynamic_dcop_res/dyndcop_graph_maxsum.py": {},
    "pyDcop-master/pydcop/dcop_cli.py": {
        "main": {
            "name": "main",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "_on_force_exit": {
            "name": "_on_force_exit",
            "location": 152,
            "return": [],
            "arguments": {
                "sub_exit_func": [],
                "sig": [],
                "frame": []
            }
        },
        "_on_timeout": {
            "name": "_on_timeout",
            "location": 160,
            "return": [],
            "arguments": {
                "on_timeout_func": []
            }
        },
        "_configure_logs": {
            "name": "_configure_logs",
            "location": 164,
            "return": [],
            "arguments": {
                "level": [
                    "int"
                ],
                "log_conf": [
                    "str"
                ]
            }
        }
    },
    "pyDcop-master/pydcop/version.py": {},
    "pyDcop-master/pydcop/__init__.py": {},
    "pyDcop-master/pydcop/algorithms/adsa.py": {
        "build_computation": {
            "name": "build_computation",
            "location": 103,
            "return": [
                "DcopComputation"
            ],
            "arguments": {
                "comp_def": [
                    "ComputationDef"
                ]
            }
        },
        "ADsaComputation.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "comp_def": []
            }
        },
        "ADsaComputation.on_start": {
            "name": "on_start",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ADsaComputation.on_stop": {
            "name": "on_stop",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ADsaComputation.on_pause": {
            "name": "on_pause",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "paused": [
                    "bool"
                ]
            }
        },
        "ADsaComputation.delayed_start": {
            "name": "delayed_start",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ADsaComputation._on_value_msg": {
            "name": "_on_value_msg",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "variable_name": [],
                "msg": [
                    "ADsaMessage"
                ],
                "_": []
            }
        },
        "ADsaComputation.tick": {
            "name": "tick",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ADsaComputation.variant_a": {
            "name": "variant_a",
            "location": 269,
            "return": [],
            "arguments": {
                "self": [],
                "delta": [],
                "best_cost": [],
                "best_values": []
            }
        },
        "ADsaComputation.variant_b": {
            "name": "variant_b",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "delta": [],
                "best_cost": [],
                "best_values": []
            }
        },
        "ADsaComputation.variant_c": {
            "name": "variant_c",
            "location": 304,
            "return": [],
            "arguments": {
                "self": [],
                "delta": [],
                "best_cost": [],
                "best_values": []
            }
        },
        "ADsaComputation.probabilistic_change": {
            "name": "probabilistic_change",
            "location": 324,
            "return": [],
            "arguments": {
                "self": [],
                "best_cost": [],
                "best_values": []
            }
        },
        "ADsaComputation.find_best_values": {
            "name": "find_best_values",
            "location": 338,
            "return": [
                "Tuple[(List[Any], float)]"
            ],
            "arguments": {
                "self": [],
                "assignment": [
                    "Dict[(Any, float)]"
                ]
            }
        },
        "ADsaComputation.exists_violated_constraint": {
            "name": "exists_violated_constraint",
            "location": 380,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyDcop-master/pydcop/algorithms/amaxsum.py": {
        "build_computation": {
            "name": "build_computation",
            "location": 90,
            "return": [],
            "arguments": {
                "comp_def": [
                    "ComputationDef"
                ]
            }
        },
        "MaxSumFactorComputation.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "comp_def": []
            }
        },
        "MaxSumFactorComputation.footprint": {
            "name": "footprint",
            "location": 137,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MaxSumFactorComputation.on_start": {
            "name": "on_start",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MaxSumFactorComputation.on_pause": {
            "name": "on_pause",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "paused": [
                    "bool"
                ]
            }
        },
        "MaxSumFactorComputation._on_maxsum_msg": {
            "name": "_on_maxsum_msg",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "var_name": [],
                "msg": [],
                "t": []
            }
        },
        "MaxSumVariableComputation.__init__": {
            "name": "__init__",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "comp_def": [
                    "ComputationDef"
                ]
            }
        },
        "MaxSumVariableComputation.on_start": {
            "name": "on_start",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MaxSumVariableComputation.on_pause": {
            "name": "on_pause",
            "location": 333,
            "return": [],
            "arguments": {
                "self": [],
                "paused": [
                    "bool"
                ]
            }
        },
        "MaxSumVariableComputation._on_maxsum_msg": {
            "name": "_on_maxsum_msg",
            "location": 366,
            "return": [],
            "arguments": {
                "self": [],
                "factor_name": [],
                "msg": [],
                "t": []
            }
        }
    },
    "pyDcop-master/pydcop/algorithms/dba.py": {
        "build_computation": {
            "name": "build_computation",
            "location": 122,
            "return": [
                "VariableComputation"
            ],
            "arguments": {
                "comp_def": [
                    "ComputationDef"
                ]
            }
        },
        "computation_memory": {
            "name": "computation_memory",
            "location": 130,
            "return": [
                "float"
            ],
            "arguments": {
                "computation": [
                    "VariableComputationNode"
                ]
            }
        },
        "communication_load": {
            "name": "communication_load",
            "location": 154,
            "return": [
                "float"
            ],
            "arguments": {
                "src": [
                    "VariableComputationNode"
                ],
                "target": [
                    "str"
                ]
            }
        },
        "DbaOkMessage.__init__": {
            "name": "__init__",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "DbaOkMessage.value": {
            "name": "value",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DbaOkMessage.size": {
            "name": "size",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DbaOkMessage.__str__": {
            "name": "__str__",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DbaOkMessage.__repr__": {
            "name": "__repr__",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DbaOkMessage.__eq__": {
            "name": "__eq__",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DbaImproveMessage.__init__": {
            "name": "__init__",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "improve": [],
                "current_eval": [],
                "termination_counter": []
            }
        },
        "DbaImproveMessage.current_eval": {
            "name": "current_eval",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DbaImproveMessage.improve": {
            "name": "improve",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DbaImproveMessage.termination_counter": {
            "name": "termination_counter",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DbaImproveMessage.size": {
            "name": "size",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DbaImproveMessage.__str__": {
            "name": "__str__",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DbaImproveMessage.__repr__": {
            "name": "__repr__",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DbaImproveMessage.__eq__": {
            "name": "__eq__",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DbaEndMessage.__init__": {
            "name": "__init__",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DbaEndMessage.size": {
            "name": "size",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DbaEndMessage.__str__": {
            "name": "__str__",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DbaEndMessage.__repr__": {
            "name": "__repr__",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DbaEndMessage.__eq__": {
            "name": "__eq__",
            "location": 261,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DbaComputation.__init__": {
            "name": "__init__",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "variable": [
                    "Variable"
                ],
                "constraints": [
                    "Iterable[RelationProtocol]"
                ],
                "msg_sender": [],
                "mode": [],
                "infinity": [],
                "max_distance": [],
                "comp_def": []
            }
        },
        "DbaComputation.constraints": {
            "name": "constraints",
            "location": 334,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DbaComputation.neighbors": {
            "name": "neighbors",
            "location": 338,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DbaComputation.on_start": {
            "name": "on_start",
            "location": 341,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DbaComputation._on_ok_msg": {
            "name": "_on_ok_msg",
            "location": 352,
            "return": [],
            "arguments": {
                "self": [],
                "variable_name": [],
                "recv_msg": [],
                "_": []
            }
        },
        "DbaComputation._handle_ok_message": {
            "name": "_handle_ok_message",
            "location": 366,
            "return": [],
            "arguments": {
                "self": [],
                "variable_name": [],
                "recv_msg": []
            }
        },
        "DbaComputation.improve": {
            "name": "improve",
            "location": 398,
            "return": [],
            "arguments": {
                "self": [],
                "relations": []
            }
        },
        "DbaComputation._send_improve": {
            "name": "_send_improve",
            "location": 422,
            "return": [],
            "arguments": {
                "self": [],
                "current_eval": []
            }
        },
        "DbaComputation._compute_best_improvement": {
            "name": "_compute_best_improvement",
            "location": 428,
            "return": [],
            "arguments": {
                "self": [],
                "relations": []
            }
        },
        "DbaComputation._send_current_value": {
            "name": "_send_current_value",
            "location": 447,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DbaComputation.compute_eval_value": {
            "name": "compute_eval_value",
            "location": 452,
            "return": [],
            "arguments": {
                "self": [],
                "val": [],
                "relations": []
            }
        },
        "DbaComputation._go_to_wait_improve_mode": {
            "name": "_go_to_wait_improve_mode",
            "location": 484,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DbaComputation._on_improve_msg": {
            "name": "_on_improve_msg",
            "location": 496,
            "return": [],
            "arguments": {
                "self": [],
                "variable_name": [],
                "recv_msg": [],
                "_": []
            }
        },
        "DbaComputation._handle_improve_message": {
            "name": "_handle_improve_message",
            "location": 504,
            "return": [],
            "arguments": {
                "self": [],
                "variable_name": [],
                "recv_msg": []
            }
        },
        "DbaComputation._send_ok": {
            "name": "_send_ok",
            "location": 537,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DbaComputation._increase_weights": {
            "name": "_increase_weights",
            "location": 564,
            "return": [],
            "arguments": {
                "self": [],
                "constraints": []
            }
        },
        "DbaComputation._go_to_wait_ok_mode": {
            "name": "_go_to_wait_ok_mode",
            "location": 570,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DbaComputation._on_end_msg": {
            "name": "_on_end_msg",
            "location": 578,
            "return": [],
            "arguments": {
                "self": [],
                "variable_name": [],
                "recv_msg": [],
                "_": []
            }
        },
        "DbaComputation._send_end_msg": {
            "name": "_send_end_msg",
            "location": 585,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DbaComputation.stop_condition": {
            "name": "stop_condition",
            "location": 590,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DbaComputation._in_wait_ok_mode": {
            "name": "_in_wait_ok_mode",
            "location": 593,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DbaComputation._in_wait_improve_mode": {
            "name": "_in_wait_improve_mode",
            "location": 596,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyDcop-master/pydcop/algorithms/dpop.py": {
        "build_computation": {
            "name": "build_computation",
            "location": 74,
            "return": [],
            "arguments": {
                "comp_def": [
                    "ComputationDef"
                ]
            }
        },
        "computation_memory": {
            "name": "computation_memory",
            "location": 80,
            "return": [],
            "arguments": {}
        },
        "communication_load": {
            "name": "communication_load",
            "location": 84,
            "return": [],
            "arguments": {}
        },
        "DpopMessage.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "msg_type": [],
                "content": []
            }
        },
        "DpopMessage.size": {
            "name": "size",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DpopMessage.__str__": {
            "name": "__str__",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DpopAlgo.__init__": {
            "name": "__init__",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "comp_def": [
                    "ComputationDef"
                ]
            }
        },
        "DpopAlgo.footprint": {
            "name": "footprint",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DpopAlgo.is_root": {
            "name": "is_root",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DpopAlgo.is_leaf": {
            "name": "is_leaf",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DpopAlgo.on_start": {
            "name": "on_start",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DpopAlgo.stop_condition": {
            "name": "stop_condition",
            "location": 285,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DpopAlgo.select_value_and_finish": {
            "name": "select_value_and_finish",
            "location": 292,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "cost": []
            }
        },
        "DpopAlgo._on_util_message": {
            "name": "_on_util_message",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variable_name": [],
                "recv_msg": [],
                "t": []
            }
        },
        "DpopAlgo._compute_utils_msg": {
            "name": "_compute_utils_msg",
            "location": 379,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DpopAlgo._on_value_message": {
            "name": "_on_value_message",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variable_name": [],
                "recv_msg": [],
                "t": []
            }
        }
    },
    "pyDcop-master/pydcop/algorithms/dsa.py": {
        "computation_memory": {
            "name": "computation_memory",
            "location": 138,
            "return": [
                "float"
            ],
            "arguments": {
                "computation": [
                    "VariableComputationNode"
                ]
            }
        },
        "communication_load": {
            "name": "communication_load",
            "location": 163,
            "return": [
                "float"
            ],
            "arguments": {
                "src": [
                    "VariableComputationNode"
                ],
                "target": [
                    "str"
                ]
            }
        },
        "DsaMessage.__init__": {
            "name": "__init__",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "DsaMessage.value": {
            "name": "value",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DsaMessage.size": {
            "name": "size",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DsaMessage.__str__": {
            "name": "__str__",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DsaMessage.__repr__": {
            "name": "__repr__",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DsaMessage.__eq__": {
            "name": "__eq__",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DsaComputation.__init__": {
            "name": "__init__",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "comp_def": [
                    "ComputationDef"
                ]
            }
        },
        "DsaComputation.on_start": {
            "name": "on_start",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DsaComputation._on_value_msg": {
            "name": "_on_value_msg",
            "location": 302,
            "return": [],
            "arguments": {
                "self": [],
                "variable_name": [],
                "recv_msg": [],
                "t": []
            }
        },
        "DsaComputation.evaluate_cycle": {
            "name": "evaluate_cycle",
            "location": 320,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DsaComputation.variant_a": {
            "name": "variant_a",
            "location": 359,
            "return": [],
            "arguments": {
                "self": [],
                "delta": [],
                "best_cost": [],
                "best_values": []
            }
        },
        "DsaComputation.variant_b": {
            "name": "variant_b",
            "location": 369,
            "return": [],
            "arguments": {
                "self": [],
                "delta": [],
                "best_cost": [],
                "best_values": []
            }
        },
        "DsaComputation.variant_c": {
            "name": "variant_c",
            "location": 389,
            "return": [],
            "arguments": {
                "self": [],
                "delta": [],
                "best_cost": [],
                "best_values": []
            }
        },
        "DsaComputation.probabilistic_change": {
            "name": "probabilistic_change",
            "location": 407,
            "return": [],
            "arguments": {
                "self": [],
                "best_cost": [],
                "best_values": []
            }
        },
        "DsaComputation.exists_violated_constraint": {
            "name": "exists_violated_constraint",
            "location": 419,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyDcop-master/pydcop/algorithms/dsatuto.py": {
        "DsaTutoComputation.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "computation_definition": [
                    "ComputationDef"
                ]
            }
        },
        "DsaTutoComputation.on_start": {
            "name": "on_start",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DsaTutoComputation.on_value_msg": {
            "name": "on_value_msg",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "variable_name": [],
                "recv_msg": [],
                "t": []
            }
        },
        "DsaTutoComputation.on_new_cycle": {
            "name": "on_new_cycle",
            "location": 100,
            "return": [
                "Optional[List]"
            ],
            "arguments": {
                "self": [],
                "messages": [],
                "cycle_id": []
            }
        }
    },
    "pyDcop-master/pydcop/algorithms/gdba.py": {
        "build_computation": {
            "name": "build_computation",
            "location": 65,
            "return": [],
            "arguments": {
                "comp_def": [
                    "ComputationDef"
                ]
            }
        },
        "computation_memory": {
            "name": "computation_memory",
            "location": 75,
            "return": [
                "float"
            ],
            "arguments": {
                "computation": [
                    "VariableComputationNode"
                ]
            }
        },
        "communication_load": {
            "name": "communication_load",
            "location": 100,
            "return": [
                "float"
            ],
            "arguments": {
                "src": [
                    "VariableComputationNode"
                ],
                "target": [
                    "str"
                ]
            }
        },
        "break_ties": {
            "name": "break_ties",
            "location": 657,
            "return": [],
            "arguments": {
                "val_list": []
            }
        },
        "GdbaOkMessage.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "GdbaOkMessage.value": {
            "name": "value",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GdbaOkMessage.size": {
            "name": "size",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GdbaOkMessage.__str__": {
            "name": "__str__",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GdbaOkMessage.__repr__": {
            "name": "__repr__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GdbaOkMessage.__eq__": {
            "name": "__eq__",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "GdbaImproveMessage.__init__": {
            "name": "__init__",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "improve": []
            }
        },
        "GdbaImproveMessage.improve": {
            "name": "improve",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GdbaImproveMessage.size": {
            "name": "size",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GdbaImproveMessage.__str__": {
            "name": "__str__",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GdbaImproveMessage.__repr__": {
            "name": "__repr__",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GdbaImproveMessage.__eq__": {
            "name": "__eq__",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "GdbaComputation.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "variable": [
                    "Variable"
                ],
                "constraints": [
                    "Iterable[RelationProtocol]"
                ],
                "mode": [],
                "modifier": [],
                "violation": [],
                "increase_mode": [],
                "msg_sender": [],
                "comp_def": []
            }
        },
        "GdbaComputation.constraints": {
            "name": "constraints",
            "location": 293,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GdbaComputation.neighbors": {
            "name": "neighbors",
            "location": 299,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GdbaComputation.on_start": {
            "name": "on_start",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GdbaComputation._on_ok_msg": {
            "name": "_on_ok_msg",
            "location": 336,
            "return": [],
            "arguments": {
                "self": [],
                "variable_name": [],
                "recv_msg": [],
                "t": []
            }
        },
        "GdbaComputation._handle_ok_message": {
            "name": "_handle_ok_message",
            "location": 352,
            "return": [],
            "arguments": {
                "self": [],
                "variable_name": [],
                "recv_msg": []
            }
        },
        "GdbaComputation._send_improve": {
            "name": "_send_improve",
            "location": 389,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GdbaComputation._compute_best_improvement": {
            "name": "_compute_best_improvement",
            "location": 395,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GdbaComputation._send_current_value": {
            "name": "_send_current_value",
            "location": 419,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GdbaComputation.compute_eval_value": {
            "name": "compute_eval_value",
            "location": 428,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "GdbaComputation._go_to_wait_improve_mode": {
            "name": "_go_to_wait_improve_mode",
            "location": 463,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GdbaComputation._on_improve_message": {
            "name": "_on_improve_message",
            "location": 480,
            "return": [],
            "arguments": {
                "self": [],
                "variable_name": [],
                "recv_msg": [],
                "t": []
            }
        },
        "GdbaComputation._handle_improve_message": {
            "name": "_handle_improve_message",
            "location": 493,
            "return": [],
            "arguments": {
                "self": [],
                "variable_name": [],
                "recv_msg": []
            }
        },
        "GdbaComputation._go_to_wait_ok_mode": {
            "name": "_go_to_wait_ok_mode",
            "location": 543,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GdbaComputation._is_violated": {
            "name": "_is_violated",
            "location": 552,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "rel": [
                    "Tuple[(NAryMatrixRelation, float, float)]"
                ],
                "val": []
            }
        },
        "GdbaComputation._eff_cost": {
            "name": "_eff_cost",
            "location": 574,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "rel": [
                    "NAryMatrixRelation"
                ],
                "val": []
            }
        },
        "GdbaComputation._get_modifier_for_assignment": {
            "name": "_get_modifier_for_assignment",
            "location": 599,
            "return": [],
            "arguments": {
                "self": [],
                "constraint": [
                    "NAryMatrixRelation"
                ],
                "asgt": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "GdbaComputation._increase_modifier": {
            "name": "_increase_modifier",
            "location": 616,
            "return": [],
            "arguments": {
                "self": [],
                "constraint": [
                    "NAryMatrixRelation"
                ],
                "asgt": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "GdbaComputation._increase_cost": {
            "name": "_increase_cost",
            "location": 627,
            "return": [],
            "arguments": {
                "self": [],
                "constraint": [
                    "NAryMatrixRelation"
                ]
            }
        }
    },
    "pyDcop-master/pydcop/algorithms/maxsum.py": {
        "build_computation": {
            "name": "build_computation",
            "location": 118,
            "return": [],
            "arguments": {
                "comp_def": [
                    "ComputationDef"
                ]
            }
        },
        "computation_memory": {
            "name": "computation_memory",
            "location": 127,
            "return": [
                "float"
            ],
            "arguments": {
                "computation": [
                    "Union[(FactorComputationNode, VariableComputationNode)]"
                ]
            }
        },
        "communication_load": {
            "name": "communication_load",
            "location": 174,
            "return": [
                "float"
            ],
            "arguments": {
                "src": [
                    "Union[(FactorComputationNode, VariableComputationNode)]"
                ],
                "target": [
                    "str"
                ]
            }
        },
        "factor_costs_for_var": {
            "name": "factor_costs_for_var",
            "location": 382,
            "return": [],
            "arguments": {
                "factor": [
                    "Constraint"
                ],
                "variable": [
                    "Variable"
                ],
                "recv_costs": [],
                "mode": [
                    "str"
                ]
            }
        },
        "select_value": {
            "name": "select_value",
            "location": 584,
            "return": [
                "Tuple[(Any, float)]"
            ],
            "arguments": {
                "variable": [
                    "Variable"
                ],
                "costs": [
                    "Dict[(str, Dict)]"
                ],
                "mode": [
                    "str"
                ]
            }
        },
        "costs_for_factor": {
            "name": "costs_for_factor",
            "location": 623,
            "return": [
                "Dict[(VarVal, Cost)]"
            ],
            "arguments": {
                "variable": [
                    "Variable"
                ],
                "factor": [
                    "FactorName"
                ],
                "factors": [
                    "List[Constraint]"
                ],
                "costs": [
                    "Dict"
                ]
            }
        },
        "apply_damping": {
            "name": "apply_damping",
            "location": 679,
            "return": [],
            "arguments": {
                "costs_f": [],
                "prev_costs": [],
                "damping": []
            }
        },
        "approx_match": {
            "name": "approx_match",
            "location": 688,
            "return": [],
            "arguments": {
                "costs": [],
                "prev_costs": [],
                "stability_coef": []
            }
        },
        "_valid_assignments": {
            "name": "_valid_assignments",
            "location": 713,
            "return": [],
            "arguments": {
                "constraint": [
                    "Constraint"
                ],
                "infinity_value": []
            }
        },
        "MaxSumMessage.__init__": {
            "name": "__init__",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "costs": [
                    "Dict"
                ]
            }
        },
        "MaxSumMessage.costs": {
            "name": "costs",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MaxSumMessage.size": {
            "name": "size",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MaxSumMessage.__str__": {
            "name": "__str__",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MaxSumMessage.__repr__": {
            "name": "__repr__",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MaxSumMessage.__eq__": {
            "name": "__eq__",
            "location": 243,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MaxSumMessage._simple_repr": {
            "name": "_simple_repr",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MaxSumMessage._from_repr": {
            "name": "_from_repr",
            "location": 265,
            "return": [],
            "arguments": {
                "cls": [],
                "r": []
            }
        },
        "MaxSumFactorComputation.__init__": {
            "name": "__init__",
            "location": 280,
            "return": [],
            "arguments": {
                "self": [],
                "comp_def": [
                    "ComputationDef"
                ]
            }
        },
        "MaxSumFactorComputation.on_start": {
            "name": "on_start",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MaxSumFactorComputation.on_msg": {
            "name": "on_msg",
            "location": 331,
            "return": [],
            "arguments": {
                "self": [],
                "variable_name": [],
                "recv_msg": [],
                "t": []
            }
        },
        "MaxSumFactorComputation.footprint": {
            "name": "footprint",
            "location": 336,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MaxSumFactorComputation.on_new_cycle": {
            "name": "on_new_cycle",
            "location": 339,
            "return": [
                "Optional[List]"
            ],
            "arguments": {
                "self": [],
                "messages": [],
                "cycle_id": []
            }
        },
        "MaxSumVariableComputation.__init__": {
            "name": "__init__",
            "location": 455,
            "return": [],
            "arguments": {
                "self": [],
                "comp_def": [
                    "ComputationDef"
                ]
            }
        },
        "MaxSumVariableComputation.on_msg": {
            "name": "on_msg",
            "location": 490,
            "return": [],
            "arguments": {
                "self": [],
                "variable_name": [],
                "recv_msg": [],
                "t": []
            }
        },
        "MaxSumVariableComputation.on_start": {
            "name": "on_start",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MaxSumVariableComputation.on_new_cycle": {
            "name": "on_new_cycle",
            "location": 525,
            "return": [
                "Optional[List]"
            ],
            "arguments": {
                "self": [],
                "messages": [],
                "cycle_id": []
            }
        },
        "MaxSumVariableComputation._match_previous": {
            "name": "_match_previous",
            "location": 567,
            "return": [],
            "arguments": {
                "self": [],
                "f_name": [],
                "costs": []
            }
        }
    },
    "pyDcop-master/pydcop/algorithms/maxsum_dynamic.py": {
        "DynamicFunctionFactorComputation.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "comp_def": []
            }
        },
        "DynamicFunctionFactorComputation.change_factor_function": {
            "name": "change_factor_function",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "fn": []
            }
        },
        "DynamicFunctionFactorComputation.__str__": {
            "name": "__str__",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DynamicFunctionFactorComputation.__repr__": {
            "name": "__repr__",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FactorWithReadOnlyVariableComputation.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "relation": [],
                "read_only_variables": [],
                "name": [],
                "msg_sender": []
            }
        },
        "FactorWithReadOnlyVariableComputation.on_start": {
            "name": "on_start",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FactorWithReadOnlyVariableComputation._on_new_var_value_msg": {
            "name": "_on_new_var_value_msg",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "var_name": [],
                "msg": [],
                "t": []
            }
        },
        "DynamicFactorComputation.__init__": {
            "name": "__init__",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "relation": [],
                "name": [],
                "msg_sender": []
            }
        },
        "DynamicFactorComputation.on_start": {
            "name": "on_start",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DynamicFactorComputation.change_factor_function": {
            "name": "change_factor_function",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "fn": []
            }
        },
        "DynamicFactorComputation._on_new_var_value_msg": {
            "name": "_on_new_var_value_msg",
            "location": 273,
            "return": [],
            "arguments": {
                "self": [],
                "var_name": [],
                "msg": [],
                "t": []
            }
        },
        "DynamicFactorComputation._send_add_var_msg": {
            "name": "_send_add_var_msg",
            "location": 290,
            "return": [],
            "arguments": {
                "self": [],
                "var_added": []
            }
        },
        "DynamicFactorComputation._send_remove_var_msg": {
            "name": "_send_remove_var_msg",
            "location": 316,
            "return": [],
            "arguments": {
                "self": [],
                "var_removed": []
            }
        },
        "DynamicFactorComputation.subscribe": {
            "name": "subscribe",
            "location": 339,
            "return": [],
            "arguments": {
                "self": [],
                "variable": []
            }
        },
        "DynamicFactorComputation.unsubscribe": {
            "name": "unsubscribe",
            "location": 342,
            "return": [],
            "arguments": {
                "self": [],
                "variable": []
            }
        },
        "DynamicFactorComputation.__str__": {
            "name": "__str__",
            "location": 345,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DynamicFactorComputation.__repr__": {
            "name": "__repr__",
            "location": 348,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DynamicFactorVariableComputation.__init__": {
            "name": "__init__",
            "location": 363,
            "return": [],
            "arguments": {
                "self": [],
                "variable": [],
                "factor_names": [],
                "msg_sender": []
            }
        },
        "DynamicFactorVariableComputation._on_remove_msg": {
            "name": "_on_remove_msg",
            "location": 368,
            "return": [],
            "arguments": {
                "self": [],
                "factor_name": [],
                "msg": [],
                "t": []
            }
        },
        "DynamicFactorVariableComputation._on_add_msg": {
            "name": "_on_add_msg",
            "location": 402,
            "return": [],
            "arguments": {
                "self": [],
                "factor_name": [],
                "msg": [],
                "t": []
            }
        }
    },
    "pyDcop-master/pydcop/algorithms/mgm.py": {
        "computation_memory": {
            "name": "computation_memory",
            "location": 86,
            "return": [
                "float"
            ],
            "arguments": {
                "computation": [
                    "VariableComputationNode"
                ]
            }
        },
        "communication_load": {
            "name": "communication_load",
            "location": 115,
            "return": [
                "float"
            ],
            "arguments": {
                "src": [
                    "VariableComputationNode"
                ],
                "target": [
                    "str"
                ]
            }
        },
        "MgmValueMessage.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "MgmValueMessage.value": {
            "name": "value",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MgmValueMessage.size": {
            "name": "size",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MgmValueMessage.__str__": {
            "name": "__str__",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MgmValueMessage.__repr__": {
            "name": "__repr__",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MgmValueMessage.__eq__": {
            "name": "__eq__",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MgmGainMessage.__init__": {
            "name": "__init__",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "random_nb": []
            }
        },
        "MgmGainMessage.value": {
            "name": "value",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MgmGainMessage.random_nb": {
            "name": "random_nb",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MgmGainMessage.size": {
            "name": "size",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MgmGainMessage.__str__": {
            "name": "__str__",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MgmGainMessage.__repr__": {
            "name": "__repr__",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MgmGainMessage.__eq__": {
            "name": "__eq__",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MgmComputation.__init__": {
            "name": "__init__",
            "location": 226,
            "return": [],
            "arguments": {
                "self": [],
                "computation_definition": [
                    "ComputationDef"
                ]
            }
        },
        "MgmComputation.random_nb": {
            "name": "random_nb",
            "location": 267,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MgmComputation.utilities": {
            "name": "utilities",
            "location": 271,
            "return": [
                "Iterable[RelationProtocol]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MgmComputation.neighbors": {
            "name": "neighbors",
            "location": 275,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MgmComputation.on_start": {
            "name": "on_start",
            "location": 278,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MgmComputation._on_value_msg": {
            "name": "_on_value_msg",
            "location": 313,
            "return": [],
            "arguments": {
                "self": [],
                "variable_name": [],
                "recv_msg": [],
                "t": []
            }
        },
        "MgmComputation._handle_value_message": {
            "name": "_handle_value_message",
            "location": 334,
            "return": [],
            "arguments": {
                "self": [],
                "variable_name": [],
                "recv_msg": []
            }
        },
        "MgmComputation._send_gain": {
            "name": "_send_gain",
            "location": 401,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MgmComputation._send_value": {
            "name": "_send_value",
            "location": 414,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MgmComputation._wait_for_gains": {
            "name": "_wait_for_gains",
            "location": 430,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MgmComputation._compute_best_value": {
            "name": "_compute_best_value",
            "location": 445,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MgmComputation._on_gain_msg": {
            "name": "_on_gain_msg",
            "location": 477,
            "return": [],
            "arguments": {
                "self": [],
                "variable_name": [],
                "recv_msg": [],
                "t": []
            }
        },
        "MgmComputation._handle_gain_message": {
            "name": "_handle_gain_message",
            "location": 499,
            "return": [],
            "arguments": {
                "self": [],
                "variable_name": [],
                "recv_msg": []
            }
        },
        "MgmComputation._break_ties": {
            "name": "_break_ties",
            "location": 547,
            "return": [],
            "arguments": {
                "self": [],
                "max_gain": []
            }
        },
        "MgmComputation._wait_for_values": {
            "name": "_wait_for_values",
            "location": 593,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyDcop-master/pydcop/algorithms/mgm2.py": {
        "computation_memory": {
            "name": "computation_memory",
            "location": 66,
            "return": [
                "float"
            ],
            "arguments": {
                "computation": [
                    "VariableComputationNode"
                ]
            }
        },
        "communication_load": {
            "name": "communication_load",
            "location": 91,
            "return": [
                "float"
            ],
            "arguments": {
                "src": [
                    "VariableComputationNode"
                ],
                "target": [
                    "str"
                ]
            }
        },
        "Mgm2ValueMessage.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Mgm2ValueMessage.value": {
            "name": "value",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mgm2ValueMessage.size": {
            "name": "size",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mgm2ValueMessage.__str__": {
            "name": "__str__",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mgm2ValueMessage.__repr__": {
            "name": "__repr__",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mgm2ValueMessage.__eq__": {
            "name": "__eq__",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Mgm2GainMessage.__init__": {
            "name": "__init__",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Mgm2GainMessage.value": {
            "name": "value",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mgm2GainMessage.size": {
            "name": "size",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mgm2GainMessage.__str__": {
            "name": "__str__",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mgm2GainMessage.__repr__": {
            "name": "__repr__",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mgm2GainMessage.__eq__": {
            "name": "__eq__",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Mgm2OfferMessage.__init__": {
            "name": "__init__",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "offers": [
                    "Dict[(Tuple[(Any, Any)], float)]"
                ],
                "is_offering": []
            }
        },
        "Mgm2OfferMessage.offers": {
            "name": "offers",
            "location": 239,
            "return": [
                "Dict[(Tuple[(Any, Any)], float)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mgm2OfferMessage.is_offering": {
            "name": "is_offering",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mgm2OfferMessage.size": {
            "name": "size",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mgm2OfferMessage._simple_repr": {
            "name": "_simple_repr",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mgm2OfferMessage._from_repr": {
            "name": "_from_repr",
            "location": 280,
            "return": [],
            "arguments": {
                "cls": [],
                "r": []
            }
        },
        "Mgm2OfferMessage.__str__": {
            "name": "__str__",
            "location": 289,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mgm2OfferMessage.__repr__": {
            "name": "__repr__",
            "location": 292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mgm2OfferMessage.__eq__": {
            "name": "__eq__",
            "location": 295,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Mgm2ResponseMessage.__init__": {
            "name": "__init__",
            "location": 309,
            "return": [],
            "arguments": {
                "self": [],
                "accept": [
                    "bool"
                ],
                "value": [],
                "gain": []
            }
        },
        "Mgm2ResponseMessage.accept": {
            "name": "accept",
            "location": 333,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mgm2ResponseMessage.value": {
            "name": "value",
            "location": 337,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mgm2ResponseMessage.gain": {
            "name": "gain",
            "location": 341,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mgm2ResponseMessage.size": {
            "name": "size",
            "location": 345,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mgm2ResponseMessage.__str__": {
            "name": "__str__",
            "location": 348,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mgm2ResponseMessage.__repr__": {
            "name": "__repr__",
            "location": 351,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mgm2ResponseMessage.__eq__": {
            "name": "__eq__",
            "location": 354,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Mgm2GoMessage.__init__": {
            "name": "__init__",
            "location": 372,
            "return": [],
            "arguments": {
                "self": [],
                "go": [
                    "bool"
                ]
            }
        },
        "Mgm2GoMessage.go": {
            "name": "go",
            "location": 377,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mgm2GoMessage.size": {
            "name": "size",
            "location": 381,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mgm2GoMessage.__str__": {
            "name": "__str__",
            "location": 384,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mgm2GoMessage.__repr__": {
            "name": "__repr__",
            "location": 387,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mgm2GoMessage.__eq__": {
            "name": "__eq__",
            "location": 390,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Mgm2Computation.__init__": {
            "name": "__init__",
            "location": 417,
            "return": [],
            "arguments": {
                "self": [],
                "computation_def": [
                    "ComputationDef"
                ]
            }
        },
        "Mgm2Computation.utilities": {
            "name": "utilities",
            "location": 452,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mgm2Computation.neighbors_vars": {
            "name": "neighbors_vars",
            "location": 456,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mgm2Computation.on_start": {
            "name": "on_start",
            "location": 459,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mgm2Computation._compute_best_value": {
            "name": "_compute_best_value",
            "location": 495,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mgm2Computation._compute_offers_to_send": {
            "name": "_compute_offers_to_send",
            "location": 521,
            "return": [
                "Dict[(Tuple[(float, float)], float)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mgm2Computation._find_best_offer": {
            "name": "_find_best_offer",
            "location": 556,
            "return": [
                "Tuple[(List, float)]"
            ],
            "arguments": {
                "self": [],
                "all_offers": [
                    "List[Tuple[(str, Dict)]]"
                ]
            }
        },
        "Mgm2Computation._send_value": {
            "name": "_send_value",
            "location": 605,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mgm2Computation.on_stop": {
            "name": "on_stop",
            "location": 635,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mgm2Computation._send_gain": {
            "name": "_send_gain",
            "location": 638,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mgm2Computation.on_value_msg": {
            "name": "on_value_msg",
            "location": 653,
            "return": [],
            "arguments": {
                "self": [],
                "sender_name": [],
                "msg": [],
                "t": []
            }
        },
        "Mgm2Computation.on_gain_msg": {
            "name": "on_gain_msg",
            "location": 677,
            "return": [],
            "arguments": {
                "self": [],
                "sender_name": [],
                "msg": [],
                "t": []
            }
        },
        "Mgm2Computation.on_offer_msg": {
            "name": "on_offer_msg",
            "location": 699,
            "return": [],
            "arguments": {
                "self": [],
                "sender_name": [],
                "msg": [],
                "t": []
            }
        },
        "Mgm2Computation.on_answer_msg": {
            "name": "on_answer_msg",
            "location": 718,
            "return": [],
            "arguments": {
                "self": [],
                "sender_name": [],
                "msg": [],
                "t": []
            }
        },
        "Mgm2Computation.on_go_msg": {
            "name": "on_go_msg",
            "location": 731,
            "return": [],
            "arguments": {
                "self": [],
                "sender_name": [],
                "msg": [],
                "t": []
            }
        },
        "Mgm2Computation._handle_value_messages": {
            "name": "_handle_value_messages",
            "location": 742,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mgm2Computation._handle_offer_messages": {
            "name": "_handle_offer_messages",
            "location": 787,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mgm2Computation._handle_response_message": {
            "name": "_handle_response_message",
            "location": 858,
            "return": [],
            "arguments": {
                "self": [],
                "variable_name": [],
                "msg": [
                    "Mgm2ResponseMessage"
                ]
            }
        },
        "Mgm2Computation._handle_gain_messages": {
            "name": "_handle_gain_messages",
            "location": 892,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mgm2Computation._handle_go_message": {
            "name": "_handle_go_message",
            "location": 974,
            "return": [],
            "arguments": {
                "self": [],
                "variable": [
                    "str"
                ],
                "msg": [
                    "Mgm2GoMessage"
                ]
            }
        },
        "Mgm2Computation._enter_state": {
            "name": "_enter_state",
            "location": 1003,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Mgm2Computation._clear_agent": {
            "name": "_clear_agent",
            "location": 1022,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mgm2Computation._current_local_cost": {
            "name": "_current_local_cost",
            "location": 1034,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mgm2Computation._neighbor_var": {
            "name": "_neighbor_var",
            "location": 1039,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Mgm2Computation.accept_offer": {
            "name": "accept_offer",
            "location": 1047,
            "return": [],
            "arguments": {
                "self": [],
                "best_offers": [],
                "gain": []
            }
        },
        "Mgm2Computation._compute_cost": {
            "name": "_compute_cost",
            "location": 1061,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyDcop-master/pydcop/algorithms/mixeddsa.py": {
        "build_computation": {
            "name": "build_computation",
            "location": 59,
            "return": [],
            "arguments": {
                "comp_def": [
                    "ComputationDef"
                ]
            }
        },
        "computation_memory": {
            "name": "computation_memory",
            "location": 67,
            "return": [
                "float"
            ],
            "arguments": {
                "computation": [
                    "VariableComputationNode"
                ]
            }
        },
        "communication_load": {
            "name": "communication_load",
            "location": 95,
            "return": [
                "float"
            ],
            "arguments": {
                "src": [
                    "VariableComputationNode"
                ],
                "target": [
                    "str"
                ]
            }
        },
        "MixedDsaMessage.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "MixedDsaMessage.value": {
            "name": "value",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MixedDsaMessage.size": {
            "name": "size",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MixedDsaMessage.__str__": {
            "name": "__str__",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MixedDsaMessage.__repr__": {
            "name": "__repr__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MixedDsaMessage.__eq__": {
            "name": "__eq__",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MixedDsaComputation.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "variable": [],
                "constraints": [],
                "variant": [],
                "proba_hard": [],
                "proba_soft": [],
                "mode": [],
                "comp_def": []
            }
        },
        "MixedDsaComputation.on_start": {
            "name": "on_start",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MixedDsaComputation._on_value_msg": {
            "name": "_on_value_msg",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "variable_name": [],
                "recv_msg": [],
                "t": []
            }
        },
        "MixedDsaComputation._on_neighbors_values": {
            "name": "_on_neighbors_values",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MixedDsaComputation._compute_best_value": {
            "name": "_compute_best_value",
            "location": 381,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MixedDsaComputation._send_value": {
            "name": "_send_value",
            "location": 404,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MixedDsaComputation._compute_dcop_cost": {
            "name": "_compute_dcop_cost",
            "location": 410,
            "return": [
                "Tuple[(float, List[RelationProtocol])]"
            ],
            "arguments": {
                "self": [],
                "assignment": [],
                "soft_cons": [],
                "hard_cons": []
            }
        },
        "MixedDsaComputation._eff_cost": {
            "name": "_eff_cost",
            "location": 448,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "dcop_cost": [
                    "float"
                ],
                "nb_violated_constraints": [
                    "int"
                ]
            }
        },
        "MixedDsaComputation.exists_violated_soft_constraint": {
            "name": "exists_violated_soft_constraint",
            "location": 464,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyDcop-master/pydcop/algorithms/ncbb.py": {
        "computation_memory": {
            "name": "computation_memory",
            "location": 117,
            "return": [],
            "arguments": {}
        },
        "communication_load": {
            "name": "communication_load",
            "location": 121,
            "return": [],
            "arguments": {}
        },
        "build_computation": {
            "name": "build_computation",
            "location": 125,
            "return": [],
            "arguments": {
                "comp_def": [
                    "ComputationDef"
                ]
            }
        },
        "NcbbAlgo.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "computation_definition": [
                    "ComputationDef"
                ]
            }
        },
        "NcbbAlgo._value_msg_registration": {
            "name": "_value_msg_registration",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "variable_name": [],
                "recv_msg": [],
                "t": []
            }
        },
        "NcbbAlgo._cost_msg_registration": {
            "name": "_cost_msg_registration",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "variable_name": [],
                "recv_msg": [],
                "t": []
            }
        },
        "NcbbAlgo._search_msg_registration": {
            "name": "_search_msg_registration",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "variable_name": [],
                "recv_msg": [],
                "t": []
            }
        },
        "NcbbAlgo._search_value_msg_registration": {
            "name": "_search_value_msg_registration",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "variable_name": [],
                "recv_msg": [],
                "t": []
            }
        },
        "NcbbAlgo._search_cost_msg_registration": {
            "name": "_search_cost_msg_registration",
            "location": 201,
            "return": [],
            "arguments": {
                "self": [],
                "variable_name": [],
                "recv_msg": [],
                "t": []
            }
        },
        "NcbbAlgo._stop_msg_registration": {
            "name": "_stop_msg_registration",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "variable_name": [],
                "recv_msg": [],
                "t": []
            }
        },
        "NcbbAlgo.is_root": {
            "name": "is_root",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NcbbAlgo.is_leaf": {
            "name": "is_leaf",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NcbbAlgo.on_start": {
            "name": "on_start",
            "location": 216,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NcbbAlgo.on_new_cycle": {
            "name": "on_new_cycle",
            "location": 228,
            "return": [
                "Optional[List]"
            ],
            "arguments": {
                "self": [],
                "messages": [],
                "cycle_id": []
            }
        },
        "NcbbAlgo.value_phase": {
            "name": "value_phase",
            "location": 279,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [],
                "value": []
            }
        },
        "NcbbAlgo.cost_phase": {
            "name": "cost_phase",
            "location": 318,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [],
                "cost": []
            }
        },
        "NcbbAlgo.search": {
            "name": "search",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NcbbAlgo.agent_cost": {
            "name": "agent_cost",
            "location": 345,
            "return": [],
            "arguments": {
                "self": [],
                "assignment": []
            }
        },
        "NcbbAlgo.lower_bound": {
            "name": "lower_bound",
            "location": 348,
            "return": [],
            "arguments": {
                "self": [],
                "assignment": [],
                "k": []
            }
        }
    },
    "pyDcop-master/pydcop/algorithms/syncbb.py": {
        "get_next_assignment": {
            "name": "get_next_assignment",
            "location": 415,
            "return": [],
            "arguments": {
                "variable": [
                    "Variable"
                ],
                "current_value": [
                    "Optional[VarVal]"
                ],
                "constraints": [
                    "List[Constraint]"
                ],
                "current_path": [
                    "Path"
                ],
                "upper_bound": [
                    "Cost"
                ],
                "mode": [
                    "str"
                ]
            }
        },
        "constraints_for_variable": {
            "name": "constraints_for_variable",
            "location": 476,
            "return": [
                "List[Constraint]"
            ],
            "arguments": {
                "constraints": [
                    "List[Constraint]"
                ],
                "var": [
                    "VarName"
                ]
            }
        },
        "get_value_candidates": {
            "name": "get_value_candidates",
            "location": 482,
            "return": [
                "List[VarVal]"
            ],
            "arguments": {
                "variable": [
                    "Variable"
                ],
                "current_value": [
                    "Optional[VarVal]"
                ]
            }
        },
        "SyncBBComputation.__init__": {
            "name": "__init__",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "computation_definition": [
                    "ComputationDef"
                ]
            }
        },
        "SyncBBComputation.on_start": {
            "name": "on_start",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyncBBComputation.on_terminate_message": {
            "name": "on_terminate_message",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [],
                "_": [],
                "t": []
            }
        },
        "SyncBBComputation.on_forward_message": {
            "name": "on_forward_message",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [],
                "recv_msg": [],
                "t": []
            }
        },
        "SyncBBComputation.on_backward_msg": {
            "name": "on_backward_msg",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [],
                "recv_msg": [],
                "t": []
            }
        }
    },
    "pyDcop-master/pydcop/algorithms/__init__.py": {
        "check_param_value": {
            "name": "check_param_value",
            "location": 383,
            "return": [
                "Any"
            ],
            "arguments": {
                "param_val": [
                    "Any"
                ],
                "param_def": [
                    "AlgoParameterDef"
                ]
            }
        },
        "prepare_algo_params": {
            "name": "prepare_algo_params",
            "location": 446,
            "return": [],
            "arguments": {
                "params": [
                    "Dict[(str, Any)]"
                ],
                "parameters_definitions": [
                    "List[AlgoParameterDef]"
                ]
            }
        },
        "list_available_algorithms": {
            "name": "list_available_algorithms",
            "location": 508,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "load_algorithm_module": {
            "name": "load_algorithm_module",
            "location": 528,
            "return": [],
            "arguments": {
                "algo_name": [
                    "str"
                ]
            }
        },
        "find_computation_implementation": {
            "name": "find_computation_implementation",
            "location": 569,
            "return": [],
            "arguments": {
                "algorithm_module": []
            }
        },
        "is_of_type_by_str": {
            "name": "is_of_type_by_str",
            "location": 591,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "type_str": [
                    "str"
                ]
            }
        },
        "AlgorithmDef.__init__": {
            "name": "__init__",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algo": [
                    "str"
                ],
                "params": [
                    "Dict[(str, Any)]"
                ],
                "mode": [
                    "str"
                ]
            }
        },
        "AlgorithmDef.build_with_default_param": {
            "name": "build_with_default_param",
            "location": 181,
            "return": [],
            "arguments": {
                "algo": [
                    "str"
                ],
                "params": [
                    "Dict[(str, Any)]"
                ],
                "mode": [
                    "str"
                ],
                "parameters_definitions": [
                    "List[AlgoParameterDef]"
                ]
            }
        },
        "AlgorithmDef.algo": {
            "name": "algo",
            "location": 239,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlgorithmDef.mode": {
            "name": "mode",
            "location": 253,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlgorithmDef.param_names": {
            "name": "param_names",
            "location": 263,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlgorithmDef.param_value": {
            "name": "param_value",
            "location": 273,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "str"
                ]
            }
        },
        "AlgorithmDef.params": {
            "name": "params",
            "location": 293,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlgorithmDef._simple_repr": {
            "name": "_simple_repr",
            "location": 306,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlgorithmDef._from_repr": {
            "name": "_from_repr",
            "location": 312,
            "return": [],
            "arguments": {
                "cls": [],
                "r": []
            }
        },
        "AlgorithmDef.__str__": {
            "name": "__str__",
            "location": 320,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlgorithmDef.__repr__": {
            "name": "__repr__",
            "location": 323,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlgorithmDef.__eq__": {
            "name": "__eq__",
            "location": 326,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ComputationDef.__init__": {
            "name": "__init__",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ComputationNode"
                ],
                "algo": [
                    "AlgorithmDef"
                ]
            }
        },
        "ComputationDef.algo": {
            "name": "algo",
            "location": 358,
            "return": [
                "'AlgorithmDef'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComputationDef.node": {
            "name": "node",
            "location": 362,
            "return": [
                "ComputationNode"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComputationDef.name": {
            "name": "name",
            "location": 366,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ComputationDef.__str__": {
            "name": "__str__",
            "location": 369,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ComputationDef.__repr__": {
            "name": "__repr__",
            "location": 372,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ComputationDef.__eq__": {
            "name": "__eq__",
            "location": 375,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "pyDcop-master/pydcop/commands/agent.py": {
        "set_parser": {
            "name": "set_parser",
            "location": 150,
            "return": [],
            "arguments": {
                "subparsers": []
            }
        },
        "run_cmd": {
            "name": "run_cmd",
            "location": 223,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "on_force_exit": {
            "name": "on_force_exit",
            "location": 268,
            "return": [],
            "arguments": {
                "_": [],
                "__": []
            }
        },
        "start_agents": {
            "name": "start_agents",
            "location": 276,
            "return": [],
            "arguments": {
                "names": [
                    "List[str]"
                ],
                "o_addr": [],
                "o_port": [],
                "u_port": [],
                "a_addr": [],
                "a_port": [],
                "delay": [],
                "replication": [],
                "capacity": []
            }
        }
    },
    "pyDcop-master/pydcop/commands/batch.py": {
        "set_parser": {
            "name": "set_parser",
            "location": 98,
            "return": [],
            "arguments": {
                "subparsers": []
            }
        },
        "run_cmd": {
            "name": "run_cmd",
            "location": 118,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "run_batches": {
            "name": "run_batches",
            "location": 149,
            "return": [],
            "arguments": {
                "batches_definition": [],
                "simulate": [
                    "bool"
                ],
                "jobs": []
            }
        },
        "input_files_glob": {
            "name": "input_files_glob",
            "location": 277,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "path_glob": [
                    "str"
                ]
            }
        },
        "list_path_re": {
            "name": "list_path_re",
            "location": 295,
            "return": [],
            "arguments": {
                "path_re": []
            }
        },
        "_path_matches": {
            "name": "_path_matches",
            "location": 301,
            "return": [],
            "arguments": {
                "parts": [],
                "context": []
            }
        },
        "input_files_re": {
            "name": "input_files_re",
            "location": 323,
            "return": [
                "Tuple[(List[str], List[List[str]], List[Dict])]"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "file_re": [
                    "str"
                ],
                "extra_paths": [
                    "List[str]"
                ]
            }
        },
        "estimate_set": {
            "name": "estimate_set",
            "location": 383,
            "return": [
                "int"
            ],
            "arguments": {
                "set_def": [
                    "Dict"
                ]
            }
        },
        "estimate_batch": {
            "name": "estimate_batch",
            "location": 412,
            "return": [],
            "arguments": {
                "batch_def": []
            }
        },
        "run_batch_for_files": {
            "name": "run_batch_for_files",
            "location": 423,
            "return": [],
            "arguments": {
                "file_path": [],
                "extra": [],
                "context": [],
                "iterations": [],
                "batches": [],
                "global_options": [],
                "simulate": []
            }
        },
        "run_batch": {
            "name": "run_batch",
            "location": 445,
            "return": [],
            "arguments": {
                "batch_definition": [
                    "Dict"
                ],
                "context": [
                    "Dict[(str, str)]"
                ],
                "global_options": [
                    "Dict[(str, str)]"
                ],
                "files": [
                    "List[str]"
                ],
                "simulate": [
                    "bool"
                ]
            }
        },
        "register_job": {
            "name": "register_job",
            "location": 501,
            "return": [],
            "arguments": {
                "jid": []
            }
        },
        "log_cmd": {
            "name": "log_cmd",
            "location": 510,
            "return": [],
            "arguments": {
                "cmd_str": [],
                "command_dir": []
            }
        },
        "job_id": {
            "name": "job_id",
            "location": 520,
            "return": [],
            "arguments": {
                "context": [
                    "dict"
                ],
                "combination": [
                    "dict"
                ]
            }
        },
        "run_cli_command": {
            "name": "run_cli_command",
            "location": 527,
            "return": [],
            "arguments": {
                "cli_command": [
                    "str"
                ],
                "command_dir": [
                    "str"
                ],
                "timeout": []
            }
        },
        "check_output_group_kill": {
            "name": "check_output_group_kill",
            "location": 550,
            "return": [],
            "arguments": {}
        },
        "build_final_command": {
            "name": "build_final_command",
            "location": 586,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "command": [
                    "str"
                ],
                "context": [
                    "Dict[(str, str)]"
                ],
                "global_options": [
                    "Dict[(str, str)]"
                ],
                "command_option_combination": [
                    "Dict"
                ],
                "current_dir": [
                    "str"
                ],
                "files": [
                    "List[str]"
                ]
            }
        },
        "regularize_parameters": {
            "name": "regularize_parameters",
            "location": 621,
            "return": [
                "Dict[(str, Union[(List[str], Dict[(str, List[str])])])]"
            ],
            "arguments": {
                "yaml_params": [
                    "Dict"
                ]
            }
        },
        "parameters_configuration": {
            "name": "parameters_configuration",
            "location": 652,
            "return": [
                "List[Dict[(str, Union[(str, Dict)])]]"
            ],
            "arguments": {
                "algo_parameters": [
                    "Dict[(str, Union[(List[str], Dict)])]"
                ]
            }
        },
        "build_option_for_parameters": {
            "name": "build_option_for_parameters",
            "location": 696,
            "return": [
                "str"
            ],
            "arguments": {
                "params": [
                    "Dict[(str, Union[(str, Dict)])]"
                ]
            }
        },
        "build_option_string": {
            "name": "build_option_string",
            "location": 708,
            "return": [],
            "arguments": {
                "option_name": [
                    "str"
                ],
                "option_value": [
                    "str"
                ]
            }
        },
        "expand_variables": {
            "name": "expand_variables",
            "location": 716,
            "return": [],
            "arguments": {
                "to_expand": [
                    "Union[(str, List, Dict)]"
                ],
                "context": [
                    "Dict[(str, Union[(str, Dict)])]"
                ]
            }
        },
        "cd_and_create.__init__": {
            "name": "__init__",
            "location": 739,
            "return": [],
            "arguments": {
                "self": [],
                "target_path": []
            }
        },
        "cd_and_create.__enter__": {
            "name": "__enter__",
            "location": 742,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "cd_and_create.__exit__": {
            "name": "__exit__",
            "location": 750,
            "return": [],
            "arguments": {
                "self": [],
                "etype": [],
                "value": [],
                "traceback": []
            }
        }
    },
    "pyDcop-master/pydcop/commands/consolidate.py": {
        "set_parser": {
            "name": "set_parser",
            "location": 83,
            "return": [],
            "arguments": {
                "subparsers": []
            }
        },
        "run_cmd": {
            "name": "run_cmd",
            "location": 129,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "distribution_cost": {
            "name": "distribution_cost",
            "location": 164,
            "return": [],
            "arguments": {
                "dcop_files": [
                    "List[str]"
                ],
                "distribution_file": [],
                "algo": [],
                "target": []
            }
        },
        "single_distrib_costs": {
            "name": "single_distrib_costs",
            "location": 186,
            "return": [],
            "arguments": {
                "dcop": [],
                "distribution_file": [],
                "algo": []
            }
        },
        "extract": {
            "name": "extract",
            "location": 209,
            "return": [],
            "arguments": {
                "files": [
                    "List[str]"
                ],
                "target": []
            }
        },
        "WriterTarget.write": {
            "name": "write",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        }
    },
    "pyDcop-master/pydcop/commands/distribute.py": {
        "set_parser": {
            "name": "set_parser",
            "location": 167,
            "return": [],
            "arguments": {
                "subparsers": []
            }
        },
        "run_cmd": {
            "name": "run_cmd",
            "location": 226,
            "return": [],
            "arguments": {
                "args": [],
                "timer": [],
                "timeout": []
            }
        },
        "on_timeout": {
            "name": "on_timeout",
            "location": 360,
            "return": [],
            "arguments": {}
        },
        "load_distribution_module": {
            "name": "load_distribution_module",
            "location": 383,
            "return": [],
            "arguments": {
                "dist": []
            }
        },
        "load_graph_module": {
            "name": "load_graph_module",
            "location": 392,
            "return": [],
            "arguments": {
                "graph": []
            }
        },
        "load_algo_module": {
            "name": "load_algo_module",
            "location": 401,
            "return": [],
            "arguments": {
                "algo": []
            }
        }
    },
    "pyDcop-master/pydcop/commands/generate.py": {
        "set_parser": {
            "name": "set_parser",
            "location": 107,
            "return": [],
            "arguments": {
                "main_subparsers": []
            }
        },
        "parser_iot_problem": {
            "name": "parser_iot_problem",
            "location": 150,
            "return": [],
            "arguments": {
                "subparsers": []
            }
        },
        "parser_ising_soft": {
            "name": "parser_ising_soft",
            "location": 177,
            "return": [],
            "arguments": {
                "subparsers": []
            }
        },
        "parser_mixed_problem": {
            "name": "parser_mixed_problem",
            "location": 226,
            "return": [],
            "arguments": {
                "subparsers": []
            }
        },
        "parser_graph_coloring": {
            "name": "parser_graph_coloring",
            "location": 290,
            "return": [],
            "arguments": {
                "subparsers": []
            }
        },
        "run_cmd": {
            "name": "run_cmd",
            "location": 358,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "generate_graph_coloring": {
            "name": "generate_graph_coloring",
            "location": 367,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "generate_mixed_problem": {
            "name": "generate_mixed_problem",
            "location": 449,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "choose_in_available_edges": {
            "name": "choose_in_available_edges",
            "location": 750,
            "return": [],
            "arguments": {
                "available_edges": [],
                "n": []
            }
        },
        "choose_weight": {
            "name": "choose_weight",
            "location": 770,
            "return": [
                "float"
            ],
            "arguments": {}
        },
        "add_edge": {
            "name": "add_edge",
            "location": 778,
            "return": [],
            "arguments": {
                "n": [
                    "int"
                ],
                "c": [
                    "Tuple[(str, str)]"
                ],
                "available": [
                    "Dict[(int, List[Tuple[(str, str)]])]"
                ],
                "edges": [
                    "Dict[(Tuple[(str, str)], List[int])]"
                ],
                "arity": [
                    "int"
                ]
            }
        },
        "write_in_file": {
            "name": "write_in_file",
            "location": 806,
            "return": [],
            "arguments": {
                "filename": [
                    "str"
                ],
                "dcop_str": [
                    "str"
                ]
            }
        },
        "find_objective": {
            "name": "find_objective",
            "location": 816,
            "return": [],
            "arguments": {
                "weights": [
                    "List[float]"
                ],
                "n": [
                    "int"
                ],
                "is_hard": [
                    "bool"
                ]
            }
        },
        "correct_density": {
            "name": "correct_density",
            "location": 829,
            "return": [],
            "arguments": {
                "filename": [
                    "str"
                ],
                "real_density": [
                    "float"
                ]
            }
        },
        "generate_ising": {
            "name": "generate_ising",
            "location": 838,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "_create_ising_constraint": {
            "name": "_create_ising_constraint",
            "location": 870,
            "return": [],
            "arguments": {
                "i": [],
                "j": [],
                "i1": [],
                "j1": [],
                "domain_size": [],
                "variables": []
            }
        }
    },
    "pyDcop-master/pydcop/commands/graph.py": {
        "set_parser": {
            "name": "set_parser",
            "location": 119,
            "return": [],
            "arguments": {
                "subparsers": []
            }
        },
        "run_cmd": {
            "name": "run_cmd",
            "location": 144,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "graph_stats": {
            "name": "graph_stats",
            "location": 165,
            "return": [],
            "arguments": {
                "dcop": [],
                "graph_module": []
            }
        },
        "_error": {
            "name": "_error",
            "location": 196,
            "return": [],
            "arguments": {
                "msg": []
            }
        }
    },
    "pyDcop-master/pydcop/commands/orchestrator.py": {
        "set_parser": {
            "name": "set_parser",
            "location": 185,
            "return": [],
            "arguments": {
                "subparsers": []
            }
        },
        "add_csvline": {
            "name": "add_csvline",
            "location": 329,
            "return": [],
            "arguments": {
                "file": [],
                "mode": [],
                "metrics": []
            }
        },
        "collect_tread": {
            "name": "collect_tread",
            "location": 338,
            "return": [],
            "arguments": {
                "collect_queue": [
                    "Queue"
                ],
                "csv_cb": []
            }
        },
        "prepare_metrics_files": {
            "name": "prepare_metrics_files",
            "location": 351,
            "return": [],
            "arguments": {
                "run": [],
                "end": [],
                "mode": []
            }
        },
        "run_cmd": {
            "name": "run_cmd",
            "location": 391,
            "return": [],
            "arguments": {
                "args": [],
                "timer": [],
                "timeout": []
            }
        },
        "on_force_exit": {
            "name": "on_force_exit",
            "location": 523,
            "return": [],
            "arguments": {
                "sig": [],
                "frame": []
            }
        },
        "on_timeout": {
            "name": "on_timeout",
            "location": 534,
            "return": [],
            "arguments": {}
        },
        "_load_modules": {
            "name": "_load_modules",
            "location": 555,
            "return": [],
            "arguments": {
                "dist": [],
                "algo": []
            }
        },
        "_error": {
            "name": "_error",
            "location": 579,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "_results": {
            "name": "_results",
            "location": 596,
            "return": [],
            "arguments": {
                "status": []
            }
        },
        "NumpyEncoder.default": {
            "name": "default",
            "location": 588,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "pyDcop-master/pydcop/commands/replica_dist.py": {
        "set_parser": {
            "name": "set_parser",
            "location": 107,
            "return": [],
            "arguments": {
                "subparsers": []
            }
        },
        "run_cmd": {
            "name": "run_cmd",
            "location": 160,
            "return": [],
            "arguments": {
                "args": [],
                "timer": [
                    "Timer"
                ],
                "timeout": []
            }
        },
        "on_timeout": {
            "name": "on_timeout",
            "location": 261,
            "return": [],
            "arguments": {}
        },
        "on_force_exit": {
            "name": "on_force_exit",
            "location": 265,
            "return": [],
            "arguments": {
                "sig": [],
                "frame": []
            }
        },
        "_error": {
            "name": "_error",
            "location": 273,
            "return": [],
            "arguments": {
                "msg": [],
                "e": []
            }
        }
    },
    "pyDcop-master/pydcop/commands/run.py": {
        "set_parser": {
            "name": "set_parser",
            "location": 196,
            "return": [],
            "arguments": {
                "subparsers": []
            }
        },
        "run_cmd": {
            "name": "run_cmd",
            "location": 314,
            "return": [],
            "arguments": {
                "args": [],
                "timer": [],
                "timeout": []
            }
        },
        "_orchestrator_error": {
            "name": "_orchestrator_error",
            "location": 436,
            "return": [],
            "arguments": {
                "e": []
            }
        },
        "_results": {
            "name": "_results",
            "location": 452,
            "return": [],
            "arguments": {
                "status": []
            }
        },
        "on_timeout": {
            "name": "on_timeout",
            "location": 475,
            "return": [],
            "arguments": {}
        },
        "on_force_exit": {
            "name": "on_force_exit",
            "location": 497,
            "return": [],
            "arguments": {
                "sig": [],
                "frame": []
            }
        },
        "NumpyEncoder.default": {
            "name": "default",
            "location": 444,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "pyDcop-master/pydcop/commands/solve.py": {
        "set_parser": {
            "name": "set_parser",
            "location": 226,
            "return": [],
            "arguments": {
                "subparsers": []
            }
        },
        "add_csvline": {
            "name": "add_csvline",
            "location": 386,
            "return": [],
            "arguments": {
                "file": [],
                "mode": [],
                "metrics": []
            }
        },
        "collect_tread": {
            "name": "collect_tread",
            "location": 393,
            "return": [],
            "arguments": {
                "collect_queue": [
                    "Queue"
                ],
                "csv_cb": []
            }
        },
        "prepare_metrics_files": {
            "name": "prepare_metrics_files",
            "location": 406,
            "return": [],
            "arguments": {
                "run": [],
                "end": [],
                "mode": []
            }
        },
        "run_cmd": {
            "name": "run_cmd",
            "location": 444,
            "return": [],
            "arguments": {
                "args": [],
                "timer": [],
                "timeout": []
            }
        },
        "on_timeout": {
            "name": "on_timeout",
            "location": 565,
            "return": [],
            "arguments": {}
        },
        "on_force_exit": {
            "name": "on_force_exit",
            "location": 589,
            "return": [],
            "arguments": {
                "sig": [],
                "frame": []
            }
        },
        "_results": {
            "name": "_results",
            "location": 611,
            "return": [],
            "arguments": {
                "status": []
            }
        },
        "NumpyEncoder.default": {
            "name": "default",
            "location": 603,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "pyDcop-master/pydcop/commands/_utils.py": {
        "build_algo_def": {
            "name": "build_algo_def",
            "location": 48,
            "return": [],
            "arguments": {
                "algo_module": [],
                "algo_name": [
                    "str"
                ],
                "objective": [],
                "cli_params": [
                    "List[str]"
                ]
            }
        },
        "prepare_metrics_files": {
            "name": "prepare_metrics_files",
            "location": 138,
            "return": [],
            "arguments": {
                "run": [],
                "end": [],
                "mode": []
            }
        },
        "add_csvline": {
            "name": "add_csvline",
            "location": 175,
            "return": [],
            "arguments": {
                "file": [],
                "mode": [],
                "metrics": []
            }
        },
        "_error": {
            "name": "_error",
            "location": 182,
            "return": [],
            "arguments": {
                "msg": [],
                "e": []
            }
        },
        "_load_modules": {
            "name": "_load_modules",
            "location": 191,
            "return": [],
            "arguments": {
                "dist": [],
                "algo": []
            }
        },
        "collect_tread": {
            "name": "collect_tread",
            "location": 219,
            "return": [],
            "arguments": {
                "collect_queue": [
                    "Queue"
                ],
                "csv_cb": []
            }
        }
    },
    "pyDcop-master/pydcop/commands/__init__.py": {},
    "pyDcop-master/pydcop/commands/generators/agents.py": {
        "init_cli_parser": {
            "name": "init_cli_parser",
            "location": 127,
            "return": [],
            "arguments": {
                "parent_parser": []
            }
        },
        "generate": {
            "name": "generate",
            "location": 186,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "check_args": {
            "name": "check_args",
            "location": 237,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "generate_agents_names": {
            "name": "generate_agents_names",
            "location": 263,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "mode": [
                    "str"
                ],
                "count": [],
                "variables": [],
                "agent_prefix": []
            }
        },
        "generate_agents_from_count": {
            "name": "generate_agents_from_count",
            "location": 273,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "agent_count": [
                    "int"
                ],
                "agent_prefix": []
            }
        },
        "generate_agents_from_variables": {
            "name": "generate_agents_from_variables",
            "location": 279,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "variables": [
                    "List[str]"
                ],
                "agent_prefix": []
            }
        },
        "agent_variables_mapping": {
            "name": "agent_variables_mapping",
            "location": 285,
            "return": [
                "Dict[(str, List[str])]"
            ],
            "arguments": {
                "hosting_mode": [
                    "str"
                ],
                "agents": [
                    "List[str]"
                ],
                "variables": [
                    "List[str]"
                ]
            }
        },
        "generate_hosting_costs": {
            "name": "generate_hosting_costs",
            "location": 294,
            "return": [],
            "arguments": {
                "mode": [
                    "str"
                ],
                "mapping": [
                    "Dict[(str, List[str])]"
                ]
            }
        },
        "generate_routes_costs": {
            "name": "generate_routes_costs",
            "location": 305,
            "return": [
                "Dict[(str, Dict[(str, float)])]"
            ],
            "arguments": {
                "mode": [
                    "str"
                ],
                "mapping": [],
                "dcop": []
            }
        },
        "find_corresponding_variables": {
            "name": "find_corresponding_variables",
            "location": 349,
            "return": [
                "Dict[(str, List[str])]"
            ],
            "arguments": {
                "agents": [
                    "List[str]"
                ],
                "variables": [
                    "List[str]"
                ],
                "agt_prefix": [],
                "var_prefix": []
            }
        },
        "find_corresponding_variables_start_with": {
            "name": "find_corresponding_variables_start_with",
            "location": 390,
            "return": [
                "Dict[(str, List[str])]"
            ],
            "arguments": {
                "agents": [
                    "List[str]"
                ],
                "variables": [
                    "List[str]"
                ],
                "agt_prefix": [],
                "var_prefix": []
            }
        },
        "find_prefix": {
            "name": "find_prefix",
            "location": 427,
            "return": [
                "str"
            ],
            "arguments": {
                "names": [
                    "List[str]"
                ]
            }
        }
    },
    "pyDcop-master/pydcop/commands/generators/graphcoloring.py": {
        "init_cli_parser": {
            "name": "init_cli_parser",
            "location": 154,
            "return": [],
            "arguments": {
                "parent_parser": []
            }
        },
        "generate": {
            "name": "generate",
            "location": 238,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "generate_random_graph": {
            "name": "generate_random_graph",
            "location": 310,
            "return": [],
            "arguments": {
                "variables_count": [],
                "p_edge": [],
                "allow_subgraph": []
            }
        },
        "generate_scalefree_graph": {
            "name": "generate_scalefree_graph",
            "location": 322,
            "return": [],
            "arguments": {
                "variables_count": [],
                "m_edge": [],
                "allow_subgraph": []
            }
        },
        "generate_grid_graph": {
            "name": "generate_grid_graph",
            "location": 342,
            "return": [],
            "arguments": {
                "variables_count": []
            }
        },
        "generate_soft_constraints": {
            "name": "generate_soft_constraints",
            "location": 355,
            "return": [],
            "arguments": {
                "graph": [],
                "variables": [],
                "intentional": []
            }
        },
        "generate_hard_constraints": {
            "name": "generate_hard_constraints",
            "location": 378,
            "return": [],
            "arguments": {
                "graph": [],
                "variables": [],
                "intentional": []
            }
        }
    },
    "pyDcop-master/pydcop/commands/generators/iot.py": {
        "generate_iot": {
            "name": "generate_iot",
            "location": 74,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "generate_powerlaw_var_constraints": {
            "name": "generate_powerlaw_var_constraints",
            "location": 169,
            "return": [
                "Tuple[(Dict[(str, Variable)], Dict[(str, Constraint)], Domain)]"
            ],
            "arguments": {
                "num_var": [
                    "int"
                ],
                "domain_size": [
                    "int"
                ],
                "constraint_range": [
                    "int"
                ]
            }
        },
        "agt_route_costs": {
            "name": "agt_route_costs",
            "location": 227,
            "return": [
                "Dict[(str, float)]"
            ],
            "arguments": {
                "var_comp": [
                    "ComputationNode"
                ],
                "cg": [
                    "ComputationGraph"
                ]
            }
        },
        "agt_hosting_costs": {
            "name": "agt_hosting_costs",
            "location": 257,
            "return": [
                "Dict[(str, float)]"
            ],
            "arguments": {
                "var_comp": [
                    "ComputationNode"
                ],
                "cg": [
                    "ComputationGraph"
                ]
            }
        },
        "distribute_factors": {
            "name": "distribute_factors",
            "location": 284,
            "return": [
                "Dict[(str, List[str])]"
            ],
            "arguments": {
                "agents": [
                    "Dict[(str, AgentDef)]"
                ],
                "cg": [
                    "ComputationGraph"
                ],
                "footprints": [
                    "Dict[(str, float)]"
                ],
                "mapping": [
                    "Dict[(str, List[str])]"
                ],
                "msg_load": [
                    "Callable[([str, str], float)]"
                ]
            }
        },
        "agt_name": {
            "name": "agt_name",
            "location": 360,
            "return": [],
            "arguments": {
                "var_name": [
                    "str"
                ]
            }
        },
        "var_name": {
            "name": "var_name",
            "location": 364,
            "return": [],
            "arguments": {
                "i": [
                    "int"
                ]
            }
        },
        "c_name": {
            "name": "c_name",
            "location": 368,
            "return": [],
            "arguments": {
                "i": [
                    "int"
                ],
                "j": [
                    "int"
                ]
            }
        },
        "msg_load_func": {
            "name": "msg_load_func",
            "location": 372,
            "return": [
                "Callable[([str, str], float)]"
            ],
            "arguments": {
                "cg": [
                    "ComputationGraph"
                ],
                "communication_load": [
                    "Callable[([ComputationNode, str], float)]"
                ]
            }
        },
        "write_in_file": {
            "name": "write_in_file",
            "location": 386,
            "return": [],
            "arguments": {
                "filename": [
                    "str"
                ],
                "dcop_str": [
                    "str"
                ]
            }
        },
        "msg_load_func.msg_load": {
            "name": "msg_load",
            "location": 375,
            "return": [
                "float"
            ],
            "arguments": {
                "c1": [
                    "str"
                ],
                "c2": [
                    "str"
                ]
            }
        }
    },
    "pyDcop-master/pydcop/commands/generators/ising.py": {
        "init_cli_parser": {
            "name": "init_cli_parser",
            "location": 157,
            "return": [],
            "arguments": {
                "parent_parser": []
            }
        },
        "generate": {
            "name": "generate",
            "location": 213,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "generate_ising": {
            "name": "generate_ising",
            "location": 274,
            "return": [
                "Tuple[(DCOP, Dict, Dict)]"
            ],
            "arguments": {
                "row_count": [
                    "int"
                ],
                "col_count": [
                    "int"
                ],
                "bin_range": [
                    "float"
                ],
                "un_range": [
                    "float"
                ],
                "extensive": [
                    "bool"
                ],
                "no_agents": [
                    "bool"
                ],
                "fg_dist": [
                    "bool"
                ],
                "var_dist": [
                    "bool"
                ]
            }
        },
        "generate_binary_variables": {
            "name": "generate_binary_variables",
            "location": 334,
            "return": [],
            "arguments": {
                "grid_graph": [
                    "nx.Graph"
                ],
                "domain": [
                    "Domain"
                ]
            }
        },
        "generate_binary_constraints": {
            "name": "generate_binary_constraints",
            "location": 343,
            "return": [
                "Dict[(str, Constraint)]"
            ],
            "arguments": {
                "grid_graph": [
                    "nx.Graph"
                ],
                "variables": [],
                "bin_range": [
                    "float"
                ],
                "extensive": [
                    "bool"
                ]
            }
        },
        "generate_binary_extensive_constraint": {
            "name": "generate_binary_extensive_constraint",
            "location": 362,
            "return": [
                "Constraint"
            ],
            "arguments": {
                "variable1": [
                    "Variable"
                ],
                "variable2": [
                    "Variable"
                ],
                "bin_range": [
                    "float"
                ]
            }
        },
        "generate_binary_intentional_constraint": {
            "name": "generate_binary_intentional_constraint",
            "location": 385,
            "return": [
                "Constraint"
            ],
            "arguments": {
                "variable1": [
                    "Variable"
                ],
                "variable2": [
                    "Variable"
                ],
                "bin_range": [
                    "float"
                ]
            }
        },
        "generate_unary_constraints": {
            "name": "generate_unary_constraints",
            "location": 399,
            "return": [
                "Dict[(str, Constraint)]"
            ],
            "arguments": {
                "variables": [
                    "Dict[(Any, Variable)]"
                ],
                "un_range": [
                    "float"
                ],
                "extensive": [
                    "bool"
                ]
            }
        },
        "generate_unary_extensive_constraint": {
            "name": "generate_unary_extensive_constraint",
            "location": 412,
            "return": [
                "Constraint"
            ],
            "arguments": {
                "variable": [
                    "Variable"
                ],
                "un_range": [
                    "float"
                ]
            }
        },
        "generate_unary_intentional_constraint": {
            "name": "generate_unary_intentional_constraint",
            "location": 423,
            "return": [],
            "arguments": {
                "variable": [
                    "Variable"
                ],
                "un_range": [
                    "float"
                ]
            }
        }
    },
    "pyDcop-master/pydcop/commands/generators/meetingscheduling.py": {
        "init_cli_parser": {
            "name": "init_cli_parser",
            "location": 127,
            "return": [],
            "arguments": {
                "parent_parser": []
            }
        },
        "generate": {
            "name": "generate",
            "location": 210,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "peav_model": {
            "name": "peav_model",
            "location": 317,
            "return": [
                "Tuple[(Dict[(Tuple[(RESOURCE, EVT)], Variable)], Dict[(str, Constraint)], Dict[(str, List[Variable])])]"
            ],
            "arguments": {
                "slots": [
                    "List[SLOT]"
                ],
                "events": [
                    "Dict[(EVT, Event)]"
                ],
                "resources": [
                    "Dict[(RESOURCE, Resource)]"
                ],
                "penalty": []
            }
        },
        "generate_problem_definition": {
            "name": "generate_problem_definition",
            "location": 368,
            "return": [
                "Tuple[(List[SLOT], Dict[(EVT, Event)], Dict[(RESOURCE, Resource)])]"
            ],
            "arguments": {
                "slots_count": [
                    "int"
                ],
                "resources_count": [
                    "int"
                ],
                "max_resource_value": [
                    "VALUE"
                ],
                "events_count": [
                    "int"
                ],
                "max_length_event": [],
                "max_resources_event": []
            }
        },
        "generate_resources": {
            "name": "generate_resources",
            "location": 407,
            "return": [
                "Dict[(RESOURCE, Resource)]"
            ],
            "arguments": {
                "count": [
                    "int"
                ],
                "max_value": [
                    "VALUE"
                ],
                "slots": [
                    "List[SLOT]"
                ]
            }
        },
        "generate_events": {
            "name": "generate_events",
            "location": 418,
            "return": [
                "Dict[(EVT, Event)]"
            ],
            "arguments": {
                "count": [
                    "int"
                ],
                "max_value": [
                    "VALUE"
                ],
                "max_length": [
                    "int"
                ],
                "resources": [
                    "List[Resource]"
                ],
                "max_resources_count": [
                    "int"
                ]
            }
        },
        "peav_variables_for_resource": {
            "name": "peav_variables_for_resource",
            "location": 440,
            "return": [
                "Dict[(Tuple[(RESOURCE, EVT)], Variable)]"
            ],
            "arguments": {
                "resource": [
                    "Resource"
                ],
                "events": [
                    "Dict[(EVT, Event)]"
                ],
                "slots_count": [
                    "int"
                ]
            }
        },
        "peav_intra_extensive_constraints": {
            "name": "peav_intra_extensive_constraints",
            "location": 459,
            "return": [],
            "arguments": {
                "resource": [
                    "Resource"
                ],
                "events": [
                    "Dict[(EVT, Event)]"
                ],
                "variables": [
                    "Dict[(Tuple[(RESOURCE, EVT)], Variable)]"
                ],
                "penalty": []
            }
        },
        "peav_intra_extensive_constraint": {
            "name": "peav_intra_extensive_constraint",
            "location": 503,
            "return": [
                "Constraint"
            ],
            "arguments": {
                "resource": [
                    "Resource"
                ],
                "event1": [
                    "Event"
                ],
                "var1": [
                    "Variable"
                ],
                "event2": [
                    "Event"
                ],
                "var2": [
                    "Variable"
                ],
                "penalty": [
                    "int"
                ],
                "resource_events_count": [
                    "int"
                ]
            }
        },
        "peav_intra_extensive_constraint_value": {
            "name": "peav_intra_extensive_constraint_value",
            "location": 528,
            "return": [
                "float"
            ],
            "arguments": {
                "resource": [
                    "Resource"
                ],
                "event1": [
                    "Event"
                ],
                "event2": [
                    "Event"
                ],
                "penalty": [
                    "int"
                ],
                "resource_events_count": [
                    "int"
                ],
                "t1": [
                    "SLOT"
                ],
                "t2": [
                    "SLOT"
                ]
            }
        },
        "peav_inter_extensive_constraint": {
            "name": "peav_inter_extensive_constraint",
            "location": 588,
            "return": [],
            "arguments": {
                "var1": [],
                "var2": [],
                "penalty": []
            }
        },
        "resource_value_for_event": {
            "name": "resource_value_for_event",
            "location": 603,
            "return": [
                "float"
            ],
            "arguments": {
                "resource": [
                    "Resource"
                ],
                "event": [
                    "Event"
                ],
                "t": [
                    "SLOT"
                ]
            }
        }
    },
    "pyDcop-master/pydcop/commands/generators/scenario.py": {
        "init_cli_parser": {
            "name": "init_cli_parser",
            "location": 104,
            "return": [],
            "arguments": {
                "parent_parser": []
            }
        },
        "generate": {
            "name": "generate",
            "location": 136,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "generate_scenario": {
            "name": "generate_scenario",
            "location": 166,
            "return": [
                "Scenario"
            ],
            "arguments": {
                "evts_count": [],
                "actions_count": [],
                "delay": [],
                "initial_delay": [],
                "end_delay": [],
                "agents": []
            }
        },
        "generate_delay": {
            "name": "generate_delay",
            "location": 188,
            "return": [],
            "arguments": {
                "i": [],
                "lenght": []
            }
        }
    },
    "pyDcop-master/pydcop/commands/generators/secp.py": {
        "parser_secp": {
            "name": "parser_secp",
            "location": 106,
            "return": [],
            "arguments": {
                "subparser": []
            }
        },
        "generate_secp": {
            "name": "generate_secp",
            "location": 129,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "build_agents": {
            "name": "build_agents",
            "location": 178,
            "return": [],
            "arguments": {
                "lights_vars": [],
                "lights_costs": [],
                "capacity": []
            }
        },
        "build_models": {
            "name": "build_models",
            "location": 201,
            "return": [],
            "arguments": {
                "light_domain": [],
                "lights": [],
                "max_model_size": [],
                "model_count": []
            }
        },
        "build_rules": {
            "name": "build_rules",
            "location": 238,
            "return": [],
            "arguments": {
                "rule_count": [],
                "lights_var": [],
                "models_var": [],
                "max_rule_size": []
            }
        },
        "build_lights": {
            "name": "build_lights",
            "location": 306,
            "return": [],
            "arguments": {
                "light_count": [],
                "light_domain": []
            }
        },
        "write_in_file": {
            "name": "write_in_file",
            "location": 324,
            "return": [],
            "arguments": {
                "filename": [
                    "str"
                ],
                "dcop_str": [
                    "str"
                ]
            }
        }
    },
    "pyDcop-master/pydcop/commands/generators/smallworld.py": {
        "generate_small_world": {
            "name": "generate_small_world",
            "location": 50,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "agt_name": {
            "name": "agt_name",
            "location": 191,
            "return": [],
            "arguments": {
                "i": [
                    "int"
                ]
            }
        },
        "var_name": {
            "name": "var_name",
            "location": 195,
            "return": [],
            "arguments": {
                "i": [
                    "int"
                ]
            }
        },
        "c_name": {
            "name": "c_name",
            "location": 199,
            "return": [],
            "arguments": {
                "i": [
                    "int"
                ],
                "j": [
                    "int"
                ]
            }
        },
        "write_in_file": {
            "name": "write_in_file",
            "location": 203,
            "return": [],
            "arguments": {
                "filename": [
                    "str"
                ],
                "dcop_str": [
                    "str"
                ]
            }
        }
    },
    "pyDcop-master/pydcop/commands/generators/__init__.py": {},
    "pyDcop-master/pydcop/computations_graph/constraints_hypergraph.py": {
        "build_computation_graph": {
            "name": "build_computation_graph",
            "location": 176,
            "return": [
                "ComputationConstraintsHyperGraph"
            ],
            "arguments": {
                "dcop": [
                    "DCOP"
                ],
                "variables": [
                    "Iterable[Variable]"
                ],
                "constraints": [
                    "Iterable[Constraint]"
                ]
            }
        },
        "VariableComputationNode.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variable": [
                    "Variable"
                ],
                "constraints": [
                    "Iterable[Constraint]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "VariableComputationNode.variable": {
            "name": "variable",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableComputationNode.constraints": {
            "name": "constraints",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableComputationNode.__eq__": {
            "name": "__eq__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "VariableComputationNode.__str__": {
            "name": "__str__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableComputationNode.__repr__": {
            "name": "__repr__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableComputationNode.__hash__": {
            "name": "__hash__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConstraintLink.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "nodes": [
                    "Iterable[str]"
                ]
            }
        },
        "ConstraintLink.name": {
            "name": "name",
            "location": 131,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConstraintLink.__str__": {
            "name": "__str__",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConstraintLink.__repr__": {
            "name": "__repr__",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConstraintLink.__eq__": {
            "name": "__eq__",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ConstraintLink.__hash__": {
            "name": "__hash__",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ComputationConstraintsHyperGraph.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "Iterable[VariableComputationNode]"
                ]
            }
        },
        "ComputationConstraintsHyperGraph.density": {
            "name": "density",
            "location": 166,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyDcop-master/pydcop/computations_graph/factor_graph.py": {
        "build_computation_graph": {
            "name": "build_computation_graph",
            "location": 245,
            "return": [
                "ComputationsFactorGraph"
            ],
            "arguments": {
                "dcop": [
                    "DCOP"
                ],
                "variables": [
                    "Iterable[Variable]"
                ],
                "constraints": [
                    "Iterable[Constraint]"
                ]
            }
        },
        "FactorComputationNode.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "factor": [
                    "Constraint"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "FactorComputationNode.constraints": {
            "name": "constraints",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FactorComputationNode.variables": {
            "name": "variables",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FactorComputationNode.factor": {
            "name": "factor",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FactorComputationNode.__str__": {
            "name": "__str__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FactorComputationNode.__repr__": {
            "name": "__repr__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FactorComputationNode.__eq__": {
            "name": "__eq__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "FactorComputationNode.__hash__": {
            "name": "__hash__",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FactorComputationNode._simple_repr": {
            "name": "_simple_repr",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableComputationNode.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variable": [
                    "Variable"
                ],
                "constraints_names": [
                    "Iterable[str]"
                ],
                "name": [
                    "Union[(str, None)]"
                ]
            }
        },
        "VariableComputationNode.variable": {
            "name": "variable",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableComputationNode.constraints_names": {
            "name": "constraints_names",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableComputationNode.__str__": {
            "name": "__str__",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableComputationNode.__repr__": {
            "name": "__repr__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableComputationNode.__eq__": {
            "name": "__eq__",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "VariableComputationNode.__hash__": {
            "name": "__hash__",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableComputationNode._simple_repr": {
            "name": "_simple_repr",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FactorGraphLink.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "factor_node": [
                    "str"
                ],
                "variable_node": [
                    "str"
                ]
            }
        },
        "FactorGraphLink.factor_node": {
            "name": "factor_node",
            "location": 183,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FactorGraphLink.variable_node": {
            "name": "variable_node",
            "location": 187,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FactorGraphLink.__str__": {
            "name": "__str__",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FactorGraphLink.__repr__": {
            "name": "__repr__",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FactorGraphLink._simple_repr": {
            "name": "_simple_repr",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FactorGraphLink._from_repr": {
            "name": "_from_repr",
            "location": 205,
            "return": [],
            "arguments": {
                "cls": [],
                "r": []
            }
        },
        "ComputationsFactorGraph.__init__": {
            "name": "__init__",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "var_nodes": [
                    "Iterable[VariableComputationNode]"
                ],
                "factor_nodes": [
                    "Iterable[FactorComputationNode]"
                ]
            }
        },
        "ComputationsFactorGraph.density": {
            "name": "density",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyDcop-master/pydcop/computations_graph/objects.py": {
        "ComputationNode.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "node_type": [
                    "str"
                ],
                "links": [
                    "Iterable['Link']"
                ],
                "neighbors": [
                    "Iterable[str]"
                ]
            }
        },
        "ComputationNode.name": {
            "name": "name",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComputationNode.type": {
            "name": "type",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComputationNode.neighbors": {
            "name": "neighbors",
            "location": 108,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComputationNode.links": {
            "name": "links",
            "location": 112,
            "return": [
                "Iterable['Link']"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComputationNode.__eq__": {
            "name": "__eq__",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ComputationNode.__hash__": {
            "name": "__hash__",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ComputationNode.__repr__": {
            "name": "__repr__",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ComputationNode._simple_repr": {
            "name": "_simple_repr",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Link.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "Iterable[str]"
                ],
                "link_type": [
                    "str"
                ]
            }
        },
        "Link.type": {
            "name": "type",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Link.nodes": {
            "name": "nodes",
            "location": 168,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Link.has_node": {
            "name": "has_node",
            "location": 171,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node_name": [
                    "str"
                ]
            }
        },
        "Link.__str__": {
            "name": "__str__",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Link.__repr__": {
            "name": "__repr__",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Link.__eq__": {
            "name": "__eq__",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Link.__hash__": {
            "name": "__hash__",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ComputationGraph.__init__": {
            "name": "__init__",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph_type": [
                    "str"
                ],
                "nodes": [
                    "Iterable[ComputationNode]"
                ]
            }
        },
        "ComputationGraph.links": {
            "name": "links",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ComputationGraph.node_names": {
            "name": "node_names",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ComputationGraph.computation": {
            "name": "computation",
            "location": 245,
            "return": [
                "ComputationNode"
            ],
            "arguments": {
                "self": [],
                "node_name": [
                    "str"
                ]
            }
        },
        "ComputationGraph.links_for_node": {
            "name": "links_for_node",
            "location": 274,
            "return": [
                "Iterable[Link]"
            ],
            "arguments": {
                "self": [],
                "node_name": [
                    "str"
                ]
            }
        },
        "ComputationGraph.neighbors": {
            "name": "neighbors",
            "location": 299,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "node_name": [
                    "str"
                ]
            }
        },
        "ComputationGraph.density": {
            "name": "density",
            "location": 328,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyDcop-master/pydcop/computations_graph/ordered_graph.py": {
        "build_computation_graph": {
            "name": "build_computation_graph",
            "location": 182,
            "return": [
                "OrderedConstraintGraph"
            ],
            "arguments": {
                "dcop": [
                    "Optional[DCOP]"
                ],
                "variables": [
                    "Iterable[Variable]"
                ],
                "constraints": [
                    "Iterable[Constraint]"
                ]
            }
        },
        "VariableComputationNode.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variable": [
                    "Variable"
                ],
                "constraints": [
                    "Iterable[Constraint]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "VariableComputationNode.variable": {
            "name": "variable",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableComputationNode.constraints": {
            "name": "constraints",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableComputationNode.get_previous": {
            "name": "get_previous",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableComputationNode.get_next": {
            "name": "get_next",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableComputationNode.__eq__": {
            "name": "__eq__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "VariableComputationNode.__str__": {
            "name": "__str__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableComputationNode.__repr__": {
            "name": "__repr__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableComputationNode.__hash__": {
            "name": "__hash__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConstraintLink.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "nodes": [
                    "Iterable[str]"
                ]
            }
        },
        "ConstraintLink.name": {
            "name": "name",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConstraintLink.__str__": {
            "name": "__str__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConstraintLink.__repr__": {
            "name": "__repr__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConstraintLink.__eq__": {
            "name": "__eq__",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ConstraintLink.__hash__": {
            "name": "__hash__",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderLink.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "link_type": [
                    "str"
                ],
                "link_source": [
                    "str"
                ],
                "link_target": []
            }
        },
        "OrderLink.source": {
            "name": "source",
            "location": 132,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderLink.target": {
            "name": "target",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderLink._simple_repr": {
            "name": "_simple_repr",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderLink._from_repr": {
            "name": "_from_repr",
            "location": 164,
            "return": [],
            "arguments": {
                "cls": [],
                "r": []
            }
        },
        "OrderedConstraintGraph.__init__": {
            "name": "__init__",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "Iterable[VariableComputationNode]"
                ]
            }
        }
    },
    "pyDcop-master/pydcop/computations_graph/pseudotree.py": {
        "get_dfs_relations": {
            "name": "get_dfs_relations",
            "location": 178,
            "return": [],
            "arguments": {
                "tree_node": [
                    "PseudoTreeNode"
                ]
            }
        },
        "_find_neighbors_relations": {
            "name": "_find_neighbors_relations",
            "location": 303,
            "return": [],
            "arguments": {
                "node": [],
                "relations": [],
                "nodes": []
            }
        },
        "_generate_dfs_tree": {
            "name": "_generate_dfs_tree",
            "location": 325,
            "return": [],
            "arguments": {
                "variables": [],
                "relations": [],
                "root": []
            }
        },
        "_visit_tree": {
            "name": "_visit_tree",
            "location": 367,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "tree_str_desc": {
            "name": "tree_str_desc",
            "location": 381,
            "return": [],
            "arguments": {
                "root": [],
                "indent_num": []
            }
        },
        "_filter_relation_to_lowest_node": {
            "name": "_filter_relation_to_lowest_node",
            "location": 452,
            "return": [],
            "arguments": {
                "dfs_root": []
            }
        },
        "build_computation_graph": {
            "name": "build_computation_graph",
            "location": 472,
            "return": [
                "ComputationPseudoTree"
            ],
            "arguments": {
                "dcop": [
                    "DCOP"
                ],
                "variables": [
                    "Iterable[Variable]"
                ],
                "constraints": [
                    "Iterable[Constraint]"
                ]
            }
        },
        "PseudoTreeLink.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "link_type": [
                    "str"
                ],
                "source": [
                    "str"
                ],
                "target": [
                    "str"
                ]
            }
        },
        "PseudoTreeLink.source": {
            "name": "source",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PseudoTreeLink.target": {
            "name": "target",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PseudoTreeLink._simple_repr": {
            "name": "_simple_repr",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PseudoTreeLink._from_repr": {
            "name": "_from_repr",
            "location": 118,
            "return": [],
            "arguments": {
                "cls": [],
                "r": []
            }
        },
        "PseudoTreeNode.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variable": [
                    "Variable"
                ],
                "constraints": [
                    "Iterable[Constraint]"
                ],
                "links": [
                    "Iterable[PseudoTreeLink]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "PseudoTreeNode.variable": {
            "name": "variable",
            "location": 154,
            "return": [
                "Variable"
            ],
            "arguments": {
                "self": []
            }
        },
        "PseudoTreeNode.constraints": {
            "name": "constraints",
            "location": 158,
            "return": [
                "Iterable[RelationProtocol]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PseudoTreeNode.__str__": {
            "name": "__str__",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PseudoTreeNode.__repr__": {
            "name": "__repr__",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PseudoTreeNode.__eq__": {
            "name": "__eq__",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PseudoTreeNode.__hash__": {
            "name": "__hash__",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_BuildingNode.__init__": {
            "name": "__init__",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "variable": []
            }
        },
        "_BuildingNode.name": {
            "name": "name",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_BuildingNode.variables": {
            "name": "variables",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_BuildingNode.variable": {
            "name": "variable",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_BuildingNode.handle_token": {
            "name": "handle_token",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [],
                "token": []
            }
        },
        "_BuildingNode._propagate": {
            "name": "_propagate",
            "location": 266,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "_BuildingNode.count_neighbors_in_token": {
            "name": "count_neighbors_in_token",
            "location": 282,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "_BuildingNode.neighbors_count": {
            "name": "neighbors_count",
            "location": 293,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_BuildingNode.__repr__": {
            "name": "__repr__",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_BuildingNode.__str__": {
            "name": "__str__",
            "location": 299,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ComputationPseudoTree.__init__": {
            "name": "__init__",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "roots": [
                    "Iterable[_BuildingNode]"
                ]
            }
        },
        "ComputationPseudoTree.roots": {
            "name": "roots",
            "location": 438,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ComputationPseudoTree.density": {
            "name": "density",
            "location": 441,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ComputationPseudoTree.__str__": {
            "name": "__str__",
            "location": 447,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyDcop-master/pydcop/computations_graph/__init__.py": {},
    "pyDcop-master/pydcop/dcop/dcop.py": {
        "solution_cost": {
            "name": "solution_cost",
            "location": 319,
            "return": [],
            "arguments": {
                "relations": [],
                "variables": [],
                "assignment": [],
                "infinity": []
            }
        },
        "filter_dcop": {
            "name": "filter_dcop",
            "location": 370,
            "return": [],
            "arguments": {
                "dcop": [
                    "DCOP"
                ],
                "accept_unary": []
            }
        },
        "DCOP.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "objective": [
                    "str"
                ],
                "description": [
                    "str"
                ],
                "domains": [
                    "Dict[(str, Domain)]"
                ],
                "variables": [
                    "Dict[(str, Variable)]"
                ],
                "constraints": [
                    "Dict[(str, Constraint)]"
                ],
                "agents": [
                    "Dict[(str, AgentDef)]"
                ]
            }
        },
        "DCOP.all_variables": {
            "name": "all_variables",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DCOP.constraints": {
            "name": "constraints",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DCOP.agents": {
            "name": "agents",
            "location": 92,
            "return": [
                "Dict[(str, AgentDef)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DCOP.agent": {
            "name": "agent",
            "location": 95,
            "return": [
                "AgentDef"
            ],
            "arguments": {
                "self": [],
                "agt_name": [
                    "str"
                ]
            }
        },
        "DCOP.add_variable": {
            "name": "add_variable",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "v": [
                    "Variable"
                ]
            }
        },
        "DCOP.add_constraint": {
            "name": "add_constraint",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "constraint": [
                    "RelationProtocol"
                ]
            }
        },
        "DCOP.__add__": {
            "name": "__add__",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "info": [
                    "Tuple[(str, str, List[Variable])]"
                ]
            }
        },
        "DCOP.add_agents": {
            "name": "add_agents",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agents": [
                    "Union[(AgentDef, Iterable[AgentDef], Mapping[(str, AgentDef)])]"
                ]
            }
        },
        "DCOP.domain": {
            "name": "domain",
            "location": 244,
            "return": [
                "Domain"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "DCOP.variable": {
            "name": "variable",
            "location": 265,
            "return": [
                "Variable"
            ],
            "arguments": {
                "self": [],
                "var_name": [
                    "str"
                ]
            }
        },
        "DCOP.get_external_variable": {
            "name": "get_external_variable",
            "location": 285,
            "return": [
                "ExternalVariable"
            ],
            "arguments": {
                "self": [],
                "var_name": [
                    "str"
                ]
            }
        },
        "DCOP.constraint": {
            "name": "constraint",
            "location": 288,
            "return": [
                "Constraint"
            ],
            "arguments": {
                "self": [],
                "c_name": [
                    "str"
                ]
            }
        },
        "DCOP.solution_cost": {
            "name": "solution_cost",
            "location": 308,
            "return": [],
            "arguments": {
                "self": [],
                "assignment": [],
                "infinity": []
            }
        }
    },
    "pyDcop-master/pydcop/dcop/objects.py": {
        "create_variables": {
            "name": "create_variables",
            "location": 258,
            "return": [
                "Dict[(Union[(str, Tuple[(str, ...)])], Variable)]"
            ],
            "arguments": {
                "name_prefix": [
                    "str"
                ],
                "indexes": [
                    "Union[(str, Tuple, Iterable)]"
                ],
                "domain": [
                    "Domain"
                ],
                "separator": [
                    "str"
                ]
            }
        },
        "create_binary_variables": {
            "name": "create_binary_variables",
            "location": 349,
            "return": [
                "Dict[(Union[(str, Tuple)], BinaryVariable)]"
            ],
            "arguments": {
                "name_prefix": [
                    "str"
                ],
                "indexes": [],
                "separator": [
                    "str"
                ]
            }
        },
        "create_agents": {
            "name": "create_agents",
            "location": 879,
            "return": [
                "Dict[(Union[(str, Tuple[(str, ...)])], AgentDef)]"
            ],
            "arguments": {
                "name_prefix": [
                    "str"
                ],
                "indexes": [
                    "Union[(Iterable, Tuple[Iterable])]"
                ],
                "default_route": [
                    "float"
                ],
                "routes": [
                    "Dict[(str, float)]"
                ],
                "default_hosting_costs": [
                    "float"
                ],
                "hosting_costs": [
                    "Dict[(str, float)]"
                ],
                "separator": [
                    "str"
                ]
            }
        },
        "Domain.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "domain_type": [
                    "str"
                ],
                "values": [
                    "Iterable"
                ]
            }
        },
        "Domain.type": {
            "name": "type",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Domain.name": {
            "name": "name",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Domain.values": {
            "name": "values",
            "location": 78,
            "return": [
                "Iterable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Domain.__iter__": {
            "name": "__iter__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Domain.__getitem__": {
            "name": "__getitem__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "Domain.__len__": {
            "name": "__len__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Domain.__contains__": {
            "name": "__contains__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "Domain.__eq__": {
            "name": "__eq__",
            "location": 94,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "object"
                ]
            }
        },
        "Domain.__str__": {
            "name": "__str__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Domain.__repr__": {
            "name": "__repr__",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Domain.__hash__": {
            "name": "__hash__",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Domain.index": {
            "name": "index",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "Domain.to_domain_value": {
            "name": "to_domain_value",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "val": [
                    "str"
                ]
            }
        },
        "Variable.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "domain": [
                    "Union[(Domain, Iterable[Any])]"
                ],
                "initial_value": []
            }
        },
        "Variable.name": {
            "name": "name",
            "location": 220,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable.domain": {
            "name": "domain",
            "location": 224,
            "return": [
                "Domain"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable.initial_value": {
            "name": "initial_value",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Variable.cost_for_val": {
            "name": "cost_for_val",
            "location": 231,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "Variable.__str__": {
            "name": "__str__",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Variable.__repr__": {
            "name": "__repr__",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Variable.__eq__": {
            "name": "__eq__",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Variable.__hash__": {
            "name": "__hash__",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Variable.clone": {
            "name": "clone",
            "location": 254,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryVariable.__init__": {
            "name": "__init__",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "initial_value": []
            }
        },
        "BinaryVariable.__str__": {
            "name": "__str__",
            "location": 339,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryVariable.__repr__": {
            "name": "__repr__",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryVariable.clone": {
            "name": "clone",
            "location": 345,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableWithCostDict.__init__": {
            "name": "__init__",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "domain": [
                    "Union[(VariableDomain, Iterable[Any])]"
                ],
                "costs": [
                    "Dict[(Any, float)]"
                ],
                "initial_value": []
            }
        },
        "VariableWithCostDict.cost_for_val": {
            "name": "cost_for_val",
            "location": 429,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "VariableWithCostDict.__str__": {
            "name": "__str__",
            "location": 435,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableWithCostDict.__repr__": {
            "name": "__repr__",
            "location": 438,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableWithCostDict.__eq__": {
            "name": "__eq__",
            "location": 443,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "VariableWithCostDict.__hash__": {
            "name": "__hash__",
            "location": 455,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableWithCostDict.clone": {
            "name": "clone",
            "location": 458,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableWithCostFunc.__init__": {
            "name": "__init__",
            "location": 467,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "domain": [
                    "Union[(VariableDomain, Iterable[Any])]"
                ],
                "cost_func": [
                    "Union[(Callable[(..., float)], ExpressionFunction)]"
                ],
                "initial_value": [
                    "Any"
                ]
            }
        },
        "VariableWithCostFunc.cost_for_val": {
            "name": "cost_for_val",
            "location": 498,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "VariableWithCostFunc.__str__": {
            "name": "__str__",
            "location": 505,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableWithCostFunc.__repr__": {
            "name": "__repr__",
            "location": 508,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableWithCostFunc.__eq__": {
            "name": "__eq__",
            "location": 513,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "VariableWithCostFunc.__hash__": {
            "name": "__hash__",
            "location": 527,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableWithCostFunc.clone": {
            "name": "clone",
            "location": 531,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableWithCostFunc._simple_repr": {
            "name": "_simple_repr",
            "location": 536,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableNoisyCostFunc.__init__": {
            "name": "__init__",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "domain": [
                    "Union[(VariableDomain, Iterable[Any])]"
                ],
                "cost_func": [],
                "initial_value": [],
                "noise_level": [
                    "float"
                ]
            }
        },
        "VariableNoisyCostFunc.noise_level": {
            "name": "noise_level",
            "location": 570,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableNoisyCostFunc.cost_for_val": {
            "name": "cost_for_val",
            "location": 573,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "VariableNoisyCostFunc.__str__": {
            "name": "__str__",
            "location": 576,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableNoisyCostFunc.__repr__": {
            "name": "__repr__",
            "location": 579,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableNoisyCostFunc.__eq__": {
            "name": "__eq__",
            "location": 588,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "VariableNoisyCostFunc.__hash__": {
            "name": "__hash__",
            "location": 601,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableNoisyCostFunc.clone": {
            "name": "clone",
            "location": 608,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExternalVariable.__init__": {
            "name": "__init__",
            "location": 632,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "domain": [
                    "Union[(VariableDomain, Iterable[Any])]"
                ],
                "value": []
            }
        },
        "ExternalVariable.value": {
            "name": "value",
            "location": 645,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "ExternalVariable.subscribe": {
            "name": "subscribe",
            "location": 655,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "ExternalVariable.unsubscribe": {
            "name": "unsubscribe",
            "location": 658,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "ExternalVariable._fire": {
            "name": "_fire",
            "location": 661,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ExternalVariable.clone": {
            "name": "clone",
            "location": 665,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AgentDef.__init__": {
            "name": "__init__",
            "location": 717,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "default_route": [
                    "float"
                ],
                "routes": [
                    "Dict[(str, float)]"
                ],
                "default_hosting_cost": [
                    "float"
                ],
                "hosting_costs": [
                    "Dict[(str, float)]"
                ]
            }
        },
        "AgentDef.name": {
            "name": "name",
            "location": 736,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentDef.hosting_cost": {
            "name": "hosting_cost",
            "location": 739,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "computation": [
                    "str"
                ]
            }
        },
        "AgentDef.default_hosting_cost": {
            "name": "default_hosting_cost",
            "location": 773,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentDef.hosting_costs": {
            "name": "hosting_costs",
            "location": 777,
            "return": [
                "Dict[(str, float)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentDef.default_route": {
            "name": "default_route",
            "location": 781,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentDef.routes": {
            "name": "routes",
            "location": 785,
            "return": [
                "Dict[(str, float)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentDef.route": {
            "name": "route",
            "location": 788,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "other_agt": [
                    "str"
                ]
            }
        },
        "AgentDef.extra_attr": {
            "name": "extra_attr",
            "location": 822,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentDef.__getattr__": {
            "name": "__getattr__",
            "location": 838,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "AgentDef.__getstate__": {
            "name": "__getstate__",
            "location": 849,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AgentDef.__setstate__": {
            "name": "__setstate__",
            "location": 852,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "AgentDef.__str__": {
            "name": "__str__",
            "location": 860,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AgentDef.__repr__": {
            "name": "__repr__",
            "location": 863,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AgentDef.__eq__": {
            "name": "__eq__",
            "location": 866,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "pyDcop-master/pydcop/dcop/relations.py": {
        "count_var_match": {
            "name": "count_var_match",
            "location": 1139,
            "return": [],
            "arguments": {
                "var_names": [],
                "relation": []
            }
        },
        "assignment_matrix": {
            "name": "assignment_matrix",
            "location": 1155,
            "return": [],
            "arguments": {
                "variables": [
                    "List[Variable]"
                ],
                "default_value": []
            }
        },
        "random_assignment_matrix": {
            "name": "random_assignment_matrix",
            "location": 1193,
            "return": [],
            "arguments": {
                "variables": [
                    "List[Variable]"
                ],
                "values": [
                    "List"
                ],
                "matrix": []
            }
        },
        "find_dependent_relations": {
            "name": "find_dependent_relations",
            "location": 1219,
            "return": [
                "Iterable[Constraint]"
            ],
            "arguments": {
                "variable": [
                    "Variable"
                ],
                "constraints": [
                    "Iterable[Constraint]"
                ],
                "ext_var_assignment": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "is_compatible": {
            "name": "is_compatible",
            "location": 1257,
            "return": [],
            "arguments": {
                "assignment1": [
                    "Dict[(str, Any)]"
                ],
                "assignment2": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "constraint_from_str": {
            "name": "constraint_from_str",
            "location": 1275,
            "return": [],
            "arguments": {
                "name": [
                    "str"
                ],
                "expression": [
                    "str"
                ],
                "all_variables": [
                    "Iterable[Variable]"
                ]
            }
        },
        "constraint_from_external_definition": {
            "name": "constraint_from_external_definition",
            "location": 1314,
            "return": [],
            "arguments": {
                "name": [
                    "str"
                ],
                "source_file": [
                    "str"
                ],
                "expression": [
                    "str"
                ],
                "all_variables": [
                    "Iterable[Variable]"
                ]
            }
        },
        "add_var_to_rel": {
            "name": "add_var_to_rel",
            "location": 1334,
            "return": [],
            "arguments": {
                "name": [
                    "str"
                ],
                "original_relation": [
                    "RelationProtocol"
                ],
                "variable": [
                    "Variable"
                ],
                "f": []
            }
        },
        "find_optimum": {
            "name": "find_optimum",
            "location": 1367,
            "return": [
                "float"
            ],
            "arguments": {
                "constraint": [
                    "Constraint"
                ],
                "mode": [
                    "str"
                ]
            }
        },
        "get_data_type_max": {
            "name": "get_data_type_max",
            "location": 1403,
            "return": [],
            "arguments": {
                "data_type": []
            }
        },
        "get_data_type_min": {
            "name": "get_data_type_min",
            "location": 1414,
            "return": [],
            "arguments": {
                "data_type": []
            }
        },
        "generate_assignment": {
            "name": "generate_assignment",
            "location": 1424,
            "return": [],
            "arguments": {
                "variables": [
                    "List[Variable]"
                ]
            }
        },
        "generate_assignment_as_dict": {
            "name": "generate_assignment_as_dict",
            "location": 1452,
            "return": [],
            "arguments": {
                "variables": [
                    "List[Variable]"
                ]
            }
        },
        "assignment_cost": {
            "name": "assignment_cost",
            "location": 1479,
            "return": [],
            "arguments": {
                "assignment": [
                    "Dict[(str, Any)]"
                ],
                "constraints": [
                    "Iterable['Constraint']"
                ],
                "consider_variable_cost": []
            }
        },
        "filter_assignment_dict": {
            "name": "filter_assignment_dict",
            "location": 1535,
            "return": [],
            "arguments": {
                "assignment": [],
                "target_vars": []
            }
        },
        "find_arg_optimal": {
            "name": "find_arg_optimal",
            "location": 1554,
            "return": [],
            "arguments": {
                "variable": [],
                "relation": [],
                "mode": []
            }
        },
        "find_optimal": {
            "name": "find_optimal",
            "location": 1594,
            "return": [],
            "arguments": {
                "variable": [
                    "Variable"
                ],
                "assignment": [
                    "Dict"
                ],
                "constraints": [
                    "Iterable[Constraint]"
                ],
                "mode": [
                    "str"
                ]
            }
        },
        "optimal_cost_value": {
            "name": "optimal_cost_value",
            "location": 1641,
            "return": [],
            "arguments": {
                "variable": [
                    "Variable"
                ],
                "mode": [
                    "str"
                ]
            }
        },
        "join": {
            "name": "join",
            "location": 1672,
            "return": [
                "Constraint"
            ],
            "arguments": {
                "u1": [
                    "Constraint"
                ],
                "u2": [
                    "Constraint"
                ]
            }
        },
        "projection": {
            "name": "projection",
            "location": 1717,
            "return": [
                "Constraint"
            ],
            "arguments": {
                "a_rel": [
                    "Constraint"
                ],
                "a_var": [
                    "Variable"
                ],
                "mode": []
            }
        },
        "RelationProtocol.name": {
            "name": "name",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelationProtocol.dimensions": {
            "name": "dimensions",
            "location": 68,
            "return": [
                "List[Variable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelationProtocol.scope_names": {
            "name": "scope_names",
            "location": 76,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelationProtocol.arity": {
            "name": "arity",
            "location": 87,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelationProtocol.shape": {
            "name": "shape",
            "location": 95,
            "return": [
                "Tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelationProtocol.slice": {
            "name": "slice",
            "location": 104,
            "return": [
                "'RelationProtocol'"
            ],
            "arguments": {
                "self": [],
                "partial_assignment": [
                    "Dict[(str, object)]"
                ]
            }
        },
        "RelationProtocol.set_value_for_assignment": {
            "name": "set_value_for_assignment",
            "location": 117,
            "return": [
                "'RelationProtocol'"
            ],
            "arguments": {
                "self": [],
                "assignment": [
                    "Dict[(str, Any)]"
                ],
                "relation_value": []
            }
        },
        "RelationProtocol.get_value_for_assignment": {
            "name": "get_value_for_assignment",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "assignment": []
            }
        },
        "RelationProtocol.__call__": {
            "name": "__call__",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractBaseRelation.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "AbstractBaseRelation.name": {
            "name": "name",
            "location": 199,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractBaseRelation.dimensions": {
            "name": "dimensions",
            "location": 203,
            "return": [
                "List[Variable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractBaseRelation.arity": {
            "name": "arity",
            "location": 207,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractBaseRelation.shape": {
            "name": "shape",
            "location": 211,
            "return": [
                "Tuple[(int, ...)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractBaseRelation.__str__": {
            "name": "__str__",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZeroAryRelation.__init__": {
            "name": "__init__",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "ZeroAryRelation.slice": {
            "name": "slice",
            "location": 228,
            "return": [
                "RelationProtocol"
            ],
            "arguments": {
                "self": [],
                "partial_assignment": [
                    "Dict[(str, object)]"
                ]
            }
        },
        "ZeroAryRelation.set_value_for_assignment": {
            "name": "set_value_for_assignment",
            "location": 237,
            "return": [
                "'ZeroAryRelation'"
            ],
            "arguments": {
                "self": [],
                "assignment": [],
                "relation_value": []
            }
        },
        "ZeroAryRelation.get_value_for_assignment": {
            "name": "get_value_for_assignment",
            "location": 243,
            "return": [],
            "arguments": {
                "self": [],
                "assignment": []
            }
        },
        "ZeroAryRelation.__call__": {
            "name": "__call__",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZeroAryRelation.__str__": {
            "name": "__str__",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZeroAryRelation.__repr__": {
            "name": "__repr__",
            "location": 256,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZeroAryRelation.__eq__": {
            "name": "__eq__",
            "location": 259,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ZeroAryRelation.__hash__": {
            "name": "__hash__",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryFunctionRelation.__init__": {
            "name": "__init__",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "variable": [
                    "Variable"
                ],
                "rel_function": [
                    "Union[(ExpressionFunction, Callable[([Any], Union[(float, int)])])]"
                ]
            }
        },
        "UnaryFunctionRelation.expression": {
            "name": "expression",
            "location": 303,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnaryFunctionRelation.function": {
            "name": "function",
            "location": 314,
            "return": [
                "Callable[([Any], Union[(float, int)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnaryFunctionRelation.slice": {
            "name": "slice",
            "location": 317,
            "return": [
                "RelationProtocol"
            ],
            "arguments": {
                "self": [],
                "partial_assignment": [
                    "Dict[(str, object)]"
                ]
            }
        },
        "UnaryFunctionRelation.get_value_for_assignment": {
            "name": "get_value_for_assignment",
            "location": 330,
            "return": [
                "Union[(float, int)]"
            ],
            "arguments": {
                "self": [],
                "assignment": []
            }
        },
        "UnaryFunctionRelation.set_value_for_assignment": {
            "name": "set_value_for_assignment",
            "location": 343,
            "return": [],
            "arguments": {
                "self": [],
                "assignment": [],
                "relation_value": []
            }
        },
        "UnaryFunctionRelation.__call__": {
            "name": "__call__",
            "location": 348,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryFunctionRelation.__str__": {
            "name": "__str__",
            "location": 357,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryFunctionRelation.__repr__": {
            "name": "__repr__",
            "location": 360,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryFunctionRelation.__eq__": {
            "name": "__eq__",
            "location": 365,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "UnaryFunctionRelation.__hash__": {
            "name": "__hash__",
            "location": 376,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryBooleanRelation.__init__": {
            "name": "__init__",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "var": [
                    "Variable"
                ]
            }
        },
        "UnaryBooleanRelation.slice": {
            "name": "slice",
            "location": 396,
            "return": [
                "RelationProtocol"
            ],
            "arguments": {
                "self": [],
                "partial_assignment": [
                    "Dict[(str, object)]"
                ]
            }
        },
        "UnaryBooleanRelation.get_value_for_assignment": {
            "name": "get_value_for_assignment",
            "location": 412,
            "return": [],
            "arguments": {
                "self": [],
                "assignment": []
            }
        },
        "UnaryBooleanRelation.set_value_for_assignment": {
            "name": "set_value_for_assignment",
            "location": 425,
            "return": [],
            "arguments": {
                "self": [],
                "assignment": [],
                "relation_value": []
            }
        },
        "UnaryBooleanRelation.__call__": {
            "name": "__call__",
            "location": 430,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryBooleanRelation.__str__": {
            "name": "__str__",
            "location": 439,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryBooleanRelation.__repr__": {
            "name": "__repr__",
            "location": 442,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryBooleanRelation.__eq__": {
            "name": "__eq__",
            "location": 445,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "UnaryBooleanRelation.__hash__": {
            "name": "__hash__",
            "location": 452,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryFunctionRelation.__init__": {
            "name": "__init__",
            "location": 478,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable"
                ],
                "variables": [
                    "Iterable[Variable]"
                ],
                "name": [
                    "str"
                ],
                "f_kwargs": []
            }
        },
        "NAryFunctionRelation.expression": {
            "name": "expression",
            "location": 539,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryFunctionRelation.function": {
            "name": "function",
            "location": 550,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryFunctionRelation.slice": {
            "name": "slice",
            "location": 553,
            "return": [
                "RelationProtocol"
            ],
            "arguments": {
                "self": [],
                "partial_assignment": [
                    "Dict[(str, object)]"
                ]
            }
        },
        "NAryFunctionRelation.set_value_for_assignment": {
            "name": "set_value_for_assignment",
            "location": 585,
            "return": [],
            "arguments": {
                "self": [],
                "assignment": [],
                "relation_value": []
            }
        },
        "NAryFunctionRelation.get_value_for_assignment": {
            "name": "get_value_for_assignment",
            "location": 591,
            "return": [],
            "arguments": {
                "self": [],
                "assignment": []
            }
        },
        "NAryFunctionRelation.__call__": {
            "name": "__call__",
            "location": 610,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryFunctionRelation.__repr__": {
            "name": "__repr__",
            "location": 618,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryFunctionRelation.__str__": {
            "name": "__str__",
            "location": 621,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryFunctionRelation.__eq__": {
            "name": "__eq__",
            "location": 624,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "NAryFunctionRelation.__hash__": {
            "name": "__hash__",
            "location": 635,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AsNAryFunctionRelation.__init__": {
            "name": "__init__",
            "location": 664,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsNAryFunctionRelation.__call__": {
            "name": "__call__",
            "location": 667,
            "return": [],
            "arguments": {
                "self": [],
                "f": []
            }
        },
        "NAryMatrixRelation.__init__": {
            "name": "__init__",
            "location": 716,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variables": [
                    "Iterable[Variable]"
                ],
                "matrix": [],
                "name": [
                    "str"
                ]
            }
        },
        "NAryMatrixRelation.slice": {
            "name": "slice",
            "location": 735,
            "return": [
                "'NAryMatrixRelation'"
            ],
            "arguments": {
                "self": [],
                "partial_assignment": [
                    "Dict[(str, object)]"
                ],
                "ignore_extra_vars": []
            }
        },
        "NAryMatrixRelation._slice_matrix": {
            "name": "_slice_matrix",
            "location": 747,
            "return": [],
            "arguments": {
                "self": [],
                "sliced_vars": [],
                "sliced_values": [],
                "ignore_extra_vars": []
            }
        },
        "NAryMatrixRelation.get_value_for_assignment": {
            "name": "get_value_for_assignment",
            "location": 779,
            "return": [],
            "arguments": {
                "self": [],
                "var_values": []
            }
        },
        "NAryMatrixRelation.__call__": {
            "name": "__call__",
            "location": 812,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryMatrixRelation.set_value_for_assignment": {
            "name": "set_value_for_assignment",
            "location": 830,
            "return": [
                "'NAryMatrixRelation'"
            ],
            "arguments": {
                "self": [],
                "var_values": [],
                "rel_value": []
            }
        },
        "NAryMatrixRelation.from_func_relation": {
            "name": "from_func_relation",
            "location": 862,
            "return": [
                "'NAryMatrixRelation'"
            ],
            "arguments": {
                "rel": [
                    "RelationProtocol"
                ]
            }
        },
        "NAryMatrixRelation.__str__": {
            "name": "__str__",
            "location": 876,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryMatrixRelation.__repr__": {
            "name": "__repr__",
            "location": 882,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryMatrixRelation.__eq__": {
            "name": "__eq__",
            "location": 885,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "NAryMatrixRelation.__hash__": {
            "name": "__hash__",
            "location": 896,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryMatrixRelation._simple_repr": {
            "name": "_simple_repr",
            "location": 902,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NeutralRelation.__init__": {
            "name": "__init__",
            "location": 915,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variables": [
                    "Iterable[Variable]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "NeutralRelation.__str__": {
            "name": "__str__",
            "location": 919,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NeutralRelation.__repr__": {
            "name": "__repr__",
            "location": 922,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NeutralRelation.__eq__": {
            "name": "__eq__",
            "location": 925,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "NeutralRelation.slice": {
            "name": "slice",
            "location": 932,
            "return": [
                "RelationProtocol"
            ],
            "arguments": {
                "self": [],
                "partial_assignment": [
                    "Dict[(str, object)]"
                ]
            }
        },
        "NeutralRelation.get_value_for_assignment": {
            "name": "get_value_for_assignment",
            "location": 938,
            "return": [],
            "arguments": {
                "self": [],
                "assignment": []
            }
        },
        "NeutralRelation.__call__": {
            "name": "__call__",
            "location": 941,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NeutralRelation.__hash__": {
            "name": "__hash__",
            "location": 944,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConditionalRelation.__init__": {
            "name": "__init__",
            "location": 969,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "RelationProtocol"
                ],
                "relation_if_true": [
                    "RelationProtocol"
                ],
                "name": [
                    "str"
                ],
                "return_neutral": [
                    "bool"
                ]
            }
        },
        "ConditionalRelation.condition": {
            "name": "condition",
            "location": 998,
            "return": [
                "RelationProtocol"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionalRelation.consequence": {
            "name": "consequence",
            "location": 1002,
            "return": [
                "RelationProtocol"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionalRelation.name": {
            "name": "name",
            "location": 1006,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionalRelation.dimensions": {
            "name": "dimensions",
            "location": 1010,
            "return": [
                "List[Variable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionalRelation.arity": {
            "name": "arity",
            "location": 1019,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionalRelation.shape": {
            "name": "shape",
            "location": 1023,
            "return": [
                "Tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionalRelation.slice": {
            "name": "slice",
            "location": 1026,
            "return": [
                "RelationProtocol"
            ],
            "arguments": {
                "self": [],
                "partial_assignment": [
                    "Dict[(str, object)]"
                ]
            }
        },
        "ConditionalRelation.get_value_for_assignment": {
            "name": "get_value_for_assignment",
            "location": 1075,
            "return": [],
            "arguments": {
                "self": [],
                "assignment": []
            }
        },
        "ConditionalRelation.__call__": {
            "name": "__call__",
            "location": 1107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConditionalRelation.__str__": {
            "name": "__str__",
            "location": 1115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConditionalRelation.__repr__": {
            "name": "__repr__",
            "location": 1118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConditionalRelation.__eq__": {
            "name": "__eq__",
            "location": 1123,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ConditionalRelation.__hash__": {
            "name": "__hash__",
            "location": 1135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "add_var_to_rel.new_rel_f": {
            "name": "new_rel_f",
            "location": 1357,
            "return": [],
            "arguments": {}
        }
    },
    "pyDcop-master/pydcop/dcop/scenario.py": {
        "EventAction.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "type": [
                    "str"
                ]
            }
        },
        "EventAction.type": {
            "name": "type",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EventAction.args": {
            "name": "args",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EventAction.__repr__": {
            "name": "__repr__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DcopEvent.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ],
                "delay": [
                    "float"
                ],
                "actions": [
                    "List[EventAction]"
                ]
            }
        },
        "DcopEvent.id": {
            "name": "id",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DcopEvent.delay": {
            "name": "delay",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DcopEvent.actions": {
            "name": "actions",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DcopEvent.is_delay": {
            "name": "is_delay",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DcopEvent.__repr__": {
            "name": "__repr__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scenario.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "events": [
                    "List[DcopEvent]"
                ]
            }
        },
        "Scenario.__iter__": {
            "name": "__iter__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scenario.events": {
            "name": "events",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyDcop-master/pydcop/dcop/yamldcop.py": {
        "load_dcop_from_file": {
            "name": "load_dcop_from_file",
            "location": 63,
            "return": [],
            "arguments": {
                "filenames": [
                    "Union[(str, Iterable[str])]"
                ]
            }
        },
        "load_dcop": {
            "name": "load_dcop",
            "location": 96,
            "return": [
                "DCOP"
            ],
            "arguments": {
                "dcop_str": [
                    "str"
                ],
                "main_dir": []
            }
        },
        "dcop_yaml": {
            "name": "dcop_yaml",
            "location": 119,
            "return": [
                "str"
            ],
            "arguments": {
                "dcop": [
                    "DCOP"
                ]
            }
        },
        "_yaml_domains": {
            "name": "_yaml_domains",
            "location": 135,
            "return": [],
            "arguments": {
                "domains": []
            }
        },
        "_build_domains": {
            "name": "_build_domains",
            "location": 142,
            "return": [
                "Dict[(str, VariableDomain)]"
            ],
            "arguments": {
                "loaded": []
            }
        },
        "_yaml_variables": {
            "name": "_yaml_variables",
            "location": 157,
            "return": [],
            "arguments": {
                "variables": []
            }
        },
        "_build_variables": {
            "name": "_build_variables",
            "location": 167,
            "return": [
                "Dict[(str, Variable)]"
            ],
            "arguments": {
                "loaded": [],
                "dcop": []
            }
        },
        "_build_external_variables": {
            "name": "_build_external_variables",
            "location": 201,
            "return": [
                "Dict[(str, ExternalVariable)]"
            ],
            "arguments": {
                "loaded": [],
                "dcop": []
            }
        },
        "_build_constraints": {
            "name": "_build_constraints",
            "location": 217,
            "return": [
                "Dict[(str, RelationProtocol)]"
            ],
            "arguments": {
                "loaded": [],
                "dcop": [],
                "main_dir": []
            }
        },
        "_yaml_constraints": {
            "name": "_yaml_constraints",
            "location": 288,
            "return": [],
            "arguments": {
                "constraints": [
                    "Iterable[RelationProtocol]"
                ]
            }
        },
        "_build_agents": {
            "name": "_build_agents",
            "location": 316,
            "return": [
                "Dict[(str, AgentDef)]"
            ],
            "arguments": {
                "loaded": []
            }
        },
        "yaml_agents": {
            "name": "yaml_agents",
            "location": 397,
            "return": [
                "str"
            ],
            "arguments": {
                "agents": [
                    "List[AgentDef]"
                ]
            }
        },
        "_build_dist_hints": {
            "name": "_build_dist_hints",
            "location": 444,
            "return": [],
            "arguments": {
                "loaded": [],
                "dcop": []
            }
        },
        "str_2_domain_values": {
            "name": "str_2_domain_values",
            "location": 479,
            "return": [],
            "arguments": {
                "domain_str": []
            }
        },
        "load_scenario_from_file": {
            "name": "load_scenario_from_file",
            "location": 504,
            "return": [
                "Scenario"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "load_scenario": {
            "name": "load_scenario",
            "location": 516,
            "return": [
                "Scenario"
            ],
            "arguments": {
                "scenario_str": []
            }
        },
        "yaml_scenario": {
            "name": "yaml_scenario",
            "location": 539,
            "return": [
                "str"
            ],
            "arguments": {
                "scenario": [
                    "Scenario"
                ]
            }
        },
        "_dict_event": {
            "name": "_dict_event",
            "location": 546,
            "return": [
                "Dict"
            ],
            "arguments": {
                "event": [
                    "DcopEvent"
                ]
            }
        },
        "_dict_action": {
            "name": "_dict_action",
            "location": 556,
            "return": [
                "Dict"
            ],
            "arguments": {
                "action": [
                    "EventAction"
                ]
            }
        }
    },
    "pyDcop-master/pydcop/dcop/__init__.py": {},
    "pyDcop-master/pydcop/distribution/adhoc.py": {
        "distribute": {
            "name": "distribute",
            "location": 56,
            "return": [],
            "arguments": {
                "computation_graph": [
                    "ComputationGraph"
                ],
                "agentsdef": [
                    "Iterable[AgentDef]"
                ],
                "hints": [
                    "DistributionHints"
                ],
                "computation_memory": [],
                "communication_load": []
            }
        },
        "_distribute_try": {
            "name": "_distribute_try",
            "location": 87,
            "return": [],
            "arguments": {
                "computation_graph": [
                    "ComputationGraph"
                ],
                "agents": [
                    "Iterable[AgentDef]"
                ],
                "hints": [
                    "DistributionHints"
                ],
                "computation_memory": [],
                "communication_load": [],
                "attempt": []
            }
        },
        "distribute_remove": {
            "name": "distribute_remove",
            "location": 187,
            "return": [],
            "arguments": {
                "secp": [],
                "current_distribution": [],
                "removed_device": []
            }
        },
        "distribute_add": {
            "name": "distribute_add",
            "location": 193,
            "return": [],
            "arguments": {
                "secp": [],
                "new_device": [],
                "current_distribution": [],
                "connected_models": []
            }
        }
    },
    "pyDcop-master/pydcop/distribution/gh_cgdp.py": {
        "distribute": {
            "name": "distribute",
            "location": 69,
            "return": [
                "Distribution"
            ],
            "arguments": {
                "computation_graph": [
                    "ComputationGraph"
                ],
                "agentsdef": [
                    "Iterable[AgentDef]"
                ],
                "hints": [],
                "computation_memory": [
                    "Callable[([ComputationNode], float)]"
                ],
                "communication_load": [
                    "Callable[([ComputationNode, str], float)]"
                ],
                "timeout": []
            }
        },
        "distribution_cost": {
            "name": "distribution_cost",
            "location": 186,
            "return": [
                "float"
            ],
            "arguments": {
                "distribution": [
                    "Distribution"
                ],
                "computation_graph": [
                    "ComputationGraph"
                ],
                "agentsdef": [
                    "Iterable[AgentDef]"
                ],
                "computation_memory": [
                    "Callable[([ComputationNode], float)]"
                ],
                "communication_load": [
                    "Callable[([ComputationNode, str], float)]"
                ]
            }
        },
        "candidate_hosts": {
            "name": "candidate_hosts",
            "location": 202,
            "return": [],
            "arguments": {
                "computation": [
                    "ComputationNode"
                ],
                "footprint": [
                    "float"
                ],
                "computations": [
                    "List[Tuple]"
                ],
                "agents": [
                    "Iterable[AgentDef]"
                ],
                "communication_load": [
                    "Callable[([ComputationNode, str], float)]"
                ],
                "mapping": [
                    "Dict[(str, str)]"
                ],
                "fixed_mapping": [
                    "Dict[(str, Tuple[(str, float)])]"
                ]
            }
        }
    },
    "pyDcop-master/pydcop/distribution/gh_secp_cgdp.py": {
        "distribute": {
            "name": "distribute",
            "location": 75,
            "return": [
                "Distribution"
            ],
            "arguments": {
                "computation_graph": [
                    "ComputationGraph"
                ],
                "agentsdef": [
                    "Iterable[AgentDef]"
                ],
                "hints": [
                    "DistributionHints"
                ],
                "computation_memory": [
                    "Callable[([ComputationNode], float)]"
                ],
                "communication_load": [
                    "Callable[([ComputationNode, str], float)]"
                ],
                "timeout": []
            }
        },
        "distribution_cost": {
            "name": "distribution_cost",
            "location": 127,
            "return": [
                "float"
            ],
            "arguments": {
                "distribution": [
                    "Distribution"
                ],
                "computation_graph": [
                    "ComputationGraph"
                ],
                "agentsdef": [
                    "Iterable[AgentDef]"
                ],
                "computation_memory": [
                    "Callable[([ComputationNode], float)]"
                ],
                "communication_load": [
                    "Callable[([ComputationNode, str], float)]"
                ]
            }
        },
        "find_candidates": {
            "name": "find_candidates",
            "location": 142,
            "return": [],
            "arguments": {
                "agents_capa": [
                    "Dict[(str, int)]"
                ],
                "comp": [
                    "str"
                ],
                "footprint": [
                    "float"
                ],
                "mapping": [
                    "Dict"
                ],
                "neighbors": [
                    "Iterable[str]"
                ]
            }
        }
    },
    "pyDcop-master/pydcop/distribution/gh_secp_fgdp.py": {
        "distribute": {
            "name": "distribute",
            "location": 92,
            "return": [
                "Distribution"
            ],
            "arguments": {
                "computation_graph": [
                    "ComputationsFactorGraph"
                ],
                "agentsdef": [
                    "Iterable[AgentDef]"
                ],
                "hints": [
                    "DistributionHints"
                ],
                "computation_memory": [
                    "Callable[([ComputationNode], float)]"
                ],
                "communication_load": [
                    "Callable[([ComputationNode, str], float)]"
                ],
                "timeout": []
            }
        },
        "distribution_cost": {
            "name": "distribution_cost",
            "location": 201,
            "return": [
                "float"
            ],
            "arguments": {
                "distribution": [
                    "Distribution"
                ],
                "computation_graph": [
                    "ComputationGraph"
                ],
                "agentsdef": [
                    "Iterable[AgentDef]"
                ],
                "computation_memory": [
                    "Callable[([ComputationNode], float)]"
                ],
                "communication_load": [
                    "Callable[([ComputationNode, str], float)]"
                ]
            }
        }
    },
    "pyDcop-master/pydcop/distribution/heur_comhost.py": {
        "distribute": {
            "name": "distribute",
            "location": 69,
            "return": [
                "Distribution"
            ],
            "arguments": {
                "computation_graph": [
                    "ComputationGraph"
                ],
                "agentsdef": [
                    "Iterable[AgentDef]"
                ],
                "hints": [
                    "DistributionHints"
                ],
                "computation_memory": [
                    "Callable[([ComputationNode], float)]"
                ],
                "communication_load": [
                    "Callable[([ComputationNode, str], float)]"
                ]
            }
        },
        "distribution_cost": {
            "name": "distribution_cost",
            "location": 156,
            "return": [
                "float"
            ],
            "arguments": {
                "distribution": [
                    "Distribution"
                ],
                "computation_graph": [
                    "ComputationGraph"
                ],
                "agentsdef": [
                    "Iterable[AgentDef]"
                ],
                "computation_memory": [
                    "Callable[([ComputationNode], float)]"
                ],
                "communication_load": [
                    "Callable[([ComputationNode, str], float)]"
                ]
            }
        },
        "candidate_hosts": {
            "name": "candidate_hosts",
            "location": 172,
            "return": [],
            "arguments": {
                "computation": [
                    "ComputationNode"
                ],
                "footprint": [
                    "float"
                ],
                "computations": [
                    "List[Tuple]"
                ],
                "agents": [
                    "Iterable[AgentDef]"
                ],
                "communication_load": [
                    "Callable[([ComputationNode, str], float)]"
                ],
                "mapping": [
                    "Dict[(str, str)]"
                ]
            }
        }
    },
    "pyDcop-master/pydcop/distribution/ilp_compref.py": {
        "distribute": {
            "name": "distribute",
            "location": 79,
            "return": [
                "Distribution"
            ],
            "arguments": {
                "computation_graph": [
                    "ComputationGraph"
                ],
                "agentsdef": [
                    "Iterable[AgentDef]"
                ],
                "hints": [
                    "DistributionHints"
                ],
                "computation_memory": [],
                "communication_load": []
            }
        },
        "distribution_cost": {
            "name": "distribution_cost",
            "location": 110,
            "return": [
                "float"
            ],
            "arguments": {
                "distribution": [
                    "Distribution"
                ],
                "computation_graph": [
                    "ComputationGraph"
                ],
                "agentsdef": [
                    "Iterable[AgentDef]"
                ],
                "computation_memory": [
                    "Callable[([ComputationNode], float)]"
                ],
                "communication_load": [
                    "Callable[([ComputationNode, str], float)]"
                ]
            }
        },
        "lp_model": {
            "name": "lp_model",
            "location": 139,
            "return": [],
            "arguments": {
                "cg": [
                    "ComputationGraph"
                ],
                "agentsdef": [
                    "Iterable[AgentDef]"
                ],
                "footprint": [
                    "Callable[([str], float)]"
                ],
                "capacity": [
                    "Callable[([str], float)]"
                ],
                "route": [
                    "Callable[([str, str], float)]"
                ],
                "msg_load": [
                    "Callable[([str, str], float)]"
                ],
                "hosting_cost": [
                    "Callable[([str, str], float)]"
                ]
            }
        },
        "msg_load_func": {
            "name": "msg_load_func",
            "location": 220,
            "return": [
                "Callable[([str, str], float)]"
            ],
            "arguments": {
                "cg": [
                    "ComputationGraph"
                ],
                "communication_load": [
                    "Callable[([ComputationNode, str], float)]"
                ]
            }
        },
        "capacity_fonc": {
            "name": "capacity_fonc",
            "location": 233,
            "return": [
                "Callable[([str], float)]"
            ],
            "arguments": {
                "agents_def": [
                    "Iterable[AgentDef]"
                ]
            }
        },
        "route_fonc": {
            "name": "route_fonc",
            "location": 246,
            "return": [
                "Callable[([str], float)]"
            ],
            "arguments": {
                "agents_def": [
                    "Iterable[AgentDef]"
                ]
            }
        },
        "footprint_fonc": {
            "name": "footprint_fonc",
            "location": 256,
            "return": [
                "Callable[([str], float)]"
            ],
            "arguments": {
                "cg": [
                    "ComputationGraph"
                ],
                "computation_memory": [
                    "Callable[([ComputationNode, Iterable[Link]], float)]"
                ]
            }
        },
        "hosting_cost_func": {
            "name": "hosting_cost_func",
            "location": 274,
            "return": [
                "Callable[([str, str], float)]"
            ],
            "arguments": {
                "agts_def": [
                    "Iterable[AgentDef]"
                ]
            }
        },
        "_objective": {
            "name": "_objective",
            "location": 288,
            "return": [],
            "arguments": {
                "xs": [],
                "betas": [],
                "route": [],
                "msg_load": [],
                "hosting_cost": []
            }
        },
        "msg_load_func.msg_load": {
            "name": "msg_load",
            "location": 223,
            "return": [
                "float"
            ],
            "arguments": {
                "c1": [
                    "str"
                ],
                "c2": [
                    "str"
                ]
            }
        },
        "capacity_fonc.capacity": {
            "name": "capacity",
            "location": 239,
            "return": [],
            "arguments": {
                "agent_name": []
            }
        },
        "route_fonc.route": {
            "name": "route",
            "location": 249,
            "return": [],
            "arguments": {
                "a1_name": [
                    "str"
                ],
                "a2_name": [
                    "str"
                ]
            }
        },
        "footprint_fonc.footprint": {
            "name": "footprint",
            "location": 268,
            "return": [],
            "arguments": {
                "computation_name": [
                    "str"
                ]
            }
        },
        "hosting_cost_func.cost": {
            "name": "cost",
            "location": 281,
            "return": [],
            "arguments": {
                "agt_name": [
                    "str"
                ],
                "comp_name": [
                    "str"
                ]
            }
        }
    },
    "pyDcop-master/pydcop/distribution/ilp_compref_fg.py": {
        "distribute": {
            "name": "distribute",
            "location": 79,
            "return": [
                "Distribution"
            ],
            "arguments": {
                "computation_graph": [
                    "ComputationGraph"
                ],
                "agentsdef": [
                    "Iterable[AgentDef]"
                ],
                "hints": [
                    "DistributionHints"
                ],
                "computation_memory": [],
                "communication_load": []
            }
        },
        "distribution_cost": {
            "name": "distribution_cost",
            "location": 110,
            "return": [
                "float"
            ],
            "arguments": {
                "distribution": [
                    "Distribution"
                ],
                "computation_graph": [
                    "ComputationGraph"
                ],
                "agentsdef": [
                    "Iterable[AgentDef]"
                ],
                "computation_memory": [
                    "Callable[([ComputationNode], float)]"
                ],
                "communication_load": [
                    "Callable[([ComputationNode, str], float)]"
                ]
            }
        },
        "lp_model": {
            "name": "lp_model",
            "location": 139,
            "return": [],
            "arguments": {
                "cg": [
                    "ComputationGraph"
                ],
                "agentsdef": [
                    "Iterable[AgentDef]"
                ],
                "footprint": [
                    "Callable[([str], float)]"
                ],
                "capacity": [
                    "Callable[([str], float)]"
                ],
                "route": [
                    "Callable[([str, str], float)]"
                ],
                "msg_load": [
                    "Callable[([str, str], float)]"
                ],
                "hosting_cost": [
                    "Callable[([str, str], float)]"
                ]
            }
        },
        "msg_load_func": {
            "name": "msg_load_func",
            "location": 221,
            "return": [
                "Callable[([str, str], float)]"
            ],
            "arguments": {
                "cg": [
                    "ComputationGraph"
                ],
                "communication_load": [
                    "Callable[([ComputationNode, str], float)]"
                ]
            }
        },
        "capacity_fonc": {
            "name": "capacity_fonc",
            "location": 234,
            "return": [
                "Callable[([str], float)]"
            ],
            "arguments": {
                "agents_def": [
                    "Iterable[AgentDef]"
                ]
            }
        },
        "route_fonc": {
            "name": "route_fonc",
            "location": 247,
            "return": [
                "Callable[([str], float)]"
            ],
            "arguments": {
                "agents_def": [
                    "Iterable[AgentDef]"
                ]
            }
        },
        "footprint_fonc": {
            "name": "footprint_fonc",
            "location": 257,
            "return": [
                "Callable[([str], float)]"
            ],
            "arguments": {
                "cg": [
                    "ComputationGraph"
                ],
                "computation_memory": [
                    "Callable[([ComputationNode, Iterable[Link]], float)]"
                ]
            }
        },
        "hosting_cost_func": {
            "name": "hosting_cost_func",
            "location": 275,
            "return": [
                "Callable[([str, str], float)]"
            ],
            "arguments": {
                "agts_def": [
                    "Iterable[AgentDef]"
                ]
            }
        },
        "_objective": {
            "name": "_objective",
            "location": 289,
            "return": [],
            "arguments": {
                "xs": [],
                "betas": [],
                "route": [],
                "msg_load": [],
                "hosting_cost": []
            }
        },
        "msg_load_func.msg_load": {
            "name": "msg_load",
            "location": 224,
            "return": [
                "float"
            ],
            "arguments": {
                "c1": [
                    "str"
                ],
                "c2": [
                    "str"
                ]
            }
        },
        "capacity_fonc.capacity": {
            "name": "capacity",
            "location": 240,
            "return": [],
            "arguments": {
                "agent_name": []
            }
        },
        "route_fonc.route": {
            "name": "route",
            "location": 250,
            "return": [],
            "arguments": {
                "a1_name": [
                    "str"
                ],
                "a2_name": [
                    "str"
                ]
            }
        },
        "footprint_fonc.footprint": {
            "name": "footprint",
            "location": 269,
            "return": [],
            "arguments": {
                "computation_name": [
                    "str"
                ]
            }
        },
        "hosting_cost_func.cost": {
            "name": "cost",
            "location": 282,
            "return": [],
            "arguments": {
                "agt_name": [
                    "str"
                ],
                "comp_name": [
                    "str"
                ]
            }
        }
    },
    "pyDcop-master/pydcop/distribution/ilp_fgdp.py": {
        "distribute": {
            "name": "distribute",
            "location": 68,
            "return": [],
            "arguments": {
                "computation_graph": [
                    "ComputationGraph"
                ],
                "agentsdef": [
                    "Iterable[AgentDef]"
                ],
                "hints": [
                    "DistributionHints"
                ],
                "computation_memory": [],
                "communication_load": []
            }
        },
        "distribution_cost": {
            "name": "distribution_cost",
            "location": 103,
            "return": [
                "float"
            ],
            "arguments": {
                "distribution": [
                    "Distribution"
                ],
                "computation_graph": [
                    "ComputationGraph"
                ],
                "agentsdef": [
                    "Iterable[AgentDef]"
                ],
                "computation_memory": [
                    "Callable[([ComputationNode], float)]"
                ],
                "communication_load": [
                    "Callable[([ComputationNode, str], float)]"
                ]
            }
        },
        "distribute_remove": {
            "name": "distribute_remove",
            "location": 148,
            "return": [],
            "arguments": {
                "secp": [],
                "current_distribution": [],
                "removed_device": []
            }
        },
        "distribute_add": {
            "name": "distribute_add",
            "location": 154,
            "return": [],
            "arguments": {
                "secp": [],
                "new_device": [],
                "current_distribution": [],
                "connected_models": []
            }
        },
        "factor_graph_lp_model": {
            "name": "factor_graph_lp_model",
            "location": 161,
            "return": [],
            "arguments": {
                "cg": [
                    "ComputationsFactorGraph"
                ],
                "agents": [
                    "List[AgentDef]"
                ],
                "must_host": [
                    "Dict[(str, List)]"
                ],
                "computation_memory": [],
                "communication_load": []
            }
        },
        "_build_alphaijk_binvars": {
            "name": "_build_alphaijk_binvars",
            "location": 300,
            "return": [],
            "arguments": {
                "cg": [
                    "ComputationsFactorGraph"
                ],
                "agents_names": [
                    "Iterable[str]"
                ]
            }
        },
        "_build_fs_binvar": {
            "name": "_build_fs_binvar",
            "location": 314,
            "return": [],
            "arguments": {
                "facs_to_host": [],
                "agents_names": []
            }
        },
        "_build_xs_binvar": {
            "name": "_build_xs_binvar",
            "location": 320,
            "return": [],
            "arguments": {
                "vars_to_host": [],
                "agents_names": []
            }
        },
        "_objective_function": {
            "name": "_objective_function",
            "location": 326,
            "return": [],
            "arguments": {
                "cg": [
                    "ComputationGraph"
                ],
                "communication_load": [],
                "alphas": [],
                "agents_names": []
            }
        },
        "_computation_memory_in_cg": {
            "name": "_computation_memory_in_cg",
            "location": 336,
            "return": [],
            "arguments": {
                "computation_name": [
                    "str"
                ],
                "cg": [
                    "ComputationGraph"
                ],
                "computation_memory": []
            }
        }
    },
    "pyDcop-master/pydcop/distribution/objects.py": {
        "Distribution.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "mapping": [
                    "Dict[(str, List[str])]"
                ]
            }
        },
        "Distribution.agents": {
            "name": "agents",
            "location": 64,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Distribution.computations": {
            "name": "computations",
            "location": 77,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Distribution.mapping": {
            "name": "mapping",
            "location": 89,
            "return": [
                "Dict[(str, List[str])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Distribution.agent_for": {
            "name": "agent_for",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "computation": [
                    "str"
                ]
            }
        },
        "Distribution.computations_hosted": {
            "name": "computations_hosted",
            "location": 119,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "str"
                ]
            }
        },
        "Distribution.has_computation": {
            "name": "has_computation",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "computation": [
                    "str"
                ]
            }
        },
        "Distribution.host_on_agent": {
            "name": "host_on_agent",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "agent": [
                    "str"
                ],
                "computations": [
                    "List[str]"
                ]
            }
        },
        "Distribution.is_hosted": {
            "name": "is_hosted",
            "location": 183,
            "return": [],
            "arguments": {
                "dist": [],
                "computations": [
                    "Union[(str, Iterable[str])]"
                ]
            }
        },
        "Distribution.__str__": {
            "name": "__str__",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Distribution.__repr__": {
            "name": "__repr__",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Distribution.__eq__": {
            "name": "__eq__",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DistributionHints.__init__": {
            "name": "__init__",
            "location": 225,
            "return": [],
            "arguments": {
                "self": [],
                "must_host": [],
                "host_with": []
            }
        },
        "DistributionHints.must_host": {
            "name": "must_host",
            "location": 248,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "agt_name": [
                    "str"
                ]
            }
        },
        "DistributionHints.host_with": {
            "name": "host_with",
            "location": 262,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "pyDcop-master/pydcop/distribution/oilp_cgdp.py": {
        "distribute": {
            "name": "distribute",
            "location": 83,
            "return": [
                "Distribution"
            ],
            "arguments": {
                "computation_graph": [
                    "ComputationGraph"
                ],
                "agentsdef": [
                    "Iterable[AgentDef]"
                ],
                "hints": [
                    "DistributionHints"
                ],
                "computation_memory": [],
                "communication_load": [],
                "timeout": []
            }
        },
        "distribution_cost": {
            "name": "distribution_cost",
            "location": 125,
            "return": [
                "float"
            ],
            "arguments": {
                "distribution": [
                    "Distribution"
                ],
                "computation_graph": [
                    "ComputationGraph"
                ],
                "agentsdef": [
                    "Iterable[AgentDef]"
                ],
                "computation_memory": [
                    "Callable[([ComputationNode], float)]"
                ],
                "communication_load": [
                    "Callable[([ComputationNode, str], float)]"
                ]
            }
        },
        "ilp_cgdp": {
            "name": "ilp_cgdp",
            "location": 155,
            "return": [],
            "arguments": {
                "cg": [
                    "ComputationGraph"
                ],
                "agentsdef": [
                    "Iterable[AgentDef]"
                ],
                "footprint": [
                    "Callable[([str], float)]"
                ],
                "capacity": [
                    "Callable[([str], float)]"
                ],
                "route": [
                    "Callable[([str, str], float)]"
                ],
                "msg_load": [
                    "Callable[([str, str], float)]"
                ],
                "hosting_cost": [
                    "Callable[([str, str], float)]"
                ],
                "timeout": []
            }
        },
        "_objective": {
            "name": "_objective",
            "location": 280,
            "return": [],
            "arguments": {
                "xs": [],
                "betas": [],
                "route": [],
                "msg_load": [],
                "hosting_cost": []
            }
        },
        "footprint_fonc": {
            "name": "footprint_fonc",
            "location": 292,
            "return": [
                "Callable[([str], float)]"
            ],
            "arguments": {
                "cg": [
                    "ComputationGraph"
                ],
                "computation_memory": [
                    "Callable[([ComputationNode], float)]"
                ]
            }
        },
        "msg_load_func": {
            "name": "msg_load_func",
            "location": 319,
            "return": [
                "Callable[([str, str], float)]"
            ],
            "arguments": {
                "cg": [
                    "ComputationGraph"
                ],
                "communication_load": [
                    "Callable[([ComputationNode, str], float)]"
                ]
            }
        },
        "capacity_fonc": {
            "name": "capacity_fonc",
            "location": 333,
            "return": [
                "Callable[([str], float)]"
            ],
            "arguments": {
                "agents_def": [
                    "Iterable[AgentDef]"
                ]
            }
        },
        "route_fonc": {
            "name": "route_fonc",
            "location": 347,
            "return": [
                "Callable[([str, str], float)]"
            ],
            "arguments": {
                "agents_def": [
                    "Iterable[AgentDef]"
                ]
            }
        },
        "hosting_cost_func": {
            "name": "hosting_cost_func",
            "location": 356,
            "return": [
                "Callable[([str, str], float)]"
            ],
            "arguments": {
                "agts_def": [
                    "Iterable[AgentDef]"
                ]
            }
        },
        "footprint_fonc.footprint": {
            "name": "footprint",
            "location": 312,
            "return": [],
            "arguments": {
                "computation_name": [
                    "str"
                ]
            }
        },
        "msg_load_func.msg_load": {
            "name": "msg_load",
            "location": 322,
            "return": [
                "float"
            ],
            "arguments": {
                "c1": [
                    "str"
                ],
                "c2": [
                    "str"
                ]
            }
        },
        "capacity_fonc.capacity": {
            "name": "capacity",
            "location": 339,
            "return": [],
            "arguments": {
                "agent_name": []
            }
        },
        "route_fonc.route": {
            "name": "route",
            "location": 348,
            "return": [],
            "arguments": {
                "a1_name": [
                    "str"
                ],
                "a2_name": [
                    "str"
                ]
            }
        },
        "hosting_cost_func.cost": {
            "name": "cost",
            "location": 363,
            "return": [],
            "arguments": {
                "agt_name": [
                    "str"
                ],
                "comp_name": [
                    "str"
                ]
            }
        }
    },
    "pyDcop-master/pydcop/distribution/oilp_secp_cgdp.py": {
        "distribute": {
            "name": "distribute",
            "location": 81,
            "return": [
                "Distribution"
            ],
            "arguments": {
                "computation_graph": [
                    "ComputationConstraintsHyperGraph"
                ],
                "agentsdef": [
                    "Iterable[AgentDef]"
                ],
                "hints": [],
                "computation_memory": [
                    "Callable[([ComputationNode], float)]"
                ],
                "communication_load": [
                    "Callable[([ComputationNode, str], float)]"
                ],
                "timeout": []
            }
        },
        "distribution_cost": {
            "name": "distribution_cost",
            "location": 129,
            "return": [
                "float"
            ],
            "arguments": {
                "distribution": [
                    "Distribution"
                ],
                "computation_graph": [
                    "ComputationConstraintsHyperGraph"
                ],
                "agentsdef": [
                    "Iterable[AgentDef]"
                ],
                "computation_memory": [
                    "Callable[([ComputationNode], float)]"
                ],
                "communication_load": [
                    "Callable[([ComputationNode, str], float)]"
                ]
            }
        },
        "cg_secp_ilp": {
            "name": "cg_secp_ilp",
            "location": 170,
            "return": [
                "Distribution"
            ],
            "arguments": {
                "cg": [
                    "ComputationConstraintsHyperGraph"
                ],
                "agents": [
                    "List[AgentDef]"
                ],
                "already_assigned": [
                    "Distribution"
                ],
                "computation_memory": [
                    "Callable[([ComputationNode], float)]"
                ],
                "communication_load": [
                    "Callable[([ComputationNode, str], float)]"
                ],
                "timeout": []
            }
        },
        "_build_cs_binvar": {
            "name": "_build_cs_binvar",
            "location": 299,
            "return": [],
            "arguments": {
                "comps_to_host": [],
                "agents_names": []
            }
        },
        "_build_alphaijk_binvars": {
            "name": "_build_alphaijk_binvars",
            "location": 305,
            "return": [],
            "arguments": {
                "cg": [
                    "ComputationConstraintsHyperGraph"
                ],
                "agents_names": [
                    "Iterable[str]"
                ]
            }
        },
        "_objective_function": {
            "name": "_objective_function",
            "location": 320,
            "return": [],
            "arguments": {
                "cg": [
                    "ComputationConstraintsHyperGraph"
                ],
                "communication_load": [],
                "alphas": [],
                "agents_names": []
            }
        }
    },
    "pyDcop-master/pydcop/distribution/oilp_secp_fgdp.py": {
        "distribute": {
            "name": "distribute",
            "location": 72,
            "return": [
                "Distribution"
            ],
            "arguments": {
                "computation_graph": [
                    "ComputationsFactorGraph"
                ],
                "agentsdef": [
                    "Iterable[AgentDef]"
                ],
                "hints": [],
                "computation_memory": [
                    "Callable[([ComputationNode], float)]"
                ],
                "communication_load": [
                    "Callable[([ComputationNode, str], float)]"
                ],
                "timeout": []
            }
        },
        "distribution_cost": {
            "name": "distribution_cost",
            "location": 134,
            "return": [
                "float"
            ],
            "arguments": {
                "distribution": [
                    "Distribution"
                ],
                "computation_graph": [
                    "ComputationsFactorGraph"
                ],
                "agentsdef": [
                    "Iterable[AgentDef]"
                ],
                "computation_memory": [
                    "Callable[([ComputationNode], float)]"
                ],
                "communication_load": [
                    "Callable[([ComputationNode, str], float)]"
                ]
            }
        },
        "fg_secp_ilp": {
            "name": "fg_secp_ilp",
            "location": 175,
            "return": [
                "Distribution"
            ],
            "arguments": {
                "cg": [
                    "ComputationsFactorGraph"
                ],
                "agents": [
                    "List[AgentDef]"
                ],
                "already_assigned": [
                    "Distribution"
                ],
                "computation_memory": [
                    "Callable[([ComputationNode], float)]"
                ],
                "communication_load": [
                    "Callable[([ComputationNode, str], float)]"
                ],
                "timeout": []
            }
        },
        "_build_alphaijk_binvars": {
            "name": "_build_alphaijk_binvars",
            "location": 332,
            "return": [],
            "arguments": {
                "cg": [
                    "ComputationsFactorGraph"
                ],
                "agents_names": [
                    "Iterable[str]"
                ]
            }
        },
        "_build_fs_binvar": {
            "name": "_build_fs_binvar",
            "location": 344,
            "return": [],
            "arguments": {
                "facs_to_host": [],
                "agents_names": []
            }
        },
        "_build_xs_binvar": {
            "name": "_build_xs_binvar",
            "location": 350,
            "return": [],
            "arguments": {
                "vars_to_host": [],
                "agents_names": []
            }
        },
        "secp_dist_objective_function": {
            "name": "secp_dist_objective_function",
            "location": 356,
            "return": [],
            "arguments": {
                "cg": [
                    "ComputationsFactorGraph"
                ],
                "communication_load": [],
                "alphas": [],
                "agents_names": []
            }
        },
        "secp_computation_memory_in_cg": {
            "name": "secp_computation_memory_in_cg",
            "location": 371,
            "return": [],
            "arguments": {
                "computation_name": [
                    "str"
                ],
                "cg": [
                    "ComputationsFactorGraph"
                ],
                "computation_memory": []
            }
        }
    },
    "pyDcop-master/pydcop/distribution/oneagent.py": {
        "distribution_cost": {
            "name": "distribution_cost",
            "location": 65,
            "return": [
                "float"
            ],
            "arguments": {
                "distribution": [
                    "Distribution"
                ],
                "computation_graph": [
                    "ComputationGraph"
                ],
                "agentsdef": [
                    "Iterable[AgentDef]"
                ],
                "computation_memory": [
                    "Callable[([ComputationNode], float)]"
                ],
                "communication_load": [
                    "Callable[([ComputationNode, str], float)]"
                ]
            }
        },
        "distribute": {
            "name": "distribute",
            "location": 90,
            "return": [
                "Distribution"
            ],
            "arguments": {
                "computation_graph": [
                    "ComputationGraph"
                ],
                "agentsdef": [
                    "Iterable[AgentDef]"
                ],
                "hints": [
                    "DistributionHints"
                ],
                "computation_memory": [],
                "communication_load": [],
                "timeout": []
            }
        }
    },
    "pyDcop-master/pydcop/distribution/yamlformat.py": {
        "load_dist_from_file": {
            "name": "load_dist_from_file",
            "location": 44,
            "return": [
                "Distribution"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "load_dist": {
            "name": "load_dist",
            "location": 50,
            "return": [
                "Distribution"
            ],
            "arguments": {
                "dist_str": [
                    "str"
                ]
            }
        }
    },
    "pyDcop-master/pydcop/distribution/__init__.py": {},
    "pyDcop-master/pydcop/infrastructure/agents.py": {
        "notify_wrap": {
            "name": "notify_wrap",
            "location": 870,
            "return": [],
            "arguments": {
                "f": [],
                "cb": []
            }
        },
        "Agent.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "comm": [
                    "CommunicationLayer"
                ],
                "agent_def": [
                    "AgentDef"
                ],
                "ui_port": [
                    "int"
                ],
                "delay": [
                    "float"
                ],
                "daemon": [
                    "bool"
                ]
            }
        },
        "Agent.communication": {
            "name": "communication",
            "location": 164,
            "return": [
                "CommunicationLayer"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.add_computation": {
            "name": "add_computation",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "computation": [
                    "MessagePassingComputation"
                ],
                "comp_name": [],
                "publish": []
            }
        },
        "Agent.remove_computation": {
            "name": "remove_computation",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "computation": [
                    "str"
                ]
            }
        },
        "Agent.computations": {
            "name": "computations",
            "location": 257,
            "return": [
                "List[MessagePassingComputation]"
            ],
            "arguments": {
                "self": [],
                "include_technical": []
            }
        },
        "Agent.computation": {
            "name": "computation",
            "location": 281,
            "return": [
                "MessagePassingComputation"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Agent.address": {
            "name": "address",
            "location": 311,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Agent.start": {
            "name": "start",
            "location": 324,
            "return": [],
            "arguments": {
                "self": [],
                "run_computations": []
            }
        },
        "Agent.run": {
            "name": "run",
            "location": 354,
            "return": [],
            "arguments": {
                "self": [],
                "computations": [
                    "Optional[Union[(str, List[str])]]"
                ]
            }
        },
        "Agent.start_time": {
            "name": "start_time",
            "location": 423,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.clean_shutdown": {
            "name": "clean_shutdown",
            "location": 431,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Agent.stop": {
            "name": "stop",
            "location": 445,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Agent.pause_computations": {
            "name": "pause_computations",
            "location": 456,
            "return": [],
            "arguments": {
                "self": [],
                "computations": [
                    "Union[(str, Optional[List[str]])]"
                ]
            }
        },
        "Agent.unpause_computations": {
            "name": "unpause_computations",
            "location": 509,
            "return": [],
            "arguments": {
                "self": [],
                "computations": [
                    "Union[(str, Optional[List[str]])]"
                ]
            }
        },
        "Agent.name": {
            "name": "name",
            "location": 564,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Agent.is_stopping": {
            "name": "is_stopping",
            "location": 572,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.is_running": {
            "name": "is_running",
            "location": 581,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Agent.join": {
            "name": "join",
            "location": 588,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Agent._on_start": {
            "name": "_on_start",
            "location": 591,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Agent._on_stop": {
            "name": "_on_stop",
            "location": 642,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Agent._on_computation_value_changed": {
            "name": "_on_computation_value_changed",
            "location": 686,
            "return": [],
            "arguments": {
                "self": [],
                "computation": [
                    "str"
                ],
                "value": [],
                "cost": [],
                "cycle": []
            }
        },
        "Agent._on_computation_new_cycle": {
            "name": "_on_computation_new_cycle",
            "location": 691,
            "return": [],
            "arguments": {
                "self": [],
                "computation": []
            }
        },
        "Agent._on_computation_finished": {
            "name": "_on_computation_finished",
            "location": 695,
            "return": [],
            "arguments": {
                "self": [],
                "computation": [
                    "str"
                ]
            }
        },
        "Agent._handle_message": {
            "name": "_handle_message",
            "location": 709,
            "return": [],
            "arguments": {
                "self": [],
                "sender_name": [
                    "str"
                ],
                "dest_name": [
                    "str"
                ],
                "msg": [],
                "t": []
            }
        },
        "Agent.metrics": {
            "name": "metrics",
            "location": 717,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Agent.messages_count": {
            "name": "messages_count",
            "location": 737,
            "return": [],
            "arguments": {
                "self": [],
                "computation": [
                    "str"
                ]
            }
        },
        "Agent.messages_size": {
            "name": "messages_size",
            "location": 740,
            "return": [],
            "arguments": {
                "self": [],
                "computation": [
                    "str"
                ]
            }
        },
        "Agent.set_periodic_action": {
            "name": "set_periodic_action",
            "location": 743,
            "return": [],
            "arguments": {
                "self": [],
                "period": [
                    "float"
                ],
                "cb": [
                    "Callable"
                ]
            }
        },
        "Agent.remove_periodic_action": {
            "name": "remove_periodic_action",
            "location": 772,
            "return": [],
            "arguments": {
                "self": [],
                "handle": []
            }
        },
        "Agent._run": {
            "name": "_run",
            "location": 785,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Agent._process_periodic_action": {
            "name": "_process_periodic_action",
            "location": 840,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Agent.is_idle": {
            "name": "is_idle",
            "location": 854,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Agent.__str__": {
            "name": "__str__",
            "location": 863,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Agent.__repr__": {
            "name": "__repr__",
            "location": 866,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "notify_wrap.wrapped": {
            "name": "wrapped",
            "location": 872,
            "return": [],
            "arguments": {}
        },
        "AgentMetrics.__init__": {
            "name": "__init__",
            "location": 884,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AgentMetrics.computation_msg_rcv": {
            "name": "computation_msg_rcv",
            "location": 894,
            "return": [],
            "arguments": {
                "self": [],
                "computation": [
                    "str"
                ]
            }
        },
        "AgentMetrics.computation_msg_snd": {
            "name": "computation_msg_snd",
            "location": 897,
            "return": [],
            "arguments": {
                "self": [],
                "computation": [
                    "str"
                ]
            }
        },
        "AgentMetrics._on_computation_msg_rcv": {
            "name": "_on_computation_msg_rcv",
            "location": 900,
            "return": [],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ],
                "msg_event": []
            }
        },
        "AgentMetrics._on_computation_msg_snd": {
            "name": "_on_computation_msg_snd",
            "location": 906,
            "return": [],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ],
                "msg_event": []
            }
        },
        "RepairComputationRegistration.__init__": {
            "name": "__init__",
            "location": 920,
            "return": [],
            "arguments": {
                "self": [],
                "computation": [
                    "MessagePassingComputation"
                ],
                "status": [
                    "str"
                ],
                "candidate": [
                    "str"
                ]
            }
        },
        "ResilientAgent.__init__": {
            "name": "__init__",
            "location": 953,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "comm": [
                    "CommunicationLayer"
                ],
                "agent_def": [
                    "AgentDef"
                ],
                "replication": [
                    "str"
                ],
                "ui_port": [],
                "delay": [
                    "float"
                ]
            }
        },
        "ResilientAgent._on_start": {
            "name": "_on_start",
            "location": 983,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResilientAgent._on_stop": {
            "name": "_on_stop",
            "location": 1002,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResilientAgent.add_computation": {
            "name": "add_computation",
            "location": 1008,
            "return": [],
            "arguments": {
                "self": [],
                "computation": [
                    "MessagePassingComputation"
                ],
                "comp_name": [],
                "publish": []
            }
        },
        "ResilientAgent.remove_computation": {
            "name": "remove_computation",
            "location": 1036,
            "return": [],
            "arguments": {
                "self": [],
                "computation": [
                    "str"
                ]
            }
        },
        "ResilientAgent.replicate": {
            "name": "replicate",
            "location": 1042,
            "return": [],
            "arguments": {
                "self": [],
                "k": [
                    "int"
                ]
            }
        },
        "ResilientAgent.setup_repair": {
            "name": "setup_repair",
            "location": 1047,
            "return": [],
            "arguments": {
                "self": [],
                "repair_info": []
            }
        },
        "ResilientAgent.repair_run": {
            "name": "repair_run",
            "location": 1260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResilientAgent._on_replication_done": {
            "name": "_on_replication_done",
            "location": 1267,
            "return": [],
            "arguments": {
                "self": [],
                "replica_hosts": [
                    "Dict[(str, List[str])]"
                ]
            }
        },
        "ResilientAgent._on_computation_finished": {
            "name": "_on_computation_finished",
            "location": 1292,
            "return": [],
            "arguments": {
                "self": [],
                "computation": [
                    "str"
                ]
            }
        },
        "ResilientAgent._on_repair_computation_finished": {
            "name": "_on_repair_computation_finished",
            "location": 1299,
            "return": [],
            "arguments": {
                "self": [],
                "computation": [
                    "str"
                ]
            }
        },
        "ResilientAgent._on_repair_done": {
            "name": "_on_repair_done",
            "location": 1374,
            "return": [],
            "arguments": {
                "self": [],
                "selected_computations": [
                    "List[str]"
                ]
            }
        },
        "RepairComputation.__init__": {
            "name": "__init__",
            "location": 1389,
            "return": [],
            "arguments": {
                "self": [],
                "agent": [
                    "ResilientAgent"
                ]
            }
        },
        "RepairComputation.type": {
            "name": "type",
            "location": 1400,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RepairComputation.on_message": {
            "name": "on_message",
            "location": 1403,
            "return": [],
            "arguments": {
                "self": [],
                "var_name": [],
                "msg": [],
                "t": []
            }
        },
        "RepairComputation.footprint": {
            "name": "footprint",
            "location": 1406,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RepairComputation.replication_done": {
            "name": "replication_done",
            "location": 1409,
            "return": [],
            "arguments": {
                "self": [],
                "replica_hosts": [
                    "Dict[(str, List[str])]"
                ]
            }
        },
        "ResilientAgent.setup_repair.footprint_func": {
            "name": "footprint_func",
            "location": 1159,
            "return": [],
            "arguments": {
                "c_name": [
                    "str"
                ]
            }
        },
        "ResilientAgent.setup_repair.comm_func": {
            "name": "comm_func",
            "location": 1183,
            "return": [],
            "arguments": {
                "candidate_comp": [
                    "str"
                ],
                "neighbor_comp": [
                    "str"
                ],
                "agt": [
                    "str"
                ]
            }
        },
        "ResilientAgent.setup_repair._agt_lookup_done": {
            "name": "_agt_lookup_done",
            "location": 1246,
            "return": [],
            "arguments": {
                "comp": [],
                "evt": [],
                "evt_agt": [],
                "_": []
            }
        }
    },
    "pyDcop-master/pydcop/infrastructure/communication.py": {
        "find_local_ip": {
            "name": "find_local_ip",
            "location": 297,
            "return": [],
            "arguments": {}
        },
        "CommunicationLayer.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "on_error": []
            }
        },
        "CommunicationLayer.address": {
            "name": "address",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommunicationLayer.send_msg": {
            "name": "send_msg",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "src_agent": [
                    "str"
                ],
                "dest_agent": [
                    "str"
                ],
                "msg": [
                    "ComputationMessage"
                ],
                "on_error": [],
                "from_retry": []
            }
        },
        "CommunicationLayer.shutdown": {
            "name": "shutdown",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommunicationLayer._on_send_error": {
            "name": "_on_send_error",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "src_agent": [],
                "dest_agent": [],
                "msg": [],
                "on_error": [],
                "exception": []
            }
        },
        "CommunicationLayer.retry": {
            "name": "retry",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "dest_agent": [
                    "str"
                ]
            }
        },
        "InProcessCommunicationLayer.__init__": {
            "name": "__init__",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "on_error": []
            }
        },
        "InProcessCommunicationLayer.address": {
            "name": "address",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InProcessCommunicationLayer.send_msg": {
            "name": "send_msg",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "src_agent": [
                    "str"
                ],
                "dest_agent": [
                    "str"
                ],
                "msg": [
                    "ComputationMessage"
                ],
                "on_error": [],
                "from_retry": []
            }
        },
        "InProcessCommunicationLayer.receive_msg": {
            "name": "receive_msg",
            "location": 265,
            "return": [],
            "arguments": {
                "self": [],
                "src_agent": [
                    "str"
                ],
                "dest_agent": [
                    "str"
                ],
                "msg": [
                    "ComputationMessage"
                ]
            }
        },
        "InProcessCommunicationLayer.shutdown": {
            "name": "shutdown",
            "location": 278,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InProcessCommunicationLayer.__str__": {
            "name": "__str__",
            "location": 290,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InProcessCommunicationLayer.__repr__": {
            "name": "__repr__",
            "location": 293,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HttpCommunicationLayer.__init__": {
            "name": "__init__",
            "location": 334,
            "return": [],
            "arguments": {
                "self": [],
                "address_port": [
                    "Optional[Tuple[(str, int)]]"
                ],
                "on_error": [
                    "Optional[str]"
                ]
            }
        },
        "HttpCommunicationLayer.shutdown": {
            "name": "shutdown",
            "location": 354,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HttpCommunicationLayer._start_server": {
            "name": "_start_server",
            "location": 359,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HttpCommunicationLayer.on_post_message": {
            "name": "on_post_message",
            "location": 377,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "sender": [],
                "dest": [],
                "msg": [
                    "ComputationMessage"
                ]
            }
        },
        "HttpCommunicationLayer.address": {
            "name": "address",
            "location": 382,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpCommunicationLayer.send_msg": {
            "name": "send_msg",
            "location": 391,
            "return": [],
            "arguments": {
                "self": [],
                "src_agent": [
                    "str"
                ],
                "dest_agent": [
                    "str"
                ],
                "msg": [
                    "ComputationMessage"
                ],
                "on_error": []
            }
        },
        "HttpCommunicationLayer.__str__": {
            "name": "__str__",
            "location": 443,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MPCHttpHandler.do_POST": {
            "name": "do_POST",
            "location": 448,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MPCHttpHandler.log_request": {
            "name": "log_request",
            "location": 490,
            "return": [],
            "arguments": {
                "self": [],
                "code": [],
                "size": []
            }
        },
        "Messaging.__init__": {
            "name": "__init__",
            "location": 529,
            "return": [],
            "arguments": {
                "self": [],
                "agent_name": [
                    "str"
                ],
                "comm": [
                    "CommunicationLayer"
                ],
                "delay": [
                    "float"
                ]
            }
        },
        "Messaging.communication": {
            "name": "communication",
            "location": 550,
            "return": [
                "CommunicationLayer"
            ],
            "arguments": {
                "self": []
            }
        },
        "Messaging.local_agent": {
            "name": "local_agent",
            "location": 554,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Messaging.count_all_ext_msg": {
            "name": "count_all_ext_msg",
            "location": 564,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Messaging.size_all_ext_msg": {
            "name": "size_all_ext_msg",
            "location": 572,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Messaging.next_msg": {
            "name": "next_msg",
            "location": 579,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": [
                    "float"
                ]
            }
        },
        "Messaging.post_msg": {
            "name": "post_msg",
            "location": 588,
            "return": [],
            "arguments": {
                "self": [],
                "src_computation": [
                    "str"
                ],
                "dest_computation": [
                    "str"
                ],
                "msg": [],
                "msg_type": [
                    "int"
                ],
                "on_error": []
            }
        },
        "Messaging.shutdown": {
            "name": "shutdown",
            "location": 700,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Messaging._on_computation_registration": {
            "name": "_on_computation_registration",
            "location": 710,
            "return": [],
            "arguments": {
                "self": [],
                "evt": [
                    "str"
                ],
                "computation": [
                    "str"
                ],
                "agent": [
                    "str"
                ]
            }
        },
        "Messaging.__str__": {
            "name": "__str__",
            "location": 728,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyDcop-master/pydcop/infrastructure/computations.py": {
        "message_type": {
            "name": "message_type",
            "location": 122,
            "return": [],
            "arguments": {
                "msg_type": [
                    "str"
                ],
                "fields": [
                    "List[str]"
                ]
            }
        },
        "build_computation": {
            "name": "build_computation",
            "location": 1156,
            "return": [
                "MessagePassingComputation"
            ],
            "arguments": {
                "comp_def": [
                    "ComputationDef"
                ]
            }
        },
        "Message.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "msg_type": [],
                "content": []
            }
        },
        "Message.size": {
            "name": "size",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.type": {
            "name": "type",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.content": {
            "name": "content",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.__str__": {
            "name": "__str__",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.__repr__": {
            "name": "__repr__",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.__eq__": {
            "name": "__eq__",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "message_type.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "message_type.to_str": {
            "name": "to_str",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "message_type._simple_repr": {
            "name": "_simple_repr",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "message_type.equals": {
            "name": "equals",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ComputationMetaClass.__new__": {
            "name": "__new__",
            "location": 249,
            "return": [],
            "arguments": {
                "mcs": [],
                "clsname": [],
                "bases": [],
                "attrs": []
            }
        },
        "MessagePassingComputation.__init__": {
            "name": "__init__",
            "location": 291,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "MessagePassingComputation.name": {
            "name": "name",
            "location": 308,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessagePassingComputation.is_running": {
            "name": "is_running",
            "location": 321,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessagePassingComputation.is_paused": {
            "name": "is_paused",
            "location": 328,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessagePassingComputation.message_sender": {
            "name": "message_sender",
            "location": 336,
            "return": [],
            "arguments": {
                "self": [],
                "msg_sender": [
                    "Callable[([str, str, Message, int], None)]"
                ]
            }
        },
        "MessagePassingComputation.periodic_action_handler": {
            "name": "periodic_action_handler",
            "location": 346,
            "return": [],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "MessagePassingComputation.finished": {
            "name": "finished",
            "location": 351,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessagePassingComputation.start": {
            "name": "start",
            "location": 354,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessagePassingComputation.stop": {
            "name": "stop",
            "location": 388,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessagePassingComputation.pause": {
            "name": "pause",
            "location": 400,
            "return": [],
            "arguments": {
                "self": [],
                "is_paused": [
                    "bool"
                ]
            }
        },
        "MessagePassingComputation.on_start": {
            "name": "on_start",
            "location": 448,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessagePassingComputation.on_stop": {
            "name": "on_stop",
            "location": 456,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessagePassingComputation.on_pause": {
            "name": "on_pause",
            "location": 464,
            "return": [],
            "arguments": {
                "self": [],
                "paused": [
                    "bool"
                ]
            }
        },
        "MessagePassingComputation.on_message": {
            "name": "on_message",
            "location": 478,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [
                    "str"
                ],
                "msg": [
                    "Message"
                ],
                "t": [
                    "float"
                ]
            }
        },
        "MessagePassingComputation.post_msg": {
            "name": "post_msg",
            "location": 517,
            "return": [],
            "arguments": {
                "self": [],
                "target": [
                    "str"
                ],
                "msg": [],
                "prio": [
                    "int"
                ],
                "on_error": []
            }
        },
        "MessagePassingComputation.add_periodic_action": {
            "name": "add_periodic_action",
            "location": 546,
            "return": [],
            "arguments": {
                "self": [],
                "period": [
                    "float"
                ],
                "cb": [
                    "Callable"
                ]
            }
        },
        "MessagePassingComputation.remove_periodic_action": {
            "name": "remove_periodic_action",
            "location": 568,
            "return": [],
            "arguments": {
                "self": [],
                "handle": []
            }
        },
        "MessagePassingComputation.__repr__": {
            "name": "__repr__",
            "location": 571,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "register.__init__": {
            "name": "__init__",
            "location": 611,
            "return": [],
            "arguments": {
                "self": [],
                "msg_type": [
                    "str"
                ]
            }
        },
        "register.__call__": {
            "name": "__call__",
            "location": 614,
            "return": [],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "SynchronizationMsg.__init__": {
            "name": "__init__",
            "location": 624,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SynchronizationMsg.__repr__": {
            "name": "__repr__",
            "location": 629,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SynchronousComputationMixin.__init__": {
            "name": "__init__",
            "location": 669,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "SynchronousComputationMixin._sync_message_handler": {
            "name": "_sync_message_handler",
            "location": 684,
            "return": [],
            "arguments": {
                "self": [],
                "_": [],
                "sender": [],
                "msg": [],
                "t": []
            }
        },
        "SynchronousComputationMixin.current_cycle": {
            "name": "current_cycle",
            "location": 728,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SynchronousComputationMixin.post_msg": {
            "name": "post_msg",
            "location": 731,
            "return": [],
            "arguments": {
                "self": [],
                "target": [
                    "str"
                ],
                "msg": [],
                "prio": [
                    "int"
                ],
                "on_error": []
            }
        },
        "SynchronousComputationMixin.start": {
            "name": "start",
            "location": 741,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SynchronousComputationMixin._switch_cycle": {
            "name": "_switch_cycle",
            "location": 755,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SynchronousComputationMixin.cycle_count": {
            "name": "cycle_count",
            "location": 791,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SynchronousComputationMixin.on_new_cycle": {
            "name": "on_new_cycle",
            "location": 794,
            "return": [
                "Optional[List]"
            ],
            "arguments": {
                "self": [],
                "messages": [
                    "Dict[(str, Tuple)]"
                ],
                "cycle_id": []
            }
        },
        "DcopComputation.__init__": {
            "name": "__init__",
            "location": 862,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "comp_def": [
                    "ComputationDef"
                ]
            }
        },
        "DcopComputation.neighbors": {
            "name": "neighbors",
            "location": 876,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DcopComputation.cycle_count": {
            "name": "cycle_count",
            "location": 895,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DcopComputation.footprint": {
            "name": "footprint",
            "location": 898,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DcopComputation.new_cycle": {
            "name": "new_cycle",
            "location": 915,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DcopComputation._on_new_cycle": {
            "name": "_on_new_cycle",
            "location": 930,
            "return": [],
            "arguments": {
                "self": [],
                "count": []
            }
        },
        "DcopComputation.post_to_all_neighbors": {
            "name": "post_to_all_neighbors",
            "location": 946,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "prio": [
                    "int"
                ],
                "on_error": []
            }
        },
        "DcopComputation.__repr__": {
            "name": "__repr__",
            "location": 963,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableComputation.__init__": {
            "name": "__init__",
            "location": 979,
            "return": [],
            "arguments": {
                "self": [],
                "variable": [
                    "Variable"
                ],
                "comp_def": [
                    "ComputationDef"
                ]
            }
        },
        "VariableComputation.variable": {
            "name": "variable",
            "location": 997,
            "return": [
                "Variable"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableComputation.current_value": {
            "name": "current_value",
            "location": 1005,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableComputation.current_cost": {
            "name": "current_cost",
            "location": 1016,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableComputation.footprint": {
            "name": "footprint",
            "location": 1019,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableComputation.value_selection": {
            "name": "value_selection",
            "location": 1058,
            "return": [],
            "arguments": {
                "self": [],
                "val": [],
                "cost": []
            }
        },
        "VariableComputation.random_value_selection": {
            "name": "random_value_selection",
            "location": 1080,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableComputation._on_value_selection": {
            "name": "_on_value_selection",
            "location": 1089,
            "return": [],
            "arguments": {
                "self": [],
                "val": [],
                "cost": [],
                "cycle_count": []
            }
        },
        "ExternalVariableComputation.__init__": {
            "name": "__init__",
            "location": 1110,
            "return": [],
            "arguments": {
                "self": [],
                "external_var": [],
                "msg_sender": [],
                "comp_def": []
            }
        },
        "ExternalVariableComputation.name": {
            "name": "name",
            "location": 1121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExternalVariableComputation.current_value": {
            "name": "current_value",
            "location": 1125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExternalVariableComputation.on_start": {
            "name": "on_start",
            "location": 1128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExternalVariableComputation._on_variable_change": {
            "name": "_on_variable_change",
            "location": 1131,
            "return": [],
            "arguments": {
                "self": [],
                "_": []
            }
        },
        "ExternalVariableComputation._on_subscribe_msg": {
            "name": "_on_subscribe_msg",
            "location": 1134,
            "return": [],
            "arguments": {
                "self": [],
                "var_name": [],
                "_": [],
                "t": []
            }
        },
        "ExternalVariableComputation.change_value": {
            "name": "change_value",
            "location": 1140,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ExternalVariableComputation._fire": {
            "name": "_fire",
            "location": 1143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExternalVariableComputation.__str__": {
            "name": "__str__",
            "location": 1149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExternalVariableComputation.__repr__": {
            "name": "__repr__",
            "location": 1152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessagePassingComputation.add_periodic_action.call_action": {
            "name": "call_action",
            "location": 562,
            "return": [],
            "arguments": {}
        },
        "register.__call__.wrapper": {
            "name": "wrapper",
            "location": 616,
            "return": [],
            "arguments": {}
        }
    },
    "pyDcop-master/pydcop/infrastructure/discovery.py": {
        "_is_technical": {
            "name": "_is_technical",
            "location": 630,
            "return": [
                "bool"
            ],
            "arguments": {
                "computation": [
                    "str"
                ]
            }
        },
        "DirectoryComputation.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "directory": [
                    "'Directory'"
                ]
            }
        },
        "DirectoryComputation.type": {
            "name": "type",
            "location": 150,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectoryComputation.on_start": {
            "name": "on_start",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DirectoryComputation.on_message": {
            "name": "on_message",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [
                    "DiscoveryName"
                ],
                "msg": [
                    "Message"
                ],
                "t": []
            }
        },
        "DirectoryComputation._on_publish_agent": {
            "name": "_on_publish_agent",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "_": [
                    "DiscoveryName"
                ],
                "msg": [
                    "PublishAgentMessage"
                ]
            }
        },
        "DirectoryComputation._on_unpublish_agent": {
            "name": "_on_unpublish_agent",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "_": [
                    "DiscoveryName"
                ],
                "msg": [
                    "UnPublishAgentMessage"
                ]
            }
        },
        "DirectoryComputation._on_subscribe_agent": {
            "name": "_on_subscribe_agent",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [
                    "DiscoveryName"
                ],
                "msg": [
                    "SubscribeAgentMessage"
                ]
            }
        },
        "DirectoryComputation._on_publish_computation": {
            "name": "_on_publish_computation",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "_": [
                    "DiscoveryName"
                ],
                "msg": [
                    "PublishComputationMessage"
                ]
            }
        },
        "DirectoryComputation._on_unpublish_computation": {
            "name": "_on_unpublish_computation",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "_": [
                    "DiscoveryName"
                ],
                "msg": [
                    "UnPublishComputationMessage"
                ]
            }
        },
        "DirectoryComputation._on_subscribe_computation": {
            "name": "_on_subscribe_computation",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [
                    "DiscoveryName"
                ],
                "msg": [
                    "SubscribeComputationMessage"
                ]
            }
        },
        "DirectoryComputation._on_publish_replica": {
            "name": "_on_publish_replica",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "_": [
                    "DiscoveryName"
                ],
                "msg": [
                    "PublishReplicaMessage"
                ]
            }
        },
        "DirectoryComputation._on_subscribe_replica": {
            "name": "_on_subscribe_replica",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [
                    "DiscoveryName"
                ],
                "msg": [
                    "SubscribeReplicaMessage"
                ]
            }
        },
        "DirectoryComputation.notify_agent_registered": {
            "name": "notify_agent_registered",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interested": [
                    "DiscoveryName"
                ],
                "agents": [
                    "Union[(AgentName, List[AgentName])]"
                ],
                "address": [
                    "Address"
                ]
            }
        },
        "DirectoryComputation.notify_agent_unregistered": {
            "name": "notify_agent_unregistered",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "interested": [
                    "DiscoveryName"
                ],
                "agent": [
                    "AgentName"
                ]
            }
        },
        "DirectoryComputation.notify_computation_registered": {
            "name": "notify_computation_registered",
            "location": 268,
            "return": [],
            "arguments": {
                "self": [],
                "interested": [
                    "DiscoveryName"
                ],
                "computation": [
                    "ComputationName"
                ],
                "agent": [
                    "AgentName"
                ],
                "address": [
                    "Address"
                ]
            }
        },
        "DirectoryComputation.notify_computation_unregistered": {
            "name": "notify_computation_unregistered",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "interested": [
                    "DiscoveryName"
                ],
                "computation": [
                    "str"
                ],
                "agent": [
                    "AgentName"
                ]
            }
        },
        "DirectoryComputation.notify_replica_registered": {
            "name": "notify_replica_registered",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "interested": [
                    "DiscoveryName"
                ],
                "replica": [
                    "ComputationName"
                ],
                "agent": [
                    "AgentName"
                ]
            }
        },
        "DirectoryComputation.notify_replica_unregistered": {
            "name": "notify_replica_unregistered",
            "location": 287,
            "return": [],
            "arguments": {
                "self": [],
                "interested": [
                    "DiscoveryName"
                ],
                "replica": [
                    "ComputationName"
                ],
                "agent": [
                    "AgentName"
                ]
            }
        },
        "Directory.__init__": {
            "name": "__init__",
            "location": 330,
            "return": [],
            "arguments": {
                "self": [],
                "discovery": [
                    "'Discovery'"
                ]
            }
        },
        "Directory.agent_address": {
            "name": "agent_address",
            "location": 354,
            "return": [
                "Address"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "AgentName"
                ]
            }
        },
        "Directory.register_agent": {
            "name": "register_agent",
            "location": 379,
            "return": [],
            "arguments": {
                "self": [],
                "agent": [
                    "AgentName"
                ],
                "address": [
                    "Address"
                ]
            }
        },
        "Directory.unregister_agent": {
            "name": "unregister_agent",
            "location": 393,
            "return": [],
            "arguments": {
                "self": [],
                "agent": [
                    "AgentName"
                ]
            }
        },
        "Directory.subscribe_all_agents": {
            "name": "subscribe_all_agents",
            "location": 448,
            "return": [],
            "arguments": {
                "self": [],
                "subscriber": [
                    "DiscoveryName"
                ]
            }
        },
        "Directory.subscribe_to_agent": {
            "name": "subscribe_to_agent",
            "location": 462,
            "return": [],
            "arguments": {
                "self": [],
                "subscriber": [
                    "DiscoveryName"
                ],
                "agent": [
                    "AgentName"
                ]
            }
        },
        "Directory.unsubscribe_from_agent": {
            "name": "unsubscribe_from_agent",
            "location": 465,
            "return": [],
            "arguments": {
                "self": [],
                "subscriber": [
                    "DiscoveryName"
                ],
                "agent": [
                    "AgentName"
                ]
            }
        },
        "Directory.computation_agent": {
            "name": "computation_agent",
            "location": 476,
            "return": [
                "AgentName"
            ],
            "arguments": {
                "self": [],
                "computation": [
                    "ComputationName"
                ]
            }
        },
        "Directory.register_computation": {
            "name": "register_computation",
            "location": 482,
            "return": [],
            "arguments": {
                "self": [],
                "computation": [
                    "ComputationName"
                ],
                "agent": [
                    "AgentName"
                ],
                "address": [
                    "Address"
                ]
            }
        },
        "Directory.unregister_computation": {
            "name": "unregister_computation",
            "location": 495,
            "return": [],
            "arguments": {
                "self": [],
                "computation": [
                    "ComputationName"
                ],
                "agent": [
                    "AgentName"
                ]
            }
        },
        "Directory.subscribe_to_computation": {
            "name": "subscribe_to_computation",
            "location": 509,
            "return": [],
            "arguments": {
                "self": [],
                "subscriber": [
                    "DiscoveryName"
                ],
                "computation": [
                    "ComputationName"
                ]
            }
        },
        "Directory.unsubscribe_from_computation": {
            "name": "unsubscribe_from_computation",
            "location": 513,
            "return": [],
            "arguments": {
                "self": [],
                "subscriber": [
                    "DiscoveryName"
                ],
                "computation": [
                    "ComputationName"
                ]
            }
        },
        "Directory.register_replica": {
            "name": "register_replica",
            "location": 524,
            "return": [],
            "arguments": {
                "self": [],
                "replica": [
                    "ComputationName"
                ],
                "agent": [
                    "AgentName"
                ]
            }
        },
        "Directory.unregister_replica": {
            "name": "unregister_replica",
            "location": 531,
            "return": [],
            "arguments": {
                "self": [],
                "replica": [
                    "ComputationName"
                ],
                "agent": [
                    "AgentName"
                ]
            }
        },
        "Directory.subscribe_to_replicas": {
            "name": "subscribe_to_replicas",
            "location": 541,
            "return": [],
            "arguments": {
                "self": [],
                "subscriber": [
                    "DiscoveryName"
                ],
                "replica": [
                    "ComputationName"
                ]
            }
        },
        "Directory.unsubscribe_from_replicas": {
            "name": "unsubscribe_from_replicas",
            "location": 545,
            "return": [],
            "arguments": {
                "self": [],
                "subscriber": [
                    "DiscoveryName"
                ],
                "replica": [
                    "ComputationName"
                ]
            }
        },
        "DiscoveryComputation.__init__": {
            "name": "__init__",
            "location": 567,
            "return": [],
            "arguments": {
                "self": [],
                "agent_name": [
                    "AgentName"
                ],
                "discovery": [
                    "'Discovery'"
                ]
            }
        },
        "DiscoveryComputation.type": {
            "name": "type",
            "location": 582,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscoveryComputation.on_start": {
            "name": "on_start",
            "location": 585,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscoveryComputation.on_message": {
            "name": "on_message",
            "location": 588,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [
                    "DiscoveryName"
                ],
                "msg": [
                    "Message"
                ],
                "t": []
            }
        },
        "DiscoveryComputation._on_agent_added": {
            "name": "_on_agent_added",
            "location": 591,
            "return": [],
            "arguments": {
                "self": [],
                "_": [
                    "DiscoveryName"
                ],
                "msg": [
                    "PublishAgentMessage"
                ]
            }
        },
        "DiscoveryComputation._on_agent_removed": {
            "name": "_on_agent_removed",
            "location": 599,
            "return": [],
            "arguments": {
                "self": [],
                "_": [
                    "DiscoveryName"
                ],
                "msg": [
                    "UnPublishAgentMessage"
                ]
            }
        },
        "DiscoveryComputation._on_computation_added": {
            "name": "_on_computation_added",
            "location": 602,
            "return": [],
            "arguments": {
                "self": [],
                "_": [
                    "DiscoveryName"
                ],
                "msg": [
                    "PublishComputationMessage"
                ]
            }
        },
        "DiscoveryComputation._on_computation_removed": {
            "name": "_on_computation_removed",
            "location": 607,
            "return": [],
            "arguments": {
                "self": [],
                "_": [
                    "DiscoveryName"
                ],
                "msg": [
                    "UnPublishComputationMessage"
                ]
            }
        },
        "DiscoveryComputation._on_replica_publish": {
            "name": "_on_replica_publish",
            "location": 613,
            "return": [],
            "arguments": {
                "self": [],
                "_": [],
                "msg": [
                    "PublishReplicaMessage"
                ]
            }
        },
        "DiscoveryComputation.send_to_directory": {
            "name": "send_to_directory",
            "location": 621,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "DiscoveryComputation.__str__": {
            "name": "__str__",
            "location": 626,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Discovery.__init__": {
            "name": "__init__",
            "location": 679,
            "return": [],
            "arguments": {
                "self": [],
                "agent_name": [
                    "AgentName"
                ],
                "address": [
                    "Address"
                ]
            }
        },
        "Discovery.use_directory": {
            "name": "use_directory",
            "location": 707,
            "return": [],
            "arguments": {
                "self": [],
                "agent": [
                    "AgentName"
                ],
                "address": [
                    "Address"
                ]
            }
        },
        "Discovery.agents": {
            "name": "agents",
            "location": 727,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "filter_orchestrator": []
            }
        },
        "Discovery.agent_address": {
            "name": "agent_address",
            "location": 746,
            "return": [
                "Address"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "AgentName"
                ]
            }
        },
        "Discovery.register_agent": {
            "name": "register_agent",
            "location": 770,
            "return": [],
            "arguments": {
                "self": [],
                "agent": [
                    "AgentName"
                ],
                "address": [
                    "Address"
                ],
                "publish": [
                    "bool"
                ]
            }
        },
        "Discovery.unregister_agent": {
            "name": "unregister_agent",
            "location": 820,
            "return": [],
            "arguments": {
                "self": [],
                "agent": [
                    "AgentName"
                ],
                "publish": [
                    "bool"
                ]
            }
        },
        "Discovery.subscribe_agent": {
            "name": "subscribe_agent",
            "location": 880,
            "return": [
                "DiscoveryCallBack"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "AgentName"
                ],
                "cb": [
                    "Optional[DiscoveryCallBack]"
                ],
                "one_shot": [
                    "bool"
                ]
            }
        },
        "Discovery.subscribe_all_agents": {
            "name": "subscribe_all_agents",
            "location": 936,
            "return": [],
            "arguments": {
                "self": [],
                "cb": [
                    "Optional[Callable]"
                ]
            }
        },
        "Discovery.unsubscribe_agent": {
            "name": "unsubscribe_agent",
            "location": 950,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "AgentName"
                ],
                "cb": [
                    "Optional[DiscoveryCallBack]"
                ]
            }
        },
        "Discovery.computations": {
            "name": "computations",
            "location": 1007,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "include_technical": []
            }
        },
        "Discovery.computation_agent": {
            "name": "computation_agent",
            "location": 1034,
            "return": [
                "AgentName"
            ],
            "arguments": {
                "self": [],
                "computation": [
                    "ComputationName"
                ]
            }
        },
        "Discovery.agent_computations": {
            "name": "agent_computations",
            "location": 1056,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "AgentName"
                ],
                "include_technical": []
            }
        },
        "Discovery.register_computation": {
            "name": "register_computation",
            "location": 1083,
            "return": [],
            "arguments": {
                "self": [],
                "computation": [
                    "ComputationName"
                ],
                "agent": [
                    "Optional[AgentName]"
                ],
                "address": [
                    "Optional[Address]"
                ],
                "publish": [
                    "bool"
                ]
            }
        },
        "Discovery.unregister_computation": {
            "name": "unregister_computation",
            "location": 1151,
            "return": [],
            "arguments": {
                "self": [],
                "computation": [
                    "ComputationName"
                ],
                "agent": [
                    "AgentName"
                ],
                "publish": [
                    "bool"
                ]
            }
        },
        "Discovery.subscribe_computation": {
            "name": "subscribe_computation",
            "location": 1212,
            "return": [
                "DiscoveryCallBack"
            ],
            "arguments": {
                "self": [],
                "computation": [
                    "ComputationName"
                ],
                "cb": [
                    "Optional[DiscoveryCallBack]"
                ],
                "one_shot": [
                    "bool"
                ]
            }
        },
        "Discovery.unsubscribe_computation": {
            "name": "unsubscribe_computation",
            "location": 1267,
            "return": [],
            "arguments": {
                "self": [],
                "computation": [
                    "ComputationName"
                ],
                "cb": [
                    "Optional[DiscoveryCallBack]"
                ]
            }
        },
        "Discovery.register_replica": {
            "name": "register_replica",
            "location": 1304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "replica": [
                    "ComputationName"
                ],
                "agent": [
                    "AgentName"
                ],
                "publish": []
            }
        },
        "Discovery.unregister_replica": {
            "name": "unregister_replica",
            "location": 1350,
            "return": [],
            "arguments": {
                "self": [],
                "replica": [
                    "ComputationName"
                ],
                "agent": [
                    "AgentName"
                ],
                "publish": [
                    "bool"
                ]
            }
        },
        "Discovery.subscribe_replica": {
            "name": "subscribe_replica",
            "location": 1397,
            "return": [
                "DiscoveryCallBack"
            ],
            "arguments": {
                "self": [],
                "replica": [
                    "ComputationName"
                ],
                "cb": [
                    "Optional[DiscoveryCallBack]"
                ],
                "one_shot": [
                    "bool"
                ]
            }
        },
        "Discovery.unsubscribe_replica": {
            "name": "unsubscribe_replica",
            "location": 1436,
            "return": [],
            "arguments": {
                "self": [],
                "replica": [
                    "ComputationName"
                ],
                "cb": [
                    "Optional[DiscoveryCallBack]"
                ]
            }
        },
        "Discovery.replica_agents": {
            "name": "replica_agents",
            "location": 1481,
            "return": [
                "Set[AgentName]"
            ],
            "arguments": {
                "self": [],
                "replica": [
                    "ComputationName"
                ]
            }
        }
    },
    "pyDcop-master/pydcop/infrastructure/Events.py": {
        "get_bus": {
            "name": "get_bus",
            "location": 103,
            "return": [],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "EventDispatcher.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "enabled": []
            }
        },
        "EventDispatcher.send": {
            "name": "send",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "topic": [],
                "evt": []
            }
        },
        "EventDispatcher.subscribe": {
            "name": "subscribe",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ],
                "cb": [
                    "Callable"
                ]
            }
        },
        "EventDispatcher.unsubscribe": {
            "name": "unsubscribe",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "cb": [
                    "Callable"
                ],
                "topic": [
                    "str"
                ]
            }
        },
        "EventDispatcher.reset": {
            "name": "reset",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyDcop-master/pydcop/infrastructure/orchestratedagents.py": {
        "OrchestratedAgent.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "agt_def": [
                    "AgentDef"
                ],
                "comm": [
                    "CommunicationLayer"
                ],
                "orchestrator_address": [
                    "Address"
                ],
                "metrics_on": [
                    "str"
                ],
                "metrics_period": [
                    "float"
                ],
                "replication": [
                    "str"
                ],
                "ui_port": [],
                "delay": [
                    "float"
                ]
            }
        },
        "OrchestratedAgent.set_metrics_period": {
            "name": "set_metrics_period",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "metrics_period": []
            }
        },
        "OrchestratedAgent._on_start": {
            "name": "_on_start",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrchestratedAgent._on_computation_value_changed": {
            "name": "_on_computation_value_changed",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "computation": [
                    "str"
                ],
                "value": [],
                "cost": [],
                "cycle": []
            }
        },
        "OrchestratedAgent._on_computation_new_cycle": {
            "name": "_on_computation_new_cycle",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "computation": []
            }
        },
        "OrchestratedAgent._on_computation_finished": {
            "name": "_on_computation_finished",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "comp_name": [
                    "str"
                ]
            }
        },
        "OrchestratedAgent._on_replication_done": {
            "name": "_on_replication_done",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "replica_hosts": [
                    "Dict[(str, Set[str])]"
                ]
            }
        },
        "OrchestratedAgent._on_repair_done": {
            "name": "_on_repair_done",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "selected_computation": [
                    "List[str]"
                ],
                "metrics": []
            }
        },
        "OrchestrationComputation.__init__": {
            "name": "__init__",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "agent": [
                    "OrchestratedAgent"
                ]
            }
        },
        "OrchestrationComputation.type": {
            "name": "type",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrchestrationComputation.on_start": {
            "name": "on_start",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrchestrationComputation.footprint": {
            "name": "footprint",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrchestrationComputation.on_message": {
            "name": "on_message",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [
                    "str"
                ],
                "msg": [
                    "Message"
                ],
                "t": [
                    "float"
                ]
            }
        },
        "OrchestrationComputation._on_metrics_mode": {
            "name": "_on_metrics_mode",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [
                    "str"
                ],
                "msg": [
                    "SetMetricsModeMessage"
                ],
                "t": [
                    "float"
                ]
            }
        },
        "OrchestrationComputation._on_replication": {
            "name": "_on_replication",
            "location": 235,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [
                    "str"
                ],
                "msg": [
                    "ReplicateComputationsMessage"
                ],
                "t": [
                    "float"
                ]
            }
        },
        "OrchestrationComputation._on_run_computations": {
            "name": "_on_run_computations",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [
                    "str"
                ],
                "msg": [
                    "RunAgentMessage"
                ],
                "t": [
                    "float"
                ]
            }
        },
        "OrchestrationComputation._on_stop_request": {
            "name": "_on_stop_request",
            "location": 243,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [
                    "str"
                ],
                "msg": [
                    "StopAgentMessage"
                ],
                "t": [
                    "float"
                ]
            }
        },
        "OrchestrationComputation._on_agent_removed": {
            "name": "_on_agent_removed",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [
                    "str"
                ],
                "msg": [
                    "AgentRemovedMessage"
                ],
                "t": [
                    "float"
                ]
            }
        },
        "OrchestrationComputation._on_pause": {
            "name": "_on_pause",
            "location": 257,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [
                    "str"
                ],
                "msg": [
                    "PauseMessage"
                ],
                "t": [
                    "float"
                ]
            }
        },
        "OrchestrationComputation._on_resume": {
            "name": "_on_resume",
            "location": 261,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [
                    "str"
                ],
                "msg": [
                    "ResumeMessage"
                ],
                "t": [
                    "float"
                ]
            }
        },
        "OrchestrationComputation._on_deploy_computations": {
            "name": "_on_deploy_computations",
            "location": 265,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [
                    "str"
                ],
                "msg": [
                    "DeployMessage"
                ],
                "t": [
                    "float"
                ]
            }
        },
        "OrchestrationComputation._on_setup_repair": {
            "name": "_on_setup_repair",
            "location": 292,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [
                    "str"
                ],
                "msg": [
                    "SetupRepairMessage"
                ],
                "t": [
                    "float"
                ]
            }
        },
        "OrchestrationComputation._on_repair_run": {
            "name": "_on_repair_run",
            "location": 299,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [
                    "str"
                ],
                "msg": [
                    "RepairRunMessage"
                ],
                "t": [
                    "float"
                ]
            }
        },
        "OrchestrationComputation.on_computation_value_changed": {
            "name": "on_computation_value_changed",
            "location": 303,
            "return": [],
            "arguments": {
                "self": [],
                "computation": [
                    "str"
                ],
                "value": [],
                "cost": [],
                "cycle": []
            }
        },
        "OrchestrationComputation.on_computation_new_cycle": {
            "name": "on_computation_new_cycle",
            "location": 324,
            "return": [],
            "arguments": {
                "self": [],
                "computation": []
            }
        },
        "OrchestrationComputation.on_computation_finished": {
            "name": "on_computation_finished",
            "location": 333,
            "return": [],
            "arguments": {
                "self": [],
                "computation": []
            }
        },
        "OrchestrationComputation.on_repair_done": {
            "name": "on_repair_done",
            "location": 338,
            "return": [],
            "arguments": {
                "self": [],
                "selected_computation": [
                    "List[str]"
                ],
                "metrics": []
            }
        },
        "OrchestrationComputation.on_replication_done": {
            "name": "on_replication_done",
            "location": 343,
            "return": [],
            "arguments": {
                "self": [],
                "replica_hosts": [
                    "Dict[(str, Set[str])]"
                ]
            }
        },
        "OrchestrationComputation.send_metrics": {
            "name": "send_metrics",
            "location": 375,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrchestrationComputation.send_to_orchestrator": {
            "name": "send_to_orchestrator",
            "location": 382,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [
                    "Message"
                ]
            }
        },
        "OrchestrationComputation.__str__": {
            "name": "__str__",
            "location": 385,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyDcop-master/pydcop/infrastructure/orchestrator.py": {
        "Orchestrator.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "algo": [
                    "AlgorithmDef"
                ],
                "cg": [
                    "ComputationGraph"
                ],
                "agent_mapping": [
                    "Distribution"
                ],
                "comm": [
                    "CommunicationLayer"
                ],
                "dcop": [
                    "DCOP"
                ],
                "infinity": [],
                "collector": [
                    "Queue"
                ],
                "collect_moment": [
                    "str"
                ],
                "collect_period": [
                    "float"
                ],
                "ui_port": [
                    "int"
                ]
            }
        },
        "Orchestrator.address": {
            "name": "address",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Orchestrator.set_error_handler": {
            "name": "set_error_handler",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "callback": [
                    "Callable"
                ]
            }
        },
        "Orchestrator.start": {
            "name": "start",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Orchestrator.stop": {
            "name": "stop",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Orchestrator.deploy_computations": {
            "name": "deploy_computations",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "once_registered": []
            }
        },
        "Orchestrator.start_replication": {
            "name": "start_replication",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "k_target": [
                    "int"
                ]
            }
        },
        "Orchestrator.run": {
            "name": "run",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "scenario": [
                    "Scenario"
                ],
                "timeout": [
                    "Optional[float]"
                ],
                "repair_only": []
            }
        },
        "Orchestrator.stop_agents": {
            "name": "stop_agents",
            "location": 291,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": [
                    "float"
                ]
            }
        },
        "Orchestrator.current_global_cost": {
            "name": "current_global_cost",
            "location": 306,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Orchestrator.current_solution": {
            "name": "current_solution",
            "location": 309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Orchestrator.end_metrics": {
            "name": "end_metrics",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Orchestrator.replication_metrics": {
            "name": "replication_metrics",
            "location": 315,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Orchestrator.wait_ready": {
            "name": "wait_ready",
            "location": 318,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Orchestrator._process_event": {
            "name": "_process_event",
            "location": 340,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Orchestrator._mgt_method": {
            "name": "_mgt_method",
            "location": 369,
            "return": [],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "arg": [
                    "Any"
                ]
            }
        },
        "Orchestrator._on_timeout": {
            "name": "_on_timeout",
            "location": 374,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RepairRunMessage.__init__": {
            "name": "__init__",
            "location": 446,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RepairRunMessage.__str__": {
            "name": "__str__",
            "location": 449,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RepairRunMessage.__repr__": {
            "name": "__repr__",
            "location": 452,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RepairRunMessage.__eq__": {
            "name": "__eq__",
            "location": 455,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SetupRepairMessage.__init__": {
            "name": "__init__",
            "location": 468,
            "return": [],
            "arguments": {
                "self": [],
                "repair_info": [
                    "Dict[(str, Tuple[(List[str], Dict[(str, str)], Dict[(str, List[str])])])]"
                ]
            }
        },
        "SetupRepairMessage.repair_info": {
            "name": "repair_info",
            "location": 476,
            "return": [
                "Dict[(str, Tuple[(List[str], Dict[(str, str)], Dict[(str, List[str])])])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetupRepairMessage.__str__": {
            "name": "__str__",
            "location": 481,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RepairReadyMessage.__init__": {
            "name": "__init__",
            "location": 501,
            "return": [],
            "arguments": {
                "self": [],
                "agent": [
                    "str"
                ],
                "computations": [
                    "List[str]"
                ]
            }
        },
        "RepairReadyMessage.agent": {
            "name": "agent",
            "location": 507,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RepairReadyMessage.computations": {
            "name": "computations",
            "location": 511,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RepairReadyMessage.__str__": {
            "name": "__str__",
            "location": 514,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RepairReadyMessage.__repr__": {
            "name": "__repr__",
            "location": 518,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RepairReadyMessage.__eq__": {
            "name": "__eq__",
            "location": 522,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AgentsMgt.__init__": {
            "name": "__init__",
            "location": 570,
            "return": [],
            "arguments": {
                "self": [],
                "algo": [
                    "AlgorithmDef"
                ],
                "cg": [
                    "ComputationGraph"
                ],
                "agent_mapping": [
                    "Distribution"
                ],
                "dcop": [
                    "DCOP"
                ],
                "orchestrator_agent": [
                    "Agent"
                ],
                "orchestrator": [
                    "Orchestrator"
                ],
                "infinity": [],
                "collector": [
                    "Queue"
                ],
                "collect_moment": [],
                "collect_period": [
                    "float"
                ]
            }
        },
        "AgentsMgt.type": {
            "name": "type",
            "location": 645,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AgentsMgt.replica_hosts": {
            "name": "replica_hosts",
            "location": 649,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AgentsMgt.on_start": {
            "name": "on_start",
            "location": 652,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AgentsMgt.on_message": {
            "name": "on_message",
            "location": 657,
            "return": [],
            "arguments": {
                "self": [],
                "sender_name": [
                    "str"
                ],
                "msg": [],
                "t": []
            }
        },
        "AgentsMgt.current_global_cost": {
            "name": "current_global_cost",
            "location": 681,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AgentsMgt.current_solution": {
            "name": "current_solution",
            "location": 698,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AgentsMgt._cb_agent_registration": {
            "name": "_cb_agent_registration",
            "location": 712,
            "return": [],
            "arguments": {
                "self": [],
                "evt": [
                    "str"
                ],
                "agent": [
                    "str"
                ],
                "_": []
            }
        },
        "AgentsMgt._cb_computation_registration": {
            "name": "_cb_computation_registration",
            "location": 745,
            "return": [],
            "arguments": {
                "self": [],
                "evt": [
                    "str"
                ],
                "computation": [
                    "str"
                ],
                "agent": [
                    "str"
                ]
            }
        },
        "AgentsMgt._cb_replica_registration": {
            "name": "_cb_replica_registration",
            "location": 769,
            "return": [],
            "arguments": {
                "self": [],
                "evt": [
                    "str"
                ],
                "replica": [
                    "str"
                ],
                "agent": [
                    "str"
                ]
            }
        },
        "AgentsMgt._on_computation_replicated_msg": {
            "name": "_on_computation_replicated_msg",
            "location": 779,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [
                    "str"
                ],
                "msg": [
                    "ComputationReplicatedMessage"
                ],
                "_": []
            }
        },
        "AgentsMgt._on_value_change_msg": {
            "name": "_on_value_change_msg",
            "location": 802,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [
                    "str"
                ],
                "msg": [
                    "ValueChangeMessage"
                ],
                "t": [
                    "float"
                ]
            }
        },
        "AgentsMgt._on_cycle_change_msg": {
            "name": "_on_cycle_change_msg",
            "location": 831,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [
                    "str"
                ],
                "msg": [
                    "CycleChangeMessage"
                ],
                "t": [
                    "float"
                ]
            }
        },
        "AgentsMgt._on_metrics_msg": {
            "name": "_on_metrics_msg",
            "location": 875,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [
                    "str"
                ],
                "msg": [
                    "MetricsMessage"
                ],
                "t": []
            }
        },
        "AgentsMgt._on_agent_stopped_msg": {
            "name": "_on_agent_stopped_msg",
            "location": 886,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [
                    "str"
                ],
                "msg": [
                    "AgentStoppedMessage"
                ],
                "reception_time": [
                    "float"
                ]
            }
        },
        "AgentsMgt._on_computation_end_msg": {
            "name": "_on_computation_end_msg",
            "location": 898,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [
                    "str"
                ],
                "msg": [
                    "ComputationFinishedMessage"
                ],
                "_": [
                    "float"
                ]
            }
        },
        "AgentsMgt._orchestrator_deploy_computations": {
            "name": "_orchestrator_deploy_computations",
            "location": 915,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AgentsMgt._orchestrator_run_computations": {
            "name": "_orchestrator_run_computations",
            "location": 932,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AgentsMgt._orchestrator_start_replication": {
            "name": "_orchestrator_start_replication",
            "location": 946,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "AgentsMgt._orchestrator_scenario_event": {
            "name": "_orchestrator_scenario_event",
            "location": 955,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [
                    "Message"
                ],
                "_": [
                    "float"
                ]
            }
        },
        "AgentsMgt._agents_removal": {
            "name": "_agents_removal",
            "location": 982,
            "return": [],
            "arguments": {
                "self": [],
                "leaving_agents": [
                    "List[str]"
                ]
            }
        },
        "AgentsMgt._agents_arrival": {
            "name": "_agents_arrival",
            "location": 1032,
            "return": [],
            "arguments": {
                "self": [],
                "arrived_agents": [
                    "List[str]"
                ]
            }
        },
        "AgentsMgt._on_repair_ready": {
            "name": "_on_repair_ready",
            "location": 1039,
            "return": [],
            "arguments": {
                "self": [],
                "sender_name": [
                    "str"
                ],
                "msg": [
                    "RepairReadyMessage"
                ],
                "_": []
            }
        },
        "AgentsMgt._on_repair_done": {
            "name": "_on_repair_done",
            "location": 1073,
            "return": [],
            "arguments": {
                "self": [],
                "sender_name": [
                    "str"
                ],
                "msg": [
                    "RepairDoneMessage"
                ],
                "_": []
            }
        },
        "AgentsMgt._dump_repair_metrics": {
            "name": "_dump_repair_metrics",
            "location": 1126,
            "return": [],
            "arguments": {
                "self": [],
                "repair_status": [],
                "repair_duration": []
            }
        },
        "AgentsMgt._request_pause": {
            "name": "_request_pause",
            "location": 1163,
            "return": [],
            "arguments": {
                "self": [],
                "agents": []
            }
        },
        "AgentsMgt._request_resume": {
            "name": "_request_resume",
            "location": 1171,
            "return": [],
            "arguments": {
                "self": [],
                "agents": []
            }
        },
        "AgentsMgt._orchestrator_stop_agents": {
            "name": "_orchestrator_stop_agents",
            "location": 1180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AgentsMgt._deploy_computation": {
            "name": "_deploy_computation",
            "location": 1197,
            "return": [],
            "arguments": {
                "self": [],
                "agent_id": [
                    "str"
                ]
            }
        },
        "AgentsMgt.wait_stop_agents": {
            "name": "wait_stop_agents",
            "location": 1210,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "AgentsMgt.global_metrics": {
            "name": "global_metrics",
            "location": 1215,
            "return": [],
            "arguments": {
                "self": [],
                "current_status": [],
                "t": []
            }
        },
        "AgentsMgt._emit_metrics": {
            "name": "_emit_metrics",
            "location": 1276,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "AgentsMgt._send_mgt_msg": {
            "name": "_send_mgt_msg",
            "location": 1280,
            "return": [],
            "arguments": {
                "self": [],
                "agt": [],
                "msg": []
            }
        }
    },
    "pyDcop-master/pydcop/infrastructure/run.py": {
        "solve": {
            "name": "solve",
            "location": 52,
            "return": [],
            "arguments": {
                "dcop": [
                    "DCOP"
                ],
                "algo_def": [
                    "Union[(str, AlgorithmDef)]"
                ],
                "distribution": [
                    "Union[(str, Distribution)]"
                ],
                "graph": [
                    "Union[(str, ComputationGraph)]"
                ],
                "timeout": []
            }
        },
        "run_local_thread_dcop": {
            "name": "run_local_thread_dcop",
            "location": 145,
            "return": [
                "Orchestrator"
            ],
            "arguments": {
                "algo": [
                    "AlgorithmDef"
                ],
                "cg": [
                    "ComputationGraph"
                ],
                "distribution": [
                    "Distribution"
                ],
                "dcop": [
                    "DCOP"
                ],
                "infinity": [],
                "collector": [
                    "Queue"
                ],
                "collect_moment": [
                    "str"
                ],
                "period": [],
                "replication": [],
                "delay": [],
                "uiport": []
            }
        },
        "run_local_process_dcop": {
            "name": "run_local_process_dcop",
            "location": 225,
            "return": [],
            "arguments": {
                "algo": [
                    "AlgorithmDef"
                ],
                "cg": [
                    "ComputationGraph"
                ],
                "distribution": [
                    "Distribution"
                ],
                "dcop": [
                    "DCOP"
                ],
                "infinity": [],
                "collector": [
                    "Queue"
                ],
                "collect_moment": [
                    "str"
                ],
                "period": [],
                "replication": [],
                "delay": [],
                "uiport": []
            }
        },
        "_build_process_agent": {
            "name": "_build_process_agent",
            "location": 268,
            "return": [],
            "arguments": {
                "agt_def": [
                    "AgentDef"
                ],
                "port": [],
                "orchestrator_address": [],
                "metrics_on": [],
                "metrics_period": [],
                "replication": [],
                "delay": [],
                "uiport": []
            }
        }
    },
    "pyDcop-master/pydcop/infrastructure/stats.py": {
        "set_stats_file": {
            "name": "set_stats_file",
            "location": 71,
            "return": [],
            "arguments": {
                "file_path": []
            }
        },
        "trace_computation": {
            "name": "trace_computation",
            "location": 81,
            "return": [],
            "arguments": {
                "data": []
            }
        }
    },
    "pyDcop-master/pydcop/infrastructure/ui.py": {
        "UiServer.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "agent": [],
                "port": []
            }
        },
        "UiServer.on_message": {
            "name": "on_message",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "var_name": [],
                "msg": [],
                "t": []
            }
        },
        "UiServer.on_start": {
            "name": "on_start",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UiServer.on_stop": {
            "name": "on_stop",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UiServer._new_client": {
            "name": "_new_client",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "server": []
            }
        },
        "UiServer._client_left": {
            "name": "_client_left",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "server": []
            }
        },
        "UiServer._message_received": {
            "name": "_message_received",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "server": [],
                "message": []
            }
        },
        "UiServer._agent_data": {
            "name": "_agent_data",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "UiServer._computations": {
            "name": "_computations",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UiServer._computation": {
            "name": "_computation",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "computation": []
            }
        },
        "UiServer._cb_cycle": {
            "name": "_cb_cycle",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "topic": [],
                "cycle_event": []
            }
        },
        "UiServer._cb_value": {
            "name": "_cb_value",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "topic": [],
                "value_event": []
            }
        },
        "UiServer._cb_msg_rcv": {
            "name": "_cb_msg_rcv",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ],
                "msg_event": []
            }
        },
        "UiServer._cb_msg_snd": {
            "name": "_cb_msg_snd",
            "location": 226,
            "return": [],
            "arguments": {
                "self": [],
                "topic": [],
                "msg_event": []
            }
        },
        "UiServer._cb_add_comp": {
            "name": "_cb_add_comp",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ],
                "comp_evt": []
            }
        },
        "UiServer._cb_rem_comp": {
            "name": "_cb_rem_comp",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ],
                "comp_evt": []
            }
        },
        "UiServer.is_local_computation": {
            "name": "is_local_computation",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "computation": [
                    "str"
                ]
            }
        },
        "UiServer._send_to_all_clients": {
            "name": "_send_to_all_clients",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        }
    },
    "pyDcop-master/pydcop/infrastructure/__init__.py": {},
    "pyDcop-master/pydcop/reparation/removal.py": {
        "_removal_orphaned_computations": {
            "name": "_removal_orphaned_computations",
            "location": 38,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "departed": [
                    "List[str]"
                ],
                "discovery": [
                    "Discovery"
                ]
            }
        },
        "_removal_candidate_agents": {
            "name": "_removal_candidate_agents",
            "location": 61,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "departed": [
                    "List[str]"
                ],
                "discovery": [
                    "Discovery"
                ]
            }
        },
        "_removal_candidate_computations_for_agt": {
            "name": "_removal_candidate_computations_for_agt",
            "location": 84,
            "return": [],
            "arguments": {
                "agt": [],
                "orphaned_computations": [],
                "discovery": [
                    "Discovery"
                ]
            }
        },
        "_removal_candidate_computation_info": {
            "name": "_removal_candidate_computation_info",
            "location": 101,
            "return": [
                "Tuple[(List[str], Dict[(str, str)], Dict[(str, List[str])])]"
            ],
            "arguments": {
                "orphan": [
                    "str"
                ],
                "departed": [
                    "List[str]"
                ],
                "cg": [
                    "ComputationGraph"
                ],
                "discovery": [
                    "Discovery"
                ]
            }
        },
        "_removal_candidate_agt_info": {
            "name": "_removal_candidate_agt_info",
            "location": 145,
            "return": [
                "Dict[(str, Tuple[(List[str], Dict[(str, str)], Dict[(str, List[str])])])]"
            ],
            "arguments": {
                "agt": [
                    "str"
                ],
                "departed": [
                    "List[str]"
                ],
                "cg": [
                    "ComputationGraph"
                ],
                "discovery": [
                    "Discovery"
                ]
            }
        }
    },
    "pyDcop-master/pydcop/reparation/__init__.py": {
        "create_computation_hosted_constraint": {
            "name": "create_computation_hosted_constraint",
            "location": 39,
            "return": [
                "Constraint"
            ],
            "arguments": {
                "computation_name": [
                    "str"
                ],
                "bin_vars": [
                    "Dict[(Tuple, BinaryVariable)]"
                ]
            }
        },
        "create_agent_capacity_constraint": {
            "name": "create_agent_capacity_constraint",
            "location": 70,
            "return": [
                "Constraint"
            ],
            "arguments": {
                "agt_name": [
                    "str"
                ],
                "remaining_capacity": [],
                "footprint_func": [
                    "Callable[([str], float)]"
                ],
                "bin_vars": [
                    "Dict[(Tuple, BinaryVariable)]"
                ]
            }
        },
        "create_agent_hosting_constraint": {
            "name": "create_agent_hosting_constraint",
            "location": 117,
            "return": [
                "Constraint"
            ],
            "arguments": {
                "agt_name": [
                    "str"
                ],
                "hosting_func": [
                    "Callable[([str], float)]"
                ],
                "bin_vars": [
                    "Dict[(Tuple, BinaryVariable)]"
                ]
            }
        },
        "create_agent_comp_comm_constraint": {
            "name": "create_agent_comp_comm_constraint",
            "location": 158,
            "return": [
                "Constraint"
            ],
            "arguments": {
                "agt_name": [
                    "str"
                ],
                "candidate_name": [
                    "str"
                ],
                "candidate_info": [
                    "Tuple[(List[str], Dict[(str, str)], Dict[(str, List[str])])]"
                ],
                "comm": [
                    "Callable[([str, str, str], float)]"
                ],
                "bin_vars": [
                    "Dict[(Tuple, BinaryVariable)]"
                ]
            }
        },
        "create_computation_hosted_constraint.hosted": {
            "name": "hosted",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "create_agent_capacity_constraint.capacity": {
            "name": "capacity",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "create_agent_hosting_constraint.hosting_cost": {
            "name": "hosting_cost",
            "location": 146,
            "return": [],
            "arguments": {}
        },
        "create_agent_comp_comm_constraint.host_cost": {
            "name": "host_cost",
            "location": 194,
            "return": [],
            "arguments": {}
        }
    },
    "pyDcop-master/pydcop/replication/dist_ucs_hostingcosts.py": {
        "build_replication_computation": {
            "name": "build_replication_computation",
            "location": 89,
            "return": [
                "MessagePassingComputation"
            ],
            "arguments": {
                "agent": [
                    "Agent"
                ],
                "discovery": [
                    "Discovery"
                ]
            }
        },
        "replication_computation_name": {
            "name": "replication_computation_name",
            "location": 227,
            "return": [
                "str"
            ],
            "arguments": {
                "agt_name": [
                    "AgentName"
                ]
            }
        },
        "UCSReplicateMessage.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "rep_msg_type": [
                    "str"
                ],
                "budget": [
                    "float"
                ],
                "spent": [
                    "float"
                ],
                "rq_path": [
                    "Path"
                ],
                "paths": [
                    "PathsTable"
                ],
                "visited": [
                    "List[AgentName]"
                ],
                "computation_def": [
                    "ComputationDef"
                ],
                "footprint": [
                    "float"
                ],
                "replica_count": [
                    "int"
                ],
                "hosts": [
                    "List[str]"
                ]
            }
        },
        "UCSReplicateMessage.rep_msg_type": {
            "name": "rep_msg_type",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UCSReplicateMessage.rq_path": {
            "name": "rq_path",
            "location": 157,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "UCSReplicateMessage.computation_def": {
            "name": "computation_def",
            "location": 161,
            "return": [
                "ComputationDef"
            ],
            "arguments": {
                "self": []
            }
        },
        "UCSReplicateMessage.footprint": {
            "name": "footprint",
            "location": 165,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "UCSReplicateMessage.budget": {
            "name": "budget",
            "location": 169,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "UCSReplicateMessage.spent": {
            "name": "spent",
            "location": 173,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "UCSReplicateMessage.replica_count": {
            "name": "replica_count",
            "location": 177,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "UCSReplicateMessage.paths": {
            "name": "paths",
            "location": 181,
            "return": [
                "PathsTable"
            ],
            "arguments": {
                "self": []
            }
        },
        "UCSReplicateMessage.visited": {
            "name": "visited",
            "location": 185,
            "return": [
                "List[AgentName]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UCSReplicateMessage.hosts": {
            "name": "hosts",
            "location": 189,
            "return": [
                "List[AgentName]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UCSReplicateMessage.size": {
            "name": "size",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UCSReplicateMessage.__str__": {
            "name": "__str__",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UCSReplicateMessage.__repr__": {
            "name": "__repr__",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UCSReplicateMessage.__eq__": {
            "name": "__eq__",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ReplicationTracker.__init__": {
            "name": "__init__",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReplicationTracker.add": {
            "name": "add",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "computations": [
                    "Iterable[ComputationName]"
                ]
            }
        },
        "ReplicationTracker.remove": {
            "name": "remove",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "computations": [
                    "Iterable[ComputationName]"
                ]
            }
        },
        "ReplicationTracker.in_progress": {
            "name": "in_progress",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReplicationTracker.is_done": {
            "name": "is_done",
            "location": 255,
            "return": [],
            "arguments": {
                "self": [],
                "computation": [
                    "ComputationName"
                ]
            }
        },
        "ReplicationTracker.is_empty": {
            "name": "is_empty",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReplicationTracker.__repr__": {
            "name": "__repr__",
            "location": 261,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UCSReplication.__init__": {
            "name": "__init__",
            "location": 290,
            "return": [],
            "arguments": {
                "self": [],
                "agent": [
                    "Agent"
                ],
                "discovery": [
                    "Discovery"
                ],
                "k_target": [],
                "logger": []
            }
        },
        "UCSReplication.hosted_replicas": {
            "name": "hosted_replicas",
            "location": 332,
            "return": [
                "Dict[(ComputationName, Tuple[(AgentName, float)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UCSReplication.replication_neighbors": {
            "name": "replication_neighbors",
            "location": 342,
            "return": [
                "Set[AgentName]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UCSReplication.add_computation": {
            "name": "add_computation",
            "location": 373,
            "return": [],
            "arguments": {
                "self": [],
                "comp_def": [
                    "ComputationDef"
                ],
                "footprint": [
                    "float"
                ]
            }
        },
        "UCSReplication.remove_computation": {
            "name": "remove_computation",
            "location": 401,
            "return": [],
            "arguments": {
                "self": [],
                "computation": [
                    "ComputationName"
                ]
            }
        },
        "UCSReplication.replicate": {
            "name": "replicate",
            "location": 419,
            "return": [],
            "arguments": {
                "self": [],
                "k_target": [
                    "int"
                ],
                "computations": [
                    "Union[(None, ComputationName, List[ComputationName])]"
                ]
            }
        },
        "UCSReplication.on_start": {
            "name": "on_start",
            "location": 496,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UCSReplication.on_stop": {
            "name": "on_stop",
            "location": 501,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UCSReplication._on_replicate_msg": {
            "name": "_on_replicate_msg",
            "location": 512,
            "return": [],
            "arguments": {
                "self": [],
                "sender_name": [
                    "str"
                ],
                "msg": [
                    "UCSReplicateMessage"
                ],
                "_": [
                    "float"
                ]
            }
        },
        "UCSReplication.on_replicate_request": {
            "name": "on_replicate_request",
            "location": 573,
            "return": [],
            "arguments": {
                "self": [],
                "budget": [
                    "float"
                ],
                "spent": [
                    "float"
                ],
                "rq_path": [
                    "Path"
                ],
                "paths": [
                    "PathsTable"
                ],
                "visited": [
                    "List[AgentName]"
                ],
                "comp_def": [
                    "ComputationDef"
                ],
                "footprint": [
                    "float"
                ],
                "replica_count": [
                    "int"
                ],
                "hosts": [
                    "List[str]"
                ]
            }
        },
        "UCSReplication.on_replicate_answer": {
            "name": "on_replicate_answer",
            "location": 668,
            "return": [],
            "arguments": {
                "self": [],
                "budget": [
                    "float"
                ],
                "spent": [
                    "float"
                ],
                "rq_path": [
                    "Path"
                ],
                "paths": [
                    "PathsTable"
                ],
                "visited": [
                    "List[AgentName]"
                ],
                "comp_def": [
                    "ComputationDef"
                ],
                "footprint": [
                    "float"
                ],
                "replica_count": [
                    "int"
                ],
                "hosts": [
                    "List[str]"
                ]
            }
        },
        "UCSReplication._send_request": {
            "name": "_send_request",
            "location": 783,
            "return": [],
            "arguments": {
                "self": [],
                "budget": [
                    "float"
                ],
                "spent": [
                    "float"
                ],
                "rq_path": [
                    "Path"
                ],
                "paths": [
                    "PathsTable"
                ],
                "visited": [
                    "List[AgentName]"
                ],
                "comp_def": [
                    "ComputationDef"
                ],
                "footprint": [
                    "float"
                ],
                "replica_count": [
                    "int"
                ],
                "hosts": [
                    "List[AgentName]"
                ]
            }
        },
        "UCSReplication._send_answer": {
            "name": "_send_answer",
            "location": 836,
            "return": [],
            "arguments": {
                "self": [],
                "budget": [
                    "float"
                ],
                "spent": [
                    "float"
                ],
                "rq_path": [
                    "Path"
                ],
                "paths": [
                    "PathsTable"
                ],
                "visited": [
                    "List[AgentName]"
                ],
                "comp_def": [
                    "ComputationDef"
                ],
                "footprint": [
                    "float"
                ],
                "replica_count": [
                    "int"
                ],
                "hosts": [
                    "List[AgentName]"
                ]
            }
        },
        "UCSReplication.route": {
            "name": "route",
            "location": 876,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "AgentName"
                ]
            }
        },
        "UCSReplication.footprint_comp": {
            "name": "footprint_comp",
            "location": 879,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "comp_name": [
                    "ComputationName"
                ]
            }
        },
        "UCSReplication.computation_replicated": {
            "name": "computation_replicated",
            "location": 882,
            "return": [],
            "arguments": {
                "self": [],
                "computation": [
                    "ComputationName"
                ],
                "hosts": [
                    "List[AgentName]"
                ]
            }
        },
        "UCSReplication._on_agent_event": {
            "name": "_on_agent_event",
            "location": 907,
            "return": [],
            "arguments": {
                "self": [],
                "event": [
                    "str"
                ],
                "agent": [
                    "str"
                ],
                "_": [
                    "Address"
                ]
            }
        },
        "UCSReplication.replication_done": {
            "name": "replication_done",
            "location": 944,
            "return": [],
            "arguments": {
                "self": [],
                "replica_hosts": [
                    "Dict[(ComputationName, Set[AgentName])]"
                ]
            }
        },
        "UCSReplication.remove_replica": {
            "name": "remove_replica",
            "location": 950,
            "return": [],
            "arguments": {
                "self": [],
                "computation": [
                    "ComputationName"
                ]
            }
        },
        "UCSReplication._add_hosting_path": {
            "name": "_add_hosting_path",
            "location": 959,
            "return": [],
            "arguments": {
                "self": [],
                "spent": [
                    "float"
                ],
                "computation": [
                    "ComputationName"
                ],
                "rq_path": [
                    "Path"
                ],
                "paths": [
                    "PathsTable"
                ]
            }
        },
        "UCSReplication._visit_path": {
            "name": "_visit_path",
            "location": 981,
            "return": [],
            "arguments": {
                "self": [],
                "budget": [
                    "float"
                ],
                "spent": [
                    "float"
                ],
                "target_path": [
                    "Path"
                ],
                "paths": [
                    "PathsTable"
                ],
                "visited": [
                    "List[AgentName]"
                ],
                "comp_def": [
                    "ComputationDef"
                ],
                "footprint": [
                    "float"
                ],
                "replica_count": [
                    "int"
                ],
                "hosts": [
                    "List[str]"
                ]
            }
        },
        "UCSReplication._replicate_on_agent_lost": {
            "name": "_replicate_on_agent_lost",
            "location": 1067,
            "return": [],
            "arguments": {
                "self": [],
                "agent": [
                    "AgentName"
                ]
            }
        },
        "UCSReplication._answer_lost_requests": {
            "name": "_answer_lost_requests",
            "location": 1118,
            "return": [],
            "arguments": {
                "self": [],
                "agent": [
                    "AgentName"
                ]
            }
        },
        "UCSReplication._can_host": {
            "name": "_can_host",
            "location": 1153,
            "return": [],
            "arguments": {
                "self": [],
                "agent": [
                    "AgentName"
                ],
                "computation": [
                    "ComputationName"
                ],
                "footprint": [
                    "float"
                ]
            }
        },
        "UCSReplication._accept_replica": {
            "name": "_accept_replica",
            "location": 1211,
            "return": [],
            "arguments": {
                "self": [],
                "origin_agt": [],
                "comp_def": [
                    "ComputationDef"
                ],
                "footprint": []
            }
        },
        "UCSReplication._remaining_capacity": {
            "name": "_remaining_capacity",
            "location": 1226,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "UCSReplication._max_footprint": {
            "name": "_max_footprint",
            "location": 1236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UCSReplication._worst_case_footprint": {
            "name": "_worst_case_footprint",
            "location": 1260,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "AgentName"
                ],
                "computation": [
                    "ComputationName"
                ],
                "footprint": [
                    "float"
                ]
            }
        }
    },
    "pyDcop-master/pydcop/replication/objects.py": {
        "ReplicaDistribution.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "mapping": [
                    "Dict[(str, List[str])]"
                ]
            }
        },
        "ReplicaDistribution.replicas_on": {
            "name": "replicas_on",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "agt": [
                    "str"
                ],
                "raise_on_unknown": []
            }
        },
        "ReplicaDistribution.agents_for_computation": {
            "name": "agents_for_computation",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "computation": [
                    "str"
                ]
            }
        }
    },
    "pyDcop-master/pydcop/replication/path_utils.py": {
        "head": {
            "name": "head",
            "location": 38,
            "return": [
                "Optional[Node]"
            ],
            "arguments": {
                "path": []
            }
        },
        "last": {
            "name": "last",
            "location": 50,
            "return": [
                "Optional[Node]"
            ],
            "arguments": {
                "path": []
            }
        },
        "before_last": {
            "name": "before_last",
            "location": 63,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "remove_path": {
            "name": "remove_path",
            "location": 80,
            "return": [
                "PathsTable"
            ],
            "arguments": {
                "paths": [
                    "PathsTable"
                ],
                "path": [
                    "Path"
                ]
            }
        },
        "cheapest_path_to": {
            "name": "cheapest_path_to",
            "location": 99,
            "return": [
                "Tuple[(float, Path)]"
            ],
            "arguments": {
                "target": [
                    "Node"
                ],
                "paths": [
                    "PathsTable"
                ]
            }
        },
        "affordable_path_from": {
            "name": "affordable_path_from",
            "location": 125,
            "return": [],
            "arguments": {
                "prefix": [
                    "Path"
                ],
                "max_path_cost": [
                    "float"
                ],
                "paths": [
                    "PathsTable"
                ]
            }
        },
        "filter_missing_agents_paths": {
            "name": "filter_missing_agents_paths",
            "location": 135,
            "return": [
                "PathsTable"
            ],
            "arguments": {
                "paths": [
                    "PathsTable"
                ],
                "removed_agents": [
                    "Set"
                ]
            }
        }
    },
    "pyDcop-master/pydcop/replication/yamlformat.py": {
        "load_replica_dist_from_file": {
            "name": "load_replica_dist_from_file",
            "location": 44,
            "return": [
                "ReplicaDistribution"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "load_replica_dist": {
            "name": "load_replica_dist",
            "location": 50,
            "return": [
                "ReplicaDistribution"
            ],
            "arguments": {
                "dist_str": [
                    "str"
                ]
            }
        }
    },
    "pyDcop-master/pydcop/replication/__init__.py": {},
    "pyDcop-master/pydcop/utils/expressionfunction.py": {
        "_analyse_ast": {
            "name": "_analyse_ast",
            "location": 218,
            "return": [
                "Tuple[(bool, Set[str])]"
            ],
            "arguments": {
                "str_code": [
                    "str"
                ]
            }
        },
        "ExpressionFunction.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "str"
                ],
                "source_file": []
            }
        },
        "ExpressionFunction.expression": {
            "name": "expression",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpressionFunction.__name__": {
            "name": "__name__",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpressionFunction.variable_names": {
            "name": "variable_names",
            "location": 121,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpressionFunction.partial": {
            "name": "partial",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpressionFunction.__call__": {
            "name": "__call__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpressionFunction.__eq__": {
            "name": "__eq__",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ExpressionFunction.__str__": {
            "name": "__str__",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpressionFunction.__repr__": {
            "name": "__repr__",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpressionFunction.__hash__": {
            "name": "__hash__",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpressionFunction._simple_repr": {
            "name": "_simple_repr",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpressionFunction._from_repr": {
            "name": "_from_repr",
            "location": 173,
            "return": [],
            "arguments": {
                "cls": [],
                "r": []
            }
        },
        "VarCounterVisitor.__init__": {
            "name": "__init__",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VarCounterVisitor.visit": {
            "name": "visit",
            "location": 191,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "VarCounterVisitor.get_vars": {
            "name": "get_vars",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyDcop-master/pydcop/utils/graphs.py": {
        "as_bipartite_graph": {
            "name": "as_bipartite_graph",
            "location": 68,
            "return": [],
            "arguments": {
                "variables": [],
                "relations": []
            }
        },
        "calc_diameter": {
            "name": "calc_diameter",
            "location": 86,
            "return": [],
            "arguments": {
                "nodes": []
            }
        },
        "find_furthest_node": {
            "name": "find_furthest_node",
            "location": 108,
            "return": [],
            "arguments": {
                "root_node": [],
                "nodes": []
            }
        },
        "as_networkx_graph": {
            "name": "as_networkx_graph",
            "location": 131,
            "return": [],
            "arguments": {
                "variables": [],
                "relations": []
            }
        },
        "as_networkx_bipartite_graph": {
            "name": "as_networkx_bipartite_graph",
            "location": 157,
            "return": [],
            "arguments": {
                "variables": [],
                "relations": []
            }
        },
        "display_graph": {
            "name": "display_graph",
            "location": 184,
            "return": [],
            "arguments": {
                "variables": [],
                "relations": []
            }
        },
        "display_bipartite_graph": {
            "name": "display_bipartite_graph",
            "location": 212,
            "return": [],
            "arguments": {
                "variables": [],
                "relations": []
            }
        },
        "cycles_count": {
            "name": "cycles_count",
            "location": 263,
            "return": [],
            "arguments": {
                "variables": [],
                "relations": []
            }
        },
        "graph_diameter": {
            "name": "graph_diameter",
            "location": 270,
            "return": [],
            "arguments": {
                "variables": [],
                "relations": []
            }
        },
        "all_pairs": {
            "name": "all_pairs",
            "location": 289,
            "return": [],
            "arguments": {
                "elements": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "content": [],
                "node_type": []
            }
        },
        "Node.name": {
            "name": "name",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.add_neighbors": {
            "name": "add_neighbors",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "directed": []
            }
        }
    },
    "pyDcop-master/pydcop/utils/simple_repr.py": {
        "from_repr": {
            "name": "from_repr",
            "location": 133,
            "return": [],
            "arguments": {
                "r": []
            }
        },
        "simple_repr": {
            "name": "simple_repr",
            "location": 175,
            "return": [],
            "arguments": {
                "o": []
            }
        },
        "SimpleRepr._simple_repr": {
            "name": "_simple_repr",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleRepr._from_repr": {
            "name": "_from_repr",
            "location": 117,
            "return": [],
            "arguments": {
                "cls": [],
                "r": []
            }
        }
    },
    "pyDcop-master/pydcop/utils/various.py": {
        "func_args": {
            "name": "func_args",
            "location": 34,
            "return": [],
            "arguments": {
                "f": []
            }
        }
    },
    "pyDcop-master/pydcop/utils/__init__.py": {},
    "pyDcop-master/tests/__init__.py": {},
    "pyDcop-master/tests/api/instances_and_utils.py": {
        "dcop_graphcoloring_3": {
            "name": "dcop_graphcoloring_3",
            "location": 39,
            "return": [],
            "arguments": {}
        }
    },
    "pyDcop-master/tests/api/test_api_agents.py": {
        "test_api_create_agent_minimal": {
            "name": "test_api_create_agent_minimal",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "test_api_create_agent_with_default_cost": {
            "name": "test_api_create_agent_with_default_cost",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "test_api_create_agent_with_specific_cost_as_dict": {
            "name": "test_api_create_agent_with_specific_cost_as_dict",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "test_api_create_several_agents": {
            "name": "test_api_create_several_agents",
            "location": 69,
            "return": [],
            "arguments": {}
        }
    },
    "pyDcop-master/tests/api/test_api_dcop.py": {
        "test_api_dcop_graph_coloring": {
            "name": "test_api_dcop_graph_coloring",
            "location": 43,
            "return": [],
            "arguments": {}
        }
    },
    "pyDcop-master/tests/api/test_api_distribute_adhoc.py": {
        "test_api_distribute_maxsum_adhoc": {
            "name": "test_api_distribute_maxsum_adhoc",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_api_distribute_dsa_adhoc": {
            "name": "test_api_distribute_dsa_adhoc",
            "location": 55,
            "return": [],
            "arguments": {}
        }
    },
    "pyDcop-master/tests/api/test_api_distribute_ilp_compref.py": {
        "test_api_distribute_maxsum_ilp_compref": {
            "name": "test_api_distribute_maxsum_ilp_compref",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_api_distribute_dsa_ilp_compref": {
            "name": "test_api_distribute_dsa_ilp_compref",
            "location": 55,
            "return": [],
            "arguments": {}
        }
    },
    "pyDcop-master/tests/api/test_api_distribute_ilp_fgdp.py": {
        "create_dcop": {
            "name": "create_dcop",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "test_api_distribute_maxsum_ilp_fgdp": {
            "name": "test_api_distribute_maxsum_ilp_fgdp",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "test_api_distribute_dsa_ilp_fgdp": {
            "name": "test_api_distribute_dsa_ilp_fgdp",
            "location": 72,
            "return": [],
            "arguments": {}
        }
    },
    "pyDcop-master/tests/api/test_api_distribute_oneagent.py": {
        "test_api_distribute_maxsum_oneagent": {
            "name": "test_api_distribute_maxsum_oneagent",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_api_distribute_dsa_oneagent": {
            "name": "test_api_distribute_dsa_oneagent",
            "location": 61,
            "return": [],
            "arguments": {}
        }
    },
    "pyDcop-master/tests/api/test_api_graph.py": {
        "test_api_cg_creation_dsa": {
            "name": "test_api_cg_creation_dsa",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "test_api_cg_creation_mgm": {
            "name": "test_api_cg_creation_mgm",
            "location": 138,
            "return": [],
            "arguments": {}
        },
        "test_api_cg_creation_mgm2": {
            "name": "test_api_cg_creation_mgm2",
            "location": 212,
            "return": [],
            "arguments": {}
        }
    },
    "pyDcop-master/tests/api/test_api_solve.py": {
        "test_api_solve_maxsum": {
            "name": "test_api_solve_maxsum",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "test_api_solve_dsa": {
            "name": "test_api_solve_dsa",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "test_api_solve_dsatuto": {
            "name": "test_api_solve_dsatuto",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "test_api_solve_mgm": {
            "name": "test_api_solve_mgm",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "test_api_solve_mgm2": {
            "name": "test_api_solve_mgm2",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "test_api_solve_dpop": {
            "name": "test_api_solve_dpop",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "check_optimal_result": {
            "name": "check_optimal_result",
            "location": 97,
            "return": [],
            "arguments": {
                "assignment": []
            }
        },
        "check_suboptimal_result": {
            "name": "check_suboptimal_result",
            "location": 100,
            "return": [],
            "arguments": {
                "assignment": []
            }
        }
    },
    "pyDcop-master/tests/api/__init__.py": {},
    "pyDcop-master/tests/dcop_cli/test_distribute.py": {
        "is_hosted": {
            "name": "is_hosted",
            "location": 163,
            "return": [],
            "arguments": {
                "mapping": [],
                "computation": [
                    "str"
                ]
            }
        },
        "run_distribute": {
            "name": "run_distribute",
            "location": 170,
            "return": [],
            "arguments": {
                "filename": [],
                "distribution": [],
                "graph": [],
                "algo": []
            }
        },
        "GraphColoring1.test_oneagent_pseudotree": {
            "name": "test_oneagent_pseudotree",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphColoring1.test_oneagent_factorgraph": {
            "name": "test_oneagent_factorgraph",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphColoring1.test_oneagent_constraints_hypergraph": {
            "name": "test_oneagent_constraints_hypergraph",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphColoring1.test_adhoc_pseudotree": {
            "name": "test_adhoc_pseudotree",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphColoring1.test_adhoc_factorgraph": {
            "name": "test_adhoc_factorgraph",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphColoring1.test_adhoc_constraints_hypergraph": {
            "name": "test_adhoc_constraints_hypergraph",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphColoring1.test_ilp_fgdp_factorgraph": {
            "name": "test_ilp_fgdp_factorgraph",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphColoring1.test_ilp_fgdp_pseudotree": {
            "name": "test_ilp_fgdp_pseudotree",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphColoring1.test_ilp_fgdp_constraints_hypergraph": {
            "name": "test_ilp_fgdp_constraints_hypergraph",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphColoring1.test_ilp_compref_factorgraph": {
            "name": "test_ilp_compref_factorgraph",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphColoring1.test_ilp_compref_constraints_hypergraph": {
            "name": "test_ilp_compref_constraints_hypergraph",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DistAlgoOpionCompatibility.test_dist_with_only_algo_only": {
            "name": "test_dist_with_only_algo_only",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DistAlgoOpionCompatibility.test_dist_with_graph_only": {
            "name": "test_dist_with_graph_only",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DistAlgoOpionCompatibility.test_incompatible_graph_algo_must_fail": {
            "name": "test_incompatible_graph_algo_must_fail",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyDcop-master/tests/dcop_cli/test_generate_graphcoloring.py": {
        "test_random_soft": {
            "name": "test_random_soft",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_random_hard": {
            "name": "test_random_hard",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_grid_hard": {
            "name": "test_grid_hard",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "test_scalefree_hard": {
            "name": "test_scalefree_hard",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "run_generate": {
            "name": "run_generate",
            "location": 38,
            "return": [],
            "arguments": {
                "graph": [],
                "variables_count": [],
                "colors_count": [],
                "intentional": [],
                "soft": [],
                "p_edge": [],
                "m_edge": []
            }
        }
    },
    "pyDcop-master/tests/dcop_cli/test_graph.py": {
        "run_graph": {
            "name": "run_graph",
            "location": 90,
            "return": [],
            "arguments": {
                "filename": [],
                "graph": []
            }
        },
        "GraphColoring1.test_pseudotree": {
            "name": "test_pseudotree",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphColoring1.test_factor_graph": {
            "name": "test_factor_graph",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphColoring1.test_constraints_hypergraph": {
            "name": "test_constraints_hypergraph",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SecpSimple1.test_pseudotree": {
            "name": "test_pseudotree",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SecpSimple1.test_factor_graph": {
            "name": "test_factor_graph",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SecpSimple1.test_constraints_hypergraph": {
            "name": "test_constraints_hypergraph",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyDcop-master/tests/dcop_cli/test_solve.py": {
        "run_solve": {
            "name": "run_solve",
            "location": 245,
            "return": [],
            "arguments": {
                "algo": [],
                "distribution": [],
                "filename": [],
                "timeout": [
                    "int"
                ],
                "mode": [],
                "algo_params": []
            }
        },
        "SimpleSecpDCOP1.check_results": {
            "name": "check_results",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "results": []
            }
        },
        "SimpleSecpDCOP1.test_maxsum_ilp_fgdp": {
            "name": "test_maxsum_ilp_fgdp",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleSecpDCOP1.test_maxsum_ilp_fgdp_process": {
            "name": "test_maxsum_ilp_fgdp_process",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleSecpDCOP1.test_maxsum_adhoc": {
            "name": "test_maxsum_adhoc",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleSecpDCOP1.test_maxsum_adhoc_process": {
            "name": "test_maxsum_adhoc_process",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleSecpDCOP1.test_maxsum_oneagent": {
            "name": "test_maxsum_oneagent",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleSecpDCOP1.test_dpop_adhoc": {
            "name": "test_dpop_adhoc",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleSecpDCOP1.test_dpop_adhoc_process": {
            "name": "test_dpop_adhoc_process",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleSecpDCOP1.test_dsa_adhoc": {
            "name": "test_dsa_adhoc",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleSecpDCOP1.test_dsa_adhoc_process": {
            "name": "test_dsa_adhoc_process",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphColoring1.check_results": {
            "name": "check_results",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "results": [],
                "status": []
            }
        },
        "GraphColoring1.test_maxsum_ilp_fgdp": {
            "name": "test_maxsum_ilp_fgdp",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphColoring1.test_maxsum_adhoc": {
            "name": "test_maxsum_adhoc",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphColoring1.test_maxsum_adhoc_process": {
            "name": "test_maxsum_adhoc_process",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphColoring1.test_maxsum_oneagent": {
            "name": "test_maxsum_oneagent",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphColoring1.test_maxsum_oneagent_process": {
            "name": "test_maxsum_oneagent_process",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphColoring1.test_dpop_adhoc": {
            "name": "test_dpop_adhoc",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphColoring1.test_dpop_adhoc_process": {
            "name": "test_dpop_adhoc_process",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphColoring1.test_dpop_oneagent": {
            "name": "test_dpop_oneagent",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphColoring1.test_dpop_oneagent_process": {
            "name": "test_dpop_oneagent_process",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphColoring1.test_dpop_ilp_fgdp": {
            "name": "test_dpop_ilp_fgdp",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphColoring1.test_dsa_adhoc": {
            "name": "test_dsa_adhoc",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphColoring1.test_dsa_adhoc_process": {
            "name": "test_dsa_adhoc_process",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphColoring1.test_dsa_oneagent": {
            "name": "test_dsa_oneagent",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphColoring1.test_dsa_oneagent_process": {
            "name": "test_dsa_oneagent_process",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphColoring1.test_dsa_ilp_fgdp": {
            "name": "test_dsa_ilp_fgdp",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphColoring10.check_results": {
            "name": "check_results",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "results": []
            }
        },
        "GraphColoring10.test_mgm_adhoc": {
            "name": "test_mgm_adhoc",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphColoring10.test_dpop_oneagent": {
            "name": "test_dpop_oneagent",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphColoringCsp.check_results": {
            "name": "check_results",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "results": []
            }
        },
        "GraphColoringCsp.test_dba_adhoc": {
            "name": "test_dba_adhoc",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphColoringCsp.test_dba_adhoc_process": {
            "name": "test_dba_adhoc_process",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphColoringCsp.test_dba_oneagent": {
            "name": "test_dba_oneagent",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphColoringCsp.test_dba_oneagent_params": {
            "name": "test_dba_oneagent_params",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphColoringCsp.test_dba_oneagent_params_process": {
            "name": "test_dba_oneagent_params_process",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyDcop-master/tests/dcop_cli/utils.py": {
        "instance_path": {
            "name": "instance_path",
            "location": 37,
            "return": [],
            "arguments": {
                "instance_filename": []
            }
        }
    },
    "pyDcop-master/tests/dcop_cli/__init__.py": {},
    "pyDcop-master/tests/instances/external_python_constraints.py": {
        "diff_vars": {
            "name": "diff_vars",
            "location": 3,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        }
    },
    "pyDcop-master/tests/integration/dmaxsum_external_variable.py": {
        "prefer_color": {
            "name": "prefer_color",
            "location": 85,
            "return": [],
            "arguments": {
                "preferred_color": []
            }
        },
        "dmaxsum_external_variable": {
            "name": "dmaxsum_external_variable",
            "location": 99,
            "return": [],
            "arguments": {}
        },
        "run_test": {
            "name": "run_test",
            "location": 225,
            "return": [],
            "arguments": {}
        },
        "prefer_color.color_cost": {
            "name": "color_cost",
            "location": 90,
            "return": [],
            "arguments": {
                "color": []
            }
        },
        "dmaxsum_external_variable.r1": {
            "name": "r1",
            "location": 112,
            "return": [],
            "arguments": {
                "v1_": [],
                "v2_": [],
                "v3_": []
            }
        },
        "dmaxsum_external_variable.r2": {
            "name": "r2",
            "location": 121,
            "return": [],
            "arguments": {
                "v2_": [],
                "v4_": []
            }
        },
        "dmaxsum_external_variable.r3": {
            "name": "r3",
            "location": 128,
            "return": [],
            "arguments": {
                "v3_": [],
                "v4_": []
            }
        }
    },
    "pyDcop-master/tests/integration/dmaxsum_graphcoloring.py": {
        "prefer_color": {
            "name": "prefer_color",
            "location": 59,
            "return": [],
            "arguments": {
                "preferred_color": []
            }
        },
        "dmaxsum_graphcoloring": {
            "name": "dmaxsum_graphcoloring",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "run_test": {
            "name": "run_test",
            "location": 184,
            "return": [],
            "arguments": {}
        },
        "prefer_color.color_cost": {
            "name": "color_cost",
            "location": 63,
            "return": [],
            "arguments": {
                "color": []
            }
        },
        "dmaxsum_graphcoloring.r1": {
            "name": "r1",
            "location": 78,
            "return": [],
            "arguments": {
                "v1_": [],
                "v2_": [],
                "v3_": []
            }
        },
        "dmaxsum_graphcoloring.r1_2": {
            "name": "r1_2",
            "location": 85,
            "return": [],
            "arguments": {
                "v1_": [],
                "v2_": [],
                "v4_": []
            }
        },
        "dmaxsum_graphcoloring.r2": {
            "name": "r2",
            "location": 92,
            "return": [],
            "arguments": {
                "v2_": [],
                "v4_": []
            }
        },
        "dmaxsum_graphcoloring.r3": {
            "name": "r3",
            "location": 99,
            "return": [],
            "arguments": {
                "v3_": [],
                "v4_": []
            }
        }
    },
    "pyDcop-master/tests/integration/dpop_graphcoloring_1.py": {
        "dpop_graphcoloring_1": {
            "name": "dpop_graphcoloring_1",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "run_test": {
            "name": "run_test",
            "location": 131,
            "return": [],
            "arguments": {}
        },
        "dpop_graphcoloring_1.x0_prefers_r": {
            "name": "x0_prefers_r",
            "location": 60,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "dpop_graphcoloring_1.x1_prefers_g": {
            "name": "x1_prefers_g",
            "location": 66,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "dpop_graphcoloring_1.x2_prefers_b": {
            "name": "x2_prefers_b",
            "location": 72,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "dpop_graphcoloring_1.prefer_different": {
            "name": "prefer_different",
            "location": 77,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        }
    },
    "pyDcop-master/tests/integration/dpop_nonbinaryrelation.py": {
        "dpop_nonbinaryrelation": {
            "name": "dpop_nonbinaryrelation",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "run_test": {
            "name": "run_test",
            "location": 120,
            "return": [],
            "arguments": {}
        },
        "dpop_nonbinaryrelation.x0_prefs": {
            "name": "x0_prefs",
            "location": 62,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "dpop_nonbinaryrelation.x1_prefs": {
            "name": "x1_prefs",
            "location": 68,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "dpop_nonbinaryrelation.x2_prefs": {
            "name": "x2_prefs",
            "location": 74,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "dpop_nonbinaryrelation.three_ary_relation": {
            "name": "three_ary_relation",
            "location": 80,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "z": []
            }
        }
    },
    "pyDcop-master/tests/integration/dpop_nonbinaryrelation_4vars.py": {
        "dpop_nonbinaryrelation_4vars": {
            "name": "dpop_nonbinaryrelation_4vars",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "run_test": {
            "name": "run_test",
            "location": 151,
            "return": [],
            "arguments": {}
        },
        "dpop_nonbinaryrelation_4vars.x0_prefs": {
            "name": "x0_prefs",
            "location": 63,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "dpop_nonbinaryrelation_4vars.x1_prefs": {
            "name": "x1_prefs",
            "location": 69,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "dpop_nonbinaryrelation_4vars.x2_prefs": {
            "name": "x2_prefs",
            "location": 75,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "dpop_nonbinaryrelation_4vars.x3_prefs": {
            "name": "x3_prefs",
            "location": 81,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "dpop_nonbinaryrelation_4vars.four_ary_relation": {
            "name": "four_ary_relation",
            "location": 87,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": [],
                "d": []
            }
        },
        "dpop_nonbinaryrelation_4vars.neutral_relation": {
            "name": "neutral_relation",
            "location": 90,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        }
    },
    "pyDcop-master/tests/integration/dpop_PetcuThesisp56.py": {
        "dpop_petcu": {
            "name": "dpop_petcu",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "run_test": {
            "name": "run_test",
            "location": 119,
            "return": [],
            "arguments": {}
        }
    },
    "pyDcop-master/tests/integration/dpop_unary.py": {
        "dpop_unary_constraint": {
            "name": "dpop_unary_constraint",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "run_test": {
            "name": "run_test",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "dpop_unary_constraint.unary_x1": {
            "name": "unary_x1",
            "location": 62,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "dpop_unary_constraint.prefer_different": {
            "name": "prefer_different",
            "location": 71,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        }
    },
    "pyDcop-master/tests/integration/dsa_graphcoloring.py": {
        "distribute_agents": {
            "name": "distribute_agents",
            "location": 46,
            "return": [],
            "arguments": {
                "var_facts": [],
                "variant": [],
                "probability": []
            }
        },
        "graph_coloring_with_prefs": {
            "name": "graph_coloring_with_prefs",
            "location": 70,
            "return": [],
            "arguments": {
                "variant": [],
                "probability": []
            }
        },
        "run_several_times": {
            "name": "run_several_times",
            "location": 122,
            "return": [],
            "arguments": {
                "variant": [],
                "probability": [],
                "run_count": []
            }
        },
        "run_full_bench": {
            "name": "run_full_bench",
            "location": 137,
            "return": [],
            "arguments": {}
        },
        "run_test": {
            "name": "run_test",
            "location": 152,
            "return": [],
            "arguments": {}
        },
        "graph_coloring_with_prefs.p1": {
            "name": "p1",
            "location": 80,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "graph_coloring_with_prefs.p2": {
            "name": "p2",
            "location": 83,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "graph_coloring_with_prefs.p3": {
            "name": "p3",
            "location": 86,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "graph_coloring_with_prefs.u1": {
            "name": "u1",
            "location": 91,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": []
            }
        },
        "graph_coloring_with_prefs.u2": {
            "name": "u2",
            "location": 96,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": [],
                "x3_": []
            }
        },
        "graph_coloring_with_prefs.u3": {
            "name": "u3",
            "location": 102,
            "return": [],
            "arguments": {
                "x2_": [],
                "x3_": []
            }
        }
    },
    "pyDcop-master/tests/integration/maxsum_equality.py": {
        "maxsum_equality_noise": {
            "name": "maxsum_equality_noise",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "run_test": {
            "name": "run_test",
            "location": 100,
            "return": [],
            "arguments": {}
        },
        "maxsum_equality_noise.scene_rel": {
            "name": "scene_rel",
            "location": 58,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "z": []
            }
        }
    },
    "pyDcop-master/tests/integration/maxsum_graphcoloring.py": {
        "distribute_agents": {
            "name": "distribute_agents",
            "location": 73,
            "return": [],
            "arguments": {
                "var_facts": []
            }
        },
        "graph_coloring_with_prefs": {
            "name": "graph_coloring_with_prefs",
            "location": 102,
            "return": [],
            "arguments": {}
        },
        "run_test": {
            "name": "run_test",
            "location": 158,
            "return": [],
            "arguments": {}
        },
        "graph_coloring_with_prefs.p1": {
            "name": "p1",
            "location": 117,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "graph_coloring_with_prefs.p2": {
            "name": "p2",
            "location": 120,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "graph_coloring_with_prefs.p3": {
            "name": "p3",
            "location": 123,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "graph_coloring_with_prefs.u1": {
            "name": "u1",
            "location": 128,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": []
            }
        },
        "graph_coloring_with_prefs.u2": {
            "name": "u2",
            "location": 133,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": [],
                "x3_": []
            }
        },
        "graph_coloring_with_prefs.u3": {
            "name": "u3",
            "location": 139,
            "return": [],
            "arguments": {
                "x2_": [],
                "x3_": []
            }
        }
    },
    "pyDcop-master/tests/integration/maxsum_graphcoloring_separateagents.py": {
        "distribue_agent_for_all": {
            "name": "distribue_agent_for_all",
            "location": 81,
            "return": [],
            "arguments": {
                "variables": [],
                "factors": []
            }
        },
        "graph_coloring_no_prefs": {
            "name": "graph_coloring_no_prefs",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "graph_coloring_with_prefs": {
            "name": "graph_coloring_with_prefs",
            "location": 149,
            "return": [],
            "arguments": {}
        },
        "run_test": {
            "name": "run_test",
            "location": 196,
            "return": [],
            "arguments": {}
        }
    },
    "pyDcop-master/tests/integration/maxsum_graphcoloring_with_costs.py": {
        "distribue_agent_for_all": {
            "name": "distribue_agent_for_all",
            "location": 65,
            "return": [],
            "arguments": {
                "variables": [],
                "factors": []
            }
        },
        "graph_coloring_pb": {
            "name": "graph_coloring_pb",
            "location": 85,
            "return": [],
            "arguments": {}
        },
        "run_test": {
            "name": "run_test",
            "location": 125,
            "return": [],
            "arguments": {}
        },
        "graph_coloring_pb.all_diff": {
            "name": "all_diff",
            "location": 102,
            "return": [],
            "arguments": {
                "x1_val": [],
                "x2_val": []
            }
        }
    },
    "pyDcop-master/tests/integration/maxsum_smartlights_multiplecomputationagent.py": {
        "maxsum_smartlights_multiplecomputationagent": {
            "name": "maxsum_smartlights_multiplecomputationagent",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "run_test": {
            "name": "run_test",
            "location": 164,
            "return": [],
            "arguments": {}
        },
        "maxsum_smartlights_multiplecomputationagent.cost_l1": {
            "name": "cost_l1",
            "location": 72,
            "return": [],
            "arguments": {
                "l1": []
            }
        },
        "maxsum_smartlights_multiplecomputationagent.cost_l2": {
            "name": "cost_l2",
            "location": 78,
            "return": [],
            "arguments": {
                "l2": []
            }
        },
        "maxsum_smartlights_multiplecomputationagent.cost_l3": {
            "name": "cost_l3",
            "location": 84,
            "return": [],
            "arguments": {
                "l3": []
            }
        },
        "maxsum_smartlights_multiplecomputationagent.scene_rel": {
            "name": "scene_rel",
            "location": 91,
            "return": [],
            "arguments": {
                "l1": [],
                "l2": [],
                "l3": [],
                "y1": []
            }
        },
        "maxsum_smartlights_multiplecomputationagent.rule_rel": {
            "name": "rule_rel",
            "location": 98,
            "return": [],
            "arguments": {
                "l3": [],
                "y1": []
            }
        }
    },
    "pyDcop-master/tests/integration/maxsum_smartlights_multiplecomputationagent_variablecost.py": {
        "maxsum_smartlights_multiplecomputationagent_costvariable": {
            "name": "maxsum_smartlights_multiplecomputationagent_costvariable",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "run_test": {
            "name": "run_test",
            "location": 146,
            "return": [],
            "arguments": {}
        },
        "maxsum_smartlights_multiplecomputationagent_costvariable.scene_rel": {
            "name": "scene_rel",
            "location": 79,
            "return": [],
            "arguments": {
                "l1": [],
                "l2": [],
                "l3": [],
                "y1": []
            }
        },
        "maxsum_smartlights_multiplecomputationagent_costvariable.rule_rel": {
            "name": "rule_rel",
            "location": 86,
            "return": [],
            "arguments": {
                "l3": [],
                "y1": []
            }
        }
    },
    "pyDcop-master/tests/integration/maxsum_smartlights_simple.py": {
        "maxsum_smartlights_simple": {
            "name": "maxsum_smartlights_simple",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "run_test": {
            "name": "run_test",
            "location": 166,
            "return": [],
            "arguments": {}
        },
        "maxsum_smartlights_simple.cost_l1": {
            "name": "cost_l1",
            "location": 74,
            "return": [],
            "arguments": {
                "l1": []
            }
        },
        "maxsum_smartlights_simple.cost_l2": {
            "name": "cost_l2",
            "location": 80,
            "return": [],
            "arguments": {
                "l2": []
            }
        },
        "maxsum_smartlights_simple.cost_l3": {
            "name": "cost_l3",
            "location": 86,
            "return": [],
            "arguments": {
                "l3": []
            }
        },
        "maxsum_smartlights_simple.scene_rel": {
            "name": "scene_rel",
            "location": 93,
            "return": [],
            "arguments": {
                "l1": [],
                "l2": [],
                "l3": [],
                "y1": []
            }
        },
        "maxsum_smartlights_simple.rule_rel": {
            "name": "rule_rel",
            "location": 100,
            "return": [],
            "arguments": {
                "l3": [],
                "y1": []
            }
        }
    },
    "pyDcop-master/tests/integration/run_all.py": {
        "run_all_integ_tests": {
            "name": "run_all_integ_tests",
            "location": 37,
            "return": [],
            "arguments": {}
        }
    },
    "pyDcop-master/tests/integration/end2end/maxsum_graphcoloring.py": {},
    "pyDcop-master/tests/integration/end2end/maxsum_graphcoloring2.py": {},
    "pyDcop-master/tests/unit/test_agentfw.py": {
        "AgentFwTest.test_sendmsg_counts": {
            "name": "test_sendmsg_counts",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AgentFwTest.test_sendmsg_two_neighbors": {
            "name": "test_sendmsg_two_neighbors",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AgentFwTest.test_sendRevievedFrom": {
            "name": "test_sendRevievedFrom",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AgentFwTest.test_sendmsg_two_neighbors.a1_start": {
            "name": "a1_start",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AgentFwTest.test_sendmsg_two_neighbors.handle_message": {
            "name": "handle_message",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [],
                "dest": [],
                "msg": []
            }
        },
        "AgentFwTest.test_sendRevievedFrom.a1_start": {
            "name": "a1_start",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AgentFwTest.test_sendRevievedFrom.handle_message": {
            "name": "handle_message",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [],
                "dest": [],
                "msg": []
            }
        }
    },
    "pyDcop-master/tests/unit/test_algorithms_amaxsum.py": {
        "test_init": {
            "name": "test_init",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "test_cost_for_1var": {
            "name": "test_cost_for_1var",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "test_cost_for_1var_2": {
            "name": "test_cost_for_1var_2",
            "location": 100,
            "return": [],
            "arguments": {}
        },
        "test_cost_for_2var": {
            "name": "test_cost_for_2var",
            "location": 125,
            "return": [],
            "arguments": {}
        },
        "test_init.phi": {
            "name": "phi",
            "location": 63,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": []
            }
        },
        "test_cost_for_1var.cost": {
            "name": "cost",
            "location": 82,
            "return": [],
            "arguments": {
                "x1_": []
            }
        },
        "test_cost_for_1var_2.cost": {
            "name": "cost",
            "location": 108,
            "return": [],
            "arguments": {
                "x1": []
            }
        },
        "test_cost_for_2var.cost": {
            "name": "cost",
            "location": 132,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": []
            }
        },
        "VarDummy.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ApproxMatchTests.test_match_exact": {
            "name": "test_match_exact",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApproxMatchTests.test_nomatch": {
            "name": "test_nomatch",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApproxMatchTests.test_nomatch2": {
            "name": "test_nomatch2",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ComputationMemory.test_variable_memory_no_neighbor": {
            "name": "test_variable_memory_no_neighbor",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ComputationMemory.test_variable_memory_one_neighbor": {
            "name": "test_variable_memory_one_neighbor",
            "location": 216,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ComputationMemory.test_factor_memory_one_neighbor": {
            "name": "test_factor_memory_one_neighbor",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ComputationMemory.test_factor_memory_two_neighbor": {
            "name": "test_factor_memory_two_neighbor",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ComputationMemory.test_variable_memory_two_neighbor": {
            "name": "test_variable_memory_two_neighbor",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommunicationCost.test_variable_one_neighbors": {
            "name": "test_variable_one_neighbors",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsMaxsumMessage.test_serialize_repr": {
            "name": "test_serialize_repr",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyDcop-master/tests/unit/test_algorithms_base.py": {
        "test_find_optimal_single_unary_constraint": {
            "name": "test_find_optimal_single_unary_constraint",
            "location": 229,
            "return": [],
            "arguments": {}
        },
        "test_find_optimal_2_unary_constraints": {
            "name": "test_find_optimal_2_unary_constraints",
            "location": 238,
            "return": [],
            "arguments": {}
        },
        "test_find_optimal_one_binary_constraint": {
            "name": "test_find_optimal_one_binary_constraint",
            "location": 248,
            "return": [],
            "arguments": {}
        },
        "test_find_optimal_several_best_values": {
            "name": "test_find_optimal_several_best_values",
            "location": 261,
            "return": [],
            "arguments": {}
        },
        "test_optimal_cost_value": {
            "name": "test_optimal_cost_value",
            "location": 280,
            "return": [],
            "arguments": {}
        },
        "test_check_type_by_string": {
            "name": "test_check_type_by_string",
            "location": 292,
            "return": [],
            "arguments": {}
        },
        "test_check_type_by_string_invalid_type": {
            "name": "test_check_type_by_string_invalid_type",
            "location": 298,
            "return": [],
            "arguments": {}
        },
        "test_is_valid_param_value": {
            "name": "test_is_valid_param_value",
            "location": 304,
            "return": [],
            "arguments": {}
        },
        "algo_param_defs": {
            "name": "algo_param_defs",
            "location": 318,
            "return": [],
            "arguments": {}
        },
        "test_algo_parameters_all_defaults": {
            "name": "test_algo_parameters_all_defaults",
            "location": 325,
            "return": [],
            "arguments": {
                "algo_param_defs": []
            }
        },
        "test_algo_parameters_with_valid_str_param": {
            "name": "test_algo_parameters_with_valid_str_param",
            "location": 334,
            "return": [],
            "arguments": {
                "algo_param_defs": []
            }
        },
        "test_algo_parameters_with_valid_int_param": {
            "name": "test_algo_parameters_with_valid_int_param",
            "location": 340,
            "return": [],
            "arguments": {
                "algo_param_defs": []
            }
        },
        "test_algo_parameters_with_all_params": {
            "name": "test_algo_parameters_with_all_params",
            "location": 347,
            "return": [],
            "arguments": {
                "algo_param_defs": []
            }
        },
        "test_algo_parameters_with_int_conversion": {
            "name": "test_algo_parameters_with_int_conversion",
            "location": 357,
            "return": [],
            "arguments": {
                "algo_param_defs": []
            }
        },
        "test_algo_parameters_with_invalid_param": {
            "name": "test_algo_parameters_with_invalid_param",
            "location": 363,
            "return": [],
            "arguments": {
                "algo_param_defs": []
            }
        },
        "test_algo_parameters_with_invalid_value": {
            "name": "test_algo_parameters_with_invalid_value",
            "location": 368,
            "return": [],
            "arguments": {
                "algo_param_defs": []
            }
        },
        "MessageTests.test_simple_repr": {
            "name": "test_simple_repr",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessageTests.test_from_repr": {
            "name": "test_from_repr",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableDomainTest.test_domain_iterator": {
            "name": "test_domain_iterator",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableDomainTest.test_domain_in": {
            "name": "test_domain_in",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableDomainTest.test_domain_len": {
            "name": "test_domain_len",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableDomainTest.test_domain_content": {
            "name": "test_domain_content",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenerateAssignementTestCase.test_generate_1var": {
            "name": "test_generate_1var",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenerateAssignementTestCase.test_generate_1var_generator": {
            "name": "test_generate_1var_generator",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenerateAssignementTestCase.test_generate_2var": {
            "name": "test_generate_2var",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenerateAssignementTestCase.test_generate_3var": {
            "name": "test_generate_3var",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenerateAssignementAsDictTestCase.test_generate_1var": {
            "name": "test_generate_1var",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenerateAssignementAsDictTestCase.test_generate_2var": {
            "name": "test_generate_2var",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FindArgOptimalTestCase.test_findargmax": {
            "name": "test_findargmax",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FindArgOptimalTestCase.test_findargmin": {
            "name": "test_findargmin",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FindArgOptimalTestCase.test_findargmin_fct": {
            "name": "test_findargmin_fct",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FindArgOptimalTestCase.test_findargmin_several_values": {
            "name": "test_findargmin_several_values",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_find_optimal_one_binary_constraint.c1": {
            "name": "c1",
            "location": 253,
            "return": [],
            "arguments": {
                "v1_": [],
                "v2_": []
            }
        },
        "test_find_optimal_several_best_values.c1": {
            "name": "c1",
            "location": 269,
            "return": [],
            "arguments": {
                "v1_": [],
                "v2_": []
            }
        }
    },
    "pyDcop-master/tests/unit/test_algorithms_dba.py": {
        "test_communication_load": {
            "name": "test_communication_load",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "test_computation_memory_one_constraint": {
            "name": "test_computation_memory_one_constraint",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "test_computation_memory_two_constraints": {
            "name": "test_computation_memory_two_constraints",
            "location": 59,
            "return": [],
            "arguments": {}
        }
    },
    "pyDcop-master/tests/unit/test_algorithms_dpop.py": {
        "test_communicatino_load": {
            "name": "test_communicatino_load",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "test_computation_memory": {
            "name": "test_computation_memory",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "DummySender.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DummySender.__call__": {
            "name": "__call__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "sender_var": [],
                "dest_var": [],
                "msg": [],
                "prio": [],
                "on_error": []
            }
        },
        "TestAlgoExampleTwoVars.setup_method": {
            "name": "setup_method",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAlgoExampleTwoVars.test_onstart_two_vars": {
            "name": "test_onstart_two_vars",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAlgoExampleTwoVars.test_on_util_root_two_vars": {
            "name": "test_on_util_root_two_vars",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAlgoExampleTwoVars.test_value_leaf_two_vars": {
            "name": "test_value_leaf_two_vars",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAlgoExampleThreeVars.setup_method": {
            "name": "setup_method",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "method": []
            }
        },
        "TestAlgoExampleThreeVars.test_on_start": {
            "name": "test_on_start",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAlgoExampleThreeVars.test_on_util_root_two_vars": {
            "name": "test_on_util_root_two_vars",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAlgoExampleThreeVars.test_value_leaf_two_vars": {
            "name": "test_value_leaf_two_vars",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSmartLightSample.test_4variables": {
            "name": "test_4variables",
            "location": 260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSmartLightSample.test_4variables.scene_rel": {
            "name": "scene_rel",
            "location": 267,
            "return": [],
            "arguments": {
                "l1_": [],
                "l2_": [],
                "l3_": [],
                "y1_": []
            }
        },
        "TestSmartLightSample.test_4variables.cost_l3": {
            "name": "cost_l3",
            "location": 273,
            "return": [],
            "arguments": {
                "l3_": []
            }
        }
    },
    "pyDcop-master/tests/unit/test_algorithms_dsa.py": {
        "test_communication_load": {
            "name": "test_communication_load",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "test_computation_memory_one_constraint": {
            "name": "test_computation_memory_one_constraint",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_computation_memory_two_constraints": {
            "name": "test_computation_memory_two_constraints",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_footprint_on_computation_object": {
            "name": "test_footprint_on_computation_object",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "test_build_computation_default_params": {
            "name": "test_build_computation_default_params",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "test_build_computation_max_mode": {
            "name": "test_build_computation_max_mode",
            "location": 105,
            "return": [],
            "arguments": {}
        },
        "test_build_computation_with_params": {
            "name": "test_build_computation_with_params",
            "location": 114,
            "return": [],
            "arguments": {}
        },
        "test_1_unary_constraint_means_no_neighbors": {
            "name": "test_1_unary_constraint_means_no_neighbors",
            "location": 128,
            "return": [],
            "arguments": {}
        },
        "test_2_unary_constraint_means_no_neighbors": {
            "name": "test_2_unary_constraint_means_no_neighbors",
            "location": 140,
            "return": [],
            "arguments": {}
        },
        "test_one_binary_constraint_one_neighbors": {
            "name": "test_one_binary_constraint_one_neighbors",
            "location": 153,
            "return": [],
            "arguments": {}
        },
        "test_2_binary_constraint_one_neighbors": {
            "name": "test_2_binary_constraint_one_neighbors",
            "location": 170,
            "return": [],
            "arguments": {}
        },
        "test_3ary_constraint_2_neighbors": {
            "name": "test_3ary_constraint_2_neighbors",
            "location": 190,
            "return": [],
            "arguments": {}
        },
        "test_select_and_send_random_value_when_starting": {
            "name": "test_select_and_send_random_value_when_starting",
            "location": 209,
            "return": [],
            "arguments": {}
        },
        "test_str_dsa_class": {
            "name": "test_str_dsa_class",
            "location": 242,
            "return": [],
            "arguments": {}
        },
        "test_repr_dsa_class": {
            "name": "test_repr_dsa_class",
            "location": 253,
            "return": [],
            "arguments": {}
        },
        "test_one_binary_constraint_one_neighbors.c1": {
            "name": "c1",
            "location": 159,
            "return": [],
            "arguments": {
                "v1_": [],
                "v2_": []
            }
        },
        "test_2_binary_constraint_one_neighbors.c1": {
            "name": "c1",
            "location": 175,
            "return": [],
            "arguments": {
                "v1_": [],
                "v2_": []
            }
        },
        "test_2_binary_constraint_one_neighbors.c2": {
            "name": "c2",
            "location": 179,
            "return": [],
            "arguments": {
                "v1_": [],
                "v2_": []
            }
        },
        "test_3ary_constraint_2_neighbors.c1": {
            "name": "c1",
            "location": 196,
            "return": [],
            "arguments": {
                "v1_": [],
                "v2_": [],
                "v3_": []
            }
        },
        "test_select_and_send_random_value_when_starting.c1": {
            "name": "c1",
            "location": 217,
            "return": [],
            "arguments": {
                "v1_": [],
                "v2_": [],
                "v3_": []
            }
        }
    },
    "pyDcop-master/tests/unit/test_algorithms_dsatuto.py": {},
    "pyDcop-master/tests/unit/test_algorithms_dynamic_maxsum.py": {
        "DynamicFunctionFactorComputationTest.test_init": {
            "name": "test_init",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DynamicFunctionFactorComputationTest.test_change_function_name": {
            "name": "test_change_function_name",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DynamicFunctionFactorComputationTest.test_change_function_different_order": {
            "name": "test_change_function_different_order",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DynamicFunctionFactorComputationTest.test_change_function_wrong_dimensions_len": {
            "name": "test_change_function_wrong_dimensions_len",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DynamicFunctionFactorComputationTest.test_change_function_wrong_dimensions_var": {
            "name": "test_change_function_wrong_dimensions_var",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DynamicFunctionFactorComputationTest.test_init.phi": {
            "name": "phi",
            "location": 50,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": []
            }
        },
        "DynamicFunctionFactorComputationTest.test_change_function_name.phi": {
            "name": "phi",
            "location": 67,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": []
            }
        },
        "DynamicFunctionFactorComputationTest.test_change_function_name.phi2": {
            "name": "phi2",
            "location": 71,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": []
            }
        },
        "DynamicFunctionFactorComputationTest.test_change_function_different_order.phi": {
            "name": "phi",
            "location": 90,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": []
            }
        },
        "DynamicFunctionFactorComputationTest.test_change_function_different_order.phi2": {
            "name": "phi2",
            "location": 94,
            "return": [],
            "arguments": {
                "x2_": [],
                "x1_": []
            }
        },
        "DynamicFunctionFactorComputationTest.test_change_function_wrong_dimensions_len.phi": {
            "name": "phi",
            "location": 115,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": []
            }
        },
        "DynamicFunctionFactorComputationTest.test_change_function_wrong_dimensions_len.phi2": {
            "name": "phi2",
            "location": 119,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": [],
                "x3_": []
            }
        },
        "DynamicFunctionFactorComputationTest.test_change_function_wrong_dimensions_var.phi": {
            "name": "phi",
            "location": 140,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": []
            }
        },
        "DynamicFunctionFactorComputationTest.test_change_function_wrong_dimensions_var.phi2": {
            "name": "phi2",
            "location": 144,
            "return": [],
            "arguments": {
                "x1_": [],
                "x3_": []
            }
        }
    },
    "pyDcop-master/tests/unit/test_algorithms_gdba.py": {
        "GdbaAlgoTest.test_init_from_constraints_as_functions": {
            "name": "test_init_from_constraints_as_functions",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GdbaAlgoTest.test_init_from_constraints_as_matrices": {
            "name": "test_init_from_constraints_as_matrices",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsCostComputation.test_compute_eval_binary": {
            "name": "test_compute_eval_binary",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsCostComputation.test_compute_eval_3_ary": {
            "name": "test_compute_eval_3_ary",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsCostComputation.test_min_compute_best_for_binary_constraint": {
            "name": "test_min_compute_best_for_binary_constraint",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsCostComputation.test_max_compute_best_for_binary_constraint": {
            "name": "test_max_compute_best_for_binary_constraint",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsCostComputation.test_min_compute_best_for_3_ary_constraint": {
            "name": "test_min_compute_best_for_3_ary_constraint",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsCostComputation.test_eff_cost_A_unary": {
            "name": "test_eff_cost_A_unary",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsCostComputation.test_eff_cost_A_n_ary": {
            "name": "test_eff_cost_A_n_ary",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsCostComputation.test_eff_cost_M_unary": {
            "name": "test_eff_cost_M_unary",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsCostComputation.test_eff_cost_M_n_ary": {
            "name": "test_eff_cost_M_n_ary",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsConstraintViolation.NZ_violation_unary": {
            "name": "NZ_violation_unary",
            "location": 278,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsConstraintViolation.NZ_violation_n_ary": {
            "name": "NZ_violation_n_ary",
            "location": 287,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsConstraintViolation.NM_violation_unary": {
            "name": "NM_violation_unary",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsConstraintViolation.NM_violation_n_ary": {
            "name": "NM_violation_n_ary",
            "location": 306,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsConstraintViolation.MX_violation_unary": {
            "name": "MX_violation_unary",
            "location": 316,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsConstraintViolation.MX_violation_n_ary": {
            "name": "MX_violation_n_ary",
            "location": 326,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIncreaseCost.test_increase_E": {
            "name": "test_increase_E",
            "location": 338,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIncreaseCost.test_increase_R": {
            "name": "test_increase_R",
            "location": 362,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIncreaseCost.test_increase_C": {
            "name": "test_increase_C",
            "location": 387,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIncreaseCost.test_increase_T": {
            "name": "test_increase_T",
            "location": 436,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GdbaAlgoTest.test_init_from_constraints_as_functions.phi": {
            "name": "phi",
            "location": 50,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": []
            }
        },
        "TestsCostComputation.test_compute_eval_binary.phi": {
            "name": "phi",
            "location": 84,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": []
            }
        },
        "TestsCostComputation.test_compute_eval_3_ary.phi": {
            "name": "phi",
            "location": 105,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": [],
                "x3_": []
            }
        },
        "TestsCostComputation.test_min_compute_best_for_binary_constraint.phi": {
            "name": "phi",
            "location": 128,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": []
            }
        },
        "TestsCostComputation.test_max_compute_best_for_binary_constraint.phi": {
            "name": "phi",
            "location": 146,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": []
            }
        },
        "TestsCostComputation.test_min_compute_best_for_3_ary_constraint.phi": {
            "name": "phi",
            "location": 165,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": [],
                "x3_": []
            }
        },
        "TestsCostComputation.test_eff_cost_A_unary.phi": {
            "name": "phi",
            "location": 183,
            "return": [],
            "arguments": {
                "x1_": []
            }
        },
        "TestsCostComputation.test_eff_cost_A_n_ary.phi": {
            "name": "phi",
            "location": 203,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": [],
                "x3_": []
            }
        },
        "TestsCostComputation.test_eff_cost_M_unary.phi": {
            "name": "phi",
            "location": 226,
            "return": [],
            "arguments": {
                "x1_": []
            }
        },
        "TestsCostComputation.test_eff_cost_M_n_ary.phi": {
            "name": "phi",
            "location": 245,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": [],
                "x3_": []
            }
        },
        "TestIncreaseCost.test_increase_E.phi": {
            "name": "phi",
            "location": 345,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": [],
                "x3_": []
            }
        },
        "TestIncreaseCost.test_increase_R.phi": {
            "name": "phi",
            "location": 369,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": [],
                "x3_": []
            }
        },
        "TestIncreaseCost.test_increase_C.phi": {
            "name": "phi",
            "location": 394,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": [],
                "x3_": []
            }
        },
        "TestIncreaseCost.test_increase_T.phi": {
            "name": "phi",
            "location": 443,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": [],
                "x3_": []
            }
        }
    },
    "pyDcop-master/tests/unit/test_algorithms_maxsum.py": {
        "test_comp_creation": {
            "name": "test_comp_creation",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "test_comp_creation_with_factory_method": {
            "name": "test_comp_creation_with_factory_method",
            "location": 76,
            "return": [],
            "arguments": {}
        },
        "test_compute_factor_cost_at_start": {
            "name": "test_compute_factor_cost_at_start",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "test_select_value_no_cost_var": {
            "name": "test_select_value_no_cost_var",
            "location": 115,
            "return": [],
            "arguments": {}
        }
    },
    "pyDcop-master/tests/unit/test_algorithms_mgm.py": {
        "test_communication_load": {
            "name": "test_communication_load",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_computation_memory_one_constraint": {
            "name": "test_computation_memory_one_constraint",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "test_computation_memory_two_constraints": {
            "name": "test_computation_memory_two_constraints",
            "location": 56,
            "return": [],
            "arguments": {}
        }
    },
    "pyDcop-master/tests/unit/test_algorithms_mgm2.py": {
        "test_communication_load": {
            "name": "test_communication_load",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "test_computation_memory_one_constraint": {
            "name": "test_computation_memory_one_constraint",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "test_computation_memory_two_constraints": {
            "name": "test_computation_memory_two_constraints",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "test_no_neighbors": {
            "name": "test_no_neighbors",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "TestsValueComputation.test_best_unary": {
            "name": "test_best_unary",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsValueComputation.test_binary_func_min": {
            "name": "test_binary_func_min",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsValueComputation.test_binary_func_max": {
            "name": "test_binary_func_max",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsValueComputation.test_3_ary_func_min": {
            "name": "test_3_ary_func_min",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsValueComputation.test_3_ary_func_max": {
            "name": "test_3_ary_func_max",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsCostComputation.test_unary_function_relation": {
            "name": "test_unary_function_relation",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsCostComputation.test_binary_func": {
            "name": "test_binary_func",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsCostComputation.test_3_ary_func": {
            "name": "test_3_ary_func",
            "location": 260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsCostComputation.test_current_local_cost_unary": {
            "name": "test_current_local_cost_unary",
            "location": 280,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsCostComputation.test_current_local_cost_binary": {
            "name": "test_current_local_cost_binary",
            "location": 306,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsCostComputation.test_current_local_cost_3_ary": {
            "name": "test_current_local_cost_3_ary",
            "location": 334,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsChangeState.test_enter_value_state": {
            "name": "test_enter_value_state",
            "location": 367,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsChangeState.test_enter_offer_state": {
            "name": "test_enter_offer_state",
            "location": 393,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsChangeState.test_enter_answer_state": {
            "name": "test_enter_answer_state",
            "location": 422,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsChangeState.test_enter_gain_state": {
            "name": "test_enter_gain_state",
            "location": 443,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsChangeState.test_enter_go_state": {
            "name": "test_enter_go_state",
            "location": 468,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsOffersComputations.test_compute_offers_min_mode": {
            "name": "test_compute_offers_min_mode",
            "location": 491,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsOffersComputations.test_compute_offers_max_mode": {
            "name": "test_compute_offers_max_mode",
            "location": 519,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsOffersComputations.test_find_best_offer_min_mode_one_offerer": {
            "name": "test_find_best_offer_min_mode_one_offerer",
            "location": 547,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsOffersComputations.test_find_best_offer_max_mode_one_offerer": {
            "name": "test_find_best_offer_max_mode_one_offerer",
            "location": 590,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsOffersComputations.test_find_best_offer_min_mode_2_offerers": {
            "name": "test_find_best_offer_min_mode_2_offerers",
            "location": 636,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsOffersComputations.test_find_best_offer_max_mode_2_offerers": {
            "name": "test_find_best_offer_max_mode_2_offerers",
            "location": 677,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsHandleMessage.test_value_not_all_neighbors_received": {
            "name": "test_value_not_all_neighbors_received",
            "location": 721,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsHandleMessage.test_value_all_neighbors_received": {
            "name": "test_value_all_neighbors_received",
            "location": 742,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsHandleMessage.test_offer_has_no_partner_yet": {
            "name": "test_offer_has_no_partner_yet",
            "location": 782,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsHandleMessage.test_offer_already_has_partner": {
            "name": "test_offer_already_has_partner",
            "location": 853,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsHandleMessage.test_response_accept": {
            "name": "test_response_accept",
            "location": 966,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsHandleMessage.test_response_reject": {
            "name": "test_response_reject",
            "location": 1005,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsHandleMessage.test_go_accept_no_postponed_value_message": {
            "name": "test_go_accept_no_postponed_value_message",
            "location": 1046,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsHandleMessage.test_go_accept_with_postponed_value_message": {
            "name": "test_go_accept_with_postponed_value_message",
            "location": 1091,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsHandleMessage.test_go_reject_no_postponed_value_message": {
            "name": "test_go_reject_no_postponed_value_message",
            "location": 1148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsHandleMessage.test_go_reject_with_postponed_value_message": {
            "name": "test_go_reject_with_postponed_value_message",
            "location": 1185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsHandleMessage.test_gain_not_all_received": {
            "name": "test_gain_not_all_received",
            "location": 1233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsHandleMessage.test_gain_all_received": {
            "name": "test_gain_all_received",
            "location": 1263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsHandleMessage.test_clear_agent": {
            "name": "test_clear_agent",
            "location": 1349,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsValueComputation.test_binary_func_min.phi": {
            "name": "phi",
            "location": 141,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": []
            }
        },
        "TestsValueComputation.test_binary_func_max.phi": {
            "name": "phi",
            "location": 162,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": []
            }
        },
        "TestsValueComputation.test_3_ary_func_min.phi": {
            "name": "phi",
            "location": 183,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": [],
                "x3_": []
            }
        },
        "TestsValueComputation.test_3_ary_func_max.phi": {
            "name": "phi",
            "location": 205,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": [],
                "x3_": []
            }
        },
        "TestsCostComputation.test_binary_func.phi": {
            "name": "phi",
            "location": 246,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": []
            }
        },
        "TestsCostComputation.test_3_ary_func.phi": {
            "name": "phi",
            "location": 266,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": [],
                "x3_": []
            }
        },
        "TestsCostComputation.test_current_local_cost_binary.phi": {
            "name": "phi",
            "location": 311,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": []
            }
        },
        "TestsCostComputation.test_current_local_cost_3_ary.phi": {
            "name": "phi",
            "location": 340,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": [],
                "x3_": []
            }
        },
        "TestsChangeState.test_enter_value_state.phi": {
            "name": "phi",
            "location": 373,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": [],
                "x3_": []
            }
        },
        "TestsChangeState.test_enter_offer_state.phi": {
            "name": "phi",
            "location": 399,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": [],
                "x3_": []
            }
        },
        "TestsChangeState.test_enter_answer_state.phi": {
            "name": "phi",
            "location": 428,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": [],
                "x3_": []
            }
        },
        "TestsChangeState.test_enter_gain_state.phi": {
            "name": "phi",
            "location": 449,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": [],
                "x3_": []
            }
        },
        "TestsChangeState.test_enter_go_state.phi": {
            "name": "phi",
            "location": 474,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": [],
                "x3_": []
            }
        },
        "TestsOffersComputations.test_compute_offers_min_mode.phi": {
            "name": "phi",
            "location": 497,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": [],
                "x3_": []
            }
        },
        "TestsOffersComputations.test_compute_offers_max_mode.phi": {
            "name": "phi",
            "location": 525,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": [],
                "x3_": []
            }
        },
        "TestsOffersComputations.test_find_best_offer_min_mode_one_offerer.phi": {
            "name": "phi",
            "location": 554,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": [],
                "x3_": []
            }
        },
        "TestsOffersComputations.test_find_best_offer_min_mode_one_offerer.psi": {
            "name": "psi",
            "location": 562,
            "return": [],
            "arguments": {
                "x1_": [],
                "x4_": []
            }
        },
        "TestsOffersComputations.test_find_best_offer_max_mode_one_offerer.phi": {
            "name": "phi",
            "location": 597,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": [],
                "x3_": []
            }
        },
        "TestsOffersComputations.test_find_best_offer_max_mode_one_offerer.psi": {
            "name": "psi",
            "location": 605,
            "return": [],
            "arguments": {
                "x1_": [],
                "x4_": []
            }
        },
        "TestsOffersComputations.test_find_best_offer_min_mode_2_offerers.phi": {
            "name": "phi",
            "location": 643,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": [],
                "x3_": []
            }
        },
        "TestsOffersComputations.test_find_best_offer_min_mode_2_offerers.psi": {
            "name": "psi",
            "location": 651,
            "return": [],
            "arguments": {
                "x1_": [],
                "x4_": []
            }
        },
        "TestsOffersComputations.test_find_best_offer_max_mode_2_offerers.phi": {
            "name": "phi",
            "location": 684,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": [],
                "x3_": []
            }
        },
        "TestsOffersComputations.test_find_best_offer_max_mode_2_offerers.psi": {
            "name": "psi",
            "location": 692,
            "return": [],
            "arguments": {
                "x1_": [],
                "x4_": []
            }
        },
        "TestsHandleMessage.test_value_not_all_neighbors_received.phi": {
            "name": "phi",
            "location": 727,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": [],
                "x3_": []
            }
        },
        "TestsHandleMessage.test_value_all_neighbors_received.phi": {
            "name": "phi",
            "location": 747,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": []
            }
        },
        "TestsHandleMessage.test_offer_has_no_partner_yet.phi": {
            "name": "phi",
            "location": 788,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": [],
                "x3_": []
            }
        },
        "TestsHandleMessage.test_offer_already_has_partner.phi": {
            "name": "phi",
            "location": 859,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": [],
                "x3_": []
            }
        },
        "TestsHandleMessage.test_response_accept.phi": {
            "name": "phi",
            "location": 972,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": []
            }
        },
        "TestsHandleMessage.test_response_accept.psi": {
            "name": "psi",
            "location": 978,
            "return": [],
            "arguments": {
                "x1_": [],
                "x3_": []
            }
        },
        "TestsHandleMessage.test_response_reject.phi": {
            "name": "phi",
            "location": 1011,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": []
            }
        },
        "TestsHandleMessage.test_response_reject.psi": {
            "name": "psi",
            "location": 1017,
            "return": [],
            "arguments": {
                "x1_": [],
                "x3_": []
            }
        },
        "TestsHandleMessage.test_go_accept_no_postponed_value_message.phi": {
            "name": "phi",
            "location": 1052,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": []
            }
        },
        "TestsHandleMessage.test_go_accept_no_postponed_value_message.psi": {
            "name": "psi",
            "location": 1058,
            "return": [],
            "arguments": {
                "x1_": [],
                "x3_": []
            }
        },
        "TestsHandleMessage.test_go_accept_with_postponed_value_message.phi": {
            "name": "phi",
            "location": 1097,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": []
            }
        },
        "TestsHandleMessage.test_go_accept_with_postponed_value_message.psi": {
            "name": "psi",
            "location": 1103,
            "return": [],
            "arguments": {
                "x1_": [],
                "x3_": []
            }
        },
        "TestsHandleMessage.test_go_reject_no_postponed_value_message.phi": {
            "name": "phi",
            "location": 1154,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": []
            }
        },
        "TestsHandleMessage.test_go_reject_no_postponed_value_message.psi": {
            "name": "psi",
            "location": 1160,
            "return": [],
            "arguments": {
                "x1_": [],
                "x3_": []
            }
        },
        "TestsHandleMessage.test_go_reject_with_postponed_value_message.phi": {
            "name": "phi",
            "location": 1191,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": []
            }
        },
        "TestsHandleMessage.test_go_reject_with_postponed_value_message.psi": {
            "name": "psi",
            "location": 1197,
            "return": [],
            "arguments": {
                "x1_": [],
                "x3_": []
            }
        },
        "TestsHandleMessage.test_gain_not_all_received.phi": {
            "name": "phi",
            "location": 1239,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": []
            }
        },
        "TestsHandleMessage.test_gain_not_all_received.psi": {
            "name": "psi",
            "location": 1245,
            "return": [],
            "arguments": {
                "x1_": [],
                "x3_": []
            }
        },
        "TestsHandleMessage.test_gain_all_received.phi": {
            "name": "phi",
            "location": 1269,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": []
            }
        },
        "TestsHandleMessage.test_gain_all_received.psi": {
            "name": "psi",
            "location": 1275,
            "return": [],
            "arguments": {
                "x1_": [],
                "x3_": []
            }
        },
        "TestsHandleMessage.test_clear_agent.phi": {
            "name": "phi",
            "location": 1355,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": []
            }
        },
        "TestsHandleMessage.test_clear_agent.psi": {
            "name": "psi",
            "location": 1361,
            "return": [],
            "arguments": {
                "x1_": [],
                "x3_": []
            }
        }
    },
    "pyDcop-master/tests/unit/test_algorithms_ncbb.py": {
        "single_variable_pb": {
            "name": "single_variable_pb",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "two_variables_pb": {
            "name": "two_variables_pb",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "three_variables_pb": {
            "name": "three_variables_pb",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "toy_pb": {
            "name": "toy_pb",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "get_computation_instance": {
            "name": "get_computation_instance",
            "location": 140,
            "return": [],
            "arguments": {
                "graph": [],
                "name": []
            }
        },
        "test_create_computation_no_links": {
            "name": "test_create_computation_no_links",
            "location": 154,
            "return": [],
            "arguments": {
                "single_variable_pb": []
            }
        },
        "test_create_computation_one_neighbor": {
            "name": "test_create_computation_one_neighbor",
            "location": 164,
            "return": [],
            "arguments": {
                "two_variables_pb": []
            }
        },
        "test_create_computation_three_variables": {
            "name": "test_create_computation_three_variables",
            "location": 174,
            "return": [],
            "arguments": {
                "three_variables_pb": []
            }
        },
        "test_problem_with_non_binary_constraints_raises_exception": {
            "name": "test_problem_with_non_binary_constraints_raises_exception",
            "location": 197,
            "return": [],
            "arguments": {}
        },
        "test_create_computations": {
            "name": "test_create_computations",
            "location": 217,
            "return": [],
            "arguments": {
                "toy_pb": []
            }
        },
        "test_select_value_at_root_simple_variable": {
            "name": "test_select_value_at_root_simple_variable",
            "location": 229,
            "return": [],
            "arguments": {
                "three_variables_pb": []
            }
        },
        "test_select_value_at_root": {
            "name": "test_select_value_at_root",
            "location": 249,
            "return": [],
            "arguments": {
                "toy_pb": []
            }
        },
        "test_no_value_selection_at_start_when_not_root": {
            "name": "test_no_value_selection_at_start_when_not_root",
            "location": 270,
            "return": [],
            "arguments": {
                "three_variables_pb": []
            }
        },
        "test_select_value_in_dfs_only_one_ancestor": {
            "name": "test_select_value_in_dfs_only_one_ancestor",
            "location": 285,
            "return": [],
            "arguments": {
                "toy_pb": []
            }
        },
        "test_select_value_in_dfs_two_ancestors": {
            "name": "test_select_value_in_dfs_two_ancestors",
            "location": 302,
            "return": [],
            "arguments": {
                "toy_pb": []
            }
        },
        "test_cost_msg_from_leaf": {
            "name": "test_cost_msg_from_leaf",
            "location": 319,
            "return": [],
            "arguments": {
                "toy_pb": []
            }
        },
        "test_cost_msg_from_subtree_d": {
            "name": "test_cost_msg_from_subtree_d",
            "location": 335,
            "return": [],
            "arguments": {
                "toy_pb": []
            }
        },
        "test_cost_msg_from_subtree_b": {
            "name": "test_cost_msg_from_subtree_b",
            "location": 352,
            "return": [],
            "arguments": {
                "toy_pb": []
            }
        },
        "test_cost_msg_at_root": {
            "name": "test_cost_msg_at_root",
            "location": 368,
            "return": [],
            "arguments": {
                "toy_pb": []
            }
        }
    },
    "pyDcop-master/tests/unit/test_algorithms_objects.py": {
        "test_algo_def": {
            "name": "test_algo_def",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "test_simple_repr": {
            "name": "test_simple_repr",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_from_repr": {
            "name": "test_from_repr",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_building_algodef_with_default_params": {
            "name": "test_building_algodef_with_default_params",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "test_building_algodef_with_provided_and_default_params": {
            "name": "test_building_algodef_with_provided_and_default_params",
            "location": 79,
            "return": [],
            "arguments": {}
        },
        "test_load_algorithm": {
            "name": "test_load_algorithm",
            "location": 89,
            "return": [],
            "arguments": {}
        },
        "test_load_algorithm_with_default_footprint": {
            "name": "test_load_algorithm_with_default_footprint",
            "location": 100,
            "return": [],
            "arguments": {}
        }
    },
    "pyDcop-master/tests/unit/test_algorithms_syncbb.py": {
        "build_pb": {
            "name": "build_pb",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "toy_pb": {
            "name": "toy_pb",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "toy_pb_computation_graph": {
            "name": "toy_pb_computation_graph",
            "location": 109,
            "return": [],
            "arguments": {}
        },
        "get_computation_instance": {
            "name": "get_computation_instance",
            "location": 117,
            "return": [],
            "arguments": {
                "graph": [],
                "name": []
            }
        },
        "test_get_candidates_no_value_selected": {
            "name": "test_get_candidates_no_value_selected",
            "location": 131,
            "return": [],
            "arguments": {}
        },
        "test_get_candidate_value_selected": {
            "name": "test_get_candidate_value_selected",
            "location": 139,
            "return": [],
            "arguments": {}
        },
        "test_get_next_assignement_empty_path_no_bound": {
            "name": "test_get_next_assignement_empty_path_no_bound",
            "location": 153,
            "return": [],
            "arguments": {
                "toy_pb": []
            }
        },
        "test_get_next_assignment_no_bound": {
            "name": "test_get_next_assignment_no_bound",
            "location": 164,
            "return": [],
            "arguments": {
                "toy_pb": []
            }
        },
        "test_computations_message_at_start": {
            "name": "test_computations_message_at_start",
            "location": 194,
            "return": [],
            "arguments": {
                "toy_pb_computation_graph": []
            }
        },
        "test_solve_min": {
            "name": "test_solve_min",
            "location": 213,
            "return": [],
            "arguments": {
                "toy_pb": []
            }
        },
        "test_solve_max": {
            "name": "test_solve_max",
            "location": 233,
            "return": [],
            "arguments": {
                "toy_pb": []
            }
        }
    },
    "pyDcop-master/tests/unit/test_batch.py": {
        "test_input_files_glob": {
            "name": "test_input_files_glob",
            "location": 20,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_input_files_re": {
            "name": "test_input_files_re",
            "location": 34,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_params_configuration_one_parameter": {
            "name": "test_params_configuration_one_parameter",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "test_params_configuration_two_parameters": {
            "name": "test_params_configuration_two_parameters",
            "location": 70,
            "return": [],
            "arguments": {}
        },
        "test_params_configuration_two_parameters_2_3": {
            "name": "test_params_configuration_two_parameters_2_3",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "test_params_configuration_two_parameters_with_dict": {
            "name": "test_params_configuration_two_parameters_with_dict",
            "location": 106,
            "return": [],
            "arguments": {}
        },
        "test_params_configuration_list_with_single_element": {
            "name": "test_params_configuration_list_with_single_element",
            "location": 126,
            "return": [],
            "arguments": {}
        },
        "test_params_configuration_order": {
            "name": "test_params_configuration_order",
            "location": 134,
            "return": [],
            "arguments": {}
        },
        "test_params_configuration_order_with_dict": {
            "name": "test_params_configuration_order_with_dict",
            "location": 145,
            "return": [],
            "arguments": {}
        },
        "test_regularize_parameters": {
            "name": "test_regularize_parameters",
            "location": 154,
            "return": [],
            "arguments": {}
        },
        "test_regularize_parameters_imbricated": {
            "name": "test_regularize_parameters_imbricated",
            "location": 181,
            "return": [],
            "arguments": {}
        },
        "test_build_option_for_parameters": {
            "name": "test_build_option_for_parameters",
            "location": 210,
            "return": [],
            "arguments": {}
        },
        "test_build_option_for_parameters_with_dict_as_value": {
            "name": "test_build_option_for_parameters_with_dict_as_value",
            "location": 218,
            "return": [],
            "arguments": {}
        },
        "test_build_option_for_algo_parameters": {
            "name": "test_build_option_for_algo_parameters",
            "location": 226,
            "return": [],
            "arguments": {}
        },
        "test_expand_variables_in_str": {
            "name": "test_expand_variables_in_str",
            "location": 234,
            "return": [],
            "arguments": {}
        },
        "test_expand_variables_in_str_with_subdir": {
            "name": "test_expand_variables_in_str_with_subdir",
            "location": 239,
            "return": [],
            "arguments": {}
        },
        "test_expand_variables_in_list": {
            "name": "test_expand_variables_in_list",
            "location": 246,
            "return": [],
            "arguments": {}
        },
        "test_expand_variables_in_list_with_subdict": {
            "name": "test_expand_variables_in_list_with_subdict",
            "location": 257,
            "return": [],
            "arguments": {}
        },
        "test_expand_variables_in_dict": {
            "name": "test_expand_variables_in_dict",
            "location": 268,
            "return": [],
            "arguments": {}
        },
        "test_build_final_command_file_only": {
            "name": "test_build_final_command_file_only",
            "location": 279,
            "return": [],
            "arguments": {}
        },
        "test_build_final_command_with_global_options": {
            "name": "test_build_final_command_with_global_options",
            "location": 285,
            "return": [],
            "arguments": {}
        },
        "test_build_final_command_with_command_options": {
            "name": "test_build_final_command_with_command_options",
            "location": 293,
            "return": [],
            "arguments": {}
        },
        "test_build_final_command_with_command_options_and_expansion": {
            "name": "test_build_final_command_with_command_options_and_expansion",
            "location": 305,
            "return": [],
            "arguments": {}
        },
        "test_run_batches_iteration_only": {
            "name": "test_run_batches_iteration_only",
            "location": 318,
            "return": [],
            "arguments": {
                "mock_run_batch": []
            }
        },
        "test_run_batches_direct_and_iteration": {
            "name": "test_run_batches_direct_and_iteration",
            "location": 335,
            "return": [],
            "arguments": {
                "mock_run_batch": []
            }
        },
        "test_generate_ising_5_iteration": {
            "name": "test_generate_ising_5_iteration",
            "location": 354,
            "return": [],
            "arguments": {
                "run_mock": []
            }
        },
        "test_generate_ising_variable_row": {
            "name": "test_generate_ising_variable_row",
            "location": 407,
            "return": [],
            "arguments": {
                "run_mock": []
            }
        },
        "test_generate_ising_variable_row_with_dir": {
            "name": "test_generate_ising_variable_row_with_dir",
            "location": 446,
            "return": [],
            "arguments": {
                "run_mock": []
            }
        },
        "test_solve_variable_row_with_dir": {
            "name": "test_solve_variable_row_with_dir",
            "location": 485,
            "return": [],
            "arguments": {
                "run_mock": [],
                "tmpdir": []
            }
        }
    },
    "pyDcop-master/tests/unit/test_dcop_agents.py": {
        "test_name_only": {
            "name": "test_name_only",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "test_with_capacity": {
            "name": "test_with_capacity",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_with_arbitrary_attr": {
            "name": "test_with_arbitrary_attr",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "test_with_various_attr": {
            "name": "test_with_various_attr",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "test_with_default_hosting_cost": {
            "name": "test_with_default_hosting_cost",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "test_with_hosting_cost": {
            "name": "test_with_hosting_cost",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "test_with_default_route": {
            "name": "test_with_default_route",
            "location": 84,
            "return": [],
            "arguments": {}
        },
        "test_with_routes": {
            "name": "test_with_routes",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "test_create_agents_from_range": {
            "name": "test_create_agents_from_range",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "test_create_agents_with_capacity": {
            "name": "test_create_agents_with_capacity",
            "location": 109,
            "return": [],
            "arguments": {}
        }
    },
    "pyDcop-master/tests/unit/test_dcop_dcop.py": {
        "test_dcop_add_constraint_is_enough": {
            "name": "test_dcop_add_constraint_is_enough",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_dcop_add_constraint_easy_api": {
            "name": "test_dcop_add_constraint_easy_api",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "test_dcop_add_single_agent": {
            "name": "test_dcop_add_single_agent",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "test_dcop_add_agents_from_list": {
            "name": "test_dcop_add_agents_from_list",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "test_dcop_add_agents_from_dict": {
            "name": "test_dcop_add_agents_from_dict",
            "location": 80,
            "return": [],
            "arguments": {}
        },
        "test_filter_dcop": {
            "name": "test_filter_dcop",
            "location": 90,
            "return": [],
            "arguments": {}
        },
        "test_filter_dcop_unary_constraint": {
            "name": "test_filter_dcop_unary_constraint",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "test_filter_dcop_unary_constraint_accepted": {
            "name": "test_filter_dcop_unary_constraint_accepted",
            "location": 128,
            "return": [],
            "arguments": {}
        }
    },
    "pyDcop-master/tests/unit/test_dcop_relations.py": {
        "get_1var_rel": {
            "name": "get_1var_rel",
            "location": 711,
            "return": [],
            "arguments": {}
        },
        "get_2var_rel": {
            "name": "get_2var_rel",
            "location": 718,
            "return": [],
            "arguments": {}
        },
        "test_random_ass_matrix_one_var": {
            "name": "test_random_ass_matrix_one_var",
            "location": 1642,
            "return": [],
            "arguments": {}
        },
        "test_random_ass_matrix_two_var": {
            "name": "test_random_ass_matrix_two_var",
            "location": 1652,
            "return": [],
            "arguments": {}
        },
        "test_assignment_cost_empty": {
            "name": "test_assignment_cost_empty",
            "location": 1662,
            "return": [],
            "arguments": {}
        },
        "test_assignment_cost_one_constraint": {
            "name": "test_assignment_cost_one_constraint",
            "location": 1666,
            "return": [],
            "arguments": {}
        },
        "test_assignment_cost_one_constraint_two_vars": {
            "name": "test_assignment_cost_one_constraint_two_vars",
            "location": 1674,
            "return": [],
            "arguments": {}
        },
        "test_assignment_cost_two_constraints_two_vars": {
            "name": "test_assignment_cost_two_constraints_two_vars",
            "location": 1683,
            "return": [],
            "arguments": {}
        },
        "test_assignment_cost_two_constraints_two_vars_one_extra": {
            "name": "test_assignment_cost_two_constraints_two_vars_one_extra",
            "location": 1693,
            "return": [],
            "arguments": {}
        },
        "test_assignment_cost_two_constraints_two_costed_vars": {
            "name": "test_assignment_cost_two_constraints_two_costed_vars",
            "location": 1703,
            "return": [],
            "arguments": {}
        },
        "test_assignment_cost_missing_vars": {
            "name": "test_assignment_cost_missing_vars",
            "location": 1718,
            "return": [],
            "arguments": {}
        },
        "test_assignment_cost_extra_vars": {
            "name": "test_assignment_cost_extra_vars",
            "location": 1729,
            "return": [],
            "arguments": {}
        },
        "test_bench_compute_cost": {
            "name": "test_bench_compute_cost",
            "location": 1740,
            "return": [],
            "arguments": {
                "benchmark": []
            }
        },
        "test_assignment_cost_same_as_becnh": {
            "name": "test_assignment_cost_same_as_becnh",
            "location": 1762,
            "return": [],
            "arguments": {}
        },
        "test_relation_from_str_with_map": {
            "name": "test_relation_from_str_with_map",
            "location": 1779,
            "return": [],
            "arguments": {}
        },
        "ZeroAryRelationTest.setUp": {
            "name": "setUp",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZeroAryRelationTest.test_properties": {
            "name": "test_properties",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZeroAryRelationTest.test_get_value": {
            "name": "test_get_value",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZeroAryRelationTest.test_set_value": {
            "name": "test_set_value",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZeroAryRelationTest.test_slicing_on_no_var_is_ok": {
            "name": "test_slicing_on_no_var_is_ok",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZeroAryRelationTest.test_slicing_on_variable_raises_valueerror": {
            "name": "test_slicing_on_variable_raises_valueerror",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZeroAryRelationTest.test_set_value_for_assignement": {
            "name": "test_set_value_for_assignement",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZeroAryRelationTest.test_simple_repr": {
            "name": "test_simple_repr",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZeroAryRelationTest.test_from_repr": {
            "name": "test_from_repr",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZeroAryRelationTest.test_hash": {
            "name": "test_hash",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryFunctionRelationTest.setUp": {
            "name": "setUp",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryFunctionRelationTest.test_properties": {
            "name": "test_properties",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryFunctionRelationTest.test_slicing_on_no_var_is_ok": {
            "name": "test_slicing_on_no_var_is_ok",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryFunctionRelationTest.test_slicing_on_existing_var_is_ok": {
            "name": "test_slicing_on_existing_var_is_ok",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryFunctionRelationTest.test_slicing_on_unknown_var_raises_valueerror": {
            "name": "test_slicing_on_unknown_var_raises_valueerror",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryFunctionRelationTest.test_slicing_on_more_than_one_var_raises_valueerror": {
            "name": "test_slicing_on_more_than_one_var_raises_valueerror",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryFunctionRelationTest.test_get_value": {
            "name": "test_get_value",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryFunctionRelationTest.test_get_value_dict": {
            "name": "test_get_value_dict",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryFunctionRelationTest.test_eq": {
            "name": "test_eq",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryFunctionRelationTest.test_not_eq": {
            "name": "test_not_eq",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryFunctionRelationTest.test_raise_on_simple_repr_witharbitrary_function": {
            "name": "test_raise_on_simple_repr_witharbitrary_function",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryFunctionRelationTest.test_simple_repr_with_expression_function": {
            "name": "test_simple_repr_with_expression_function",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryFunctionRelationTest.test_from_repr_with_expression_function": {
            "name": "test_from_repr_with_expression_function",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryFunctionRelationTest.test_hash": {
            "name": "test_hash",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryFunctionRelationTest.test_hash_expression": {
            "name": "test_hash_expression",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryBooleanRelationTest.setUp": {
            "name": "setUp",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryBooleanRelationTest.test_properties": {
            "name": "test_properties",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryBooleanRelationTest.test_slice_on_known_var_is_ok": {
            "name": "test_slice_on_known_var_is_ok",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryBooleanRelationTest.test_slice_on_unknown_var_raises": {
            "name": "test_slice_on_unknown_var_raises",
            "location": 269,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryBooleanRelationTest.test_slice_on_more_than_one_var_raises": {
            "name": "test_slice_on_more_than_one_var_raises",
            "location": 273,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryBooleanRelationTest.test_get_value": {
            "name": "test_get_value",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryBooleanRelationTest.test_simple_repr": {
            "name": "test_simple_repr",
            "location": 287,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryBooleanRelationTest.test_from_repr": {
            "name": "test_from_repr",
            "location": 293,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryBooleanRelationTest.test_hash": {
            "name": "test_hash",
            "location": 300,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryFunctionRelationTests.init_with_name": {
            "name": "init_with_name",
            "location": 313,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryFunctionRelationTests.test_init_one_var": {
            "name": "test_init_one_var",
            "location": 323,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryFunctionRelationTests.test_slice_with_no_var_is_ok": {
            "name": "test_slice_with_no_var_is_ok",
            "location": 336,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryFunctionRelationTests.test_slice_with_too_many_var_raises": {
            "name": "test_slice_with_too_many_var_raises",
            "location": 351,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryFunctionRelationTests.test_slice_on_unknown_var_raises": {
            "name": "test_slice_on_unknown_var_raises",
            "location": 360,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryFunctionRelationTests.test_slice_one_var_is_ok": {
            "name": "test_slice_one_var_is_ok",
            "location": 371,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryFunctionRelationTests.test_slice_two_var_is_ok": {
            "name": "test_slice_two_var_is_ok",
            "location": 385,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryFunctionRelationTests.test_get_value_as_array": {
            "name": "test_get_value_as_array",
            "location": 400,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryFunctionRelationTests.test_get_value_as_dict": {
            "name": "test_get_value_as_dict",
            "location": 415,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryFunctionRelationTests.test_fct_1vars": {
            "name": "test_fct_1vars",
            "location": 429,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryFunctionRelationTests.test_fct_2vars": {
            "name": "test_fct_2vars",
            "location": 444,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryFunctionRelationTests.test_fct_3vars": {
            "name": "test_fct_3vars",
            "location": 463,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryFunctionRelationTests.test_eq": {
            "name": "test_eq",
            "location": 488,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryFunctionRelationTests.test_eq_explicit_name": {
            "name": "test_eq_explicit_name",
            "location": 500,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryFunctionRelationTests.test_eq_expression_function": {
            "name": "test_eq_expression_function",
            "location": 512,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryFunctionRelationTests.test_not_eq": {
            "name": "test_not_eq",
            "location": 521,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryFunctionRelationTests.test_raise_on_simple_repr_with_arbitrary_function": {
            "name": "test_raise_on_simple_repr_with_arbitrary_function",
            "location": 537,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryFunctionRelationTests.test_simple_repr_with_expression_function": {
            "name": "test_simple_repr_with_expression_function",
            "location": 548,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryFunctionRelationTests.test_from_repr_with_expression_function": {
            "name": "test_from_repr_with_expression_function",
            "location": 560,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryFunctionRelationTests.test_to_repr_when_slicing": {
            "name": "test_to_repr_when_slicing",
            "location": 570,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryFunctionRelationTests.test_to_repr_when_slicing_2": {
            "name": "test_to_repr_when_slicing_2",
            "location": 583,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryFunctionRelationTests.test_hash_with_expressionfunction": {
            "name": "test_hash_with_expressionfunction",
            "location": 599,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryFunctionRelationTests.test_hash_not_equal_with_lambda": {
            "name": "test_hash_not_equal_with_lambda",
            "location": 624,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryFunctionRelationTests.test_function_with_kwargs": {
            "name": "test_function_with_kwargs",
            "location": 636,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryFunctionRelationTests.test_function_with_varargs": {
            "name": "test_function_with_varargs",
            "location": 660,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryFunctionRelationDecoratorTests.test_1var": {
            "name": "test_1var",
            "location": 679,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryFunctionRelationDecoratorTests.test_2var": {
            "name": "test_2var",
            "location": 694,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryMatrixRelationInitTest.test_init_zero_no_var": {
            "name": "test_init_zero_no_var",
            "location": 727,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryMatrixRelationInitTest.test_init_zero_one_var": {
            "name": "test_init_zero_one_var",
            "location": 736,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryMatrixRelationInitTest.test_init_zero_2var": {
            "name": "test_init_zero_2var",
            "location": 744,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryMatrixRelationInitTest.test_init_matrix_one_var": {
            "name": "test_init_matrix_one_var",
            "location": 753,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryMatrixRelationInitTest.test_init_array_one_var": {
            "name": "test_init_array_one_var",
            "location": 761,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryMatrixRelationInitTest.test_init_nparray_one_var": {
            "name": "test_init_nparray_one_var",
            "location": 771,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryMatrixRelationInitTest.test_init_matrix_three_var": {
            "name": "test_init_matrix_three_var",
            "location": 781,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryMatrixRelationInitTest.test_value_one_var": {
            "name": "test_value_one_var",
            "location": 803,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryMatrixRelationInitTest.test_init_matrix_2var": {
            "name": "test_init_matrix_2var",
            "location": 808,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryMatrixRelationInitTest.test_init_from_generated_matrix": {
            "name": "test_init_from_generated_matrix",
            "location": 815,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryMatrixRelationInitTest.test_value_matrix_one_var": {
            "name": "test_value_matrix_one_var",
            "location": 825,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryMatrixRelationInitTest.test_value_matrix_2var": {
            "name": "test_value_matrix_2var",
            "location": 833,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryMatrixRelationInitTest.test_get_value_as_array": {
            "name": "test_get_value_as_array",
            "location": 839,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryMatrixRelationInitTest.test_get_value_as_dict": {
            "name": "test_get_value_as_dict",
            "location": 850,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryMatrixRelationInitTest.test_set_value_as_array": {
            "name": "test_set_value_as_array",
            "location": 865,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryMatrixRelationInitTest.test_set_value_as_dict": {
            "name": "test_set_value_as_dict",
            "location": 880,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryMatrixRelationInitTest.test_set_float_value_on_zeroed_init": {
            "name": "test_set_float_value_on_zeroed_init",
            "location": 897,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryMatrixRelationSliceTest.test_slice_1var": {
            "name": "test_slice_1var",
            "location": 908,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryMatrixRelationSliceTest.test_slice_2var": {
            "name": "test_slice_2var",
            "location": 919,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryMatrixRelationSliceTest.test_slice_2var_ignore_extra": {
            "name": "test_slice_2var_ignore_extra",
            "location": 927,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryMatrixRelationFromFunctionTests.test_constant_relation": {
            "name": "test_constant_relation",
            "location": 941,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryMatrixRelationFromFunctionTests.test_3vars_relation": {
            "name": "test_3vars_relation",
            "location": 950,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryMatrixRelationFromFunctionTests.test_binary_rel": {
            "name": "test_binary_rel",
            "location": 967,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryMatrixRelationFromFunctionTests.test_binary_hard_rel": {
            "name": "test_binary_hard_rel",
            "location": 983,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryMatrixRelationOtherTests.test_eq": {
            "name": "test_eq",
            "location": 1001,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryMatrixRelationOtherTests.test_simple_repr": {
            "name": "test_simple_repr",
            "location": 1010,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryMatrixRelationOtherTests.test_from_repr": {
            "name": "test_from_repr",
            "location": 1017,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryMatrixRelationOtherTests.test_hash": {
            "name": "test_hash",
            "location": 1025,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NeutralRelationTest.test_two_vars": {
            "name": "test_two_vars",
            "location": 1041,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NeutralRelationTest.test_slice": {
            "name": "test_slice",
            "location": 1050,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NeutralRelationTest.test_simple_repr": {
            "name": "test_simple_repr",
            "location": 1061,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NeutralRelationTest.test_from_repr": {
            "name": "test_from_repr",
            "location": 1070,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NeutralRelationTest.test_hash": {
            "name": "test_hash",
            "location": 1080,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConditionalRelationsTest.test_dimensions_distinct": {
            "name": "test_dimensions_distinct",
            "location": 1093,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConditionalRelationsTest.test_dimensions_common": {
            "name": "test_dimensions_common",
            "location": 1134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConditionalRelationsTest.test_get_val": {
            "name": "test_get_val",
            "location": 1170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConditionalRelationsTest.test_slice_neutral": {
            "name": "test_slice_neutral",
            "location": 1207,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConditionalRelationsTest.test_slice_no_neutral": {
            "name": "test_slice_no_neutral",
            "location": 1261,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConditionalRelationsTest.test_simple_repr": {
            "name": "test_simple_repr",
            "location": 1312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConditionalRelationsTest.test_from_repr": {
            "name": "test_from_repr",
            "location": 1330,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConditionalRelationsTest.test_hash": {
            "name": "test_hash",
            "location": 1344,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CountMatchTests.test_count": {
            "name": "test_count",
            "location": 1378,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AssignmentCompatibilityTest.test_disjunct_assignments": {
            "name": "test_disjunct_assignments",
            "location": 1400,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AssignmentCompatibilityTest.test_same_assignments": {
            "name": "test_same_assignments",
            "location": 1406,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AssignmentCompatibilityTest.test_contradicting_assignments": {
            "name": "test_contradicting_assignments",
            "location": 1412,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelationFromExpression.test_relation_from_str_one_var": {
            "name": "test_relation_from_str_one_var",
            "location": 1420,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelationFromExpression.test_relation_from_str_2_var": {
            "name": "test_relation_from_str_2_var",
            "location": 1429,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelationFromExpression.test_relation_from_str_2_boolean_var": {
            "name": "test_relation_from_str_2_boolean_var",
            "location": 1443,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelationFromExpression.test_relation_from_str_multiline": {
            "name": "test_relation_from_str_multiline",
            "location": 1455,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FindDependentRelations.test_no_relation": {
            "name": "test_no_relation",
            "location": 1475,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FindDependentRelations.test_single_relation": {
            "name": "test_single_relation",
            "location": 1482,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FindDependentRelations.test_independent_relation": {
            "name": "test_independent_relation",
            "location": 1494,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FindDependentRelations.test_several_relations": {
            "name": "test_several_relations",
            "location": 1506,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FindDependentRelations.test_conditional_relation": {
            "name": "test_conditional_relation",
            "location": 1533,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FindDependentRelations.test_conditional_relation_with_initial_values": {
            "name": "test_conditional_relation_with_initial_values",
            "location": 1549,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AddVarToRelation.test_add_var_to_zeroary_relation_should_have_arity_one": {
            "name": "test_add_var_to_zeroary_relation_should_have_arity_one",
            "location": 1570,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AddVarToRelation.test_add_var_to_zeroary_relation_should_keep_same_value": {
            "name": "test_add_var_to_zeroary_relation_should_keep_same_value",
            "location": 1583,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AddVarToRelation.test_add_var_to_unary_relation_should_have_arity_two": {
            "name": "test_add_var_to_unary_relation_should_have_arity_two",
            "location": 1597,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AddVarToRelation.test_add_var_to_n_nary_relation": {
            "name": "test_add_var_to_n_nary_relation",
            "location": 1616,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_bench_compute_cost.to_bench": {
            "name": "to_bench",
            "location": 1752,
            "return": [],
            "arguments": {}
        },
        "JoinRelationsTestCase.test_arity_bothsamevar": {
            "name": "test_arity_bothsamevar",
            "location": 1800,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JoinRelationsTestCase.test_arity_2diffvar": {
            "name": "test_arity_2diffvar",
            "location": 1809,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JoinRelationsTestCase.test_arity_3diffvar": {
            "name": "test_arity_3diffvar",
            "location": 1820,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JoinRelationsTestCase.test_join_bothsamevar": {
            "name": "test_join_bothsamevar",
            "location": 1832,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JoinRelationsTestCase.test_join_2diffvar": {
            "name": "test_join_2diffvar",
            "location": 1849,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JoinRelationsTestCase.test_join_3diffvar": {
            "name": "test_join_3diffvar",
            "location": 1864,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JoinRelationsTestCase.test_join_with_no_var_rel": {
            "name": "test_join_with_no_var_rel",
            "location": 1882,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JoinRelationsTestCase.test_join_different_order": {
            "name": "test_join_different_order",
            "location": 1902,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProjectionTestCase.test_projection_oneVarRel": {
            "name": "test_projection_oneVarRel",
            "location": 1926,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProjectionTestCase.test_projection_min_oneVarRel": {
            "name": "test_projection_min_oneVarRel",
            "location": 1942,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProjectionTestCase.test_projection_twoVarsRel": {
            "name": "test_projection_twoVarsRel",
            "location": 1957,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProjectionTestCase.test_projection_min_twoVarsRel": {
            "name": "test_projection_min_twoVarsRel",
            "location": 1979,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NAryFunctionRelationTests.init_with_name.f": {
            "name": "f",
            "location": 316,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "NAryFunctionRelationTests.test_init_one_var.f": {
            "name": "f",
            "location": 326,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "NAryFunctionRelationTests.test_slice_with_no_var_is_ok.f": {
            "name": "f",
            "location": 340,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "NAryFunctionRelationTests.test_slice_with_too_many_var_raises.f": {
            "name": "f",
            "location": 354,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "NAryFunctionRelationTests.test_slice_on_unknown_var_raises.f": {
            "name": "f",
            "location": 364,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "NAryFunctionRelationTests.test_slice_one_var_is_ok.f": {
            "name": "f",
            "location": 374,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "NAryFunctionRelationTests.test_slice_two_var_is_ok.f": {
            "name": "f",
            "location": 389,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "NAryFunctionRelationTests.test_get_value_as_array.f": {
            "name": "f",
            "location": 404,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "NAryFunctionRelationTests.test_get_value_as_dict.f": {
            "name": "f",
            "location": 419,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "NAryFunctionRelationTests.test_fct_1vars.fct": {
            "name": "fct",
            "location": 435,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "NAryFunctionRelationTests.test_fct_2vars.fct": {
            "name": "fct",
            "location": 451,
            "return": [],
            "arguments": {
                "a1": [],
                "a2": []
            }
        },
        "NAryFunctionRelationTests.test_fct_3vars.fct": {
            "name": "fct",
            "location": 472,
            "return": [],
            "arguments": {
                "x1_": [],
                "x2_": [],
                "x3_": []
            }
        },
        "NAryFunctionRelationTests.test_eq.f": {
            "name": "f",
            "location": 492,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "NAryFunctionRelationTests.test_eq_explicit_name.f": {
            "name": "f",
            "location": 504,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "NAryFunctionRelationTests.test_not_eq.f": {
            "name": "f",
            "location": 525,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "NAryFunctionRelationTests.test_raise_on_simple_repr_with_arbitrary_function.f": {
            "name": "f",
            "location": 541,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "NAryFunctionRelationTests.test_function_with_kwargs.f": {
            "name": "f",
            "location": 642,
            "return": [],
            "arguments": {}
        },
        "NAryFunctionRelationTests.test_function_with_varargs.f": {
            "name": "f",
            "location": 666,
            "return": [],
            "arguments": {}
        },
        "NAryFunctionRelationDecoratorTests.test_1var.x1_cost": {
            "name": "x1_cost",
            "location": 684,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "NAryFunctionRelationDecoratorTests.test_2var.phi": {
            "name": "phi",
            "location": 700,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "ConditionalRelationsTest.test_dimensions_distinct.condition": {
            "name": "condition",
            "location": 1100,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "ConditionalRelationsTest.test_dimensions_distinct.rel1": {
            "name": "rel1",
            "location": 1105,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "ConditionalRelationsTest.test_dimensions_distinct.rel2": {
            "name": "rel2",
            "location": 1120,
            "return": [],
            "arguments": {
                "v": [],
                "w": []
            }
        },
        "ConditionalRelationsTest.test_dimensions_common.condition": {
            "name": "condition",
            "location": 1157,
            "return": [],
            "arguments": {
                "v1_": [],
                "v2_": []
            }
        },
        "ConditionalRelationsTest.test_dimensions_common.rel1": {
            "name": "rel1",
            "location": 1146,
            "return": [],
            "arguments": {
                "v1_": [],
                "v2_": []
            }
        },
        "ConditionalRelationsTest.test_dimensions_common.rel2": {
            "name": "rel2",
            "location": 1161,
            "return": [],
            "arguments": {
                "_": []
            }
        },
        "ConditionalRelationsTest.test_get_val.condition": {
            "name": "condition",
            "location": 1177,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "ConditionalRelationsTest.test_get_val.rel1": {
            "name": "rel1",
            "location": 1181,
            "return": [],
            "arguments": {
                "v2_": [],
                "v3_": []
            }
        },
        "ConditionalRelationsTest.test_slice_neutral.condition": {
            "name": "condition",
            "location": 1214,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "ConditionalRelationsTest.test_slice_neutral.rel1": {
            "name": "rel1",
            "location": 1218,
            "return": [],
            "arguments": {
                "v2_": [],
                "v3_": []
            }
        },
        "ConditionalRelationsTest.test_slice_no_neutral.condition": {
            "name": "condition",
            "location": 1267,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "ConditionalRelationsTest.test_slice_no_neutral.rel1": {
            "name": "rel1",
            "location": 1271,
            "return": [],
            "arguments": {
                "v2_": [],
                "v3_": []
            }
        },
        "ConditionalRelationsTest.test_hash.condition": {
            "name": "condition",
            "location": 1349,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "ConditionalRelationsTest.test_hash.rel1": {
            "name": "rel1",
            "location": 1368,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "FindDependentRelations.test_single_relation.r1": {
            "name": "r1",
            "location": 1487,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "FindDependentRelations.test_independent_relation.r1": {
            "name": "r1",
            "location": 1500,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "FindDependentRelations.test_several_relations.r1": {
            "name": "r1",
            "location": 1513,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "FindDependentRelations.test_several_relations.r2": {
            "name": "r2",
            "location": 1517,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "FindDependentRelations.test_several_relations.r3": {
            "name": "r3",
            "location": 1521,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "AddVarToRelation.test_add_var_to_zeroary_relation_should_have_arity_one.f": {
            "name": "f",
            "location": 1575,
            "return": [],
            "arguments": {
                "x1": [],
                "r": []
            }
        },
        "AddVarToRelation.test_add_var_to_zeroary_relation_should_keep_same_value.f": {
            "name": "f",
            "location": 1588,
            "return": [],
            "arguments": {
                "x1": [],
                "r": []
            }
        },
        "AddVarToRelation.test_add_var_to_unary_relation_should_have_arity_two.f": {
            "name": "f",
            "location": 1603,
            "return": [],
            "arguments": {
                "x2": [],
                "r": []
            }
        },
        "AddVarToRelation.test_add_var_to_n_nary_relation.f": {
            "name": "f",
            "location": 1626,
            "return": [],
            "arguments": {
                "x4": [],
                "r": []
            }
        },
        "JoinRelationsTestCase.test_join_different_order.u1": {
            "name": "u1",
            "location": 1910,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "JoinRelationsTestCase.test_join_different_order.u2": {
            "name": "u2",
            "location": 1914,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        }
    },
    "pyDcop-master/tests/unit/test_dcop_serialization.py": {
        "test_load_name_and_description": {
            "name": "test_load_name_and_description",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "test_raises_when_no_name": {
            "name": "test_raises_when_no_name",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "test_load_name_without_desc": {
            "name": "test_load_name_without_desc",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "test_load_name_long_desc": {
            "name": "test_load_name_long_desc",
            "location": 85,
            "return": [],
            "arguments": {}
        },
        "test_raises_when_invalid_objective": {
            "name": "test_raises_when_invalid_objective",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "test_raises_when_no_objective": {
            "name": "test_raises_when_no_objective",
            "location": 115,
            "return": [],
            "arguments": {}
        },
        "test_load_scenario": {
            "name": "test_load_scenario",
            "location": 973,
            "return": [],
            "arguments": {}
        },
        "test_yaml_scenario_one_event": {
            "name": "test_yaml_scenario_one_event",
            "location": 1005,
            "return": [],
            "arguments": {}
        },
        "test_yaml_scenario_one_event_two_actions": {
            "name": "test_yaml_scenario_one_event_two_actions",
            "location": 1017,
            "return": [],
            "arguments": {}
        },
        "test_yaml_scenario_two_events": {
            "name": "test_yaml_scenario_two_events",
            "location": 1039,
            "return": [],
            "arguments": {}
        },
        "TestDcopLoadDomains.setUp": {
            "name": "setUp",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDcopLoadDomains.test_simple_domain": {
            "name": "test_simple_domain",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDcopLoadDomains.test_extensive_int_domain": {
            "name": "test_extensive_int_domain",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDcopLoadDomains.test_range_int_domain": {
            "name": "test_range_int_domain",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDcopLoadDomains.test_string_domain": {
            "name": "test_string_domain",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDcopLoadDomains.test_boolean_domain": {
            "name": "test_boolean_domain",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDcopLoadDomains.test_several_domain": {
            "name": "test_several_domain",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDcopLoadVariables.setUp": {
            "name": "setUp",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDcopLoadVariables.test_variable": {
            "name": "test_variable",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDcopLoadVariables.test_variable_with_initial_value": {
            "name": "test_variable_with_initial_value",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDcopLoadVariables.test_raise_when_invalid_initial_value": {
            "name": "test_raise_when_invalid_initial_value",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDcopLoadVariables.test_several_variables": {
            "name": "test_several_variables",
            "location": 289,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDcopLoadVariablesWithCost.setUp": {
            "name": "setUp",
            "location": 314,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDcopLoadVariablesWithCost.test_variable_with_cost_function": {
            "name": "test_variable_with_cost_function",
            "location": 326,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDcopLoadVariablesWithCost.test_variable_with_cost": {
            "name": "test_variable_with_cost",
            "location": 341,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDcopLoadVariablesWithCost.test_variable_with_noisy_cost_function": {
            "name": "test_variable_with_noisy_cost_function",
            "location": 363,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDcopLoadExternalVariables.setUp": {
            "name": "setUp",
            "location": 391,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDcopLoadExternalVariables.test_variable": {
            "name": "test_variable",
            "location": 403,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDcopLoadConstraints.setUp": {
            "name": "setUp",
            "location": 422,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDcopLoadConstraints.test_one_var_constraint": {
            "name": "test_one_var_constraint",
            "location": 446,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDcopLoadConstraints.test_two_var_constraint": {
            "name": "test_two_var_constraint",
            "location": 462,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDcopLoadConstraints.test_external_var_constraint": {
            "name": "test_external_var_constraint",
            "location": 478,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDcopLoadConstraints.test_complex_constraint": {
            "name": "test_complex_constraint",
            "location": 495,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDcopLoadConstraints.test_multiline_intention_constraint": {
            "name": "test_multiline_intention_constraint",
            "location": 513,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDcopLoadConstraints.test_extensional_constraint_one_var": {
            "name": "test_extensional_constraint_one_var",
            "location": 536,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDcopLoadConstraints.test_extensional_constraint_two_var": {
            "name": "test_extensional_constraint_two_var",
            "location": 562,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDcopLoadAgents.setUp": {
            "name": "setUp",
            "location": 602,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDcopLoadAgents.test_one_agent": {
            "name": "test_one_agent",
            "location": 626,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDcopLoadAgents.test_one_agent_with_arbitrary_attr": {
            "name": "test_one_agent_with_arbitrary_attr",
            "location": 642,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDcopLoadAgents.test_agents_with_default_route": {
            "name": "test_agents_with_default_route",
            "location": 660,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDcopLoadAgents.test_agents_no_route_def": {
            "name": "test_agents_no_route_def",
            "location": 693,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDcopLoadAgents.test_agents_no_default_route": {
            "name": "test_agents_no_default_route",
            "location": 710,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDcopLoadAgents.test_duplicate_route_raises": {
            "name": "test_duplicate_route_raises",
            "location": 735,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDcopLoadAgents.test_default_global_hosting_costs": {
            "name": "test_default_global_hosting_costs",
            "location": 752,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDcopLoadAgents.test_default_agt_hosting_costs": {
            "name": "test_default_agt_hosting_costs",
            "location": 770,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDcopLoadAgents.test_comp_agt_hosting_costs": {
            "name": "test_comp_agt_hosting_costs",
            "location": 791,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLoadDistributionHintsMustHost.setUp": {
            "name": "setUp",
            "location": 816,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLoadDistributionHintsMustHost.test_no_dist_hint": {
            "name": "test_no_dist_hint",
            "location": 847,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLoadDistributionHintsMustHost.test_must_host": {
            "name": "test_must_host",
            "location": 852,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLoadDistributionHintsMustHost.test_must_host_several": {
            "name": "test_must_host_several",
            "location": 864,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLoadDistributionHintsMustHost.test_must_host_returns_empty": {
            "name": "test_must_host_returns_empty",
            "location": 877,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLoadDistributionHintsMustHost.test_raises_on_invalid_agent_in_must_host": {
            "name": "test_raises_on_invalid_agent_in_must_host",
            "location": 889,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLoadDistributionHintsMustHost.test_raises_on_invalid_var_in_must_host": {
            "name": "test_raises_on_invalid_var_in_must_host",
            "location": 897,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLoadDistributionHintsHostWith.setUp": {
            "name": "setUp",
            "location": 907,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLoadDistributionHintsHostWith.test_no_hints": {
            "name": "test_no_hints",
            "location": 938,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLoadDistributionHintsHostWith.test_host_with": {
            "name": "test_host_with",
            "location": 944,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLoadDistributionHintsHostWith.test_host_with_several": {
            "name": "test_host_with_several",
            "location": 956,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyDcop-master/tests/unit/test_dcop_variables.py": {
        "TestVariableDomain.test_simple_repr": {
            "name": "test_simple_repr",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariableDomain.test_from_simple_repr": {
            "name": "test_from_simple_repr",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariableDomain.test_hash": {
            "name": "test_hash",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariable.test_list_domain": {
            "name": "test_list_domain",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariable.test_raises_when_no_domain": {
            "name": "test_raises_when_no_domain",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariable.test_no_initial_value": {
            "name": "test_no_initial_value",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariable.test_initial_value": {
            "name": "test_initial_value",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariable.test_invalid_initial_value": {
            "name": "test_invalid_initial_value",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariable.test_simple_repr": {
            "name": "test_simple_repr",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariable.test_simple_repr_no_initial_value": {
            "name": "test_simple_repr_no_initial_value",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariable.test_simple_repr_list_based_domain": {
            "name": "test_simple_repr_list_based_domain",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariable.test_from_simple_repr": {
            "name": "test_from_simple_repr",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariable.test_hash": {
            "name": "test_hash",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariable.test_hash_diferent_initial_value": {
            "name": "test_hash_diferent_initial_value",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariableWithCostDict.test_cost_dict": {
            "name": "test_cost_dict",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariableWithCostDict.test_cost_dict_simple_repr": {
            "name": "test_cost_dict_simple_repr",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariableWithCostDict.test_cost_dict_from_repr": {
            "name": "test_cost_dict_from_repr",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariableWithCostDict.test_hash": {
            "name": "test_hash",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariableWithCostFunc.test_with_lambda_cost_func": {
            "name": "test_with_lambda_cost_func",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariableWithCostFunc.test_with_named_cost_func": {
            "name": "test_with_named_cost_func",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariableWithCostFunc.test_with_expression_based_cost_func": {
            "name": "test_with_expression_based_cost_func",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariableWithCostFunc.test_raise_on_expression_with_wrong_variable": {
            "name": "test_raise_on_expression_with_wrong_variable",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariableWithCostFunc.test_raise_on_expression_with_many_variable": {
            "name": "test_raise_on_expression_with_many_variable",
            "location": 232,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariableWithCostFunc.test_simple_repr_not_supported_with_arbitrary_cost_func": {
            "name": "test_simple_repr_not_supported_with_arbitrary_cost_func",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariableWithCostFunc.test_simple_repr_with_expression_function": {
            "name": "test_simple_repr_with_expression_function",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariableWithCostFunc.test_from_repr_with_expression_function": {
            "name": "test_from_repr_with_expression_function",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariableWithCostFunc.test_hash": {
            "name": "test_hash",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariableWithNoisyFunctionCost.test_simple_repr_with_expression_function": {
            "name": "test_simple_repr_with_expression_function",
            "location": 292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariableWithNoisyFunctionCost.test_from_repr_with_expression_function": {
            "name": "test_from_repr_with_expression_function",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariableWithNoisyFunctionCost.test_hash": {
            "name": "test_hash",
            "location": 317,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExternalVariables.test_create": {
            "name": "test_create",
            "location": 339,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExternalVariables.test_clone": {
            "name": "test_clone",
            "location": 348,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExternalVariables.test_create_no_initial_value": {
            "name": "test_create_no_initial_value",
            "location": 356,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExternalVariables.test_set_value_in_domain": {
            "name": "test_set_value_in_domain",
            "location": 363,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExternalVariables.test_set_value_not_in_domain": {
            "name": "test_set_value_not_in_domain",
            "location": 370,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExternalVariables.test_cb_subscribed": {
            "name": "test_cb_subscribed",
            "location": 381,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExternalVariables.test_cb_subscribed_no_change": {
            "name": "test_cb_subscribed_no_change",
            "location": 390,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExternalVariables.test_cb_unsusbcribed": {
            "name": "test_cb_unsusbcribed",
            "location": 407,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExternalVariables.test_clone_cb": {
            "name": "test_clone_cb",
            "location": 417,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExternalVariables.test_simple_repr": {
            "name": "test_simple_repr",
            "location": 431,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExternalVariables.test_from_repr": {
            "name": "test_from_repr",
            "location": 440,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMassVariableCreation.test_create_several_variables_from_list": {
            "name": "test_create_several_variables_from_list",
            "location": 450,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMassVariableCreation.test_create_several_variables_from_range": {
            "name": "test_create_several_variables_from_range",
            "location": 458,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMassVariableCreation.test_create_several_variables_from_several_lists": {
            "name": "test_create_several_variables_from_several_lists",
            "location": 466,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMassVariableCreation.test_create_several_binvariables_from_list": {
            "name": "test_create_several_binvariables_from_list",
            "location": 475,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMassVariableCreation.test_create_several_binvariables_from_several_lists": {
            "name": "test_create_several_binvariables_from_several_lists",
            "location": 482,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariableWithCostFunc.test_with_named_cost_func.cost_func": {
            "name": "cost_func",
            "location": 208,
            "return": [],
            "arguments": {
                "val": []
            }
        },
        "TestVariableWithCostFunc.test_simple_repr_not_supported_with_arbitrary_cost_func.cost_func": {
            "name": "cost_func",
            "location": 242,
            "return": [],
            "arguments": {
                "val": []
            }
        },
        "TestExternalVariables.test_set_value_not_in_domain.set_value": {
            "name": "set_value",
            "location": 374,
            "return": [],
            "arguments": {
                "value": []
            }
        }
    },
    "pyDcop-master/tests/unit/test_distribution_adhoc.py": {
        "is_all_hosted": {
            "name": "is_all_hosted",
            "location": 264,
            "return": [],
            "arguments": {
                "cg": [],
                "dist": []
            }
        },
        "TestDistributionAdHocFactorGraph.test_no_hints": {
            "name": "test_no_hints",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistributionAdHocFactorGraph.test_must_host_one": {
            "name": "test_must_host_one",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistributionAdHocFactorGraph.test_must_host_two_vars": {
            "name": "test_must_host_two_vars",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistributionAdHocFactorGraph.test_must_host_two_agents": {
            "name": "test_must_host_two_agents",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistributionAdHocFactorGraph.test_host_with": {
            "name": "test_host_with",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistributionAdHocFactorGraph.test_host_on_highest_dependent_agent": {
            "name": "test_host_on_highest_dependent_agent",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistributionAdHocFactorGraphSecp.setUp": {
            "name": "setUp",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistributionAdHocFactorGraphSecp.test_model_on_single_agent": {
            "name": "test_model_on_single_agent",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistributionAdHocFactorGraphSecp.test_model_on_dependent_light": {
            "name": "test_model_on_dependent_light",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistributionAdHocFactorGraphSecp.test_rule_with_model": {
            "name": "test_rule_with_model",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistributionAdHocFactorGraphSecp.test_rule_with_light": {
            "name": "test_rule_with_light",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyDcop-master/tests/unit/test_distribution_ilp_compref.py": {
        "is_same_route": {
            "name": "is_same_route",
            "location": 334,
            "return": [],
            "arguments": {
                "r1": [],
                "r2": []
            }
        },
        "TestLpModelHostingCost.setUp": {
            "name": "setUp",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLpModelHostingCost.test_one_comp_on_each": {
            "name": "test_one_comp_on_each",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLpModelHostingCost.test_one_comp_on_each_with_hosting_cost": {
            "name": "test_one_comp_on_each_with_hosting_cost",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLpModelHostingCost.test_one_comp_on_each_with_pref_competition": {
            "name": "test_one_comp_on_each_with_pref_competition",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLpModelHostingCost.test_one_comp_on_each_with_pref_competition2": {
            "name": "test_one_comp_on_each_with_pref_competition2",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLpModelMsgLoad.setUp": {
            "name": "setUp",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLpModelMsgLoad.test_one_costly_route": {
            "name": "test_one_costly_route",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLpModelMsgLoad.test_two_costly_routes": {
            "name": "test_two_costly_routes",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLpModelRouteAndPref.setUp": {
            "name": "setUp",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLpModelRouteAndPref.test_one_costly_route": {
            "name": "test_one_costly_route",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLpModelWithHyperGraph.setUp": {
            "name": "setUp",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLpModelWithHyperGraph.test_sharing_computation": {
            "name": "test_sharing_computation",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLpModelWithHyperGraph.test_group_computations": {
            "name": "test_group_computations",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLpModelWithHyperGraph.test_split_in_two_groups": {
            "name": "test_split_in_two_groups",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLpModelWithHyperGraph.test_split_in_two_groups_prefa1": {
            "name": "test_split_in_two_groups_prefa1",
            "location": 300,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLpModelHostingCost.test_one_comp_on_each_with_hosting_cost.hosting_cost": {
            "name": "hosting_cost",
            "location": 77,
            "return": [],
            "arguments": {
                "a": [],
                "c": []
            }
        },
        "TestLpModelHostingCost.test_one_comp_on_each_with_pref_competition.hosting_cost": {
            "name": "hosting_cost",
            "location": 97,
            "return": [],
            "arguments": {
                "a": [],
                "c": []
            }
        },
        "TestLpModelHostingCost.test_one_comp_on_each_with_pref_competition2.hosting_cost": {
            "name": "hosting_cost",
            "location": 118,
            "return": [],
            "arguments": {
                "a": [],
                "c": []
            }
        },
        "TestLpModelMsgLoad.test_one_costly_route.route": {
            "name": "route",
            "location": 152,
            "return": [],
            "arguments": {
                "a1": [],
                "a2": []
            }
        },
        "TestLpModelMsgLoad.test_two_costly_routes.route": {
            "name": "route",
            "location": 172,
            "return": [],
            "arguments": {
                "a1": [],
                "a2": []
            }
        },
        "TestLpModelRouteAndPref.test_one_costly_route.route": {
            "name": "route",
            "location": 209,
            "return": [],
            "arguments": {
                "a1": [],
                "a2": []
            }
        },
        "TestLpModelRouteAndPref.test_one_costly_route.hosting_cost": {
            "name": "hosting_cost",
            "location": 215,
            "return": [],
            "arguments": {
                "a": [],
                "c": []
            }
        },
        "TestLpModelWithHyperGraph.test_split_in_two_groups.route": {
            "name": "route",
            "location": 284,
            "return": [],
            "arguments": {
                "a1": [],
                "a2": []
            }
        },
        "TestLpModelWithHyperGraph.test_split_in_two_groups_prefa1.route": {
            "name": "route",
            "location": 302,
            "return": [],
            "arguments": {
                "a1": [],
                "a2": []
            }
        },
        "TestLpModelWithHyperGraph.test_split_in_two_groups_prefa1.hosting_costa1": {
            "name": "hosting_costa1",
            "location": 307,
            "return": [],
            "arguments": {
                "a": [],
                "_": []
            }
        }
    },
    "pyDcop-master/tests/unit/test_distribution_ilp_fgdp.py": {
        "is_all_hosted": {
            "name": "is_all_hosted",
            "location": 60,
            "return": [],
            "arguments": {
                "cg": [],
                "dist": []
            }
        },
        "TestDistributionLPFactorGraphWithHints.setUp": {
            "name": "setUp",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistributionLPFactorGraphWithHints.test_raises_if_methods_not_given": {
            "name": "test_raises_if_methods_not_given",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistributionLPFactorGraphWithHints.test_respect_must_host_for_var": {
            "name": "test_respect_must_host_for_var",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistributionLPFactorGraphWithHints.test_respect_must_host_for_fac": {
            "name": "test_respect_must_host_for_fac",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistributionLPFactorGraphWithHints.test_respect_must_host_for_fac_and_var": {
            "name": "test_respect_must_host_for_fac_and_var",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistributionLPFactorGraphWithHints.test_respect_must_host_for_fac_and_var_same_agent": {
            "name": "test_respect_must_host_for_fac_and_var_same_agent",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistributionLPFactorGraphWithHints.test_respect_must_host_all_computation_fixed": {
            "name": "test_respect_must_host_all_computation_fixed",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistributionLPFactorGraphWithHints.test_respect_must_host_all_computation_invalid": {
            "name": "test_respect_must_host_all_computation_invalid",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ILPFGDP.setUp": {
            "name": "setUp",
            "location": 218,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ILPFGDP.test_comm": {
            "name": "test_comm",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ILPFGDP.test_comm_not_enough_place": {
            "name": "test_comm_not_enough_place",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UtilityFunctions.setUp": {
            "name": "setUp",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UtilityFunctions.test_build_alphaijk_one_var_one_fac": {
            "name": "test_build_alphaijk_one_var_one_fac",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UtilityFunctions.test_build_alphaijk_one_var_two_fac": {
            "name": "test_build_alphaijk_one_var_two_fac",
            "location": 309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UtilityFunctions.test_obj_function": {
            "name": "test_obj_function",
            "location": 328,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ComputationMemory.setUp": {
            "name": "setUp",
            "location": 347,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ComputationMemory.test_var_fac_nolink": {
            "name": "test_var_fac_nolink",
            "location": 359,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ComputationMemory.test_var_fac_link": {
            "name": "test_var_fac_link",
            "location": 371,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ComputationMemory.test_fac_2var": {
            "name": "test_fac_2var",
            "location": 385,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyDcop-master/tests/unit/test_distribution_objects.py": {
        "TestDistributionObject.test_dist": {
            "name": "test_dist",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistributionObject.test_dist_2": {
            "name": "test_dist_2",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistributionObject.test_raise_on_invalid_mapping": {
            "name": "test_raise_on_invalid_mapping",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistributionObject.test_host_on_agent": {
            "name": "test_host_on_agent",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistributionObject.test_host_on_agent_raises_on_already_hosted_comp": {
            "name": "test_host_on_agent_raises_on_already_hosted_comp",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistributionObject.test_host_on_new_agent": {
            "name": "test_host_on_new_agent",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistributionObject.test_is_hosted_single_computation": {
            "name": "test_is_hosted_single_computation",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistributionObject.test_is_hosted_several_computation": {
            "name": "test_is_hosted_several_computation",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistributionHints.test_must_host": {
            "name": "test_must_host",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistributionHints.test_must_host_return_empty_when_not_specified": {
            "name": "test_must_host_return_empty_when_not_specified",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistributionHints.test_host_with": {
            "name": "test_host_with",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistributionHints.test_host_with_several": {
            "name": "test_host_with_several",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyDcop-master/tests/unit/test_distribution_oneagent.py": {
        "TestDistributionOneAgent.test_simple_fg": {
            "name": "test_simple_fg",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistributionOneAgent.test_raise_when_not_enough_agents": {
            "name": "test_raise_when_not_enough_agents",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyDcop-master/tests/unit/test_dusc_path.py": {
        "cheapest_path_to": {
            "name": "cheapest_path_to",
            "location": 82,
            "return": [
                "Tuple[(float, Tuple)]"
            ],
            "arguments": {
                "target": [
                    "str"
                ],
                "paths": [
                    "Dict[(Tuple, float)]"
                ]
            }
        },
        "path_starting_with": {
            "name": "path_starting_with",
            "location": 92,
            "return": [
                "List[Tuple[(float, Tuple)]]"
            ],
            "arguments": {
                "start_path": [
                    "Tuple"
                ],
                "paths": [
                    "Dict[(Tuple, float)]"
                ]
            }
        },
        "route": {
            "name": "route",
            "location": 100,
            "return": [
                "float"
            ],
            "arguments": {
                "a": [
                    "str"
                ],
                "b": [
                    "str"
                ]
            }
        },
        "replicate": {
            "name": "replicate",
            "location": 104,
            "return": [],
            "arguments": {
                "rq_path": [
                    "Tuple"
                ],
                "budget": [
                    "float"
                ],
                "spent": [
                    "float"
                ],
                "paths": [
                    "Dict[(Tuple, float)]"
                ],
                "visited": []
            }
        },
        "replicated": {
            "name": "replicated",
            "location": 144,
            "return": [],
            "arguments": {
                "rq_path": [
                    "Tuple"
                ],
                "budget": [
                    "float"
                ],
                "spent": [
                    "float"
                ],
                "paths": [
                    "Dict[(Tuple, float)]"
                ],
                "visited": [
                    "List"
                ]
            }
        },
        "init": {
            "name": "init",
            "location": 186,
            "return": [],
            "arguments": {
                "start": [
                    "str"
                ]
            }
        },
        "test_linear": {
            "name": "test_linear",
            "location": 217,
            "return": [],
            "arguments": {}
        },
        "test_one_branch": {
            "name": "test_one_branch",
            "location": 231,
            "return": [],
            "arguments": {}
        },
        "test_no_cheapest_neighbor_first": {
            "name": "test_no_cheapest_neighbor_first",
            "location": 248,
            "return": [],
            "arguments": {}
        },
        "test_one_loop": {
            "name": "test_one_loop",
            "location": 268,
            "return": [],
            "arguments": {}
        },
        "test_one_loop_2": {
            "name": "test_one_loop_2",
            "location": 281,
            "return": [],
            "arguments": {}
        },
        "test_complex": {
            "name": "test_complex",
            "location": 301,
            "return": [],
            "arguments": {}
        }
    },
    "pyDcop-master/tests/unit/test_events.py": {
        "event_bus": {
            "name": "event_bus",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_simple_send": {
            "name": "test_simple_send",
            "location": 15,
            "return": [],
            "arguments": {
                "event_bus": []
            }
        },
        "test_cb_not_called_when_not_subscribed": {
            "name": "test_cb_not_called_when_not_subscribed",
            "location": 25,
            "return": [],
            "arguments": {
                "event_bus": []
            }
        },
        "test_do_not_receive_evt_once_unsubscribed": {
            "name": "test_do_not_receive_evt_once_unsubscribed",
            "location": 32,
            "return": [],
            "arguments": {
                "event_bus": []
            }
        },
        "test_unsubscribe_from_single_topic": {
            "name": "test_unsubscribe_from_single_topic",
            "location": 48,
            "return": [],
            "arguments": {
                "event_bus": []
            }
        },
        "test_several_subscribers": {
            "name": "test_several_subscribers",
            "location": 67,
            "return": [],
            "arguments": {
                "event_bus": []
            }
        },
        "test_receive_evt_from_sub_topics": {
            "name": "test_receive_evt_from_sub_topics",
            "location": 80,
            "return": [],
            "arguments": {
                "event_bus": []
            }
        }
    },
    "pyDcop-master/tests/unit/test_generate_agents.py": {
        "test_find_vars_agts_mapping": {
            "name": "test_find_vars_agts_mapping",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_find_vars_agts_mapping_different_padding": {
            "name": "test_find_vars_agts_mapping_different_padding",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "test_find_vars_agts_mapping_dual_naming": {
            "name": "test_find_vars_agts_mapping_dual_naming",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "test_find_vars_agts_mapping_with_prefix": {
            "name": "test_find_vars_agts_mapping_with_prefix",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "test_find_vars_starts_with": {
            "name": "test_find_vars_starts_with",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "test_generate_10_agents": {
            "name": "test_generate_10_agents",
            "location": 70,
            "return": [],
            "arguments": {}
        },
        "test_generate_10_agents_with_prefix": {
            "name": "test_generate_10_agents_with_prefix",
            "location": 80,
            "return": [],
            "arguments": {}
        },
        "test_generate_100_agents": {
            "name": "test_generate_100_agents",
            "location": 90,
            "return": [],
            "arguments": {}
        },
        "test_generate_hosting_costs": {
            "name": "test_generate_hosting_costs",
            "location": 102,
            "return": [],
            "arguments": {}
        },
        "test_find_prefix_len1": {
            "name": "test_find_prefix_len1",
            "location": 116,
            "return": [],
            "arguments": {}
        },
        "test_find_prefix_no_common_prefix": {
            "name": "test_find_prefix_no_common_prefix",
            "location": 121,
            "return": [],
            "arguments": {}
        },
        "test_find_prefix_len2": {
            "name": "test_find_prefix_len2",
            "location": 126,
            "return": [],
            "arguments": {}
        },
        "test_generate_agent_from_variables": {
            "name": "test_generate_agent_from_variables",
            "location": 131,
            "return": [],
            "arguments": {}
        },
        "test_generate_agent_from_variables_with_prefix": {
            "name": "test_generate_agent_from_variables_with_prefix",
            "location": 142,
            "return": [],
            "arguments": {}
        }
    },
    "pyDcop-master/tests/unit/test_generate_graphcoloring.py": {
        "test_grid_graph_raises_with_invalide_size": {
            "name": "test_grid_graph_raises_with_invalide_size",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_grid_graph": {
            "name": "test_grid_graph",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_generate_scale_free": {
            "name": "test_generate_scale_free",
            "location": 18,
            "return": [],
            "arguments": {}
        }
    },
    "pyDcop-master/tests/unit/test_generate_ising.py": {
        "test_generate_unary_constraints": {
            "name": "test_generate_unary_constraints",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_generate_unary_extensive_constraint": {
            "name": "test_generate_unary_extensive_constraint",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "test_generate_unary_intentional_constraint": {
            "name": "test_generate_unary_intentional_constraint",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "test_generate_binary_intentional_constraint": {
            "name": "test_generate_binary_intentional_constraint",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "test_generate_binary_extensive_constraint": {
            "name": "test_generate_binary_extensive_constraint",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "test_generate_binary_variables": {
            "name": "test_generate_binary_variables",
            "location": 80,
            "return": [],
            "arguments": {}
        },
        "test_generate_binary_constraints": {
            "name": "test_generate_binary_constraints",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "check_binary_constraint": {
            "name": "check_binary_constraint",
            "location": 112,
            "return": [],
            "arguments": {
                "constraint": [],
                "bin_range": []
            }
        }
    },
    "pyDcop-master/tests/unit/test_generate_meetingscheduling.py": {
        "test_generate_resources": {
            "name": "test_generate_resources",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_generate_events": {
            "name": "test_generate_events",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_generate_variables": {
            "name": "test_generate_variables",
            "location": 40,
            "return": [],
            "arguments": {}
        }
    },
    "pyDcop-master/tests/unit/test_graphs.py": {
        "AsGraphTests.test_1var_1rel": {
            "name": "test_1var_1rel",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AsGraphTests.test_3var_1rel": {
            "name": "test_3var_1rel",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FindFurthestInLoopyGrap.setUp": {
            "name": "setUp",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FindFurthestInLoopyGrap.test_from_n1": {
            "name": "test_from_n1",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FindFurthestInLoopyGrap.test_from_n2": {
            "name": "test_from_n2",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FindFurthestInLoopyGrap.test_from_n3": {
            "name": "test_from_n3",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FindFurthestInLoopyGrap.test_from_n4": {
            "name": "test_from_n4",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FindFurthestInLoopyGrap.test_from_n5": {
            "name": "test_from_n5",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphDiameterTests.test_furthest_node": {
            "name": "test_furthest_node",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphDiameterTests.test_diameter": {
            "name": "test_diameter",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphDiameterTests.test_diameter_5nodes": {
            "name": "test_diameter_5nodes",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphDiameterTests.test_diameter_loop": {
            "name": "test_diameter_loop",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NetworkXTests.test_pairs_2elt": {
            "name": "test_pairs_2elt",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NetworkXTests.test_pairs_3elt": {
            "name": "test_pairs_3elt",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NetworkXTests.test_pairs_delt": {
            "name": "test_pairs_delt",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NetworkXTests.test_convert_graph_simple": {
            "name": "test_convert_graph_simple",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NetworkXTests.test_convert_graph": {
            "name": "test_convert_graph",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NetworkXTests.test_count_cycle_none": {
            "name": "test_count_cycle_none",
            "location": 260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NetworkXTests.test_count_cycle_one": {
            "name": "test_count_cycle_one",
            "location": 273,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NetworkXTests.test_count_cycle_clique": {
            "name": "test_count_cycle_clique",
            "location": 287,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NetworkXTests.test_diameter_simple": {
            "name": "test_diameter_simple",
            "location": 301,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NetworkXTests.test_diameter_simple2": {
            "name": "test_diameter_simple2",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NetworkXTests.test_diameter_simple3": {
            "name": "test_diameter_simple3",
            "location": 323,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyDcop-master/tests/unit/test_graph_base_compgraph.py": {
        "test_node_creation_minimal": {
            "name": "test_node_creation_minimal",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_node_creation_with_links": {
            "name": "test_node_creation_with_links",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "test_node_creation_with_hyperlinks": {
            "name": "test_node_creation_with_hyperlinks",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "test_node_creation_with_one_neighbor": {
            "name": "test_node_creation_with_one_neighbor",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "test_node_creation_with_several_neighbors": {
            "name": "test_node_creation_with_several_neighbors",
            "location": 70,
            "return": [],
            "arguments": {}
        },
        "test_node_creation_raises_when_giving_links_neighbors": {
            "name": "test_node_creation_raises_when_giving_links_neighbors",
            "location": 80,
            "return": [],
            "arguments": {}
        },
        "test_node_simplerepr": {
            "name": "test_node_simplerepr",
            "location": 86,
            "return": [],
            "arguments": {}
        }
    },
    "pyDcop-master/tests/unit/test_graph_constraintshypergraph.py": {
        "test_create_node_no_neigbors": {
            "name": "test_create_node_no_neigbors",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_create_node_with_custom_name": {
            "name": "test_create_node_with_custom_name",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "test_create_node_with_binary_constraint": {
            "name": "test_create_node_with_binary_constraint",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "test_create_node_with_nary_constraint": {
            "name": "test_create_node_with_nary_constraint",
            "location": 80,
            "return": [],
            "arguments": {}
        },
        "test_var_node_simple_repr": {
            "name": "test_var_node_simple_repr",
            "location": 98,
            "return": [],
            "arguments": {}
        },
        "test_link_simple_repr": {
            "name": "test_link_simple_repr",
            "location": 111,
            "return": [],
            "arguments": {}
        },
        "test_build_graph_from_dcop": {
            "name": "test_build_graph_from_dcop",
            "location": 130,
            "return": [],
            "arguments": {}
        },
        "test_build_graph_from_variables_constraints": {
            "name": "test_build_graph_from_variables_constraints",
            "location": 152,
            "return": [],
            "arguments": {}
        },
        "test_graph_density": {
            "name": "test_graph_density",
            "location": 164,
            "return": [],
            "arguments": {}
        }
    },
    "pyDcop-master/tests/unit/test_graph_factorgraph.py": {
        "test_one_var_one_factor": {
            "name": "test_one_var_one_factor",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "test_two_var_one_factor": {
            "name": "test_two_var_one_factor",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "test_density_two_var_one_factor": {
            "name": "test_density_two_var_one_factor",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "test_factornode_simple_repr": {
            "name": "test_factornode_simple_repr",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "test_variablenode_simple_repr": {
            "name": "test_variablenode_simple_repr",
            "location": 122,
            "return": [],
            "arguments": {}
        },
        "TestFactorGraphComputation.test_create_ok": {
            "name": "test_create_ok",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFactorGraphComputation.test_raise_when_duplicate_computation_name": {
            "name": "test_raise_when_duplicate_computation_name",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyDcop-master/tests/unit/test_graph_pseudotree.py": {
        "check_tree": {
            "name": "check_tree",
            "location": 267,
            "return": [],
            "arguments": {
                "tree_root": [],
                "visited": []
            }
        },
        "DfsTreeGenerationTests.test_find_neighbors_relations": {
            "name": "test_find_neighbors_relations",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DfsTreeGenerationTests.test_root": {
            "name": "test_root",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DfsTreeGenerationTests.test_2nodes_tree": {
            "name": "test_2nodes_tree",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DfsTreeGenerationTests.test_3nodes_tree": {
            "name": "test_3nodes_tree",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DfsTreeGenerationTests.test_3nodes_tree_cycle": {
            "name": "test_3nodes_tree_cycle",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DfsTreeGenerationTests.test_3nodes_tree_cycle_3ary": {
            "name": "test_3nodes_tree_cycle_3ary",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DfsTreeGenerationTests.test_4nodes": {
            "name": "test_4nodes",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DfsTreeGenerationTests.test_visit_tree": {
            "name": "test_visit_tree",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PseudoTreeGeneration.test_build_single_var": {
            "name": "test_build_single_var",
            "location": 297,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PseudoTreeGeneration.test_build_two_var": {
            "name": "test_build_two_var",
            "location": 309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PseudoTreeGeneration.test_3nodes_tree_cycle": {
            "name": "test_3nodes_tree_cycle",
            "location": 326,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DfsTreeDpopTests.test_2nodes_tree_relation_at_bottom": {
            "name": "test_2nodes_tree_relation_at_bottom",
            "location": 359,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DfsTreeDpopTests.test_3nodes_tree_cycle_3ary_rel_bottom": {
            "name": "test_3nodes_tree_cycle_3ary_rel_bottom",
            "location": 389,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DfsTreeDpopTests.test_4nodes": {
            "name": "test_4nodes",
            "location": 424,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPseudoTreeSimpleRepr.test_node": {
            "name": "test_node",
            "location": 460,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPseudoTreeSimpleRepr.test_link_simple_repr": {
            "name": "test_link_simple_repr",
            "location": 464,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPseudoTreeSimpleRepr.test_link_from_repr": {
            "name": "test_link_from_repr",
            "location": 470,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMetrics.test_density_two_var_one_factor": {
            "name": "test_density_two_var_one_factor",
            "location": 480,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DfsTreeDpopTests.test_4nodes.binary_func": {
            "name": "binary_func",
            "location": 438,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        }
    },
    "pyDcop-master/tests/unit/test_infra_agents.py": {
        "agent": {
            "name": "agent",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "agents": {
            "name": "agents",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "wait_run": {
            "name": "wait_run",
            "location": 102,
            "return": [],
            "arguments": {}
        },
        "test_create": {
            "name": "test_create",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "test_start": {
            "name": "test_start",
            "location": 118,
            "return": [],
            "arguments": {
                "agent": []
            }
        },
        "test_stop": {
            "name": "test_stop",
            "location": 129,
            "return": [],
            "arguments": {
                "agent": []
            }
        },
        "test_add_computation_before_start": {
            "name": "test_add_computation_before_start",
            "location": 146,
            "return": [],
            "arguments": {
                "agent": []
            }
        },
        "test_add_computation_after_start": {
            "name": "test_add_computation_after_start",
            "location": 157,
            "return": [],
            "arguments": {
                "agent": []
            }
        },
        "test_run_computation": {
            "name": "test_run_computation",
            "location": 167,
            "return": [],
            "arguments": {
                "agent": []
            }
        },
        "test_run_computation_by_name": {
            "name": "test_run_computation_by_name",
            "location": 192,
            "return": [],
            "arguments": {
                "agent": []
            }
        },
        "test_remove_computation": {
            "name": "test_remove_computation",
            "location": 216,
            "return": [],
            "arguments": {
                "agent": []
            }
        },
        "test_remove_running_computation": {
            "name": "test_remove_running_computation",
            "location": 228,
            "return": [],
            "arguments": {
                "agent": []
            }
        },
        "test_pause_computation": {
            "name": "test_pause_computation",
            "location": 245,
            "return": [],
            "arguments": {
                "agent": []
            }
        },
        "test_pause_several_computations": {
            "name": "test_pause_several_computations",
            "location": 265,
            "return": [],
            "arguments": {
                "agent": []
            }
        },
        "test_periodic_action": {
            "name": "test_periodic_action",
            "location": 286,
            "return": [],
            "arguments": {
                "agent": []
            }
        },
        "test_periodic_action_not_called": {
            "name": "test_periodic_action_not_called",
            "location": 299,
            "return": [],
            "arguments": {
                "agent": []
            }
        },
        "test_several_periodic_action": {
            "name": "test_several_periodic_action",
            "location": 311,
            "return": [],
            "arguments": {
                "agent": []
            }
        },
        "test_several_actions_different_period": {
            "name": "test_several_actions_different_period",
            "location": 331,
            "return": [],
            "arguments": {
                "agent": []
            }
        },
        "test_remove_action": {
            "name": "test_remove_action",
            "location": 351,
            "return": [],
            "arguments": {
                "agent": []
            }
        },
        "PingComputation.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "target": [
                    "str"
                ]
            }
        },
        "PingComputation.on_start": {
            "name": "on_start",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PingComputation._on_ping": {
            "name": "_on_ping",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "var_name": [],
                "msg": [],
                "t": []
            }
        },
        "test_periodic_action.cb": {
            "name": "cb",
            "location": 289,
            "return": [],
            "arguments": {}
        },
        "test_periodic_action_not_called.cb": {
            "name": "cb",
            "location": 301,
            "return": [],
            "arguments": {}
        },
        "test_several_periodic_action.cb1": {
            "name": "cb1",
            "location": 314,
            "return": [],
            "arguments": {}
        },
        "test_several_periodic_action.cb2": {
            "name": "cb2",
            "location": 319,
            "return": [],
            "arguments": {}
        },
        "test_several_actions_different_period.cb1": {
            "name": "cb1",
            "location": 334,
            "return": [],
            "arguments": {}
        },
        "test_several_actions_different_period.cb2": {
            "name": "cb2",
            "location": 339,
            "return": [],
            "arguments": {}
        },
        "test_remove_action.cb1": {
            "name": "cb1",
            "location": 354,
            "return": [],
            "arguments": {}
        }
    },
    "pyDcop-master/tests/unit/test_infra_communication.py": {
        "skip_http_tests": {
            "name": "skip_http_tests",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "local_messaging": {
            "name": "local_messaging",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "httpd": {
            "name": "httpd",
            "location": 298,
            "return": [],
            "arguments": {}
        },
        "http_comms": {
            "name": "http_comms",
            "location": 370,
            "return": [],
            "arguments": {}
        },
        "TestMessaging.test_messaging_local_msg": {
            "name": "test_messaging_local_msg",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "local_messaging": []
            }
        },
        "TestMessaging.test_retry_when_posting_msg_to_unknown_computation": {
            "name": "test_retry_when_posting_msg_to_unknown_computation",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "local_messaging": []
            }
        },
        "TestMessaging.test_raise_when_posting_msg_from_unknown_computation": {
            "name": "test_raise_when_posting_msg_from_unknown_computation",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "local_messaging": []
            }
        },
        "TestMessaging.test_next_message_returns_None_when_no_msg": {
            "name": "test_next_message_returns_None_when_no_msg",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "local_messaging": []
            }
        },
        "TestMessaging.test_msg_to_computation_hosted_on_another_agent": {
            "name": "test_msg_to_computation_hosted_on_another_agent",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "local_messaging": []
            }
        },
        "TestMessaging.test__metrics_local_msg": {
            "name": "test__metrics_local_msg",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "local_messaging": []
            }
        },
        "TestMessaging.test__metrics_ext_msg": {
            "name": "test__metrics_ext_msg",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "local_messaging": []
            }
        },
        "TestMessaging.test_do_not_count_mgt_messages": {
            "name": "test_do_not_count_mgt_messages",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "local_messaging": []
            }
        },
        "TestInProcessCommunictionLayer.test_address": {
            "name": "test_address",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInProcessCommunictionLayer.test_addresses_are_not_shared_accross_instances": {
            "name": "test_addresses_are_not_shared_accross_instances",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInProcessCommunictionLayer.test_msg_to_another_agent": {
            "name": "test_msg_to_another_agent",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInProcessCommunictionLayer.test_received_msg_is_delivered_to_messaging_queue": {
            "name": "test_received_msg_is_delivered_to_messaging_queue",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInProcessCommunictionLayer.test_raise_when_sending_to_unknown_agent_fail_default": {
            "name": "test_raise_when_sending_to_unknown_agent_fail_default",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInProcessCommunictionLayer.test_raise_when_sending_to_unknown_agent_fail_on_send": {
            "name": "test_raise_when_sending_to_unknown_agent_fail_on_send",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInProcessCommunictionLayer.test_ignore_when_sending_to_unknown_agent_ignore_default": {
            "name": "test_ignore_when_sending_to_unknown_agent_ignore_default",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInProcessCommunictionLayer.test_ignore_when_sending_to_unknown_agent_ignore_on_send": {
            "name": "test_ignore_when_sending_to_unknown_agent_ignore_on_send",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInProcessCommunictionLayer.test_retry_when_sending_to_unknown_agent_retry_default": {
            "name": "test_retry_when_sending_to_unknown_agent_retry_default",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInProcessCommunictionLayer.test_retry_when_sending_to_unknown_agent_retry_on_send": {
            "name": "test_retry_when_sending_to_unknown_agent_retry_on_send",
            "location": 284,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHttpHandler.test_http_handler_one_message": {
            "name": "test_http_handler_one_message",
            "location": 311,
            "return": [],
            "arguments": {
                "self": [],
                "httpd": []
            }
        },
        "TestHttpHandler.test_http_handler_several_messages": {
            "name": "test_http_handler_several_messages",
            "location": 329,
            "return": [],
            "arguments": {
                "self": [],
                "httpd": []
            }
        },
        "TestHttpCommLayer.test_one_message_between_two": {
            "name": "test_one_message_between_two",
            "location": 388,
            "return": [],
            "arguments": {
                "self": [],
                "http_comms": []
            }
        },
        "TestHttpCommLayer.test_several_messages_between_two": {
            "name": "test_several_messages_between_two",
            "location": 402,
            "return": [],
            "arguments": {
                "self": [],
                "http_comms": []
            }
        },
        "TestHttpCommLayer.test_msg_to_unknown_computation_fail_mode": {
            "name": "test_msg_to_unknown_computation_fail_mode",
            "location": 429,
            "return": [],
            "arguments": {
                "self": [],
                "http_comms": []
            }
        },
        "TestHttpCommLayer.test_msg_to_unknown_computation_ignore_mode": {
            "name": "test_msg_to_unknown_computation_ignore_mode",
            "location": 446,
            "return": [],
            "arguments": {
                "self": [],
                "http_comms": []
            }
        },
        "TestHttpCommLayer.test_msg_to_unknown_agent_fail_mode": {
            "name": "test_msg_to_unknown_agent_fail_mode",
            "location": 462,
            "return": [],
            "arguments": {
                "self": [],
                "http_comms": []
            }
        },
        "TestHttpCommLayer.test_msg_to_unknown_agent_ignore_mode": {
            "name": "test_msg_to_unknown_agent_ignore_mode",
            "location": 472,
            "return": [],
            "arguments": {
                "self": [],
                "http_comms": []
            }
        },
        "TestHttpCommLayer.test_msg_to_unreachable_agent_fail_mode": {
            "name": "test_msg_to_unreachable_agent_fail_mode",
            "location": 482,
            "return": [],
            "arguments": {
                "self": [],
                "http_comms": []
            }
        },
        "TestHttpCommLayer.test_msg_to_unreachable_agent_ignore_mode": {
            "name": "test_msg_to_unreachable_agent_ignore_mode",
            "location": 496,
            "return": [],
            "arguments": {
                "self": [],
                "http_comms": []
            }
        },
        "TestHttpCommLayer.test_msg_to_unknown_computation_fail_mode.raise_unknown": {
            "name": "raise_unknown",
            "location": 435,
            "return": [],
            "arguments": {}
        },
        "TestHttpCommLayer.test_msg_to_unknown_computation_ignore_mode.raise_unknown": {
            "name": "raise_unknown",
            "location": 452,
            "return": [],
            "arguments": {}
        }
    },
    "pyDcop-master/tests/unit/test_infra_computations.py": {
        "test_message": {
            "name": "test_message",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "test_message_serialization": {
            "name": "test_message_serialization",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "test_message_factory": {
            "name": "test_message_factory",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "test_message_factory_kwargs": {
            "name": "test_message_factory_kwargs",
            "location": 79,
            "return": [],
            "arguments": {}
        },
        "test_message_factory_serialization": {
            "name": "test_message_factory_serialization",
            "location": 91,
            "return": [],
            "arguments": {}
        },
        "test_setting_message_sender_on_computation": {
            "name": "test_setting_message_sender_on_computation",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "test_setting_message_sender_only_works_once": {
            "name": "test_setting_message_sender_only_works_once",
            "location": 113,
            "return": [],
            "arguments": {}
        },
        "test_periodic_action_on_computation": {
            "name": "test_periodic_action_on_computation",
            "location": 122,
            "return": [],
            "arguments": {}
        },
        "test_remove_periodic_action_on_computation": {
            "name": "test_remove_periodic_action_on_computation",
            "location": 148,
            "return": [],
            "arguments": {}
        },
        "test_oneshot_delayed_action_on_computation": {
            "name": "test_oneshot_delayed_action_on_computation",
            "location": 183,
            "return": [],
            "arguments": {}
        },
        "test_several_periodic_action_on_computation": {
            "name": "test_several_periodic_action_on_computation",
            "location": 217,
            "return": [],
            "arguments": {}
        },
        "test_periodic_action_not_called_when_paused": {
            "name": "test_periodic_action_not_called_when_paused",
            "location": 249,
            "return": [],
            "arguments": {}
        },
        "test_register_handler_decorator": {
            "name": "test_register_handler_decorator",
            "location": 280,
            "return": [],
            "arguments": {}
        },
        "test_handler_decorator": {
            "name": "test_handler_decorator",
            "location": 295,
            "return": [],
            "arguments": {}
        },
        "test_handler_decorator_not_called_before_start": {
            "name": "test_handler_decorator_not_called_before_start",
            "location": 315,
            "return": [],
            "arguments": {}
        },
        "test_memory_footprint": {
            "name": "test_memory_footprint",
            "location": 334,
            "return": [],
            "arguments": {}
        },
        "test_memory_footprint_from_import_module": {
            "name": "test_memory_footprint_from_import_module",
            "location": 352,
            "return": [],
            "arguments": {}
        },
        "test_memory_footprint_from_classic_import": {
            "name": "test_memory_footprint_from_classic_import",
            "location": 370,
            "return": [],
            "arguments": {}
        },
        "test_fallback_memory_footprint": {
            "name": "test_fallback_memory_footprint",
            "location": 388,
            "return": [],
            "arguments": {}
        },
        "test_fallback_memory_footprint_from_import_module": {
            "name": "test_fallback_memory_footprint_from_import_module",
            "location": 402,
            "return": [],
            "arguments": {}
        },
        "test_fallback_memory_footprint_from_classic_import": {
            "name": "test_fallback_memory_footprint_from_classic_import",
            "location": 416,
            "return": [],
            "arguments": {}
        },
        "test_fix_delayed_message_on_start": {
            "name": "test_fix_delayed_message_on_start",
            "location": 430,
            "return": [],
            "arguments": {}
        },
        "test_periodic_action_on_computation.TestComputation.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_periodic_action_on_computation.TestComputation.on_start": {
            "name": "on_start",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_periodic_action_on_computation.TestComputation.action": {
            "name": "action",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_remove_periodic_action_on_computation.TestComputation.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_remove_periodic_action_on_computation.TestComputation.on_start": {
            "name": "on_start",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_remove_periodic_action_on_computation.TestComputation.action": {
            "name": "action",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_remove_periodic_action_on_computation.TestComputation.test_remove": {
            "name": "test_remove",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_oneshot_delayed_action_on_computation.TestComputation.__init__": {
            "name": "__init__",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_oneshot_delayed_action_on_computation.TestComputation.on_start": {
            "name": "on_start",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_oneshot_delayed_action_on_computation.TestComputation.action": {
            "name": "action",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_several_periodic_action_on_computation.TestComputation.__init__": {
            "name": "__init__",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_several_periodic_action_on_computation.TestComputation.on_start": {
            "name": "on_start",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_several_periodic_action_on_computation.TestComputation.action1": {
            "name": "action1",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_several_periodic_action_on_computation.TestComputation.action2": {
            "name": "action2",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_periodic_action_not_called_when_paused.TestComputation.__init__": {
            "name": "__init__",
            "location": 254,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_periodic_action_not_called_when_paused.TestComputation.on_start": {
            "name": "on_start",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_periodic_action_not_called_when_paused.TestComputation.action": {
            "name": "action",
            "location": 261,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_register_handler_decorator.TestComputation.__init__": {
            "name": "__init__",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_register_handler_decorator.TestComputation.on_msg": {
            "name": "on_msg",
            "location": 287,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [
                    "str"
                ],
                "msg": [
                    "Message"
                ],
                "t": [
                    "float"
                ]
            }
        },
        "test_handler_decorator.TestComputation.__init__": {
            "name": "__init__",
            "location": 297,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_handler_decorator.TestComputation.on_msg": {
            "name": "on_msg",
            "location": 302,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [
                    "str"
                ],
                "msg": [
                    "Message"
                ],
                "t": [
                    "float"
                ]
            }
        },
        "test_handler_decorator_not_called_before_start.TestComputation.__init__": {
            "name": "__init__",
            "location": 317,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_handler_decorator_not_called_before_start.TestComputation.on_msg": {
            "name": "on_msg",
            "location": 322,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [
                    "str"
                ],
                "msg": [
                    "Message"
                ],
                "t": [
                    "float"
                ]
            }
        },
        "test_fix_delayed_message_on_start.TestComputation1.__init__": {
            "name": "__init__",
            "location": 460,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_fix_delayed_message_on_start.TestComputation1.on_start": {
            "name": "on_start",
            "location": 463,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_fix_delayed_message_on_start.TestComputation2.__init__": {
            "name": "__init__",
            "location": 468,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_fix_delayed_message_on_start.TestComputation2.on_foo": {
            "name": "on_foo",
            "location": 477,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [],
                "msg": [],
                "t": []
            }
        }
    },
    "pyDcop-master/tests/unit/test_infra_discovery.py": {
        "standalone_discovery": {
            "name": "standalone_discovery",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "directory_discovery": {
            "name": "directory_discovery",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "test_register_agent_without_publish": {
            "name": "test_register_agent_without_publish",
            "location": 87,
            "return": [],
            "arguments": {
                "standalone_discovery": []
            }
        },
        "test_register_agent_publish_with_no_directory": {
            "name": "test_register_agent_publish_with_no_directory",
            "location": 94,
            "return": [],
            "arguments": {
                "standalone_discovery": []
            }
        },
        "test_unregister_agent_without_publish": {
            "name": "test_unregister_agent_without_publish",
            "location": 101,
            "return": [],
            "arguments": {
                "standalone_discovery": []
            }
        },
        "test_raises_on_address_for_unknown_agent": {
            "name": "test_raises_on_address_for_unknown_agent",
            "location": 110,
            "return": [],
            "arguments": {
                "standalone_discovery": []
            }
        },
        "test_register_agent_publish_on_directory": {
            "name": "test_register_agent_publish_on_directory",
            "location": 117,
            "return": [],
            "arguments": {
                "directory_discovery": []
            }
        },
        "test_unregister_agent_publish_on_directory": {
            "name": "test_unregister_agent_publish_on_directory",
            "location": 128,
            "return": [],
            "arguments": {
                "directory_discovery": []
            }
        },
        "test_unregister_agent_with_computation_fails": {
            "name": "test_unregister_agent_with_computation_fails",
            "location": 143,
            "return": [],
            "arguments": {
                "directory_discovery": []
            }
        },
        "test_subscribe_agent_cb": {
            "name": "test_subscribe_agent_cb",
            "location": 155,
            "return": [],
            "arguments": {
                "directory_discovery": []
            }
        },
        "test_subscribe_agent_cb_one_shot": {
            "name": "test_subscribe_agent_cb_one_shot",
            "location": 165,
            "return": [],
            "arguments": {
                "directory_discovery": []
            }
        },
        "test_subscribe_agent_cb_several": {
            "name": "test_subscribe_agent_cb_several",
            "location": 179,
            "return": [],
            "arguments": {
                "directory_discovery": []
            }
        },
        "test_subscribe_agent_cb_called_once": {
            "name": "test_subscribe_agent_cb_called_once",
            "location": 194,
            "return": [],
            "arguments": {
                "directory_discovery": []
            }
        },
        "test_subscribe_agent_on_second_agt": {
            "name": "test_subscribe_agent_on_second_agt",
            "location": 211,
            "return": [],
            "arguments": {
                "directory_discovery": []
            }
        },
        "test_unsubscribe_all_cb": {
            "name": "test_unsubscribe_all_cb",
            "location": 226,
            "return": [],
            "arguments": {
                "directory_discovery": []
            }
        },
        "test_unsubscribe_one_cb": {
            "name": "test_unsubscribe_one_cb",
            "location": 247,
            "return": [],
            "arguments": {
                "directory_discovery": []
            }
        },
        "test_subscribe_all_agents": {
            "name": "test_subscribe_all_agents",
            "location": 264,
            "return": [],
            "arguments": {
                "directory_discovery": []
            }
        },
        "test_subscribe_all_agents_after": {
            "name": "test_subscribe_all_agents_after",
            "location": 281,
            "return": [],
            "arguments": {
                "directory_discovery": []
            }
        },
        "test_subscribe_all_agents_with_cb": {
            "name": "test_subscribe_all_agents_with_cb",
            "location": 306,
            "return": [],
            "arguments": {
                "directory_discovery": []
            }
        },
        "test_list_computations": {
            "name": "test_list_computations",
            "location": 327,
            "return": [],
            "arguments": {}
        },
        "test_list_computations_filter": {
            "name": "test_list_computations_filter",
            "location": 336,
            "return": [],
            "arguments": {
                "directory_discovery": []
            }
        },
        "test_computation_agent": {
            "name": "test_computation_agent",
            "location": 345,
            "return": [],
            "arguments": {}
        },
        "test_agent_computations": {
            "name": "test_agent_computations",
            "location": 358,
            "return": [],
            "arguments": {
                "directory_discovery": []
            }
        },
        "test_register_computation": {
            "name": "test_register_computation",
            "location": 376,
            "return": [],
            "arguments": {
                "directory_discovery": []
            }
        },
        "test_register_own_computation": {
            "name": "test_register_own_computation",
            "location": 398,
            "return": [],
            "arguments": {
                "directory_discovery": []
            }
        },
        "test_register_computation_with_agent_address": {
            "name": "test_register_computation_with_agent_address",
            "location": 408,
            "return": [],
            "arguments": {
                "directory_discovery": []
            }
        },
        "test_unregister_computation": {
            "name": "test_unregister_computation",
            "location": 418,
            "return": [],
            "arguments": {
                "directory_discovery": []
            }
        },
        "test_unregister_computation_with_agent": {
            "name": "test_unregister_computation_with_agent",
            "location": 433,
            "return": [],
            "arguments": {
                "directory_discovery": []
            }
        },
        "test_subscribe_computation_no_cb": {
            "name": "test_subscribe_computation_no_cb",
            "location": 456,
            "return": [],
            "arguments": {
                "directory_discovery": []
            }
        },
        "test_subscribe_computation_one_cb": {
            "name": "test_subscribe_computation_one_cb",
            "location": 466,
            "return": [],
            "arguments": {
                "directory_discovery": []
            }
        },
        "test_unsubscribe_computation_cb": {
            "name": "test_unsubscribe_computation_cb",
            "location": 478,
            "return": [],
            "arguments": {
                "directory_discovery": []
            }
        },
        "test_unsubscribe_computation_no_cb": {
            "name": "test_unsubscribe_computation_no_cb",
            "location": 492,
            "return": [],
            "arguments": {
                "directory_discovery": []
            }
        },
        "test_register_replica_for_unknown_replication_should_raise": {
            "name": "test_register_replica_for_unknown_replication_should_raise",
            "location": 506,
            "return": [],
            "arguments": {
                "directory_discovery": []
            }
        },
        "test_register_replica_local": {
            "name": "test_register_replica_local",
            "location": 514,
            "return": [],
            "arguments": {
                "directory_discovery": []
            }
        },
        "test_replica_should_be_visible_for_subscribed_agents": {
            "name": "test_replica_should_be_visible_for_subscribed_agents",
            "location": 525,
            "return": [],
            "arguments": {
                "directory_discovery": []
            }
        },
        "test_replica_is_not_visible_for_not_subscribed_agents": {
            "name": "test_replica_is_not_visible_for_not_subscribed_agents",
            "location": 541,
            "return": [],
            "arguments": {
                "directory_discovery": []
            }
        },
        "test_replica_removal_must_be_sent": {
            "name": "test_replica_removal_must_be_sent",
            "location": 561,
            "return": [],
            "arguments": {
                "directory_discovery": []
            }
        },
        "test_replica_removal_callback": {
            "name": "test_replica_removal_callback",
            "location": 578,
            "return": [],
            "arguments": {
                "directory_discovery": []
            }
        },
        "test_replica_unsubscribe": {
            "name": "test_replica_unsubscribe",
            "location": 603,
            "return": [],
            "arguments": {
                "directory_discovery": []
            }
        },
        "wait_run": {
            "name": "wait_run",
            "location": 621,
            "return": [],
            "arguments": {}
        }
    },
    "pyDcop-master/tests/unit/test_infra_orchestratedagents.py": {
        "orchestrated_agent": {
            "name": "orchestrated_agent",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "test_start_orchestrated_agent_starts_mgt": {
            "name": "test_start_orchestrated_agent_starts_mgt",
            "location": 67,
            "return": [],
            "arguments": {
                "orchestrated_agent": []
            }
        },
        "test_deploy_computation_request": {
            "name": "test_deploy_computation_request",
            "location": 79,
            "return": [],
            "arguments": {
                "orchestrated_agent": []
            }
        },
        "test_run_computations": {
            "name": "test_run_computations",
            "location": 99,
            "return": [],
            "arguments": {
                "orchestrated_agent": []
            }
        },
        "test_pause_computations": {
            "name": "test_pause_computations",
            "location": 112,
            "return": [],
            "arguments": {
                "orchestrated_agent": []
            }
        },
        "test_stop_agent": {
            "name": "test_stop_agent",
            "location": 125,
            "return": [],
            "arguments": {
                "orchestrated_agent": []
            }
        }
    },
    "pyDcop-master/tests/unit/test_infra_orchestrator.py": {
        "test_serialize_RepairReadyMessage": {
            "name": "test_serialize_RepairReadyMessage",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "pyDcop-master/tests/unit/test_infra_synchronous_computation.py": {
        "test_on_start_is_a_cycle": {
            "name": "test_on_start_is_a_cycle",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "test_on_start_is_a_cycle_no_message_during_startup": {
            "name": "test_on_start_is_a_cycle_no_message_during_startup",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "test_on_start_is_a_cycle_both_message_during_startup": {
            "name": "test_on_start_is_a_cycle_both_message_during_startup",
            "location": 98,
            "return": [],
            "arguments": {}
        },
        "test_on_start_is_a_cycle_some_message_during_startup": {
            "name": "test_on_start_is_a_cycle_some_message_during_startup",
            "location": 148,
            "return": [],
            "arguments": {}
        },
        "test_receive_one_neighbor": {
            "name": "test_receive_one_neighbor",
            "location": 192,
            "return": [],
            "arguments": {}
        },
        "test_receive_two_neighbors": {
            "name": "test_receive_two_neighbors",
            "location": 217,
            "return": [],
            "arguments": {}
        },
        "test_receive_2_neighbors_shifted": {
            "name": "test_receive_2_neighbors_shifted",
            "location": 238,
            "return": [],
            "arguments": {}
        },
        "test_sending_cycle_messages": {
            "name": "test_sending_cycle_messages",
            "location": 278,
            "return": [],
            "arguments": {}
        },
        "test_sending_automatic_cycle_sync_message": {
            "name": "test_sending_automatic_cycle_sync_message",
            "location": 303,
            "return": [],
            "arguments": {}
        },
        "test_receiving_automatic_sync_message": {
            "name": "test_receiving_automatic_sync_message",
            "location": 329,
            "return": [],
            "arguments": {}
        },
        "test_sending_automatic_cycle_sync_message_2_neighbors": {
            "name": "test_sending_automatic_cycle_sync_message_2_neighbors",
            "location": 344,
            "return": [],
            "arguments": {}
        },
        "test_receiving_duplicate_message_fails": {
            "name": "test_receiving_duplicate_message_fails",
            "location": 371,
            "return": [],
            "arguments": {}
        },
        "test_receiving_out_of_order_messages_fails": {
            "name": "test_receiving_out_of_order_messages_fails",
            "location": 388,
            "return": [],
            "arguments": {}
        },
        "test_receiving_message_from_unknown_computation_fails": {
            "name": "test_receiving_message_from_unknown_computation_fails",
            "location": 402,
            "return": [],
            "arguments": {}
        },
        "test_cycle_id_is_added_when_using_post_msg": {
            "name": "test_cycle_id_is_added_when_using_post_msg",
            "location": 416,
            "return": [],
            "arguments": {}
        },
        "test_mixing_message_from_post_and_return": {
            "name": "test_mixing_message_from_post_and_return",
            "location": 428,
            "return": [],
            "arguments": {}
        },
        "test_receive_one_neighbor_dcop_computation": {
            "name": "test_receive_one_neighbor_dcop_computation",
            "location": 449,
            "return": [],
            "arguments": {}
        },
        "test_receive_two_neighbors_dcop_computation": {
            "name": "test_receive_two_neighbors_dcop_computation",
            "location": 477,
            "return": [],
            "arguments": {}
        },
        "test_cycle_id_is_added_when_using_post_to_all_neighbors_dcop_computation": {
            "name": "test_cycle_id_is_added_when_using_post_to_all_neighbors_dcop_computation",
            "location": 501,
            "return": [],
            "arguments": {}
        },
        "SynchC.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "neighbors": []
            }
        },
        "SynchC.neighbors": {
            "name": "neighbors",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SynchC.on_foo": {
            "name": "on_foo",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [],
                "msg": [],
                "t": []
            }
        },
        "SynchC.on_start": {
            "name": "on_start",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SynchC.on_new_cycle": {
            "name": "on_new_cycle",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "messages": [],
                "cycle_id": []
            }
        },
        "test_on_start_is_a_cycle_both_message_during_startup.on_start_c1": {
            "name": "on_start_c1",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_on_start_is_a_cycle_both_message_during_startup.on_start_c2": {
            "name": "on_start_c2",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_on_start_is_a_cycle_some_message_during_startup.on_start_c1": {
            "name": "on_start_c1",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_sending_cycle_messages.on_cycle": {
            "name": "on_cycle",
            "location": 281,
            "return": [],
            "arguments": {
                "messages": [],
                "cycle_id": []
            }
        },
        "test_sending_automatic_cycle_sync_message.on_cycle": {
            "name": "on_cycle",
            "location": 307,
            "return": [],
            "arguments": {
                "messages": [],
                "cycle_id": []
            }
        },
        "test_sending_automatic_cycle_sync_message_2_neighbors.on_cycle": {
            "name": "on_cycle",
            "location": 348,
            "return": [],
            "arguments": {
                "messages": [],
                "cycle_id": []
            }
        },
        "SynchDcopC.__init__": {
            "name": "__init__",
            "location": 437,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "neighbors": []
            }
        },
        "SynchDcopC.on_foo": {
            "name": "on_foo",
            "location": 442,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [],
                "msg": [],
                "t": []
            }
        },
        "SynchDcopC.on_new_cycle": {
            "name": "on_new_cycle",
            "location": 445,
            "return": [],
            "arguments": {
                "self": [],
                "messages": [],
                "cycle_id": []
            }
        }
    },
    "pyDcop-master/tests/unit/test_reparation.py": {
        "test_create_hosted_constraint_for_computation": {
            "name": "test_create_hosted_constraint_for_computation",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_create_capacity_constraint_for_agent": {
            "name": "test_create_capacity_constraint_for_agent",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "test_create_hosting_constraint_for_agent": {
            "name": "test_create_hosting_constraint_for_agent",
            "location": 79,
            "return": [],
            "arguments": {}
        },
        "test_create_comm_constraint_for_agent_single_var": {
            "name": "test_create_comm_constraint_for_agent_single_var",
            "location": 102,
            "return": [],
            "arguments": {}
        },
        "test_create_capacity_constraint_for_agent.footprint": {
            "name": "footprint",
            "location": 62,
            "return": [],
            "arguments": {
                "comp_name": []
            }
        },
        "test_create_hosting_constraint_for_agent.hosting_cost_a1": {
            "name": "hosting_cost_a1",
            "location": 84,
            "return": [],
            "arguments": {
                "comp_name": []
            }
        },
        "test_create_comm_constraint_for_agent_single_var.comm": {
            "name": "comm",
            "location": 113,
            "return": [],
            "arguments": {
                "com1": [],
                "comp2": [],
                "agt2": []
            }
        }
    },
    "pyDcop-master/tests/unit/test_reparation_removal.py": {
        "ReparationMessagesTests.setUp": {
            "name": "setUp",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReparationMessagesTests.test_orphaned_computation": {
            "name": "test_orphaned_computation",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReparationMessagesTests.test_removal_candidate_agents": {
            "name": "test_removal_candidate_agents",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReparationMessagesTests.test_removal_candidate_computations_for_agt": {
            "name": "test_removal_candidate_computations_for_agt",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReparationMessagesTests.test_removal_candidate_computation_info": {
            "name": "test_removal_candidate_computation_info",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReparationMessagesTests.test_removal_candidate_agt_info": {
            "name": "test_removal_candidate_agt_info",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyDcop-master/tests/unit/test_replication_dist_ucs_hostingcosts.py": {
        "test_tracker_add_computations": {
            "name": "test_tracker_add_computations",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_tracker_add_computation_several_time_must_increase_count": {
            "name": "test_tracker_add_computation_several_time_must_increase_count",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "test_tracker_remove_computation_must_decrease_count": {
            "name": "test_tracker_remove_computation_must_decrease_count",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "test_tracker_when_reaching_0_computation_is_removed": {
            "name": "test_tracker_when_reaching_0_computation_is_removed",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "test_serialization_message": {
            "name": "test_serialization_message",
            "location": 85,
            "return": [],
            "arguments": {}
        },
        "test_unserialization_msg": {
            "name": "test_unserialization_msg",
            "location": 98,
            "return": [],
            "arguments": {}
        }
    },
    "pyDcop-master/tests/unit/test_replication_path_utils.py": {
        "test_path_head": {
            "name": "test_path_head",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "test_path_iter": {
            "name": "test_path_iter",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "test_path_last": {
            "name": "test_path_last",
            "location": 65,
            "return": [],
            "arguments": {}
        },
        "test_path_before_last": {
            "name": "test_path_before_last",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "test_filter_missing_agents_paths": {
            "name": "test_filter_missing_agents_paths",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "test_filter_missing_agents_paths_2": {
            "name": "test_filter_missing_agents_paths_2",
            "location": 99,
            "return": [],
            "arguments": {}
        },
        "test_bench_filter_missing_agents_paths": {
            "name": "test_bench_filter_missing_agents_paths",
            "location": 123,
            "return": [],
            "arguments": {
                "benchmark": []
            }
        },
        "test_path_serialization": {
            "name": "test_path_serialization",
            "location": 150,
            "return": [],
            "arguments": {}
        },
        "test_path_unserialize": {
            "name": "test_path_unserialize",
            "location": 160,
            "return": [],
            "arguments": {}
        },
        "test_remove_path": {
            "name": "test_remove_path",
            "location": 197,
            "return": [],
            "arguments": {}
        },
        "test_remove_path_bench": {
            "name": "test_remove_path_bench",
            "location": 221,
            "return": [],
            "arguments": {
                "benchmark": []
            }
        },
        "test_pathtable_serialize": {
            "name": "test_pathtable_serialize",
            "location": 248,
            "return": [],
            "arguments": {}
        },
        "test_pathtable_unserialize": {
            "name": "test_pathtable_unserialize",
            "location": 259,
            "return": [],
            "arguments": {}
        },
        "test_bench_dict_vs_list": {
            "name": "test_bench_dict_vs_list",
            "location": 272,
            "return": [],
            "arguments": {
                "benchmark": []
            }
        },
        "test_affordable_path_from": {
            "name": "test_affordable_path_from",
            "location": 319,
            "return": [],
            "arguments": {}
        },
        "test_bench_affordable_path_from": {
            "name": "test_bench_affordable_path_from",
            "location": 340,
            "return": [],
            "arguments": {
                "benchmark": []
            }
        },
        "test_2": {
            "name": "test_2",
            "location": 367,
            "return": [],
            "arguments": {}
        },
        "test_bench_filter_missing_agents_paths.to_bench": {
            "name": "to_bench",
            "location": 124,
            "return": [],
            "arguments": {}
        },
        "test_remove_path_bench.to_bench": {
            "name": "to_bench",
            "location": 222,
            "return": [],
            "arguments": {}
        },
        "test_bench_dict_vs_list.iterations_dict": {
            "name": "iterations_dict",
            "location": 273,
            "return": [],
            "arguments": {}
        },
        "test_bench_dict_vs_list.iterations_list": {
            "name": "iterations_list",
            "location": 293,
            "return": [],
            "arguments": {}
        },
        "test_bench_affordable_path_from.to_bench": {
            "name": "to_bench",
            "location": 357,
            "return": [],
            "arguments": {}
        }
    },
    "pyDcop-master/tests/unit/test_utils_expressionfunction.py": {
        "test_type_error_on_incomplete_assignment": {
            "name": "test_type_error_on_incomplete_assignment",
            "location": 177,
            "return": [],
            "arguments": {}
        },
        "test_type_error_on_excessive_assignment": {
            "name": "test_type_error_on_excessive_assignment",
            "location": 184,
            "return": [],
            "arguments": {}
        },
        "test_analyse_ast_simple_expr_no_variable": {
            "name": "test_analyse_ast_simple_expr_no_variable",
            "location": 191,
            "return": [],
            "arguments": {}
        },
        "test_analyse_ast_simple_expr_one_variable": {
            "name": "test_analyse_ast_simple_expr_one_variable",
            "location": 197,
            "return": [],
            "arguments": {}
        },
        "test_analyse_ast_simple_expr_two_variable": {
            "name": "test_analyse_ast_simple_expr_two_variable",
            "location": 203,
            "return": [],
            "arguments": {}
        },
        "test_analyse_ast_simple_if_expr": {
            "name": "test_analyse_ast_simple_if_expr",
            "location": 209,
            "return": [],
            "arguments": {}
        },
        "test_analyse_ast_func_no_variable": {
            "name": "test_analyse_ast_func_no_variable",
            "location": 215,
            "return": [],
            "arguments": {}
        },
        "test_analyse_ast_func_one_variable": {
            "name": "test_analyse_ast_func_one_variable",
            "location": 224,
            "return": [],
            "arguments": {}
        },
        "test_analyse_ast_func_two_variable": {
            "name": "test_analyse_ast_func_two_variable",
            "location": 233,
            "return": [],
            "arguments": {}
        },
        "test_multiline_expression_starting_with_newline": {
            "name": "test_multiline_expression_starting_with_newline",
            "location": 242,
            "return": [],
            "arguments": {}
        },
        "test_multiline_expression_no_newline_at_start": {
            "name": "test_multiline_expression_no_newline_at_start",
            "location": 250,
            "return": [],
            "arguments": {}
        },
        "test_multiline_expression_one_var": {
            "name": "test_multiline_expression_one_var",
            "location": 265,
            "return": [],
            "arguments": {}
        },
        "test_multiline_expression_with_import": {
            "name": "test_multiline_expression_with_import",
            "location": 280,
            "return": [],
            "arguments": {}
        },
        "test_multiline_expression_with_fromimport": {
            "name": "test_multiline_expression_with_fromimport",
            "location": 291,
            "return": [],
            "arguments": {}
        },
        "TestExpressionFunction.test_callable": {
            "name": "test_callable",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpressionFunction.test_simple_math_expression": {
            "name": "test_simple_math_expression",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpressionFunction.test_oneline_python_expression": {
            "name": "test_oneline_python_expression",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpressionFunction.test_complex_oneline_exp": {
            "name": "test_complex_oneline_exp",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpressionFunction.test_variable_names": {
            "name": "test_variable_names",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpressionFunction.test_should_work_with_partial": {
            "name": "test_should_work_with_partial",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpressionFunction.test_non_numeric_variable": {
            "name": "test_non_numeric_variable",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpressionFunction.test_str_with_function_call": {
            "name": "test_str_with_function_call",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpressionFunction.test_raise_on_syntax_error": {
            "name": "test_raise_on_syntax_error",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpressionFunction.test_simple_repr": {
            "name": "test_simple_repr",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpressionFunction.test_from_simple_repr": {
            "name": "test_from_simple_repr",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpressionFunction.test_partial": {
            "name": "test_partial",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpressionFunction.test_fixed_vars": {
            "name": "test_fixed_vars",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpressionFunction.test_simple_repr_on_partial": {
            "name": "test_simple_repr_on_partial",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpressionFunction.test_from_repr_on_partial": {
            "name": "test_from_repr_on_partial",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpressionFunction.test_hash": {
            "name": "test_hash",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpressionFunction.test_hash_fixed_vars": {
            "name": "test_hash_fixed_vars",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyDcop-master/tests/unit/test_utils_simplerepr.py": {
        "A.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "attr1": [],
                "attr2": []
            }
        },
        "TestAttrHaveSameNameAsInitParams.test_simple_attr_only": {
            "name": "test_simple_attr_only",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttrHaveSameNameAsInitParams.test_simple_attr_only_with_bool": {
            "name": "test_simple_attr_only_with_bool",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttrHaveSameNameAsInitParams.test_simple_attr_only_with_None": {
            "name": "test_simple_attr_only_with_None",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttrHaveSameNameAsInitParams.test_from_repr_simple_attr_only": {
            "name": "test_from_repr_simple_attr_only",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttrHaveSameNameAsInitParams.test_list_attr": {
            "name": "test_list_attr",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttrHaveSameNameAsInitParams.test_from_repr_list_attr": {
            "name": "test_from_repr_list_attr",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttrHaveSameNameAsInitParams.test_dict_attr": {
            "name": "test_dict_attr",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttrHaveSameNameAsInitParams.test_from_repr_dist_attr": {
            "name": "test_from_repr_dist_attr",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttrHaveSameNameAsInitParams.test_object_attr": {
            "name": "test_object_attr",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttrHaveSameNameAsInitParams.test_from_repr_object_attr": {
            "name": "test_from_repr_object_attr",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttrHaveSameNameAsInitParams.test_list_of_objects": {
            "name": "test_list_of_objects",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttrHaveSameNameAsInitParams.test_from_repr_list_of_objects": {
            "name": "test_from_repr_list_of_objects",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttrHaveSameNameAsInitParams.test_dict_of_objects": {
            "name": "test_dict_of_objects",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttrHaveSameNameAsInitParams.test_composite_list_dict": {
            "name": "test_composite_list_dict",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttrHaveSameNameAsInitParams.test_raise_when_object_does_not_use_mixin": {
            "name": "test_raise_when_object_does_not_use_mixin",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttrHaveSameNameAsInitParams.test_raise_when_no_corresponding_attribute": {
            "name": "test_raise_when_no_corresponding_attribute",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttrHaveSameNameAsInitParams.test_mapping_for_corresponding_attribute": {
            "name": "test_mapping_for_corresponding_attribute",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttrHaveSameNameAsInitParams.test_tuple_simple_repr": {
            "name": "test_tuple_simple_repr",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttrHaveSameNameAsInitParams.test_tuple_from_repr": {
            "name": "test_tuple_from_repr",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttrHaveSameNameAsInitParams.test_namedtuple": {
            "name": "test_namedtuple",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttrHaveSameNameAsInitParams.test_namedtuple_complex": {
            "name": "test_namedtuple_complex",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttrHaveSameNameAsInitParams.test_raise_when_object_does_not_use_mixin.NoMixin.__init__": {
            "name": "__init__",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "a1": []
            }
        },
        "TestAttrHaveSameNameAsInitParams.test_raise_when_no_corresponding_attribute.NoCorrespondingAttr.__init__": {
            "name": "__init__",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "a1": []
            }
        },
        "TestAttrHaveSameNameAsInitParams.test_mapping_for_corresponding_attribute.MappingAttr.__init__": {
            "name": "__init__",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "a1": []
            }
        }
    },
    "pyDcop-master/tests/unit/test_utils_various.py": {
        "FuncArgsTests.test_one_arg": {
            "name": "test_one_arg",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncArgsTests.test_two_arg": {
            "name": "test_two_arg",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncArgsTests.test_one_partial": {
            "name": "test_one_partial",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncArgsTests.test_one_partial_twice": {
            "name": "test_one_partial_twice",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncArgsTests.test_lambda": {
            "name": "test_lambda",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncArgsTests.test_expression_function": {
            "name": "test_expression_function",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncArgsTests.test_one_arg.f": {
            "name": "f",
            "location": 42,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "FuncArgsTests.test_two_arg.f": {
            "name": "f",
            "location": 50,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "FuncArgsTests.test_one_partial.f": {
            "name": "f",
            "location": 57,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": []
            }
        },
        "FuncArgsTests.test_one_partial_twice.f": {
            "name": "f",
            "location": 70,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": []
            }
        }
    },
    "pyDcop-master/tests/unit/__init__.py": {}
}
{
    "pydocstyle-master/setup.py": {},
    "pydocstyle-master/docs/conf.py": {
        "generate_error_code_table": {
            "name": "generate_error_code_table",
            "location": 268,
            "return": [],
            "arguments": {}
        }
    },
    "pydocstyle-master/src/__init__.py": {},
    "pydocstyle-master/src/pydocstyle/checker.py": {
        "check_for": {
            "name": "check_for",
            "location": 39,
            "return": [],
            "arguments": {
                "kind": [],
                "terminal": []
            }
        },
        "check": {
            "name": "check",
            "location": 1084,
            "return": [],
            "arguments": {
                "filenames": [],
                "select": [],
                "ignore": [],
                "ignore_decorators": [],
                "property_decorators": [],
                "ignore_inline_noqa": []
            }
        },
        "is_ascii": {
            "name": "is_ascii",
            "location": 1158,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "leading_space": {
            "name": "leading_space",
            "location": 1163,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "get_leading_words": {
            "name": "get_leading_words",
            "location": 1168,
            "return": [],
            "arguments": {
                "line": []
            }
        },
        "is_def_arg_private": {
            "name": "is_def_arg_private",
            "location": 1178,
            "return": [],
            "arguments": {
                "arg_name": []
            }
        },
        "get_function_args": {
            "name": "get_function_args",
            "location": 1183,
            "return": [],
            "arguments": {
                "function_source": []
            }
        },
        "check_for.decorator": {
            "name": "decorator",
            "location": 40,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "ConventionChecker.check_source": {
            "name": "check_source",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "filename": [],
                "ignore_decorators": [],
                "property_decorators": [],
                "ignore_inline_noqa": []
            }
        },
        "ConventionChecker.checks": {
            "name": "checks",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConventionChecker.check_docstring_missing": {
            "name": "check_docstring_missing",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "definition": [],
                "docstring": []
            }
        },
        "ConventionChecker.check_docstring_empty": {
            "name": "check_docstring_empty",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "definition": [],
                "docstring": []
            }
        },
        "ConventionChecker.check_one_liners": {
            "name": "check_one_liners",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "definition": [],
                "docstring": []
            }
        },
        "ConventionChecker.check_no_blank_before": {
            "name": "check_no_blank_before",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "function": [],
                "docstring": []
            }
        },
        "ConventionChecker.check_blank_before_after_class": {
            "name": "check_blank_before_after_class",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "class_": [],
                "docstring": []
            }
        },
        "ConventionChecker.check_blank_after_summary": {
            "name": "check_blank_after_summary",
            "location": 314,
            "return": [],
            "arguments": {
                "self": [],
                "definition": [],
                "docstring": []
            }
        },
        "ConventionChecker._get_docstring_indent": {
            "name": "_get_docstring_indent",
            "location": 333,
            "return": [],
            "arguments": {
                "definition": [],
                "docstring": []
            }
        },
        "ConventionChecker.check_indent": {
            "name": "check_indent",
            "location": 340,
            "return": [],
            "arguments": {
                "self": [],
                "definition": [],
                "docstring": []
            }
        },
        "ConventionChecker.check_newline_after_last_paragraph": {
            "name": "check_newline_after_last_paragraph",
            "location": 368,
            "return": [],
            "arguments": {
                "self": [],
                "definition": [],
                "docstring": []
            }
        },
        "ConventionChecker.check_surrounding_whitespaces": {
            "name": "check_surrounding_whitespaces",
            "location": 386,
            "return": [],
            "arguments": {
                "self": [],
                "definition": [],
                "docstring": []
            }
        },
        "ConventionChecker.check_multi_line_summary_start": {
            "name": "check_multi_line_summary_start",
            "location": 398,
            "return": [],
            "arguments": {
                "self": [],
                "definition": [],
                "docstring": []
            }
        },
        "ConventionChecker.check_triple_double_quotes": {
            "name": "check_triple_double_quotes",
            "location": 426,
            "return": [],
            "arguments": {
                "self": [],
                "definition": [],
                "docstring": []
            }
        },
        "ConventionChecker.check_backslashes": {
            "name": "check_backslashes",
            "location": 453,
            "return": [],
            "arguments": {
                "self": [],
                "definition": [],
                "docstring": []
            }
        },
        "ConventionChecker._check_ends_with": {
            "name": "_check_ends_with",
            "location": 474,
            "return": [],
            "arguments": {
                "docstring": [],
                "chars": [],
                "violation": []
            }
        },
        "ConventionChecker.check_ends_with_period": {
            "name": "check_ends_with_period",
            "location": 488,
            "return": [],
            "arguments": {
                "self": [],
                "definition": [],
                "docstring": []
            }
        },
        "ConventionChecker.check_ends_with_punctuation": {
            "name": "check_ends_with_punctuation",
            "location": 497,
            "return": [],
            "arguments": {
                "self": [],
                "definition": [],
                "docstring": []
            }
        },
        "ConventionChecker.check_imperative_mood": {
            "name": "check_imperative_mood",
            "location": 509,
            "return": [],
            "arguments": {
                "self": [],
                "function": [],
                "docstring": []
            }
        },
        "ConventionChecker.check_no_signature": {
            "name": "check_no_signature",
            "location": 540,
            "return": [],
            "arguments": {
                "self": [],
                "function": [],
                "docstring": []
            }
        },
        "ConventionChecker.check_capitalized": {
            "name": "check_capitalized",
            "location": 553,
            "return": [],
            "arguments": {
                "self": [],
                "function": [],
                "docstring": []
            }
        },
        "ConventionChecker.check_if_needed": {
            "name": "check_if_needed",
            "location": 570,
            "return": [],
            "arguments": {
                "self": [],
                "function": [],
                "docstring": []
            }
        },
        "ConventionChecker.check_starts_with_this": {
            "name": "check_starts_with_this",
            "location": 582,
            "return": [],
            "arguments": {
                "self": [],
                "function": [],
                "docstring": []
            }
        },
        "ConventionChecker._is_docstring_section": {
            "name": "_is_docstring_section",
            "location": 601,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "ConventionChecker._check_blanks_and_section_underline": {
            "name": "_check_blanks_and_section_underline",
            "location": 661,
            "return": [],
            "arguments": {
                "cls": [],
                "section_name": [],
                "context": [],
                "indentation": []
            }
        },
        "ConventionChecker._check_common_section": {
            "name": "_check_common_section",
            "location": 729,
            "return": [],
            "arguments": {
                "cls": [],
                "docstring": [],
                "definition": [],
                "context": [],
                "valid_section_names": []
            }
        },
        "ConventionChecker._check_numpy_section": {
            "name": "_check_numpy_section",
            "location": 770,
            "return": [],
            "arguments": {
                "cls": [],
                "docstring": [],
                "definition": [],
                "context": []
            }
        },
        "ConventionChecker._check_parameters_section": {
            "name": "_check_parameters_section",
            "location": 794,
            "return": [],
            "arguments": {
                "docstring": [],
                "definition": [],
                "context": []
            }
        },
        "ConventionChecker._check_args_section": {
            "name": "_check_args_section",
            "location": 842,
            "return": [],
            "arguments": {
                "docstring": [],
                "definition": [],
                "context": []
            }
        },
        "ConventionChecker._check_missing_args": {
            "name": "_check_missing_args",
            "location": 888,
            "return": [],
            "arguments": {
                "docstring_args": [],
                "definition": []
            }
        },
        "ConventionChecker._check_google_section": {
            "name": "_check_google_section",
            "location": 917,
            "return": [],
            "arguments": {
                "cls": [],
                "docstring": [],
                "definition": [],
                "context": []
            }
        },
        "ConventionChecker._get_section_contexts": {
            "name": "_get_section_contexts",
            "location": 943,
            "return": [],
            "arguments": {
                "lines": [],
                "valid_section_names": []
            }
        },
        "ConventionChecker._check_numpy_sections": {
            "name": "_check_numpy_sections",
            "location": 1012,
            "return": [],
            "arguments": {
                "self": [],
                "lines": [],
                "definition": [],
                "docstring": []
            }
        },
        "ConventionChecker._check_google_sections": {
            "name": "_check_google_sections",
            "location": 1039,
            "return": [],
            "arguments": {
                "self": [],
                "lines": [],
                "definition": [],
                "docstring": []
            }
        },
        "ConventionChecker.check_docstring_sections": {
            "name": "check_docstring_sections",
            "location": 1063,
            "return": [],
            "arguments": {
                "self": [],
                "definition": [],
                "docstring": []
            }
        },
        "ConventionChecker._get_section_contexts._suspected_as_section": {
            "name": "_suspected_as_section",
            "location": 959,
            "return": [],
            "arguments": {
                "_line": []
            }
        }
    },
    "pydocstyle-master/src/pydocstyle/cli.py": {
        "run_pydocstyle": {
            "name": "run_pydocstyle",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "setup_stream_handlers": {
            "name": "setup_stream_handlers",
            "location": 82,
            "return": [],
            "arguments": {
                "conf": []
            }
        },
        "setup_stream_handlers.StdoutFilter.filter": {
            "name": "filter",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        }
    },
    "pydocstyle-master/src/pydocstyle/config.py": {
        "check_initialized": {
            "name": "check_initialized",
            "location": 22,
            "return": [],
            "arguments": {
                "method": []
            }
        },
        "check_initialized._decorator": {
            "name": "_decorator",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TomlParser.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TomlParser.read": {
            "name": "read",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "filenames": [],
                "encoding": []
            }
        },
        "TomlParser._get_section": {
            "name": "_get_section",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "section": [],
                "allow_none": []
            }
        },
        "TomlParser.has_section": {
            "name": "has_section",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "section": []
            }
        },
        "TomlParser.options": {
            "name": "options",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "section": []
            }
        },
        "TomlParser.get": {
            "name": "get",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "section": [],
                "option": []
            }
        },
        "TomlParser.getboolean": {
            "name": "getboolean",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "section": [],
                "option": []
            }
        },
        "TomlParser.getint": {
            "name": "getint",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "section": [],
                "option": []
            }
        },
        "ConfigurationParser.__init__": {
            "name": "__init__",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigurationParser.get_default_run_configuration": {
            "name": "get_default_run_configuration",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigurationParser.parse": {
            "name": "parse",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigurationParser.get_user_run_configuration": {
            "name": "get_user_run_configuration",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigurationParser.get_files_to_check": {
            "name": "get_files_to_check",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigurationParser._get_config_by_discovery": {
            "name": "_get_config_by_discovery",
            "location": 315,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ConfigurationParser._get_config": {
            "name": "_get_config",
            "location": 357,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ConfigurationParser._get_node_dir": {
            "name": "_get_node_dir",
            "location": 429,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "ConfigurationParser._read_configuration_file": {
            "name": "_read_configuration_file",
            "location": 434,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "ConfigurationParser._merge_configuration": {
            "name": "_merge_configuration",
            "location": 491,
            "return": [],
            "arguments": {
                "self": [],
                "parent_config": [],
                "child_options": []
            }
        },
        "ConfigurationParser._parse_args": {
            "name": "_parse_args",
            "location": 518,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "values": []
            }
        },
        "ConfigurationParser._create_run_config": {
            "name": "_create_run_config",
            "location": 524,
            "return": [],
            "arguments": {
                "options": []
            }
        },
        "ConfigurationParser._create_check_config": {
            "name": "_create_check_config",
            "location": 532,
            "return": [],
            "arguments": {
                "cls": [],
                "options": [],
                "use_defaults": []
            }
        },
        "ConfigurationParser._get_section_name": {
            "name": "_get_section_name",
            "location": 561,
            "return": [],
            "arguments": {
                "cls": [],
                "parser": []
            }
        },
        "ConfigurationParser._get_config_file_in_folder": {
            "name": "_get_config_file_in_folder",
            "location": 570,
            "return": [],
            "arguments": {
                "cls": [],
                "path": []
            }
        },
        "ConfigurationParser._get_exclusive_error_codes": {
            "name": "_get_exclusive_error_codes",
            "location": 589,
            "return": [],
            "arguments": {
                "cls": [],
                "options": []
            }
        },
        "ConfigurationParser._set_add_options": {
            "name": "_set_add_options",
            "location": 606,
            "return": [],
            "arguments": {
                "cls": [],
                "checked_codes": [],
                "options": []
            }
        },
        "ConfigurationParser._expand_error_codes": {
            "name": "_expand_error_codes",
            "location": 612,
            "return": [],
            "arguments": {
                "code_parts": []
            }
        },
        "ConfigurationParser._get_checked_errors": {
            "name": "_get_checked_errors",
            "location": 641,
            "return": [],
            "arguments": {
                "cls": [],
                "options": []
            }
        },
        "ConfigurationParser._validate_options": {
            "name": "_validate_options",
            "location": 652,
            "return": [],
            "arguments": {
                "cls": [],
                "options": []
            }
        },
        "ConfigurationParser._has_exclusive_option": {
            "name": "_has_exclusive_option",
            "location": 679,
            "return": [],
            "arguments": {
                "cls": [],
                "options": []
            }
        },
        "ConfigurationParser._fix_set_options": {
            "name": "_fix_set_options",
            "location": 689,
            "return": [],
            "arguments": {
                "cls": [],
                "options": []
            }
        },
        "ConfigurationParser._create_option_parser": {
            "name": "_create_option_parser",
            "location": 726,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ConfigurationParser.get_files_to_check._get_matches": {
            "name": "_get_matches",
            "location": 260,
            "return": [],
            "arguments": {
                "conf": []
            }
        },
        "ConfigurationParser.get_files_to_check._get_ignore_decorators": {
            "name": "_get_ignore_decorators",
            "location": 266,
            "return": [],
            "arguments": {
                "conf": []
            }
        },
        "ConfigurationParser.get_files_to_check._get_property_decorators": {
            "name": "_get_property_decorators",
            "location": 272,
            "return": [],
            "arguments": {
                "conf": []
            }
        },
        "ConfigurationParser._fix_set_options._get_set": {
            "name": "_get_set",
            "location": 694,
            "return": [],
            "arguments": {
                "value_str": []
            }
        }
    },
    "pydocstyle-master/src/pydocstyle/parser.py": {
        "humanize": {
            "name": "humanize",
            "location": 48,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "ParseError.__str__": {
            "name": "__str__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnexpectedTokenError.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "token": [],
                "expected_kind": []
            }
        },
        "UnexpectedTokenError.__str__": {
            "name": "__str__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Value.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Value.__hash__": {
            "name": "__hash__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Value.__eq__": {
            "name": "__eq__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Value.__repr__": {
            "name": "__repr__",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Definition.__iter__": {
            "name": "__iter__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Definition.error_lineno": {
            "name": "error_lineno",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Definition._publicity": {
            "name": "_publicity",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Definition.source": {
            "name": "source",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Definition.__str__": {
            "name": "__str__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Module.is_public": {
            "name": "is_public",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Module._is_inside_private_package": {
            "name": "_is_inside_private_package",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Module._is_public_name": {
            "name": "_is_public_name",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "module_name": []
            }
        },
        "Module._is_private_name": {
            "name": "_is_private_name",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "module_name": []
            }
        },
        "Module.__str__": {
            "name": "__str__",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Function.is_public": {
            "name": "is_public",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Function.is_overload": {
            "name": "is_overload",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Function.is_property": {
            "name": "is_property",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "property_decorator_names": []
            }
        },
        "Function.is_test": {
            "name": "is_test",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Method.is_magic": {
            "name": "is_magic",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Method.is_init": {
            "name": "is_init",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Method.is_public": {
            "name": "is_public",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Method.is_static": {
            "name": "is_static",
            "location": 278,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NestedClass.is_public": {
            "name": "is_public",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Docstring.__new__": {
            "name": "__new__",
            "location": 321,
            "return": [],
            "arguments": {
                "cls": [],
                "v": [],
                "start": [],
                "end": []
            }
        },
        "Docstring.__init__": {
            "name": "__init__",
            "location": 324,
            "return": [],
            "arguments": {
                "self": [],
                "v": [],
                "start": [],
                "end": []
            }
        },
        "AllError.__init__": {
            "name": "__init__",
            "location": 335,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "TokenStream.__init__": {
            "name": "__init__",
            "location": 360,
            "return": [],
            "arguments": {
                "self": [],
                "filelike": []
            }
        },
        "TokenStream.move": {
            "name": "move",
            "location": 367,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenStream._next_from_generator": {
            "name": "_next_from_generator",
            "location": 380,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenStream.__iter__": {
            "name": "__iter__",
            "location": 387,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenKind.__repr__": {
            "name": "__repr__",
            "location": 397,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Token.__init__": {
            "name": "__init__",
            "location": 404,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Token.__str__": {
            "name": "__str__",
            "location": 408,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse": {
            "name": "parse",
            "location": 415,
            "return": [],
            "arguments": {
                "self": [],
                "filelike": [],
                "filename": []
            }
        },
        "Parser.__call__": {
            "name": "__call__",
            "location": 433,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.consume": {
            "name": "consume",
            "location": 440,
            "return": [],
            "arguments": {
                "self": [],
                "kind": []
            }
        },
        "Parser.leapfrog": {
            "name": "leapfrog",
            "location": 446,
            "return": [],
            "arguments": {
                "self": [],
                "kind": [],
                "value": []
            }
        },
        "Parser.parse_docstring": {
            "name": "parse_docstring",
            "location": 460,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_decorators": {
            "name": "parse_decorators",
            "location": 478,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_definitions": {
            "name": "parse_definitions",
            "location": 530,
            "return": [],
            "arguments": {
                "self": [],
                "class_": [],
                "dunder_all": []
            }
        },
        "Parser.parse_dunder_all": {
            "name": "parse_dunder_all",
            "location": 561,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_module": {
            "name": "parse_module",
            "location": 629,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_definition": {
            "name": "parse_definition",
            "location": 661,
            "return": [],
            "arguments": {
                "self": [],
                "class_": []
            }
        },
        "Parser.parse_skip_comment": {
            "name": "parse_skip_comment",
            "location": 727,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.check_current": {
            "name": "check_current",
            "location": 750,
            "return": [],
            "arguments": {
                "self": [],
                "kind": [],
                "value": []
            }
        },
        "Parser.parse_from_import_statement": {
            "name": "parse_from_import_statement",
            "location": 768,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser._parse_from_import_source": {
            "name": "_parse_from_import_source",
            "location": 778,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser._parse_from_import_names": {
            "name": "_parse_from_import_names",
            "location": 800,
            "return": [],
            "arguments": {
                "self": [],
                "is_future_import": []
            }
        },
        "Definition.source.is_empty_or_comment": {
            "name": "is_empty_or_comment",
            "location": 122,
            "return": [],
            "arguments": {
                "line": []
            }
        }
    },
    "pydocstyle-master/src/pydocstyle/utils.py": {
        "is_blank": {
            "name": "is_blank",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "pairwise": {
            "name": "pairwise",
            "location": 21,
            "return": [
                "Iterable[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "iterable": [
                    "Iterable"
                ],
                "default_value": [
                    "Any"
                ]
            }
        },
        "common_prefix_length": {
            "name": "common_prefix_length",
            "location": 34,
            "return": [
                "int"
            ],
            "arguments": {
                "a": [
                    "str"
                ],
                "b": [
                    "str"
                ]
            }
        },
        "strip_non_alphanumeric": {
            "name": "strip_non_alphanumeric",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        }
    },
    "pydocstyle-master/src/pydocstyle/violations.py": {
        "Error.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str"
                ],
                "short_desc": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        },
        "Error.set_context": {
            "name": "set_context",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "definition": [
                    "Definition"
                ],
                "explanation": [
                    "str"
                ]
            }
        },
        "Error.message": {
            "name": "message",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Error.lines": {
            "name": "lines",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Error.__str__": {
            "name": "__str__",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Error.__repr__": {
            "name": "__repr__",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Error.__lt__": {
            "name": "__lt__",
            "location": 111,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'Error'"
                ]
            }
        },
        "ErrorRegistry.create_group": {
            "name": "create_group",
            "location": 150,
            "return": [
                "ErrorGroup"
            ],
            "arguments": {
                "cls": [],
                "prefix": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "ErrorRegistry.get_error_codes": {
            "name": "get_error_codes",
            "location": 157,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ErrorRegistry.to_rst": {
            "name": "to_rst",
            "location": 164,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "AttrDict.__getattr__": {
            "name": "__getattr__",
            "location": 425,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        },
        "ErrorRegistry.ErrorGroup.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "ErrorRegistry.ErrorGroup.create_error": {
            "name": "create_error",
            "location": 135,
            "return": [
                "Callable[([Iterable[str]], Error)]"
            ],
            "arguments": {
                "self": [],
                "error_code": [
                    "str"
                ],
                "error_desc": [
                    "str"
                ],
                "error_context": [
                    "Optional[str]"
                ]
            }
        }
    },
    "pydocstyle-master/src/pydocstyle/wordlists.py": {
        "load_wordlist": {
            "name": "load_wordlist",
            "location": 20,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "make_imperative_verbs_dict": {
            "name": "make_imperative_verbs_dict",
            "location": 38,
            "return": [
                "Dict[(str, Set[str])]"
            ],
            "arguments": {
                "wordlist": [
                    "Iterator[str]"
                ]
            }
        }
    },
    "pydocstyle-master/src/pydocstyle/__init__.py": {},
    "pydocstyle-master/src/pydocstyle/__main__.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pydocstyle-master/src/tests/error_tests.py": {
        "test_message_without_context": {
            "name": "test_message_without_context",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_message_with_context": {
            "name": "test_message_with_context",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_message_with_insufficient_parameters": {
            "name": "test_message_with_insufficient_parameters",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "test_lines": {
            "name": "test_lines",
            "location": 31,
            "return": [],
            "arguments": {}
        }
    },
    "pydocstyle-master/src/tests/parser_test.py": {
        "test_function": {
            "name": "test_function",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "test_simple_fstring": {
            "name": "test_simple_fstring",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "test_fstring_with_args": {
            "name": "test_fstring_with_args",
            "location": 82,
            "return": [],
            "arguments": {}
        },
        "test_decorated_function": {
            "name": "test_decorated_function",
            "location": 117,
            "return": [],
            "arguments": {}
        },
        "test_nested_function": {
            "name": "test_nested_function",
            "location": 146,
            "return": [],
            "arguments": {}
        },
        "test_conditional_nested_function": {
            "name": "test_conditional_nested_function",
            "location": 190,
            "return": [],
            "arguments": {}
        },
        "test_doubly_nested_function": {
            "name": "test_doubly_nested_function",
            "location": 233,
            "return": [],
            "arguments": {}
        },
        "test_class": {
            "name": "test_class",
            "location": 294,
            "return": [],
            "arguments": {}
        },
        "test_public_method": {
            "name": "test_public_method",
            "location": 319,
            "return": [],
            "arguments": {}
        },
        "test_private_method": {
            "name": "test_private_method",
            "location": 364,
            "return": [],
            "arguments": {}
        },
        "test_magic_method": {
            "name": "test_magic_method",
            "location": 409,
            "return": [],
            "arguments": {}
        },
        "test_nested_class": {
            "name": "test_nested_class",
            "location": 450,
            "return": [],
            "arguments": {}
        },
        "test_raise_from": {
            "name": "test_raise_from",
            "location": 492,
            "return": [],
            "arguments": {}
        },
        "test_simple_matrix_multiplication": {
            "name": "test_simple_matrix_multiplication",
            "location": 499,
            "return": [],
            "arguments": {}
        },
        "test_matrix_multiplication_with_decorators": {
            "name": "test_matrix_multiplication_with_decorators",
            "location": 545,
            "return": [],
            "arguments": {
                "code": []
            }
        },
        "test_module_publicity_with_public_path": {
            "name": "test_module_publicity_with_public_path",
            "location": 566,
            "return": [],
            "arguments": {
                "public_path": []
            }
        },
        "test_module_publicity_with_private_paths": {
            "name": "test_module_publicity_with_private_paths",
            "location": 595,
            "return": [],
            "arguments": {
                "private_path": []
            }
        },
        "test_module_publicity_with_different_sys_path": {
            "name": "test_module_publicity_with_different_sys_path",
            "location": 615,
            "return": [],
            "arguments": {
                "syspath": [],
                "is_public": [],
                "monkeypatch": []
            }
        },
        "test_complex_module": {
            "name": "test_complex_module",
            "location": 629,
            "return": [],
            "arguments": {}
        },
        "test_dunder_all": {
            "name": "test_dunder_all",
            "location": 701,
            "return": [],
            "arguments": {
                "code": []
            }
        },
        "test_single_value_dunder_all": {
            "name": "test_single_value_dunder_all",
            "location": 708,
            "return": [],
            "arguments": {}
        },
        "test_indeterminable_dunder_all": {
            "name": "test_indeterminable_dunder_all",
            "location": 761,
            "return": [],
            "arguments": {
                "code": []
            }
        },
        "test_future_import": {
            "name": "test_future_import",
            "location": 799,
            "return": [],
            "arguments": {
                "code": []
            }
        },
        "test_noqa_function": {
            "name": "test_noqa_function",
            "location": 806,
            "return": [],
            "arguments": {}
        },
        "test_invalid_syntax": {
            "name": "test_invalid_syntax",
            "location": 832,
            "return": [],
            "arguments": {
                "code": []
            }
        },
        "test_parsing_function_decorators": {
            "name": "test_parsing_function_decorators",
            "location": 897,
            "return": [],
            "arguments": {
                "code": []
            }
        },
        "test_parsing_method_decorators": {
            "name": "test_parsing_method_decorators",
            "location": 959,
            "return": [],
            "arguments": {
                "code": []
            }
        },
        "CodeSnippet.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "code_string": []
            }
        }
    },
    "pydocstyle-master/src/tests/test_decorators.py": {
        "TestParser.test_parse_class_single_decorator": {
            "name": "test_parse_class_single_decorator",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_parse_class_decorators": {
            "name": "test_parse_class_decorators",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_parse_class_nested_decorator": {
            "name": "test_parse_class_nested_decorator",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_parse_method_single_decorator": {
            "name": "test_parse_method_single_decorator",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_parse_method_decorators": {
            "name": "test_parse_method_decorators",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_parse_function_decorator": {
            "name": "test_parse_function_decorator",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_parse_method_nested_decorator": {
            "name": "test_parse_method_nested_decorator",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMethod.makeMethod": {
            "name": "makeMethod",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "TestMethod.test_is_public_normal": {
            "name": "test_is_public_normal",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMethod.test_is_public_setter": {
            "name": "test_is_public_setter",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMethod.test_is_public_deleter": {
            "name": "test_is_public_deleter",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMethod.test_is_public_trick": {
            "name": "test_is_public_trick",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pydocstyle-master/src/tests/test_definitions.py": {
        "test_complex_file": {
            "name": "test_complex_file",
            "location": 30,
            "return": [],
            "arguments": {
                "test_case": []
            }
        }
    },
    "pydocstyle-master/src/tests/test_integration.py": {
        "install_package": {
            "name": "install_package",
            "location": 125,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "env": {
            "name": "env",
            "location": 142,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "parse_errors": {
            "name": "parse_errors",
            "location": 161,
            "return": [],
            "arguments": {
                "err": []
            }
        },
        "test_pep257_conformance": {
            "name": "test_pep257_conformance",
            "location": 182,
            "return": [],
            "arguments": {}
        },
        "test_ignore_list": {
            "name": "test_ignore_list",
            "location": 195,
            "return": [],
            "arguments": {}
        },
        "test_skip_errors": {
            "name": "test_skip_errors",
            "location": 225,
            "return": [],
            "arguments": {}
        },
        "test_run_as_named_module": {
            "name": "test_run_as_named_module",
            "location": 255,
            "return": [],
            "arguments": {}
        },
        "test_config_file": {
            "name": "test_config_file",
            "location": 273,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_sectionless_config_file": {
            "name": "test_sectionless_config_file",
            "location": 313,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_multiple_lined_config_file": {
            "name": "test_multiple_lined_config_file",
            "location": 344,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_accepts_select_error_code_list": {
            "name": "test_accepts_select_error_code_list",
            "location": 372,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_config_path": {
            "name": "test_config_path",
            "location": 392,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_non_existent_config": {
            "name": "test_non_existent_config",
            "location": 424,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_verbose": {
            "name": "test_verbose",
            "location": 429,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_count": {
            "name": "test_count",
            "location": 443,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_select_cli": {
            "name": "test_select_cli",
            "location": 459,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_select_config": {
            "name": "test_select_config",
            "location": 473,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_add_select_cli": {
            "name": "test_add_select_cli",
            "location": 491,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_add_ignore_cli": {
            "name": "test_add_ignore_cli",
            "location": 510,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_wildcard_add_ignore_cli": {
            "name": "test_wildcard_add_ignore_cli",
            "location": 527,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_ignores_whitespace_in_fixed_option_set": {
            "name": "test_ignores_whitespace_in_fixed_option_set",
            "location": 549,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_accepts_ignore_error_code_list": {
            "name": "test_accepts_ignore_error_code_list",
            "location": 564,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_bad_wildcard_add_ignore_cli": {
            "name": "test_bad_wildcard_add_ignore_cli",
            "location": 574,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_overload_function": {
            "name": "test_overload_function",
            "location": 594,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_overload_method": {
            "name": "test_overload_method",
            "location": 624,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_overload_method_valid": {
            "name": "test_overload_method_valid",
            "location": 655,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_overload_function_valid": {
            "name": "test_overload_function_valid",
            "location": 687,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_overload_nested_function": {
            "name": "test_overload_nested_function",
            "location": 717,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_overload_nested_function_valid": {
            "name": "test_overload_nested_function_valid",
            "location": 747,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_conflicting_select_ignore_config": {
            "name": "test_conflicting_select_ignore_config",
            "location": 777,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_conflicting_select_convention_config": {
            "name": "test_conflicting_select_convention_config",
            "location": 785,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_conflicting_ignore_convention_config": {
            "name": "test_conflicting_ignore_convention_config",
            "location": 793,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_missing_docstring_in_package": {
            "name": "test_missing_docstring_in_package",
            "location": 801,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_illegal_convention": {
            "name": "test_illegal_convention",
            "location": 811,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_empty_select_cli": {
            "name": "test_empty_select_cli",
            "location": 821,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_empty_select_config": {
            "name": "test_empty_select_config",
            "location": 833,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_empty_select_with_added_error": {
            "name": "test_empty_select_with_added_error",
            "location": 846,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_pep257_convention": {
            "name": "test_pep257_convention",
            "location": 862,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_numpy_convention": {
            "name": "test_numpy_convention",
            "location": 898,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_google_convention": {
            "name": "test_google_convention",
            "location": 925,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_config_file_inheritance": {
            "name": "test_config_file_inheritance",
            "location": 966,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_config_file_cumulative_add_ignores": {
            "name": "test_config_file_cumulative_add_ignores",
            "location": 1005,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_config_file_cumulative_add_select": {
            "name": "test_config_file_cumulative_add_select",
            "location": 1048,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_config_file_convention_overrides_select": {
            "name": "test_config_file_convention_overrides_select",
            "location": 1091,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_cli_overrides_config_file": {
            "name": "test_cli_overrides_config_file",
            "location": 1128,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_cli_match_overrides_config_file": {
            "name": "test_cli_match_overrides_config_file",
            "location": 1166,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_config_file_convention_overrides_ignore": {
            "name": "test_config_file_convention_overrides_ignore",
            "location": 1205,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_config_file_ignore_overrides_select": {
            "name": "test_config_file_ignore_overrides_select",
            "location": 1246,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_config_file_nearest_to_checked_file": {
            "name": "test_config_file_nearest_to_checked_file",
            "location": 1290,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_config_file_nearest_match_re": {
            "name": "test_config_file_nearest_match_re",
            "location": 1348,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_syntax_error_multiple_files": {
            "name": "test_syntax_error_multiple_files",
            "location": 1396,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_indented_function": {
            "name": "test_indented_function",
            "location": 1408,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_only_comment_file": {
            "name": "test_only_comment_file",
            "location": 1427,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_comment_plus_docstring_file": {
            "name": "test_comment_plus_docstring_file",
            "location": 1445,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_only_comment_with_noqa_file": {
            "name": "test_only_comment_with_noqa_file",
            "location": 1461,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_comment_with_noqa_plus_docstring_file": {
            "name": "test_comment_with_noqa_plus_docstring_file",
            "location": 1477,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_match_considers_basenames_for_path_args": {
            "name": "test_match_considers_basenames_for_path_args",
            "location": 1494,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "SandboxEnv.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "script_name": [],
                "section_name": [],
                "config_name": []
            }
        },
        "SandboxEnv.write_config": {
            "name": "write_config",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": [],
                "name": []
            }
        },
        "SandboxEnv.open": {
            "name": "open",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "SandboxEnv.get_path": {
            "name": "get_path",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "prefix": []
            }
        },
        "SandboxEnv.makedirs": {
            "name": "makedirs",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "SandboxEnv.invoke": {
            "name": "invoke",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "target": []
            }
        },
        "SandboxEnv.__enter__": {
            "name": "__enter__",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SandboxEnv.__exit__": {
            "name": "__exit__",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SandboxEnv.write_config.convert_value": {
            "name": "convert_value",
            "location": 67,
            "return": [],
            "arguments": {
                "val": []
            }
        }
    },
    "pydocstyle-master/src/tests/test_utils.py": {
        "test_common_prefix": {
            "name": "test_common_prefix",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_no_common_prefix": {
            "name": "test_no_common_prefix",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "test_differ_length": {
            "name": "test_differ_length",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_empty_string": {
            "name": "test_empty_string",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_strip_non_alphanumeric": {
            "name": "test_strip_non_alphanumeric",
            "location": 31,
            "return": [],
            "arguments": {}
        }
    },
    "pydocstyle-master/src/tests/__init__.py": {},
    "pydocstyle-master/src/tests/test_cases/all_import.py": {
        "public_func": {
            "name": "public_func",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "this": {
            "name": "this",
            "location": 16,
            "return": [],
            "arguments": {}
        }
    },
    "pydocstyle-master/src/tests/test_cases/all_import_as.py": {
        "public_func": {
            "name": "public_func",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "private_func": {
            "name": "private_func",
            "location": 17,
            "return": [],
            "arguments": {}
        }
    },
    "pydocstyle-master/src/tests/test_cases/all_import_aux.py": {},
    "pydocstyle-master/src/tests/test_cases/canonical_google_examples.py": {
        "fetch_bigtable_rows": {
            "name": "fetch_bigtable_rows",
            "location": 47,
            "return": [],
            "arguments": {
                "big_table": [],
                "keys": [],
                "other_silly_variable": []
            }
        },
        "SampleClass.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "likes_spam": []
            }
        },
        "SampleClass.public_method": {
            "name": "public_method",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pydocstyle-master/src/tests/test_cases/canonical_numpy_examples.py": {
        "foo": {
            "name": "foo",
            "location": 76,
            "return": [],
            "arguments": {
                "var1": [],
                "var2": [],
                "long_var_name": []
            }
        }
    },
    "pydocstyle-master/src/tests/test_cases/canonical_pep257_examples.py": {
        "kos_root": {
            "name": "kos_root",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "complex": {
            "name": "complex",
            "location": 30,
            "return": [],
            "arguments": {
                "real": [],
                "imag": []
            }
        }
    },
    "pydocstyle-master/src/tests/test_cases/capitalization.py": {
        "not_capitalized": {
            "name": "not_capitalized",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "empty_docstring": {
            "name": "empty_docstring",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "all_caps": {
            "name": "all_caps",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "non_letter_characters": {
            "name": "non_letter_characters",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "more_non_letter_characters": {
            "name": "more_non_letter_characters",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "even_more_non_letter": {
            "name": "even_more_non_letter",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "dash": {
            "name": "dash",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "digit_in_word": {
            "name": "digit_in_word",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "partial_caps": {
            "name": "partial_caps",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "more_partial_caps": {
            "name": "more_partial_caps",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "just_one_more_example": {
            "name": "just_one_more_example",
            "location": 59,
            "return": [],
            "arguments": {}
        }
    },
    "pydocstyle-master/src/tests/test_cases/comment_after_def_bug.py": {
        "should_be_ok": {
            "name": "should_be_ok",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "pydocstyle-master/src/tests/test_cases/expected.py": {
        "Expectation.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Expectation.expect": {
            "name": "expect",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Expectation.expect.decorate": {
            "name": "decorate",
            "location": 12,
            "return": [],
            "arguments": {
                "f": []
            }
        }
    },
    "pydocstyle-master/src/tests/test_cases/functions.py": {
        "func_with_space_before": {
            "name": "func_with_space_before",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "func_with_space_after": {
            "name": "func_with_space_after",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "func_with_inner_func_after": {
            "name": "func_with_inner_func_after",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "func_with_inner_async_func_after": {
            "name": "func_with_inner_async_func_after",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "fake_decorator": {
            "name": "fake_decorator",
            "location": 41,
            "return": [],
            "arguments": {
                "decorated": []
            }
        },
        "func_with_inner_decorated_func_after": {
            "name": "func_with_inner_decorated_func_after",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "func_with_inner_decorated_async_func_after": {
            "name": "func_with_inner_decorated_async_func_after",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "func_with_inner_class_after": {
            "name": "func_with_inner_class_after",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "func_with_weird_backslash": {
            "name": "func_with_weird_backslash",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "func_with_inner_func_after.inner": {
            "name": "inner",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "func_with_inner_decorated_func_after.inner": {
            "name": "inner",
            "location": 50,
            "return": [],
            "arguments": {}
        }
    },
    "pydocstyle-master/src/tests/test_cases/multi_line_summary_start.py": {
        "multi_line_starts_second_line": {
            "name": "multi_line_starts_second_line",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "multi_line_starts_second_line_single_quote": {
            "name": "multi_line_starts_second_line_single_quote",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "multi_line_starts_second_line_raw": {
            "name": "multi_line_starts_second_line_raw",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "multi_line_starts_second_line_upper_raw": {
            "name": "multi_line_starts_second_line_upper_raw",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "multi_line_starts_second_line_raw_single_quote": {
            "name": "multi_line_starts_second_line_raw_single_quote",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "multi_line_starts_second_line_upper_raw_single_quote": {
            "name": "multi_line_starts_second_line_upper_raw_single_quote",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "multi_line_starts_first_line": {
            "name": "multi_line_starts_first_line",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "multi_line_starts_first_line_single_quote": {
            "name": "multi_line_starts_first_line_single_quote",
            "location": 91,
            "return": [],
            "arguments": {}
        },
        "multi_line_starts_first_line_raw": {
            "name": "multi_line_starts_first_line_raw",
            "location": 100,
            "return": [],
            "arguments": {}
        },
        "multi_line_starts_first_line_upper_raw": {
            "name": "multi_line_starts_first_line_upper_raw",
            "location": 110,
            "return": [],
            "arguments": {}
        },
        "multi_line_starts_first_line_raw_single_quote": {
            "name": "multi_line_starts_first_line_raw_single_quote",
            "location": 120,
            "return": [],
            "arguments": {}
        },
        "multi_line_starts_first_line_upper_raw_single_quote": {
            "name": "multi_line_starts_first_line_upper_raw_single_quote",
            "location": 131,
            "return": [],
            "arguments": {}
        }
    },
    "pydocstyle-master/src/tests/test_cases/nested_class.py": {},
    "pydocstyle-master/src/tests/test_cases/noqa.py": {
        "docstring_bad_ignore_all": {
            "name": "docstring_bad_ignore_all",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "docstring_bad_ignore_one": {
            "name": "docstring_bad_ignore_one",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "docstring_ignore_some_violations_but_catch_D401": {
            "name": "docstring_ignore_some_violations_but_catch_D401",
            "location": 22,
            "return": [],
            "arguments": {}
        }
    },
    "pydocstyle-master/src/tests/test_cases/sections.py": {
        "not_capitalized": {
            "name": "not_capitalized",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "superfluous_suffix": {
            "name": "superfluous_suffix",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "no_underline": {
            "name": "no_underline",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "no_underline_and_no_description": {
            "name": "no_underline_and_no_description",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "consecutive_sections": {
            "name": "consecutive_sections",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "blank_line_before_underline": {
            "name": "blank_line_before_underline",
            "location": 84,
            "return": [],
            "arguments": {}
        },
        "bad_underline_length": {
            "name": "bad_underline_length",
            "location": 98,
            "return": [],
            "arguments": {}
        },
        "no_blank_line_after_last_section": {
            "name": "no_blank_line_after_last_section",
            "location": 110,
            "return": [],
            "arguments": {}
        },
        "no_blank_line_before_section": {
            "name": "no_blank_line_before_section",
            "location": 121,
            "return": [],
            "arguments": {}
        },
        "section_overindented": {
            "name": "section_overindented",
            "location": 134,
            "return": [],
            "arguments": {}
        },
        "section_underline_overindented": {
            "name": "section_underline_overindented",
            "location": 146,
            "return": [],
            "arguments": {}
        },
        "section_underline_overindented_and_contentless": {
            "name": "section_underline_overindented_and_contentless",
            "location": 160,
            "return": [],
            "arguments": {}
        },
        "ignore_non_actual_section": {
            "name": "ignore_non_actual_section",
            "location": 169,
            "return": [],
            "arguments": {}
        },
        "section_name_in_first_line": {
            "name": "section_name_in_first_line",
            "location": 186,
            "return": [],
            "arguments": {}
        },
        "multiple_sections": {
            "name": "multiple_sections",
            "location": 206,
            "return": [],
            "arguments": {}
        },
        "false_positive_section_prefix": {
            "name": "false_positive_section_prefix",
            "location": 225,
            "return": [],
            "arguments": {}
        },
        "section_names_as_parameter_names": {
            "name": "section_names_as_parameter_names",
            "location": 236,
            "return": [],
            "arguments": {}
        },
        "valid_google_style_section": {
            "name": "valid_google_style_section",
            "location": 251,
            "return": [],
            "arguments": {}
        },
        "missing_colon_google_style_section": {
            "name": "missing_colon_google_style_section",
            "location": 268,
            "return": [],
            "arguments": {}
        },
        "_test_nested_functions": {
            "name": "_test_nested_functions",
            "location": 280,
            "return": [],
            "arguments": {}
        },
        "test_missing_google_args": {
            "name": "test_missing_google_args",
            "location": 300,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "_private": []
            }
        },
        "test_missing_numpy_args": {
            "name": "test_missing_numpy_args",
            "location": 389,
            "return": [],
            "arguments": {
                "_private_arg": [],
                "x": [],
                "y": []
            }
        },
        "_test_nested_functions.bar": {
            "name": "bar",
            "location": 283,
            "return": [],
            "arguments": {
                "y": []
            }
        },
        "TestGoogle.test_method": {
            "name": "test_method",
            "location": 312,
            "return": [],
            "arguments": {
                "self": [],
                "test": [],
                "another_test": [],
                "_": []
            }
        },
        "TestGoogle.test_missing_args": {
            "name": "test_missing_args",
            "location": 324,
            "return": [],
            "arguments": {
                "self": [],
                "test": [],
                "x": [],
                "y": [],
                "z": [],
                "_private_arg": []
            }
        },
        "TestGoogle.test_missing_args_class_method": {
            "name": "test_missing_args_class_method",
            "location": 336,
            "return": [],
            "arguments": {
                "cls": [],
                "test": [],
                "x": [],
                "y": [],
                "_": [],
                "z": []
            }
        },
        "TestGoogle.test_missing_args_static_method": {
            "name": "test_missing_args_static_method",
            "location": 349,
            "return": [],
            "arguments": {
                "a": [],
                "x": [],
                "y": [],
                "_test": [],
                "z": []
            }
        },
        "TestGoogle.test_missing_docstring": {
            "name": "test_missing_docstring",
            "location": 361,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "TestGoogle.test_hanging_indent": {
            "name": "test_hanging_indent",
            "location": 370,
            "return": [],
            "arguments": {
                "skip": [],
                "verbose": []
            }
        },
        "TestNumpy.test_method": {
            "name": "test_method",
            "location": 404,
            "return": [],
            "arguments": {
                "self": [],
                "test": [],
                "another_test": [],
                "z": [],
                "_": [],
                "x": [],
                "y": [],
                "_private_arg": []
            }
        },
        "TestNumpy.test_missing_args": {
            "name": "test_missing_args",
            "location": 425,
            "return": [],
            "arguments": {
                "self": [],
                "test": [],
                "x": [],
                "y": [],
                "z": [],
                "t": [],
                "_private": []
            }
        },
        "TestNumpy.test_missing_args_class_method": {
            "name": "test_missing_args_class_method",
            "location": 440,
            "return": [],
            "arguments": {
                "cls": [],
                "test": [],
                "x": [],
                "y": [],
                "z": []
            }
        },
        "TestNumpy.test_missing_args_static_method": {
            "name": "test_missing_args_static_method",
            "location": 459,
            "return": [],
            "arguments": {
                "a": [],
                "x": [],
                "y": [],
                "z": [],
                "t": []
            }
        },
        "TestNumpy.test_mixing_numpy_and_google": {
            "name": "test_mixing_numpy_and_google",
            "location": 472,
            "return": [],
            "arguments": {
                "danger": []
            }
        },
        "TestIncorrectIndent.test_incorrect_indent": {
            "name": "test_incorrect_indent",
            "location": 489,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        }
    },
    "pydocstyle-master/src/tests/test_cases/superfluous_quotes.py": {
        "correct_func": {
            "name": "correct_func",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "extra_opening": {
            "name": "extra_opening",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "two_extra_opening": {
            "name": "two_extra_opening",
            "location": 19,
            "return": [],
            "arguments": {}
        }
    },
    "pydocstyle-master/src/tests/test_cases/test.py": {
        "function": {
            "name": "function",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "function_with_nesting": {
            "name": "function_with_nesting",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "overloaded_func": {
            "name": "overloaded_func",
            "location": 110,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "asdlkfasd": {
            "name": "asdlkfasd",
            "location": 123,
            "return": [],
            "arguments": {}
        },
        "leading_space": {
            "name": "leading_space",
            "location": 130,
            "return": [],
            "arguments": {}
        },
        "trailing_space": {
            "name": "trailing_space",
            "location": 136,
            "return": [],
            "arguments": {}
        },
        "trailing_and_leading_space": {
            "name": "trailing_and_leading_space",
            "location": 144,
            "return": [],
            "arguments": {}
        },
        "multi_line_zero_separating_blanks": {
            "name": "multi_line_zero_separating_blanks",
            "location": 194,
            "return": [],
            "arguments": {}
        },
        "multi_line_two_separating_blanks": {
            "name": "multi_line_two_separating_blanks",
            "location": 204,
            "return": [],
            "arguments": {}
        },
        "multi_line_one_separating_blanks": {
            "name": "multi_line_one_separating_blanks",
            "location": 214,
            "return": [],
            "arguments": {}
        },
        "asdfsdf": {
            "name": "asdfsdf",
            "location": 224,
            "return": [],
            "arguments": {}
        },
        "asdsdfsdffsdf": {
            "name": "asdsdfsdffsdf",
            "location": 234,
            "return": [],
            "arguments": {}
        },
        "asdfsdsdf24": {
            "name": "asdfsdsdf24",
            "location": 244,
            "return": [],
            "arguments": {}
        },
        "asdfsdsdfsdf24": {
            "name": "asdfsdsdfsdf24",
            "location": 254,
            "return": [],
            "arguments": {}
        },
        "asdfsdfsdsdsdfsdf24": {
            "name": "asdfsdfsdsdsdfsdf24",
            "location": 264,
            "return": [],
            "arguments": {}
        },
        "asdfljdf24": {
            "name": "asdfljdf24",
            "location": 275,
            "return": [],
            "arguments": {}
        },
        "endswith": {
            "name": "endswith",
            "location": 282,
            "return": [],
            "arguments": {}
        },
        "around": {
            "name": "around",
            "location": 287,
            "return": [],
            "arguments": {}
        },
        "multiline": {
            "name": "multiline",
            "location": 293,
            "return": [],
            "arguments": {}
        },
        "triple_single_quotes_raw": {
            "name": "triple_single_quotes_raw",
            "location": 301,
            "return": [],
            "arguments": {}
        },
        "triple_single_quotes_raw_uppercase": {
            "name": "triple_single_quotes_raw_uppercase",
            "location": 306,
            "return": [],
            "arguments": {}
        },
        "single_quotes_raw": {
            "name": "single_quotes_raw",
            "location": 311,
            "return": [],
            "arguments": {}
        },
        "single_quotes_raw_uppercase": {
            "name": "single_quotes_raw_uppercase",
            "location": 316,
            "return": [],
            "arguments": {}
        },
        "single_quotes_raw_uppercase_backslash": {
            "name": "single_quotes_raw_uppercase_backslash",
            "location": 322,
            "return": [],
            "arguments": {}
        },
        "double_quotes_backslash": {
            "name": "double_quotes_backslash",
            "location": 327,
            "return": [],
            "arguments": {}
        },
        "double_quotes_backslash_uppercase": {
            "name": "double_quotes_backslash_uppercase",
            "location": 332,
            "return": [],
            "arguments": {}
        },
        "exceptions_of_D301": {
            "name": "exceptions_of_D301",
            "location": 337,
            "return": [],
            "arguments": {}
        },
        "lwnlkjl": {
            "name": "lwnlkjl",
            "location": 349,
            "return": [],
            "arguments": {}
        },
        "liouiwnlkjl": {
            "name": "liouiwnlkjl",
            "location": 355,
            "return": [],
            "arguments": {}
        },
        "sdgfsdg23245": {
            "name": "sdgfsdg23245",
            "location": 361,
            "return": [],
            "arguments": {}
        },
        "sdgfsdg23245777": {
            "name": "sdgfsdg23245777",
            "location": 367,
            "return": [],
            "arguments": {}
        },
        "foobar": {
            "name": "foobar",
            "location": 372,
            "return": [],
            "arguments": {}
        },
        "new_209": {
            "name": "new_209",
            "location": 377,
            "return": [],
            "arguments": {}
        },
        "old_209": {
            "name": "old_209",
            "location": 386,
            "return": [],
            "arguments": {}
        },
        "oneliner_d102": {
            "name": "oneliner_d102",
            "location": 395,
            "return": [],
            "arguments": {}
        },
        "oneliner_withdoc": {
            "name": "oneliner_withdoc",
            "location": 401,
            "return": [],
            "arguments": {}
        },
        "ignored_decorator": {
            "name": "ignored_decorator",
            "location": 404,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "decorator_for_test": {
            "name": "decorator_for_test",
            "location": 410,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "oneliner_ignored_decorator": {
            "name": "oneliner_ignored_decorator",
            "location": 417,
            "return": [],
            "arguments": {}
        },
        "oneliner_with_decorator_expecting_errors": {
            "name": "oneliner_with_decorator_expecting_errors",
            "location": 424,
            "return": [],
            "arguments": {}
        },
        "valid_oneliner_with_decorator": {
            "name": "valid_oneliner_with_decorator",
            "location": 428,
            "return": [],
            "arguments": {}
        },
        "docstring_start_in_same_line": {
            "name": "docstring_start_in_same_line",
            "location": 433,
            "return": [],
            "arguments": {}
        },
        "function_with_lambda_arg": {
            "name": "function_with_lambda_arg",
            "location": 439,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "a_following_valid_function": {
            "name": "a_following_valid_function",
            "location": 444,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "outer_function": {
            "name": "outer_function",
            "location": 452,
            "return": [],
            "arguments": {}
        },
        "docstring_bad": {
            "name": "docstring_bad",
            "location": 464,
            "return": [],
            "arguments": {}
        },
        "docstring_bad_ignore_all": {
            "name": "docstring_bad_ignore_all",
            "location": 469,
            "return": [],
            "arguments": {}
        },
        "docstring_bad_ignore_one": {
            "name": "docstring_bad_ignore_one",
            "location": 474,
            "return": [],
            "arguments": {}
        },
        "docstring_ignore_some_violations_but_catch_D401": {
            "name": "docstring_ignore_some_violations_but_catch_D401",
            "location": 481,
            "return": [],
            "arguments": {}
        },
        "docstring_initiates": {
            "name": "docstring_initiates",
            "location": 490,
            "return": [],
            "arguments": {}
        },
        "docstring_initializes": {
            "name": "docstring_initializes",
            "location": 498,
            "return": [],
            "arguments": {}
        },
        "bad_decorated_function": {
            "name": "bad_decorated_function",
            "location": 503,
            "return": [],
            "arguments": {}
        },
        "valid_google_string": {
            "name": "valid_google_string",
            "location": 508,
            "return": [],
            "arguments": {}
        },
        "bad_google_string": {
            "name": "bad_google_string",
            "location": 514,
            "return": [],
            "arguments": {}
        },
        "class_.method": {
            "name": "method",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "class_._ok_since_private": {
            "name": "_ok_since_private",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "class_.overloaded_method": {
            "name": "overloaded_method",
            "location": 37,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "class_.foo": {
            "name": "foo",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "class_.__new__": {
            "name": "__new__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "class_.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "class_.__str__": {
            "name": "__str__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "class_.__call__": {
            "name": "__call__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "z": []
            }
        },
        "function.ok_since_nested": {
            "name": "ok_since_nested",
            "location": 70,
            "return": [],
            "arguments": {}
        },
        "function.nested": {
            "name": "nested",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "function_with_nesting.nested_overloaded_func": {
            "name": "nested_overloaded_func",
            "location": 89,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "outer_function.inner_function": {
            "name": "inner_function",
            "location": 454,
            "return": [],
            "arguments": {}
        },
        "Blah.__init__": {
            "name": "__init__",
            "location": 529,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "pydocstyle-master/src/tests/test_cases/unicode_literals.py": {
        "with_unicode_docstring_without_u": {
            "name": "with_unicode_docstring_without_u",
            "location": 10,
            "return": [],
            "arguments": {}
        }
    },
    "pydocstyle-master/src/tests/test_cases/__init__.py": {}
}
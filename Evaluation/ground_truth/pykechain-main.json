{
    "pykechain-main/setup.py": {},
    "pykechain-main/docs/conf.py": {},
    "pykechain-main/pykechain/client.py": {
        "Client.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "check_certificates": [
                    "Optional[bool]"
                ]
            }
        },
        "Client.__del__": {
            "name": "__del__",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.__repr__": {
            "name": "__repr__",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.from_env": {
            "name": "from_env",
            "location": 185,
            "return": [
                "'Client'"
            ],
            "arguments": {
                "cls": [],
                "env_filename": [
                    "Optional[str]"
                ],
                "check_certificates": [
                    "Optional[bool]"
                ]
            }
        },
        "Client.login": {
            "name": "login",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "Optional[str]"
                ],
                "password": [
                    "Optional[str]"
                ],
                "token": [
                    "Optional[str]"
                ]
            }
        },
        "Client._build_url": {
            "name": "_build_url",
            "location": 285,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str"
                ]
            }
        },
        "Client._retrieve_users": {
            "name": "_retrieve_users",
            "location": 295,
            "return": [
                "List[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client._request": {
            "name": "_request",
            "location": 309,
            "return": [
                "requests.Response"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "Client.app_versions": {
            "name": "app_versions",
            "location": 339,
            "return": [
                "List[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.widget_schemas": {
            "name": "widget_schemas",
            "location": 358,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.widget_schema": {
            "name": "widget_schema",
            "location": 385,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": [],
                "widget_type": [
                    "str"
                ]
            }
        },
        "Client.match_app_version": {
            "name": "match_app_version",
            "location": 408,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Optional[str]"
                ],
                "label": [
                    "Optional[str]"
                ],
                "version": [
                    "Optional[str]"
                ],
                "default": [
                    "Optional[bool]"
                ]
            }
        },
        "Client.reload": {
            "name": "reload",
            "location": 479,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Base"
                ],
                "url": [
                    "Optional[str]"
                ],
                "extra_params": [
                    "Optional[Dict]"
                ]
            }
        },
        "Client._retrieve_singular": {
            "name": "_retrieve_singular",
            "location": 566,
            "return": [],
            "arguments": {
                "method": [
                    "Callable"
                ]
            }
        },
        "Client.scopes": {
            "name": "scopes",
            "location": 590,
            "return": [
                "List[Scope]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]"
                ],
                "pk": [
                    "Optional[str]"
                ],
                "status": [
                    "Optional[Union[(ScopeStatus, str)]]"
                ]
            }
        },
        "Client.scope": {
            "name": "scope",
            "location": 653,
            "return": [
                "Scope"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.activities": {
            "name": "activities",
            "location": 665,
            "return": [
                "List[Activity]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]"
                ],
                "pk": [
                    "Optional[str]"
                ],
                "scope": [
                    "Optional[str]"
                ]
            }
        },
        "Client.activity": {
            "name": "activity",
            "location": 707,
            "return": [
                "Activity"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.parts": {
            "name": "parts",
            "location": 725,
            "return": [
                "PartSet"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]"
                ],
                "pk": [
                    "Optional[str]"
                ],
                "model": [
                    "Optional[Part]"
                ],
                "category": [
                    "Optional[Union[(Category, str)]]"
                ],
                "scope_id": [
                    "Optional[str]"
                ],
                "parent": [
                    "Optional[str]"
                ],
                "activity": [
                    "Optional[str]"
                ],
                "widget": [
                    "Optional[str]"
                ],
                "limit": [
                    "Optional[int]"
                ],
                "batch": [
                    "Optional[int]"
                ]
            }
        },
        "Client.part": {
            "name": "part",
            "location": 832,
            "return": [
                "Part"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.model": {
            "name": "model",
            "location": 875,
            "return": [
                "Part"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.properties": {
            "name": "properties",
            "location": 895,
            "return": [
                "List['AnyProperty']"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]"
                ],
                "pk": [
                    "Optional[str]"
                ],
                "category": [
                    "Optional[Union[(Category, str)]]"
                ]
            }
        },
        "Client.property": {
            "name": "property",
            "location": 935,
            "return": [
                "'AnyProperty'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.services": {
            "name": "services",
            "location": 977,
            "return": [
                "List[Service]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]"
                ],
                "pk": [
                    "Optional[str]"
                ],
                "scope": [
                    "Optional[str]"
                ]
            }
        },
        "Client.service": {
            "name": "service",
            "location": 1019,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.service_executions": {
            "name": "service_executions",
            "location": 1033,
            "return": [
                "List[ServiceExecution]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]"
                ],
                "pk": [
                    "Optional[str]"
                ],
                "scope": [
                    "Optional[str]"
                ],
                "service": [
                    "Optional[str]"
                ]
            }
        },
        "Client.service_execution": {
            "name": "service_execution",
            "location": 1082,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.users": {
            "name": "users",
            "location": 1099,
            "return": [
                "List[User]"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "Optional[str]"
                ],
                "pk": [
                    "Optional[str]"
                ]
            }
        },
        "Client.user": {
            "name": "user",
            "location": 1129,
            "return": [
                "User"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.current_user": {
            "name": "current_user",
            "location": 1142,
            "return": [
                "User"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.create_user": {
            "name": "create_user",
            "location": 1165,
            "return": [
                "'User'"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ],
                "email": [
                    "str"
                ],
                "name": [
                    "Optional[str]"
                ],
                "team_ids": [
                    "Optional[Union[(Team, ObjectID)]]"
                ],
                "timezone": [
                    "Optional[str]"
                ],
                "language_code": [
                    "Optional[LanguageCodes]"
                ],
                "send_passwd_link": [
                    "bool"
                ]
            }
        },
        "Client.teams": {
            "name": "teams",
            "location": 1213,
            "return": [
                "List[Team]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]"
                ],
                "pk": [
                    "Optional[str]"
                ],
                "is_hidden": [
                    "Optional[bool]"
                ]
            }
        },
        "Client.team": {
            "name": "team",
            "location": 1250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.widgets": {
            "name": "widgets",
            "location": 1263,
            "return": [
                "List[Widget]"
            ],
            "arguments": {
                "self": [],
                "pk": [
                    "Optional[str]"
                ],
                "activity": [
                    "Optional[Union[(Activity, str)]]"
                ]
            }
        },
        "Client.widget": {
            "name": "widget",
            "location": 1307,
            "return": [
                "Widget"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.create_activity": {
            "name": "create_activity",
            "location": 1319,
            "return": [
                "Activity"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Union[(Activity, str)]"
                ],
                "name": [
                    "str"
                ],
                "activity_type": [
                    "ActivityType"
                ],
                "ref": [
                    "Optional[str]"
                ],
                "status": [
                    "ActivityStatus"
                ],
                "description": [
                    "Optional[str]"
                ],
                "start_date": [
                    "Optional[datetime.datetime]"
                ],
                "due_date": [
                    "Optional[datetime.datetime]"
                ],
                "classification": [
                    "ActivityClassification"
                ],
                "tags": [
                    "Optional[List[str]]"
                ]
            }
        },
        "Client.clone_activities": {
            "name": "clone_activities",
            "location": 1427,
            "return": [
                "List[Activity]"
            ],
            "arguments": {
                "self": [],
                "activities": [
                    "List[Union[(Activity, str)]]"
                ],
                "activity_parent": [
                    "Union[(Activity, str)]"
                ],
                "activity_update_dicts": [
                    "Optional[Dict]"
                ],
                "include_part_models": [
                    "Optional[bool]"
                ],
                "include_part_instances": [
                    "Optional[bool]"
                ],
                "include_children": [
                    "Optional[bool]"
                ],
                "excluded_parts": [
                    "Optional[List[str]]"
                ],
                "part_parent_model": [
                    "Optional[Union[(Part, str)]]"
                ],
                "part_parent_instance": [
                    "Optional[Union[(Part, str)]]"
                ],
                "part_model_rename_template": [
                    "Optional[str]"
                ],
                "part_instance_rename_template": [
                    "Optional[str]"
                ],
                "asynchronous": [
                    "Optional[bool]"
                ]
            }
        },
        "Client.update_activities": {
            "name": "update_activities",
            "location": 1562,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "activities": [
                    "List[Dict]"
                ]
            }
        },
        "Client._create_part": {
            "name": "_create_part",
            "location": 1581,
            "return": [
                "Optional[Part]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str"
                ],
                "data": [
                    "Dict"
                ]
            }
        },
        "Client.create_part": {
            "name": "create_part",
            "location": 1600,
            "return": [
                "Part"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Part"
                ],
                "model": [
                    "Part"
                ],
                "name": [
                    "Optional[str]"
                ]
            }
        },
        "Client.create_model": {
            "name": "create_model",
            "location": 1636,
            "return": [
                "Part"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Union[(Part, str)]"
                ],
                "name": [
                    "str"
                ],
                "multiplicity": [
                    "Optional[Multiplicity]"
                ]
            }
        },
        "Client.create_model_with_properties": {
            "name": "create_model_with_properties",
            "location": 1680,
            "return": [
                "Part"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Union[(Part, str)]"
                ],
                "name": [
                    "str"
                ],
                "multiplicity": [
                    "Optional[Multiplicity]"
                ],
                "properties_fvalues": [
                    "Optional[List[Dict]]"
                ]
            }
        },
        "Client._create_clone": {
            "name": "_create_clone",
            "location": 1759,
            "return": [
                "Part"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Part"
                ],
                "part": [
                    "Part"
                ],
                "name": [
                    "Optional[str]"
                ],
                "multiplicity": [
                    "Optional[Multiplicity]"
                ]
            }
        },
        "Client.create_proxy_model": {
            "name": "create_proxy_model",
            "location": 1826,
            "return": [
                "Part"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Part"
                ],
                "parent": [
                    "Part"
                ],
                "name": [
                    "str"
                ],
                "multiplicity": [
                    "Optional[Multiplicity]"
                ]
            }
        },
        "Client._create_parts_bulk": {
            "name": "_create_parts_bulk",
            "location": 1873,
            "return": [
                "PartSet"
            ],
            "arguments": {
                "self": [],
                "parts": [
                    "List[Dict]"
                ],
                "asynchronous": [
                    "Optional[bool]"
                ],
                "retrieve_instances": [
                    "Optional[bool]"
                ]
            }
        },
        "Client._delete_parts_bulk": {
            "name": "_delete_parts_bulk",
            "location": 1963,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "parts": [
                    "List[Union[(Part, str)]]"
                ],
                "asynchronous": [
                    "Optional[bool]"
                ]
            }
        },
        "Client.create_property": {
            "name": "create_property",
            "location": 2013,
            "return": [
                "AnyProperty"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Part"
                ],
                "name": [
                    "str"
                ],
                "description": [
                    "Optional[str]"
                ],
                "property_type": [
                    "Optional[Union[(PropertyType, str)]]"
                ],
                "default_value": [
                    "Optional[Any]"
                ],
                "unit": [
                    "Optional[str]"
                ],
                "options": [
                    "Optional[Dict]"
                ]
            }
        },
        "Client.create_service": {
            "name": "create_service",
            "location": 2109,
            "return": [
                "Service"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "scope": [
                    "Scope"
                ],
                "description": [
                    "Optional[str]"
                ],
                "version": [
                    "Optional[str]"
                ],
                "service_type": [
                    "Optional[ServiceType]"
                ],
                "environment_version": [
                    "Optional[ServiceEnvironmentVersion]"
                ],
                "run_as": [
                    "Optional[ServiceScriptUser]"
                ],
                "pkg_path": [
                    "Optional[str]"
                ]
            }
        },
        "Client.create_scope": {
            "name": "create_scope",
            "location": 2181,
            "return": [
                "Scope"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "status": [
                    "Optional[ScopeStatus]"
                ],
                "description": [
                    "Optional[str]"
                ],
                "tags": [
                    "Optional[List[str]]"
                ],
                "start_date": [
                    "Optional[datetime.datetime]"
                ],
                "due_date": [
                    "Optional[datetime.datetime]"
                ],
                "team": [
                    "Optional[Union[(Team, str)]]"
                ]
            }
        },
        "Client.delete_scope": {
            "name": "delete_scope",
            "location": 2242,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "Scope"
                ],
                "asynchronous": [
                    "Optional[bool]"
                ]
            }
        },
        "Client.clone_scope": {
            "name": "clone_scope",
            "location": 2274,
            "return": [
                "Optional[Scope]"
            ],
            "arguments": {
                "self": [],
                "source_scope": [
                    "Scope"
                ],
                "name": [
                    "Optional[str]"
                ],
                "status": [
                    "Optional[ScopeStatus]"
                ],
                "start_date": [
                    "Optional[datetime.datetime]"
                ],
                "due_date": [
                    "Optional[datetime.datetime]"
                ],
                "description": [
                    "Optional[str]"
                ],
                "tags": [
                    "Optional[List[str]]"
                ],
                "team": [
                    "Optional[Union[(Team, str)]]"
                ],
                "scope_options": [
                    "Optional[Dict]"
                ],
                "asynchronous": [
                    "Optional[bool]"
                ]
            }
        },
        "Client.create_team": {
            "name": "create_team",
            "location": 2370,
            "return": [
                "Team"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "user": [
                    "Union[(str, int, User)]"
                ],
                "description": [
                    "Optional[str]"
                ],
                "options": [
                    "Optional[Dict]"
                ],
                "is_hidden": [
                    "Optional[bool]"
                ]
            }
        },
        "Client._validate_widget": {
            "name": "_validate_widget",
            "location": 2444,
            "return": [
                "Dict"
            ],
            "arguments": {
                "activity": [
                    "Union[(Activity, str)]"
                ],
                "widget_type": [
                    "Union[(WidgetTypes, str)]"
                ],
                "title": [
                    "Optional[str]"
                ],
                "meta": [
                    "Dict"
                ],
                "order": [
                    "Optional[int]"
                ],
                "parent": [
                    "Optional[Union[(Widget, str)]]"
                ]
            }
        },
        "Client._validate_related_models": {
            "name": "_validate_related_models",
            "location": 2477,
            "return": [
                "Tuple[(List, List, str, str)]"
            ],
            "arguments": {
                "readable_models": [
                    "List"
                ],
                "writable_models": [
                    "List"
                ],
                "part_instance": [
                    "Union[(Part, str)]"
                ],
                "parent_part_instance": [
                    "Union[(Part, str)]"
                ]
            }
        },
        "Client.create_widget": {
            "name": "create_widget",
            "location": 2516,
            "return": [
                "Widget"
            ],
            "arguments": {
                "self": [],
                "activity": [
                    "Union[(Activity, str)]"
                ],
                "widget_type": [
                    "Union[(WidgetTypes, str)]"
                ],
                "meta": [
                    "Dict"
                ],
                "title": [
                    "Optional[str]"
                ],
                "order": [
                    "Optional[int]"
                ],
                "parent": [
                    "Optional[Union[(Widget, str)]]"
                ],
                "readable_models": [
                    "Optional[List]"
                ],
                "writable_models": [
                    "Optional[List]"
                ],
                "part_instance": [
                    "Optional[Union[(Part, str)]]"
                ],
                "parent_part_instance": [
                    "Optional[Union[(Part, str)]]"
                ]
            }
        },
        "Client.create_widgets": {
            "name": "create_widgets",
            "location": 2615,
            "return": [
                "List[Widget]"
            ],
            "arguments": {
                "self": [],
                "widgets": [
                    "List[Dict]"
                ]
            }
        },
        "Client.update_widgets": {
            "name": "update_widgets",
            "location": 2668,
            "return": [
                "List[Widget]"
            ],
            "arguments": {
                "self": [],
                "widgets": [
                    "List[Dict]"
                ]
            }
        },
        "Client.delete_widget": {
            "name": "delete_widget",
            "location": 2700,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widget": [
                    "Union[(Widget, str)]"
                ]
            }
        },
        "Client.delete_widgets": {
            "name": "delete_widgets",
            "location": 2717,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widgets": [
                    "List[Union[(Widget, str)]]"
                ]
            }
        },
        "Client._validate_associations": {
            "name": "_validate_associations",
            "location": 2738,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "widgets": [
                    "List[Union[(Widget, str)]]"
                ],
                "associations": [
                    "List[Tuple[(List, List, Part, Part)]]"
                ]
            }
        },
        "Client.associations": {
            "name": "associations",
            "location": 2761,
            "return": [
                "List[Association]"
            ],
            "arguments": {
                "self": [],
                "widget": [
                    "Optional[Widget]"
                ],
                "activity": [
                    "Optional[Activity]"
                ],
                "part": [
                    "Optional[Part]"
                ],
                "property": [
                    "Optional[AnyProperty]"
                ],
                "scope": [
                    "Optional[Scope]"
                ],
                "limit": [
                    "Optional[int]"
                ]
            }
        },
        "Client.update_widget_associations": {
            "name": "update_widget_associations",
            "location": 2839,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widget": [
                    "Union[(Widget, str)]"
                ],
                "readable_models": [
                    "Optional[List]"
                ],
                "writable_models": [
                    "Optional[List]"
                ],
                "part_instance": [
                    "Optional[Union[(Part, str)]]"
                ],
                "parent_part_instance": [
                    "Optional[Union[(Part, str)]]"
                ]
            }
        },
        "Client.update_widgets_associations": {
            "name": "update_widgets_associations",
            "location": 2882,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widgets": [
                    "List[Union[(Widget, str)]]"
                ],
                "associations": [
                    "List[Tuple]"
                ]
            }
        },
        "Client.set_widget_associations": {
            "name": "set_widget_associations",
            "location": 2955,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widget": [
                    "Union[(Widget, str)]"
                ],
                "readable_models": [
                    "Optional[List]"
                ],
                "writable_models": [
                    "Optional[List]"
                ],
                "part_instance": [
                    "Optional[Union[(Part, str)]]"
                ],
                "parent_part_instance": [
                    "Optional[Union[(Part, str)]]"
                ]
            }
        },
        "Client.set_widgets_associations": {
            "name": "set_widgets_associations",
            "location": 2999,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widgets": [
                    "List[Union[(Widget, str)]]"
                ],
                "associations": [
                    "List[Tuple]"
                ]
            }
        },
        "Client.clear_widget_associations": {
            "name": "clear_widget_associations",
            "location": 3073,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widget": [
                    "Widget"
                ]
            }
        },
        "Client.remove_widget_associations": {
            "name": "remove_widget_associations",
            "location": 3099,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widget": [
                    "Widget"
                ],
                "models": [
                    "Optional[List[Union[('AnyProperty', str)]]]"
                ]
            }
        },
        "Client.move_activity": {
            "name": "move_activity",
            "location": 3141,
            "return": [],
            "arguments": {
                "self": [],
                "activity": [],
                "parent": [],
                "classification": []
            }
        },
        "Client.update_properties": {
            "name": "update_properties",
            "location": 3198,
            "return": [
                "List['AnyProperty']"
            ],
            "arguments": {
                "self": [],
                "properties": [
                    "List[Dict]"
                ]
            }
        },
        "Client.notifications": {
            "name": "notifications",
            "location": 3234,
            "return": [
                "List[Notification]"
            ],
            "arguments": {
                "self": [],
                "pk": [
                    "Optional[str]"
                ]
            }
        },
        "Client.notification": {
            "name": "notification",
            "location": 3264,
            "return": [
                "Notification"
            ],
            "arguments": {
                "self": [],
                "pk": [
                    "Optional[str]"
                ]
            }
        },
        "Client.create_notification": {
            "name": "create_notification",
            "location": 3282,
            "return": [
                "Notification"
            ],
            "arguments": {
                "self": [],
                "subject": [
                    "str"
                ],
                "message": [
                    "str"
                ],
                "status": [
                    "Optional[NotificationStatus]"
                ],
                "recipients": [
                    "Optional[List[Union[(User, str)]]]"
                ],
                "team": [
                    "Optional[Union[(Team, str)]]"
                ],
                "from_user": [
                    "Optional[Union[(User, str)]]"
                ],
                "event": [
                    "Optional[NotificationEvent]"
                ],
                "channel": [
                    "Optional[NotificationChannels]"
                ]
            }
        },
        "Client.delete_notification": {
            "name": "delete_notification",
            "location": 3366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "notification": [
                    "Union[(Notification, str)]"
                ]
            }
        },
        "Client.banners": {
            "name": "banners",
            "location": 3386,
            "return": [
                "List[Banner]"
            ],
            "arguments": {
                "self": [],
                "pk": [
                    "Optional[str]"
                ],
                "text": [
                    "Optional[str]"
                ],
                "is_active": [
                    "Optional[bool]"
                ]
            }
        },
        "Client.banner": {
            "name": "banner",
            "location": 3422,
            "return": [
                "Banner"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.create_banner": {
            "name": "create_banner",
            "location": 3431,
            "return": [
                "Banner"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "icon": [
                    "str"
                ],
                "active_from": [
                    "datetime.datetime"
                ],
                "active_until": [
                    "Optional[datetime.datetime]"
                ],
                "is_active": [
                    "Optional[bool]"
                ],
                "url": [
                    "Optional[str]"
                ]
            }
        },
        "Client.active_banner": {
            "name": "active_banner",
            "location": 3482,
            "return": [
                "Banner"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.expiring_download": {
            "name": "expiring_download",
            "location": 3507,
            "return": [
                "ExpiringDownload"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.expiring_downloads": {
            "name": "expiring_downloads",
            "location": 3516,
            "return": [
                "List[ExpiringDownload]"
            ],
            "arguments": {
                "self": [],
                "pk": [
                    "Optional[str]"
                ],
                "expires_in": [
                    "Optional[int]"
                ]
            }
        },
        "Client.create_expiring_download": {
            "name": "create_expiring_download",
            "location": 3550,
            "return": [
                "ExpiringDownload"
            ],
            "arguments": {
                "self": [],
                "expires_at": [
                    "Optional[datetime.datetime]"
                ],
                "expires_in": [
                    "Optional[int]"
                ],
                "content_path": [
                    "Optional[str]"
                ]
            }
        },
        "Client.create_context": {
            "name": "create_context",
            "location": 3588,
            "return": [
                "Context"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "context_type": [
                    "ContextType"
                ],
                "scope": [
                    "Scope"
                ],
                "context_group": [
                    "ContextGroup"
                ],
                "activities": [],
                "description": [
                    "str"
                ],
                "tags": [],
                "options": [],
                "feature_collection": [],
                "start_date": [],
                "due_date": []
            }
        },
        "Client.delete_context": {
            "name": "delete_context",
            "location": 3658,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Context"
                ]
            }
        },
        "Client.context": {
            "name": "context",
            "location": 3675,
            "return": [
                "Context"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.contexts": {
            "name": "contexts",
            "location": 3687,
            "return": [
                "List[Context]"
            ],
            "arguments": {
                "self": [],
                "pk": [
                    "Optional[ObjectID]"
                ],
                "context_type": [
                    "Optional[ContextType]"
                ],
                "activities": [
                    "Optional[List[Union[(Activity, ObjectID)]]]"
                ],
                "scope": [
                    "Optional[Union[(Scope, ObjectID)]]"
                ],
                "context_group": [
                    "Optional[ContextGroup]"
                ]
            }
        },
        "Client.create_form_model": {
            "name": "create_form_model",
            "location": 3722,
            "return": [
                "Form"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.instantiate_form": {
            "name": "instantiate_form",
            "location": 3732,
            "return": [
                "Form"
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "Client.form": {
            "name": "form",
            "location": 3742,
            "return": [
                "Form"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.forms": {
            "name": "forms",
            "location": 3753,
            "return": [
                "List[Form]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]"
                ],
                "pk": [
                    "Optional[ObjectID]"
                ],
                "category": [
                    "Optional[FormCategory]"
                ],
                "description": [
                    "Optional[str]"
                ],
                "scope": [
                    "Optional[Union[(Scope, ObjectID)]]"
                ],
                "context": [
                    "Optional[List[Union[(Context, ObjectID)]]]"
                ],
                "ref": [
                    "Optional[str]"
                ]
            }
        },
        "Client._create_forms_bulk": {
            "name": "_create_forms_bulk",
            "location": 3792,
            "return": [
                "List"
            ],
            "arguments": {
                "self": [],
                "forms": [
                    "List[Dict]"
                ],
                "asynchronous": [
                    "Optional[bool]"
                ],
                "retrieve_instances": [
                    "Optional[bool]"
                ]
            }
        },
        "Client._delete_forms_bulk": {
            "name": "_delete_forms_bulk",
            "location": 3870,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "forms": [
                    "List[Union[(Form, str)]]"
                ],
                "asynchronous": [
                    "Optional[bool]"
                ]
            }
        },
        "Client.workflow": {
            "name": "workflow",
            "location": 3920,
            "return": [
                "Workflow"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]"
                ],
                "pk": [
                    "Optional[ObjectID]"
                ],
                "category": [
                    "Optional[WorkflowCategory]"
                ],
                "description": [
                    "Optional[str]"
                ],
                "scope": [
                    "Optional[Union[(Scope, ObjectID)]]"
                ],
                "ref": [
                    "Optional[str]"
                ]
            }
        },
        "Client.workflows": {
            "name": "workflows",
            "location": 3959,
            "return": [
                "List[Workflow]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]"
                ],
                "pk": [
                    "Optional[ObjectID]"
                ],
                "category": [
                    "Optional[WorkflowCategory]"
                ],
                "description": [
                    "Optional[str]"
                ],
                "scope": [
                    "Optional[Union[(Scope, ObjectID)]]"
                ],
                "ref": [
                    "Optional[str]"
                ]
            }
        },
        "Client.create_workflow": {
            "name": "create_workflow",
            "location": 3996,
            "return": [
                "Workflow"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "ObjectID"
                ]
            }
        }
    },
    "pykechain-main/pykechain/client_utils.py": {
        "PykeRetry.increment": {
            "name": "increment",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "method": [],
                "url": [],
                "response": [],
                "error": [],
                "_pool": [],
                "_stacktrace": []
            }
        },
        "PykeRetry._is_ssl_error": {
            "name": "_is_ssl_error",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "error": []
            }
        }
    },
    "pykechain-main/pykechain/defaults.py": {},
    "pykechain-main/pykechain/enums.py": {
        "Enum.options": {
            "name": "options",
            "location": 17,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Enum.values": {
            "name": "values",
            "location": 25,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "pykechain-main/pykechain/exceptions.py": {
        "APIError.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_DeprecationMixin.__new__": {
            "name": "__new__",
            "location": 148,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "pykechain-main/pykechain/extra_utils.py": {
        "get_mapping_dictionary": {
            "name": "get_mapping_dictionary",
            "location": 33,
            "return": [
                "dict"
            ],
            "arguments": {
                "clean": []
            }
        },
        "get_edited_one_many": {
            "name": "get_edited_one_many",
            "location": 47,
            "return": [
                "list"
            ],
            "arguments": {
                "clean": []
            }
        },
        "get_references": {
            "name": "get_references",
            "location": 63,
            "return": [
                "dict"
            ],
            "arguments": {
                "clean": []
            }
        },
        "get_attachments": {
            "name": "get_attachments",
            "location": 77,
            "return": [
                "list"
            ],
            "arguments": {
                "clean": []
            }
        },
        "get_illegal_targets": {
            "name": "get_illegal_targets",
            "location": 91,
            "return": [],
            "arguments": {
                "part": [
                    "Part"
                ],
                "include": [
                    "set"
                ]
            }
        },
        "map_property_instances": {
            "name": "map_property_instances",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "original_part": [
                    "Part"
                ],
                "new_part": [
                    "Part"
                ]
            }
        },
        "relocate_model": {
            "name": "relocate_model",
            "location": 132,
            "return": [
                "Part"
            ],
            "arguments": {
                "part": [
                    "Part"
                ],
                "target_parent": [
                    "Part"
                ],
                "name": [
                    "Optional[str]"
                ],
                "include_children": [
                    "Optional[bool]"
                ]
            }
        },
        "move_part_model": {
            "name": "move_part_model",
            "location": 197,
            "return": [
                "Part"
            ],
            "arguments": {
                "part": [
                    "Part"
                ],
                "target_parent": [
                    "Part"
                ],
                "name": [
                    "str"
                ],
                "include_children": [
                    "bool"
                ]
            }
        },
        "_copy_part_model": {
            "name": "_copy_part_model",
            "location": 230,
            "return": [
                "Part"
            ],
            "arguments": {
                "part": [
                    "Part"
                ],
                "target_parent": [
                    "Part"
                ],
                "name": [
                    "str"
                ],
                "include_children": [
                    "bool"
                ]
            }
        },
        "relocate_instance": {
            "name": "relocate_instance",
            "location": 294,
            "return": [
                "Part"
            ],
            "arguments": {
                "part": [
                    "Part"
                ],
                "target_parent": [
                    "Part"
                ],
                "name": [
                    "Optional[str]"
                ],
                "include_children": [
                    "Optional[bool]"
                ]
            }
        },
        "move_part_instance": {
            "name": "move_part_instance",
            "location": 366,
            "return": [
                "Part"
            ],
            "arguments": {
                "part_instance": [
                    "Part"
                ],
                "target_parent": [
                    "Part"
                ],
                "part_model": [
                    "Part"
                ],
                "name": [
                    "Optional[str]"
                ],
                "include_children": [
                    "Optional[bool]"
                ]
            }
        },
        "update_part_with_properties": {
            "name": "update_part_with_properties",
            "location": 443,
            "return": [
                "Part"
            ],
            "arguments": {
                "part_instance": [
                    "Part"
                ],
                "moved_instance": [
                    "Part"
                ],
                "name": [
                    "Optional[str]"
                ]
            }
        },
        "_copy_part": {
            "name": "_copy_part",
            "location": 511,
            "return": [
                "Part"
            ],
            "arguments": {
                "part": [
                    "Part"
                ],
                "target_parent": [
                    "Part"
                ],
                "name": [
                    "Optional[str]"
                ],
                "include_children": [
                    "Optional[bool]"
                ],
                "include_instances": [
                    "Optional[bool]"
                ]
            }
        },
        "_copy_instances_recursive": {
            "name": "_copy_instances_recursive",
            "location": 629,
            "return": [
                "List[Part]"
            ],
            "arguments": {
                "client": [
                    "Client"
                ],
                "instances": [
                    "List[_InstanceCopy]"
                ],
                "include_children": [
                    "bool"
                ]
            }
        },
        "_update_references": {
            "name": "_update_references",
            "location": 754,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_get_property_value": {
            "name": "_get_property_value",
            "location": 836,
            "return": [
                "Any"
            ],
            "arguments": {
                "prop": [
                    "AnyProperty"
                ]
            }
        }
    },
    "pykechain-main/pykechain/helpers.py": {
        "get_project": {
            "name": "get_project",
            "location": 10,
            "return": [],
            "arguments": {
                "url": [],
                "username": [],
                "password": [],
                "token": [],
                "scope": [],
                "scope_id": [],
                "env_filename": [],
                "status": [],
                "check_certificates": []
            }
        }
    },
    "pykechain-main/pykechain/typing.py": {},
    "pykechain-main/pykechain/utils.py": {
        "find": {
            "name": "find",
            "location": 34,
            "return": [
                "Optional[T]"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[T]"
                ],
                "predicate": [
                    "Callable[([T], bool)]"
                ]
            }
        },
        "is_uuid": {
            "name": "is_uuid",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "is_url": {
            "name": "is_url",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "is_valid_email": {
            "name": "is_valid_email",
            "location": 169,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "temp_chdir": {
            "name": "temp_chdir",
            "location": 198,
            "return": [],
            "arguments": {
                "cwd": [
                    "Optional[str]"
                ]
            }
        },
        "parse_datetime": {
            "name": "parse_datetime",
            "location": 232,
            "return": [
                "Optional[datetime]"
            ],
            "arguments": {
                "value": [
                    "Optional[str]"
                ]
            }
        },
        "camelcase": {
            "name": "camelcase",
            "location": 299,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "capitalcase": {
            "name": "capitalcase",
            "location": 324,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "lowercase": {
            "name": "lowercase",
            "location": 349,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "snakecase": {
            "name": "snakecase",
            "location": 369,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "uppercase": {
            "name": "uppercase",
            "location": 398,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "slugify_ref": {
            "name": "slugify_ref",
            "location": 418,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "str"
                ],
                "allow_unicode": [
                    "bool"
                ]
            }
        },
        "__dict_public__": {
            "name": "__dict_public__",
            "location": 440,
            "return": [
                "Dict"
            ],
            "arguments": {
                "cls": [
                    "type(object)"
                ]
            }
        },
        "__dict__inherited__": {
            "name": "__dict__inherited__",
            "location": 457,
            "return": [
                "Dict"
            ],
            "arguments": {
                "cls": [
                    "type(object)"
                ],
                "stop": [
                    "type(object)"
                ],
                "public": [
                    "Optional[bool]"
                ]
            }
        },
        "get_in_chunks": {
            "name": "get_in_chunks",
            "location": 496,
            "return": [
                "Iterable"
            ],
            "arguments": {
                "lst": [
                    "Union[(List, Iterable)]"
                ],
                "chunk_size": [
                    "int"
                ]
            }
        },
        "clean_empty_values": {
            "name": "clean_empty_values",
            "location": 572,
            "return": [
                "Dict"
            ],
            "arguments": {
                "update_dict": [
                    "Dict"
                ],
                "nones": [
                    "bool"
                ]
            }
        },
        "find_obj_in_list": {
            "name": "find_obj_in_list",
            "location": 589,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": [
                    "str"
                ],
                "iterable": [
                    "List[Any]"
                ],
                "attribute": [
                    "str"
                ]
            }
        },
        "get_offset_from_user_timezone": {
            "name": "get_offset_from_user_timezone",
            "location": 625,
            "return": [
                "int"
            ],
            "arguments": {
                "user": [
                    "'User'"
                ]
            }
        },
        "parse_datetime._get_fixed_timezone": {
            "name": "_get_fixed_timezone",
            "location": 258,
            "return": [],
            "arguments": {
                "offset": []
            }
        },
        "Empty.__new__": {
            "name": "__new__",
            "location": 562,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "pykechain-main/pykechain/__about__.py": {},
    "pykechain-main/pykechain/__init__.py": {},
    "pykechain-main/pykechain/models/activity.py": {
        "Activity.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "json": []
            }
        },
        "Activity.__call__": {
            "name": "__call__",
            "location": 103,
            "return": [
                "'Activity'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Activity.refresh": {
            "name": "refresh",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Activity.assignees": {
            "name": "assignees",
            "location": 121,
            "return": [
                "List['User']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Activity.scope_id": {
            "name": "scope_id",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Activity.representations": {
            "name": "representations",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Activity._save_representations": {
            "name": "_save_representations",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "representation_options": []
            }
        },
        "Activity.is_rootlevel": {
            "name": "is_rootlevel",
            "location": 177,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Activity.is_task": {
            "name": "is_task",
            "location": 202,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Activity.is_subprocess": {
            "name": "is_subprocess",
            "location": 210,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Activity.is_process": {
            "name": "is_process",
            "location": 218,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Activity.is_workflow": {
            "name": "is_workflow",
            "location": 226,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Activity.is_app": {
            "name": "is_app",
            "location": 234,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Activity.is_catalog": {
            "name": "is_catalog",
            "location": 242,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Activity.is_workflow_root": {
            "name": "is_workflow_root",
            "location": 250,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Activity.is_catalog_root": {
            "name": "is_catalog_root",
            "location": 258,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Activity.is_root": {
            "name": "is_root",
            "location": 266,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Activity.is_configured": {
            "name": "is_configured",
            "location": 277,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Activity.is_customized": {
            "name": "is_customized",
            "location": 289,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Activity.create": {
            "name": "create",
            "location": 304,
            "return": [
                "'Activity'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Activity.parent": {
            "name": "parent",
            "location": 316,
            "return": [
                "'Activity'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Activity.children": {
            "name": "children",
            "location": 339,
            "return": [
                "List['Activity']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Activity.child": {
            "name": "child",
            "location": 381,
            "return": [
                "'Activity'"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]"
                ],
                "pk": [
                    "Optional[str]"
                ]
            }
        },
        "Activity.siblings": {
            "name": "siblings",
            "location": 426,
            "return": [
                "List['Activity']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Activity.all_children": {
            "name": "all_children",
            "location": 456,
            "return": [
                "List['Activity']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Activity.count_children": {
            "name": "count_children",
            "location": 469,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Activity.clone": {
            "name": "clone",
            "location": 484,
            "return": [
                "Optional['Activity']"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Optional[Union[('Activity', str)]]"
                ],
                "update_dict": [
                    "Optional[Dict]"
                ]
            }
        },
        "Activity.edit_cascade_down": {
            "name": "edit_cascade_down",
            "location": 516,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start_date": [
                    "Optional[Union[(datetime.datetime, Empty)]]"
                ],
                "due_date": [
                    "Optional[Union[(datetime.datetime, Empty)]]"
                ],
                "assignees": [
                    "Optional[Union[(List[str], Empty)]]"
                ],
                "assignees_ids": [
                    "Optional[Union[(List[str], Empty)]]"
                ],
                "status": [
                    "Optional[Union[(ActivityStatus, str, Empty)]]"
                ],
                "overwrite": [
                    "Optional[bool]"
                ]
            }
        },
        "Activity.edit": {
            "name": "edit",
            "location": 585,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[Union[(str, Empty)]]"
                ],
                "description": [
                    "Optional[Union[(str, Empty)]]"
                ],
                "start_date": [
                    "Optional[Union[(datetime.datetime, Empty)]]"
                ],
                "due_date": [
                    "Optional[Union[(datetime.datetime, Empty)]]"
                ],
                "assignees": [
                    "Optional[Union[(List[str], Empty)]]"
                ],
                "assignees_ids": [
                    "Optional[Union[(List[str], Empty)]]"
                ],
                "status": [
                    "Optional[Union[(ActivityStatus, str, Empty)]]"
                ],
                "tags": [
                    "Optional[Union[(List[str], Empty)]]"
                ]
            }
        },
        "Activity._validate_edit_arguments": {
            "name": "_validate_edit_arguments",
            "location": 693,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": [],
                "update_dict": [],
                "start_date": [],
                "due_date": [],
                "assignees": [],
                "assignees_ids": [],
                "status": []
            }
        },
        "Activity.delete": {
            "name": "delete",
            "location": 766,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Activity.parts": {
            "name": "parts",
            "location": 784,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Activity.associated_parts": {
            "name": "associated_parts",
            "location": 805,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Activity.associated_object_ids": {
            "name": "associated_object_ids",
            "location": 839,
            "return": [
                "List[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Activity.widgets": {
            "name": "widgets",
            "location": 886,
            "return": [
                "'WidgetsManager'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Activity.download_as_pdf": {
            "name": "download_as_pdf",
            "location": 903,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "target_dir": [
                    "str"
                ],
                "pdf_filename": [
                    "str"
                ],
                "paper_size": [
                    "PaperSize"
                ],
                "paper_orientation": [
                    "PaperOrientation"
                ],
                "include_appendices": [
                    "bool"
                ],
                "include_qr_code": [
                    "bool"
                ],
                "user": [
                    "Optional[User]"
                ],
                "timeout": [
                    "int"
                ]
            }
        },
        "Activity.move": {
            "name": "move",
            "location": 1004,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [],
                "classification": []
            }
        },
        "Activity.share_link": {
            "name": "share_link",
            "location": 1026,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subject": [
                    "str"
                ],
                "message": [
                    "str"
                ],
                "recipient_users": [
                    "List[Union[(User, str)]]"
                ],
                "from_user": [
                    "Optional[User]"
                ]
            }
        },
        "Activity.share_pdf": {
            "name": "share_pdf",
            "location": 1075,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subject": [
                    "str"
                ],
                "message": [
                    "str"
                ],
                "recipient_users": [
                    "List[Union[(User, str)]]"
                ],
                "paper_size": [
                    "Optional[PaperSize]"
                ],
                "paper_orientation": [
                    "Optional[PaperOrientation]"
                ],
                "from_user": [
                    "Optional[User]"
                ],
                "include_appendices": [
                    "Optional[bool]"
                ],
                "include_qr_code": [
                    "Optional[bool]"
                ]
            }
        },
        "Activity.context": {
            "name": "context",
            "location": 1169,
            "return": [
                "'Context'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Activity.contexts": {
            "name": "contexts",
            "location": 1181,
            "return": [
                "List['Context']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Activity.create_context": {
            "name": "create_context",
            "location": 1193,
            "return": [
                "'Context'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Activity.link_context": {
            "name": "link_context",
            "location": 1207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "'Context'"
                ]
            }
        },
        "Activity.unlink_context": {
            "name": "unlink_context",
            "location": 1224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "'Context'"
                ]
            }
        }
    },
    "pykechain-main/pykechain/models/activity2.py": {},
    "pykechain-main/pykechain/models/association.py": {
        "Association.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "json": [],
                "client": []
            }
        },
        "Association.__repr__": {
            "name": "__repr__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/pykechain/models/banner.py": {
        "Banner.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "json": [],
                "client": []
            }
        },
        "Banner.__repr__": {
            "name": "__repr__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Banner.edit": {
            "name": "edit",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "Optional[Union[(str, Empty)]]"
                ],
                "icon": [
                    "Optional[Union[(str, Empty)]]"
                ],
                "active_from": [
                    "Optional[Union[(datetime.datetime, Empty)]]"
                ],
                "active_until": [
                    "Optional[Union[(datetime.datetime, Empty)]]"
                ],
                "is_active": [
                    "Optional[Union[(bool, Empty)]]"
                ],
                "url": [
                    "Optional[Union[(str, Empty)]]"
                ]
            }
        },
        "Banner.delete": {
            "name": "delete",
            "location": 104,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/pykechain/models/base.py": {
        "Base.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "json": [
                    "Dict"
                ],
                "client": [
                    "'Client'"
                ]
            }
        },
        "Base.__repr__": {
            "name": "__repr__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.__eq__": {
            "name": "__eq__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Base.__hash__": {
            "name": "__hash__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.refresh": {
            "name": "refresh",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "json": [
                    "Optional[Dict]"
                ],
                "url": [
                    "Optional[str]"
                ],
                "extra_params": [
                    "Optional[Dict]"
                ]
            }
        },
        "CrudActionsMixin.list": {
            "name": "list",
            "location": 98,
            "return": [
                "List['self']"
            ],
            "arguments": {
                "cls": [],
                "client": [
                    "'Client'"
                ]
            }
        },
        "CrudActionsMixin.get": {
            "name": "get",
            "location": 120,
            "return": [
                "'self'"
            ],
            "arguments": {
                "cls": [],
                "client": [
                    "'Client'"
                ]
            }
        },
        "CrudActionsMixin.delete": {
            "name": "delete",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseInScope.__init__": {
            "name": "__init__",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "json": []
            }
        },
        "BaseInScope.scope": {
            "name": "scope",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/pykechain/models/base_reference.py": {
        "_ReferenceProperty.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "json": []
            }
        },
        "_ReferenceProperty.value": {
            "name": "value",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "_ReferenceProperty.value_ids": {
            "name": "value_ids",
            "location": 53,
            "return": [
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ReferenceProperty._validate_values": {
            "name": "_validate_values",
            "location": 62,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ReferenceProperty._retrieve_objects": {
            "name": "_retrieve_objects",
            "location": 85,
            "return": [
                "List[Base]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ReferenceProperty.serialize_value": {
            "name": "serialize_value",
            "location": 96,
            "return": [
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Union[(Base, List, Tuple)]"
                ]
            }
        },
        "_ReferenceProperty.set_prefilters": {
            "name": "set_prefilters",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "prefilters": [
                    "Optional[List[BaseFilter]]"
                ],
                "clear": [
                    "Optional[bool]"
                ]
            }
        },
        "_ReferenceProperty.get_prefilters": {
            "name": "get_prefilters",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ReferencePropertyInScope._put_value": {
            "name": "_put_value",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Union[(List, Tuple)]"
                ]
            }
        },
        "_ReferencePropertyInScope._check_x_scope_id": {
            "name": "_check_x_scope_id",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "referenced_object": [
                    "Union[(Any, BaseInScope)]"
                ]
            }
        }
    },
    "pykechain-main/pykechain/models/context.py": {
        "Context.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "json": []
            }
        },
        "Context.list": {
            "name": "list",
            "location": 64,
            "return": [
                "List['Context']"
            ],
            "arguments": {
                "cls": [],
                "client": [
                    "'Client'"
                ]
            }
        },
        "Context.get": {
            "name": "get",
            "location": 69,
            "return": [
                "'Context'"
            ],
            "arguments": {
                "cls": [],
                "client": [
                    "'Client'"
                ]
            }
        },
        "Context.edit": {
            "name": "edit",
            "location": 73,
            "return": [
                "'Context'"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[Union[(str, Empty)]]"
                ],
                "description": [
                    "Optional[Union[(str, Empty)]]"
                ],
                "tags": [
                    "Optional[List[Union[(str, Empty)]]]"
                ],
                "context_group": [
                    "Optional[Union[(ContextGroup, Empty)]]"
                ],
                "scope": [
                    "Optional[Union[('Scope', ObjectID)]]"
                ],
                "options": [
                    "Optional[dict]"
                ],
                "activities": [
                    "Optional[Union[(List['Activity'], ObjectIDs)]]"
                ],
                "feature_collection": [
                    "Optional[dict]"
                ],
                "start_date": [
                    "Optional[datetime]"
                ],
                "due_date": [
                    "Optional[datetime]"
                ]
            }
        },
        "Context.link_activities": {
            "name": "link_activities",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "activities": [
                    "Optional[List[Union[('Activity', ObjectIDs)]]]"
                ]
            }
        },
        "Context.unlink_activities": {
            "name": "unlink_activities",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "activities": [
                    "Optional[List[Union[('Activity', ObjectIDs)]]]"
                ]
            }
        },
        "Context.delete": {
            "name": "delete",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/pykechain/models/expiring_download.py": {
        "ExpiringDownload.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json": [
                    "Dict"
                ]
            }
        },
        "ExpiringDownload.__repr__": {
            "name": "__repr__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpiringDownload.save_as": {
            "name": "save_as",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_dir": [
                    "Optional[str]"
                ]
            }
        },
        "ExpiringDownload.delete": {
            "name": "delete",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpiringDownload.edit": {
            "name": "edit",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expires_at": [
                    "Optional[datetime.datetime]"
                ],
                "expires_in": [
                    "Optional[int]"
                ]
            }
        },
        "ExpiringDownload.upload": {
            "name": "upload",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "content_path": []
            }
        },
        "ExpiringDownload._upload": {
            "name": "_upload",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "content_path": []
            }
        }
    },
    "pykechain-main/pykechain/models/form.py": {
        "StatusForm.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "json": []
            }
        },
        "StatusForm.__repr__": {
            "name": "__repr__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Form.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "json": []
            }
        },
        "Form.__repr__": {
            "name": "__repr__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Form.create_model": {
            "name": "create_model",
            "location": 103,
            "return": [
                "'Form'"
            ],
            "arguments": {
                "cls": [],
                "client": [
                    "'Client'"
                ],
                "name": [
                    "str"
                ],
                "scope": [
                    "Union[(Scope, ObjectID)]"
                ],
                "workflow": [
                    "Union[('Workflow', ObjectID)]"
                ],
                "contexts": [
                    "List[Union[(Context, ObjectID)]]"
                ]
            }
        },
        "Form.status_forms": {
            "name": "status_forms",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Form.is_model": {
            "name": "is_model",
            "location": 163,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.is_instance": {
            "name": "is_instance",
            "location": 168,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.is_active": {
            "name": "is_active",
            "location": 173,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.instances": {
            "name": "instances",
            "location": 181,
            "return": [
                "[List['Form']]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.instance": {
            "name": "instance",
            "location": 192,
            "return": [
                "'Form'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.edit": {
            "name": "edit",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[Union[(str, Empty)]]"
                ],
                "description": [
                    "Optional[Union[(str, Empty)]]"
                ]
            }
        },
        "Form.delete": {
            "name": "delete",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.instantiate": {
            "name": "instantiate",
            "location": 252,
            "return": [
                "'Form'"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]"
                ]
            }
        },
        "Form.clone": {
            "name": "clone",
            "location": 280,
            "return": [
                "Optional['Form']"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]"
                ],
                "target_scope": [
                    "Optional[Scope]"
                ]
            }
        },
        "Form.activate": {
            "name": "activate",
            "location": 322,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Form.deactivate": {
            "name": "deactivate",
            "location": 341,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Form.link_contexts": {
            "name": "link_contexts",
            "location": 360,
            "return": [],
            "arguments": {
                "self": [],
                "contexts": [
                    "List[Union[(Context, ObjectID)]]"
                ]
            }
        },
        "Form.unlink_contexts": {
            "name": "unlink_contexts",
            "location": 380,
            "return": [],
            "arguments": {
                "self": [],
                "contexts": [
                    "List[Union[(Context, ObjectID)]]"
                ]
            }
        },
        "Form.set_status_assignees": {
            "name": "set_status_assignees",
            "location": 400,
            "return": [],
            "arguments": {
                "self": [],
                "statuses": [
                    "List[dict]"
                ]
            }
        },
        "Form.possible_transitions": {
            "name": "possible_transitions",
            "location": 449,
            "return": [
                "List[Transition]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.apply_transition": {
            "name": "apply_transition",
            "location": 459,
            "return": [],
            "arguments": {
                "self": [],
                "transition": [
                    "Transition"
                ]
            }
        },
        "Form.has_part": {
            "name": "has_part",
            "location": 496,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "part": [
                    "Part"
                ]
            }
        },
        "Form.set_prefill_parts": {
            "name": "set_prefill_parts",
            "location": 518,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefill_parts": [
                    "dict"
                ]
            }
        },
        "Form.workflows_compatible_with_scope": {
            "name": "workflows_compatible_with_scope",
            "location": 578,
            "return": [],
            "arguments": {
                "self": [],
                "scope": [
                    "Scope"
                ]
            }
        }
    },
    "pykechain-main/pykechain/models/input_checks.py": {
        "check_type": {
            "name": "check_type",
            "location": 16,
            "return": [
                "Optional[Any]"
            ],
            "arguments": {
                "value": [
                    "Optional[Any]"
                ],
                "cls": [
                    "Any"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "check_client": {
            "name": "check_client",
            "location": 37,
            "return": [
                "'Client'"
            ],
            "arguments": {
                "value": [
                    "'Client'"
                ]
            }
        },
        "check_uuid": {
            "name": "check_uuid",
            "location": 47,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "uuid": [
                    "Optional[str]"
                ],
                "key": [
                    "Optional[str]"
                ]
            }
        },
        "check_text": {
            "name": "check_text",
            "location": 57,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "text": [
                    "Optional[str]"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "check_url": {
            "name": "check_url",
            "location": 67,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "url": [
                    "Optional[str]"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "check_list_of_text": {
            "name": "check_list_of_text",
            "location": 78,
            "return": [
                "Optional[List[str]]"
            ],
            "arguments": {
                "list_of_text": [
                    "Optional[Iterable[str]]"
                ],
                "key": [
                    "str"
                ],
                "unique": [
                    "bool"
                ]
            }
        },
        "check_list_of_dicts": {
            "name": "check_list_of_dicts",
            "location": 98,
            "return": [
                "Optional[List[Dict]]"
            ],
            "arguments": {
                "list_of_dicts": [
                    "Optional[Iterable[Dict]]"
                ],
                "key": [
                    "str"
                ],
                "fields": [
                    "Optional[List[str]]"
                ]
            }
        },
        "check_enum": {
            "name": "check_enum",
            "location": 142,
            "return": [
                "Optional[Any]"
            ],
            "arguments": {
                "value": [
                    "Optional[Any]"
                ],
                "enum": [
                    "type(Enum)"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "check_datetime": {
            "name": "check_datetime",
            "location": 155,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "dt": [
                    "Optional[Union[(datetime, str)]]"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "check_base": {
            "name": "check_base",
            "location": 176,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "obj": [
                    "Optional[Any]"
                ],
                "cls": [
                    "Optional[type(object)]"
                ],
                "key": [
                    "Optional[str]"
                ],
                "method": [
                    "Optional[Callable]"
                ]
            }
        },
        "check_user": {
            "name": "check_user",
            "location": 220,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "obj": [
                    "Optional[Any]"
                ],
                "cls": [
                    "Optional[type(object)]"
                ],
                "key": [
                    "Optional[str]"
                ],
                "method": [
                    "Optional[Callable]"
                ]
            }
        },
        "check_list_of_base": {
            "name": "check_list_of_base",
            "location": 253,
            "return": [
                "Optional[List[str]]"
            ],
            "arguments": {
                "objects": [
                    "Optional[List[Any]]"
                ],
                "cls": [
                    "Optional[type(object)]"
                ],
                "key": [
                    "Optional[str]"
                ],
                "method": [
                    "Optional[Callable]"
                ]
            }
        },
        "check_json": {
            "name": "check_json",
            "location": 295,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "Union[(dict, list)]"
                ],
                "schema": [
                    "dict"
                ],
                "key": [
                    "Optional[str]"
                ]
            }
        },
        "check_empty": {
            "name": "check_empty",
            "location": 311,
            "return": [],
            "arguments": {
                "value": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "pykechain-main/pykechain/models/notification.py": {
        "Notification.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json": [
                    "Dict"
                ]
            }
        },
        "Notification.__repr__": {
            "name": "__repr__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Notification.get_recipient_users": {
            "name": "get_recipient_users",
            "location": 55,
            "return": [
                "List['User']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notification.get_from_user": {
            "name": "get_from_user",
            "location": 63,
            "return": [
                "'User'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notification.get_team": {
            "name": "get_team",
            "location": 69,
            "return": [
                "'Team'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notification.delete": {
            "name": "delete",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Notification.edit": {
            "name": "edit",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subject": [
                    "Optional[Union[(str, Empty)]]"
                ],
                "message": [
                    "Optional[Union[(str, Empty)]]"
                ],
                "status": [
                    "Optional[Union[(NotificationStatus, Empty)]]"
                ],
                "recipients": [
                    "Optional[Union[(List[Union[('User', str, int)]], Empty)]]"
                ],
                "team": [
                    "Optional[Union[('Team', str, Empty)]]"
                ],
                "from_user": [
                    "Optional[Union[('User', str, Empty)]]"
                ],
                "event": [
                    "Optional[Union[(NotificationEvent, Empty)]]"
                ],
                "channel": [
                    "Optional[Union[(NotificationChannels, Empty)]]"
                ]
            }
        }
    },
    "pykechain-main/pykechain/models/part.py": {
        "Part.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "json": [
                    "Dict"
                ]
            }
        },
        "Part.__call__": {
            "name": "__call__",
            "location": 110,
            "return": [
                "'Part'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.refresh": {
            "name": "refresh",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "json": [
                    "Optional[Dict]"
                ],
                "url": [
                    "Optional[str]"
                ],
                "extra_params": [
                    "Optional[Dict]"
                ]
            }
        },
        "Part.property": {
            "name": "property",
            "location": 147,
            "return": [
                "'AnyProperty'"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Part.scope": {
            "name": "scope",
            "location": 173,
            "return": [
                "'Scope'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.parent": {
            "name": "parent",
            "location": 184,
            "return": [
                "'Part'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.children": {
            "name": "children",
            "location": 200,
            "return": [
                "Union[('PartSet', List['Part'])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.child": {
            "name": "child",
            "location": 243,
            "return": [
                "'Part'"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]"
                ],
                "pk": [
                    "Optional[str]"
                ]
            }
        },
        "Part.populate_descendants": {
            "name": "populate_descendants",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "int"
                ]
            }
        },
        "Part.all_children": {
            "name": "all_children",
            "location": 328,
            "return": [
                "List['Part']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.siblings": {
            "name": "siblings",
            "location": 339,
            "return": [
                "Union[('PartSet', List['Part'])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.model": {
            "name": "model",
            "location": 362,
            "return": [
                "'Part'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.instances": {
            "name": "instances",
            "location": 385,
            "return": [
                "Union[('PartSet', List['Part'])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.instance": {
            "name": "instance",
            "location": 416,
            "return": [
                "'Part'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.count_instances": {
            "name": "count_instances",
            "location": 437,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.count_children": {
            "name": "count_children",
            "location": 466,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.edit": {
            "name": "edit",
            "location": 479,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[Union[(str, Empty)]]"
                ],
                "description": [
                    "Optional[Union[(str, Empty)]]"
                ]
            }
        },
        "Part.proxy_model": {
            "name": "proxy_model",
            "location": 548,
            "return": [
                "'Part'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.add": {
            "name": "add",
            "location": 581,
            "return": [
                "'Part'"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "'Part'"
                ]
            }
        },
        "Part.add_to": {
            "name": "add_to",
            "location": 614,
            "return": [
                "'Part'"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "'Part'"
                ]
            }
        },
        "Part.add_model": {
            "name": "add_model",
            "location": 648,
            "return": [
                "'Part'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.add_proxy_to": {
            "name": "add_proxy_to",
            "location": 668,
            "return": [
                "'Part'"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "'Part'"
                ],
                "name": [
                    "str"
                ],
                "multiplicity": [
                    "Multiplicity"
                ]
            }
        },
        "Part.add_property": {
            "name": "add_property",
            "location": 710,
            "return": [
                "'AnyProperty'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part._parse_update_dict": {
            "name": "_parse_update_dict",
            "location": 724,
            "return": [
                "Tuple[(List[Dict], List[Dict], Dict)]"
            ],
            "arguments": {
                "part": [
                    "'Part'"
                ],
                "properties_fvalues": [
                    "List[Dict[(str, Any)]]"
                ],
                "update_dict": [
                    "Dict"
                ],
                "creating": [
                    "bool"
                ]
            }
        },
        "Part.add_with_properties": {
            "name": "add_with_properties",
            "location": 768,
            "return": [
                "'Part'"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "'Part'"
                ],
                "name": [
                    "Optional[str]"
                ],
                "update_dict": [
                    "Optional[Dict]"
                ],
                "properties_fvalues": [
                    "Optional[List[Dict]]"
                ]
            }
        },
        "Part.clone": {
            "name": "clone",
            "location": 874,
            "return": [
                "'Part'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.copy": {
            "name": "copy",
            "location": 905,
            "return": [
                "'Part'"
            ],
            "arguments": {
                "self": [],
                "target_parent": [
                    "'Part'"
                ],
                "name": [
                    "Optional[str]"
                ],
                "include_children": [
                    "bool"
                ],
                "include_instances": [
                    "bool"
                ]
            }
        },
        "Part.move": {
            "name": "move",
            "location": 965,
            "return": [
                "'Part'"
            ],
            "arguments": {
                "self": [],
                "target_parent": [
                    "'Part'"
                ],
                "name": [
                    "Optional[str]"
                ],
                "include_children": [
                    "bool"
                ],
                "include_instances": [
                    "bool"
                ]
            }
        },
        "Part.update": {
            "name": "update",
            "location": 1014,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]"
                ],
                "update_dict": [
                    "Optional[Dict]"
                ],
                "properties_fvalues": [
                    "Optional[List[Dict]]"
                ]
            }
        },
        "Part.delete": {
            "name": "delete",
            "location": 1101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.order_properties": {
            "name": "order_properties",
            "location": 1114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "property_list": [
                    "Optional[List[Union[('AnyProperty', str)]]]"
                ]
            }
        },
        "Part._repr_html_": {
            "name": "_repr_html_",
            "location": 1172,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.as_dict": {
            "name": "as_dict",
            "location": 1200,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/pykechain/models/part2.py": {},
    "pykechain-main/pykechain/models/partset.py": {
        "PartSet.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "parts": [
                    "Iterable[Part]"
                ]
            }
        },
        "PartSet.__repr__": {
            "name": "__repr__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PartSet.__iter__": {
            "name": "__iter__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PartSet.__len__": {
            "name": "__len__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PartSet.__getitem__": {
            "name": "__getitem__",
            "location": 29,
            "return": [
                "Part"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int"
                ]
            }
        },
        "PartSet._repr_html_": {
            "name": "_repr_html_",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/pykechain/models/property.py": {
        "Property.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "json": []
            }
        },
        "Property._options_valid": {
            "name": "_options_valid",
            "location": 86,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Property.refresh": {
            "name": "refresh",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json": [
                    "Optional[Dict]"
                ],
                "url": [
                    "Optional[str]"
                ],
                "extra_params": [
                    "Optional"
                ]
            }
        },
        "Property.has_value": {
            "name": "has_value",
            "location": 111,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Property.use_bulk_update": {
            "name": "use_bulk_update",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Property.set_bulk_update": {
            "name": "set_bulk_update",
            "location": 139,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "Property.value": {
            "name": "value",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "Property.update_values": {
            "name": "update_values",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "client": [
                    "'Client'"
                ],
                "use_bulk_update": [
                    "bool"
                ]
            }
        },
        "Property._pend_update": {
            "name": "_pend_update",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Property._put_value": {
            "name": "_put_value",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Property.serialize_value": {
            "name": "serialize_value",
            "location": 209,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "[T]"
                ]
            }
        },
        "Property.part": {
            "name": "part",
            "location": 220,
            "return": [
                "'Part'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Property.model": {
            "name": "model",
            "location": 231,
            "return": [
                "'AnyProperty'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Property.validators": {
            "name": "validators",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validators": [
                    "Iterable[PropertyValidator]"
                ]
            }
        },
        "Property._parse_validators": {
            "name": "_parse_validators",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Property._dump_validators": {
            "name": "_dump_validators",
            "location": 293,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Property.is_valid": {
            "name": "is_valid",
            "location": 311,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Property.is_invalid": {
            "name": "is_invalid",
            "location": 331,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Property.validate": {
            "name": "validate",
            "location": 343,
            "return": [
                "List[Union[(bool, Tuple)]]"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "bool"
                ]
            }
        },
        "Property.representations": {
            "name": "representations",
            "location": 375,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Property._save_representations": {
            "name": "_save_representations",
            "location": 384,
            "return": [],
            "arguments": {
                "self": [],
                "representation_options": []
            }
        },
        "Property.create": {
            "name": "create",
            "location": 389,
            "return": [
                "'AnyProperty'"
            ],
            "arguments": {
                "cls": [],
                "json": [
                    "dict"
                ]
            }
        },
        "Property.edit": {
            "name": "edit",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]"
                ],
                "description": [
                    "Optional[str]"
                ],
                "unit": [
                    "Optional[str]"
                ],
                "options": [
                    "Optional[Dict]"
                ]
            }
        },
        "Property.delete": {
            "name": "delete",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Property.copy": {
            "name": "copy",
            "location": 501,
            "return": [
                "'Property'"
            ],
            "arguments": {
                "self": [],
                "target_part": [
                    "'Part'"
                ],
                "name": [
                    "Optional[str]"
                ]
            }
        },
        "Property.move": {
            "name": "move",
            "location": 559,
            "return": [
                "'Property'"
            ],
            "arguments": {
                "self": [],
                "target_part": [
                    "'Part'"
                ],
                "name": [
                    "Optional[str]"
                ]
            }
        }
    },
    "pykechain-main/pykechain/models/property2.py": {},
    "pykechain-main/pykechain/models/property2_activity_reference.py": {},
    "pykechain-main/pykechain/models/property2_attachment.py": {},
    "pykechain-main/pykechain/models/property2_datetime.py": {},
    "pykechain-main/pykechain/models/property2_multi_reference.py": {},
    "pykechain-main/pykechain/models/property2_selectlist.py": {},
    "pykechain-main/pykechain/models/property_attachment.py": {
        "AttachmentProperty.value": {
            "name": "value",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "AttachmentProperty.clear": {
            "name": "clear",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttachmentProperty.filename": {
            "name": "filename",
            "location": 53,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttachmentProperty.json_load": {
            "name": "json_load",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AttachmentProperty.upload": {
            "name": "upload",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ]
            }
        },
        "AttachmentProperty.save_as": {
            "name": "save_as",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "Optional[str]"
                ]
            }
        },
        "AttachmentProperty._upload_json": {
            "name": "_upload_json",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "content": [],
                "name": []
            }
        },
        "AttachmentProperty._upload_plot": {
            "name": "_upload_plot",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "figure": [],
                "name": []
            }
        },
        "AttachmentProperty._download": {
            "name": "_download",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AttachmentProperty._upload": {
            "name": "_upload",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "pykechain-main/pykechain/models/property_datetime.py": {
        "DatetimeProperty.to_datetime": {
            "name": "to_datetime",
            "location": 12,
            "return": [
                "Union[(type(None), datetime.datetime)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeProperty.to_iso_format": {
            "name": "to_iso_format",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "date_time": [
                    "datetime.datetime"
                ]
            }
        },
        "DatetimeProperty.serialize_value": {
            "name": "serialize_value",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "pykechain-main/pykechain/models/property_multi_reference.py": {
        "MultiReferenceProperty._retrieve_objects": {
            "name": "_retrieve_objects",
            "location": 26,
            "return": [
                "List[Part]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiReferenceProperty.choices": {
            "name": "choices",
            "location": 62,
            "return": [
                "List[Part]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiReferenceProperty.set_prefilters": {
            "name": "set_prefilters",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "property_models": [
                    "List[Union[(str, 'AnyProperty')]]"
                ],
                "values": [
                    "List[Any]"
                ],
                "filters_type": [
                    "List[FilterType]"
                ],
                "prefilters": [
                    "List[PropertyValueFilter]"
                ],
                "overwrite": [
                    "Optional[bool]"
                ],
                "clear": [
                    "Optional[bool]"
                ],
                "validate": [
                    "Optional[Union[(bool, Part)]]"
                ]
            }
        },
        "MultiReferenceProperty.get_prefilters": {
            "name": "get_prefilters",
            "location": 173,
            "return": [
                "Union[(List[PropertyValueFilter], Tuple[List[str]])]"
            ],
            "arguments": {
                "self": [],
                "as_lists": [
                    "Optional[bool]"
                ]
            }
        },
        "MultiReferenceProperty.set_excluded_propmodels": {
            "name": "set_excluded_propmodels",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "property_models": [
                    "List[Union[(str, 'AnyProperty')]]"
                ],
                "overwrite": [
                    "Optional[bool]"
                ],
                "validate": [
                    "Optional[Union[(bool, Part)]]"
                ]
            }
        },
        "MultiReferenceProperty.get_excluded_propmodel_ids": {
            "name": "get_excluded_propmodel_ids",
            "location": 244,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/pykechain/models/property_reference.py": {
        "ActivityReferencesProperty._retrieve_objects": {
            "name": "_retrieve_objects",
            "location": 25,
            "return": [
                "List[Activity]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScopeReferencesProperty._retrieve_objects": {
            "name": "_retrieve_objects",
            "location": 48,
            "return": [
                "List[Scope]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScopeReferencesProperty.set_prefilters": {
            "name": "set_prefilters",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefilters": [
                    "List[ScopeFilter]"
                ],
                "clear": [
                    "Optional[bool]"
                ]
            }
        },
        "ScopeReferencesProperty.get_prefilters": {
            "name": "get_prefilters",
            "location": 103,
            "return": [
                "List[ScopeFilter]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserReferencesProperty._validate_values": {
            "name": "_validate_values",
            "location": 121,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserReferencesProperty._retrieve_objects": {
            "name": "_retrieve_objects",
            "location": 144,
            "return": [
                "List[user.User]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserReferencesProperty.value_ids": {
            "name": "value_ids",
            "location": 161,
            "return": [
                "Optional[List[int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormReferencesProperty._retrieve_objects": {
            "name": "_retrieve_objects",
            "location": 179,
            "return": [
                "List[Form]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextReferencesProperty._retrieve_objects": {
            "name": "_retrieve_objects",
            "location": 202,
            "return": [
                "List[Context]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusReferencesProperty._retrieve_objects": {
            "name": "_retrieve_objects",
            "location": 225,
            "return": [
                "List[Context]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/pykechain/models/property_selectlist.py": {
        "_SelectListProperty.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "json": []
            }
        },
        "_SelectListProperty.value": {
            "name": "value",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "_SelectListProperty._check_new_value": {
            "name": "_check_new_value",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "_SelectListProperty.options": {
            "name": "options",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "options_list": []
            }
        },
        "_SelectListProperty._put_value_options": {
            "name": "_put_value_options",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "options_list": []
            }
        },
        "_SelectListProperty._save_representations": {
            "name": "_save_representations",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "representation_options": []
            }
        },
        "_SelectListProperty._put_options": {
            "name": "_put_options",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "new_options": []
            }
        },
        "SelectListProperty._check_new_value": {
            "name": "_check_new_value",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "MultiSelectListProperty._check_new_value": {
            "name": "_check_new_value",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Iterable[Any]"
                ]
            }
        }
    },
    "pykechain-main/pykechain/models/scope.py": {
        "Scope.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json": [
                    "Dict"
                ]
            }
        },
        "Scope.team": {
            "name": "team",
            "location": 112,
            "return": [
                "Optional[Team]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.options": {
            "name": "options",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "option_value": []
            }
        },
        "Scope.refresh": {
            "name": "refresh",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "json": [],
                "url": [],
                "extra_params": []
            }
        },
        "Scope.representations": {
            "name": "representations",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Scope._save_representations": {
            "name": "_save_representations",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "representation_options": []
            }
        },
        "Scope.workflow_root_process": {
            "name": "workflow_root_process",
            "location": 155,
            "return": [
                "'Activity'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.app_root_process": {
            "name": "app_root_process",
            "location": 164,
            "return": [
                "'Activity'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.catalog_root_process": {
            "name": "catalog_root_process",
            "location": 171,
            "return": [
                "'Activity'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.product_root_model": {
            "name": "product_root_model",
            "location": 180,
            "return": [
                "'Part'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.product_root_instance": {
            "name": "product_root_instance",
            "location": 189,
            "return": [
                "'Part'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.catalog_root_model": {
            "name": "catalog_root_model",
            "location": 198,
            "return": [
                "'Part'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.catalog_root_instance": {
            "name": "catalog_root_instance",
            "location": 207,
            "return": [
                "'Part'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope._update_scope_project_team": {
            "name": "_update_scope_project_team",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "action": [],
                "role": [],
                "user": []
            }
        },
        "Scope.get_project_info": {
            "name": "get_project_info",
            "location": 254,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scope.set_project_info": {
            "name": "set_project_info",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project_info": [
                    "list"
                ]
            }
        },
        "Scope.edit": {
            "name": "edit",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[Union[(str, Empty)]]"
                ],
                "description": [
                    "Optional[Union[(str, Empty)]]"
                ],
                "start_date": [
                    "Optional[Union[(datetime, Empty)]]"
                ],
                "due_date": [
                    "Optional[Union[(datetime, Empty)]]"
                ],
                "status": [
                    "Optional[Union[(str, ScopeStatus, Empty)]]"
                ],
                "category": [
                    "Optional[Union[(str, ScopeCategory, Empty)]]"
                ],
                "tags": [
                    "Optional[Union[(List[str], Empty)]]"
                ],
                "team": [
                    "Optional[Union[(Team, str, Empty)]]"
                ],
                "project_info": [
                    "Optional[Union[(List[Dict], Empty)]]"
                ],
                "options": [
                    "Optional[Union[(Dict, Empty)]]"
                ]
            }
        },
        "Scope.clone": {
            "name": "clone",
            "location": 422,
            "return": [
                "'Scope'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.delete": {
            "name": "delete",
            "location": 429,
            "return": [],
            "arguments": {
                "self": [],
                "asynchronous": []
            }
        },
        "Scope.parts": {
            "name": "parts",
            "location": 445,
            "return": [
                "List['Part']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.part": {
            "name": "part",
            "location": 454,
            "return": [
                "'Part'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.properties": {
            "name": "properties",
            "location": 461,
            "return": [
                "List['Property']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.property": {
            "name": "property",
            "location": 470,
            "return": [
                "'Property'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.model": {
            "name": "model",
            "location": 479,
            "return": [
                "'Part'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.create_model": {
            "name": "create_model",
            "location": 486,
            "return": [
                "'Part'"
            ],
            "arguments": {
                "self": [],
                "parent": [],
                "name": [],
                "multiplicity": []
            }
        },
        "Scope.create_model_with_properties": {
            "name": "create_model_with_properties",
            "location": 493,
            "return": [
                "'Part'"
            ],
            "arguments": {
                "self": [],
                "parent": [],
                "name": [],
                "multiplicity": [],
                "properties_fvalues": []
            }
        },
        "Scope.activities": {
            "name": "activities",
            "location": 517,
            "return": [
                "List['Activity']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.activity": {
            "name": "activity",
            "location": 524,
            "return": [
                "'Activity'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.create_activity": {
            "name": "create_activity",
            "location": 531,
            "return": [
                "'Activity'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.side_bar": {
            "name": "side_bar",
            "location": 538,
            "return": [
                "Optional[SideBarManager]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.set_landing_page": {
            "name": "set_landing_page",
            "location": 542,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "activity": [
                    "Union[('Activity', KEChainPages)]"
                ],
                "task_display_mode": [
                    "Optional[SubprocessDisplayMode]"
                ]
            }
        },
        "Scope.get_landing_page_url": {
            "name": "get_landing_page_url",
            "location": 579,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.services": {
            "name": "services",
            "location": 591,
            "return": [
                "List['Service']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.create_service": {
            "name": "create_service",
            "location": 600,
            "return": [
                "'Service'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.service": {
            "name": "service",
            "location": 609,
            "return": [
                "'Service'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.service_executions": {
            "name": "service_executions",
            "location": 618,
            "return": [
                "List['ServiceExecution']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.service_execution": {
            "name": "service_execution",
            "location": 627,
            "return": [
                "'ServiceExecution'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.members": {
            "name": "members",
            "location": 640,
            "return": [
                "List[Dict]"
            ],
            "arguments": {
                "self": [],
                "is_manager": [
                    "Optional[bool]"
                ],
                "is_supervisor": [
                    "Optional[bool]"
                ],
                "is_leadmember": [
                    "Optional[bool]"
                ]
            }
        },
        "Scope.add_member": {
            "name": "add_member",
            "location": 690,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member": [
                    "str"
                ]
            }
        },
        "Scope.remove_member": {
            "name": "remove_member",
            "location": 704,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member": [
                    "str"
                ]
            }
        },
        "Scope.add_manager": {
            "name": "add_manager",
            "location": 716,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "str"
                ]
            }
        },
        "Scope.remove_manager": {
            "name": "remove_manager",
            "location": 728,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "str"
                ]
            }
        },
        "Scope.add_leadmember": {
            "name": "add_leadmember",
            "location": 740,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "leadmember": [
                    "str"
                ]
            }
        },
        "Scope.remove_leadmember": {
            "name": "remove_leadmember",
            "location": 752,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "leadmember": [
                    "str"
                ]
            }
        },
        "Scope.add_supervisor": {
            "name": "add_supervisor",
            "location": 766,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "supervisor": [
                    "str"
                ]
            }
        },
        "Scope.remove_supervisor": {
            "name": "remove_supervisor",
            "location": 786,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "supervisor": [
                    "str"
                ]
            }
        },
        "Scope.context": {
            "name": "context",
            "location": 811,
            "return": [
                "Context"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.contexts": {
            "name": "contexts",
            "location": 823,
            "return": [
                "List[Context]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.create_context": {
            "name": "create_context",
            "location": 835,
            "return": [
                "Context"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.forms": {
            "name": "forms",
            "location": 850,
            "return": [
                "List['Form']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.form": {
            "name": "form",
            "location": 860,
            "return": [
                "'Form'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.create_form_model": {
            "name": "create_form_model",
            "location": 870,
            "return": [
                "'Form'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.instantiate_form": {
            "name": "instantiate_form",
            "location": 880,
            "return": [
                "'Form'"
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "Scope.workflows": {
            "name": "workflows",
            "location": 898,
            "return": [
                "List['Workflow']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.workflow": {
            "name": "workflow",
            "location": 908,
            "return": [
                "'Workflow'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.create_workflow": {
            "name": "create_workflow",
            "location": 918,
            "return": [
                "Workflow"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.import_workflow": {
            "name": "import_workflow",
            "location": 927,
            "return": [
                "'Workflow'"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "Union[(Workflow, ObjectID)]"
                ]
            }
        }
    },
    "pykechain-main/pykechain/models/scope2.py": {},
    "pykechain-main/pykechain/models/service.py": {
        "Service.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "json": []
            }
        },
        "Service.__repr__": {
            "name": "__repr__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Service.execute": {
            "name": "execute",
            "location": 70,
            "return": [
                "'ServiceExecution'"
            ],
            "arguments": {
                "self": [],
                "interactive": [
                    "Optional[bool]"
                ]
            }
        },
        "Service.edit": {
            "name": "edit",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[Union[(str, Empty)]]"
                ],
                "description": [
                    "Optional[Union[(str, Empty)]]"
                ],
                "version": [
                    "Optional[Union[(str, Empty)]]"
                ],
                "type": [
                    "Optional[Union[(ServiceType, Empty)]]"
                ],
                "environment_version": [
                    "Optional[Union[(ServiceEnvironmentVersion, Empty)]]"
                ],
                "run_as": [
                    "Optional[Union[(ServiceScriptUser, Empty)]]"
                ],
                "trusted": [
                    "Optional[Union[(bool, Empty)]]"
                ]
            }
        },
        "Service.delete": {
            "name": "delete",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.upload": {
            "name": "upload",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "pkg_path": []
            }
        },
        "Service._upload": {
            "name": "_upload",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "pkg_path": []
            }
        },
        "Service.save_as": {
            "name": "save_as",
            "location": 225,
            "return": [],
            "arguments": {
                "self": [],
                "target_dir": []
            }
        },
        "Service.get_executions": {
            "name": "get_executions",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceExecution.__init__": {
            "name": "__init__",
            "location": 288,
            "return": [],
            "arguments": {
                "self": [],
                "json": []
            }
        },
        "ServiceExecution.__repr__": {
            "name": "__repr__",
            "location": 309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceExecution.service": {
            "name": "service",
            "location": 313,
            "return": [
                "Service"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceExecution.terminate": {
            "name": "terminate",
            "location": 319,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceExecution.get_log": {
            "name": "get_log",
            "location": 336,
            "return": [],
            "arguments": {
                "self": [],
                "target_dir": [],
                "log_filename": []
            }
        },
        "ServiceExecution.get_notebook_url": {
            "name": "get_notebook_url",
            "location": 364,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/pykechain/models/tags.py": {
        "TagsMixin.edit": {
            "name": "edit",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "TagsMixin.tags": {
            "name": "tags",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_tags": [
                    "Iterable[str]"
                ]
            }
        },
        "TagsMixin.remove_tag": {
            "name": "remove_tag",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str"
                ]
            }
        },
        "TagsMixin.add_tag": {
            "name": "add_tag",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str"
                ]
            }
        },
        "TagsMixin.has_tag": {
            "name": "has_tag",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str"
                ]
            }
        }
    },
    "pykechain-main/pykechain/models/team.py": {
        "Team.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "json": []
            }
        },
        "Team._update": {
            "name": "_update",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "resource": [],
                "update_dict": [],
                "params": []
            }
        },
        "Team.edit": {
            "name": "edit",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[Union[(str, Empty)]]"
                ],
                "description": [
                    "Optional[Union[(str, Empty)]]"
                ],
                "options": [
                    "Optional[Union[(Dict, Empty)]]"
                ],
                "is_hidden": [
                    "Optional[Union[(bool, Empty)]]"
                ]
            }
        },
        "Team.delete": {
            "name": "delete",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Team.members": {
            "name": "members",
            "location": 90,
            "return": [
                "List[Dict]"
            ],
            "arguments": {
                "self": [],
                "role": [
                    "Optional[Union[(TeamRoles, str)]]"
                ]
            }
        },
        "Team.add_members": {
            "name": "add_members",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "users": [
                    "Optional[List[Union[(User, str)]]]"
                ],
                "role": [
                    "Optional[Union[(TeamRoles, str)]]"
                ]
            }
        },
        "Team.remove_members": {
            "name": "remove_members",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "users": [
                    "Optional[List[Union[(User, str)]]]"
                ]
            }
        },
        "Team.scopes": {
            "name": "scopes",
            "location": 171,
            "return": [
                "List['Scope']"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "Optional[ScopeStatus]"
                ]
            }
        }
    },
    "pykechain-main/pykechain/models/tree_traversal.py": {
        "TreeObject.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "json": []
            }
        },
        "TreeObject.__call__": {
            "name": "__call__",
            "location": 27,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [
                    "T"
                ]
            }
        },
        "TreeObject.child": {
            "name": "child",
            "location": 31,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [
                    "T"
                ],
                "name": [
                    "Optional[str]"
                ],
                "pk": [
                    "Optional[str]"
                ]
            }
        },
        "TreeObject.parent": {
            "name": "parent",
            "location": 47,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [
                    "T"
                ]
            }
        },
        "TreeObject.siblings": {
            "name": "siblings",
            "location": 56,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "self": [
                    "T"
                ]
            }
        },
        "TreeObject.children": {
            "name": "children",
            "location": 65,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "self": [
                    "T"
                ]
            }
        },
        "TreeObject.all_children": {
            "name": "all_children",
            "location": 75,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "self": [
                    "T"
                ]
            }
        },
        "TreeObject.count_children": {
            "name": "count_children",
            "location": 91,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ]
            }
        },
        "TreeObject._populate_cached_children": {
            "name": "_populate_cached_children",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "all_descendants": [
                    "List[T]"
                ],
                "overwrite": [
                    "Optional[bool]"
                ]
            }
        }
    },
    "pykechain-main/pykechain/models/user.py": {
        "User.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "json": []
            }
        },
        "User.__repr__": {
            "name": "__repr__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.default_name": {
            "name": "default_name",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.timezone": {
            "name": "timezone",
            "location": 49,
            "return": [
                "pytz.BaseTzInfo"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.language": {
            "name": "language",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.email": {
            "name": "email",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.reset_password": {
            "name": "reset_password",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.now_in_my_timezone": {
            "name": "now_in_my_timezone",
            "location": 99,
            "return": [
                "datetime.datetime"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/pykechain/models/value_filter.py": {
        "BaseFilter.__eq__": {
            "name": "__eq__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BaseFilter.parse_options": {
            "name": "parse_options",
            "location": 32,
            "return": [
                "List['BaseFilter']"
            ],
            "arguments": {
                "cls": [],
                "options": [
                    "Dict"
                ]
            }
        },
        "BaseFilter.write_options": {
            "name": "write_options",
            "location": 44,
            "return": [
                "Dict"
            ],
            "arguments": {
                "cls": [],
                "filters": [
                    "List"
                ]
            }
        },
        "PropertyValueFilter.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "property_model": [
                    "Union[(str, 'Property')]"
                ],
                "value": [
                    "Any"
                ],
                "filter_type": [
                    "FilterType"
                ]
            }
        },
        "PropertyValueFilter.__repr__": {
            "name": "__repr__",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PropertyValueFilter.format": {
            "name": "format",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PropertyValueFilter.validate": {
            "name": "validate",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "part_model": [
                    "'Part'"
                ]
            }
        },
        "PropertyValueFilter.parse_options": {
            "name": "parse_options",
            "location": 191,
            "return": [
                "List['PropertyValueFilter']"
            ],
            "arguments": {
                "cls": [],
                "options": [
                    "Dict"
                ]
            }
        },
        "PropertyValueFilter.write_options": {
            "name": "write_options",
            "location": 216,
            "return": [
                "Dict"
            ],
            "arguments": {
                "cls": [],
                "filters": [
                    "List"
                ]
            }
        },
        "ScopeFilter.__init__": {
            "name": "__init__",
            "location": 252,
            "return": [],
            "arguments": {
                "self": [],
                "tag": [
                    "Optional[str]"
                ],
                "status": [
                    "Optional[ScopeStatus]"
                ],
                "name": [
                    "Optional[str]"
                ],
                "team": [
                    "Optional[Union[(str, 'Team')]]"
                ],
                "due_date_gte": [
                    "Optional[datetime.datetime]"
                ],
                "due_date_lte": [
                    "Optional[datetime.datetime]"
                ],
                "start_date_gte": [
                    "Optional[datetime.datetime]"
                ],
                "start_date_lte": [
                    "Optional[datetime.datetime]"
                ],
                "progress_gte": [
                    "Optional[float]"
                ],
                "progress_lte": [
                    "Optional[float]"
                ]
            }
        },
        "ScopeFilter.__repr__": {
            "name": "__repr__",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScopeFilter.parse_options": {
            "name": "parse_options",
            "location": 326,
            "return": [
                "List['ScopeFilter']"
            ],
            "arguments": {
                "cls": [],
                "options": [
                    "Dict"
                ]
            }
        },
        "ScopeFilter.write_options": {
            "name": "write_options",
            "location": 361,
            "return": [
                "Dict"
            ],
            "arguments": {
                "cls": [],
                "filters": [
                    "List"
                ]
            }
        }
    },
    "pykechain-main/pykechain/models/workflow.py": {
        "Transition.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json": []
            }
        },
        "Transition.list": {
            "name": "list",
            "location": 52,
            "return": [
                "List['Transition']"
            ],
            "arguments": {
                "cls": [],
                "client": [
                    "'Client'"
                ]
            }
        },
        "Transition.get": {
            "name": "get",
            "location": 57,
            "return": [
                "'Transition'"
            ],
            "arguments": {
                "cls": [],
                "client": [
                    "'Client'"
                ]
            }
        },
        "Status.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json": []
            }
        },
        "Status.list": {
            "name": "list",
            "location": 77,
            "return": [
                "List['Status']"
            ],
            "arguments": {
                "cls": [],
                "client": [
                    "'Client'"
                ]
            }
        },
        "Status.get": {
            "name": "get",
            "location": 82,
            "return": [
                "'Status'"
            ],
            "arguments": {
                "cls": [],
                "client": [
                    "'Client'"
                ]
            }
        },
        "Workflow.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json": []
            }
        },
        "Workflow.__repr__": {
            "name": "__repr__",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Workflow.edit": {
            "name": "edit",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "description": [
                    "str"
                ]
            }
        },
        "Workflow.list": {
            "name": "list",
            "location": 149,
            "return": [
                "List['Workflow']"
            ],
            "arguments": {
                "cls": [],
                "client": [
                    "'Client'"
                ]
            }
        },
        "Workflow.get": {
            "name": "get",
            "location": 154,
            "return": [
                "'Workflow'"
            ],
            "arguments": {
                "cls": [],
                "client": [
                    "'Client'"
                ]
            }
        },
        "Workflow.delete": {
            "name": "delete",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Workflow.create": {
            "name": "create",
            "location": 163,
            "return": [
                "'Workflow'"
            ],
            "arguments": {
                "cls": [],
                "client": [
                    "'Client'"
                ],
                "name": [
                    "str"
                ],
                "scope": [
                    "Union[('Scope', ObjectID)]"
                ],
                "category": [
                    "WorkflowCategory"
                ],
                "description": [
                    "str"
                ],
                "options": [
                    "dict"
                ],
                "active": [
                    "bool"
                ]
            }
        },
        "Workflow.status_order": {
            "name": "status_order",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "List[Union[(ObjectID, Status)]]"
                ]
            }
        },
        "Workflow.transition": {
            "name": "transition",
            "location": 237,
            "return": [
                "Transition"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "attr": [
                    "str"
                ]
            }
        },
        "Workflow.transitions": {
            "name": "transitions",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Workflow.status": {
            "name": "status",
            "location": 270,
            "return": [
                "Status"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "attr": [
                    "str"
                ]
            }
        },
        "Workflow.statuses": {
            "name": "statuses",
            "location": 289,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Workflow.activate": {
            "name": "activate",
            "location": 301,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Workflow.deactivate": {
            "name": "deactivate",
            "location": 316,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Workflow.clone": {
            "name": "clone",
            "location": 331,
            "return": [
                "'Workflow'"
            ],
            "arguments": {
                "self": [],
                "target_scope": [
                    "'Scope'"
                ],
                "name": [
                    "Optional[str]"
                ],
                "description": [
                    "Optional[str]"
                ]
            }
        },
        "Workflow.update_transition": {
            "name": "update_transition",
            "location": 367,
            "return": [
                "Transition"
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "Union[(Transition, ObjectID)]"
                ],
                "name": [
                    "Optional[str]"
                ],
                "description": [
                    "Optional[str]"
                ],
                "from_status": [
                    "Optional[List[str]]"
                ]
            }
        },
        "Workflow.delete_transition": {
            "name": "delete_transition",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "Union[(Transition, ObjectID)]"
                ]
            }
        },
        "Workflow.create_transition": {
            "name": "create_transition",
            "location": 429,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "to_status": [
                    "Union[(Status, ObjectID)]"
                ],
                "transition_type": [
                    "TransitionType"
                ],
                "from_status": [
                    "Optional[List[Union[(Status, ObjectID)]]]"
                ],
                "description": [
                    "Optional[str]"
                ]
            }
        },
        "Workflow.create_status": {
            "name": "create_status",
            "location": 469,
            "return": [
                "Status"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "category": [
                    "StatusCategory"
                ],
                "description": [
                    "Optional[str]"
                ]
            }
        },
        "Workflow.link_transitions": {
            "name": "link_transitions",
            "location": 507,
            "return": [],
            "arguments": {
                "self": [],
                "transitions": [
                    "List[Union[(Transition, ObjectID)]]"
                ]
            }
        },
        "Workflow.unlink_transitions": {
            "name": "unlink_transitions",
            "location": 527,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transitions": [
                    "List[Union[(Transition, ObjectID)]]"
                ]
            }
        }
    },
    "pykechain-main/pykechain/models/__init__.py": {},
    "pykechain-main/pykechain/models/representations/component.py": {
        "_valid_object_type": {
            "name": "_valid_object_type",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {
                "representation": [
                    "BaseRepresentation"
                ],
                "obj": [
                    "'Base'"
                ]
            }
        },
        "RepresentationsComponent.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "parent_object": [],
                "representation_options": [
                    "Dict"
                ],
                "update_method": [
                    "Callable"
                ]
            }
        },
        "RepresentationsComponent.get_representations": {
            "name": "get_representations",
            "location": 44,
            "return": [
                "List['AnyRepresentation']"
            ],
            "arguments": {
                "self": []
            }
        },
        "RepresentationsComponent.set_representations": {
            "name": "set_representations",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "representations": [
                    "List['AnyRepresentation']"
                ]
            }
        },
        "RepresentationsComponent._validate_representations": {
            "name": "_validate_representations",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "representations": [
                    "Any"
                ]
            }
        },
        "RepresentationsComponent._dump_representations": {
            "name": "_dump_representations",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/pykechain/models/representations/representations.py": {
        "DecimalPlaces.validate_representation": {
            "name": "validate_representation",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "ThousandsSeparator.validate_representation": {
            "name": "validate_representation",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "LinkTarget.validate_representation": {
            "name": "validate_representation",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "LinkTargets"
                ]
            }
        },
        "ButtonRepresentation.validate_representation": {
            "name": "validate_representation",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "SelectListRepresentations"
                ]
            }
        },
        "Autofill.validate_representation": {
            "name": "validate_representation",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "CustomIconRepresentation.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomIconRepresentation.validate_representation": {
            "name": "validate_representation",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "CustomIconRepresentation.display_mode": {
            "name": "display_mode",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "FontAwesomeMode"
                ]
            }
        },
        "GeoCoordinateRepresentation.validate_representation": {
            "name": "validate_representation",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "GeoCoordinateConfig"
                ]
            }
        },
        "SimpleConfigValueKeyRepresentation.validate_representation": {
            "name": "validate_representation",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        }
    },
    "pykechain-main/pykechain/models/representations/representation_base.py": {
        "BaseRepresentation.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "json": [],
                "value": [],
                "prop": []
            }
        },
        "BaseRepresentation.__repr__": {
            "name": "__repr__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseRepresentation.as_json": {
            "name": "as_json",
            "location": 58,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRepresentation.validate_json": {
            "name": "validate_json",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRepresentation.parse": {
            "name": "parse",
            "location": 67,
            "return": [
                "'BaseRepresentation'"
            ],
            "arguments": {
                "cls": [],
                "obj": [
                    "Any"
                ],
                "json": [
                    "Dict"
                ]
            }
        },
        "BaseRepresentation.value": {
            "name": "value",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "BaseRepresentation.validate_representation": {
            "name": "validate_representation",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        }
    },
    "pykechain-main/pykechain/models/representations/__init__.py": {},
    "pykechain-main/pykechain/models/sidebar/sidebar_base.py": {
        "SideBarItem.__repr__": {
            "name": "__repr__",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SideBarItem.refresh": {
            "name": "refresh",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json": [
                    "Optional[Dict]"
                ]
            }
        },
        "SideBarItem.edit": {
            "name": "edit",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SideBarItem.delete": {
            "name": "delete",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SideBarItem.as_dict": {
            "name": "as_dict",
            "location": 60,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/pykechain/models/sidebar/sidebar_button.py": {
        "SideBarButton.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "side_bar_manager": [
                    "'SideBarManager'"
                ],
                "json": [
                    "Optional[Dict]"
                ],
                "title": [
                    "Optional[str]"
                ],
                "icon": [
                    "Optional[str]"
                ],
                "uri": [
                    "Optional[str]"
                ],
                "alignment": [
                    "SidebarItemAlignment"
                ],
                "minimum_access_level": [
                    "SidebarAccessLevelOptions"
                ],
                "uri_target": [
                    "URITarget"
                ],
                "icon_mode": [
                    "FontAwesomeMode"
                ]
            }
        },
        "SideBarButton.as_dict": {
            "name": "as_dict",
            "location": 113,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/pykechain/models/sidebar/sidebar_card.py": {
        "SideBarCard.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "side_bar_manager": [
                    "'SideBarManager'"
                ],
                "json": [
                    "Optional[Dict]"
                ],
                "alignment": [
                    "SidebarItemAlignment"
                ],
                "minimum_access_level": [
                    "SidebarAccessLevelOptions"
                ],
                "maximum_access_level": [
                    "SidebarAccessLevelOptions"
                ],
                "display_text": [
                    "str"
                ],
                "show_close_action": [
                    "bool"
                ],
                "show_background": [
                    "bool"
                ],
                "show_action_button": [
                    "bool"
                ],
                "action_button_name": [
                    "Optional[str]"
                ],
                "action_button_uri": [
                    "Optional[str]"
                ],
                "action_button_uri_target": [
                    "Optional[str]"
                ],
                "display_text_align": [
                    "Optional[Alignment]"
                ]
            }
        },
        "SideBarCard.as_dict": {
            "name": "as_dict",
            "location": 117,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/pykechain/models/sidebar/sidebar_manager.py": {
        "SideBarManager.__new__": {
            "name": "__new__",
            "location": 39,
            "return": [],
            "arguments": {
                "cls": [],
                "scope": [
                    "'Scope'"
                ]
            }
        },
        "SideBarManager.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "scope": [
                    "'Scope'"
                ]
            }
        },
        "SideBarManager.__repr__": {
            "name": "__repr__",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SideBarManager.__iter__": {
            "name": "__iter__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SideBarManager.__len__": {
            "name": "__len__",
            "location": 87,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SideBarManager.__next__": {
            "name": "__next__",
            "location": 90,
            "return": [
                "SideBarItem"
            ],
            "arguments": {
                "self": []
            }
        },
        "SideBarManager.__getitem__": {
            "name": "__getitem__",
            "location": 93,
            "return": [
                "SideBarItem"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "SideBarManager.__enter__": {
            "name": "__enter__",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SideBarManager.__exit__": {
            "name": "__exit__",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "SideBarManager.refresh": {
            "name": "refresh",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SideBarManager.remove": {
            "name": "remove",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "SideBarManager.insert": {
            "name": "insert",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ],
                "button": [
                    "SideBarItem"
                ]
            }
        },
        "SideBarManager.create_card": {
            "name": "create_card",
            "location": 149,
            "return": [
                "SideBarCard"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "Optional[int]"
                ]
            }
        },
        "SideBarManager.create_button": {
            "name": "create_button",
            "location": 166,
            "return": [
                "SideBarButton"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "Optional[int]"
                ]
            }
        },
        "SideBarManager.add_task_button": {
            "name": "add_task_button",
            "location": 186,
            "return": [
                "SideBarButton"
            ],
            "arguments": {
                "self": [],
                "activity": [
                    "'Activity'"
                ],
                "title": [
                    "Optional[str]"
                ],
                "task_display_mode": [
                    "Optional[SubprocessDisplayMode]"
                ]
            }
        },
        "SideBarManager.add_ke_chain_page": {
            "name": "add_ke_chain_page",
            "location": 222,
            "return": [
                "SideBarButton"
            ],
            "arguments": {
                "self": [],
                "page_name": [
                    "KEChainPages"
                ],
                "title": [
                    "Optional[str]"
                ]
            }
        },
        "SideBarManager.add_external_button": {
            "name": "add_external_button",
            "location": 249,
            "return": [
                "SideBarButton"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "title": [
                    "str"
                ]
            }
        },
        "SideBarManager.add_buttons": {
            "name": "add_buttons",
            "location": 268,
            "return": [
                "List[SideBarItem]"
            ],
            "arguments": {
                "self": [],
                "buttons": [
                    "List[Dict]"
                ],
                "override_sidebar": [
                    "bool"
                ]
            }
        },
        "SideBarManager.delete_button": {
            "name": "delete_button",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "SideBarManager.override_sidebar": {
            "name": "override_sidebar",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "SideBarManager._update": {
            "name": "_update",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/pykechain/models/sidebar/__init__.py": {},
    "pykechain-main/pykechain/models/validators/effects.py": {
        "TextEffect.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "json": [],
                "text": []
            }
        },
        "TextEffect.as_json": {
            "name": "as_json",
            "location": 28,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrorTextEffect.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "json": [],
                "text": []
            }
        },
        "HelpTextEffect.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "json": [],
                "text": []
            }
        },
        "VisualEffect.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "json": [],
                "applyCss": []
            }
        },
        "VisualEffect.as_json": {
            "name": "as_json",
            "location": 101,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidVisualEffect.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "json": [],
                "applyCss": []
            }
        },
        "InvalidVisualEffect.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "json": [],
                "applyCss": []
            }
        }
    },
    "pykechain-main/pykechain/models/validators/mime_types_defaults.py": {},
    "pykechain-main/pykechain/models/validators/validators.py": {
        "NumericRangeValidator.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "json": [],
                "minvalue": [],
                "maxvalue": [],
                "stepsize": [],
                "enforce_stepsize": []
            }
        },
        "NumericRangeValidator._logic": {
            "name": "_logic",
            "location": 107,
            "return": [
                "Tuple[(Union[(bool, None)], str)]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "RequiredFieldValidator._logic": {
            "name": "_logic",
            "location": 170,
            "return": [
                "Tuple[(Union[(bool, None)], str)]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "EvenNumberValidator._logic": {
            "name": "_logic",
            "location": 219,
            "return": [
                "Tuple[(Union[(bool, None)], str)]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "OddNumberValidator._logic": {
            "name": "_logic",
            "location": 256,
            "return": [
                "Tuple[(Union[(bool, None)], str)]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "SingleReferenceValidator._logic": {
            "name": "_logic",
            "location": 286,
            "return": [
                "Tuple[(Union[(bool, None)], str)]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "RegexStringValidator.__init__": {
            "name": "__init__",
            "location": 336,
            "return": [],
            "arguments": {
                "self": [],
                "json": [],
                "pattern": []
            }
        },
        "RegexStringValidator._logic": {
            "name": "_logic",
            "location": 357,
            "return": [
                "Tuple[(Union[(bool, None)], str)]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "EmailValidator.__init__": {
            "name": "__init__",
            "location": 382,
            "return": [],
            "arguments": {
                "self": [],
                "json": []
            }
        },
        "AlwaysAllowValidator._logic": {
            "name": "_logic",
            "location": 402,
            "return": [
                "Tuple[(Union[(bool, None)], str)]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "FileSizeValidator.__init__": {
            "name": "__init__",
            "location": 436,
            "return": [],
            "arguments": {
                "self": [],
                "json": [
                    "Optional[Dict]"
                ],
                "max_size": [
                    "Optional[Union[(int, float)]]"
                ]
            }
        },
        "FileSizeValidator._logic": {
            "name": "_logic",
            "location": 458,
            "return": [
                "Tuple[(Optional[bool], Optional[str])]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[Union[(int, float)]]"
                ]
            }
        },
        "FileExtensionValidator.__init__": {
            "name": "__init__",
            "location": 509,
            "return": [],
            "arguments": {
                "self": [],
                "json": [
                    "Optional[Dict]"
                ],
                "accept": [
                    "Optional[Union[(str, List[str])]]"
                ]
            }
        },
        "FileExtensionValidator._convert_to_mimetypes": {
            "name": "_convert_to_mimetypes",
            "location": 537,
            "return": [
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "accept": [
                    "List[str]"
                ]
            }
        },
        "FileExtensionValidator._logic": {
            "name": "_logic",
            "location": 573,
            "return": [
                "Tuple[(Optional[bool], Optional[str])]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[str]"
                ]
            }
        }
    },
    "pykechain-main/pykechain/models/validators/validators_base.py": {
        "BaseValidator.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "json": []
            }
        },
        "BaseValidator.as_json": {
            "name": "as_json",
            "location": 40,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseValidator.validate_json": {
            "name": "validate_json",
            "location": 44,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseValidator.parse": {
            "name": "parse",
            "location": 49,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "json": [
                    "Dict"
                ]
            }
        },
        "PropertyValidator.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "json": []
            }
        },
        "PropertyValidator._parse_effects": {
            "name": "_parse_effects",
            "location": 89,
            "return": [
                "Any"
            ],
            "arguments": {
                "effects_json": [
                    "Optional[Dict]"
                ]
            }
        },
        "PropertyValidator.parse": {
            "name": "parse",
            "location": 102,
            "return": [
                "'PropertyValidator'"
            ],
            "arguments": {
                "cls": [],
                "json": [
                    "Dict"
                ]
            }
        },
        "PropertyValidator.as_json": {
            "name": "as_json",
            "location": 127,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "PropertyValidator.__call__": {
            "name": "__call__",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "PropertyValidator.is_valid": {
            "name": "is_valid",
            "location": 167,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "PropertyValidator.is_invalid": {
            "name": "is_invalid",
            "location": 179,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "PropertyValidator.get_reason": {
            "name": "get_reason",
            "location": 191,
            "return": [
                "AnyStr"
            ],
            "arguments": {
                "self": []
            }
        },
        "PropertyValidator._logic": {
            "name": "_logic",
            "location": 199,
            "return": [
                "Tuple[(Optional[bool], str)]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[Any]"
                ]
            }
        },
        "ValidatorEffect.__init__": {
            "name": "__init__",
            "location": 225,
            "return": [],
            "arguments": {
                "self": [],
                "json": []
            }
        },
        "ValidatorEffect.__call__": {
            "name": "__call__",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValidatorEffect.parse": {
            "name": "parse",
            "location": 235,
            "return": [
                "'ValidatorEffect'"
            ],
            "arguments": {
                "cls": [],
                "json": [
                    "Dict"
                ]
            }
        },
        "ValidatorEffect.as_json": {
            "name": "as_json",
            "location": 257,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/pykechain/models/validators/validator_schemas.py": {},
    "pykechain-main/pykechain/models/validators/__init__.py": {},
    "pykechain-main/pykechain/models/widgets/enums.py": {},
    "pykechain-main/pykechain/models/widgets/helpers.py": {
        "_retrieve_object": {
            "name": "_retrieve_object",
            "location": 35,
            "return": [
                "Union['Base']"
            ],
            "arguments": {
                "obj": [
                    "Union[('Base', str)]"
                ],
                "method": [
                    "Callable"
                ]
            }
        },
        "_retrieve_object_id": {
            "name": "_retrieve_object_id",
            "location": 66,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "obj": [
                    "Optional[Union[('Base', str)]]"
                ]
            }
        },
        "_set_title": {
            "name": "_set_title",
            "location": 93,
            "return": [
                "Tuple[(Dict, str)]"
            ],
            "arguments": {
                "meta": [
                    "Dict"
                ],
                "title": [
                    "TITLE_TYPING"
                ],
                "show_title_value": [
                    "Optional[WidgetTitleValue]"
                ]
            }
        },
        "_set_description": {
            "name": "_set_description",
            "location": 143,
            "return": [
                "Dict"
            ],
            "arguments": {
                "meta": [
                    "Dict"
                ],
                "description": [
                    "Optional[Union[(str, bool)]]"
                ]
            }
        },
        "_set_link": {
            "name": "_set_link",
            "location": 182,
            "return": [
                "Dict"
            ],
            "arguments": {
                "meta": [
                    "Dict"
                ],
                "link": [
                    "Optional[Union[(type(None), str, bool, KEChainPages)]]"
                ],
                "link_value": [
                    "Optional[CardWidgetLinkValue]"
                ],
                "link_target": [
                    "Optional[Union[(str, LinkTargets)]]"
                ]
            }
        },
        "_set_image": {
            "name": "_set_image",
            "location": 269,
            "return": [
                "Dict"
            ],
            "arguments": {
                "meta": [
                    "Dict"
                ],
                "image": [
                    "Optional['AttachmentProperty']"
                ],
                "image_fit": [
                    "Optional[Union[(str, ImageFitValue)]]"
                ]
            }
        },
        "_set_button_text": {
            "name": "_set_button_text",
            "location": 318,
            "return": [
                "Dict"
            ],
            "arguments": {
                "meta": [
                    "Dict"
                ],
                "service": [
                    "'Service'"
                ],
                "custom_button_text": [
                    "TITLE_TYPING"
                ]
            }
        },
        "_initiate_meta": {
            "name": "_initiate_meta",
            "location": 360,
            "return": [],
            "arguments": {
                "kwargs": [],
                "activity": [],
                "ignores": []
            }
        },
        "_check_prefilters": {
            "name": "_check_prefilters",
            "location": 402,
            "return": [
                "List[PropertyValueFilter]"
            ],
            "arguments": {
                "part_model": [
                    "'Part'"
                ],
                "prefilters": [
                    "Union[(Dict, List)]"
                ]
            }
        },
        "_check_excluded_propmodels": {
            "name": "_check_excluded_propmodels",
            "location": 452,
            "return": [
                "List['AnyProperty']"
            ],
            "arguments": {
                "part_model": [
                    "'Part'"
                ],
                "property_models": [
                    "List['AnyProperty']"
                ]
            }
        }
    },
    "pykechain-main/pykechain/models/widgets/widget.py": {
        "Widget.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json": [
                    "Dict"
                ],
                "manager": [
                    "'WidgetsManager'"
                ]
            }
        },
        "Widget.__repr__": {
            "name": "__repr__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Widget.title_visible": {
            "name": "title_visible",
            "location": 69,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Widget.activity": {
            "name": "activity",
            "location": 120,
            "return": [
                "'Activity'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Widget.parent": {
            "name": "parent",
            "location": 128,
            "return": [
                "'Widget'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Widget.validate_meta": {
            "name": "validate_meta",
            "location": 139,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": [],
                "meta": [
                    "Dict"
                ]
            }
        },
        "Widget.create": {
            "name": "create",
            "location": 150,
            "return": [
                "'Widget'"
            ],
            "arguments": {
                "cls": [],
                "json": [
                    "Dict"
                ]
            }
        },
        "Widget.parts": {
            "name": "parts",
            "location": 196,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Widget.associated_parts": {
            "name": "associated_parts",
            "location": 209,
            "return": [
                "(Any, Any)"
            ],
            "arguments": {
                "self": []
            }
        },
        "Widget.update_associations": {
            "name": "update_associations",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "readable_models": [
                    "Optional[List]"
                ],
                "writable_models": [
                    "Optional[List]"
                ],
                "part_instance": [
                    "Optional[Union[('Part', str)]]"
                ],
                "parent_part_instance": [
                    "Optional[Union[('Part', str)]]"
                ]
            }
        },
        "Widget.set_associations": {
            "name": "set_associations",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "readable_models": [
                    "Optional[List]"
                ],
                "writable_models": [
                    "Optional[List]"
                ],
                "part_instance": [
                    "Optional[Union[('Part', str)]]"
                ],
                "parent_part_instance": [
                    "Optional[Union[('Part', str)]]"
                ]
            }
        },
        "Widget.remove_associations": {
            "name": "remove_associations",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "models": [
                    "List[Union[('Property', str)]]"
                ]
            }
        },
        "Widget.edit": {
            "name": "edit",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "Union[(TITLE_TYPING, Empty)]"
                ],
                "meta": [
                    "Optional[Dict]"
                ]
            }
        },
        "Widget.delete": {
            "name": "delete",
            "location": 370,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Widget.copy": {
            "name": "copy",
            "location": 382,
            "return": [
                "'Widget'"
            ],
            "arguments": {
                "self": [],
                "target_activity": [
                    "'Activity'"
                ],
                "order": [
                    "Optional[int]"
                ]
            }
        },
        "Widget.move": {
            "name": "move",
            "location": 435,
            "return": [
                "'Widget'"
            ],
            "arguments": {
                "self": [],
                "target_activity": [
                    "'Activity'"
                ],
                "order": [
                    "Optional[int]"
                ]
            }
        },
        "Widget._validate_excel_export_inputs": {
            "name": "_validate_excel_export_inputs",
            "location": 455,
            "return": [
                "Tuple[(str, str, 'User')]"
            ],
            "arguments": {
                "target_dir": [
                    "str"
                ],
                "file_name": [
                    "str"
                ],
                "user": [
                    "'User'"
                ],
                "default_file_name": [
                    "Callable"
                ]
            }
        },
        "Widget.download_as_excel": {
            "name": "download_as_excel",
            "location": 490,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "target_dir": [
                    "Optional[str]"
                ],
                "file_name": [
                    "Optional[str]"
                ],
                "user": [
                    "'User'"
                ]
            }
        },
        "Widget.create._type_to_classname": {
            "name": "_type_to_classname",
            "location": 163,
            "return": [],
            "arguments": {
                "type_widget": [
                    "str"
                ]
            }
        },
        "Widget.download_as_excel.default_file_name": {
            "name": "default_file_name",
            "location": 518,
            "return": [],
            "arguments": {}
        }
    },
    "pykechain-main/pykechain/models/widgets/widgets_manager.py": {
        "WidgetsManager.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widgets": [
                    "Iterable[Widget]"
                ],
                "activity": [
                    "'Activity'"
                ]
            }
        },
        "WidgetsManager.__repr__": {
            "name": "__repr__",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WidgetsManager.__iter__": {
            "name": "__iter__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WidgetsManager.__len__": {
            "name": "__len__",
            "location": 101,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "WidgetsManager.__getitem__": {
            "name": "__getitem__",
            "location": 104,
            "return": [
                "Widget"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(int, str, Widget)]"
                ]
            }
        },
        "WidgetsManager.__contains__": {
            "name": "__contains__",
            "location": 129,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Widget"
                ]
            }
        },
        "WidgetsManager.create_widgets": {
            "name": "create_widgets",
            "location": 132,
            "return": [
                "List[Widget]"
            ],
            "arguments": {
                "self": [],
                "widgets": [
                    "List[Dict]"
                ]
            }
        },
        "WidgetsManager.create_widget": {
            "name": "create_widget",
            "location": 151,
            "return": [
                "Widget"
            ],
            "arguments": {
                "self": []
            }
        },
        "WidgetsManager.create_configured_widget": {
            "name": "create_configured_widget",
            "location": 193,
            "return": [
                "Widget"
            ],
            "arguments": {
                "self": [],
                "part": [
                    "'Part'"
                ],
                "all_readable": [
                    "Optional[bool]"
                ],
                "all_writable": [
                    "Optional[bool]"
                ],
                "readable_models": [
                    "Optional[List[Union[('AnyProperty', str)]]]"
                ],
                "writable_models": [
                    "Optional[List[Union[('AnyProperty', str)]]]"
                ]
            }
        },
        "WidgetsManager.add_supergrid_widget": {
            "name": "add_supergrid_widget",
            "location": 234,
            "return": [
                "Widget"
            ],
            "arguments": {
                "self": [],
                "part_model": [
                    "Union[('Part', str)]"
                ],
                "parent_instance": [
                    "Optional[Union[('Part', str)]]"
                ],
                "title": [
                    "TITLE_TYPING"
                ],
                "parent_widget": [
                    "Optional[Union[(Widget, str)]]"
                ],
                "new_instance": [
                    "Optional[bool]"
                ],
                "edit": [
                    "Optional[bool]"
                ],
                "clone": [
                    "Optional[bool]"
                ],
                "export": [
                    "Optional[bool]"
                ],
                "upload": [
                    "Optional[bool]"
                ],
                "delete": [
                    "Optional[bool]"
                ],
                "incomplete_rows": [
                    "Optional[bool]"
                ],
                "emphasize_new_instance": [
                    "Optional[bool]"
                ],
                "emphasize_edit": [
                    "Optional[bool]"
                ],
                "emphasize_clone": [
                    "Optional[bool]"
                ],
                "emphasize_delete": [
                    "Optional[bool]"
                ],
                "sort_property": [
                    "Optional[Union[('AnyProperty', str)]]"
                ],
                "sort_direction": [
                    "Optional[Union[(SortTable, str)]]"
                ],
                "show_name_column": [
                    "Optional[bool]"
                ],
                "show_images": [
                    "Optional[bool]"
                ],
                "readable_models": [
                    "Optional[List[Union[('AnyProperty', str)]]]"
                ],
                "writable_models": [
                    "Optional[List[Union[('AnyProperty', str)]]]"
                ],
                "all_readable": [
                    "Optional[bool]"
                ],
                "all_writable": [
                    "Optional[bool]"
                ]
            }
        },
        "WidgetsManager.add_filteredgrid_widget": {
            "name": "add_filteredgrid_widget",
            "location": 378,
            "return": [
                "Widget"
            ],
            "arguments": {
                "self": [],
                "part_model": [
                    "Union[('Part', str)]"
                ],
                "parent_instance": [
                    "Optional[Union[('Part', str)]]"
                ],
                "title": [
                    "TITLE_TYPING"
                ],
                "parent_widget": [
                    "Optional[Union[(Widget, str)]]"
                ],
                "new_instance": [
                    "Optional[bool]"
                ],
                "edit": [
                    "Optional[bool]"
                ],
                "clone": [
                    "Optional[bool]"
                ],
                "export": [
                    "Optional[bool]"
                ],
                "upload": [
                    "Optional[bool]"
                ],
                "delete": [
                    "Optional[bool]"
                ],
                "incomplete_rows": [
                    "Optional[bool]"
                ],
                "emphasize_new_instance": [
                    "Optional[bool]"
                ],
                "emphasize_edit": [
                    "Optional[bool]"
                ],
                "emphasize_clone": [
                    "Optional[bool]"
                ],
                "emphasize_delete": [
                    "Optional[bool]"
                ],
                "sort_property": [
                    "Optional[Union[('AnyProperty', str)]]"
                ],
                "sort_name": [
                    "Optional[Union[(bool, str)]]"
                ],
                "sort_direction": [
                    "Optional[Union[(SortTable, str)]]"
                ],
                "show_name_column": [
                    "Optional[bool]"
                ],
                "show_images": [
                    "Optional[bool]"
                ],
                "collapse_filters": [
                    "Optional[bool]"
                ],
                "page_size": [
                    "Optional[int]"
                ],
                "readable_models": [
                    "Optional[List[Union[('AnyProperty', str)]]]"
                ],
                "writable_models": [
                    "Optional[List[Union[('AnyProperty', str)]]]"
                ],
                "all_readable": [
                    "Optional[bool]"
                ],
                "all_writable": [
                    "Optional[bool]"
                ],
                "excluded_propmodels": [
                    "Optional[List[Union[('AnyProperty', str)]]]"
                ],
                "prefilters": [
                    "Optional[Union[(List[PropertyValueFilter], Dict)]]"
                ]
            }
        },
        "WidgetsManager.add_attachmentviewer_widget": {
            "name": "add_attachmentviewer_widget",
            "location": 562,
            "return": [
                "Widget"
            ],
            "arguments": {
                "self": [],
                "attachment_property": [
                    "Union[(str, 'AttachmentProperty')]"
                ],
                "editable": [
                    "Optional[bool]"
                ],
                "title": [
                    "TITLE_TYPING"
                ],
                "parent_widget": [
                    "Optional[Union[(Widget, str)]]"
                ],
                "alignment": [
                    "Optional[Alignment]"
                ],
                "image_fit": [
                    "Optional[Union[(ImageFitValue, str)]]"
                ],
                "show_download_button": [
                    "Optional[bool]"
                ],
                "show_full_screen_button": [
                    "Optional[bool]"
                ]
            }
        },
        "WidgetsManager.add_tasknavigationbar_widget": {
            "name": "add_tasknavigationbar_widget",
            "location": 648,
            "return": [
                "Widget"
            ],
            "arguments": {
                "self": [],
                "activities": [
                    "Union[Iterable[Dict]]"
                ],
                "alignment": [
                    "Optional[str]"
                ],
                "parent_widget": [
                    "Optional[Union[(Widget, str)]]"
                ]
            }
        },
        "WidgetsManager.add_propertygrid_widget": {
            "name": "add_propertygrid_widget",
            "location": 757,
            "return": [
                "Widget"
            ],
            "arguments": {
                "self": [],
                "part_instance": [
                    "Union[('Part', str)]"
                ],
                "title": [
                    "TITLE_TYPING"
                ],
                "max_height": [
                    "Optional[int]"
                ],
                "show_headers": [
                    "Optional[bool]"
                ],
                "show_columns": [
                    "Optional[Iterable[ShowColumnTypes]]"
                ],
                "parent_widget": [
                    "Optional[Union[(str, Widget)]]"
                ],
                "readable_models": [
                    "Optional[Iterable]"
                ],
                "writable_models": [
                    "Optional[Iterable]"
                ],
                "all_readable": [
                    "Optional[bool]"
                ],
                "all_writable": [
                    "Optional[bool]"
                ]
            }
        },
        "WidgetsManager.add_service_widget": {
            "name": "add_service_widget",
            "location": 850,
            "return": [
                "Widget"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "'Service'"
                ],
                "title": [
                    "TITLE_TYPING"
                ],
                "custom_button_text": [
                    "TITLE_TYPING"
                ],
                "emphasize_run": [
                    "Optional[bool]"
                ],
                "alignment": [
                    "Optional[Alignment]"
                ],
                "download_log": [
                    "Optional[bool]"
                ],
                "show_log": [
                    "Optional[bool]"
                ],
                "parent_widget": [
                    "Optional[Union[(Widget, str)]]"
                ]
            }
        },
        "WidgetsManager.add_html_widget": {
            "name": "add_html_widget",
            "location": 936,
            "return": [
                "Widget"
            ],
            "arguments": {
                "self": [],
                "html": [
                    "Optional[str]"
                ],
                "title": [
                    "TITLE_TYPING"
                ],
                "parent_widget": [
                    "Optional[Union[(Widget, str)]]"
                ]
            }
        },
        "WidgetsManager.add_notebook_widget": {
            "name": "add_notebook_widget",
            "location": 978,
            "return": [
                "Widget"
            ],
            "arguments": {
                "self": [],
                "notebook": [
                    "'Service'"
                ],
                "title": [
                    "TITLE_TYPING"
                ],
                "parent_widget": [
                    "Optional[Union[(Widget, str)]]"
                ]
            }
        },
        "WidgetsManager.add_metapanel_widget": {
            "name": "add_metapanel_widget",
            "location": 1034,
            "return": [
                "Widget"
            ],
            "arguments": {
                "self": [],
                "show_all": [
                    "Optional[bool]"
                ],
                "show_due_date": [
                    "Optional[bool]"
                ],
                "show_start_date": [
                    "Optional[bool]"
                ],
                "show_title": [
                    "Optional[bool]"
                ],
                "show_status": [
                    "Optional[bool]"
                ],
                "show_progress": [
                    "Optional[bool]"
                ],
                "show_assignees": [
                    "Optional[bool]"
                ],
                "show_breadcrumbs": [
                    "Optional[bool]"
                ],
                "show_menu": [
                    "Optional[bool]"
                ],
                "show_download_pdf": [
                    "Optional[bool]"
                ],
                "show_progressbar": [
                    "Optional[bool]"
                ],
                "progress_bar": [
                    "Optional[Dict]"
                ],
                "breadcrumb_root": [
                    "Optional['Activity']"
                ]
            }
        },
        "WidgetsManager.add_progress_widget": {
            "name": "add_progress_widget",
            "location": 1156,
            "return": [
                "Widget"
            ],
            "arguments": {
                "self": [],
                "height": [
                    "Optional[int]"
                ],
                "color_no_progress": [
                    "Optional[Union[(str, ProgressBarColors)]]"
                ],
                "color_completed": [
                    "Optional[Union[(str, ProgressBarColors)]]"
                ],
                "color_in_progress": [
                    "Optional[Union[(str, ProgressBarColors)]]"
                ],
                "color_in_progress_background": [
                    "Optional[Union[(str, ProgressBarColors)]]"
                ],
                "show_progress_text": [
                    "Optional[bool]"
                ]
            }
        },
        "WidgetsManager.add_multicolumn_widget": {
            "name": "add_multicolumn_widget",
            "location": 1206,
            "return": [
                "Widget"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "TITLE_TYPING"
                ]
            }
        },
        "WidgetsManager.add_scope_widget": {
            "name": "add_scope_widget",
            "location": 1235,
            "return": [
                "Widget"
            ],
            "arguments": {
                "self": [],
                "team": [
                    "Union[('Team', str)]"
                ],
                "title": [
                    "TITLE_TYPING"
                ],
                "add": [
                    "Optional[bool]"
                ],
                "edit": [
                    "Optional[bool]"
                ],
                "clone": [
                    "Optional[bool]"
                ],
                "delete": [
                    "Optional[bool]"
                ],
                "emphasize_add": [
                    "Optional[bool]"
                ],
                "emphasize_edit": [
                    "Optional[bool]"
                ],
                "emphasize_clone": [
                    "Optional[bool]"
                ],
                "emphasize_delete": [
                    "Optional[bool]"
                ],
                "show_columns": [
                    "Optional[Iterable[str]]"
                ],
                "show_all_columns": [
                    "Optional[bool]"
                ],
                "page_size": [
                    "Optional[int]"
                ],
                "tags": [
                    "Optional[Iterable[str]]"
                ],
                "sorted_column": [
                    "Optional[str]"
                ],
                "sorted_direction": [
                    "Optional[SortTable]"
                ],
                "parent_widget": [
                    "Optional[Union[(Widget, str)]]"
                ],
                "active_filter": [
                    "Optional[bool]"
                ],
                "search_filter": [
                    "Optional[bool]"
                ]
            }
        },
        "WidgetsManager.add_signature_widget": {
            "name": "add_signature_widget",
            "location": 1385,
            "return": [
                "Widget"
            ],
            "arguments": {
                "self": [],
                "attachment_property": [
                    "'AttachmentProperty'"
                ],
                "title": [
                    "TITLE_TYPING"
                ],
                "parent_widget": [
                    "Optional[Union[(Widget, str)]]"
                ],
                "custom_button_text": [
                    "Optional[Union[(bool, str)]]"
                ],
                "custom_undo_button_text": [
                    "Optional[Union[(bool, str)]]"
                ],
                "editable": [
                    "Optional[bool]"
                ],
                "show_name_and_date": [
                    "Optional[bool]"
                ]
            }
        },
        "WidgetsManager.add_card_widget": {
            "name": "add_card_widget",
            "location": 1469,
            "return": [
                "Widget"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "Optional['AttachmentProperty']"
                ],
                "title": [
                    "TITLE_TYPING"
                ],
                "parent_widget": [
                    "Optional[Union[(Widget, str)]]"
                ],
                "description": [
                    "Optional[Union[(str, bool)]]"
                ],
                "link": [
                    "Optional[Union[(type(None), str, bool, KEChainPages)]]"
                ],
                "link_value": [
                    "Optional[CardWidgetLinkValue]"
                ],
                "link_target": [
                    "Optional[Union[(str, LinkTargets)]]"
                ],
                "image_fit": [
                    "Optional[Union[(str, ImageFitValue)]]"
                ]
            }
        },
        "WidgetsManager.add_weather_widget": {
            "name": "add_weather_widget",
            "location": 1527,
            "return": [
                "Widget"
            ],
            "arguments": {
                "self": [],
                "weather_property": [
                    "'Property'"
                ],
                "autofill": [
                    "Optional[bool]"
                ],
                "title": [
                    "TITLE_TYPING"
                ],
                "parent_widget": [
                    "Optional[Union[(Widget, str)]]"
                ]
            }
        },
        "WidgetsManager.add_service_card_widget": {
            "name": "add_service_card_widget",
            "location": 1577,
            "return": [
                "Widget"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "'Service'"
                ],
                "image": [
                    "Optional['AttachmentProperty']"
                ],
                "title": [
                    "TITLE_TYPING"
                ],
                "description": [
                    "Optional[Union[str]]"
                ],
                "parent_widget": [
                    "Optional[Union[(Widget, str)]]"
                ],
                "custom_button_text": [
                    "TITLE_TYPING"
                ],
                "emphasize_run": [
                    "Optional[bool]"
                ],
                "alignment": [
                    "Optional[Alignment]"
                ],
                "link": [
                    "Optional[Union[(type(None), str, bool, KEChainPages)]]"
                ],
                "link_value": [
                    "Optional[CardWidgetLinkValue]"
                ],
                "link_target": [
                    "Optional[Union[(str, LinkTargets)]]"
                ],
                "image_fit": [
                    "Optional[Union[(ImageFitValue, str)]]"
                ]
            }
        },
        "WidgetsManager.add_dashboard_widget": {
            "name": "add_dashboard_widget",
            "location": 1672,
            "return": [
                "Widget"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "TITLE_TYPING"
                ],
                "parent_widget": [
                    "Optional[Union[(Widget, str)]]"
                ],
                "source_scopes": [
                    "Optional[DashboardWidgetSourceScopes]"
                ],
                "source_scopes_tags": [
                    "Optional[List]"
                ],
                "source_subprocess": [
                    "Optional[List]"
                ],
                "source_selected_scopes": [
                    "Optional[List]"
                ],
                "show_tasks": [
                    "Optional[List[DashboardWidgetShowTasks]]"
                ],
                "show_form_status": [
                    "Optional[List[DashboardWidgetShowForms]]"
                ],
                "show_scopes": [
                    "Optional[List[DashboardWidgetShowScopes]]"
                ],
                "no_background": [
                    "Optional[bool]"
                ],
                "show_forms": [
                    "Optional[bool]"
                ],
                "show_assignees": [
                    "Optional[bool]"
                ],
                "show_assignees_table": [
                    "Optional[bool]"
                ],
                "show_open_task_assignees": [
                    "Optional[bool]"
                ],
                "show_open_vs_closed_tasks": [
                    "Optional[bool]"
                ],
                "show_open_closed_tasks_assignees": [
                    "Optional[bool]"
                ],
                "show_form_status_per_assignees": [
                    "Optional[bool]"
                ],
                "show_assignees_for_form_statuses": [
                    "Optional[bool]"
                ],
                "show_status_category_forms": [
                    "Optional[bool]"
                ]
            }
        },
        "WidgetsManager.add_tasks_widget": {
            "name": "add_tasks_widget",
            "location": 1960,
            "return": [
                "Widget"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "TITLE_TYPING"
                ],
                "parent_widget": [
                    "Optional[Union[(Widget, str)]]"
                ],
                "add": [
                    "Optional[bool]"
                ],
                "clone": [
                    "Optional[bool]"
                ],
                "edit": [
                    "Optional[bool]"
                ],
                "delete": [
                    "Optional[bool]"
                ],
                "emphasize_add": [
                    "Optional[bool]"
                ],
                "emphasize_clone": [
                    "Optional[bool]"
                ],
                "emphasize_edit": [
                    "Optional[bool]"
                ],
                "emphasize_delete": [
                    "Optional[bool]"
                ],
                "show_my_tasks_filter": [
                    "Optional[bool]"
                ],
                "show_open_tasks_filter": [
                    "Optional[bool]"
                ],
                "show_search_filter": [
                    "Optional[bool]"
                ],
                "parent_activity": [
                    "Optional[Union[('Activity', str)]]"
                ],
                "assigned_filter": [
                    "Optional[TasksAssignmentFilterTypes]"
                ],
                "status_filter": [
                    "Optional[ActivityStatus]"
                ],
                "activity_type_filter": [
                    "Optional[ActivityType]"
                ],
                "classification_filter": [
                    "Optional[ActivityClassification]"
                ],
                "tags_filter": [
                    "Optional[List[str]]"
                ],
                "collapse_filter": [
                    "Optional[bool]"
                ],
                "show_columns": [
                    "Optional[List[TasksWidgetColumns]]"
                ],
                "sorted_column": [
                    "Optional[TasksWidgetColumns]"
                ],
                "sorted_direction": [
                    "Optional[SortTable]"
                ],
                "page_size": [
                    "Optional[int]"
                ]
            }
        },
        "WidgetsManager.add_scopemembers_widget": {
            "name": "add_scopemembers_widget",
            "location": 2135,
            "return": [
                "Widget"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "TITLE_TYPING"
                ],
                "parent_widget": [
                    "Optional[Union[(Widget, str)]]"
                ],
                "add": [
                    "Optional[bool]"
                ],
                "edit": [
                    "Optional[bool]"
                ],
                "remove": [
                    "Optional[bool]"
                ],
                "show_username_column": [
                    "Optional[bool]"
                ],
                "show_name_column": [
                    "Optional[bool]"
                ],
                "show_email_column": [
                    "Optional[bool]"
                ],
                "show_role_column": [
                    "Optional[bool]"
                ]
            }
        },
        "WidgetsManager.add_project_info_widget": {
            "name": "add_project_info_widget",
            "location": 2209,
            "return": [
                "Widget"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "TITLE_TYPING"
                ],
                "parent_widget": [
                    "Optional[Union[(Widget, str)]]"
                ]
            }
        },
        "WidgetsManager.add_projectinfo_widget": {
            "name": "add_projectinfo_widget",
            "location": 2244,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WidgetsManager.insert": {
            "name": "insert",
            "location": 2256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ],
                "widget": [
                    "Widget"
                ]
            }
        },
        "WidgetsManager.delete_widget": {
            "name": "delete_widget",
            "location": 2286,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "WidgetsManager.delete_all_widgets": {
            "name": "delete_all_widgets",
            "location": 2301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/pykechain/models/widgets/widget_models.py": {},
    "pykechain-main/pykechain/models/widgets/widget_schemas.py": {},
    "pykechain-main/pykechain/models/widgets/__init__.py": {},
    "pykechain-main/tests/classes.py": {
        "TestBetamax.cassette_name": {
            "name": "cassette_name",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBetamax.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBetamax.tearDown": {
            "name": "tearDown",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnvironmentVarGuard.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnvironmentVarGuard.__getitem__": {
            "name": "__getitem__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "envvar": []
            }
        },
        "EnvironmentVarGuard.__setitem__": {
            "name": "__setitem__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "envvar": [],
                "value": []
            }
        },
        "EnvironmentVarGuard.__delitem__": {
            "name": "__delitem__",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "envvar": []
            }
        },
        "EnvironmentVarGuard.keys": {
            "name": "keys",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnvironmentVarGuard.__iter__": {
            "name": "__iter__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnvironmentVarGuard.__len__": {
            "name": "__len__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnvironmentVarGuard.set": {
            "name": "set",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "envvar": [],
                "value": []
            }
        },
        "EnvironmentVarGuard.unset": {
            "name": "unset",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "envvar": []
            }
        },
        "EnvironmentVarGuard.copy": {
            "name": "copy",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnvironmentVarGuard.__enter__": {
            "name": "__enter__",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnvironmentVarGuard.__exit__": {
            "name": "__exit__",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/test_about.py": {
        "TestAbout.test_import": {
            "name": "test_import",
            "location": 5,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAbout.test_names": {
            "name": "test_names",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAbout.test_python_fstring": {
            "name": "test_python_fstring",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/test_activities.py": {
        "TestActivityConstruction.setUp": {
            "name": "setUp",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivityConstruction.tearDown": {
            "name": "tearDown",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivityConstruction.test_create_with_inputs": {
            "name": "test_create_with_inputs",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivityConstruction.test_create_on_scope": {
            "name": "test_create_on_scope",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivityConstruction.test_create_below_parent": {
            "name": "test_create_below_parent",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivityConstruction.test_create_with_classification": {
            "name": "test_create_with_classification",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivityConstruction.test_create_with_incorrect_classification": {
            "name": "test_create_with_incorrect_classification",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivityConstruction.test_create_with_incorrect_parent": {
            "name": "test_create_with_incorrect_parent",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivityConstruction.test_create_with_task_as_parent": {
            "name": "test_create_with_task_as_parent",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivityConstruction.test_create_with_incorrect_inputs": {
            "name": "test_create_with_incorrect_inputs",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivityConstruction.test_delete": {
            "name": "test_delete",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivityClone.setUp": {
            "name": "setUp",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivityClone.tearDown": {
            "name": "tearDown",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivityClone.test": {
            "name": "test",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivityClone.test_parent_id": {
            "name": "test_parent_id",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivityClone.test_update": {
            "name": "test_update",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivityClone.test_update_incorrect": {
            "name": "test_update_incorrect",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivityClone.test_async_via_task": {
            "name": "test_async_via_task",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivityClone.test_async_via_client": {
            "name": "test_async_via_client",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivityCloneParts.setUp": {
            "name": "setUp",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivityCloneParts.tearDown": {
            "name": "tearDown",
            "location": 322,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivityCloneParts.test": {
            "name": "test",
            "location": 331,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivityCloneParts.test_excluded_models": {
            "name": "test_excluded_models",
            "location": 352,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.setUp": {
            "name": "setUp",
            "location": 386,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.tearDown": {
            "name": "tearDown",
            "location": 393,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_retrieve_activities": {
            "name": "test_retrieve_activities",
            "location": 401,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_retrieve_single_activity": {
            "name": "test_retrieve_single_activity",
            "location": 404,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_activity_attributes": {
            "name": "test_activity_attributes",
            "location": 407,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_retrieve_unknown_activity": {
            "name": "test_retrieve_unknown_activity",
            "location": 433,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_retrieve_too_many_activity": {
            "name": "test_retrieve_too_many_activity",
            "location": 437,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_edit_activity_name": {
            "name": "test_edit_activity_name",
            "location": 442,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_edit_activity_description": {
            "name": "test_edit_activity_description",
            "location": 454,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_edit_activity_naive_dates": {
            "name": "test_edit_activity_naive_dates",
            "location": 464,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_edit_due_date_timezone_aware": {
            "name": "test_edit_due_date_timezone_aware",
            "location": 480,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_edit_activity_status": {
            "name": "test_edit_activity_status",
            "location": 486,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_datetime_with_naive_duedate_only_fails": {
            "name": "test_datetime_with_naive_duedate_only_fails",
            "location": 495,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_datetime_with_tzinfo_provides_correct_offset": {
            "name": "test_datetime_with_tzinfo_provides_correct_offset",
            "location": 503,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_edit_cascade_down": {
            "name": "test_edit_cascade_down",
            "location": 523,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_edit_activity_clearing_values": {
            "name": "test_edit_activity_clearing_values",
            "location": 549,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_retrieve_children_of_task_fails_for_task": {
            "name": "test_retrieve_children_of_task_fails_for_task",
            "location": 602,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_child": {
            "name": "test_child",
            "location": 606,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_child_invalid": {
            "name": "test_child_invalid",
            "location": 612,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_retrieve_all_children": {
            "name": "test_retrieve_all_children",
            "location": 624,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_retrieve_activity_by_id": {
            "name": "test_retrieve_activity_by_id",
            "location": 632,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_retrieve_siblings_of_a_task_in_a_subprocess": {
            "name": "test_retrieve_siblings_of_a_task_in_a_subprocess",
            "location": 639,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_retrieve_siblings_of_root": {
            "name": "test_retrieve_siblings_of_root",
            "location": 646,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_retrieve_siblings_of_a_task_in_a_subprocess_with_arguments": {
            "name": "test_retrieve_siblings_of_a_task_in_a_subprocess_with_arguments",
            "location": 652,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_activity_without_scope_id_will_fix_itself": {
            "name": "test_activity_without_scope_id_will_fix_itself",
            "location": 659,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_create_activity_with_incorrect_activity_class_fails": {
            "name": "test_create_activity_with_incorrect_activity_class_fails",
            "location": 669,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_edit_activity_assignee": {
            "name": "test_edit_activity_assignee",
            "location": 677,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_activity_retrieve_parent_of_task": {
            "name": "test_activity_retrieve_parent_of_task",
            "location": 705,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_activity_retrieve_parent_of_root": {
            "name": "test_activity_retrieve_parent_of_root",
            "location": 710,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_activity_retrieve_parent_of_a_toplevel_task_returns_workflow_root_id": {
            "name": "test_activity_retrieve_parent_of_a_toplevel_task_returns_workflow_root_id",
            "location": 715,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_activity_test_workflow_root_object": {
            "name": "test_activity_test_workflow_root_object",
            "location": 722,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_activity_retrieve_children_of_parent": {
            "name": "test_activity_retrieve_children_of_parent",
            "location": 730,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_activity_retrieve_children_of_subprocess_with_arguments": {
            "name": "test_activity_retrieve_children_of_subprocess_with_arguments",
            "location": 737,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_count_children": {
            "name": "test_count_children",
            "location": 744,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_rootlevel_activity_is_rootlevel": {
            "name": "test_rootlevel_activity_is_rootlevel",
            "location": 757,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_subtask_activity_is_not_rootlevel": {
            "name": "test_subtask_activity_is_not_rootlevel",
            "location": 766,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_activity_is_task": {
            "name": "test_activity_is_task",
            "location": 771,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_activity_is_subprocess": {
            "name": "test_activity_is_subprocess",
            "location": 777,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_activity_assignees_list": {
            "name": "test_activity_assignees_list",
            "location": 783,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_activity_assignees_list_no_assignees_gives_empty_list": {
            "name": "test_activity_assignees_list_no_assignees_gives_empty_list",
            "location": 795,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_activity_move": {
            "name": "test_activity_move",
            "location": 805,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_activity_move_under_task_parent": {
            "name": "test_activity_move_under_task_parent",
            "location": 817,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_activity_move_under_part_object": {
            "name": "test_activity_move_under_part_object",
            "location": 826,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_activity_retrieve_with_refs": {
            "name": "test_activity_retrieve_with_refs",
            "location": 836,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_activity_associated_parts": {
            "name": "test_activity_associated_parts",
            "location": 845,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_activity_associated_objects_ids": {
            "name": "test_activity_associated_objects_ids",
            "location": 867,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivities.test_activity_parts_of_specific_type": {
            "name": "test_activity_parts_of_specific_type",
            "location": 876,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivityDownloadAsPDF.test_activity_download_as_pdf": {
            "name": "test_activity_download_as_pdf",
            "location": 897,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivityDownloadAsPDF.test_activity_download_as_pdf_async": {
            "name": "test_activity_download_as_pdf_async",
            "location": 919,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivityDownloadAsPDF.test_activity_share_link": {
            "name": "test_activity_share_link",
            "location": 933,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivityDownloadAsPDF.test_activity_share_pdf": {
            "name": "test_activity_share_pdf",
            "location": 962,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivityDownloadAsPDF.test_activity_share_pdf_with_from_user": {
            "name": "test_activity_share_pdf_with_from_user",
            "location": 994,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivityDownloadAsPDF.test_activity_share_link_with_from_user": {
            "name": "test_activity_share_link_with_from_user",
            "location": 1028,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/test_associations.py": {
        "TestAssociations.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAssociations.tearDown": {
            "name": "tearDown",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAssociations.test_retrieve_associations_interface": {
            "name": "test_retrieve_associations_interface",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAssociations.test_association_attributes": {
            "name": "test_association_attributes",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAssociations.test_retrieve_associations": {
            "name": "test_retrieve_associations",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAssociations.test_retrieve_association_incorrect_inputs": {
            "name": "test_retrieve_association_incorrect_inputs",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAssociations.test_update_widget_associations": {
            "name": "test_update_widget_associations",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAssociations.test_update_associations_empty": {
            "name": "test_update_associations_empty",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAssociations.test_set_associations": {
            "name": "test_set_associations",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAssociations.test_set_associations_empty": {
            "name": "test_set_associations_empty",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAssociations.test_clear_associations": {
            "name": "test_clear_associations",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAssociations.test_remove_associations": {
            "name": "test_remove_associations",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAssociations.test_validate_widgets_input": {
            "name": "test_validate_widgets_input",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAssociations.test_validate_model_input": {
            "name": "test_validate_model_input",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAssociations.test_validate_widget_input": {
            "name": "test_validate_widget_input",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAssociations.test_readable_models": {
            "name": "test_readable_models",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAssociations.test_writable_models": {
            "name": "test_writable_models",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/test_banners.py": {
        "TestBanners.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBanners.tearDown": {
            "name": "tearDown",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBanners.test_create": {
            "name": "test_create",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBanners.test_create_empty": {
            "name": "test_create_empty",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBanners.test_create_invalid_inputs": {
            "name": "test_create_invalid_inputs",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBanners.test_delete": {
            "name": "test_delete",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBanners.test_get_banners": {
            "name": "test_get_banners",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBanners.test_get_banners_invalid_inputs": {
            "name": "test_get_banners_invalid_inputs",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBanners.test_get_banner": {
            "name": "test_get_banner",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBanners.test_get_active_banner": {
            "name": "test_get_active_banner",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBanners.test_edit": {
            "name": "test_edit",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBanners.test_edit_single_inputs": {
            "name": "test_edit_single_inputs",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBanners.test_edit_invalid_inputs": {
            "name": "test_edit_invalid_inputs",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBanners.test_edit_banner_clear_values": {
            "name": "test_edit_banner_clear_values",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/test_client.py": {
        "TestClient.setUp": {
            "name": "setUp",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClient.test_init_default_url": {
            "name": "test_init_default_url",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClient.test_init_custom_url": {
            "name": "test_init_custom_url",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClient.test_init_no_login": {
            "name": "test_init_no_login",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClient.test_init_basic_auth": {
            "name": "test_init_basic_auth",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClient.test_init_token": {
            "name": "test_init_token",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClient.test_init_no_ssl": {
            "name": "test_init_no_ssl",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClient.test_client_raises_error_with_false_url": {
            "name": "test_client_raises_error_with_false_url",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClient.test_client_from_env": {
            "name": "test_client_from_env",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClient.test_reload": {
            "name": "test_reload",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClientLive.setUp": {
            "name": "setUp",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClientLive.tearDown": {
            "name": "tearDown",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClientLive.test_login": {
            "name": "test_login",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClientLive.test_no_login": {
            "name": "test_no_login",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClientLive.test_get_current_user": {
            "name": "test_get_current_user",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClientLive.test_reload_deleted_object": {
            "name": "test_reload_deleted_object",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClientLive.test_create_scope": {
            "name": "test_create_scope",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClientLive.test_create_scope_with_team_name": {
            "name": "test_create_scope_with_team_name",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClientLive.test_create_scope_with_team_uuid": {
            "name": "test_create_scope_with_team_uuid",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClientLive.test_create_scope_no_arguments": {
            "name": "test_create_scope_no_arguments",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClientLive.test_create_scope_with_wrong_arguments": {
            "name": "test_create_scope_with_wrong_arguments",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClientLive.test_clone_scope": {
            "name": "test_clone_scope",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClientLive.test_clone_scope_with_arguments": {
            "name": "test_clone_scope_with_arguments",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClientLive.test_scope_delete": {
            "name": "test_scope_delete",
            "location": 278,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCloneScopeAsync.setUp": {
            "name": "setUp",
            "location": 290,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCloneScopeAsync.tearDown": {
            "name": "tearDown",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCloneScopeAsync.test_clone_asynchronous": {
            "name": "test_clone_asynchronous",
            "location": 304,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClientAppVersions.test_retrieve_versions": {
            "name": "test_retrieve_versions",
            "location": 328,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClientAppVersions.test_compare_versions": {
            "name": "test_compare_versions",
            "location": 338,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/test_contexts.py": {
        "TestContextSetup.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContextSetup.tearDown": {
            "name": "tearDown",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContextCreate.test_create_context": {
            "name": "test_create_context",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContexts.test_retrieve_contexts_via_client_using_scope_filter": {
            "name": "test_retrieve_contexts_via_client_using_scope_filter",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContexts.test_retrieve_single_context_via_client_with_pk_filter": {
            "name": "test_retrieve_single_context_via_client_with_pk_filter",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContexts.test_create_contexts_bound_to_an_activity": {
            "name": "test_create_contexts_bound_to_an_activity",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContexts.test_retrieve_multiple_context_via_client_using_filters": {
            "name": "test_retrieve_multiple_context_via_client_using_filters",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContexts.test_link_context_to_activity": {
            "name": "test_link_context_to_activity",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContexts.test_context_consequetive_link_many_activities": {
            "name": "test_context_consequetive_link_many_activities",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContexts.test_unlink_context_to_activity": {
            "name": "test_unlink_context_to_activity",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContexts.test_context_unlink_single_activity_when_more_activities": {
            "name": "test_context_unlink_single_activity_when_more_activities",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/test_enums.py": {
        "TestEnums.test_inheritance": {
            "name": "test_inheritance",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/test_exceptions.py": {
        "TestExceptions.test_api_error": {
            "name": "test_api_error",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExceptions.test_api_error_with_message": {
            "name": "test_api_error_with_message",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExceptions.test_api_error_with_objects": {
            "name": "test_api_error_with_objects",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExceptions.test_inheritance": {
            "name": "test_inheritance",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExceptions.test_creation": {
            "name": "test_creation",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExceptionsLive.setUp": {
            "name": "setUp",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExceptionsLive.test_api_error_with_response": {
            "name": "test_api_error_with_response",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExceptionsLive.test_api_error_with_argument_and_response": {
            "name": "test_api_error_with_argument_and_response",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/test_expiring_downloads.py": {
        "TestExpiringDownloads.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpiringDownloads.tearDown": {
            "name": "tearDown",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpiringDownloads.test_create_expiring_download_with_content": {
            "name": "test_create_expiring_download_with_content",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpiringDownloads.test_retrieve_expiring_downloads": {
            "name": "test_retrieve_expiring_downloads",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpiringDownloads.test_update_expiring_download": {
            "name": "test_update_expiring_download",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpiringDownloads.test_upload_expiring_download": {
            "name": "test_upload_expiring_download",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpiringDownloads.test_upload_wrong_content_path": {
            "name": "test_upload_wrong_content_path",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpiringDownloads.test_save_expiring_download_content": {
            "name": "test_save_expiring_download_content",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/test_forms.py": {
        "TestForms.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestForms.tearDown": {
            "name": "tearDown",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestForms.test_form_attributes": {
            "name": "test_form_attributes",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestForms.test_create": {
            "name": "test_create",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestForms.test_form_instances": {
            "name": "test_form_instances",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestForms.test_model_form_instantiation": {
            "name": "test_model_form_instantiation",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestForms.test_model_form_instantiation_from_client": {
            "name": "test_model_form_instantiation_from_client",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestForms.test_model_form_instantiation_from_scope": {
            "name": "test_model_form_instantiation_from_scope",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestForms.test_model_form_instantiation_from_wrong_scope": {
            "name": "test_model_form_instantiation_from_wrong_scope",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestForms.test_model_clone_same_scope": {
            "name": "test_model_clone_same_scope",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestForms.test_model_clone_no_target_scope": {
            "name": "test_model_clone_no_target_scope",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestForms.test_model_clone_cross_scope": {
            "name": "test_model_clone_cross_scope",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestForms.test_form_retrieve_by_name_from_scope": {
            "name": "test_form_retrieve_by_name_from_scope",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestForms.test_forms_retrieve_by_context_from_scope": {
            "name": "test_forms_retrieve_by_context_from_scope",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestForms.test_forms_retrieve_instances_by_model_from_scope": {
            "name": "test_forms_retrieve_instances_by_model_from_scope",
            "location": 261,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestForms.test_form_model_edit": {
            "name": "test_form_model_edit",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestForms.test_form_model_edit_with_instances": {
            "name": "test_form_model_edit_with_instances",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestForms.test_form_instance_edit": {
            "name": "test_form_instance_edit",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestForms.test_forms_delete": {
            "name": "test_forms_delete",
            "location": 287,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestForms.test_form_has_part_is_true": {
            "name": "test_form_has_part_is_true",
            "location": 303,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestForms.test_form_has_part_is_false": {
            "name": "test_form_has_part_is_false",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestForms.test_form_has_part_wrong_inputs": {
            "name": "test_form_has_part_wrong_inputs",
            "location": 318,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestForms.test_form_workflow_compatible_within_scope": {
            "name": "test_form_workflow_compatible_within_scope",
            "location": 322,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestForms.test_form_workflow_compatible_within_scope_wrong_inputs": {
            "name": "test_form_workflow_compatible_within_scope_wrong_inputs",
            "location": 331,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFormsBulk.setUp": {
            "name": "setUp",
            "location": 343,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFormsBulk.tearDown": {
            "name": "tearDown",
            "location": 370,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFormsBulk.test_bulk_instantiate_forms": {
            "name": "test_bulk_instantiate_forms",
            "location": 384,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFormsBulk.test_bulk_delete_forms": {
            "name": "test_bulk_delete_forms",
            "location": 393,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFormsBulk.test_bulk_delete_forms_with_wrong_input": {
            "name": "test_bulk_delete_forms_with_wrong_input",
            "location": 409,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFormsMethods.setUp": {
            "name": "setUp",
            "location": 420,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFormsMethods.tearDown": {
            "name": "tearDown",
            "location": 454,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFormsMethods.test_link_contexts_to_form_model": {
            "name": "test_link_contexts_to_form_model",
            "location": 482,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFormsMethods.test_link_contexts_to_form_instance": {
            "name": "test_link_contexts_to_form_instance",
            "location": 500,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFormsMethods.test_unlink_contexts_to_form_model": {
            "name": "test_unlink_contexts_to_form_model",
            "location": 511,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFormsMethods.test_unlink_contexts_to_form_instance": {
            "name": "test_unlink_contexts_to_form_instance",
            "location": 515,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFormsMethods.test_unlink_non_connected_contexts_from_form": {
            "name": "test_unlink_non_connected_contexts_from_form",
            "location": 528,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFormsMethods.test_set_status_assignees": {
            "name": "test_set_status_assignees",
            "location": 534,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFormsMethods.test_set_status_assignees_with_wrong_format": {
            "name": "test_set_status_assignees_with_wrong_format",
            "location": 555,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFormsMethods.test_set_status_assignees_with_wrong_input": {
            "name": "test_set_status_assignees_with_wrong_input",
            "location": 566,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFormsMethods.test_apply_transition": {
            "name": "test_apply_transition",
            "location": 580,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFormsMethods.test_apply_transition_with_wrong_input": {
            "name": "test_apply_transition_with_wrong_input",
            "location": 600,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFormsMethods.test_retrieve_possible_transitions": {
            "name": "test_retrieve_possible_transitions",
            "location": 604,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFormsPreFillPartMethods.setUp": {
            "name": "setUp",
            "location": 616,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFormsPreFillPartMethods.tearDown": {
            "name": "tearDown",
            "location": 639,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFormsPreFillPartMethods.test_form_prefill_parts_can_be_set": {
            "name": "test_form_prefill_parts_can_be_set",
            "location": 647,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFormsPreFillPartMethods.test_form_prefill_parts_with_wrong_payload": {
            "name": "test_form_prefill_parts_with_wrong_payload",
            "location": 665,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/test_helpers.py": {
        "TestGetProjectHelperNotForTravis.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetProjectHelperNotForTravis.test_get_project__not_for_travis": {
            "name": "test_get_project__not_for_travis",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetProjectHelperNotForTravis.test_get_project__force_env_use_no_vars": {
            "name": "test_get_project__force_env_use_no_vars",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetProjectHelperNotForTravis.test_get_project__force_env_use__only_url": {
            "name": "test_get_project__force_env_use__only_url",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetProjectHelperNotForTravis.test_get_project__force_env_use__url_and_token": {
            "name": "test_get_project__force_env_use__url_and_token",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetProjectHelperNotForTravis.test_get_project__force_env_use__url_token_and_name": {
            "name": "test_get_project__force_env_use__url_token_and_name",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetProjectHelperNotForTravis.test_get_project__force_env_use__other_things_provided": {
            "name": "test_get_project__force_env_use__other_things_provided",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetProjectHelperNotForTravis.test_test_get_project_with_scope_id__not_for_travis": {
            "name": "test_test_get_project_with_scope_id__not_for_travis",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetProjectHelperNotForTravis.test_get_project_from_env__not_for_travis": {
            "name": "test_get_project_from_env__not_for_travis",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetProjectHelper.test_project_raises_error__no_auth": {
            "name": "test_project_raises_error__no_auth",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetProjectHelper.test_project_raises_error__token_and_no_scope": {
            "name": "test_project_raises_error__token_and_no_scope",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetProjectHelper.test_project_raises_error__no_pass": {
            "name": "test_project_raises_error__no_pass",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetProjectHelper.test_project_raises_error__auth_and_no_scope": {
            "name": "test_project_raises_error__auth_and_no_scope",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetProjectHelper.test_project_raises_error__scope_id_and_no_pass": {
            "name": "test_project_raises_error__scope_id_and_no_pass",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetProjectHelper.test_project_raises_error__auth_and_no_url": {
            "name": "test_project_raises_error__auth_and_no_url",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetProjectHelper.test_project_raises_error__token_and_no_url": {
            "name": "test_project_raises_error__token_and_no_url",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/test_notifications.py": {
        "_TestNotification.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNotificationCreation.setUp": {
            "name": "setUp",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotificationCreation.tearDown": {
            "name": "tearDown",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotificationCreation.test_create": {
            "name": "test_create",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotificationCreation.test_create_with_inputs": {
            "name": "test_create_with_inputs",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotificationCreation.test_create_invalid_inputs": {
            "name": "test_create_invalid_inputs",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotificationCreation.test_delete_notification_from_client": {
            "name": "test_delete_notification_from_client",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotificationCreation.test_delete_notification": {
            "name": "test_delete_notification",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotifications.setUp": {
            "name": "setUp",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotifications.tearDown": {
            "name": "tearDown",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotifications.test_all_notifications_retrieval": {
            "name": "test_all_notifications_retrieval",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotifications.test_retrieve_notification": {
            "name": "test_retrieve_notification",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotifications.test_retrieve_notification_raise_not_found": {
            "name": "test_retrieve_notification_raise_not_found",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotifications.test_retrieve_notification_raise_multiple_found": {
            "name": "test_retrieve_notification_raise_multiple_found",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotifications.test_get_recipient_users": {
            "name": "test_get_recipient_users",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotifications.test_get_from_user": {
            "name": "test_get_from_user",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotifications.test_get_team": {
            "name": "test_get_team",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotifications.test_edit": {
            "name": "test_edit",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotifications.test_edit_incorrect_inputs": {
            "name": "test_edit_incorrect_inputs",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotifications.test_edit_notification_clear_values": {
            "name": "test_edit_notification_clear_values",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/test_parts.py": {
        "TestParts.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.tearDown": {
            "name": "tearDown",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_retrieve_parts": {
            "name": "test_retrieve_parts",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_retrieve_single_part": {
            "name": "test_retrieve_single_part",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_base_comparison": {
            "name": "test_base_comparison",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_base_hash": {
            "name": "test_base_hash",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_part_attributes": {
            "name": "test_part_attributes",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_retrieve_single_unknown": {
            "name": "test_retrieve_single_unknown",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_retrieve_single_multiple": {
            "name": "test_retrieve_single_multiple",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_retrieve_models": {
            "name": "test_retrieve_models",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_retrieve_model_unknown": {
            "name": "test_retrieve_model_unknown",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_retrieve_model_multiple": {
            "name": "test_retrieve_model_multiple",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_scope": {
            "name": "test_scope",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_part_set_iterator": {
            "name": "test_part_set_iterator",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_part_set_get_item_invalid": {
            "name": "test_part_set_get_item_invalid",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_wrongly_create_model": {
            "name": "test_wrongly_create_model",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_part_add_delete_part": {
            "name": "test_part_add_delete_part",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_create_part_where_parent_is_model": {
            "name": "test_create_part_where_parent_is_model",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_create_part_where_model_is_instance": {
            "name": "test_create_part_where_model_is_instance",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_create_model_where_parent_is_instance": {
            "name": "test_create_model_where_parent_is_instance",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_create_proxy_model_where_model_is_instance": {
            "name": "test_create_proxy_model_where_model_is_instance",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_create_proxy_model_where_parent_is_instance": {
            "name": "test_create_proxy_model_where_parent_is_instance",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_add_to_wrong_categories": {
            "name": "test_add_to_wrong_categories",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_part_html_table": {
            "name": "test_part_html_table",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_part_set_html_table": {
            "name": "test_part_set_html_table",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_part_set_html_categories": {
            "name": "test_part_set_html_categories",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_part_set_with_limit": {
            "name": "test_part_set_with_limit",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_part_set_with_batch": {
            "name": "test_part_set_with_batch",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_retrieve_parent_of_part": {
            "name": "test_retrieve_parent_of_part",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_retrieve_children_of_part": {
            "name": "test_retrieve_children_of_part",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_retrieve_siblings_of_part": {
            "name": "test_retrieve_siblings_of_part",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_kwargs_on_part_retrieval": {
            "name": "test_kwargs_on_part_retrieval",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_edit_part_instance_name": {
            "name": "test_edit_part_instance_name",
            "location": 289,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_edit_part_instance_description": {
            "name": "test_edit_part_instance_description",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_edit_part_model_name": {
            "name": "test_edit_part_model_name",
            "location": 319,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_edit_part_clear_values": {
            "name": "test_edit_part_clear_values",
            "location": 332,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_create_model": {
            "name": "test_create_model",
            "location": 347,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_add_proxy_to": {
            "name": "test_add_proxy_to",
            "location": 356,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_retrieve_model": {
            "name": "test_retrieve_model",
            "location": 387,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_count_instances": {
            "name": "test_count_instances",
            "location": 400,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_count_children": {
            "name": "test_count_children",
            "location": 411,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_retrieve_catalog_model_of_proxy": {
            "name": "test_retrieve_catalog_model_of_proxy",
            "location": 428,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_retrieve_non_existent_proxies_of_a_catalog_model_raises_error": {
            "name": "test_retrieve_non_existent_proxies_of_a_catalog_model_raises_error",
            "location": 465,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_retrieve_proxy_of_instance": {
            "name": "test_retrieve_proxy_of_instance",
            "location": 472,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_retrieve_part_multiplicity": {
            "name": "test_retrieve_part_multiplicity",
            "location": 479,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_retrieve_part_properties_in_a_dict": {
            "name": "test_retrieve_part_properties_in_a_dict",
            "location": 484,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_retrieve_children_of_part_with_additional_arguments": {
            "name": "test_retrieve_children_of_part_with_additional_arguments",
            "location": 496,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_retrieve_siblings_of_part_with_additional_arguments": {
            "name": "test_retrieve_siblings_of_part_with_additional_arguments",
            "location": 503,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_clone_model": {
            "name": "test_clone_model",
            "location": 511,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_clone_instance": {
            "name": "test_clone_instance",
            "location": 521,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParts.test_clone_instance_with_multiplicity_violation": {
            "name": "test_clone_instance_with_multiplicity_violation",
            "location": 530,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBulkPartsCreation.setUp": {
            "name": "setUp",
            "location": 547,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBulkPartsCreation.tearDown": {
            "name": "tearDown",
            "location": 618,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBulkPartsCreation.test_bulk_create_parts": {
            "name": "test_bulk_create_parts",
            "location": 625,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBulkPartsCreation.test_bulk_create_parts_without_name": {
            "name": "test_bulk_create_parts_without_name",
            "location": 728,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBulkPartsCreation.test_bulk_create_parts_without_parent_id": {
            "name": "test_bulk_create_parts_without_parent_id",
            "location": 733,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBulkPartsCreation.test_bulk_create_parts_without_model_id": {
            "name": "test_bulk_create_parts_without_model_id",
            "location": 738,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBulkPartsCreation.test_bulk_create_parts_without_properties": {
            "name": "test_bulk_create_parts_without_properties",
            "location": 743,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBulkPartsCreation.test_bulk_create_parts_without_property_name": {
            "name": "test_bulk_create_parts_without_property_name",
            "location": 748,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBulkPartsCreation.test_bulk_create_parts_without_property_model_id": {
            "name": "test_bulk_create_parts_without_property_model_id",
            "location": 753,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBulkPartsCreation.test_bulk_create_parts_without_property_value": {
            "name": "test_bulk_create_parts_without_property_value",
            "location": 758,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBulkPartsDeletion.setUp": {
            "name": "setUp",
            "location": 769,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBulkPartsDeletion.tearDown": {
            "name": "tearDown",
            "location": 812,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBulkPartsDeletion.test_bulk_delete_parts": {
            "name": "test_bulk_delete_parts",
            "location": 820,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBulkPartsDeletion.test_bulk_delete_parts_with_wrong_input": {
            "name": "test_bulk_delete_parts_with_wrong_input",
            "location": 833,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartsClassificationForm.setUp": {
            "name": "setUp",
            "location": 839,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartsClassificationForm.tearDown": {
            "name": "tearDown",
            "location": 843,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartsClassificationForm.test_classification_forms_exist": {
            "name": "test_classification_forms_exist",
            "location": 848,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/test_parts_copy_move.py": {
        "TestPartsCopyMove.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartsCopyMove.tearDown": {
            "name": "tearDown",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartsCopyMove.test_copy_part_model_given_name_include_children": {
            "name": "test_copy_part_model_given_name_include_children",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartsCopyMove.test_copy_part_model_include_instances": {
            "name": "test_copy_part_model_include_instances",
            "location": 356,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartsCopyMove.test_copy_part_model_empty_name_not_include_children": {
            "name": "test_copy_part_model_empty_name_not_include_children",
            "location": 442,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartsCopyMove.test_copy_internal_references_on_model": {
            "name": "test_copy_internal_references_on_model",
            "location": 462,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartsCopyMove.test_copy_internal_references_on_instance": {
            "name": "test_copy_internal_references_on_instance",
            "location": 484,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartsCopyMove.test_move_part_model": {
            "name": "test_move_part_model",
            "location": 510,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartsCopyMove.test_copy_part_instance": {
            "name": "test_copy_part_instance",
            "location": 522,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartsCopyMove.test_move_part_instance": {
            "name": "test_move_part_instance",
            "location": 595,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartsCopyMove.test_copy_different_categories": {
            "name": "test_copy_different_categories",
            "location": 627,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartsCopyMove.test_move_different_categories": {
            "name": "test_move_different_categories",
            "location": 633,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartsCopyMove.test_copy_target_parent_inside_tree": {
            "name": "test_copy_target_parent_inside_tree",
            "location": 639,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartsCopyMove.test_copy_missing_target_parent_instance": {
            "name": "test_copy_missing_target_parent_instance",
            "location": 645,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartsCopyMove.test_copy_too_many_target_parent_instances": {
            "name": "test_copy_too_many_target_parent_instances",
            "location": 657,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartsCopyMove.test_copy_attachments": {
            "name": "test_copy_attachments",
            "location": 670,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartsCopyMove.test_cross_scope_copy": {
            "name": "test_cross_scope_copy",
            "location": 699,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/test_parts_create_with_properties.py": {
        "TestPartCreateWithProperties.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartCreateWithProperties.tearDown": {
            "name": "tearDown",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartCreateWithProperties.test_create_part_with_properties_no_bulk": {
            "name": "test_create_part_with_properties_no_bulk",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartCreateWithProperties.test_create_part_with_properties_names_with_bulk": {
            "name": "test_create_part_with_properties_names_with_bulk",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartCreateWithProperties.test_create_part_with_properties_ids_with_bulk": {
            "name": "test_create_part_with_properties_ids_with_bulk",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartCreateModelWithProperties.setUp": {
            "name": "setUp",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartCreateModelWithProperties.tearDown": {
            "name": "tearDown",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartCreateModelWithProperties.test_create_model_with_properties": {
            "name": "test_create_model_with_properties",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartCreateModelWithProperties.test_create_with_invalid_properties": {
            "name": "test_create_with_invalid_properties",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/test_parts_reorder_properties.py": {
        "TestPartsReorderProperties.test_reorder_properties_using_names": {
            "name": "test_reorder_properties_using_names",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartsReorderProperties.test_reorder_properties_using_objects": {
            "name": "test_reorder_properties_using_objects",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartsReorderProperties.test_reorder_wrong_properties": {
            "name": "test_reorder_wrong_properties",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartsReorderProperties.test_reorder_not_list": {
            "name": "test_reorder_not_list",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartsReorderProperties.test_reorder_properties_of_instance": {
            "name": "test_reorder_properties_of_instance",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/test_parts_retrieve.py": {
        "TestPartRetrieve.test_get_instances_of_a_model": {
            "name": "test_get_instances_of_a_model",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartRetrieve.test_get_instances_of_an_instances_raises_notfound": {
            "name": "test_get_instances_of_an_instances_raises_notfound",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartRetrieve.test_get_single_instance_of_a_model": {
            "name": "test_get_single_instance_of_a_model",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartRetrieve.test_get_single_instance_of_a_multiplicity_model_raises_multiplefounderror": {
            "name": "test_get_single_instance_of_a_multiplicity_model_raises_multiplefounderror",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartRetrieve.test_get_single_instance_of_a_model_without_instances_raises_notfounderror": {
            "name": "test_get_single_instance_of_a_model_without_instances_raises_notfounderror",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartRetrieve.test_get_parts_with_descendants_tree": {
            "name": "test_get_parts_with_descendants_tree",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartRetrieve.test_get_models_with_descendants_tree": {
            "name": "test_get_models_with_descendants_tree",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartRetrieve.test_retrieve_parts_with_refs": {
            "name": "test_retrieve_parts_with_refs",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartRetrieve.test_child": {
            "name": "test_child",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartRetrieve.test_child_caching": {
            "name": "test_child_caching",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartRetrieve.test_child_invalid": {
            "name": "test_child_invalid",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartRetrieve.test_all_children": {
            "name": "test_all_children",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartRetrieve.test_child_after_construction": {
            "name": "test_child_after_construction",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/test_parts_update.py": {
        "TestPartUpdate.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartUpdate.tearDown": {
            "name": "tearDown",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartUpdate.test": {
            "name": "test",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartUpdate.test_model": {
            "name": "test_model",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartUpdate.test_with_missing_property": {
            "name": "test_with_missing_property",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartUpdate.test_invalid_inputs": {
            "name": "test_invalid_inputs",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartUpdate.test_with_property_ids": {
            "name": "test_with_property_ids",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartUpdate.test_with_attachment": {
            "name": "test_with_attachment",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPartUpdate.test_bulk_update": {
            "name": "test_bulk_update",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/test_properties.py": {
        "TestPropertyCreation.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyCreation.tearDown": {
            "name": "tearDown",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyCreation.test_create_and_delete_property_model": {
            "name": "test_create_and_delete_property_model",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyCreation.test_create_property_unknown_type": {
            "name": "test_create_property_unknown_type",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyCreation.test_create_property_on_instance": {
            "name": "test_create_property_on_instance",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyCreation.test_create_property_incorrect_value": {
            "name": "test_create_property_incorrect_value",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyCreation.test_creation_of_all_property_model_types": {
            "name": "test_creation_of_all_property_model_types",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProperties.setUp": {
            "name": "setUp",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProperties.tearDown": {
            "name": "tearDown",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProperties.test_retrieve_properties": {
            "name": "test_retrieve_properties",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProperties.test_retrieve_property": {
            "name": "test_retrieve_property",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProperties.test_retrieve_property_model": {
            "name": "test_retrieve_property_model",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProperties.test_property_attributes": {
            "name": "test_property_attributes",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProperties.test_retrieve_properties_with_kwargs": {
            "name": "test_retrieve_properties_with_kwargs",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProperties.test_get_property_by_name": {
            "name": "test_get_property_by_name",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProperties.test_get_property_by_uuid": {
            "name": "test_get_property_by_uuid",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProperties.test_get_invalid_property": {
            "name": "test_get_invalid_property",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProperties.test_set_property": {
            "name": "test_set_property",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProperties.test_part_of_property": {
            "name": "test_part_of_property",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProperties.test_edit_property_model_name": {
            "name": "test_edit_property_model_name",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProperties.test_edit_property_model_description": {
            "name": "test_edit_property_model_description",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProperties.test_edit_property_model_unit": {
            "name": "test_edit_property_model_unit",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProperties.test_edit_property_clear_values": {
            "name": "test_edit_property_clear_values",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProperties.test_property_type": {
            "name": "test_property_type",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProperties.test_property_unit": {
            "name": "test_property_unit",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProperties.test_property_description": {
            "name": "test_property_description",
            "location": 308,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProperties.test_copy_property_model": {
            "name": "test_copy_property_model",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProperties.test_copy_property_instance": {
            "name": "test_copy_property_instance",
            "location": 327,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProperties.test_copy_property_instance_to_model": {
            "name": "test_copy_property_instance_to_model",
            "location": 343,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProperties.test_move_property_model": {
            "name": "test_move_property_model",
            "location": 347,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProperties.test_move_property_instance": {
            "name": "test_move_property_instance",
            "location": 363,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProperties.test_retrieve_properties_with_refs": {
            "name": "test_retrieve_properties_with_refs",
            "location": 377,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertiesUpdateProperties.setUp": {
            "name": "setUp",
            "location": 403,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertiesUpdateProperties.tearDown": {
            "name": "tearDown",
            "location": 417,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertiesUpdateProperties._refresh_prop": {
            "name": "_refresh_prop",
            "location": 421,
            "return": [],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "TestPropertiesUpdateProperties.test_bulk_update": {
            "name": "test_bulk_update",
            "location": 424,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertiesUpdateProperties.test_bulk_update_manual": {
            "name": "test_bulk_update_manual",
            "location": 436,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertiesUpdateProperties.test_bulk_update_reset": {
            "name": "test_bulk_update_reset",
            "location": 452,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertiesWithReferenceProperty.setUp": {
            "name": "setUp",
            "location": 479,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertiesWithReferenceProperty.tearDown": {
            "name": "tearDown",
            "location": 494,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertiesWithReferenceProperty.test_copy_reference_property_with_options": {
            "name": "test_copy_reference_property_with_options",
            "location": 498,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/test_property_value_filter.py": {
        "TestPropertyValueFilter.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyValueFilter.tearDown": {
            "name": "tearDown",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyValueFilter.test_creation": {
            "name": "test_creation",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyValueFilter.test_repr": {
            "name": "test_repr",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyValueFilter.test_format": {
            "name": "test_format",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyValueFilter.test_validate": {
            "name": "test_validate",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyValueFilter.test_parse_options": {
            "name": "test_parse_options",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyValueFilter.test_write_options": {
            "name": "test_write_options",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyValueFilter.test__eq__": {
            "name": "test__eq__",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyFilterAllPropertyTypes.setUp": {
            "name": "setUp",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyFilterAllPropertyTypes.tearDown": {
            "name": "tearDown",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyFilterAllPropertyTypes.test_text_property_filter_in_grid": {
            "name": "test_text_property_filter_in_grid",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyFilterAllPropertyTypes.test_multi_test_property_filter_in_grid": {
            "name": "test_multi_test_property_filter_in_grid",
            "location": 218,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyFilterAllPropertyTypes.test_int_property_filter_in_grid": {
            "name": "test_int_property_filter_in_grid",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyFilterAllPropertyTypes.test_float_property_filter_in_grid": {
            "name": "test_float_property_filter_in_grid",
            "location": 276,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyFilterAllPropertyTypes.test_boolean_property_filter_in_grid": {
            "name": "test_boolean_property_filter_in_grid",
            "location": 307,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyFilterAllPropertyTypes.test_date_property_filter_in_grid": {
            "name": "test_date_property_filter_in_grid",
            "location": 338,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyFilterAllPropertyTypes.test_link_property_filter_in_grid": {
            "name": "test_link_property_filter_in_grid",
            "location": 369,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyFilterAllPropertyTypes.test_single_select_property_filter_in_grid": {
            "name": "test_single_select_property_filter_in_grid",
            "location": 400,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyFilterAllPropertyTypes.test_multi_select_property_filter_in_grid": {
            "name": "test_multi_select_property_filter_in_grid",
            "location": 433,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyFilterAllPropertyTypes.test_part_reference_property_filter_in_grid": {
            "name": "test_part_reference_property_filter_in_grid",
            "location": 466,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyFilterAllPropertyTypes.test_part_reference_property_filter_in_grid_with_commas": {
            "name": "test_part_reference_property_filter_in_grid_with_commas",
            "location": 506,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyFilterAllPropertyTypes.test_activity_reference_property_filter_in_grid": {
            "name": "test_activity_reference_property_filter_in_grid",
            "location": 546,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyFilterAllPropertyTypes.test_user_reference_property_filter_in_grid": {
            "name": "test_user_reference_property_filter_in_grid",
            "location": 584,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyFilterAllPropertyTypes.test_scope_reference_property_filter_in_grid": {
            "name": "test_scope_reference_property_filter_in_grid",
            "location": 622,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyFilterAllPropertyTypes.test_part_reference_property_prefilter": {
            "name": "test_part_reference_property_prefilter",
            "location": 660,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyFilterAllPropertyTypes.test_activity_reference_property_prefilter": {
            "name": "test_activity_reference_property_prefilter",
            "location": 678,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseTest._TestScopeFilter.setUpClass": {
            "name": "setUpClass",
            "location": 702,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseTest._TestScopeFilter.setUp": {
            "name": "setUp",
            "location": 707,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTest._TestScopeFilter.test__repr__": {
            "name": "test__repr__",
            "location": 711,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseTest._TestScopeFilter.test__eq__": {
            "name": "test__eq__",
            "location": 716,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseTest._TestScopeFilter.test_write_options": {
            "name": "test_write_options",
            "location": 723,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseTest._TestScopeFilter.test_parse_options": {
            "name": "test_parse_options",
            "location": 734,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseTest._TestScopeFilter.test_creation": {
            "name": "test_creation",
            "location": 743,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/test_retry.py": {
        "TestPykeRetry.test_short_circuit_on_self_signed_cert_error": {
            "name": "test_short_circuit_on_self_signed_cert_error",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/test_scope.py": {
        "TestScopes.test_scope_attributes": {
            "name": "test_scope_attributes",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScopes.test_retrieve_scopes": {
            "name": "test_retrieve_scopes",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScopes.test_retrieve_scope_with_refs": {
            "name": "test_retrieve_scope_with_refs",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScopes.test_retrieve_scope_with_kwargs": {
            "name": "test_retrieve_scope_with_kwargs",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScopes.test_retrieve_single_unknown": {
            "name": "test_retrieve_single_unknown",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScopes.test_retrieve_single_multiple": {
            "name": "test_retrieve_single_multiple",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScopes.test_team_property_of_scope": {
            "name": "test_team_property_of_scope",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScopes.test_side_bar": {
            "name": "test_side_bar",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScopes.test_root_properties": {
            "name": "test_root_properties",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScopeMembers._reset_members": {
            "name": "_reset_members",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScopeMembers.setUp": {
            "name": "setUp",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScopeMembers.tearDown": {
            "name": "tearDown",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScopeMembers.test_reset_members": {
            "name": "test_reset_members",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScopeMembers.test_members": {
            "name": "test_members",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScopeMembers.test_add_member": {
            "name": "test_add_member",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScopeMembers.test_add_member_by_id": {
            "name": "test_add_member_by_id",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScopeMembers.test_add_non_existing_member": {
            "name": "test_add_non_existing_member",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScopeMembers.test_remove_member": {
            "name": "test_remove_member",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScopeMembers.test_add_manager": {
            "name": "test_add_manager",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScopeMembers.test_remove_manager": {
            "name": "test_remove_manager",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScopeMembers.test_add_leadmember": {
            "name": "test_add_leadmember",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScopeMembers.test_remove_leadmember": {
            "name": "test_remove_leadmember",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScopeMembers.test_add_supervisor": {
            "name": "test_add_supervisor",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScopeMembers.test_remove_supervisor": {
            "name": "test_remove_supervisor",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScopeEdit.setUp": {
            "name": "setUp",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScopeEdit.tearDown": {
            "name": "tearDown",
            "location": 316,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScopeEdit.test_edit_scope": {
            "name": "test_edit_scope",
            "location": 323,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScopeEdit.test_edit_scope_clearing_values": {
            "name": "test_edit_scope_clearing_values",
            "location": 382,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScopeEdit.test_edit_scope_team": {
            "name": "test_edit_scope_team",
            "location": 431,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScopeEdit.test_set_landing_page": {
            "name": "test_set_landing_page",
            "location": 442,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScopeEdit.test_get_landing_page": {
            "name": "test_get_landing_page",
            "location": 452,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScopeEdit.test_set_project_info": {
            "name": "test_set_project_info",
            "location": 463,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScopeEdit.test_get_project_info": {
            "name": "test_get_project_info",
            "location": 471,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScopeEdit.test_set_project_info_with_wrong_attributes": {
            "name": "test_set_project_info_with_wrong_attributes",
            "location": 481,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScopeEdit.test_empty_project_info": {
            "name": "test_empty_project_info",
            "location": 494,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScopeMembers.test_members.get_member_names": {
            "name": "get_member_names",
            "location": 154,
            "return": [],
            "arguments": {}
        }
    },
    "pykechain-main/tests/test_services.py": {
        "TestServiceSetup._create_service": {
            "name": "_create_service",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "TestServiceSetup.setUp": {
            "name": "setUp",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServiceSetup.tearDown": {
            "name": "tearDown",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServices._create_service": {
            "name": "_create_service",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "TestServices.setUp": {
            "name": "setUp",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServices.test_retrieve_services": {
            "name": "test_retrieve_services",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServices.test_retrieve_services_with_kwargs": {
            "name": "test_retrieve_services_with_kwargs",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServices.test_retrieve_service_but_found_multiple": {
            "name": "test_retrieve_service_but_found_multiple",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServices.test_retrieve_single_service": {
            "name": "test_retrieve_single_service",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServices.test_retrieve_service_by_name": {
            "name": "test_retrieve_service_by_name",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServices.test_properties_of_service": {
            "name": "test_properties_of_service",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServices.test_debug_service_execute": {
            "name": "test_debug_service_execute",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServices.test_service_context": {
            "name": "test_service_context",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServices.test_update_service": {
            "name": "test_update_service",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServices.test_edit_service_clear_values": {
            "name": "test_edit_service_clear_values",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServices.test_retrieve_services_with_refs": {
            "name": "test_retrieve_services_with_refs",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServicesWithCustomUploadedService.test_update_service_incorrect_name": {
            "name": "test_update_service_incorrect_name",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServicesWithCustomUploadedService.test_update_service_incorrect_description": {
            "name": "test_update_service_incorrect_description",
            "location": 254,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServicesWithCustomUploadedService.test_update_service_incorrect_version": {
            "name": "test_update_service_incorrect_version",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServicesWithCustomUploadedService.test_service_refresh_from_kechain": {
            "name": "test_service_refresh_from_kechain",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServicesWithCustomUploadedService.test_get_executions_of_service": {
            "name": "test_get_executions_of_service",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServicesWithCustomUploadedService.test_create_and_delete_service": {
            "name": "test_create_and_delete_service",
            "location": 271,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServicesWithCustomUploadedService.test_create_service_with_wrong_service_type": {
            "name": "test_create_service_with_wrong_service_type",
            "location": 283,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServicesWithCustomUploadedService.test_create_service_with_wrong_environment_version": {
            "name": "test_create_service_with_wrong_environment_version",
            "location": 289,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServicesWithCustomUploadedService.test_save_service_script": {
            "name": "test_save_service_script",
            "location": 295,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServicesWithCustomUploadedService.test_upload_script_to_service": {
            "name": "test_upload_script_to_service",
            "location": 301,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServicesWithCustomUploadedService.test_upload_script_to_service_with_wrong_path": {
            "name": "test_upload_script_to_service_with_wrong_path",
            "location": 316,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServiceExecutions.test_retrieve_service_executions": {
            "name": "test_retrieve_service_executions",
            "location": 329,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServiceExecutions.test_retrieve_service_executions_with_kwargs": {
            "name": "test_retrieve_service_executions_with_kwargs",
            "location": 332,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServiceExecutions.test_retrieve_single_service_execution": {
            "name": "test_retrieve_single_service_execution",
            "location": 340,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServiceExecutions.test_retrieve_single_service_execution_but_found_none": {
            "name": "test_retrieve_single_service_execution_but_found_none",
            "location": 349,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServiceExecutions.test_retrieve_single_service_execution_but_found_multiple": {
            "name": "test_retrieve_single_service_execution_but_found_multiple",
            "location": 355,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServiceExecutions.test_service_execution_conflict": {
            "name": "test_service_execution_conflict",
            "location": 371,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServiceExecutions.test_properties_of_service_execution": {
            "name": "test_properties_of_service_execution",
            "location": 379,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServiceExecutions.test_debug_service_execution_terminate": {
            "name": "test_debug_service_execution_terminate",
            "location": 407,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServiceExecutions.test_log_of_service_execution": {
            "name": "test_log_of_service_execution",
            "location": 422,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/test_sidebar.py": {
        "TestSideBar.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSideBar.tearDown": {
            "name": "tearDown",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSideBar.test_manager": {
            "name": "test_manager",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSideBar.test_singleton_manager_per_scope": {
            "name": "test_singleton_manager_per_scope",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSideBar.test_loading_of_existing_buttons": {
            "name": "test_loading_of_existing_buttons",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSideBar.test_override_sidebar_property": {
            "name": "test_override_sidebar_property",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSideBar.test_create_button": {
            "name": "test_create_button",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSideBar.test_create_button_incorrect_arguments": {
            "name": "test_create_button_incorrect_arguments",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSideBar.test_edit_button": {
            "name": "test_edit_button",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSideBar.test_delete_button": {
            "name": "test_delete_button",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSideBar.test_get_button": {
            "name": "test_get_button",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSideBar.test_remove_button": {
            "name": "test_remove_button",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSideBar.test_insert_button": {
            "name": "test_insert_button",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSideBar.test_bulk_add_buttons": {
            "name": "test_bulk_add_buttons",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSideBar.test_context_manager": {
            "name": "test_context_manager",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSideBar.test_load_buttons": {
            "name": "test_load_buttons",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSideBar.test_attributes_button": {
            "name": "test_attributes_button",
            "location": 261,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSideBar.test_attributes_sidebar": {
            "name": "test_attributes_sidebar",
            "location": 284,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSideBar.test_alignment": {
            "name": "test_alignment",
            "location": 299,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSideBar.test_side_bar_permissions": {
            "name": "test_side_bar_permissions",
            "location": 327,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSideBar.test_sidebar_card_object": {
            "name": "test_sidebar_card_object",
            "location": 387,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSideBar.test_sidebar_card_creation_inside_the_manager": {
            "name": "test_sidebar_card_creation_inside_the_manager",
            "location": 428,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/test_tags.py": {
        "TestTags.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTags.tearDown": {
            "name": "tearDown",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTags.test_edit": {
            "name": "test_edit",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTags.test_getter": {
            "name": "test_getter",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTags.test_setter": {
            "name": "test_setter",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTags.test_setter_duplicate": {
            "name": "test_setter_duplicate",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTags.test_setter_none": {
            "name": "test_setter_none",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTags.test_setter_not_an_iterable": {
            "name": "test_setter_not_an_iterable",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTags.test_setter_not_a_string": {
            "name": "test_setter_not_a_string",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTags.test_remove_tag": {
            "name": "test_remove_tag",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTags.test_remove_tag_failure": {
            "name": "test_remove_tag_failure",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTags.test_add_tag": {
            "name": "test_add_tag",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTags.test_has_tag_true": {
            "name": "test_has_tag_true",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTags.test_has_tag_false": {
            "name": "test_has_tag_false",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTagsScope.test_scope_tags": {
            "name": "test_scope_tags",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTagsScope.test_scope_tags_may_be_emptied": {
            "name": "test_scope_tags_may_be_emptied",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTagsActivity.setUp": {
            "name": "setUp",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTagsActivity.tearDown": {
            "name": "tearDown",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTagsActivity.test_activity_tags": {
            "name": "test_activity_tags",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTagsActivity.test_activity_tags_may_be_emptied": {
            "name": "test_activity_tags_may_be_emptied",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConcreteTagsBase.edit": {
            "name": "edit",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "tags": []
            }
        }
    },
    "pykechain-main/tests/test_teams.py": {
        "TestTeams.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTeams.tearDown": {
            "name": "tearDown",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTeams.test_create_team": {
            "name": "test_create_team",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTeams.test_create_team_with_inputs": {
            "name": "test_create_team_with_inputs",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTeams.test_create_team_incorrect_inputs": {
            "name": "test_create_team_incorrect_inputs",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTeams.test_retrieve_teams": {
            "name": "test_retrieve_teams",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTeams.test_retrieve_single_unknown_team": {
            "name": "test_retrieve_single_unknown_team",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTeams.test_retrieve_single_multiple_team_raises_error": {
            "name": "test_retrieve_single_multiple_team_raises_error",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTeams.test_retrieve_single_team_with_known_teamname": {
            "name": "test_retrieve_single_team_with_known_teamname",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTeams.test_retrieve_members": {
            "name": "test_retrieve_members",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTeams.test_retrieve_managers_members_owners": {
            "name": "test_retrieve_managers_members_owners",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTeams.test_retrieve_member_with_invalid_role": {
            "name": "test_retrieve_member_with_invalid_role",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTeams.test_add_and_remove_member": {
            "name": "test_add_and_remove_member",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTeams.test_add_scope_to_team": {
            "name": "test_add_scope_to_team",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTeams.test_team_attributes": {
            "name": "test_team_attributes",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTeams.test_team_edit": {
            "name": "test_team_edit",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTeams.test_team_edit_wrong_inputs": {
            "name": "test_team_edit_wrong_inputs",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/test_users.py": {
        "TestUsers.test_retrieve_users": {
            "name": "test_retrieve_users",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUsers.test_retrieve_single_unknown_user": {
            "name": "test_retrieve_single_unknown_user",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUsers.test_user_attributes": {
            "name": "test_user_attributes",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUsers.test_retrieve_single_multiple_user_raises_error": {
            "name": "test_retrieve_single_multiple_user_raises_error",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUsers.test_retrieve_single_user_with_known_id": {
            "name": "test_retrieve_single_user_with_known_id",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUsers.test_retrieve_single_user_with_known_username": {
            "name": "test_retrieve_single_user_with_known_username",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUsers.test_retrieve_user_timezone": {
            "name": "test_retrieve_user_timezone",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUsers.test_retrieve_user_name": {
            "name": "test_retrieve_user_name",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUsers.test_retrieve_default_name": {
            "name": "test_retrieve_default_name",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUsers.test_retrieve_user_email": {
            "name": "test_retrieve_user_email",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUsers.test_retrieve_user_language": {
            "name": "test_retrieve_user_language",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUsers.test_now_in_my_timezone": {
            "name": "test_now_in_my_timezone",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCreateUsers.test_create_a_new_user": {
            "name": "test_create_a_new_user",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCreateUsers.test_create_a_new_user_and_reset_password": {
            "name": "test_create_a_new_user_and_reset_password",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/test_utils.py": {
        "TestIsURL.test_is_url_returns_true_on_valid_url": {
            "name": "test_is_url_returns_true_on_valid_url",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIsURL.test_is_url_returns_False_on_failed_url": {
            "name": "test_is_url_returns_False_on_failed_url",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIsEmail.test_is_email_returns_true_on_valid_url": {
            "name": "test_is_email_returns_true_on_valid_url",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIsEmail.test_is_email_returns_false_on_invalid_url": {
            "name": "test_is_email_returns_false_on_invalid_url",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEmpty.test_singleton": {
            "name": "test_singleton",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChunks.test_get_in_chunks": {
            "name": "test_get_in_chunks",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/test_widgets.py": {
        "TestSetTitle.test_interface": {
            "name": "test_interface",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSetTitle.test_title": {
            "name": "test_title",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSetTitle.test_show_title_value": {
            "name": "test_show_title_value",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgets.setUp": {
            "name": "setUp",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgets.tearDown": {
            "name": "tearDown",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgets.test_retrieve_widgets_in_activity": {
            "name": "test_retrieve_widgets_in_activity",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgets.test_create_widget_in_activity": {
            "name": "test_create_widget_in_activity",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgets.test_widget_attributes": {
            "name": "test_widget_attributes",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgets.test_widget_meta_attribute_is_not_None": {
            "name": "test_widget_meta_attribute_is_not_None",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgets.test_associated_parts": {
            "name": "test_associated_parts",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgets.test_bulk_update": {
            "name": "test_bulk_update",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManager.setUp": {
            "name": "setUp",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManager.test_widget_manager_creation": {
            "name": "test_widget_manager_creation",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManager.test_widget_not_found": {
            "name": "test_widget_not_found",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManager.test_activity_has_metapanel_in_widget_manager": {
            "name": "test_activity_has_metapanel_in_widget_manager",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManager.test_widget_can_be_found_with_uuid_in_widget_manager": {
            "name": "test_widget_can_be_found_with_uuid_in_widget_manager",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManager.test_widget_in_widget_manager": {
            "name": "test_widget_in_widget_manager",
            "location": 261,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManager.test_widgetmanager_has_activity_and_client": {
            "name": "test_widgetmanager_has_activity_and_client",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.setUp": {
            "name": "setUp",
            "location": 274,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.tearDown": {
            "name": "tearDown",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_new_widget_using_widget_manager": {
            "name": "test_new_widget_using_widget_manager",
            "location": 284,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_edit_widget_meta": {
            "name": "test_edit_widget_meta",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_edit_widget_title": {
            "name": "test_edit_widget_title",
            "location": 310,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_edit_widget_title_is_none": {
            "name": "test_edit_widget_title_is_none",
            "location": 326,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_edit_widget_title_and_meta": {
            "name": "test_edit_widget_title_and_meta",
            "location": 349,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_widget_title": {
            "name": "test_widget_title",
            "location": 370,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_property_grid_with_associations_using_widget_manager": {
            "name": "test_property_grid_with_associations_using_widget_manager",
            "location": 386,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_add_attachment_widget": {
            "name": "test_add_attachment_widget",
            "location": 402,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_add_attachment_widget_with_associations_using_widget_manager": {
            "name": "test_add_attachment_widget_with_associations_using_widget_manager",
            "location": 412,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_add_attachment_widget_with_editable_association": {
            "name": "test_add_attachment_widget_with_editable_association",
            "location": 424,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_add_super_grid_widget": {
            "name": "test_add_super_grid_widget",
            "location": 436,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_add_filtered_grid_widget": {
            "name": "test_add_filtered_grid_widget",
            "location": 453,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_add_filtered_grid_widget_with_prefilters_and_excluded_propmodels": {
            "name": "test_add_filtered_grid_widget_with_prefilters_and_excluded_propmodels",
            "location": 470,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_add_propertygrid_widget": {
            "name": "test_add_propertygrid_widget",
            "location": 495,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_add_signature_widget": {
            "name": "test_add_signature_widget",
            "location": 509,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_add_card_widget": {
            "name": "test_add_card_widget",
            "location": 535,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_add_card_widget_ke_chain_pages": {
            "name": "test_add_card_widget_ke_chain_pages",
            "location": 583,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_add_service_widget": {
            "name": "test_add_service_widget",
            "location": 600,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_add_html_widget": {
            "name": "test_add_html_widget",
            "location": 625,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_add_metapanel_widget": {
            "name": "test_add_metapanel_widget",
            "location": 641,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_add_metapanel_with_progress_settings": {
            "name": "test_add_metapanel_with_progress_settings",
            "location": 649,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_add_progress_widget": {
            "name": "test_add_progress_widget",
            "location": 658,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_delete_all_widgets": {
            "name": "test_delete_all_widgets",
            "location": 662,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_delete_widget": {
            "name": "test_delete_widget",
            "location": 671,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_delete_widget_stand_alone": {
            "name": "test_delete_widget_stand_alone",
            "location": 680,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_add_notebook_widget": {
            "name": "test_add_notebook_widget",
            "location": 687,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_add_multicolumn_widget": {
            "name": "test_add_multicolumn_widget",
            "location": 708,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_parent": {
            "name": "test_parent",
            "location": 731,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_add_scope_widget": {
            "name": "test_add_scope_widget",
            "location": 745,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_scope_widget_invalid_inputs": {
            "name": "test_scope_widget_invalid_inputs",
            "location": 750,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_insert_widget": {
            "name": "test_insert_widget",
            "location": 772,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_create_widgets": {
            "name": "test_create_widgets",
            "location": 808,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_add_service_card_widget": {
            "name": "test_add_service_card_widget",
            "location": 834,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_add_dashboard_widget": {
            "name": "test_add_dashboard_widget",
            "location": 863,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_add_tasks_widget": {
            "name": "test_add_tasks_widget",
            "location": 932,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_add_tasks_widget_with_filters": {
            "name": "test_add_tasks_widget_with_filters",
            "location": 937,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_add_scopemembers_widget": {
            "name": "test_add_scopemembers_widget",
            "location": 949,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerInActivity.test_add_project_info_widget": {
            "name": "test_add_project_info_widget",
            "location": 954,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerWeatherWidget.setUp": {
            "name": "setUp",
            "location": 962,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerWeatherWidget.tearDown": {
            "name": "tearDown",
            "location": 980,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetManagerWeatherWidget.test_weather_widget": {
            "name": "test_weather_widget",
            "location": 987,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetNavigationBarWidget.setUp": {
            "name": "setUp",
            "location": 995,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetNavigationBarWidget.tearDown": {
            "name": "tearDown",
            "location": 1013,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetNavigationBarWidget.test_add_navbar_widget": {
            "name": "test_add_navbar_widget",
            "location": 1018,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetNavigationBarWidget.test_add_navbar_widget_in_place": {
            "name": "test_add_navbar_widget_in_place",
            "location": 1026,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetNavigationBarWidget.test_add_navbar_widget_incorrect_keys": {
            "name": "test_add_navbar_widget_incorrect_keys",
            "location": 1044,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetNavigationBarWidget.test_add_navbar_external_link": {
            "name": "test_add_navbar_external_link",
            "location": 1053,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetNavigationBarWidget.test_add_navbar_disabled_button": {
            "name": "test_add_navbar_disabled_button",
            "location": 1067,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetsCopyMove.setUp": {
            "name": "setUp",
            "location": 1080,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetsCopyMove.tearDown": {
            "name": "tearDown",
            "location": 1085,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetsCopyMove.test_copy_widget": {
            "name": "test_copy_widget",
            "location": 1090,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetsCopyMove.test_copy_widget_with_wrong_target": {
            "name": "test_copy_widget_with_wrong_target",
            "location": 1108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetsCopyMove.test_move_widget": {
            "name": "test_move_widget",
            "location": 1121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetDownloadAsExcel.setUp": {
            "name": "setUp",
            "location": 1141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetDownloadAsExcel.tearDown": {
            "name": "tearDown",
            "location": 1149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetDownloadAsExcel.test_download_as_excel": {
            "name": "test_download_as_excel",
            "location": 1152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetDownloadAsExcel.test_timezone_aware": {
            "name": "test_timezone_aware",
            "location": 1165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetDownloadAsExcel.test_invalid_inputs": {
            "name": "test_invalid_inputs",
            "location": 1182,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/test_workflows.py": {
        "TestWorkflows.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWorkflows.tearDown": {
            "name": "tearDown",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWorkflows.test_workflow_attributes": {
            "name": "test_workflow_attributes",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWorkflows.test_single_workflow_retrieve_on_pk": {
            "name": "test_single_workflow_retrieve_on_pk",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWorkflows.test_clone_workflow_to_scope": {
            "name": "test_clone_workflow_to_scope",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWorkflows.test_import_workflow_in_a_scope_with_import_workflow_method_on_scope": {
            "name": "test_import_workflow_in_a_scope_with_import_workflow_method_on_scope",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWorkflows.test_clone_workflow_in_a_scope_in_the_same_scope": {
            "name": "test_clone_workflow_in_a_scope_in_the_same_scope",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWorkflows.test_create_a_new_workflow_using_classmethod_create_workflow": {
            "name": "test_create_a_new_workflow_using_classmethod_create_workflow",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWorkflows.test_create_a_new_workflow_using_client_create_workflow": {
            "name": "test_create_a_new_workflow_using_client_create_workflow",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWorkflows.test_create_a_new_workflow_using_scope_create_workflow": {
            "name": "test_create_a_new_workflow_using_scope_create_workflow",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWorkflowMethods.setUp": {
            "name": "setUp",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWorkflowMethods.tearDown": {
            "name": "tearDown",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWorkflowMethods.test_edit_workflow_description": {
            "name": "test_edit_workflow_description",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWorkflowMethods.test_workflow_in_and_activate": {
            "name": "test_workflow_in_and_activate",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWorkflowMethods.test_create_delete_status_and_create_delete_workflow_transition": {
            "name": "test_create_delete_status_and_create_delete_workflow_transition",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWorkflowMethods.test_workflow_status_order": {
            "name": "test_workflow_status_order",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWorkflowMethods.test_workflow_unlink_and_link_transitions": {
            "name": "test_workflow_unlink_and_link_transitions",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/utils.py": {},
    "pykechain-main/tests/__init__.py": {},
    "pykechain-main/tests/files/__init__.py": {},
    "pykechain-main/tests/files/test_upload_script_to_service/test_upload_script.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [],
            "arguments": {}
        }
    },
    "pykechain-main/tests/models/test_base.py": {
        "TestBase.test_id": {
            "name": "test_id",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBase.test_name": {
            "name": "test_name",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBase.test_given_client": {
            "name": "test_given_client",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/models/test_property_attachment.py": {
        "TestAttachment.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttachment.tearDown": {
            "name": "tearDown",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttachment.test_retrieve_attachment": {
            "name": "test_retrieve_attachment",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttachment.test_retrieve_value": {
            "name": "test_retrieve_value",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttachment.test_set_value_none": {
            "name": "test_set_value_none",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttachment.test_set_value_not_a_path": {
            "name": "test_set_value_not_a_path",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttachment.test_upload": {
            "name": "test_upload",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttachment.test_clear_an_attachment_property": {
            "name": "test_clear_an_attachment_property",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttachment.test_retrieve_filename_from_value": {
            "name": "test_retrieve_filename_from_value",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttachment.test_has_value_true": {
            "name": "test_has_value_true",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttachment.test_has_value_false": {
            "name": "test_has_value_false",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttachment.test_add_with_properties": {
            "name": "test_add_with_properties",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttachment.test_save_as_attachment": {
            "name": "test_save_as_attachment",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/models/test_property_datetime.py": {
        "TestPropertyDateTime.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyDateTime.tearDown": {
            "name": "tearDown",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyDateTime.test_get_datetime": {
            "name": "test_get_datetime",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyDateTime.test_set_value_none": {
            "name": "test_set_value_none",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyDateTime.test_set_value_iso_string": {
            "name": "test_set_value_iso_string",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyDateTime.test_set_value_non_datetime": {
            "name": "test_set_value_non_datetime",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyDateTime.test_set_value": {
            "name": "test_set_value",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyDateTime.test_pending_value": {
            "name": "test_pending_value",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyDateTime.test_value_via_part": {
            "name": "test_value_via_part",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyDateTime.test_to_datetime": {
            "name": "test_to_datetime",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyDateTime.test_iso_formatted": {
            "name": "test_iso_formatted",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/models/test_property_reference.py": {
        "TestPropertyBaseReference.setUp": {
            "name": "setUp",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyBaseReference.test_prefilters": {
            "name": "test_prefilters",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.setUp": {
            "name": "setUp",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.tearDown": {
            "name": "tearDown",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.test_referencing_a_model": {
            "name": "test_referencing_a_model",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.test_referencing_multiple_instances_using_parts": {
            "name": "test_referencing_multiple_instances_using_parts",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.test_referencing_multiple_instances_using_ids": {
            "name": "test_referencing_multiple_instances_using_ids",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.test_referencing_a_list_with_no_parts": {
            "name": "test_referencing_a_list_with_no_parts",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.test_value_if_multi_ref_gives_back_all_parts": {
            "name": "test_value_if_multi_ref_gives_back_all_parts",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.test_value_if_nothing_is_referenced": {
            "name": "test_value_if_nothing_is_referenced",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.test_value_ids": {
            "name": "test_value_ids",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.test_multi_ref_choices": {
            "name": "test_multi_ref_choices",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.test_create_ref_property_referencing_part_in_list": {
            "name": "test_create_ref_property_referencing_part_in_list",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.test_create_ref_property_referencing_id_in_list": {
            "name": "test_create_ref_property_referencing_id_in_list",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.test_create_ref_property_wrongly_referencing_in_list": {
            "name": "test_create_ref_property_wrongly_referencing_in_list",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.test_create_ref_property_referencing_part": {
            "name": "test_create_ref_property_referencing_part",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.test_create_ref_property_referencing_id": {
            "name": "test_create_ref_property_referencing_id",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.test_create_ref_property_wrongly_referencing": {
            "name": "test_create_ref_property_wrongly_referencing",
            "location": 260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.test_set_prefilters_on_reference_property": {
            "name": "test_set_prefilters_on_reference_property",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.test_set_prefilters_with_tuples": {
            "name": "test_set_prefilters_with_tuples",
            "location": 329,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.test_set_prefilters_with_validation": {
            "name": "test_set_prefilters_with_validation",
            "location": 346,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.test_set_prefilters_on_reference_property_with_excluded_propmodels_and_validators": {
            "name": "test_set_prefilters_on_reference_property_with_excluded_propmodels_and_validators",
            "location": 372,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.test_clear_prefilters": {
            "name": "test_clear_prefilters",
            "location": 415,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.test_overwrite_prefilters": {
            "name": "test_overwrite_prefilters",
            "location": 443,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.test_set_prefilters_on_reference_property_using_uuid": {
            "name": "test_set_prefilters_on_reference_property_using_uuid",
            "location": 475,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.test_set_prefilters_on_reference_property_the_wrong_way": {
            "name": "test_set_prefilters_on_reference_property_the_wrong_way",
            "location": 497,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.test_set_excluded_propmodels_on_reference_property": {
            "name": "test_set_excluded_propmodels_on_reference_property",
            "location": 539,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.test_set_excluded_propmodels_with_validation": {
            "name": "test_set_excluded_propmodels_with_validation",
            "location": 557,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.test_set_excluded_propmodels_on_reference_property_using_uuid": {
            "name": "test_set_excluded_propmodels_on_reference_property_using_uuid",
            "location": 587,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.test_set_excluded_propmodels_on_reference_property_with_prefilters_and_validators": {
            "name": "test_set_excluded_propmodels_on_reference_property_with_prefilters_and_validators",
            "location": 605,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.test_get_prefilters": {
            "name": "test_get_prefilters",
            "location": 645,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.test_set_excluded_propmodels_on_reference_property_the_wrong_way": {
            "name": "test_set_excluded_propmodels_on_reference_property_the_wrong_way",
            "location": 676,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.test_add_excluded_propmodels_to_reference_property": {
            "name": "test_add_excluded_propmodels_to_reference_property",
            "location": 701,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.test_overwrite_excluded_propmodels_on_reference_property": {
            "name": "test_overwrite_excluded_propmodels_on_reference_property",
            "location": 719,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.test_get_excluded_propmodel_ids": {
            "name": "test_get_excluded_propmodel_ids",
            "location": 741,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.test_retrieve_scope_id": {
            "name": "test_retrieve_scope_id",
            "location": 751,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.test_property_clear_selected_part_model": {
            "name": "test_property_clear_selected_part_model",
            "location": 758,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.test_property_clear_referenced_part_instances": {
            "name": "test_property_clear_referenced_part_instances",
            "location": 770,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferenceProperty.test_copy_reference_property_with_options": {
            "name": "test_copy_reference_property_with_options",
            "location": 788,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferencePropertyXScope.setUp": {
            "name": "setUp",
            "location": 808,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferencePropertyXScope.tearDown": {
            "name": "tearDown",
            "location": 833,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferencePropertyXScope.test_set_model_value": {
            "name": "test_set_model_value",
            "location": 838,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferencePropertyXScope.test_set_model_value_using_id": {
            "name": "test_set_model_value_using_id",
            "location": 847,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiReferencePropertyXScope.test_set_value": {
            "name": "test_set_value",
            "location": 856,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyActivityReference.setUp": {
            "name": "setUp",
            "location": 867,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyActivityReference.tearDown": {
            "name": "tearDown",
            "location": 877,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyActivityReference.test_create": {
            "name": "test_create",
            "location": 882,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyActivityReference.test_value": {
            "name": "test_value",
            "location": 885,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyActivityReference.test_value_ids": {
            "name": "test_value_ids",
            "location": 896,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyActivityReference.test_reload": {
            "name": "test_reload",
            "location": 908,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyScopeReference.setUp": {
            "name": "setUp",
            "location": 923,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyScopeReference.tearDown": {
            "name": "tearDown",
            "location": 934,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyScopeReference.test_create": {
            "name": "test_create",
            "location": 939,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyScopeReference.test_value": {
            "name": "test_value",
            "location": 942,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyScopeReference.test_value_ids": {
            "name": "test_value_ids",
            "location": 951,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyScopeReference.test_no_value": {
            "name": "test_no_value",
            "location": 962,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyScopeReference.test_reload": {
            "name": "test_reload",
            "location": 966,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyScopeReference.test_prefilters": {
            "name": "test_prefilters",
            "location": 979,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyUserReference.setUp": {
            "name": "setUp",
            "location": 1007,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyUserReference.tearDown": {
            "name": "tearDown",
            "location": 1018,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyUserReference.test_create": {
            "name": "test_create",
            "location": 1023,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyUserReference.test_value": {
            "name": "test_value",
            "location": 1026,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyUserReference.test_value_ids": {
            "name": "test_value_ids",
            "location": 1035,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyUserReference.test_no_value": {
            "name": "test_no_value",
            "location": 1047,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyUserReference.test_reload": {
            "name": "test_reload",
            "location": 1051,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyFormReference.setUp": {
            "name": "setUp",
            "location": 1066,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyFormReference.tearDown": {
            "name": "tearDown",
            "location": 1101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyFormReference.test_create": {
            "name": "test_create",
            "location": 1112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyFormReference.test_value_model": {
            "name": "test_value_model",
            "location": 1115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyFormReference.test_no_value_model": {
            "name": "test_no_value_model",
            "location": 1122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyFormReference.test_value_instance": {
            "name": "test_value_instance",
            "location": 1126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyContextReference.setUp": {
            "name": "setUp",
            "location": 1150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyContextReference.tearDown": {
            "name": "tearDown",
            "location": 1180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyContextReference.test_create": {
            "name": "test_create",
            "location": 1189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyContextReference.test_value_model": {
            "name": "test_value_model",
            "location": 1192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyContextReference.test_no_value_model": {
            "name": "test_no_value_model",
            "location": 1199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyContextReference.test_value_instance": {
            "name": "test_value_instance",
            "location": 1202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyContextReference.test_no_value_instance": {
            "name": "test_no_value_instance",
            "location": 1209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyContextReference.test_multiple_values": {
            "name": "test_multiple_values",
            "location": 1212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyStatusReferences.setUp": {
            "name": "setUp",
            "location": 1227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyStatusReferences.tearDown": {
            "name": "tearDown",
            "location": 1245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyStatusReferences.test_create": {
            "name": "test_create",
            "location": 1250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyStatusReferences.test_value_model": {
            "name": "test_value_model",
            "location": 1253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyStatusReferences.test_no_value_model": {
            "name": "test_no_value_model",
            "location": 1260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyStatusReferences.test_value_instance": {
            "name": "test_value_instance",
            "location": 1263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyStatusReferences.test_no_value_instance": {
            "name": "test_no_value_instance",
            "location": 1270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyStatusReferences.test_multiple_values": {
            "name": "test_multiple_values",
            "location": 1273,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/models/test_property_selectlist.py": {
        "TestPropertySelectListProperty.test_value": {
            "name": "test_value",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertySelectListProperty.test_pend_value": {
            "name": "test_pend_value",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertySelectListProperty.test_set_value_in_options": {
            "name": "test_set_value_in_options",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertySelectListProperty.test_set_value_not_in_options_raises_error": {
            "name": "test_set_value_not_in_options_raises_error",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiSelectListProperty.test_value": {
            "name": "test_value",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiSelectListProperty.test_set_value_in_options": {
            "name": "test_set_value_in_options",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyMultiSelectListProperty.test_set_value_not_in_options_raises_error": {
            "name": "test_set_value_not_in_options_raises_error",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SelectListBaseTests.Tests.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SelectListBaseTests.Tests.tearDown": {
            "name": "tearDown",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SelectListBaseTests.Tests.test_get_options_list": {
            "name": "test_get_options_list",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SelectListBaseTests.Tests.test_set_options_list": {
            "name": "test_set_options_list",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SelectListBaseTests.Tests.test_illegal_options_are_not_set": {
            "name": "test_illegal_options_are_not_set",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SelectListBaseTests.Tests.test_fail_to_set_options_on_instance": {
            "name": "test_fail_to_set_options_on_instance",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SelectListBaseTests.Tests.test_integrity_options_dict": {
            "name": "test_integrity_options_dict",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/models/test_representations.py": {
        "TestRepresentationJSON.test_valid_button_representation_json": {
            "name": "test_valid_button_representation_json",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRepresentation.test_create": {
            "name": "test_create",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRepresentation.test_create_with_value": {
            "name": "test_create_with_value",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRepresentation.test_create_with_object": {
            "name": "test_create_with_object",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRepresentation.test_parse": {
            "name": "test_parse",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRepresentation.test_parse_incorrect_rtype": {
            "name": "test_parse_incorrect_rtype",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRepresentation.test_parse_unknown_rtype": {
            "name": "test_parse_unknown_rtype",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRepresentation.test_component_invalid_object": {
            "name": "test_component_invalid_object",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRepresentation.test_component_invalid_property_type": {
            "name": "test_component_invalid_property_type",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRepresentation.test_component_not_a_list": {
            "name": "test_component_not_a_list",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRepresentation.test_component_not_a_representation": {
            "name": "test_component_not_a_representation",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReprButton.setUp": {
            "name": "setUp",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUsePropertyNameRepresentationForPartReferences.test_empty_config_value": {
            "name": "test_empty_config_value",
            "location": 311,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReprActivity._get_object": {
            "name": "_get_object",
            "location": 419,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReprScope._get_object": {
            "name": "_get_object",
            "location": 424,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bases._TestRepresentationLive.setUp": {
            "name": "setUp",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bases._TestRepresentationLive.tearDown": {
            "name": "tearDown",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bases._TestRepresentationLive._get_object": {
            "name": "_get_object",
            "location": 161,
            "return": [
                "Union[(Property, Scope, Activity)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bases._TestRepresentationLive.test_create_with_prop": {
            "name": "test_create_with_prop",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bases._TestRepresentationLive.test_get_set": {
            "name": "test_get_set",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bases._TestRepresentationLive.test_set_value": {
            "name": "test_set_value",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bases._TestRepresentationLive.test_unsupported_value": {
            "name": "test_unsupported_value",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bases._TestPropertyRepresentation.tearDown": {
            "name": "tearDown",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bases._TestPropertyRepresentation._get_object": {
            "name": "_get_object",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bases._TestCustomIconRepresentation.test_set_mode": {
            "name": "test_set_mode",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bases._TestCustomIconRepresentation.test_set_mode_incorrect": {
            "name": "test_set_mode_incorrect",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/models/test_validators.py": {
        "TestValidatorJSON.test_valid_numeric_range_validator_json": {
            "name": "test_valid_numeric_range_validator_json",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidatorJSON.test_valid_requiredfield_validator_json": {
            "name": "test_valid_requiredfield_validator_json",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidatorJSON.test_valid_booleanfield_validator_json": {
            "name": "test_valid_booleanfield_validator_json",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidatorJSON.test_validator_invalid_vtype": {
            "name": "test_validator_invalid_vtype",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidatorJSON.test_validator_missing_vtype": {
            "name": "test_validator_missing_vtype",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidatorJSON.test_validator_config_not_a_dict": {
            "name": "test_validator_config_not_a_dict",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidatorJSON.test_validator_on_valid_not_a_list": {
            "name": "test_validator_on_valid_not_a_list",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidatorJSON.test_validator_on_invalid_not_a_list": {
            "name": "test_validator_on_invalid_not_a_list",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidatorJSON.test_validator_on_valid_list_with_obj": {
            "name": "test_validator_on_valid_list_with_obj",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidatorJSON.test_validator_on_invalid_list_with_obj": {
            "name": "test_validator_on_invalid_list_with_obj",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidatorJSON.test_validatoreffect_requires_effect_property": {
            "name": "test_validatoreffect_requires_effect_property",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidatorJSON.test_validatoreffect_requires_config_property": {
            "name": "test_validatoreffect_requires_config_property",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidatorJSON.test_validatoreffect_not_allows_additional_properties": {
            "name": "test_validatoreffect_not_allows_additional_properties",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyValidatorClass.test_propertyvalidator_produces_valid_json": {
            "name": "test_propertyvalidator_produces_valid_json",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidatorEffects.test_validator_effect_produces_valid_json": {
            "name": "test_validator_effect_produces_valid_json",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidatorEffects.test_visual_effect_produces_valid_json": {
            "name": "test_visual_effect_produces_valid_json",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidatorEffects.test_valid_visualeffect_produces_valid_json": {
            "name": "test_valid_visualeffect_produces_valid_json",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidatorEffects.test_invalid_visualeffect_productes_valid_json": {
            "name": "test_invalid_visualeffect_productes_valid_json",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidatorParsing.test_valid_numeric_range_validator_json": {
            "name": "test_valid_numeric_range_validator_json",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidatorDumping.test_valid_numeric_range_validator_dumped": {
            "name": "test_valid_numeric_range_validator_dumped",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNumericRangeValidator.test_numeric_range_without_settings_validated_json": {
            "name": "test_numeric_range_without_settings_validated_json",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNumericRangeValidator.test_numeric_range_validates_with_lower_bound": {
            "name": "test_numeric_range_validates_with_lower_bound",
            "location": 261,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNumericRangeValidator.test_numeric_range_validates_with_max_bound": {
            "name": "test_numeric_range_validates_with_max_bound",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNumericRangeValidator.test_numeric_range_validates_with_min_max_bound": {
            "name": "test_numeric_range_validates_with_min_max_bound",
            "location": 273,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNumericRangeValidator.test_numeric_range_invalidates_with_lower_bound": {
            "name": "test_numeric_range_invalidates_with_lower_bound",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNumericRangeValidator.test_numeric_range_invalidates_with_max_bound": {
            "name": "test_numeric_range_invalidates_with_max_bound",
            "location": 283,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNumericRangeValidator.test_numeric_range_invalidates_with_min_max_bound": {
            "name": "test_numeric_range_invalidates_with_min_max_bound",
            "location": 289,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNumericRangeValidator.test_numeric_range_validates_with_min_max_bound_float": {
            "name": "test_numeric_range_validates_with_min_max_bound_float",
            "location": 293,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNumericRangeValidator.test_numeric_range_validates_with_stepsize_float": {
            "name": "test_numeric_range_validates_with_stepsize_float",
            "location": 297,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNumericRangeValidator.test_numeric_range_validates_with_stepsize_int_with_minvalue": {
            "name": "test_numeric_range_validates_with_stepsize_int_with_minvalue",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNumericRangeValidator.test_numeric_range_raises_exception_when_min_is_greater_than_max": {
            "name": "test_numeric_range_raises_exception_when_min_is_greater_than_max",
            "location": 309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNumericRangeValidator.test_numeric_range_raises_exception_when_enforce_stepsize_without_stepsize": {
            "name": "test_numeric_range_raises_exception_when_enforce_stepsize_without_stepsize",
            "location": 313,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNumericRangeValidator.test_numeric_range_does_not_respect_max_issue_435": {
            "name": "test_numeric_range_does_not_respect_max_issue_435",
            "location": 321,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBooleanFieldValidator.test_boolean_validator_without_settings": {
            "name": "test_boolean_validator_without_settings",
            "location": 336,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequiredFieldValidator.test_requiredfield_validator_without_settings": {
            "name": "test_requiredfield_validator_without_settings",
            "location": 346,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequiredFieldValidator.test_requiredfield_validator_is_false_on_nonevalue": {
            "name": "test_requiredfield_validator_is_false_on_nonevalue",
            "location": 354,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequiredFieldValidator.test_requiredfield_validator_is_true_on_value": {
            "name": "test_requiredfield_validator_is_true_on_value",
            "location": 366,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRegexValidator.test_regex_validator_without_settings": {
            "name": "test_regex_validator_without_settings",
            "location": 381,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRegexValidator.test_regex_validator_with_pattern_match": {
            "name": "test_regex_validator_with_pattern_match",
            "location": 389,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRegexValidator.test_regex_validator_without_pattern_match": {
            "name": "test_regex_validator_without_pattern_match",
            "location": 394,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRegexValidator.test_regex_validator_fails_on_none_value": {
            "name": "test_regex_validator_fails_on_none_value",
            "location": 402,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRegexValidator.test_regex_validator_complex_email_regex": {
            "name": "test_regex_validator_complex_email_regex",
            "location": 407,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOddEvenNumberValidator.test_even_number_validator_without_settings": {
            "name": "test_even_number_validator_without_settings",
            "location": 417,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOddEvenNumberValidator.test_odd_number_validator_without_settings": {
            "name": "test_odd_number_validator_without_settings",
            "location": 425,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOddEvenNumberValidator.test_even_number_validator_is_valid": {
            "name": "test_even_number_validator_is_valid",
            "location": 433,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOddEvenNumberValidator.test_odd_number_validator_is_valid": {
            "name": "test_odd_number_validator_is_valid",
            "location": 437,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOddEvenNumberValidator.test_even_number_validator_is_invalid": {
            "name": "test_even_number_validator_is_invalid",
            "location": 441,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOddEvenNumberValidator.test_odd_number_validator_is_invalid": {
            "name": "test_odd_number_validator_is_invalid",
            "location": 445,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOddEvenNumberValidator.test_even_number_validator_is_none": {
            "name": "test_even_number_validator_is_none",
            "location": 449,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOddEvenNumberValidator.test_odd_number_validator_is_none": {
            "name": "test_odd_number_validator_is_none",
            "location": 453,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOddEvenNumberValidator.test_even_number_validator_float_valid": {
            "name": "test_even_number_validator_float_valid",
            "location": 457,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOddEvenNumberValidator.test_odd_number_validator_float_valid": {
            "name": "test_odd_number_validator_float_valid",
            "location": 463,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOddEvenNumberValidator.test_even_number_validator_float_invalid": {
            "name": "test_even_number_validator_float_invalid",
            "location": 468,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOddEvenNumberValidator.test_odd_number_validator_float_invalid": {
            "name": "test_odd_number_validator_float_invalid",
            "location": 473,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOddEvenNumberValidator.test_even_number_validator_invalid_input": {
            "name": "test_even_number_validator_invalid_input",
            "location": 478,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOddEvenNumberValidator.test_odd_number_validator_invalid_input": {
            "name": "test_odd_number_validator_invalid_input",
            "location": 486,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSingleReferenceValidator.test_singlereference_validator_without_settings": {
            "name": "test_singlereference_validator_without_settings",
            "location": 496,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSingleReferenceValidator.test_singlereference_validator_is_valid": {
            "name": "test_singlereference_validator_is_valid",
            "location": 504,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSingleReferenceValidator.test_singlereference_validator_is_invalid": {
            "name": "test_singlereference_validator_is_invalid",
            "location": 512,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSingleReferenceValidator.test_singlerefence_validator_is_invalid_with_invalid_values": {
            "name": "test_singlerefence_validator_is_invalid_with_invalid_values",
            "location": 517,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAlwaysAllowValidator.test_always_allow_validator_without_settings": {
            "name": "test_always_allow_validator_without_settings",
            "location": 525,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileSizeValidator.test_validator_valid_json_with_settings": {
            "name": "test_validator_valid_json_with_settings",
            "location": 543,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileSizeValidator.test_validator_valid_json_without_settings": {
            "name": "test_validator_valid_json_without_settings",
            "location": 547,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileSizeValidator.test_validator_valid_json_with_additional_arguments": {
            "name": "test_validator_valid_json_with_additional_arguments",
            "location": 551,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileSizeValidator.test_validator_invalid_arguments": {
            "name": "test_validator_invalid_arguments",
            "location": 558,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileSizeValidator.test_filesizevalidator_being_valid": {
            "name": "test_filesizevalidator_being_valid",
            "location": 572,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileSizeValidator.test_filesizevalidator_being_invalid": {
            "name": "test_filesizevalidator_being_invalid",
            "location": 586,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileSizeValidator.test_filesizevalidator_being_none": {
            "name": "test_filesizevalidator_being_none",
            "location": 593,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileExtensionValidator.test_validator_valid_json_with_settings": {
            "name": "test_validator_valid_json_with_settings",
            "location": 600,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileExtensionValidator.test_validator_valid_json_without_settings": {
            "name": "test_validator_valid_json_without_settings",
            "location": 604,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileExtensionValidator.test_fileextensionvalidator_on_extension": {
            "name": "test_fileextensionvalidator_on_extension",
            "location": 608,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileExtensionValidator.test_fileextensionvalidator_on_extensions": {
            "name": "test_fileextensionvalidator_on_extensions",
            "location": 614,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileExtensionValidator.test_fileextensionvalidator_on_extensions_csv": {
            "name": "test_fileextensionvalidator_on_extensions_csv",
            "location": 624,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileExtensionValidator.test_fileextensionvalidator_on_mimetype": {
            "name": "test_fileextensionvalidator_on_mimetype",
            "location": 630,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileExtensionValidator.test_fileextensionvalidator_on_expanded_mimetypes": {
            "name": "test_fileextensionvalidator_on_expanded_mimetypes",
            "location": 635,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileExtensionValidator.test_fileextensionvalidator_on_mixed_mode": {
            "name": "test_fileextensionvalidator_on_mixed_mode",
            "location": 644,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileExtensionValidator.test_fileextensionvalidator_on_excel": {
            "name": "test_fileextensionvalidator_on_excel",
            "location": 650,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileExtensionValidator.test_fileextensionvalidator_being_none": {
            "name": "test_fileextensionvalidator_being_none",
            "location": 656,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyWithValidator.test_property_without_validator": {
            "name": "test_property_without_validator",
            "location": 663,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyWithValidator.test_property_with_numeric_range_validator": {
            "name": "test_property_with_numeric_range_validator",
            "location": 670,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyWithValidator.test_property_with_numeric_range_validator_value_is_none": {
            "name": "test_property_with_numeric_range_validator_value_is_none",
            "location": 682,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyWithValidator.test_property_with_filesize_validator": {
            "name": "test_property_with_filesize_validator",
            "location": 694,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyWithValidator.test_property_without_value_with_filesize_validator": {
            "name": "test_property_without_value_with_filesize_validator",
            "location": 704,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyWithValidator.test_property_with_fileextension_validator": {
            "name": "test_property_with_fileextension_validator",
            "location": 714,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyWithValidator.test_property_without_value_with_fileextension_validator": {
            "name": "test_property_without_value_with_fileextension_validator",
            "location": 728,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyWithValidatorFromLiveServer.setUp": {
            "name": "setUp",
            "location": 744,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyWithValidatorFromLiveServer.tearDown": {
            "name": "tearDown",
            "location": 760,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyWithValidatorFromLiveServer.test_numeric_property_with_validator_parses": {
            "name": "test_numeric_property_with_validator_parses",
            "location": 767,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyWithValidatorFromLiveServer.test_numeric_property_add_requiredvalidator_on_model": {
            "name": "test_numeric_property_add_requiredvalidator_on_model",
            "location": 773,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPropertyWithValidatorFromLiveServer.test_numeric_property_add_requiredvalidator_on_instance": {
            "name": "test_numeric_property_add_requiredvalidator_on_instance",
            "location": 784,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pykechain-main/tests/models/__init__.py": {}
}
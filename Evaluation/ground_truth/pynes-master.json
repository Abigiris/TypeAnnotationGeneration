{
    "pynes-master/pynes/addressing_mode.py": {},
    "pynes-master/pynes/cpu.py": {
        "Cpu.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cpu.decode_instruction": {
            "name": "decode_instruction",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "opcode": [
                    "int"
                ]
            }
        },
        "Cpu.read_from_memory": {
            "name": "read_from_memory",
            "location": 77,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "int"
                ]
            }
        }
    },
    "pynes-master/pynes/main.py": {
        "argparser": {
            "name": "argparser",
            "location": 4,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pynes-master/pynes/__init__.py": {},
    "pynes-master/pynes/instructions/add.py": {
        "add_with_carry": {
            "name": "add_with_carry",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "cpu": [
                    "'Cpu'"
                ],
                "addressing_mode": [
                    "AddressingMode"
                ],
                "data": [
                    "int"
                ]
            }
        },
        "_add_with_carry_immediate": {
            "name": "_add_with_carry_immediate",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "cpu": [
                    "'Cpu'"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "_add_with_carry_absolute": {
            "name": "_add_with_carry_absolute",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "cpu": [
                    "'Cpu'"
                ],
                "value": [
                    "int"
                ]
            }
        }
    },
    "pynes-master/pynes/instructions/and_.py": {
        "and_": {
            "name": "and_",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "cpu": [
                    "'Cpu'"
                ],
                "addressing_mode": [
                    "AddressingMode"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "and_immediate": {
            "name": "and_immediate",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "cpu": [
                    "'Cpu'"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "and_absolute": {
            "name": "and_absolute",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "cpu": [
                    "'Cpu'"
                ],
                "value": [
                    "int"
                ]
            }
        }
    },
    "pynes-master/pynes/instructions/asl.py": {
        "asl": {
            "name": "asl",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "cpu": [
                    "'Cpu'"
                ],
                "addressing_mode": [
                    "AddressingMode"
                ]
            }
        },
        "_asl_accumulator": {
            "name": "_asl_accumulator",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "cpu": [
                    "'Cpu'"
                ]
            }
        }
    },
    "pynes-master/pynes/instructions/bit.py": {
        "bit": {
            "name": "bit",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "cpu": [
                    "'Cpu'"
                ],
                "value": [
                    "int"
                ]
            }
        }
    },
    "pynes-master/pynes/instructions/branch.py": {
        "branch_if_carry_clear": {
            "name": "branch_if_carry_clear",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "cpu": [
                    "'Cpu'"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "branch_if_carry_set": {
            "name": "branch_if_carry_set",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "cpu": [
                    "'Cpu'"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "branch_if_equal": {
            "name": "branch_if_equal",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "cpu": [
                    "'Cpu'"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "branch_if_minus": {
            "name": "branch_if_minus",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "cpu": [
                    "'Cpu'"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "branch_if_not_equal": {
            "name": "branch_if_not_equal",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "cpu": [
                    "'Cpu'"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "branch_if_positive": {
            "name": "branch_if_positive",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "cpu": [
                    "'Cpu'"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "branch_if_overflow_clear": {
            "name": "branch_if_overflow_clear",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "cpu": [
                    "'Cpu'"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "branch_if_overflow_set": {
            "name": "branch_if_overflow_set",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "cpu": [
                    "'Cpu'"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "_branch": {
            "name": "_branch",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "cpu": [
                    "'Cpu'"
                ],
                "predicate_for_branch": [
                    "bool"
                ],
                "value": [
                    "int"
                ]
            }
        }
    },
    "pynes-master/pynes/instructions/clear.py": {
        "clear_carry": {
            "name": "clear_carry",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "cpu": [
                    "'Cpu'"
                ]
            }
        },
        "clear_decimal": {
            "name": "clear_decimal",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "cpu": [
                    "'Cpu'"
                ]
            }
        },
        "clear_interrupt": {
            "name": "clear_interrupt",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "cpu": [
                    "'Cpu'"
                ]
            }
        },
        "clear_overflow": {
            "name": "clear_overflow",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "cpu": [
                    "'Cpu'"
                ]
            }
        },
        "_clear_flag": {
            "name": "_clear_flag",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "cpu": [
                    "'Cpu'"
                ],
                "flag": [
                    "StatusFlag"
                ]
            }
        }
    },
    "pynes-master/pynes/instructions/cmp.py": {
        "cmp": {
            "name": "cmp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "cpu": [
                    "'Cpu'"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "cpx": {
            "name": "cpx",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "cpu": [
                    "'Cpu'"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "cpy": {
            "name": "cpy",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "cpu": [
                    "'Cpu'"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "_compare": {
            "name": "_compare",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "cpu": [
                    "'Cpu'"
                ],
                "arg1": [
                    "int"
                ],
                "value": [
                    "int"
                ]
            }
        }
    },
    "pynes-master/pynes/instructions/__init__.py": {},
    "pynes-master/testing/util.py": {
        "named_parametrize": {
            "name": "named_parametrize",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {
                "argnames": [
                    "Tuple[(str, ...)]"
                ],
                "id_and_argvalues": [
                    "List[Tuple[(Any, ...)]]"
                ]
            }
        }
    },
    "pynes-master/tests/branch_test.py": {
        "TestBranch.test_cpu": {
            "name": "test_cpu",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "TestBranch.branch_": {
            "name": "branch_",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "TestBranch.test_branch": {
            "name": "test_branch",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "test_cpu": [],
                "predicate": []
            }
        },
        "TestBranch.test_unaffected_flag": {
            "name": "test_unaffected_flag",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "test_cpu": [],
                "flag_state": []
            }
        },
        "TestBranch.test_branch_if_carry_clear": {
            "name": "test_branch_if_carry_clear",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "test_cpu": [],
                "branch_": [],
                "carry_flag": []
            }
        },
        "TestBranch.test_branch_if_carry_set": {
            "name": "test_branch_if_carry_set",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "test_cpu": [],
                "branch_": [],
                "carry_flag": []
            }
        },
        "TestBranch.test_branch_if_equal": {
            "name": "test_branch_if_equal",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "test_cpu": [],
                "branch_": [],
                "zero_flag": []
            }
        },
        "TestBranch.test_branch_if_minus": {
            "name": "test_branch_if_minus",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "test_cpu": [],
                "branch_": [],
                "negative_flag": []
            }
        },
        "TestBranch.test_branch_if_not_equal": {
            "name": "test_branch_if_not_equal",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "test_cpu": [],
                "branch_": [],
                "zero_flag": []
            }
        },
        "TestBranch.test_branch_if_positive": {
            "name": "test_branch_if_positive",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "test_cpu": [],
                "branch_": [],
                "negative_flag": []
            }
        },
        "TestBranch.test_branch_if_overflow_clear": {
            "name": "test_branch_if_overflow_clear",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "test_cpu": [],
                "branch_": [],
                "overflow_flag": []
            }
        },
        "TestBranch.test_branch_if_overflow_set": {
            "name": "test_branch_if_overflow_set",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "test_cpu": [],
                "branch_": [],
                "overflow_flag": []
            }
        }
    },
    "pynes-master/tests/cpu_test.py": {
        "TestDecodeInstruction.test_not_placeholder": {
            "name": "test_not_placeholder",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecodeInstruction.test_placeholder": {
            "name": "test_placeholder",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pynes-master/tests/main_test.py": {
        "test_main": {
            "name": "test_main",
            "location": 1,
            "return": [],
            "arguments": {}
        }
    },
    "pynes-master/tests/__init__.py": {},
    "pynes-master/tests/instructions/add_test.py": {
        "test_adding": {
            "name": "test_adding",
            "location": 19,
            "return": [],
            "arguments": {
                "accumulator_state": [],
                "immediate": [],
                "expected": []
            }
        },
        "test_carry": {
            "name": "test_carry",
            "location": 38,
            "return": [],
            "arguments": {
                "accumulator_state": [],
                "immediate": [],
                "expected": []
            }
        },
        "test_overflow": {
            "name": "test_overflow",
            "location": 56,
            "return": [],
            "arguments": {
                "accumulator_state": [],
                "immediate": [],
                "expected": []
            }
        },
        "test_zero_flag": {
            "name": "test_zero_flag",
            "location": 71,
            "return": [],
            "arguments": {
                "accumulator_state": [],
                "immediate": []
            }
        },
        "test_negative_flag": {
            "name": "test_negative_flag",
            "location": 88,
            "return": [],
            "arguments": {
                "accumulator_state": [],
                "immediate": [],
                "expected": []
            }
        },
        "test_unaffected_flag": {
            "name": "test_unaffected_flag",
            "location": 102,
            "return": [],
            "arguments": {
                "accumulator_state": [],
                "immediate": [],
                "flag_state": []
            }
        },
        "test_absolute": {
            "name": "test_absolute",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "test_zero_page": {
            "name": "test_zero_page",
            "location": 129,
            "return": [],
            "arguments": {}
        }
    },
    "pynes-master/tests/instructions/and_test.py": {
        "TestAnd.test_immediate": {
            "name": "test_immediate",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "accumulator_state": [],
                "immediate": [],
                "expected": []
            }
        },
        "TestAnd.test_absolute": {
            "name": "test_absolute",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAnd.test_zero_flag": {
            "name": "test_zero_flag",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "accumulator_state": [],
                "immediate": [],
                "expected": []
            }
        },
        "TestAnd.test_negative_flag": {
            "name": "test_negative_flag",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "accumulator_state": [],
                "immediate": [],
                "expected": []
            }
        },
        "TestAnd.test_unaffected_flag": {
            "name": "test_unaffected_flag",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "accumulator_state": [],
                "immediate": [],
                "flag_state": []
            }
        },
        "TestAnd.test_zero_page": {
            "name": "test_zero_page",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pynes-master/tests/instructions/asl_test.py": {
        "TestAsl.test_asl": {
            "name": "test_asl",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "accumulator_state": [],
                "expected": []
            }
        },
        "TestAsl.test_carry_flag": {
            "name": "test_carry_flag",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "accumulator_state": [],
                "expected": []
            }
        },
        "TestAsl.test_zero_flag": {
            "name": "test_zero_flag",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "accumulator_state": [],
                "expected": []
            }
        },
        "TestAsl.test_negative_flag": {
            "name": "test_negative_flag",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "accumulator_state": [],
                "expected": []
            }
        },
        "TestAsl.test_unaffected_flag": {
            "name": "test_unaffected_flag",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "accumulator_state": [],
                "flag_state": []
            }
        }
    },
    "pynes-master/tests/instructions/bit_test.py": {
        "TestBit.test_zero": {
            "name": "test_zero",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "accumulator_state": [],
                "memory_value": [],
                "expected": []
            }
        },
        "TestBit.test_overflow": {
            "name": "test_overflow",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "accumulator_state": [],
                "memory_value": [],
                "expected": []
            }
        },
        "TestBit.test_negative": {
            "name": "test_negative",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "accumulator_state": [],
                "memory_value": [],
                "expected": []
            }
        },
        "TestBit.test_unaffected_flag": {
            "name": "test_unaffected_flag",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "accumulator_state": [],
                "memory_value": [],
                "flag_state": []
            }
        }
    },
    "pynes-master/tests/instructions/clear_test.py": {
        "TestClear.test_clear": {
            "name": "test_clear",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "status_flag": [],
                "init_state": []
            }
        },
        "TestClear.test_unsupported_flags": {
            "name": "test_unsupported_flags",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "status_flag": []
            }
        },
        "TestClear.test_unaffected_flag": {
            "name": "test_unaffected_flag",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "status_flag": [],
                "init_state": [],
                "flag_state": []
            }
        },
        "TestClearOpCode.mock_clear": {
            "name": "mock_clear",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClearOpCode.test_clear_carry": {
            "name": "test_clear_carry",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "mock_clear": []
            }
        },
        "TestClearOpCode.test_clear_decimal": {
            "name": "test_clear_decimal",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "mock_clear": []
            }
        },
        "TestClearOpCode.test_clear_interrupt": {
            "name": "test_clear_interrupt",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "mock_clear": []
            }
        },
        "TestClearOpCode.test_clear_overflow": {
            "name": "test_clear_overflow",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "mock_clear": []
            }
        }
    },
    "pynes-master/tests/instructions/cmp_test.py": {
        "test_cpu": {
            "name": "test_cpu",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_negative": {
            "name": "test_negative",
            "location": 19,
            "return": [],
            "arguments": {
                "test_cpu": [],
                "test_value": [],
                "expected": []
            }
        },
        "test_zero": {
            "name": "test_zero",
            "location": 26,
            "return": [],
            "arguments": {
                "test_cpu": []
            }
        },
        "test_carry": {
            "name": "test_carry",
            "location": 34,
            "return": [],
            "arguments": {
                "test_cpu": []
            }
        },
        "TestCompareInstructions.test_cmp": {
            "name": "test_cmp",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "test_cpu": []
            }
        },
        "TestCompareInstructions.test_cpx": {
            "name": "test_cpx",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "test_cpu": []
            }
        },
        "TestCompareInstructions.test_cpy": {
            "name": "test_cpy",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "test_cpu": []
            }
        }
    },
    "pynes-master/tests/instructions/__init__.py": {}
}
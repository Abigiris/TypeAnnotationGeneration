{
    "pypi2nix-master/conftest.py": {
        "nix": {
            "name": "nix",
            "location": 41,
            "return": [
                "Nix"
            ],
            "arguments": {
                "logger": [
                    "Logger"
                ]
            }
        },
        "project_dir": {
            "name": "project_dir",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "tmpdir_factory": [
                    "Any"
                ]
            }
        },
        "download_dir": {
            "name": "download_dir",
            "location": 52,
            "return": [
                "Path"
            ],
            "arguments": {
                "project_dir": [
                    "str"
                ]
            }
        },
        "wheels_dir": {
            "name": "wheels_dir",
            "location": 59,
            "return": [
                "Path"
            ],
            "arguments": {
                "project_dir": [
                    "str"
                ]
            }
        },
        "wheel_builder": {
            "name": "wheel_builder",
            "location": 66,
            "return": [
                "WheelBuilder"
            ],
            "arguments": {
                "pip": [
                    "Pip"
                ],
                "project_dir": [
                    "str"
                ],
                "logger": [
                    "Logger"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ],
                "current_platform": [
                    "TargetPlatform"
                ],
                "base_dependency_graph": [
                    "DependencyGraph"
                ]
            }
        },
        "base_dependency_graph": {
            "name": "base_dependency_graph",
            "location": 89,
            "return": [
                "DependencyGraph"
            ],
            "arguments": {}
        },
        "extracted_six_package": {
            "name": "extracted_six_package",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "six_requirements": [
                    "RequirementSet"
                ],
                "wheel_builder": [
                    "WheelBuilder"
                ],
                "current_platform": [
                    "TargetPlatform"
                ],
                "logger": [
                    "Logger"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "six_requirements": {
            "name": "six_requirements",
            "location": 112,
            "return": [
                "RequirementSet"
            ],
            "arguments": {
                "current_platform": [
                    "TargetPlatform"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "six_source_distribution_archive": {
            "name": "six_source_distribution_archive",
            "location": 121,
            "return": [
                "Archive"
            ],
            "arguments": {
                "data_directory": [
                    "str"
                ]
            }
        },
        "distribution_archive_for_jsonschema": {
            "name": "distribution_archive_for_jsonschema",
            "location": 126,
            "return": [
                "Archive"
            ],
            "arguments": {
                "data_directory": [
                    "str"
                ]
            }
        },
        "requirement": {
            "name": "requirement",
            "location": 131,
            "return": [
                "Requirement"
            ],
            "arguments": {
                "request": [
                    "Any"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "setupcfg_package_wheel_path": {
            "name": "setupcfg_package_wheel_path",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {
                "data_directory": [
                    "str"
                ]
            }
        },
        "setupcfg_package_wheel": {
            "name": "setupcfg_package_wheel",
            "location": 141,
            "return": [
                "Wheel"
            ],
            "arguments": {
                "setupcfg_package_wheel_path": [
                    "str"
                ],
                "logger": [
                    "Logger"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ],
                "current_platform": [
                    "TargetPlatform"
                ]
            }
        },
        "pip": {
            "name": "pip",
            "location": 158,
            "return": [
                "VirtualenvPip"
            ],
            "arguments": {
                "logger": [
                    "Logger"
                ],
                "current_platform": [
                    "TargetPlatform"
                ],
                "project_dir": [
                    "str"
                ],
                "wheel_distribution_archive_path": [
                    "str"
                ],
                "data_directory": [
                    "str"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ],
                "package_source_directory": [
                    "Path"
                ]
            }
        },
        "source_distribution_archive": {
            "name": "source_distribution_archive",
            "location": 182,
            "return": [
                "Archive"
            ],
            "arguments": {
                "request": [
                    "Any"
                ],
                "data_directory": [
                    "str"
                ]
            }
        },
        "platform_generator": {
            "name": "platform_generator",
            "location": 187,
            "return": [
                "PlatformGenerator"
            ],
            "arguments": {
                "nix": [
                    "Nix"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "current_platform": {
            "name": "current_platform",
            "location": 192,
            "return": [
                "TargetPlatform"
            ],
            "arguments": {
                "platform_generator": [
                    "PlatformGenerator"
                ]
            }
        },
        "test_txt_content": {
            "name": "test_txt_content",
            "location": 201,
            "return": [],
            "arguments": {}
        },
        "test_tar_gz_path": {
            "name": "test_tar_gz_path",
            "location": 208,
            "return": [],
            "arguments": {}
        },
        "test_zip_path": {
            "name": "test_zip_path",
            "location": 213,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "test_tar_bz2_path": {
            "name": "test_tar_bz2_path",
            "location": 218,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "data_directory": {
            "name": "data_directory",
            "location": 223,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "logger": {
            "name": "logger",
            "location": 228,
            "return": [
                "Generator[(Logger, None, None)]"
            ],
            "arguments": {}
        },
        "requirement_parser": {
            "name": "requirement_parser",
            "location": 234,
            "return": [],
            "arguments": {
                "logger": []
            }
        },
        "wheel_distribution_archive_path": {
            "name": "wheel_distribution_archive_path",
            "location": 239,
            "return": [],
            "arguments": {
                "data_directory": []
            }
        },
        "sources_for_test_packages": {
            "name": "sources_for_test_packages",
            "location": 244,
            "return": [],
            "arguments": {
                "data_directory": []
            }
        },
        "pypi": {
            "name": "pypi",
            "location": 256,
            "return": [
                "Pypi"
            ],
            "arguments": {
                "logger": [
                    "Logger"
                ]
            }
        },
        "flit_wheel": {
            "name": "flit_wheel",
            "location": 261,
            "return": [],
            "arguments": {
                "data_directory": [],
                "current_platform": [],
                "logger": [],
                "requirement_parser": []
            }
        },
        "package_source_directory": {
            "name": "package_source_directory",
            "location": 273,
            "return": [
                "Path"
            ],
            "arguments": {
                "tmpdir_factory": [
                    "Any"
                ]
            }
        },
        "package_generator": {
            "name": "package_generator",
            "location": 279,
            "return": [
                "PackageGenerator"
            ],
            "arguments": {
                "package_source_directory": [
                    "Path"
                ],
                "logger": [
                    "Logger"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "MyInt.tolles_feature": {
            "name": "tolles_feature",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pypi2nix-master/setup.py": {},
    "pypi2nix-master/integrationtests/framework.py": {
        "IntegrationTest.setUp": {
            "name": "setUp",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.test_build_example": {
            "name": "test_build_example",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.build_pypi2nix": {
            "name": "build_pypi2nix",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.generate_requirements_file": {
            "name": "generate_requirements_file",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.build_nix_expression": {
            "name": "build_nix_expression",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.build_nix_expression_command": {
            "name": "build_nix_expression_command",
            "location": 115,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.setup_requires": {
            "name": "setup_requires",
            "location": 143,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.check_requirements_file_content": {
            "name": "check_requirements_file_content",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.run_expression_tests": {
            "name": "run_expression_tests",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.run_dependency_graph_tests": {
            "name": "run_dependency_graph_tests",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.build_interpreter_from_generated_expression": {
            "name": "build_interpreter_from_generated_expression",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.build_additional_attributes": {
            "name": "build_additional_attributes",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.run_interpreter_with_test_code": {
            "name": "run_interpreter_with_test_code",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.run_interpreter_with_test_code_from_result": {
            "name": "run_interpreter_with_test_code_from_result",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_code": [
                    "str"
                ]
            }
        },
        "IntegrationTest.run_interpreter_with_test_code_in_nix_shell": {
            "name": "run_interpreter_with_test_code_in_nix_shell",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_code": [
                    "str"
                ]
            }
        },
        "IntegrationTest.read_requirements_file_contents": {
            "name": "read_requirements_file_contents",
            "location": 221,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.code_for_testing_string": {
            "name": "code_for_testing_string",
            "location": 225,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.extra_environment": {
            "name": "extra_environment",
            "location": 243,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.run_executable_tests": {
            "name": "run_executable_tests",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.run_test_command_in_shell": {
            "name": "run_test_command_in_shell",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_command": [
                    "'TestCommand'"
                ]
            }
        },
        "IntegrationTest.run_test_command_from_build_output": {
            "name": "run_test_command_from_build_output",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_command": [
                    "'TestCommand'"
                ]
            }
        },
        "IntegrationTest.executables_for_testing": {
            "name": "executables_for_testing",
            "location": 296,
            "return": [
                "List['TestCommand']"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.nix_build_env": {
            "name": "nix_build_env",
            "location": 299,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.generate_requirements_file_content": {
            "name": "generate_requirements_file_content",
            "location": 304,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.generate_constraints_txt": {
            "name": "generate_constraints_txt",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.constraints_txt_path": {
            "name": "constraints_txt_path",
            "location": 316,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.write_requirements_file": {
            "name": "write_requirements_file",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str"
                ]
            }
        },
        "IntegrationTest.requirements_file_path": {
            "name": "requirements_file_path",
            "location": 324,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.example_directory": {
            "name": "example_directory",
            "location": 327,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.requirements_file_check": {
            "name": "requirements_file_check",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ]
            }
        },
        "IntegrationTest._dependency_graph_output_path": {
            "name": "_dependency_graph_output_path",
            "location": 333,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.build_directory": {
            "name": "build_directory",
            "location": 336,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.prepare_build_directory": {
            "name": "prepare_build_directory",
            "location": 339,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.check_dependency_graph": {
            "name": "check_dependency_graph",
            "location": 344,
            "return": [],
            "arguments": {
                "self": [],
                "dependency_graph": [
                    "DependencyGraph"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "IntegrationTest._read_dependency_graph": {
            "name": "_read_dependency_graph",
            "location": 349,
            "return": [
                "DependencyGraph"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.rendered_dependency_graph": {
            "name": "rendered_dependency_graph",
            "location": 363,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pypi2nix-master/integrationtests/test_aiohttp.py": {},
    "pypi2nix-master/integrationtests/test_appdirs.py": {},
    "pypi2nix-master/integrationtests/test_awscli_and_requests.py": {
        "AwscliAndRequestsTestCase.executables_for_testing": {
            "name": "executables_for_testing",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pypi2nix-master/integrationtests/test_connexion.py": {
        "ConnexionTestCase.setup_requires": {
            "name": "setup_requires",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pypi2nix-master/integrationtests/test_dependency_graph.py": {
        "DependencyGraphOutputTestCase.check_dependency_graph": {
            "name": "check_dependency_graph",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "dependency_graph": [
                    "DependencyGraph"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        }
    },
    "pypi2nix-master/integrationtests/test_empy.py": {},
    "pypi2nix-master/integrationtests/test_fava.py": {},
    "pypi2nix-master/integrationtests/test_flake8.py": {
        "Flake8TestCase.setup_requires": {
            "name": "setup_requires",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pypi2nix-master/integrationtests/test_flake8_mercurial.py": {
        "Flake8MercurialTestCase.setup_requires": {
            "name": "setup_requires",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Flake8MercurialTestCase.requirements_file_check": {
            "name": "requirements_file_check",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        }
    },
    "pypi2nix-master/integrationtests/test_flit.py": {},
    "pypi2nix-master/integrationtests/test_ldap.py": {
        "LdapTestCase.extra_environment": {
            "name": "extra_environment",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pypi2nix-master/integrationtests/test_lektor.py": {
        "LektorTestCase.executables_for_testing": {
            "name": "executables_for_testing",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pypi2nix-master/integrationtests/test_local_path.py": {},
    "pypi2nix-master/integrationtests/test_pillow.py": {},
    "pypi2nix-master/integrationtests/test_pynacl.py": {},
    "pypi2nix-master/integrationtests/test_relative_paths.py": {
        "RelativePathsTestCase.requirements_file_check": {
            "name": "requirements_file_check",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        }
    },
    "pypi2nix-master/integrationtests/test_rss2email.py": {
        "Rss2EmailTestCase.executables_for_testing": {
            "name": "executables_for_testing",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pypi2nix-master/integrationtests/test_scipy.py": {
        "ScipyTestCase.setup_requires": {
            "name": "setup_requires",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pypi2nix-master/integrationtests/test_serpy_0_1_1.py": {
        "SerpyTestCase.setup_requires": {
            "name": "setup_requires",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pypi2nix-master/integrationtests/test_setuptools.py": {
        "SetuptoolsTestCase.requirements_file_check": {
            "name": "requirements_file_check",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        }
    },
    "pypi2nix-master/integrationtests/test_tornado.py": {
        "TornadoTestCase.requirements_file_check": {
            "name": "requirements_file_check",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        }
    },
    "pypi2nix-master/integrationtests/__init__.py": {},
    "pypi2nix-master/integrationtests/local_path/egg/setup.py": {},
    "pypi2nix-master/integrationtests/relative_paths/test_package/setup.py": {},
    "pypi2nix-master/mypy/setuptools/__init__.py": {
        "setup": {
            "name": "setup",
            "location": 4,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "pypi2nix-master/scripts/build_wheel.py": {
        "build_wheel": {
            "name": "build_wheel",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "target_directory": [
                    "str"
                ],
                "requirement": [
                    "str"
                ]
            }
        }
    },
    "pypi2nix-master/scripts/deploy_to_pypi.py": {
        "main": {
            "name": "main",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "set_up_environment": {
            "name": "set_up_environment",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "parse_args": {
            "name": "parse_args",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "get_pypi_name_from_args": {
            "name": "get_pypi_name_from_args",
            "location": 28,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "remove_old_build_artifacts": {
            "name": "remove_old_build_artifacts",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "deploy_to": {
            "name": "deploy_to",
            "location": 36,
            "return": [],
            "arguments": {
                "pypi_name": []
            }
        }
    },
    "pypi2nix-master/scripts/format_sources.py": {
        "find_nix_files_in_integration_tests": {
            "name": "find_nix_files_in_integration_tests",
            "location": 60,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "initialize_logger": {
            "name": "initialize_logger",
            "location": 69,
            "return": [
                "Logger"
            ],
            "arguments": {}
        },
        "is_nixfmt_installed": {
            "name": "is_nixfmt_installed",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "CodeFormatter.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CodeFormatter.main": {
            "name": "main",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CodeFormatter.run_check_process": {
            "name": "run_check_process",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "executable": [],
                "arguments": [
                    "List[str]"
                ]
            }
        },
        "CodeFormatter.format_nix_files": {
            "name": "format_nix_files",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pypi2nix-master/scripts/install_test.py": {
        "main": {
            "name": "main",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "set_up_environment": {
            "name": "set_up_environment",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "create_sdist": {
            "name": "create_sdist",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "create_virtual_env": {
            "name": "create_virtual_env",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "create_wheel": {
            "name": "create_wheel",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "install_sdist": {
            "name": "install_sdist",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "install_wheel": {
            "name": "install_wheel",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "run_help_command": {
            "name": "run_help_command",
            "location": 75,
            "return": [],
            "arguments": {}
        }
    },
    "pypi2nix-master/scripts/package_source.py": {
        "PackageSource.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "Index"
                ],
                "pypi": [
                    "Pypi"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "PackageSource.update_package_from_master": {
            "name": "update_package_from_master",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "package_name": [
                    "str"
                ]
            }
        },
        "PackageSource.update_package_from_pip": {
            "name": "update_package_from_pip",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "package_name": [
                    "str"
                ]
            }
        },
        "PackageSource._get_url_for_package": {
            "name": "_get_url_for_package",
            "location": 39,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "package_name": [
                    "str"
                ]
            }
        },
        "PackageSource._log_no_update_warning": {
            "name": "_log_no_update_warning",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "package_name": [
                    "str"
                ]
            }
        },
        "PackageSource._log_update_success": {
            "name": "_log_update_success",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "package_name": [
                    "str"
                ]
            }
        }
    },
    "pypi2nix-master/scripts/prepare_test_data.py": {
        "build_test_package": {
            "name": "build_test_package",
            "location": 16,
            "return": [],
            "arguments": {
                "package_name": []
            }
        },
        "download_flit_wheel": {
            "name": "download_flit_wheel",
            "location": 38,
            "return": [],
            "arguments": {}
        }
    },
    "pypi2nix-master/scripts/repository.py": {
        "find_root": {
            "name": "find_root",
            "location": 4,
            "return": [
                "Path"
            ],
            "arguments": {
                "start": [
                    "Path"
                ]
            }
        }
    },
    "pypi2nix-master/scripts/run_integration_tests.py": {
        "generator": {
            "name": "generator",
            "location": 11,
            "return": [],
            "arguments": {
                "iterable": []
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "run_tests_from_file": {
            "name": "run_tests_from_file",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 28,
            "return": [],
            "arguments": {}
        }
    },
    "pypi2nix-master/scripts/update_dependencies.py": {
        "main": {
            "name": "main",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "parse_arguments": {
            "name": "parse_arguments",
            "location": 32,
            "return": [],
            "arguments": {}
        }
    },
    "pypi2nix-master/scripts/update_python_packages.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [],
            "arguments": {}
        }
    },
    "pypi2nix-master/scripts/__init__.py": {},
    "pypi2nix-master/source/conf.py": {},
    "pypi2nix-master/src/pypi2nix/archive.py": {
        "Archive.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Archive.extracted_files": {
            "name": "extracted_files",
            "location": 17,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Archive.unpack_archive": {
            "name": "unpack_archive",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_directory": [
                    "str"
                ]
            }
        },
        "Archive.__str__": {
            "name": "__str__",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/cli.py": {
        "main": {
            "name": "main",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "version": [
                    "str"
                ],
                "verbose": [
                    "int"
                ],
                "quiet": [
                    "int"
                ],
                "nix_shell": [
                    "Optional[str]"
                ],
                "nix_path": [
                    "List[str]"
                ],
                "basename": [
                    "str"
                ],
                "extra_build_inputs": [
                    "List[str]"
                ],
                "emit_extra_build_inputs": [
                    "bool"
                ],
                "extra_env": [
                    "str"
                ],
                "enable_tests": [
                    "bool"
                ],
                "python_version_argument": [
                    "str"
                ],
                "requirements": [
                    "List[str]"
                ],
                "editable": [
                    "List[str]"
                ],
                "setup_requires": [
                    "List[str]"
                ],
                "overrides": [
                    "List[NetworkFile]"
                ],
                "default_overrides": [
                    "bool"
                ],
                "wheels_cache": [
                    "List[str]"
                ],
                "build_directory": [
                    "Optional[str]"
                ],
                "dependency_graph_output": [
                    "Optional[str]"
                ],
                "dependency_graph_input": [
                    "Optional[NetworkFile]"
                ]
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/configuration.py": {},
    "pypi2nix-master/src/pypi2nix/dependency_graph.py": {
        "_merge_defaultdicts": {
            "name": "_merge_defaultdicts",
            "location": 208,
            "return": [
                "DefaultDict[(str, Set[V])]"
            ],
            "arguments": {
                "first": [
                    "DefaultDict[(str, Set[V])]"
                ],
                "second": [
                    "DefaultDict[(str, Set[V])]"
                ]
            }
        },
        "_merge_with_combine": {
            "name": "_merge_with_combine",
            "location": 216,
            "return": [
                "DefaultDict[(K, V)]"
            ],
            "arguments": {
                "first": [
                    "DefaultDict[(K, V)]"
                ],
                "second": [
                    "DefaultDict[(K, V)]"
                ],
                "combine_function": [
                    "Callable[([V, V], V)]"
                ],
                "constructor": [
                    "Callable[([], V)]"
                ]
            }
        },
        "DependencyGraph.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyGraph.set_runtime_dependency": {
            "name": "set_runtime_dependency",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dependent": [
                    "Requirement"
                ],
                "dependency": [
                    "Requirement"
                ]
            }
        },
        "DependencyGraph.set_buildtime_dependency": {
            "name": "set_buildtime_dependency",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dependent": [
                    "Requirement"
                ],
                "dependency": [
                    "Requirement"
                ]
            }
        },
        "DependencyGraph.set_external_dependency": {
            "name": "set_external_dependency",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dependent": [
                    "Requirement"
                ],
                "dependency": [
                    "ExternalDependency"
                ]
            }
        },
        "DependencyGraph.is_runtime_dependency": {
            "name": "is_runtime_dependency",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "dependent": [
                    "Requirement"
                ],
                "dependency": [
                    "Requirement"
                ]
            }
        },
        "DependencyGraph.is_buildtime_dependency": {
            "name": "is_buildtime_dependency",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "dependent": [
                    "Requirement"
                ],
                "dependency": [
                    "Requirement"
                ]
            }
        },
        "DependencyGraph.get_all_build_dependency_names": {
            "name": "get_all_build_dependency_names",
            "location": 61,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "package": [
                    "Requirement"
                ]
            }
        },
        "DependencyGraph.get_all_runtime_dependency_names": {
            "name": "get_all_runtime_dependency_names",
            "location": 64,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "package": [
                    "Requirement"
                ]
            }
        },
        "DependencyGraph.get_all_external_dependencies": {
            "name": "get_all_external_dependencies",
            "location": 67,
            "return": [
                "Set[ExternalDependency]"
            ],
            "arguments": {
                "self": [],
                "package": [
                    "Requirement"
                ]
            }
        },
        "DependencyGraph.import_wheel": {
            "name": "import_wheel",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wheel": [
                    "Wheel"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "DependencyGraph.serialize": {
            "name": "serialize",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyGraph.deserialize": {
            "name": "deserialize",
            "location": 96,
            "return": [
                "'DependencyGraph'"
            ],
            "arguments": {
                "_class": [],
                "data": [
                    "str"
                ]
            }
        },
        "DependencyGraph._raise_on_cyclic_dependency": {
            "name": "_raise_on_cyclic_dependency",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dependent": [
                    "Requirement"
                ],
                "dependency": [
                    "Requirement"
                ]
            }
        },
        "DependencyGraph._is_python_child": {
            "name": "_is_python_child",
            "location": 123,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "dependent": [
                    "str"
                ],
                "dependency": [
                    "str"
                ]
            }
        },
        "DependencyGraph._is_runtime_child": {
            "name": "_is_runtime_child",
            "location": 129,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "dependent": [
                    "str"
                ],
                "dependency": [
                    "str"
                ]
            }
        },
        "DependencyGraph._get_python_children": {
            "name": "_get_python_children",
            "location": 135,
            "return": [
                "Generator[(str, None, None)]"
            ],
            "arguments": {
                "self": [],
                "package_name": [
                    "str"
                ]
            }
        },
        "DependencyGraph._get_runtime_children": {
            "name": "_get_runtime_children",
            "location": 151,
            "return": [
                "Generator[(str, None, None)]"
            ],
            "arguments": {
                "self": [],
                "package_name": [
                    "str"
                ]
            }
        },
        "DependencyGraph.__add__": {
            "name": "__add__",
            "location": 164,
            "return": [
                "'DependencyGraph'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'DependencyGraph'"
                ]
            }
        },
        "DependencyGraph.__copy__": {
            "name": "__copy__",
            "location": 177,
            "return": [
                "'DependencyGraph'"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyGraph.__eq__": {
            "name": "__eq__",
            "location": 184,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "DependencyGraph.__repr__": {
            "name": "__repr__",
            "location": 194,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/environment_marker.py": {
        "EnvironmentMarker.applies_to_platform": {
            "name": "applies_to_platform",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "target_platform": [
                    "TargetPlatform"
                ],
                "extras": [
                    "List[str]"
                ]
            }
        },
        "EnvironmentMarker.applies_to_platform._applies_to_platform_with_extra": {
            "name": "_applies_to_platform_with_extra",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "extra": [
                    "str"
                ]
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/exceptions.py": {},
    "pypi2nix-master/src/pypi2nix/expression_renderer.py": {
        "render_expression": {
            "name": "render_expression",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "packages_metadata": [
                    "Iterable[Wheel]"
                ],
                "sources": [
                    "Sources"
                ],
                "requirements_name": [
                    "str"
                ],
                "requirements_frozen": [
                    "str"
                ],
                "extra_build_inputs": [
                    "Iterable[str]"
                ],
                "enable_tests": [
                    "bool"
                ],
                "python_version": [
                    "PythonVersion"
                ],
                "target_directory": [
                    "str"
                ],
                "logger": [
                    "Logger"
                ],
                "target_platform": [
                    "TargetPlatform"
                ],
                "common_overrides": [
                    "Iterable[Overrides]"
                ]
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/license.py": {
        "escape_regex": {
            "name": "escape_regex",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "recognized_nix_license_from_classifiers": {
            "name": "recognized_nix_license_from_classifiers",
            "location": 138,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "classifiers": [
                    "List[str]"
                ]
            }
        },
        "first_license_classifier_from_list": {
            "name": "first_license_classifier_from_list",
            "location": 147,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "classifiers": [
                    "List[str]"
                ]
            }
        },
        "license_from_string": {
            "name": "license_from_string",
            "location": 155,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "license_string": [
                    "str"
                ]
            }
        },
        "find_license": {
            "name": "find_license",
            "location": 163,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "classifiers": [
                    "List[str]"
                ],
                "license_string": [
                    "str"
                ]
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/logger.py": {
        "verbosity_from_int": {
            "name": "verbosity_from_int",
            "location": 28,
            "return": [
                "Verbosity"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "Logger.error": {
            "name": "error",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Logger.warning": {
            "name": "warning",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Logger.info": {
            "name": "info",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Logger.debug": {
            "name": "debug",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Logger.set_verbosity": {
            "name": "set_verbosity",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "Verbosity"
                ]
            }
        },
        "StreamLogger.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "output": [
                    "TextIO"
                ]
            }
        },
        "StreamLogger.warning": {
            "name": "warning",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "StreamLogger.error": {
            "name": "error",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "StreamLogger.info": {
            "name": "info",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "StreamLogger.debug": {
            "name": "debug",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "StreamLogger.set_verbosity": {
            "name": "set_verbosity",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "Verbosity"
                ]
            }
        },
        "StreamLogger.stdout_logger": {
            "name": "stdout_logger",
            "location": 88,
            "return": [
                "StreamLogger"
            ],
            "arguments": {
                "constructor": []
            }
        },
        "ProxyLogger.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProxyLogger.info": {
            "name": "info",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "ProxyLogger.debug": {
            "name": "debug",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "ProxyLogger.warning": {
            "name": "warning",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "ProxyLogger.error": {
            "name": "error",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "ProxyLogger.set_verbosity": {
            "name": "set_verbosity",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "Verbosity"
                ]
            }
        },
        "ProxyLogger.set_target_logger": {
            "name": "set_target_logger",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Logger"
                ]
            }
        },
        "ProxyLogger.get_target_logger": {
            "name": "get_target_logger",
            "location": 129,
            "return": [
                "Optional[Logger]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/main.py": {
        "Pypi2nix.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "configuration": [
                    "ApplicationConfiguration"
                ]
            }
        },
        "Pypi2nix.run": {
            "name": "run",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pypi2nix.print_user_information": {
            "name": "print_user_information",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pypi2nix._extra_build_inputs": {
            "name": "_extra_build_inputs",
            "location": 141,
            "return": [
                "List[ExternalDependency]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pypi2nix.requirements_collector": {
            "name": "requirements_collector",
            "location": 151,
            "return": [
                "RequirementsCollector"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pypi2nix.setup_requirements_collector": {
            "name": "setup_requirements_collector",
            "location": 166,
            "return": [
                "RequirementsCollector"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pypi2nix.requirement_parser": {
            "name": "requirement_parser",
            "location": 179,
            "return": [
                "RequirementParser"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pypi2nix.target_platform": {
            "name": "target_platform",
            "location": 183,
            "return": [
                "TargetPlatform"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pypi2nix.nix": {
            "name": "nix",
            "location": 191,
            "return": [
                "Nix"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pypi2nix.logger": {
            "name": "logger",
            "location": 199,
            "return": [
                "Logger"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pypi2nix.base_dependency_graph": {
            "name": "base_dependency_graph",
            "location": 205,
            "return": [
                "DependencyGraph"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/memoize.py": {
        "memoize": {
            "name": "memoize",
            "location": 9,
            "return": [
                "Callable[([S], T)]"
            ],
            "arguments": {
                "method": [
                    "Callable[([S], T)]"
                ]
            }
        },
        "memoize.wrapped_method": {
            "name": "wrapped_method",
            "location": 11,
            "return": [
                "T@@"
            ],
            "arguments": {
                "self": [
                    "S@@"
                ]
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/metadata_fetcher.py": {
        "MetadataFetcher.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sources": [
                    "Sources"
                ],
                "logger": [
                    "Logger"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ],
                "pypi": [
                    "Pypi"
                ]
            }
        },
        "MetadataFetcher.main": {
            "name": "main",
            "location": 44,
            "return": [
                "List[Wheel]"
            ],
            "arguments": {
                "self": [],
                "wheel_paths": [
                    "Iterable[str]"
                ],
                "target_platform": [
                    "TargetPlatform"
                ],
                "source_distributions": [
                    "Dict[(str, SourceDistribution)]"
                ]
            }
        },
        "MetadataFetcher.process_wheel": {
            "name": "process_wheel",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wheel": [
                    "Wheel"
                ]
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/network_file.py": {
        "NetworkFile.nix_expression": {
            "name": "nix_expression",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkFile.fetch": {
            "name": "fetch",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlTextFile.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "logger": [
                    "Logger"
                ],
                "sha256": [
                    "Optional[str]"
                ],
                "name": [
                    "Optional[str]"
                ]
            }
        },
        "UrlTextFile.nix_expression": {
            "name": "nix_expression",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlTextFile.sha256": {
            "name": "sha256",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlTextFile.fetch": {
            "name": "fetch",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitTextFile.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repository_url": [
                    "str"
                ],
                "revision_name": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "GitTextFile.nix_expression": {
            "name": "nix_expression",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitTextFile.revision": {
            "name": "revision",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitTextFile.sha256": {
            "name": "sha256",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitTextFile._prefetch_data": {
            "name": "_prefetch_data",
            "location": 85,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitTextFile.fetch": {
            "name": "fetch",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiskTextFile.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "DiskTextFile.nix_expression": {
            "name": "nix_expression",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiskTextFile.fetch": {
            "name": "fetch",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/nix.py": {
        "EvaluationFailed.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Nix.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "logger": [
                    "Logger"
                ],
                "nix_path": [
                    "List[str]"
                ],
                "executable_directory": [
                    "Optional[str]"
                ]
            }
        },
        "Nix.evaluate_expression": {
            "name": "evaluate_expression",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "str"
                ]
            }
        },
        "Nix.shell": {
            "name": "shell",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str"
                ],
                "derivation_path": [
                    "str"
                ],
                "nix_arguments": [
                    "Dict[(str, NixOption)]"
                ],
                "pure": [
                    "bool"
                ]
            }
        },
        "Nix.build": {
            "name": "build",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_file": [
                    "str"
                ],
                "attribute": [
                    "Optional[str]"
                ],
                "out_link": [
                    "Optional[str]"
                ],
                "arguments": [
                    "Dict[(str, NixOption)]"
                ]
            }
        },
        "Nix.evaluate_file": {
            "name": "evaluate_file",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_file": [
                    "str"
                ],
                "attribute": [
                    "Optional[str]"
                ]
            }
        },
        "Nix.build_expression": {
            "name": "build_expression",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "str"
                ],
                "out_link": [
                    "Optional[str]"
                ],
                "arguments": [
                    "Dict[(str, NixOption)]"
                ]
            }
        },
        "Nix.run_nix_command": {
            "name": "run_nix_command",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "binary_name": [
                    "str"
                ],
                "command": [
                    "List[str]"
                ]
            }
        },
        "Nix.nix_path_arguments": {
            "name": "nix_path_arguments",
            "location": 115,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nix.executable_path": {
            "name": "executable_path",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "program_name": [
                    "str"
                ]
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/nix_language.py": {
        "escape_string": {
            "name": "escape_string",
            "location": 1,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/overrides.py": {
        "Overrides.nix_expression": {
            "name": "nix_expression",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "Logger"
                ]
            }
        },
        "OverridesNetworkFile.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "network_file": [
                    "NetworkFile"
                ]
            }
        },
        "OverridesNetworkFile.nix_expression": {
            "name": "nix_expression",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "Logger"
                ]
            }
        },
        "OverridesGithub.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "str"
                ],
                "repo": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "rev": [
                    "Optional[str]"
                ]
            }
        },
        "OverridesGithub.nix_expression": {
            "name": "nix_expression",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "Logger"
                ]
            }
        },
        "NetworkFileParameter.convert": {
            "name": "convert",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "param": [],
                "ctx": []
            }
        },
        "NetworkFileParameter._url_to_network_file": {
            "name": "_url_to_network_file",
            "location": 83,
            "return": [
                "NetworkFile"
            ],
            "arguments": {
                "self": [],
                "url_string": [
                    "str"
                ]
            }
        },
        "NetworkFileParameter._handle_git_override_url": {
            "name": "_handle_git_override_url",
            "location": 98,
            "return": [
                "GitTextFile"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "urllib.parse.ParseResult"
                ],
                "url_string": [
                    "str"
                ]
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/package_source.py": {
        "GitSource.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "revision": [
                    "Optional[str]"
                ]
            }
        },
        "GitSource.nix_expression": {
            "name": "nix_expression",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitSource.hash_value": {
            "name": "hash_value",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitSource.revision": {
            "name": "revision",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitSource.prefetch_data": {
            "name": "prefetch_data",
            "location": 42,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HgSource.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "logger": [
                    "Logger"
                ],
                "revision": [
                    "Optional[str]"
                ]
            }
        },
        "HgSource.nix_expression": {
            "name": "nix_expression",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HgSource.hash_value": {
            "name": "hash_value",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HgSource.revision": {
            "name": "revision",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HgSource.prefetch_data": {
            "name": "prefetch_data",
            "location": 74,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlSource.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "logger": [
                    "Logger"
                ],
                "hash_value": [
                    "Optional[str]"
                ]
            }
        },
        "UrlSource.nix_expression": {
            "name": "nix_expression",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlSource.hash_value": {
            "name": "hash_value",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlSource.calculate_hash_value": {
            "name": "calculate_hash_value",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathSource.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "PathSource._normalized_path": {
            "name": "_normalized_path",
            "location": 113,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathSource.nix_expression": {
            "name": "nix_expression",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/path.py": {
        "Path.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Union[(pathlib.Path, str, Path)]"
                ]
            }
        },
        "Path.list_files": {
            "name": "list_files",
            "location": 20,
            "return": [
                "List[Path]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.ensure_directory": {
            "name": "ensure_directory",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.write_text": {
            "name": "write_text",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Path.endswith": {
            "name": "endswith",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "suffix": [
                    "str"
                ]
            }
        },
        "Path.is_file": {
            "name": "is_file",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.__truediv__": {
            "name": "__truediv__",
            "location": 35,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(str, Path)]"
                ]
            }
        },
        "Path.__str__": {
            "name": "__str__",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.__hash__": {
            "name": "__hash__",
            "location": 44,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.__eq__": {
            "name": "__eq__",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/project_directory.py": {
        "ProjectDirectory.__enter__": {
            "name": "__enter__",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectDirectory.__exit__": {
            "name": "__exit__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type]"
                ],
                "exc_value": [
                    "Optional[Exception]"
                ],
                "traceback": [
                    "Optional[TracebackType]"
                ]
            }
        },
        "TemporaryProjectDirectory.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryProjectDirectory.__enter__": {
            "name": "__enter__",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryProjectDirectory.__exit__": {
            "name": "__exit__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type]"
                ],
                "exc_value": [
                    "Optional[Exception]"
                ],
                "traceback": [
                    "Optional[TracebackType]"
                ]
            }
        },
        "PersistentProjectDirectory.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "PersistentProjectDirectory.__enter__": {
            "name": "__enter__",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentProjectDirectory.__exit__": {
            "name": "__exit__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type]"
                ],
                "exc_value": [
                    "Optional[Exception]"
                ],
                "traceback": [
                    "Optional[TracebackType]"
                ]
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/pypi.py": {
        "Pypi.get_package": {
            "name": "get_package",
            "location": 28,
            "return": [
                "PypiPackage"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Pypi.get_source_release": {
            "name": "get_source_release",
            "location": 65,
            "return": [
                "Optional[PypiRelease]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "version": [
                    "str"
                ]
            }
        },
        "Pypi.get_package.get_release_type": {
            "name": "get_release_type",
            "location": 29,
            "return": [
                "ReleaseType"
            ],
            "arguments": {
                "package_type": [
                    "str"
                ]
            }
        },
        "Pypi.get_source_release.version_tag_from_filename": {
            "name": "version_tag_from_filename",
            "location": 66,
            "return": [
                "Union[(Version, LegacyVersion)]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/pypi_package.py": {},
    "pypi2nix-master/src/pypi2nix/pypi_release.py": {
        "get_release_type_by_packagetype": {
            "name": "get_release_type_by_packagetype",
            "location": 30,
            "return": [
                "Optional[ReleaseType]"
            ],
            "arguments": {
                "packagetype": [
                    "str"
                ]
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/python_version.py": {
        "python_version_from_version_string": {
            "name": "python_version_from_version_string",
            "location": 34,
            "return": [
                "Optional[PythonVersion]"
            ],
            "arguments": {
                "version_string": [
                    "str"
                ]
            }
        },
        "PythonVersion.nixpkgs_attribute": {
            "name": "nixpkgs_attribute",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonVersion.derivation_name": {
            "name": "derivation_name",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonVersion.major_version": {
            "name": "major_version",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/requirements.py": {
        "Requirement.name": {
            "name": "name",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Requirement.extras": {
            "name": "extras",
            "location": 36,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Requirement.add": {
            "name": "add",
            "location": 40,
            "return": [
                "'Requirement'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'Requirement'"
                ],
                "target_platform": [
                    "TargetPlatform"
                ]
            }
        },
        "Requirement.source": {
            "name": "source",
            "location": 46,
            "return": [
                "Optional[PackageSource]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Requirement.environment_markers": {
            "name": "environment_markers",
            "location": 50,
            "return": [
                "Optional[EnvironmentMarker]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Requirement.logger": {
            "name": "logger",
            "location": 54,
            "return": [
                "Logger"
            ],
            "arguments": {
                "self": []
            }
        },
        "Requirement.applies_to_target": {
            "name": "applies_to_target",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "target_platform": [
                    "TargetPlatform"
                ],
                "extras": [
                    "List[str]"
                ]
            }
        },
        "Requirement.to_line": {
            "name": "to_line",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlRequirement.name": {
            "name": "name",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlRequirement.extras": {
            "name": "extras",
            "location": 91,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlRequirement.logger": {
            "name": "logger",
            "location": 94,
            "return": [
                "Logger"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlRequirement.add": {
            "name": "add",
            "location": 97,
            "return": [
                "Requirement"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Requirement"
                ],
                "target_platform": [
                    "TargetPlatform"
                ]
            }
        },
        "UrlRequirement.source": {
            "name": "source",
            "location": 131,
            "return": [
                "PackageSource"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlRequirement.environment_markers": {
            "name": "environment_markers",
            "location": 143,
            "return": [
                "Optional[EnvironmentMarker]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlRequirement._handle_hg_source": {
            "name": "_handle_hg_source",
            "location": 146,
            "return": [
                "HgSource"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "UrlRequirement._handle_git_source": {
            "name": "_handle_git_source",
            "location": 154,
            "return": [
                "GitSource"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "UrlRequirement.to_line": {
            "name": "to_line",
            "location": 162,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlRequirement.url": {
            "name": "url",
            "location": 168,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlRequirement.url_scheme": {
            "name": "url_scheme",
            "location": 171,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlRequirement.url_path": {
            "name": "url_path",
            "location": 175,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathRequirement.name": {
            "name": "name",
            "location": 188,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathRequirement.extras": {
            "name": "extras",
            "location": 191,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathRequirement.logger": {
            "name": "logger",
            "location": 194,
            "return": [
                "Logger"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathRequirement.add": {
            "name": "add",
            "location": 197,
            "return": [
                "Requirement"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Requirement"
                ],
                "target_platform": [
                    "TargetPlatform"
                ]
            }
        },
        "PathRequirement.source": {
            "name": "source",
            "location": 231,
            "return": [
                "PathSource"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathRequirement.environment_markers": {
            "name": "environment_markers",
            "location": 234,
            "return": [
                "Optional[EnvironmentMarker]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathRequirement.to_line": {
            "name": "to_line",
            "location": 237,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathRequirement.path": {
            "name": "path",
            "location": 243,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathRequirement.change_path": {
            "name": "change_path",
            "location": 246,
            "return": [
                "'PathRequirement'"
            ],
            "arguments": {
                "self": [],
                "mapping": [
                    "Callable[([str], str)]"
                ]
            }
        },
        "VersionRequirement.name": {
            "name": "name",
            "location": 258,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionRequirement.extras": {
            "name": "extras",
            "location": 261,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionRequirement.logger": {
            "name": "logger",
            "location": 264,
            "return": [
                "Logger"
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionRequirement.add": {
            "name": "add",
            "location": 267,
            "return": [
                "Requirement"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Requirement"
                ],
                "target_platform": [
                    "TargetPlatform"
                ]
            }
        },
        "VersionRequirement.source": {
            "name": "source",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionRequirement.environment_markers": {
            "name": "environment_markers",
            "location": 299,
            "return": [
                "Optional[EnvironmentMarker]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionRequirement.version": {
            "name": "version",
            "location": 302,
            "return": [
                "List[Tuple[(str, str)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionRequirement.to_line": {
            "name": "to_line",
            "location": 305,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/requirements_collector.py": {
        "RequirementsCollector.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "platform": [
                    "TargetPlatform"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ],
                "logger": [
                    "Logger"
                ],
                "project_directory": [
                    "str"
                ],
                "base_dependency_graph": [
                    "DependencyGraph"
                ]
            }
        },
        "RequirementsCollector.requirements": {
            "name": "requirements",
            "location": 35,
            "return": [
                "RequirementSet"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequirementsCollector.add_line": {
            "name": "add_line",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        },
        "RequirementsCollector.add_file": {
            "name": "add_file",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "RequirementsCollector.sources": {
            "name": "sources",
            "location": 65,
            "return": [
                "Sources"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequirementsCollector._add_line_without_dependency_check": {
            "name": "_add_line_without_dependency_check",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        },
        "RequirementsCollector._handle_requirements_path": {
            "name": "_handle_requirements_path",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/requirements_file.py": {
        "RequirementsFile.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "project_dir": [
                    "str"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "RequirementsFile.from_lines": {
            "name": "from_lines",
            "location": 37,
            "return": [
                "'RequirementsFile'"
            ],
            "arguments": {
                "constructor": [
                    "'Type[RequirementsFile]'"
                ],
                "lines": [
                    "List[str]"
                ],
                "project_dir": [
                    "str"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "RequirementsFile.read": {
            "name": "read",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequirementsFile.process": {
            "name": "process",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequirementsFile._process_line": {
            "name": "_process_line",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "requirements_line": [
                    "str"
                ]
            }
        },
        "RequirementsFile.processed_requirements_file_path": {
            "name": "processed_requirements_file_path",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequirementsFile.is_include_line": {
            "name": "is_include_line",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        },
        "RequirementsFile.is_vcs_line": {
            "name": "is_vcs_line",
            "location": 120,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        },
        "RequirementsFile.is_editable_line": {
            "name": "is_editable_line",
            "location": 123,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        },
        "RequirementsFile.sources": {
            "name": "sources",
            "location": 126,
            "return": [
                "Sources"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RequirementIncludeLineHandler.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ],
                "original_path": [
                    "str"
                ],
                "project_directory": [
                    "str"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "_RequirementIncludeLineHandler.process": {
            "name": "process",
            "location": 145,
            "return": [
                "Tuple[(str, Sources)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_EditableLineHandler.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ],
                "original_path": [
                    "str"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "_EditableLineHandler.process": {
            "name": "process",
            "location": 175,
            "return": [
                "Tuple[(str, Sources)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_EditableLineHandler._strip_editable": {
            "name": "_strip_editable",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RequirementLineHandler.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ],
                "original_path": [
                    "str"
                ]
            }
        },
        "_RequirementLineHandler.process": {
            "name": "process",
            "location": 198,
            "return": [
                "Tuple[(str, Sources)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RequirementLineHandler._update_path": {
            "name": "_update_path",
            "location": 210,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "requirement_name": [
                    "str"
                ],
                "requirement_path": [
                    "str"
                ]
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/requirement_parser.py": {
        "ParsingFailed.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "str"
                ]
            }
        },
        "ParsingFailed.__str__": {
            "name": "__str__",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequirementParser.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "Logger"
                ]
            }
        },
        "RequirementParser.compiled_grammar": {
            "name": "compiled_grammar",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RequirementParser.parse": {
            "name": "parse",
            "location": 28,
            "return": [
                "Requirement"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/requirement_parser_grammar.py": {
        "_RequirementParserGrammar.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RequirementParserGrammar.__call__": {
            "name": "__call__",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "logger": []
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/requirement_set.py": {
        "RequirementSet.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_platform": [
                    "TargetPlatform"
                ]
            }
        },
        "RequirementSet.add": {
            "name": "add",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requirement": [
                    "Requirement"
                ]
            }
        },
        "RequirementSet.to_file": {
            "name": "to_file",
            "location": 42,
            "return": [
                "RequirementsFile"
            ],
            "arguments": {
                "self": [],
                "project_dir": [
                    "str"
                ],
                "target_platform": [
                    "TargetPlatform"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "RequirementSet.add_constraint": {
            "name": "add_constraint",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requirement": [
                    "Requirement"
                ]
            }
        },
        "RequirementSet.filter": {
            "name": "filter",
            "location": 73,
            "return": [
                "'RequirementSet'"
            ],
            "arguments": {
                "self": [],
                "filter_function": [
                    "Callable[([Requirement], bool)]"
                ]
            }
        },
        "RequirementSet.to_constraints_only": {
            "name": "to_constraints_only",
            "location": 83,
            "return": [
                "'RequirementSet'"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequirementSet.from_file": {
            "name": "from_file",
            "location": 92,
            "return": [
                "'RequirementSet'"
            ],
            "arguments": {
                "constructor": [],
                "requirements_file": [
                    "RequirementsFile"
                ],
                "target_platform": [
                    "TargetPlatform"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "RequirementSet.sources": {
            "name": "sources",
            "location": 113,
            "return": [
                "Sources"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequirementSet.get": {
            "name": "get",
            "location": 123,
            "return": [
                "Union[(Requirement, None, T)]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "default": [
                    "Optional[T]"
                ]
            }
        },
        "RequirementSet.__len__": {
            "name": "__len__",
            "location": 129,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequirementSet.__add__": {
            "name": "__add__",
            "location": 132,
            "return": [
                "'RequirementSet'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'RequirementSet'"
                ]
            }
        },
        "RequirementSet.__contains__": {
            "name": "__contains__",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "RequirementSet.__iter__": {
            "name": "__iter__",
            "location": 150,
            "return": [
                "Iterator[Requirement]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequirementSet.__getitem__": {
            "name": "__getitem__",
            "location": 153,
            "return": [
                "Requirement"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "RequirementSet._requirements_file_content": {
            "name": "_requirements_file_content",
            "location": 156,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "target_platform": [
                    "TargetPlatform"
                ]
            }
        },
        "RequirementSet._constraints_file_content": {
            "name": "_constraints_file_content",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "target_platform": [
                    "TargetPlatform"
                ]
            }
        },
        "RequirementSet._requirements_to_file_content": {
            "name": "_requirements_to_file_content",
            "location": 167,
            "return": [
                "str"
            ],
            "arguments": {
                "_": [],
                "requirements": [
                    "Iterable[Requirement]"
                ],
                "target_platform": [
                    "TargetPlatform"
                ]
            }
        },
        "RequirementSet._handle_non_requirement_line": {
            "name": "_handle_non_requirement_line",
            "location": 179,
            "return": [
                "'RequirementSet'"
            ],
            "arguments": {
                "constructor": [],
                "line": [
                    "str"
                ],
                "target_platform": [
                    "TargetPlatform"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ],
                "logger": [
                    "Logger"
                ]
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/sources.py": {
        "Sources.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sources.add": {
            "name": "add",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "source": [
                    "PackageSource"
                ]
            }
        },
        "Sources.__contains__": {
            "name": "__contains__",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        },
        "Sources.__getitem__": {
            "name": "__getitem__",
            "location": 18,
            "return": [
                "PackageSource"
            ],
            "arguments": {
                "self": [],
                "item_name": [
                    "str"
                ]
            }
        },
        "Sources.update": {
            "name": "update",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other_sources": [
                    "'Sources'"
                ]
            }
        },
        "Sources.items": {
            "name": "items",
            "location": 24,
            "return": [
                "List[Tuple[(str, PackageSource)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sources.__len__": {
            "name": "__len__",
            "location": 27,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/source_distribution.py": {
        "SourceDistribution.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "logger": [
                    "Logger"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ],
                "pyproject_toml": [
                    "Optional[PyprojectToml]"
                ],
                "setup_cfg": [
                    "Optional[SetupCfg]"
                ]
            }
        },
        "SourceDistribution.package_format": {
            "name": "package_format",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceDistribution.from_archive": {
            "name": "from_archive",
            "location": 45,
            "return": [
                "'SourceDistribution'"
            ],
            "arguments": {
                "source_distribution": [],
                "archive": [
                    "Archive"
                ],
                "logger": [
                    "Logger"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "SourceDistribution.get_pyproject_toml": {
            "name": "get_pyproject_toml",
            "location": 84,
            "return": [
                "Optional[PyprojectToml]"
            ],
            "arguments": {
                "_": [],
                "name": [
                    "str"
                ],
                "extracted_files": [
                    "Iterable[str]"
                ],
                "logger": [
                    "Logger"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "SourceDistribution.get_setup_cfg": {
            "name": "get_setup_cfg",
            "location": 109,
            "return": [
                "Optional[SetupCfg]"
            ],
            "arguments": {
                "_": [],
                "extracted_files": [
                    "Iterable[str]"
                ],
                "logger": [
                    "Logger"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "SourceDistribution._get_package_metadata": {
            "name": "_get_package_metadata",
            "location": 130,
            "return": [
                "Optional[PackageMetadata]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "SourceDistribution._get_name": {
            "name": "_get_name",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "setup_cfg": [
                    "Optional[SetupCfg]"
                ],
                "metadata": [
                    "Optional[PackageMetadata]"
                ],
                "archive": [
                    "Archive"
                ]
            }
        },
        "SourceDistribution.to_loose_requirement": {
            "name": "to_loose_requirement",
            "location": 159,
            "return": [
                "Requirement"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceDistribution.build_dependencies": {
            "name": "build_dependencies",
            "location": 168,
            "return": [
                "RequirementSet"
            ],
            "arguments": {
                "self": [],
                "target_platform": [
                    "TargetPlatform"
                ]
            }
        },
        "SourceDistribution.__str__": {
            "name": "__str__",
            "location": 180,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceDistribution.__repr__": {
            "name": "__repr__",
            "location": 183,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/target_platform.py": {
        "PlatformGenerator.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nix": [
                    "Nix"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "PlatformGenerator.from_python_version": {
            "name": "from_python_version",
            "location": 27,
            "return": [
                "'TargetPlatform'"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "PythonVersion"
                ]
            }
        },
        "PlatformGenerator.current_platform": {
            "name": "current_platform",
            "location": 39,
            "return": [
                "Optional['TargetPlatform']"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlatformGenerator._python_command_for_default_environment": {
            "name": "_python_command_for_default_environment",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlatformGenerator._target_platform_from_default_environment_string": {
            "name": "_target_platform_from_default_environment_string",
            "location": 61,
            "return": [
                "'TargetPlatform'"
            ],
            "arguments": {
                "self": [],
                "json_string": [
                    "str"
                ],
                "python_version": [
                    "PythonVersion"
                ]
            }
        },
        "PlatformGenerator._load_default_environment": {
            "name": "_load_default_environment",
            "location": 82,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "json_string": [
                    "str"
                ]
            }
        },
        "PlatformGenerator._parse_target_platform_string": {
            "name": "_parse_target_platform_string",
            "location": 92,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "json_string": [
                    "str"
                ]
            }
        },
        "PlatformGenerator._python_environment_nix": {
            "name": "_python_environment_nix",
            "location": 104,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "self": [],
                "nixpkgs_attribute_name": [
                    "str"
                ]
            }
        },
        "TargetPlatform.environment_dictionary": {
            "name": "environment_dictionary",
            "location": 139,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/utils.py": {
        "pretty_option": {
            "name": "pretty_option",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "option": [
                    "Optional[str]"
                ]
            }
        },
        "cmd": {
            "name": "cmd",
            "location": 31,
            "return": [
                "Tuple[(int, str)]"
            ],
            "arguments": {
                "command": [
                    "Union[(str, List[str])]"
                ],
                "logger": [
                    "Logger"
                ],
                "stderr": [
                    "Optional[int]"
                ],
                "cwd": [
                    "Optional[str]"
                ]
            }
        },
        "create_command_options": {
            "name": "create_command_options",
            "location": 61,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "options": [
                    "Dict[(str, NixOption)]"
                ]
            }
        },
        "args_as_list": {
            "name": "args_as_list",
            "location": 80,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "inputs": [
                    "List[str]"
                ]
            }
        },
        "prefetch_git": {
            "name": "prefetch_git",
            "location": 84,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "rev": [
                    "Optional[str]"
                ]
            }
        },
        "prefetch_hg": {
            "name": "prefetch_hg",
            "location": 121,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "logger": [
                    "Logger"
                ],
                "rev": [
                    "Optional[str]"
                ]
            }
        },
        "prefetch_github": {
            "name": "prefetch_github",
            "location": 157,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "owner": [
                    "str"
                ],
                "repo": [
                    "str"
                ],
                "rev": [
                    "Optional[str]"
                ]
            }
        },
        "escape_double_quotes": {
            "name": "escape_double_quotes",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "prefetch_url": {
            "name": "prefetch_url",
            "location": 165,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "logger": [
                    "Logger"
                ],
                "name": [
                    "Optional[str]"
                ]
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/version.py": {},
    "pypi2nix-master/src/pypi2nix/wheel.py": {
        "str_from_message": {
            "name": "str_from_message",
            "location": 224,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "metadata": [
                    "Message"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "list_from_message": {
            "name": "list_from_message",
            "location": 232,
            "return": [
                "Optional[List[str]]"
            ],
            "arguments": {
                "metadata": [
                    "Message"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "Wheel.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "version": [
                    "str"
                ],
                "deps": [
                    "RequirementSet"
                ],
                "homepage": [
                    "str"
                ],
                "license": [
                    "str"
                ],
                "description": [
                    "str"
                ],
                "build_dependencies": [
                    "RequirementSet"
                ],
                "target_platform": [
                    "TargetPlatform"
                ]
            }
        },
        "Wheel.to_dict": {
            "name": "to_dict",
            "location": 45,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wheel.build_dependencies": {
            "name": "build_dependencies",
            "location": 58,
            "return": [
                "RequirementSet"
            ],
            "arguments": {
                "self": [],
                "target_platform": [
                    "TargetPlatform"
                ]
            }
        },
        "Wheel.runtime_dependencies": {
            "name": "runtime_dependencies",
            "location": 64,
            "return": [
                "RequirementSet"
            ],
            "arguments": {
                "self": [],
                "target_platform": [
                    "TargetPlatform"
                ]
            }
        },
        "Wheel.dependencies": {
            "name": "dependencies",
            "location": 70,
            "return": [
                "RequirementSet"
            ],
            "arguments": {
                "self": [],
                "extras": [
                    "List[str]"
                ]
            }
        },
        "Wheel.add_build_dependencies": {
            "name": "add_build_dependencies",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dependencies": [
                    "RequirementSet"
                ]
            }
        },
        "Wheel.from_wheel_directory_path": {
            "name": "from_wheel_directory_path",
            "location": 81,
            "return": [
                "'Wheel'"
            ],
            "arguments": {
                "wheel_class": [],
                "wheel_directory_path": [
                    "str"
                ],
                "target_platform": [
                    "TargetPlatform"
                ],
                "logger": [
                    "Logger"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "Wheel.target_platform": {
            "name": "target_platform",
            "location": 93,
            "return": [
                "TargetPlatform"
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_platform": [
                    "TargetPlatform"
                ],
                "wheel_directory_path": [
                    "str"
                ],
                "logger": [
                    "Logger"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "Builder.build": {
            "name": "build",
            "location": 118,
            "return": [
                "'Wheel'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder._verify_integrity": {
            "name": "_verify_integrity",
            "location": 127,
            "return": [
                "'Wheel'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder._parse_pkg_info": {
            "name": "_parse_pkg_info",
            "location": 159,
            "return": [
                "Message"
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder._get_name": {
            "name": "_get_name",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder._get_version": {
            "name": "_get_version",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder._get_license": {
            "name": "_get_license",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder._get_description": {
            "name": "_get_description",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder._get_runtime_dependencies": {
            "name": "_get_runtime_dependencies",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder._is_valid_dependency": {
            "name": "_is_valid_dependency",
            "location": 214,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "dependency_name": [
                    "str"
                ]
            }
        },
        "Builder._get_homepage": {
            "name": "_get_homepage",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/wheel_builder.py": {
        "WheelBuilder.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pip": [
                    "Pip"
                ],
                "download_directory": [
                    "Path"
                ],
                "wheel_directory": [
                    "Path"
                ],
                "extracted_wheel_directory": [
                    "Path"
                ],
                "lib_directory": [
                    "Path"
                ],
                "logger": [
                    "Logger"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ],
                "target_platform": [
                    "TargetPlatform"
                ],
                "base_dependency_graph": [
                    "DependencyGraph"
                ]
            }
        },
        "WheelBuilder.build": {
            "name": "build",
            "location": 45,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "requirements": [
                    "RequirementSet"
                ],
                "setup_requirements": [
                    "Optional[RequirementSet]"
                ]
            }
        },
        "WheelBuilder.detect_additional_build_dependencies": {
            "name": "detect_additional_build_dependencies",
            "location": 76,
            "return": [
                "RequirementSet"
            ],
            "arguments": {
                "self": [],
                "requirements": [
                    "RequirementSet"
                ],
                "constraints": [
                    "Optional[RequirementSet]"
                ]
            }
        },
        "WheelBuilder._get_build_dependencies_for_distribution": {
            "name": "_get_build_dependencies_for_distribution",
            "location": 98,
            "return": [
                "RequirementSet"
            ],
            "arguments": {
                "self": [],
                "distribution": [
                    "SourceDistribution"
                ]
            }
        },
        "WheelBuilder.get_uninspected_source_distributions": {
            "name": "get_uninspected_source_distributions",
            "location": 111,
            "return": [
                "List[SourceDistribution]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WheelBuilder.register_all_source_distributions": {
            "name": "register_all_source_distributions",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WheelBuilder.extract_wheels": {
            "name": "extract_wheels",
            "location": 132,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WheelBuilder.get_frozen_requirements": {
            "name": "get_frozen_requirements",
            "location": 153,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WheelBuilder.ensure_download_directory_exists": {
            "name": "ensure_download_directory_exists",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WheelBuilder.ensure_extracted_wheels_directory_exists": {
            "name": "ensure_extracted_wheels_directory_exists",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WheelBuilder._ensure_wheels_directory_exists": {
            "name": "_ensure_wheels_directory_exists",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WheelBuilder.dependency_graph": {
            "name": "dependency_graph",
            "location": 166,
            "return": [
                "DependencyGraph"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/__init__.py": {},
    "pypi2nix-master/src/pypi2nix/external_dependencies/external_dependency.py": {
        "ExternalDependency.attribute_name": {
            "name": "attribute_name",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/external_dependencies/__init__.py": {},
    "pypi2nix-master/src/pypi2nix/external_dependency_collector/collector.py": {
        "ExternalDependencyCollector.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requirement_dependency_retriever": [
                    "RequirementDependencyRetriever"
                ]
            }
        },
        "ExternalDependencyCollector.collect_explicit": {
            "name": "collect_explicit",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute_name": [
                    "str"
                ]
            }
        },
        "ExternalDependencyCollector.collect_from_requirements": {
            "name": "collect_from_requirements",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requirements": [
                    "RequirementSet"
                ]
            }
        },
        "ExternalDependencyCollector.get_collected": {
            "name": "get_collected",
            "location": 28,
            "return": [
                "Set[ExternalDependency]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/external_dependency_collector/lookup.py": {
        "RequirementDependencyRetriever.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "dependency_graph": [
                    "DependencyGraph"
                ]
            }
        },
        "RequirementDependencyRetriever.get_external_dependency_for_requirement": {
            "name": "get_external_dependency_for_requirement",
            "location": 12,
            "return": [
                "Set[ExternalDependency]"
            ],
            "arguments": {
                "self": [],
                "requirement": [
                    "Requirement"
                ]
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/external_dependency_collector/__init__.py": {},
    "pypi2nix-master/src/pypi2nix/package/exceptions.py": {},
    "pypi2nix-master/src/pypi2nix/package/interfaces.py": {
        "HasBuildDependencies.build_dependencies": {
            "name": "build_dependencies",
            "location": 10,
            "return": [
                "RequirementSet"
            ],
            "arguments": {
                "self": [],
                "target_platform": [
                    "TargetPlatform"
                ]
            }
        },
        "HasRuntimeDependencies.runtime_dependencies": {
            "name": "runtime_dependencies",
            "location": 16,
            "return": [
                "RequirementSet"
            ],
            "arguments": {
                "self": [],
                "target_platform": [
                    "TargetPlatform"
                ]
            }
        },
        "HasPackageName.package_name": {
            "name": "package_name",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/package/metadata.py": {
        "PackageMetadata.from_package_directory": {
            "name": "from_package_directory",
            "location": 16,
            "return": [
                "'PackageMetadata'"
            ],
            "arguments": {
                "package_metadata": [],
                "path": [
                    "str"
                ]
            }
        },
        "_PackageMetadataBuilder.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path_to_directory": [
                    "str"
                ]
            }
        },
        "_PackageMetadataBuilder.name": {
            "name": "name",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_PackageMetadataBuilder.build": {
            "name": "build",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/package/pyproject.py": {
        "PyprojectToml.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "file_content": [
                    "str"
                ],
                "logger": [
                    "Logger"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "PyprojectToml.build_dependencies": {
            "name": "build_dependencies",
            "location": 25,
            "return": [
                "RequirementSet"
            ],
            "arguments": {
                "self": [],
                "target_platform": [
                    "TargetPlatform"
                ]
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/package/setupcfg.py": {
        "SetupCfg.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "setup_cfg_path": [
                    "str"
                ],
                "logger": [
                    "Logger"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "SetupCfg.build_dependencies": {
            "name": "build_dependencies",
            "location": 26,
            "return": [
                "RequirementSet"
            ],
            "arguments": {
                "self": [],
                "target_platform": [
                    "TargetPlatform"
                ]
            }
        },
        "SetupCfg.name": {
            "name": "name",
            "location": 46,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/package/__init__.py": {},
    "pypi2nix-master/src/pypi2nix/pip/exceptions.py": {
        "PipFailed.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "str"
                ]
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/pip/implementation.py": {
        "NixPip.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "nix": [
                    "Nix"
                ],
                "project_directory": [
                    "Path"
                ],
                "extra_build_inputs": [
                    "List[ExternalDependency]"
                ],
                "extra_env": [
                    "str"
                ],
                "wheels_cache": [
                    "List[str]"
                ],
                "target_platform": [
                    "TargetPlatform"
                ],
                "logger": [
                    "Logger"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "NixPip.download_sources": {
            "name": "download_sources",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requirements": [
                    "RequirementSet"
                ],
                "target_directory": [
                    "Path"
                ]
            }
        },
        "NixPip.build_wheels": {
            "name": "build_wheels",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requirements": [
                    "RequirementSet"
                ],
                "target_directory": [
                    "Path"
                ],
                "source_directories": [
                    "List[Path]"
                ]
            }
        },
        "NixPip.install": {
            "name": "install",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requirements": [
                    "RequirementSet"
                ],
                "source_directories": [
                    "List[Path]"
                ],
                "target_directory": [
                    "Optional[Path]"
                ]
            }
        },
        "NixPip.freeze": {
            "name": "freeze",
            "location": 145,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "python_path": [
                    "List[Path]"
                ]
            }
        },
        "NixPip.editable_sources_directory": {
            "name": "editable_sources_directory",
            "location": 160,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "NixPip.build_directory": {
            "name": "build_directory",
            "location": 163,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "NixPip.nix_arguments": {
            "name": "nix_arguments",
            "location": 166,
            "return": [
                "Dict[(str, NixOption)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NixPip.build_from_nix_file": {
            "name": "build_from_nix_file",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ],
                "command": [
                    "str"
                ],
                "nix_arguments": [
                    "Any"
                ]
            }
        },
        "NixPip.create_download_cache_if_missing": {
            "name": "create_download_cache_if_missing",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NixPip.delete_build_directory": {
            "name": "delete_build_directory",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NixPip.handle_build_error": {
            "name": "handle_build_error",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_failure": [
                    "bool"
                ]
            }
        },
        "NixPip.send_crash_report": {
            "name": "send_crash_report",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/pip/interface.py": {
        "Pip.download_sources": {
            "name": "download_sources",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requirements": [
                    "RequirementSet"
                ],
                "target_directory": [
                    "Path"
                ]
            }
        },
        "Pip.build_wheels": {
            "name": "build_wheels",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requirements": [
                    "RequirementSet"
                ],
                "target_directory": [
                    "Path"
                ],
                "source_directories": [
                    "List[Path]"
                ]
            }
        },
        "Pip.install": {
            "name": "install",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requirements": [
                    "RequirementSet"
                ],
                "source_directories": [
                    "List[Path]"
                ],
                "target_directory": [
                    "Path"
                ]
            }
        },
        "Pip.freeze": {
            "name": "freeze",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "python_path": [
                    "List[Path]"
                ]
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/pip/virtualenv.py": {
        "VirtualenvPip.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "Logger"
                ],
                "target_platform": [
                    "TargetPlatform"
                ],
                "target_directory": [
                    "str"
                ],
                "env_builder": [
                    "EnvBuilder"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ],
                "no_index": [
                    "bool"
                ],
                "wheel_distribution_path": [
                    "Optional[str]"
                ],
                "find_links": [
                    "List[str]"
                ]
            }
        },
        "VirtualenvPip.prepare_virtualenv": {
            "name": "prepare_virtualenv",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualenvPip.download_sources": {
            "name": "download_sources",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requirements": [
                    "RequirementSet"
                ],
                "target_directory": [
                    "Path"
                ]
            }
        },
        "VirtualenvPip.build_wheels": {
            "name": "build_wheels",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requirements": [
                    "RequirementSet"
                ],
                "target_directory": [
                    "Path"
                ],
                "source_directories": [
                    "List[Path]"
                ]
            }
        },
        "VirtualenvPip.install": {
            "name": "install",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requirements": [
                    "RequirementSet"
                ],
                "source_directories": [
                    "List[Path]"
                ],
                "target_directory": [
                    "Path"
                ]
            }
        },
        "VirtualenvPip.freeze": {
            "name": "freeze",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "python_path": [
                    "List[Path]"
                ]
            }
        },
        "VirtualenvPip._pip_path": {
            "name": "_pip_path",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualenvPip._execute_pip_command": {
            "name": "_execute_pip_command",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arguments": [
                    "List[str]"
                ],
                "pythonpath": [
                    "List[Path]"
                ]
            }
        },
        "VirtualenvPip._explicit_pythonpath": {
            "name": "_explicit_pythonpath",
            "location": 123,
            "return": [
                "Iterator[None]"
            ],
            "arguments": {
                "self": [],
                "pythonpath": [
                    "List[Path]"
                ]
            }
        },
        "VirtualenvPip._requirements_file": {
            "name": "_requirements_file",
            "location": 129,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "self": [],
                "requirements": [
                    "RequirementSet"
                ]
            }
        },
        "VirtualenvPip._set_environment_variable": {
            "name": "_set_environment_variable",
            "location": 136,
            "return": [
                "Iterator[None]"
            ],
            "arguments": {
                "self": [],
                "variables": [
                    "Dict[(str, Optional[str])]"
                ]
            }
        },
        "VirtualenvPip._maybe_index": {
            "name": "_maybe_index",
            "location": 157,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualenvPip._wheel_requirement_name": {
            "name": "_wheel_requirement_name",
            "location": 166,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualenvPip._set_environment_variable.set_environment": {
            "name": "set_environment",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "environment": [
                    "Dict[(str, Optional[str])]"
                ]
            }
        }
    },
    "pypi2nix-master/src/pypi2nix/pip/__init__.py": {},
    "pypi2nix-master/src/pypi2nix/wheels/schema.py": {},
    "pypi2nix-master/src/pypi2nix/wheels/__init__.py": {
        "Index.__getitem__": {
            "name": "__getitem__",
            "location": 31,
            "return": [
                "'Index.Entry'"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Index.__setitem__": {
            "name": "__setitem__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "'Index.Entry'"
                ]
            }
        },
        "Index.is_valid": {
            "name": "is_valid",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Index._index_json": {
            "name": "_index_json",
            "location": 64,
            "return": [
                "Iterator[Dict[(str, Dict[(str, str)])]]"
            ],
            "arguments": {
                "self": [],
                "write": [
                    "bool"
                ]
            }
        },
        "Index._is_schema_valid": {
            "name": "_is_schema_valid",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "json_value": [
                    "Any"
                ],
                "schema": [
                    "Any"
                ]
            }
        }
    },
    "pypi2nix-master/unittests/logger.py": {
        "get_logger_output": {
            "name": "get_logger_output",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "logger": [
                    "Logger"
                ]
            }
        },
        "get_logger_output.get_inner_logger": {
            "name": "get_inner_logger",
            "location": 7,
            "return": [
                "StreamLogger"
            ],
            "arguments": {
                "logger": [
                    "Logger"
                ]
            }
        }
    },
    "pypi2nix-master/unittests/package_generator.py": {
        "PackageGenerator.generate_setuptools_package": {
            "name": "generate_setuptools_package",
            "location": 31,
            "return": [
                "SourceDistribution"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "version": [
                    "str"
                ],
                "install_requires": [
                    "List[str]"
                ]
            }
        },
        "PackageGenerator._generate_setup_py": {
            "name": "_generate_setup_py",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_directory": [
                    "Path"
                ],
                "name": [
                    "str"
                ],
                "version": [
                    "str"
                ]
            }
        },
        "PackageGenerator._generate_setup_cfg": {
            "name": "_generate_setup_cfg",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_directory": [
                    "Path"
                ],
                "name": [
                    "str"
                ],
                "version": [
                    "str"
                ],
                "install_requires": [
                    "List[str]"
                ]
            }
        },
        "PackageGenerator._build_package": {
            "name": "_build_package",
            "location": 77,
            "return": [
                "Archive"
            ],
            "arguments": {
                "self": [],
                "build_directory": [
                    "Path"
                ],
                "name": [
                    "str"
                ],
                "version": [
                    "str"
                ]
            }
        },
        "PackageGenerator._move_package_target_directory": {
            "name": "_move_package_target_directory",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "distribution_archive": [
                    "Archive"
                ]
            }
        }
    },
    "pypi2nix-master/unittests/switches.py": {},
    "pypi2nix-master/unittests/templates.py": {
        "render_template": {
            "name": "render_template",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "template_path": [
                    "Path"
                ],
                "context": []
            }
        }
    },
    "pypi2nix-master/unittests/test_archive.py": {
        "archive": {
            "name": "archive",
            "location": 10,
            "return": [
                "Archive"
            ],
            "arguments": {
                "request": [],
                "test_zip_path": [
                    "str"
                ],
                "test_tar_gz_path": [
                    "str"
                ],
                "test_tar_bz2_path": [
                    "str"
                ]
            }
        },
        "test_that_we_can_inspect_the_content_of_an_archive": {
            "name": "test_that_we_can_inspect_the_content_of_an_archive",
            "location": 21,
            "return": [],
            "arguments": {
                "archive": [
                    "Archive"
                ]
            }
        },
        "test_that_we_can_inspect_the_content_of_a_wheel": {
            "name": "test_that_we_can_inspect_the_content_of_a_wheel",
            "location": 27,
            "return": [],
            "arguments": {
                "setupcfg_package_wheel_path": [
                    "str"
                ]
            }
        }
    },
    "pypi2nix-master/unittests/test_dependency_graph.py": {
        "test_can_set_runtime_dependencies": {
            "name": "test_can_set_runtime_dependencies",
            "location": 17,
            "return": [],
            "arguments": {
                "package_a": [
                    "Requirement"
                ],
                "package_b": [
                    "Requirement"
                ],
                "dependency_graph": [
                    "DependencyGraph"
                ]
            }
        },
        "test_can_detect_indirect_runtime_dependencies": {
            "name": "test_can_detect_indirect_runtime_dependencies",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "package_a": [
                    "Requirement"
                ],
                "package_b": [
                    "Requirement"
                ],
                "package_c": [
                    "Requirement"
                ],
                "dependency_graph": [
                    "DependencyGraph"
                ]
            }
        },
        "test_cyclic_runtime_dependencies_not_allowed": {
            "name": "test_cyclic_runtime_dependencies_not_allowed",
            "location": 39,
            "return": [],
            "arguments": {
                "package_a": [
                    "Requirement"
                ],
                "package_b": [
                    "Requirement"
                ],
                "dependency_graph": [
                    "DependencyGraph"
                ]
            }
        },
        "test_can_retriev_all_runtime_dependency_names": {
            "name": "test_can_retriev_all_runtime_dependency_names",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "package_a": [
                    "Requirement"
                ],
                "package_b": [
                    "Requirement"
                ],
                "package_c": [
                    "Requirement"
                ],
                "dependency_graph": [
                    "DependencyGraph"
                ]
            }
        },
        "test_can_set_buildtime_dependency": {
            "name": "test_can_set_buildtime_dependency",
            "location": 64,
            "return": [],
            "arguments": {
                "package_a": [
                    "Requirement"
                ],
                "package_b": [
                    "Requirement"
                ],
                "dependency_graph": [
                    "DependencyGraph"
                ]
            }
        },
        "test_build_time_dependencies_dont_show_up_as_runtime_dependencies": {
            "name": "test_build_time_dependencies_dont_show_up_as_runtime_dependencies",
            "location": 73,
            "return": [],
            "arguments": {
                "package_a": [
                    "Requirement"
                ],
                "package_b": [
                    "Requirement"
                ],
                "package_c": [
                    "Requirement"
                ],
                "dependency_graph": [
                    "DependencyGraph"
                ]
            }
        },
        "test_cannot_add_circular_buildtime_dependencies": {
            "name": "test_cannot_add_circular_buildtime_dependencies",
            "location": 86,
            "return": [],
            "arguments": {
                "package_a": [
                    "Requirement"
                ],
                "package_b": [
                    "Requirement"
                ],
                "dependency_graph": [
                    "DependencyGraph"
                ]
            }
        },
        "test_cannot_add_circular_builtime_dependency_to_runtime_dependency": {
            "name": "test_cannot_add_circular_builtime_dependency_to_runtime_dependency",
            "location": 96,
            "return": [],
            "arguments": {
                "package_a": [
                    "Requirement"
                ],
                "package_b": [
                    "Requirement"
                ],
                "dependency_graph": [
                    "DependencyGraph"
                ]
            }
        },
        "test_cannot_add_circular_runtime_dependency_to_buildtime_dependency": {
            "name": "test_cannot_add_circular_runtime_dependency_to_buildtime_dependency",
            "location": 106,
            "return": [],
            "arguments": {
                "package_a": [
                    "Requirement"
                ],
                "package_b": [
                    "Requirement"
                ],
                "dependency_graph": [
                    "DependencyGraph"
                ]
            }
        },
        "test_can_add_two_dependencies_graphs_and_runtime_dependencies_are_also_added": {
            "name": "test_can_add_two_dependencies_graphs_and_runtime_dependencies_are_also_added",
            "location": 116,
            "return": [],
            "arguments": {
                "package_a": [
                    "Requirement"
                ],
                "package_b": [
                    "Requirement"
                ],
                "package_c": [
                    "Requirement"
                ],
                "dependency_graph": [
                    "DependencyGraph"
                ]
            }
        },
        "test_can_add_two_dependencies_graphs_and_buildtime_dependencies_are_also_added": {
            "name": "test_can_add_two_dependencies_graphs_and_buildtime_dependencies_are_also_added",
            "location": 137,
            "return": [],
            "arguments": {
                "package_a": [
                    "Requirement"
                ],
                "package_b": [
                    "Requirement"
                ],
                "package_c": [
                    "Requirement"
                ],
                "dependency_graph": [
                    "DependencyGraph"
                ]
            }
        },
        "test_can_detect_external_dependencies_for_packages": {
            "name": "test_can_detect_external_dependencies_for_packages",
            "location": 158,
            "return": [],
            "arguments": {
                "package_a": [
                    "Requirement"
                ],
                "external_dependency_a": [
                    "ExternalDependency"
                ],
                "dependency_graph": [
                    "DependencyGraph"
                ]
            }
        },
        "test_can_retrieve_external_dependencies_from_runtime_dependencies": {
            "name": "test_can_retrieve_external_dependencies_from_runtime_dependencies",
            "location": 171,
            "return": [],
            "arguments": {
                "package_a": [
                    "Requirement"
                ],
                "package_b": [
                    "Requirement"
                ],
                "external_dependency_a": [
                    "ExternalDependency"
                ],
                "dependency_graph": [
                    "DependencyGraph"
                ]
            }
        },
        "test_can_retrieve_external_dependencies_after_adding_graphs": {
            "name": "test_can_retrieve_external_dependencies_after_adding_graphs",
            "location": 186,
            "return": [],
            "arguments": {
                "package_a": [
                    "Requirement"
                ],
                "package_b": [
                    "Requirement"
                ],
                "external_dependency_a": [
                    "ExternalDependency"
                ],
                "external_dependency_b": [
                    "ExternalDependency"
                ],
                "dependency_graph": [
                    "DependencyGraph"
                ]
            }
        },
        "test_can_understand_wheel_dependecies": {
            "name": "test_can_understand_wheel_dependecies",
            "location": 208,
            "return": [],
            "arguments": {
                "current_platform": [
                    "TargetPlatform"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "package_a": {
            "name": "package_a",
            "location": 236,
            "return": [
                "Requirement"
            ],
            "arguments": {
                "logger": [
                    "Logger"
                ]
            }
        },
        "package_b": {
            "name": "package_b",
            "location": 247,
            "return": [
                "Requirement"
            ],
            "arguments": {
                "logger": [
                    "Logger"
                ]
            }
        },
        "package_c": {
            "name": "package_c",
            "location": 258,
            "return": [
                "Requirement"
            ],
            "arguments": {
                "logger": [
                    "Logger"
                ]
            }
        },
        "dependency_graph": {
            "name": "dependency_graph",
            "location": 269,
            "return": [
                "DependencyGraph"
            ],
            "arguments": {}
        },
        "external_dependency_a": {
            "name": "external_dependency_a",
            "location": 274,
            "return": [
                "ExternalDependency"
            ],
            "arguments": {}
        },
        "external_dependency_b": {
            "name": "external_dependency_b",
            "location": 279,
            "return": [
                "ExternalDependency"
            ],
            "arguments": {}
        }
    },
    "pypi2nix-master/unittests/test_dependency_graph_serialization.py": {
        "requirement": {
            "name": "requirement",
            "location": 20,
            "return": [],
            "arguments": {
                "draw": [],
                "name": []
            }
        },
        "external_dependency": {
            "name": "external_dependency",
            "location": 31,
            "return": [],
            "arguments": {
                "draw": [],
                "attribute_name": []
            }
        },
        "dependency_graph": {
            "name": "dependency_graph",
            "location": 36,
            "return": [],
            "arguments": {
                "draw": [],
                "python_packages": [],
                "external_dependencies": [],
                "is_runtime_dependency": [],
                "selections": []
            }
        },
        "test_equality_to_self": {
            "name": "test_equality_to_self",
            "location": 68,
            "return": [],
            "arguments": {
                "dependency_graph": []
            }
        },
        "test_equality_of_empty_graphs": {
            "name": "test_equality_of_empty_graphs",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "test_serialization_and_deserialization_leads_to_identity": {
            "name": "test_serialization_and_deserialization_leads_to_identity",
            "location": 77,
            "return": [],
            "arguments": {
                "dependency_graph": [
                    "DependencyGraph"
                ]
            }
        }
    },
    "pypi2nix-master/unittests/test_environment_marker.py": {
        "test_that_version_comparisons_do_not_throw": {
            "name": "test_that_version_comparisons_do_not_throw",
            "location": 7,
            "return": [],
            "arguments": {
                "operator": [],
                "current_platform": []
            }
        }
    },
    "pypi2nix-master/unittests/test_license.py": {
        "test_license_from_string_detects_apache_2_0": {
            "name": "test_license_from_string_detects_apache_2_0",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_license_from_string_detects_bsd_dash_licenses": {
            "name": "test_license_from_string_detects_bsd_dash_licenses",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_that_license_of_flit_is_detected": {
            "name": "test_that_license_of_flit_is_detected",
            "location": 16,
            "return": [],
            "arguments": {
                "flit_wheel": [
                    "Wheel"
                ],
                "logger": [
                    "Logger"
                ]
            }
        }
    },
    "pypi2nix-master/unittests/test_logger.py": {
        "logger": {
            "name": "logger",
            "location": 16,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "unconnected_proxy_logger": {
            "name": "unconnected_proxy_logger",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_can_log_warning": {
            "name": "test_can_log_warning",
            "location": 32,
            "return": [],
            "arguments": {
                "logger": [
                    "Logger"
                ]
            }
        },
        "test_every_line_of_warning_is_prefixed": {
            "name": "test_every_line_of_warning_is_prefixed",
            "location": 38,
            "return": [],
            "arguments": {
                "logger": []
            }
        },
        "test_that_logger_with_low_verbosity_level_does_not_emit_warning_logs": {
            "name": "test_that_logger_with_low_verbosity_level_does_not_emit_warning_logs",
            "location": 47,
            "return": [],
            "arguments": {
                "logger": [
                    "Logger"
                ],
                "level": []
            }
        },
        "test_that_logger_with_high_verbosity_level_does_emit_warning_logs": {
            "name": "test_that_logger_with_high_verbosity_level_does_emit_warning_logs",
            "location": 58,
            "return": [],
            "arguments": {
                "logger": [
                    "Logger"
                ],
                "level": [
                    "Verbosity"
                ]
            }
        },
        "test_can_log_error": {
            "name": "test_can_log_error",
            "location": 68,
            "return": [],
            "arguments": {
                "logger": [
                    "Logger"
                ]
            }
        },
        "test_every_line_of_error_is_prefixed": {
            "name": "test_every_line_of_error_is_prefixed",
            "location": 74,
            "return": [],
            "arguments": {
                "logger": [
                    "Logger"
                ]
            }
        },
        "test_that_logger_always_emits_errors": {
            "name": "test_that_logger_always_emits_errors",
            "location": 85,
            "return": [],
            "arguments": {
                "logger": [
                    "Logger"
                ],
                "level": [
                    "Verbosity"
                ]
            }
        },
        "test_can_log_info": {
            "name": "test_can_log_info",
            "location": 93,
            "return": [],
            "arguments": {
                "logger": [
                    "Logger"
                ]
            }
        },
        "test_every_info_line_is_prefixed": {
            "name": "test_every_info_line_is_prefixed",
            "location": 99,
            "return": [],
            "arguments": {
                "logger": [
                    "Logger"
                ]
            }
        },
        "test_that_logger_with_low_verbosity_level_does_not_emit_info_logs": {
            "name": "test_that_logger_with_low_verbosity_level_does_not_emit_info_logs",
            "location": 108,
            "return": [],
            "arguments": {
                "logger": [
                    "Logger"
                ],
                "level": []
            }
        },
        "test_that_logger_with_high_verbosity_level_does_emit_info_logs": {
            "name": "test_that_logger_with_high_verbosity_level_does_emit_info_logs",
            "location": 119,
            "return": [],
            "arguments": {
                "logger": [
                    "Logger"
                ],
                "level": [
                    "Verbosity"
                ]
            }
        },
        "test_can_log_debug": {
            "name": "test_can_log_debug",
            "location": 129,
            "return": [],
            "arguments": {
                "logger": [
                    "Logger"
                ]
            }
        },
        "test_every_debug_line_is_prefixed": {
            "name": "test_every_debug_line_is_prefixed",
            "location": 135,
            "return": [],
            "arguments": {
                "logger": [
                    "Logger"
                ]
            }
        },
        "test_that_logger_with_low_verbosity_level_does_not_emit_debug_logs": {
            "name": "test_that_logger_with_low_verbosity_level_does_not_emit_debug_logs",
            "location": 144,
            "return": [],
            "arguments": {
                "logger": [
                    "Logger"
                ],
                "level": []
            }
        },
        "test_that_logger_with_high_verbosity_level_does_emit_debug_logs": {
            "name": "test_that_logger_with_high_verbosity_level_does_emit_debug_logs",
            "location": 155,
            "return": [],
            "arguments": {
                "logger": [
                    "Logger"
                ],
                "level": [
                    "Verbosity"
                ]
            }
        },
        "test_that_verbosity_level_can_be_retrieved_from_assigned_integer": {
            "name": "test_that_verbosity_level_can_be_retrieved_from_assigned_integer",
            "location": 166,
            "return": [],
            "arguments": {
                "level": []
            }
        },
        "test_that_high_number_gets_translated_into_debug_verbosity": {
            "name": "test_that_high_number_gets_translated_into_debug_verbosity",
            "location": 170,
            "return": [],
            "arguments": {}
        },
        "test_that_low_number_gets_translated_into_error_verbosity": {
            "name": "test_that_low_number_gets_translated_into_error_verbosity",
            "location": 174,
            "return": [],
            "arguments": {}
        },
        "test_that_unconnect_proxy_logger_raises_proper_exception_on_logging": {
            "name": "test_that_unconnect_proxy_logger_raises_proper_exception_on_logging",
            "location": 178,
            "return": [],
            "arguments": {
                "unconnected_proxy_logger": []
            }
        }
    },
    "pypi2nix-master/unittests/test_memoize.py": {
        "test_memoized_method_returns_correct_result": {
            "name": "test_memoized_method_returns_correct_result",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test_memoized_method_gets_called_only_once": {
            "name": "test_memoized_method_gets_called_only_once",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_memoized_method_returns_correct_result.A.x": {
            "name": "x",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_memoized_method_gets_called_only_once.A.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_memoized_method_gets_called_only_once.A.x": {
            "name": "x",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pypi2nix-master/unittests/test_network_file.py": {
        "test_calculate_sha256_for_text_file": {
            "name": "test_calculate_sha256_for_text_file",
            "location": 17,
            "return": [],
            "arguments": {
                "logger": [
                    "Logger"
                ]
            }
        },
        "test_can_evaluate_expression_of_fetched_file": {
            "name": "test_can_evaluate_expression_of_fetched_file",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "logger": [
                    "Logger"
                ],
                "nix": [
                    "Nix"
                ]
            }
        },
        "test_can_calculate_hash_for_git_files": {
            "name": "test_can_calculate_hash_for_git_files",
            "location": 40,
            "return": [],
            "arguments": {
                "logger": [
                    "Logger"
                ]
            }
        },
        "test_can_evaluate_nix_expression": {
            "name": "test_can_evaluate_nix_expression",
            "location": 56,
            "return": [],
            "arguments": {
                "network_file": [
                    "NetworkFile"
                ],
                "nix": [
                    "Nix"
                ]
            }
        },
        "test_fetch_content_equals_file_content_from_nix_expression": {
            "name": "test_fetch_content_equals_file_content_from_nix_expression",
            "location": 62,
            "return": [],
            "arguments": {
                "network_file": [
                    "NetworkFile"
                ],
                "nix": [
                    "Nix"
                ]
            }
        },
        "network_file": {
            "name": "network_file",
            "location": 81,
            "return": [],
            "arguments": {
                "logger": [
                    "Logger"
                ],
                "request": [],
                "data_directory": []
            }
        }
    },
    "pypi2nix-master/unittests/test_nix.py": {
        "nix_instance": {
            "name": "nix_instance",
            "location": 15,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "logger": []
            }
        },
        "dummy_derivation": {
            "name": "dummy_derivation",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "test_evaluate_nix_expression_works": {
            "name": "test_evaluate_nix_expression_works",
            "location": 28,
            "return": [],
            "arguments": {
                "nix_instance": []
            }
        },
        "test_evalulate_nix_expression_respects_additions_to_nix_path": {
            "name": "test_evalulate_nix_expression_respects_additions_to_nix_path",
            "location": 33,
            "return": [],
            "arguments": {
                "nix_instance": []
            }
        },
        "test_evaluate_nix_expression_raises_exception_when_executable_not_found": {
            "name": "test_evaluate_nix_expression_raises_exception_when_executable_not_found",
            "location": 38,
            "return": [],
            "arguments": {
                "logger": []
            }
        },
        "test_shell_accepts_file_path_to_run_shell_script": {
            "name": "test_shell_accepts_file_path_to_run_shell_script",
            "location": 45,
            "return": [],
            "arguments": {
                "nix_instance": [],
                "dummy_derivation": []
            }
        },
        "test_shell_accepts_nix_arguments": {
            "name": "test_shell_accepts_nix_arguments",
            "location": 51,
            "return": [],
            "arguments": {
                "nix_instance": [],
                "dummy_derivation": []
            }
        },
        "test_evaluate_expression_throws_on_erroneous_expression": {
            "name": "test_evaluate_expression_throws_on_erroneous_expression",
            "location": 61,
            "return": [],
            "arguments": {
                "nix_instance": []
            }
        },
        "test_build_expression_throws_on_syntax_error": {
            "name": "test_build_expression_throws_on_syntax_error",
            "location": 67,
            "return": [],
            "arguments": {
                "nix_instance": []
            }
        },
        "test_build_expression_creates_proper_out_link": {
            "name": "test_build_expression_creates_proper_out_link",
            "location": 73,
            "return": [],
            "arguments": {
                "nix_instance": [],
                "tmpdir": []
            }
        },
        "test_build_respects_boolean_arguments": {
            "name": "test_build_respects_boolean_arguments",
            "location": 82,
            "return": [],
            "arguments": {
                "nix_instance": [],
                "tmpdir": []
            }
        },
        "test_build_expression_respects_boolean_arguments": {
            "name": "test_build_expression_respects_boolean_arguments",
            "location": 98,
            "return": [],
            "arguments": {
                "nix_instance": []
            }
        }
    },
    "pypi2nix-master/unittests/test_package_generator.py": {
        "test_can_generate_two_packages": {
            "name": "test_can_generate_two_packages",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "package_generator": [
                    "PackageGenerator"
                ]
            }
        },
        "test_can_gerate_source_distribution_with_correct_name": {
            "name": "test_can_gerate_source_distribution_with_correct_name",
            "location": 21,
            "return": [],
            "arguments": {
                "package_generator": [
                    "PackageGenerator"
                ]
            }
        },
        "test_can_install_generated_packages": {
            "name": "test_can_install_generated_packages",
            "location": 28,
            "return": [],
            "arguments": {
                "pip": [
                    "Pip"
                ],
                "current_platform": [
                    "TargetPlatform"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ],
                "target_directory": [
                    "Path"
                ],
                "install_target": [
                    "Path"
                ],
                "package_generator": [
                    "PackageGenerator"
                ]
            }
        },
        "test_can_generate_packages_with_requirements": {
            "name": "test_can_generate_packages_with_requirements",
            "location": 47,
            "return": [],
            "arguments": {
                "package_generator": [
                    "PackageGenerator"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ],
                "pip": [
                    "Pip"
                ],
                "target_directory": [
                    "Path"
                ],
                "install_target": [
                    "Path"
                ],
                "current_platform": [
                    "TargetPlatform"
                ]
            }
        },
        "test_can_generate_valid_packages_with_two_runtime_dependencies": {
            "name": "test_can_generate_valid_packages_with_two_runtime_dependencies",
            "location": 69,
            "return": [],
            "arguments": {
                "package_generator": [
                    "PackageGenerator"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ],
                "pip": [
                    "Pip"
                ],
                "target_directory": [
                    "Path"
                ],
                "install_target": [
                    "Path"
                ],
                "current_platform": [
                    "TargetPlatform"
                ]
            }
        },
        "pip": {
            "name": "pip",
            "location": 95,
            "return": [
                "VirtualenvPip"
            ],
            "arguments": {
                "logger": [
                    "Logger"
                ],
                "current_platform": [
                    "TargetPlatform"
                ],
                "target_directory": [
                    "Path"
                ],
                "wheel_distribution_archive_path": [
                    "str"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ],
                "install_target": [
                    "Path"
                ]
            }
        },
        "target_directory": {
            "name": "target_directory",
            "location": 118,
            "return": [
                "Path"
            ],
            "arguments": {
                "tmpdir_factory": []
            }
        },
        "install_target": {
            "name": "install_target",
            "location": 123,
            "return": [
                "Path"
            ],
            "arguments": {
                "tmpdir_factory": []
            }
        },
        "package_generator": {
            "name": "package_generator",
            "location": 128,
            "return": [
                "PackageGenerator"
            ],
            "arguments": {
                "logger": [
                    "Logger"
                ],
                "target_directory": [
                    "Path"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        }
    },
    "pypi2nix-master/unittests/test_package_source.py": {
        "git_source": {
            "name": "git_source",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "hg_source": {
            "name": "hg_source",
            "location": 24,
            "return": [],
            "arguments": {
                "logger": []
            }
        },
        "url_source": {
            "name": "url_source",
            "location": 31,
            "return": [],
            "arguments": {
                "logger": []
            }
        },
        "path_source": {
            "name": "path_source",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "expression_evaluater": {
            "name": "expression_evaluater",
            "location": 41,
            "return": [],
            "arguments": {
                "logger": []
            }
        },
        "test_git_source_gives_correct_hash_value": {
            "name": "test_git_source_gives_correct_hash_value",
            "location": 49,
            "return": [],
            "arguments": {
                "git_source": []
            }
        },
        "test_git_source_produces_valid_nix_expression": {
            "name": "test_git_source_produces_valid_nix_expression",
            "location": 57,
            "return": [],
            "arguments": {
                "git_source": [],
                "expression_evaluater": []
            }
        },
        "test_hg_source_gives_correct_hash_value": {
            "name": "test_hg_source_gives_correct_hash_value",
            "location": 62,
            "return": [],
            "arguments": {
                "hg_source": []
            }
        },
        "test_hg_source_produces_valid_nix_expression": {
            "name": "test_hg_source_produces_valid_nix_expression",
            "location": 69,
            "return": [],
            "arguments": {
                "hg_source": [],
                "expression_evaluater": []
            }
        },
        "test_url_source_gives_correct_hash_value": {
            "name": "test_url_source_gives_correct_hash_value",
            "location": 74,
            "return": [],
            "arguments": {
                "url_source": []
            }
        },
        "test_url_source_gives_valid_nix_expression": {
            "name": "test_url_source_gives_valid_nix_expression",
            "location": 79,
            "return": [],
            "arguments": {
                "url_source": [],
                "expression_evaluater": []
            }
        },
        "test_url_source_nix_expression_contains_specified_hash_when_given": {
            "name": "test_url_source_nix_expression_contains_specified_hash_when_given",
            "location": 83,
            "return": [],
            "arguments": {
                "logger": []
            }
        },
        "test_path_source_gives_valid_nix_expression": {
            "name": "test_path_source_gives_valid_nix_expression",
            "location": 94,
            "return": [],
            "arguments": {
                "path_source": [],
                "expression_evaluater": []
            }
        },
        "test_path_source_paths_with_one_segement_get_dot_appended_for_nix": {
            "name": "test_path_source_paths_with_one_segement_get_dot_appended_for_nix",
            "location": 98,
            "return": [],
            "arguments": {}
        }
    },
    "pypi2nix-master/unittests/test_prefetch_url.py": {
        "test_prefetch_url_returns_correct_hash": {
            "name": "test_prefetch_url_returns_correct_hash",
            "location": 9,
            "return": [],
            "arguments": {
                "logger": []
            }
        },
        "test_prefetch_url_raises_on_invalid_name": {
            "name": "test_prefetch_url_raises_on_invalid_name",
            "location": 16,
            "return": [],
            "arguments": {
                "logger": []
            }
        },
        "test_can_provide_name_so_prefetch_does_not_fail": {
            "name": "test_can_provide_name_so_prefetch_does_not_fail",
            "location": 26,
            "return": [],
            "arguments": {
                "logger": []
            }
        }
    },
    "pypi2nix-master/unittests/test_project_directory.py": {
        "project_directory": {
            "name": "project_directory",
            "location": 11,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_can_write_to_project_directory": {
            "name": "test_can_write_to_project_directory",
            "location": 19,
            "return": [],
            "arguments": {
                "project_directory": []
            }
        },
        "test_tempfile_project_directory_is_deleted_after_exception": {
            "name": "test_tempfile_project_directory_is_deleted_after_exception",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_persistent_project_directory_is_not_deleted_on_exception": {
            "name": "test_persistent_project_directory_is_not_deleted_on_exception",
            "location": 33,
            "return": [],
            "arguments": {}
        }
    },
    "pypi2nix-master/unittests/test_pypi.py": {
        "pypi": {
            "name": "pypi",
            "location": 10,
            "return": [],
            "arguments": {
                "logger": [
                    "Logger"
                ]
            }
        },
        "test_pypi_get_package_returns_package_with_correct_name": {
            "name": "test_pypi_get_package_returns_package_with_correct_name",
            "location": 15,
            "return": [],
            "arguments": {
                "pypi": []
            }
        },
        "test_pypi_get_package_returns_package_with_releases": {
            "name": "test_pypi_get_package_returns_package_with_releases",
            "location": 20,
            "return": [],
            "arguments": {
                "pypi": []
            }
        },
        "test_pypi_gets_correct_source_release_for_package_version_with_only_source_release": {
            "name": "test_pypi_gets_correct_source_release_for_package_version_with_only_source_release",
            "location": 25,
            "return": [],
            "arguments": {
                "pypi": []
            }
        },
        "test_pypi_gets_correct_source_release_for_package_with_multiple_release_types": {
            "name": "test_pypi_gets_correct_source_release_for_package_with_multiple_release_types",
            "location": 36,
            "return": [],
            "arguments": {
                "pypi": []
            }
        },
        "test_pypi_gets_correct_source_release_for_radiotherm_1_2": {
            "name": "test_pypi_gets_correct_source_release_for_radiotherm_1_2",
            "location": 45,
            "return": [],
            "arguments": {
                "pypi": []
            }
        },
        "test_pypi_gets_correct_source_release_for_setuptools_1_6_0": {
            "name": "test_pypi_gets_correct_source_release_for_setuptools_1_6_0",
            "location": 54,
            "return": [],
            "arguments": {
                "pypi": []
            }
        }
    },
    "pypi2nix-master/unittests/test_python_version.py": {
        "test_available_python_versions_exist_in_nixpkgs": {
            "name": "test_available_python_versions_exist_in_nixpkgs",
            "location": 12,
            "return": [],
            "arguments": {
                "python_version": [
                    "PythonVersion"
                ],
                "platform_generator": [
                    "PlatformGenerator"
                ]
            }
        },
        "test_can_get_python_version_from_version_string": {
            "name": "test_can_get_python_version_from_version_string",
            "location": 28,
            "return": [],
            "arguments": {
                "version_string": [],
                "expected_python_version": []
            }
        }
    },
    "pypi2nix-master/unittests/test_requirement.py": {
        "test_requirement_cannot_be_constructed_from_line_containing_newline": {
            "name": "test_requirement_cannot_be_constructed_from_line_containing_newline",
            "location": 18,
            "return": [],
            "arguments": {
                "requirement_parser": []
            }
        },
        "test_requirement_finds_name_of_pypi_packages": {
            "name": "test_requirement_finds_name_of_pypi_packages",
            "location": 25,
            "return": [],
            "arguments": {
                "requirement_parser": []
            }
        },
        "test_requirement_detects_source_of_pypi_package_as_none": {
            "name": "test_requirement_detects_source_of_pypi_package_as_none",
            "location": 30,
            "return": [],
            "arguments": {
                "requirement_parser": []
            }
        },
        "test_requirement_finds_name_of_git_package": {
            "name": "test_requirement_finds_name_of_git_package",
            "location": 35,
            "return": [],
            "arguments": {
                "requirement_parser": []
            }
        },
        "test_requirement_finds_name_of_hg_package": {
            "name": "test_requirement_finds_name_of_hg_package",
            "location": 42,
            "return": [],
            "arguments": {
                "requirement_parser": []
            }
        },
        "test_requirement_finds_name_of_url_package": {
            "name": "test_requirement_finds_name_of_url_package",
            "location": 47,
            "return": [],
            "arguments": {
                "requirement_parser": []
            }
        },
        "test_requirement_can_handle_environment_marker": {
            "name": "test_requirement_can_handle_environment_marker",
            "location": 52,
            "return": [],
            "arguments": {
                "requirement_parser": []
            }
        },
        "test_applies_to_target_works_properly_with_positiv_marker": {
            "name": "test_applies_to_target_works_properly_with_positiv_marker",
            "location": 57,
            "return": [],
            "arguments": {
                "current_platform": [],
                "requirement_parser": []
            }
        },
        "test_applies_to_target_works_properly_with_negative_marker": {
            "name": "test_applies_to_target_works_properly_with_negative_marker",
            "location": 64,
            "return": [],
            "arguments": {
                "current_platform": [],
                "requirement_parser": []
            }
        },
        "test_names_of_requirements_are_canonicalized": {
            "name": "test_names_of_requirements_are_canonicalized",
            "location": 80,
            "return": [],
            "arguments": {
                "line": [],
                "expected": [],
                "requirement_parser": []
            }
        },
        "test_to_line_reproduces_canonicalized_name": {
            "name": "test_to_line_reproduces_canonicalized_name",
            "location": 85,
            "return": [],
            "arguments": {
                "requirement_parser": []
            }
        },
        "test_to_line_reproduces_version_specifier": {
            "name": "test_to_line_reproduces_version_specifier",
            "location": 91,
            "return": [],
            "arguments": {
                "requirement_parser": []
            }
        },
        "test_from_line_recognizes_git_sources": {
            "name": "test_from_line_recognizes_git_sources",
            "location": 98,
            "return": [],
            "arguments": {
                "requirement_parser": []
            }
        },
        "test_from_line_accepts_requirement_with_marker_including_in_operator": {
            "name": "test_from_line_accepts_requirement_with_marker_including_in_operator",
            "location": 105,
            "return": [],
            "arguments": {
                "requirement_parser": []
            }
        },
        "test_that_applies_to_target_works_with_in_keyword": {
            "name": "test_that_applies_to_target_works_with_in_keyword",
            "location": 112,
            "return": [],
            "arguments": {
                "current_platform": [],
                "requirement_parser": []
            }
        },
        "test_that_mercurial_source_url_gets_detected": {
            "name": "test_that_mercurial_source_url_gets_detected",
            "location": 121,
            "return": [],
            "arguments": {
                "requirement_parser": []
            }
        },
        "test_that_mercurial_source_extracted_is_valid": {
            "name": "test_that_mercurial_source_extracted_is_valid",
            "location": 130,
            "return": [],
            "arguments": {
                "requirement_parser": []
            }
        },
        "test_that_git_source_extracted_is_valid": {
            "name": "test_that_git_source_extracted_is_valid",
            "location": 140,
            "return": [],
            "arguments": {
                "requirement_parser": []
            }
        },
        "test_that_from_line_to_line_preserves_urls": {
            "name": "test_that_from_line_to_line_preserves_urls",
            "location": 149,
            "return": [],
            "arguments": {
                "requirement_parser": []
            }
        },
        "test_that_to_line_reproduces_path_correctly": {
            "name": "test_that_to_line_reproduces_path_correctly",
            "location": 155,
            "return": [],
            "arguments": {
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "test_that_requirements_can_be_added_together_adding_version_constraints": {
            "name": "test_that_requirements_can_be_added_together_adding_version_constraints",
            "location": 163,
            "return": [],
            "arguments": {
                "current_platform": [],
                "requirement_parser": []
            }
        },
        "test_that_adding_requirements_with_different_names_throws": {
            "name": "test_that_adding_requirements_with_different_names_throws",
            "location": 175,
            "return": [],
            "arguments": {
                "current_platform": [],
                "requirement_parser": []
            }
        },
        "test_that_adding_requirements_with_a_version_and_a_url_results_in_url_requirement": {
            "name": "test_that_adding_requirements_with_a_version_and_a_url_results_in_url_requirement",
            "location": 184,
            "return": [],
            "arguments": {
                "current_platform": [],
                "requirement_parser": []
            }
        },
        "test_that_adding_requirements_with_different_urls_raises": {
            "name": "test_that_adding_requirements_with_different_urls_raises",
            "location": 199,
            "return": [],
            "arguments": {
                "current_platform": [],
                "requirement_parser": []
            }
        },
        "test_that_adding_requirements_with_the_same_url_works": {
            "name": "test_that_adding_requirements_with_the_same_url_works",
            "location": 208,
            "return": [],
            "arguments": {
                "current_platform": [],
                "requirement_parser": []
            }
        },
        "test_that_adding_requirements_where_one_does_not_apply_to_system_yields_the_other": {
            "name": "test_that_adding_requirements_where_one_does_not_apply_to_system_yields_the_other",
            "location": 219,
            "return": [],
            "arguments": {
                "current_platform": [],
                "requirement_parser": []
            }
        },
        "test_that_we_parse_requirements_with_file_paths": {
            "name": "test_that_we_parse_requirements_with_file_paths",
            "location": 231,
            "return": [],
            "arguments": {
                "requirement_parser": []
            }
        },
        "test_that_we_can_add_two": {
            "name": "test_that_we_can_add_two",
            "location": 243,
            "return": [],
            "arguments": {
                "req_line_1": [],
                "req_line_2": [],
                "current_platform": [],
                "requirement_parser": []
            }
        },
        "test_that_we_can_add_version_with_path_requirement_result_is_path_requirement": {
            "name": "test_that_we_can_add_version_with_path_requirement_result_is_path_requirement",
            "location": 264,
            "return": [],
            "arguments": {
                "version_requirement_line": [],
                "path_requirement_line": [],
                "current_platform": [],
                "requirement_parser": []
            }
        },
        "test_can_add_version_requirement_with_url_requirement": {
            "name": "test_can_add_version_requirement_with_url_requirement",
            "location": 292,
            "return": [],
            "arguments": {
                "version_requirement_line": [],
                "url_requirement_line": [],
                "current_platform": [],
                "requirement_parser": []
            }
        },
        "test_cannot_add_path_and_url_requirement": {
            "name": "test_cannot_add_path_and_url_requirement",
            "location": 312,
            "return": [],
            "arguments": {
                "path_requirement_line": [],
                "url_requirement_line": [],
                "current_platform": [],
                "requirement_parser": []
            }
        },
        "test_cannot_add_requirements_with_different_paths": {
            "name": "test_cannot_add_requirements_with_different_paths",
            "location": 324,
            "return": [],
            "arguments": {
                "current_platform": [],
                "requirement_parser": []
            }
        },
        "test_that_we_cannot_add_path_requirements_with_different_names": {
            "name": "test_that_we_cannot_add_path_requirements_with_different_names",
            "location": 334,
            "return": [],
            "arguments": {
                "current_platform": [],
                "requirement_parser": []
            }
        },
        "test_adding_path_requirements_where_one_requirement_does_not_apply": {
            "name": "test_adding_path_requirements_where_one_requirement_does_not_apply",
            "location": 344,
            "return": [],
            "arguments": {
                "current_platform": [],
                "requirement_parser": []
            }
        },
        "test_that_we_can_add_path_requirements_with_same_path": {
            "name": "test_that_we_can_add_path_requirements_with_same_path",
            "location": 356,
            "return": [],
            "arguments": {
                "current_platform": [],
                "requirement_parser": []
            }
        },
        "test_that_we_can_change_path_of_path_requirements": {
            "name": "test_that_we_can_change_path_of_path_requirements",
            "location": 365,
            "return": [],
            "arguments": {
                "requirement_parser": []
            }
        },
        "test_that_we_can_add_url_requirements_where_one_does_not_apply": {
            "name": "test_that_we_can_add_url_requirements_where_one_does_not_apply",
            "location": 372,
            "return": [],
            "arguments": {
                "current_platform": [],
                "requirement_parser": []
            }
        },
        "test_cannot_add_url_requirements_with_different_names": {
            "name": "test_cannot_add_url_requirements_with_different_names",
            "location": 383,
            "return": [],
            "arguments": {
                "current_platform": [],
                "requirement_parser": []
            }
        },
        "test_can_handle_requirements_with_python_full_version_marker": {
            "name": "test_can_handle_requirements_with_python_full_version_marker",
            "location": 392,
            "return": [],
            "arguments": {
                "current_platform": [],
                "requirement_parser": []
            }
        },
        "test_rejects_requirements_with_wrong_python_full_version_for_platform": {
            "name": "test_rejects_requirements_with_wrong_python_full_version_for_platform",
            "location": 401,
            "return": [],
            "arguments": {
                "current_platform": [],
                "requirement_parser": []
            }
        },
        "test_that_requirements_with_proper_os_name_applies_to_target": {
            "name": "test_that_requirements_with_proper_os_name_applies_to_target",
            "location": 410,
            "return": [],
            "arguments": {
                "current_platform": [],
                "requirement_parser": []
            }
        },
        "test_that_extras_of_path_requirements_are_preserved": {
            "name": "test_that_extras_of_path_requirements_are_preserved",
            "location": 419,
            "return": [],
            "arguments": {
                "requirement_parser": []
            }
        },
        "test_that_extras_of_url_requirements_are_preserved": {
            "name": "test_that_extras_of_url_requirements_are_preserved",
            "location": 427,
            "return": [],
            "arguments": {
                "requirement_parser": []
            }
        },
        "test_that_source_of_url_requirement_with_file_scheme_is_path_source": {
            "name": "test_that_source_of_url_requirement_with_file_scheme_is_path_source",
            "location": 437,
            "return": [],
            "arguments": {
                "requirement_parser": []
            }
        }
    },
    "pypi2nix-master/unittests/test_requirements_file.py": {
        "requirements_file_from_lines": {
            "name": "requirements_file_from_lines",
            "location": 9,
            "return": [],
            "arguments": {
                "project_dir": [],
                "tmpdir_factory": [],
                "requirement_parser": [],
                "logger": [
                    "Logger"
                ]
            }
        },
        "test_requirements_file_handles_comments": {
            "name": "test_requirements_file_handles_comments",
            "location": 22,
            "return": [],
            "arguments": {
                "requirements_file_from_lines": []
            }
        },
        "test_requirements_file_handles_empty_lines": {
            "name": "test_requirements_file_handles_empty_lines",
            "location": 27,
            "return": [],
            "arguments": {
                "requirements_file_from_lines": []
            }
        },
        "test_requirements_file_can_be_created_from_requirements_lines": {
            "name": "test_requirements_file_can_be_created_from_requirements_lines",
            "location": 32,
            "return": [],
            "arguments": {
                "project_dir": [
                    "str"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "test_regular_requirements_stay_in_processed_file": {
            "name": "test_regular_requirements_stay_in_processed_file",
            "location": 43,
            "return": [],
            "arguments": {
                "project_dir": [
                    "str"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "requirements_file_from_lines.factory": {
            "name": "factory",
            "location": 12,
            "return": [],
            "arguments": {
                "lines": []
            }
        }
    },
    "pypi2nix-master/unittests/test_requirement_collector.py": {
        "current_working_directory": {
            "name": "current_working_directory",
            "location": 20,
            "return": [
                "Generator[(None, None, None)]"
            ],
            "arguments": {
                "dir": [
                    "str"
                ]
            }
        },
        "collector": {
            "name": "collector",
            "location": 30,
            "return": [
                "RequirementsCollector"
            ],
            "arguments": {
                "current_platform": [
                    "TargetPlatform"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ],
                "logger": [
                    "Logger"
                ],
                "project_dir": [
                    "str"
                ]
            }
        },
        "test_that_we_can_generate_an_empty_requirement_set_from_freshly_constructed_collector": {
            "name": "test_that_we_can_generate_an_empty_requirement_set_from_freshly_constructed_collector",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "current_platform": [
                    "TargetPlatform"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ],
                "logger": [
                    "Logger"
                ],
                "project_dir": [
                    "str"
                ]
            }
        },
        "test_that_we_can_add_command_line_requirements_by_name": {
            "name": "test_that_we_can_add_command_line_requirements_by_name",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "collector": [
                    "RequirementsCollector"
                ]
            }
        },
        "test_that_we_can_add_a_requirements_file_path": {
            "name": "test_that_we_can_add_a_requirements_file_path",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "collector": [
                    "RequirementsCollector"
                ],
                "tmpdir": [
                    "pathlib.Path"
                ]
            }
        },
        "test_that_requirements_with_relative_paths_are_absolute_paths_after_adding": {
            "name": "test_that_requirements_with_relative_paths_are_absolute_paths_after_adding",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "collector": [
                    "RequirementsCollector"
                ]
            }
        },
        "test_that_sources_can_be_extracted_from_a_collector": {
            "name": "test_that_sources_can_be_extracted_from_a_collector",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "collector": [
                    "RequirementsCollector"
                ]
            }
        },
        "test_that_relative_paths_are_preserved_in_sources": {
            "name": "test_that_relative_paths_are_preserved_in_sources",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "collector": [
                    "RequirementsCollector"
                ]
            }
        },
        "test_that_path_paths_from_requirement_files_are_preserved_in_sources": {
            "name": "test_that_path_paths_from_requirement_files_are_preserved_in_sources",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "collector": [
                    "RequirementsCollector"
                ],
                "tmpdir": [
                    "Any"
                ]
            }
        },
        "test_that_path_sources_from_requirement_files_are_preserved_in_sources_relative_to_file": {
            "name": "test_that_path_sources_from_requirement_files_are_preserved_in_sources_relative_to_file",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "collector": [
                    "RequirementsCollector"
                ],
                "tmpdir": [
                    "Any"
                ]
            }
        }
    },
    "pypi2nix-master/unittests/test_requirement_dependency_retriever.py": {
        "test_no_external_dependency_for_empty_dependency_graph": {
            "name": "test_no_external_dependency_for_empty_dependency_graph",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "test_external_dependencies_from_graph_are_retrieved": {
            "name": "test_external_dependencies_from_graph_are_retrieved",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        }
    },
    "pypi2nix-master/unittests/test_requirement_parser.py": {
        "test_parses_pip_style_url": {
            "name": "test_parses_pip_style_url",
            "location": 11,
            "return": [],
            "arguments": {
                "requirement_parser": []
            }
        },
        "test_parse_pip_style_requirement": {
            "name": "test_parse_pip_style_requirement",
            "location": 17,
            "return": [],
            "arguments": {
                "requirement_parser": []
            }
        },
        "test_that_python_implemntation_marker_can_be_parsed": {
            "name": "test_that_python_implemntation_marker_can_be_parsed",
            "location": 23,
            "return": [],
            "arguments": {
                "requirement_parser": []
            }
        },
        "test_that_file_path_with_leading_slash_can_be_parsed": {
            "name": "test_that_file_path_with_leading_slash_can_be_parsed",
            "location": 30,
            "return": [],
            "arguments": {
                "path": [],
                "requirement_parser": []
            }
        },
        "test_that_path_with_hashpound_is_not_recognized": {
            "name": "test_that_path_with_hashpound_is_not_recognized",
            "location": 37,
            "return": [],
            "arguments": {
                "path": [],
                "requirement_parser": []
            }
        },
        "test_that_we_can_parse_pip_style_requirement_with_file_path": {
            "name": "test_that_we_can_parse_pip_style_requirement_with_file_path",
            "location": 42,
            "return": [],
            "arguments": {
                "requirement_parser": []
            }
        },
        "test_regressions_with_cryptography": {
            "name": "test_regressions_with_cryptography",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "requirement_parser": [
                    "RequirementParser"
                ],
                "line": [
                    "str"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "test_that_path_is_parsed_to_path_requirement": {
            "name": "test_that_path_is_parsed_to_path_requirement",
            "location": 67,
            "return": [],
            "arguments": {
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "test_that_requirement_parser_does_not_choke_on_sys_dot_platform": {
            "name": "test_that_requirement_parser_does_not_choke_on_sys_dot_platform",
            "location": 72,
            "return": [],
            "arguments": {
                "requirement_parser": [
                    "RequirementParser"
                ],
                "logger": [
                    "Logger"
                ]
            }
        },
        "test_that_comment_is_parsed_correctly": {
            "name": "test_that_comment_is_parsed_correctly",
            "location": 82,
            "return": [],
            "arguments": {
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "test_that_comment_without_string_after_it_is_parsed_correctly": {
            "name": "test_that_comment_without_string_after_it_is_parsed_correctly",
            "location": 88,
            "return": [],
            "arguments": {
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "test_that_name_requirements_can_have_comments": {
            "name": "test_that_name_requirements_can_have_comments",
            "location": 96,
            "return": [],
            "arguments": {
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "test_that_url_req_can_have_comments": {
            "name": "test_that_url_req_can_have_comments",
            "location": 104,
            "return": [],
            "arguments": {
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "test_that_url_req_pip_style_can_have_comments": {
            "name": "test_that_url_req_pip_style_can_have_comments",
            "location": 110,
            "return": [],
            "arguments": {
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "test_that_path_req_pip_style_can_have_comments": {
            "name": "test_that_path_req_pip_style_can_have_comments",
            "location": 118,
            "return": [],
            "arguments": {
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        }
    },
    "pypi2nix-master/unittests/test_requirement_set.py": {
        "requirement_set": {
            "name": "requirement_set",
            "location": 13,
            "return": [],
            "arguments": {
                "current_platform": []
            }
        },
        "test_length_of_empty_requirement_set_is_0": {
            "name": "test_length_of_empty_requirement_set_is_0",
            "location": 17,
            "return": [],
            "arguments": {
                "current_platform": []
            }
        },
        "test_length_is_one_after_adding_one_requirement": {
            "name": "test_length_is_one_after_adding_one_requirement",
            "location": 21,
            "return": [],
            "arguments": {
                "current_platform": [],
                "requirement_parser": []
            }
        },
        "test_length_is_one_after_adding_same_requirement_twice": {
            "name": "test_length_is_one_after_adding_same_requirement_twice",
            "location": 29,
            "return": [],
            "arguments": {
                "current_platform": [],
                "requirement_parser": []
            }
        },
        "test_to_file_outputs_a_requirements_file_object": {
            "name": "test_to_file_outputs_a_requirements_file_object",
            "location": 38,
            "return": [],
            "arguments": {
                "project_dir": [],
                "current_platform": [],
                "requirement_parser": [],
                "logger": [
                    "Logger"
                ]
            }
        },
        "test_sources_contains_a_source_per_git_requirement": {
            "name": "test_sources_contains_a_source_per_git_requirement",
            "location": 49,
            "return": [],
            "arguments": {
                "current_platform": [],
                "requirement_parser": []
            }
        },
        "test_versions_add_if_same_requirement_is_added_twice": {
            "name": "test_versions_add_if_same_requirement_is_added_twice",
            "location": 60,
            "return": [],
            "arguments": {
                "current_platform": [],
                "requirement_parser": []
            }
        },
        "test_from_file_handles_empty_lines": {
            "name": "test_from_file_handles_empty_lines",
            "location": 71,
            "return": [],
            "arguments": {
                "project_dir": [],
                "current_platform": [],
                "requirement_parser": [],
                "logger": [
                    "Logger"
                ]
            }
        },
        "test_from_file_handles_comment_lines": {
            "name": "test_from_file_handles_comment_lines",
            "location": 83,
            "return": [],
            "arguments": {
                "project_dir": [],
                "current_platform": [],
                "requirement_parser": [],
                "logger": [
                    "Logger"
                ]
            }
        },
        "test_sources_has_sources_type": {
            "name": "test_sources_has_sources_type",
            "location": 95,
            "return": [],
            "arguments": {
                "current_platform": []
            }
        },
        "test_adding_two_empty_sets_results_in_an_empty_set": {
            "name": "test_adding_two_empty_sets_results_in_an_empty_set",
            "location": 100,
            "return": [],
            "arguments": {
                "current_platform": []
            }
        },
        "test_can_find_requirement_in_requirement_set": {
            "name": "test_can_find_requirement_in_requirement_set",
            "location": 105,
            "return": [],
            "arguments": {
                "current_platform": [],
                "requirement_parser": []
            }
        },
        "test_cannot_find_name_in_empty_requirement_set": {
            "name": "test_cannot_find_name_in_empty_requirement_set",
            "location": 111,
            "return": [],
            "arguments": {
                "current_platform": []
            }
        },
        "test_elements_from_both_sets_can_be_found_in_sum_of_sets": {
            "name": "test_elements_from_both_sets_can_be_found_in_sum_of_sets",
            "location": 115,
            "return": [],
            "arguments": {
                "current_platform": [],
                "requirement_parser": []
            }
        },
        "test_requirement_set_respects_constraints_when_reading_from_requirement_file": {
            "name": "test_requirement_set_respects_constraints_when_reading_from_requirement_file",
            "location": 127,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "project_dir": [],
                "current_platform": [],
                "requirement_parser": [],
                "logger": [
                    "Logger"
                ]
            }
        },
        "test_constraints_without_requirement_will_not_show_up_in_generated_requirement_file": {
            "name": "test_constraints_without_requirement_will_not_show_up_in_generated_requirement_file",
            "location": 154,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "project_dir": [],
                "current_platform": [],
                "requirement_parser": [],
                "logger": [
                    "Logger"
                ]
            }
        },
        "test_include_lines_are_respected_when_generating_from_file": {
            "name": "test_include_lines_are_respected_when_generating_from_file",
            "location": 182,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "project_dir": [],
                "current_platform": [],
                "requirement_parser": [],
                "logger": [
                    "Logger"
                ]
            }
        },
        "test_that_we_can_query_for_added_requirements": {
            "name": "test_that_we_can_query_for_added_requirements",
            "location": 203,
            "return": [],
            "arguments": {
                "requirement_set": [],
                "requirement_parser": []
            }
        },
        "test_that_querying_for_non_existing_requirement_raises_key_error": {
            "name": "test_that_querying_for_non_existing_requirement_raises_key_error",
            "location": 209,
            "return": [],
            "arguments": {
                "requirement_set": []
            }
        },
        "test_that_queries_into_set_are_canonicalized": {
            "name": "test_that_queries_into_set_are_canonicalized",
            "location": 214,
            "return": [],
            "arguments": {
                "requirement_set": [],
                "requirement_parser": []
            }
        },
        "test_that_get_method_returns_none_if_key_not_found": {
            "name": "test_that_get_method_returns_none_if_key_not_found",
            "location": 220,
            "return": [],
            "arguments": {
                "requirement_set": []
            }
        },
        "test_that_get_method_returns_specified_default_value_when_not_found": {
            "name": "test_that_get_method_returns_specified_default_value_when_not_found",
            "location": 224,
            "return": [],
            "arguments": {
                "requirement_set": []
            }
        },
        "test_that_filter_works_by_name": {
            "name": "test_that_filter_works_by_name",
            "location": 230,
            "return": [],
            "arguments": {
                "requirement_parser": [],
                "requirement_set": []
            }
        },
        "test_that_extras_are_preserved_when_converting_to_and_from_a_file": {
            "name": "test_that_extras_are_preserved_when_converting_to_and_from_a_file",
            "location": 241,
            "return": [],
            "arguments": {
                "requirement_parser": [
                    "RequirementParser"
                ],
                "requirement_set": [
                    "RequirementSet"
                ],
                "current_platform": [
                    "TargetPlatform"
                ],
                "project_dir": [
                    "str"
                ],
                "logger": [
                    "Logger"
                ]
            }
        }
    },
    "pypi2nix-master/unittests/test_sources.py": {
        "sources": {
            "name": "sources",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "other_sources": {
            "name": "other_sources",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_sources_can_be_added_to": {
            "name": "test_sources_can_be_added_to",
            "location": 17,
            "return": [],
            "arguments": {
                "sources": []
            }
        },
        "test_sources_can_be_queried_by_name": {
            "name": "test_sources_can_be_queried_by_name",
            "location": 23,
            "return": [],
            "arguments": {
                "sources": []
            }
        },
        "test_sources_can_be_merged": {
            "name": "test_sources_can_be_merged",
            "location": 30,
            "return": [],
            "arguments": {
                "sources": [],
                "other_sources": []
            }
        },
        "test_items_returns_length_on_tuple_for_one_entry": {
            "name": "test_items_returns_length_on_tuple_for_one_entry",
            "location": 37,
            "return": [],
            "arguments": {
                "sources": []
            }
        },
        "test_empty_sources_has_length_0": {
            "name": "test_empty_sources_has_length_0",
            "location": 42,
            "return": [],
            "arguments": {
                "sources": []
            }
        }
    },
    "pypi2nix-master/unittests/test_source_distribution.py": {
        "source_distribution": {
            "name": "source_distribution",
            "location": 18,
            "return": [],
            "arguments": {
                "six_source_distribution_archive": [],
                "logger": [
                    "Logger"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "flit_distribution": {
            "name": "flit_distribution",
            "location": 29,
            "return": [],
            "arguments": {
                "data_directory": [],
                "logger": [
                    "Logger"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "test_from_archive_picks_up_on_name": {
            "name": "test_from_archive_picks_up_on_name",
            "location": 39,
            "return": [],
            "arguments": {
                "source_distribution": []
            }
        },
        "test_that_a_source_distributions_name_is_canonicalized": {
            "name": "test_that_a_source_distributions_name_is_canonicalized",
            "location": 44,
            "return": [],
            "arguments": {
                "logger": [
                    "Logger"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "test_six_package_has_no_pyproject_toml": {
            "name": "test_six_package_has_no_pyproject_toml",
            "location": 54,
            "return": [],
            "arguments": {
                "source_distribution": []
            }
        },
        "test_that_flit_pyproject_toml_is_recognized": {
            "name": "test_that_flit_pyproject_toml_is_recognized",
            "location": 59,
            "return": [],
            "arguments": {
                "flit_distribution": []
            }
        },
        "test_that_flit_build_dependencies_contains_requests": {
            "name": "test_that_flit_build_dependencies_contains_requests",
            "location": 64,
            "return": [],
            "arguments": {
                "flit_distribution": [
                    "SourceDistribution"
                ],
                "current_platform": [
                    "TargetPlatform"
                ]
            }
        },
        "test_that_we_can_generate_objects_from_source_archives": {
            "name": "test_that_we_can_generate_objects_from_source_archives",
            "location": 71,
            "return": [],
            "arguments": {
                "source_distribution_archive": [],
                "logger": [
                    "Logger"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "test_that_we_can_detect_setup_requirements_for_setup_cfg_projects": {
            "name": "test_that_we_can_detect_setup_requirements_for_setup_cfg_projects",
            "location": 80,
            "return": [],
            "arguments": {
                "distribution_archive_for_jsonschema": [],
                "current_platform": [],
                "logger": [
                    "Logger"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "test_that_trying_to_create_source_distribution_from_random_zip_throws": {
            "name": "test_that_trying_to_create_source_distribution_from_random_zip_throws",
            "location": 94,
            "return": [],
            "arguments": {
                "test_zip_path": [],
                "logger": [
                    "Logger"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "test_build_dependencies_for_invalid_deps_logs_warning": {
            "name": "test_build_dependencies_for_invalid_deps_logs_warning",
            "location": 104,
            "return": [],
            "arguments": {
                "data_directory": [],
                "current_platform": [],
                "logger": [
                    "Logger"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "test_invalid_build_dependencies_for_setupcfg_package_logs_warning": {
            "name": "test_invalid_build_dependencies_for_setupcfg_package_logs_warning",
            "location": 122,
            "return": [],
            "arguments": {
                "data_directory": [],
                "current_platform": [],
                "logger": [
                    "Logger"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        }
    },
    "pypi2nix-master/unittests/test_target_platform.py": {
        "format_full_version": {
            "name": "format_full_version",
            "location": 19,
            "return": [],
            "arguments": {
                "info": []
            }
        },
        "python_3_environment_nix": {
            "name": "python_3_environment_nix",
            "location": 28,
            "return": [],
            "arguments": {
                "tmp_path_factory": []
            }
        },
        "python_3_6_environment_nix": {
            "name": "python_3_6_environment_nix",
            "location": 44,
            "return": [],
            "arguments": {
                "tmp_path_factory": []
            }
        },
        "environment_marker_definition": {
            "name": "environment_marker_definition",
            "location": 86,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_that_target_platform_can_be_constructed_from_python_version": {
            "name": "test_that_target_platform_can_be_constructed_from_python_version",
            "location": 92,
            "return": [],
            "arguments": {
                "platform_generator": [
                    "PlatformGenerator"
                ],
                "nix": [],
                "python_3_environment_nix": []
            }
        },
        "test_that_current_platform_to_environment_dict_equals_default_environment": {
            "name": "test_that_current_platform_to_environment_dict_equals_default_environment",
            "location": 106,
            "return": [],
            "arguments": {
                "current_platform": [
                    "TargetPlatform"
                ]
            }
        },
        "test_that_generated_platform_environment_dictionary_respects_python_version": {
            "name": "test_that_generated_platform_environment_dictionary_respects_python_version",
            "location": 113,
            "return": [],
            "arguments": {
                "platform_generator": [
                    "PlatformGenerator"
                ],
                "python_3_6_environment_nix": [],
                "nix": []
            }
        },
        "test_that_environment_marker_with_unknown_os_name_do_not_apply_to_current_platform": {
            "name": "test_that_environment_marker_with_unknown_os_name_do_not_apply_to_current_platform",
            "location": 132,
            "return": [],
            "arguments": {
                "current_platform": [
                    "TargetPlatform"
                ]
            }
        },
        "test_that_environment_markers_from_pep_are_correct_for_current_platform": {
            "name": "test_that_environment_markers_from_pep_are_correct_for_current_platform",
            "location": 139,
            "return": [],
            "arguments": {
                "environment_marker_definition": [
                    "MarkerDefinition"
                ],
                "current_platform": [
                    "TargetPlatform"
                ]
            }
        }
    },
    "pypi2nix-master/unittests/test_util_cmd.py": {
        "test_consistent_output": {
            "name": "test_consistent_output",
            "location": 5,
            "return": [],
            "arguments": {
                "logger": [
                    "Logger"
                ]
            }
        }
    },
    "pypi2nix-master/unittests/test_wheel.py": {
        "wheel": {
            "name": "wheel",
            "location": 15,
            "return": [],
            "arguments": {
                "current_platform": []
            }
        },
        "test_can_create_wheel_from_valid_directory": {
            "name": "test_can_create_wheel_from_valid_directory",
            "location": 31,
            "return": [],
            "arguments": {
                "extracted_six_package": [],
                "current_platform": [],
                "logger": [
                    "Logger"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "test_can_add_build_dependencies_to_wheel": {
            "name": "test_can_add_build_dependencies_to_wheel",
            "location": 43,
            "return": [],
            "arguments": {
                "wheel": [
                    "Wheel"
                ],
                "current_platform": [
                    "TargetPlatform"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "test_that_to_dict_is_json_serializable": {
            "name": "test_that_to_dict_is_json_serializable",
            "location": 56,
            "return": [],
            "arguments": {
                "wheel": [
                    "Wheel"
                ]
            }
        },
        "test_that_setupcfg_package_wheel_contains_requests_as_dependency": {
            "name": "test_that_setupcfg_package_wheel_contains_requests_as_dependency",
            "location": 60,
            "return": [],
            "arguments": {
                "setupcfg_package_wheel": [
                    "Wheel"
                ]
            }
        },
        "test_that_setupcfg_package_wheel_contains_pytest_as_testing_dependency": {
            "name": "test_that_setupcfg_package_wheel_contains_pytest_as_testing_dependency",
            "location": 66,
            "return": [],
            "arguments": {
                "setupcfg_package_wheel": [
                    "Wheel"
                ]
            }
        },
        "test_that_setupcfg_package_wheel_does_not_contain_pytest_as_non_testing_dependency": {
            "name": "test_that_setupcfg_package_wheel_does_not_contain_pytest_as_non_testing_dependency",
            "location": 72,
            "return": [],
            "arguments": {
                "setupcfg_package_wheel": [
                    "Wheel"
                ]
            }
        }
    },
    "pypi2nix-master/unittests/test_wheel_builder.py": {
        "build_wheels": {
            "name": "build_wheels",
            "location": 19,
            "return": [],
            "arguments": {
                "wheel_builder": [
                    "WheelBuilder"
                ],
                "current_platform": [
                    "TargetPlatform"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ],
                "logger": [
                    "Logger"
                ],
                "sources_for_test_packages": [
                    "Sources"
                ],
                "pypi": [
                    "Pypi"
                ]
            }
        },
        "test_extracts_myextra_dependencies_from_package3": {
            "name": "test_extracts_myextra_dependencies_from_package3",
            "location": 43,
            "return": [],
            "arguments": {
                "build_wheels": []
            }
        },
        "test_does_not_package_myextra_dependencies_if_no_extras_specified": {
            "name": "test_does_not_package_myextra_dependencies_if_no_extras_specified",
            "location": 49,
            "return": [],
            "arguments": {
                "build_wheels": []
            }
        },
        "test_does_detect_extra_requirements_from_requirements": {
            "name": "test_does_detect_extra_requirements_from_requirements",
            "location": 55,
            "return": [],
            "arguments": {
                "build_wheels": []
            }
        },
        "test_that_we_filter_extra_requirements_that_do_not_apply_to_target_platform": {
            "name": "test_that_we_filter_extra_requirements_that_do_not_apply_to_target_platform",
            "location": 61,
            "return": [],
            "arguments": {
                "build_wheels": []
            }
        },
        "build_wheels.wrapper": {
            "name": "wrapper",
            "location": 27,
            "return": [
                "List[Wheel]"
            ],
            "arguments": {
                "requirement_lines": [
                    "List[str]"
                ]
            }
        }
    },
    "pypi2nix-master/unittests/__init__.py": {},
    "pypi2nix-master/unittests/data/package1/setup.py": {},
    "pypi2nix-master/unittests/data/package2/setup.py": {},
    "pypi2nix-master/unittests/data/package3/setup.py": {},
    "pypi2nix-master/unittests/data/package4/setup.py": {},
    "pypi2nix-master/unittests/data/setupcfg-package/setup.py": {},
    "pypi2nix-master/unittests/pip/conftest.py": {
        "pip": {
            "name": "pip",
            "location": 16,
            "return": [],
            "arguments": {
                "request": [],
                "nix": [
                    "Nix"
                ],
                "project_dir": [
                    "str"
                ],
                "current_platform": [
                    "TargetPlatform"
                ],
                "logger": [
                    "Logger"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        }
    },
    "pypi2nix-master/unittests/pip/test_download.py": {
        "list_files": {
            "name": "list_files",
            "location": 14,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "dirname": [
                    "str"
                ]
            }
        },
        "test_pip_downloads_sources_to_target_directory": {
            "name": "test_pip_downloads_sources_to_target_directory",
            "location": 23,
            "return": [],
            "arguments": {
                "pip": [
                    "Pip"
                ],
                "project_dir": [
                    "str"
                ],
                "current_platform": [
                    "TargetPlatform"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "test_pip_downloads_nothing_when_no_requirements_are_given": {
            "name": "test_pip_downloads_nothing_when_no_requirements_are_given",
            "location": 37,
            "return": [],
            "arguments": {
                "pip": [
                    "Pip"
                ],
                "download_dir": [
                    "Path"
                ],
                "current_platform": [
                    "TargetPlatform"
                ]
            }
        }
    },
    "pypi2nix-master/unittests/pip/test_freeze.py": {
        "test_freeze_on_empty_environment_yields_empty_file": {
            "name": "test_freeze_on_empty_environment_yields_empty_file",
            "location": 11,
            "return": [],
            "arguments": {
                "pip": [
                    "Pip"
                ]
            }
        },
        "test_freeze_respects_additional_python_path": {
            "name": "test_freeze_respects_additional_python_path",
            "location": 17,
            "return": [],
            "arguments": {
                "pip": [
                    "Pip"
                ],
                "project_dir": [
                    "str"
                ],
                "current_platform": [
                    "TargetPlatform"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ],
                "download_dir": [
                    "Path"
                ]
            }
        }
    },
    "pypi2nix-master/unittests/pip/test_install.py": {
        "test_install_six_yields_non_empty_freeze_output": {
            "name": "test_install_six_yields_non_empty_freeze_output",
            "location": 14,
            "return": [],
            "arguments": {
                "pip": [
                    "Pip"
                ],
                "project_dir": [
                    "str"
                ],
                "download_dir": [
                    "Path"
                ],
                "current_platform": [
                    "TargetPlatform"
                ],
                "requirement_parser": []
            }
        },
        "test_install_to_target_directory_does_not_install_to_default_directory": {
            "name": "test_install_to_target_directory_does_not_install_to_default_directory",
            "location": 32,
            "return": [],
            "arguments": {
                "pip": [
                    "Pip"
                ],
                "project_dir": [
                    "str"
                ],
                "download_dir": [
                    "Path"
                ],
                "current_platform": [
                    "TargetPlatform"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "test_install_does_not_install_anything_with_empty_requirements": {
            "name": "test_install_does_not_install_anything_with_empty_requirements",
            "location": 57,
            "return": [],
            "arguments": {
                "pip": [
                    "Pip"
                ],
                "project_dir": [
                    "str"
                ],
                "current_platform": [
                    "TargetPlatform"
                ]
            }
        }
    },
    "pypi2nix-master/unittests/pip/test_virtualenv_pip.py": {
        "pip_without_index": {
            "name": "pip_without_index",
            "location": 17,
            "return": [
                "VirtualenvPip"
            ],
            "arguments": {
                "logger": [
                    "Logger"
                ],
                "current_platform": [
                    "TargetPlatform"
                ],
                "project_dir": [
                    "str"
                ],
                "wheel_distribution_archive_path": [
                    "str"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "pip_from_data_directory": {
            "name": "pip_from_data_directory",
            "location": 38,
            "return": [
                "VirtualenvPip"
            ],
            "arguments": {
                "logger": [
                    "Logger"
                ],
                "current_platform": [
                    "TargetPlatform"
                ],
                "project_dir": [
                    "str"
                ],
                "wheel_distribution_archive_path": [
                    "str"
                ],
                "data_directory": [
                    "str"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "test_pip_without_index_cannot_download_six": {
            "name": "test_pip_without_index_cannot_download_six",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "pip_without_index": [
                    "VirtualenvPip"
                ],
                "download_dir": [
                    "Path"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ],
                "current_platform": [
                    "TargetPlatform"
                ]
            }
        },
        "test_pip_without_index_cannot_be_prepared_without_wheel_supplied": {
            "name": "test_pip_without_index_cannot_be_prepared_without_wheel_supplied",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "logger": [
                    "Logger"
                ],
                "current_platform": [
                    "TargetPlatform"
                ],
                "project_dir": [
                    "str"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "test_pip_with_data_directory_index_can_download_six": {
            "name": "test_pip_with_data_directory_index_can_download_six",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "pip_from_data_directory": [
                    "VirtualenvPip"
                ],
                "download_dir": [
                    "Path"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ],
                "current_platform": [
                    "TargetPlatform"
                ]
            }
        },
        "test_that_set_environment_variable_undoes_changes_when_exiting": {
            "name": "test_that_set_environment_variable_undoes_changes_when_exiting",
            "location": 101,
            "return": [],
            "arguments": {
                "pip_without_index": [
                    "VirtualenvPip"
                ]
            }
        }
    },
    "pypi2nix-master/unittests/pip/test_wheel.py": {
        "test_pip_can_install_wheels_previously_downloaded": {
            "name": "test_pip_can_install_wheels_previously_downloaded",
            "location": 11,
            "return": [],
            "arguments": {
                "pip": [
                    "Pip"
                ],
                "project_dir": [
                    "str"
                ],
                "current_platform": [
                    "TargetPlatform"
                ],
                "requirement_parser": [
                    "RequirementParser"
                ],
                "download_dir": [
                    "Path"
                ],
                "wheels_dir": [
                    "Path"
                ]
            }
        },
        "test_pip_wheel_does_not_build_wheels_if_requirements_are_empty": {
            "name": "test_pip_wheel_does_not_build_wheels_if_requirements_are_empty",
            "location": 32,
            "return": [],
            "arguments": {
                "pip": [
                    "Pip"
                ],
                "wheels_dir": [
                    "Path"
                ],
                "download_dir": [
                    "Path"
                ],
                "current_platform": [
                    "TargetPlatform"
                ]
            }
        }
    },
    "pypi2nix-master/unittests/pip/__init__.py": {},
    "pypi2nix-master/unittests/regression/test_issue_363.py": {
        "test_can_parse_enum_requirement_from_issue_363": {
            "name": "test_can_parse_enum_requirement_from_issue_363",
            "location": 5,
            "return": [],
            "arguments": {
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "test_can_parse_pyinotify_requirement_from_issue_363": {
            "name": "test_can_parse_pyinotify_requirement_from_issue_363",
            "location": 14,
            "return": [],
            "arguments": {
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        }
    },
    "pypi2nix-master/unittests/regression/test_issue_394.py": {
        "test_can_parse_requirements_with_comments": {
            "name": "test_can_parse_requirements_with_comments",
            "location": 5,
            "return": [],
            "arguments": {
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        },
        "test_can_parse_given_test_case_from_issue": {
            "name": "test_can_parse_given_test_case_from_issue",
            "location": 10,
            "return": [],
            "arguments": {
                "requirement_parser": [
                    "RequirementParser"
                ]
            }
        }
    },
    "pypi2nix-master/unittests/templates/setup.py": {}
}
{
    "pyrads-master/setup.py": {
        "read_version": {
            "name": "read_version",
            "location": 11,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "read": {
            "name": "read",
            "location": 17,
            "return": [],
            "arguments": {
                "filename": []
            }
        }
    },
    "pyrads-master/tasks.py": {
        "check_typing": {
            "name": "check_typing",
            "location": 10,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "check_style": {
            "name": "check_style",
            "location": 17,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "check_docstrings": {
            "name": "check_docstrings",
            "location": 23,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "check_all": {
            "name": "check_all",
            "location": 29,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "develop": {
            "name": "develop",
            "location": 34,
            "return": [],
            "arguments": {
                "c": [],
                "lxml": []
            }
        },
        "dist_clean": {
            "name": "dist_clean",
            "location": 41,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "dist_build": {
            "name": "dist_build",
            "location": 48,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "doc_build": {
            "name": "doc_build",
            "location": 56,
            "return": [],
            "arguments": {
                "c": [],
                "format": []
            }
        },
        "doc_clean": {
            "name": "doc_clean",
            "location": 68,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "format_isort": {
            "name": "format_isort",
            "location": 75,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "format_black": {
            "name": "format_black",
            "location": 81,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "format_all": {
            "name": "format_all",
            "location": 87,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "test": {
            "name": "test",
            "location": 99,
            "return": [],
            "arguments": {
                "c": [],
                "verbose": [],
                "coverage": [],
                "html": []
            }
        },
        "clean": {
            "name": "clean",
            "location": 109,
            "return": [],
            "arguments": {
                "c": []
            }
        }
    },
    "pyrads-master/docs/conf.py": {
        "read_version": {
            "name": "read_version",
            "location": 24,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "read": {
            "name": "read",
            "location": 30,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "iad_add_directive_header": {
            "name": "iad_add_directive_header",
            "location": 265,
            "return": [],
            "arguments": {
                "self": [],
                "sig": []
            }
        }
    },
    "pyrads-master/rads/constants.py": {},
    "pyrads-master/rads/datetime64util.py": {
        "year": {
            "name": "year",
            "location": 19,
            "return": [
                "np.generic"
            ],
            "arguments": {
                "datetime64": [
                    "np.datetime64"
                ]
            }
        },
        "month": {
            "name": "month",
            "location": 32,
            "return": [
                "np.generic"
            ],
            "arguments": {
                "datetime64": [
                    "np.datetime64"
                ]
            }
        },
        "day": {
            "name": "day",
            "location": 45,
            "return": [
                "np.generic"
            ],
            "arguments": {
                "datetime64": [
                    "np.datetime64"
                ]
            }
        },
        "hour": {
            "name": "hour",
            "location": 60,
            "return": [
                "np.generic"
            ],
            "arguments": {
                "datetime64": [
                    "np.datetime64"
                ]
            }
        },
        "minute": {
            "name": "minute",
            "location": 72,
            "return": [
                "np.generic"
            ],
            "arguments": {
                "datetime64": [
                    "np.datetime64"
                ]
            }
        },
        "second": {
            "name": "second",
            "location": 84,
            "return": [
                "np.generic"
            ],
            "arguments": {
                "datetime64": [
                    "np.datetime64"
                ]
            }
        },
        "microsecond": {
            "name": "microsecond",
            "location": 96,
            "return": [
                "np.generic"
            ],
            "arguments": {
                "datetime64": [
                    "np.datetime64"
                ]
            }
        },
        "ymdhmsus": {
            "name": "ymdhmsus",
            "location": 108,
            "return": [
                "Tuple[(np.generic, np.generic, np.generic, np.generic, np.generic, np.generic, np.generic)]"
            ],
            "arguments": {
                "datetime64": [
                    "np.datetime64"
                ]
            }
        }
    },
    "pyrads-master/rads/exceptions.py": {
        "ConfigError.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "line": [
                    "Optional[int]"
                ],
                "file": [
                    "Optional[str]"
                ]
            }
        }
    },
    "pyrads-master/rads/logging.py": {
        "configure_logging": {
            "name": "configure_logging",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "level": [
                    "Union[(str, int)]"
                ],
                "file": [
                    "Optional[PathLike]"
                ]
            }
        }
    },
    "pyrads-master/rads/paths.py": {
        "rads_xml": {
            "name": "rads_xml",
            "location": 17,
            "return": [
                "Path"
            ],
            "arguments": {
                "dataroot": [
                    "PathLike"
                ]
            }
        },
        "site_config": {
            "name": "site_config",
            "location": 35,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "user_xml": {
            "name": "user_xml",
            "location": 59,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "user_config": {
            "name": "user_config",
            "location": 74,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "local_xml": {
            "name": "local_xml",
            "location": 95,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "local_config": {
            "name": "local_config",
            "location": 110,
            "return": [
                "Path"
            ],
            "arguments": {}
        }
    },
    "pyrads-master/rads/rpn.py": {
        "token": {
            "name": "token",
            "location": 776,
            "return": [
                "Token"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "_is_integer": {
            "name": "_is_integer",
            "location": 2791,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "FloatOrArray"
                ]
            }
        },
        "_get_x": {
            "name": "_get_x",
            "location": 2805,
            "return": [
                "FloatOrArray"
            ],
            "arguments": {
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ]
            }
        },
        "_get_xy": {
            "name": "_get_xy",
            "location": 2813,
            "return": [
                "Tuple[(FloatOrArray, FloatOrArray)]"
            ],
            "arguments": {
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ]
            }
        },
        "_get_xyz": {
            "name": "_get_xyz",
            "location": 2828,
            "return": [
                "Tuple[(FloatOrArray, FloatOrArray, FloatOrArray)]"
            ],
            "arguments": {
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ]
            }
        },
        "Token.pops": {
            "name": "pops",
            "location": 267,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.puts": {
            "name": "puts",
            "location": 272,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.__call__": {
            "name": "__call__",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "Literal.pops": {
            "name": "pops",
            "location": 305,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Literal.puts": {
            "name": "puts",
            "location": 310,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Literal.value": {
            "name": "value",
            "location": 315,
            "return": [
                "Union[(int, float, bool)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Literal.__init__": {
            "name": "__init__",
            "location": 319,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Union[(int, float, bool)]"
                ]
            }
        },
        "Literal.__call__": {
            "name": "__call__",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "Literal.__eq__": {
            "name": "__eq__",
            "location": 346,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Literal.__ne__": {
            "name": "__ne__",
            "location": 349,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Literal.__lt__": {
            "name": "__lt__",
            "location": 352,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Literal.__le__": {
            "name": "__le__",
            "location": 357,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Literal.__gt__": {
            "name": "__gt__",
            "location": 362,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Literal.__ge__": {
            "name": "__ge__",
            "location": 367,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Literal.__repr__": {
            "name": "__repr__",
            "location": 372,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Literal.__str__": {
            "name": "__str__",
            "location": 375,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable.pops": {
            "name": "pops",
            "location": 387,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable.puts": {
            "name": "puts",
            "location": 392,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable.name": {
            "name": "name",
            "location": 397,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable.__init__": {
            "name": "__init__",
            "location": 401,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Variable.__call__": {
            "name": "__call__",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "Variable.__eq__": {
            "name": "__eq__",
            "location": 430,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Variable.__ne__": {
            "name": "__ne__",
            "location": 433,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Variable.__repr__": {
            "name": "__repr__",
            "location": 436,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable.__str__": {
            "name": "__str__",
            "location": 439,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Operator.__init__": {
            "name": "__init__",
            "location": 446,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Operator.__copy__": {
            "name": "__copy__",
            "location": 453,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Operator.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 457,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "memo": [
                    "Any"
                ]
            }
        },
        "Operator.__repr__": {
            "name": "__repr__",
            "location": 461,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expression.pops": {
            "name": "pops",
            "location": 496,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expression.puts": {
            "name": "puts",
            "location": 501,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expression.variables": {
            "name": "variables",
            "location": 506,
            "return": [
                "AbstractSet[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expression.__init__": {
            "name": "__init__",
            "location": 510,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [
                    "Union[(str, Iterable[Union[(float, str, Token)]])]"
                ]
            }
        },
        "Expression.complete": {
            "name": "complete",
            "location": 536,
            "return": [
                "'CompleteExpression'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expression.is_complete": {
            "name": "is_complete",
            "location": 548,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expression.__call__": {
            "name": "__call__",
            "location": 558,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "Expression.__contains__": {
            "name": "__contains__",
            "location": 576,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Any"
                ]
            }
        },
        "Expression.__getitem__": {
            "name": "__getitem__",
            "location": 594,
            "return": [
                "Union[(Token, 'Expression')]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Union[(int, slice)]"
                ]
            }
        },
        "Expression.__iter__": {
            "name": "__iter__",
            "location": 601,
            "return": [
                "Iterator[Token]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expression.__len__": {
            "name": "__len__",
            "location": 605,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expression.__eq__": {
            "name": "__eq__",
            "location": 608,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Expression.__ne__": {
            "name": "__ne__",
            "location": 613,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Expression.__add__": {
            "name": "__add__",
            "location": 618,
            "return": [
                "'Expression'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Expression.__repr__": {
            "name": "__repr__",
            "location": 626,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expression.__str__": {
            "name": "__str__",
            "location": 629,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expression._simulate": {
            "name": "_simulate",
            "location": 632,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompleteExpression.__init__": {
            "name": "__init__",
            "location": 651,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [
                    "Union[(str, Iterable[Union[(float, str, Token)]])]"
                ]
            }
        },
        "CompleteExpression.complete": {
            "name": "complete",
            "location": 674,
            "return": [
                "'CompleteExpression'"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompleteExpression.eval": {
            "name": "eval",
            "location": 682,
            "return": [
                "FloatOrArray"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "Optional[Mapping[(str, FloatOrArray)]]"
                ]
            }
        },
        "CompleteExpression._format_syntax_error": {
            "name": "_format_syntax_error",
            "location": 735,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ],
                "token_": [
                    "Optional[int]"
                ]
            }
        },
        "CompleteExpression._check": {
            "name": "_check",
            "location": 744,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SUBType.pops": {
            "name": "pops",
            "location": 818,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SUBType.puts": {
            "name": "puts",
            "location": 822,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SUBType.__call__": {
            "name": "__call__",
            "location": 825,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_ADDType.pops": {
            "name": "pops",
            "location": 837,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ADDType.puts": {
            "name": "puts",
            "location": 841,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ADDType.__call__": {
            "name": "__call__",
            "location": 844,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_MULType.pops": {
            "name": "pops",
            "location": 855,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MULType.puts": {
            "name": "puts",
            "location": 859,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MULType.__call__": {
            "name": "__call__",
            "location": 862,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_POPType.pops": {
            "name": "pops",
            "location": 873,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_POPType.puts": {
            "name": "puts",
            "location": 877,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_POPType.__call__": {
            "name": "__call__",
            "location": 880,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_NEGType.pops": {
            "name": "pops",
            "location": 890,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_NEGType.puts": {
            "name": "puts",
            "location": 894,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_NEGType.__call__": {
            "name": "__call__",
            "location": 897,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_ABSType.pops": {
            "name": "pops",
            "location": 908,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ABSType.puts": {
            "name": "puts",
            "location": 912,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ABSType.__call__": {
            "name": "__call__",
            "location": 915,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_INVType.pops": {
            "name": "pops",
            "location": 926,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_INVType.puts": {
            "name": "puts",
            "location": 930,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_INVType.__call__": {
            "name": "__call__",
            "location": 933,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_SQRTType.pops": {
            "name": "pops",
            "location": 944,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SQRTType.puts": {
            "name": "puts",
            "location": 948,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SQRTType.__call__": {
            "name": "__call__",
            "location": 951,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_SQRType.pops": {
            "name": "pops",
            "location": 962,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SQRType.puts": {
            "name": "puts",
            "location": 966,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SQRType.__call__": {
            "name": "__call__",
            "location": 969,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_EXPType.pops": {
            "name": "pops",
            "location": 980,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_EXPType.puts": {
            "name": "puts",
            "location": 984,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_EXPType.__call__": {
            "name": "__call__",
            "location": 987,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_LOGType.pops": {
            "name": "pops",
            "location": 998,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_LOGType.puts": {
            "name": "puts",
            "location": 1002,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_LOGType.__call__": {
            "name": "__call__",
            "location": 1005,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_LOG10Type.pops": {
            "name": "pops",
            "location": 1016,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_LOG10Type.puts": {
            "name": "puts",
            "location": 1020,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_LOG10Type.__call__": {
            "name": "__call__",
            "location": 1023,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_SINType.pops": {
            "name": "pops",
            "location": 1034,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SINType.puts": {
            "name": "puts",
            "location": 1038,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SINType.__call__": {
            "name": "__call__",
            "location": 1041,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_COSType.pops": {
            "name": "pops",
            "location": 1052,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_COSType.puts": {
            "name": "puts",
            "location": 1056,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_COSType.__call__": {
            "name": "__call__",
            "location": 1059,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_TANType.pops": {
            "name": "pops",
            "location": 1070,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TANType.puts": {
            "name": "puts",
            "location": 1074,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TANType.__call__": {
            "name": "__call__",
            "location": 1077,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_SINDType.pops": {
            "name": "pops",
            "location": 1088,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SINDType.puts": {
            "name": "puts",
            "location": 1092,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SINDType.__call__": {
            "name": "__call__",
            "location": 1095,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_COSDType.pops": {
            "name": "pops",
            "location": 1106,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_COSDType.puts": {
            "name": "puts",
            "location": 1110,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_COSDType.__call__": {
            "name": "__call__",
            "location": 1113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_TANDType.pops": {
            "name": "pops",
            "location": 1124,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TANDType.puts": {
            "name": "puts",
            "location": 1128,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TANDType.__call__": {
            "name": "__call__",
            "location": 1131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_SINHType.pops": {
            "name": "pops",
            "location": 1142,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SINHType.puts": {
            "name": "puts",
            "location": 1146,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SINHType.__call__": {
            "name": "__call__",
            "location": 1149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_COSHType.pops": {
            "name": "pops",
            "location": 1160,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_COSHType.puts": {
            "name": "puts",
            "location": 1164,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_COSHType.__call__": {
            "name": "__call__",
            "location": 1167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_TANHType.pops": {
            "name": "pops",
            "location": 1178,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TANHType.puts": {
            "name": "puts",
            "location": 1182,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TANHType.__call__": {
            "name": "__call__",
            "location": 1185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_ASINType.pops": {
            "name": "pops",
            "location": 1196,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ASINType.puts": {
            "name": "puts",
            "location": 1200,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ASINType.__call__": {
            "name": "__call__",
            "location": 1203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_ACOSType.pops": {
            "name": "pops",
            "location": 1214,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ACOSType.puts": {
            "name": "puts",
            "location": 1218,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ACOSType.__call__": {
            "name": "__call__",
            "location": 1221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_ATANType.pops": {
            "name": "pops",
            "location": 1232,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ATANType.puts": {
            "name": "puts",
            "location": 1236,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ATANType.__call__": {
            "name": "__call__",
            "location": 1239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_ASINDType.pops": {
            "name": "pops",
            "location": 1250,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ASINDType.puts": {
            "name": "puts",
            "location": 1254,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ASINDType.__call__": {
            "name": "__call__",
            "location": 1257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_ACOSDType.pops": {
            "name": "pops",
            "location": 1268,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ACOSDType.puts": {
            "name": "puts",
            "location": 1272,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ACOSDType.__call__": {
            "name": "__call__",
            "location": 1275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_ATANDType.pops": {
            "name": "pops",
            "location": 1286,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ATANDType.puts": {
            "name": "puts",
            "location": 1290,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ATANDType.__call__": {
            "name": "__call__",
            "location": 1293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_ASINHType.pops": {
            "name": "pops",
            "location": 1304,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ASINHType.puts": {
            "name": "puts",
            "location": 1308,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ASINHType.__call__": {
            "name": "__call__",
            "location": 1311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_ACOSHType.pops": {
            "name": "pops",
            "location": 1322,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ACOSHType.puts": {
            "name": "puts",
            "location": 1326,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ACOSHType.__call__": {
            "name": "__call__",
            "location": 1329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_ATANHType.pops": {
            "name": "pops",
            "location": 1340,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ATANHType.puts": {
            "name": "puts",
            "location": 1344,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ATANHType.__call__": {
            "name": "__call__",
            "location": 1347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_ISNANType.pops": {
            "name": "pops",
            "location": 1358,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ISNANType.puts": {
            "name": "puts",
            "location": 1362,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ISNANType.__call__": {
            "name": "__call__",
            "location": 1365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_ISANType.pops": {
            "name": "pops",
            "location": 1376,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ISANType.puts": {
            "name": "puts",
            "location": 1380,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ISANType.__call__": {
            "name": "__call__",
            "location": 1383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_RINTType.pops": {
            "name": "pops",
            "location": 1394,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RINTType.puts": {
            "name": "puts",
            "location": 1398,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RINTType.__call__": {
            "name": "__call__",
            "location": 1401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_CEILType.pops": {
            "name": "pops",
            "location": 1412,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CEILType.puts": {
            "name": "puts",
            "location": 1416,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CEILType.__call__": {
            "name": "__call__",
            "location": 1419,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_FLOORType.pops": {
            "name": "pops",
            "location": 1430,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_FLOORType.puts": {
            "name": "puts",
            "location": 1434,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_FLOORType.__call__": {
            "name": "__call__",
            "location": 1437,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_D2RType.pops": {
            "name": "pops",
            "location": 1448,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_D2RType.puts": {
            "name": "puts",
            "location": 1452,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_D2RType.__call__": {
            "name": "__call__",
            "location": 1455,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_R2DType.pops": {
            "name": "pops",
            "location": 1466,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_R2DType.puts": {
            "name": "puts",
            "location": 1470,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_R2DType.__call__": {
            "name": "__call__",
            "location": 1473,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_YMDHMSType.pops": {
            "name": "pops",
            "location": 1484,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_YMDHMSType.puts": {
            "name": "puts",
            "location": 1488,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_YMDHMSType.__call__": {
            "name": "__call__",
            "location": 1491,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_SUMType.pops": {
            "name": "pops",
            "location": 1525,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SUMType.puts": {
            "name": "puts",
            "location": 1529,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SUMType.__call__": {
            "name": "__call__",
            "location": 1532,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_DIFType.pops": {
            "name": "pops",
            "location": 1543,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_DIFType.puts": {
            "name": "puts",
            "location": 1547,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_DIFType.__call__": {
            "name": "__call__",
            "location": 1550,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_DUPType.pops": {
            "name": "pops",
            "location": 1561,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_DUPType.puts": {
            "name": "puts",
            "location": 1565,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_DUPType.__call__": {
            "name": "__call__",
            "location": 1568,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_DIVType.pops": {
            "name": "pops",
            "location": 1580,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_DIVType.puts": {
            "name": "puts",
            "location": 1584,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_DIVType.__call__": {
            "name": "__call__",
            "location": 1587,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_POWType.pops": {
            "name": "pops",
            "location": 1598,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_POWType.puts": {
            "name": "puts",
            "location": 1602,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_POWType.__call__": {
            "name": "__call__",
            "location": 1605,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_FMODType.pops": {
            "name": "pops",
            "location": 1616,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_FMODType.puts": {
            "name": "puts",
            "location": 1620,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_FMODType.__call__": {
            "name": "__call__",
            "location": 1623,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_MINType.pops": {
            "name": "pops",
            "location": 1634,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MINType.puts": {
            "name": "puts",
            "location": 1638,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MINType.__call__": {
            "name": "__call__",
            "location": 1641,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_MAXType.pops": {
            "name": "pops",
            "location": 1652,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MAXType.puts": {
            "name": "puts",
            "location": 1656,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MAXType.__call__": {
            "name": "__call__",
            "location": 1659,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_ATAN2Type.pops": {
            "name": "pops",
            "location": 1670,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ATAN2Type.puts": {
            "name": "puts",
            "location": 1674,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ATAN2Type.__call__": {
            "name": "__call__",
            "location": 1677,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_HYPOTType.pops": {
            "name": "pops",
            "location": 1688,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_HYPOTType.puts": {
            "name": "puts",
            "location": 1692,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_HYPOTType.__call__": {
            "name": "__call__",
            "location": 1695,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_R2Type.pops": {
            "name": "pops",
            "location": 1706,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_R2Type.puts": {
            "name": "puts",
            "location": 1710,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_R2Type.__call__": {
            "name": "__call__",
            "location": 1713,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_EQType.pops": {
            "name": "pops",
            "location": 1724,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_EQType.puts": {
            "name": "puts",
            "location": 1728,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_EQType.__call__": {
            "name": "__call__",
            "location": 1731,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_NEType.pops": {
            "name": "pops",
            "location": 1742,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_NEType.puts": {
            "name": "puts",
            "location": 1746,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_NEType.__call__": {
            "name": "__call__",
            "location": 1749,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_LTType.pops": {
            "name": "pops",
            "location": 1760,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_LTType.puts": {
            "name": "puts",
            "location": 1764,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_LTType.__call__": {
            "name": "__call__",
            "location": 1767,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_LEType.pops": {
            "name": "pops",
            "location": 1778,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_LEType.puts": {
            "name": "puts",
            "location": 1782,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_LEType.__call__": {
            "name": "__call__",
            "location": 1785,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_GTType.pops": {
            "name": "pops",
            "location": 1796,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_GTType.puts": {
            "name": "puts",
            "location": 1800,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_GTType.__call__": {
            "name": "__call__",
            "location": 1803,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_GEType.pops": {
            "name": "pops",
            "location": 1814,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_GEType.puts": {
            "name": "puts",
            "location": 1818,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_GEType.__call__": {
            "name": "__call__",
            "location": 1821,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_NANType.pops": {
            "name": "pops",
            "location": 1832,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_NANType.puts": {
            "name": "puts",
            "location": 1836,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_NANType.__call__": {
            "name": "__call__",
            "location": 1839,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_ANDType.pops": {
            "name": "pops",
            "location": 1860,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ANDType.puts": {
            "name": "puts",
            "location": 1864,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ANDType.__call__": {
            "name": "__call__",
            "location": 1867,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_ORType.pops": {
            "name": "pops",
            "location": 1885,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ORType.puts": {
            "name": "puts",
            "location": 1889,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ORType.__call__": {
            "name": "__call__",
            "location": 1892,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_IANDType.pops": {
            "name": "pops",
            "location": 1915,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_IANDType.puts": {
            "name": "puts",
            "location": 1919,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_IANDType.__call__": {
            "name": "__call__",
            "location": 1922,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_IORType.pops": {
            "name": "pops",
            "location": 1933,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_IORType.puts": {
            "name": "puts",
            "location": 1937,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_IORType.__call__": {
            "name": "__call__",
            "location": 1940,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_BTESTType.pops": {
            "name": "pops",
            "location": 1951,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BTESTType.puts": {
            "name": "puts",
            "location": 1955,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BTESTType.__call__": {
            "name": "__call__",
            "location": 1958,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_AVGType.pops": {
            "name": "pops",
            "location": 1973,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_AVGType.puts": {
            "name": "puts",
            "location": 1977,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_AVGType.__call__": {
            "name": "__call__",
            "location": 1980,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_DXDYType.pops": {
            "name": "pops",
            "location": 2002,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_DXDYType.puts": {
            "name": "puts",
            "location": 2006,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_DXDYType.__call__": {
            "name": "__call__",
            "location": 2009,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_EXCHType.pops": {
            "name": "pops",
            "location": 2032,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_EXCHType.puts": {
            "name": "puts",
            "location": 2036,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_EXCHType.__call__": {
            "name": "__call__",
            "location": 2039,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_INRANGEType.pops": {
            "name": "pops",
            "location": 2051,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_INRANGEType.puts": {
            "name": "puts",
            "location": 2055,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_INRANGEType.__call__": {
            "name": "__call__",
            "location": 2058,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_BOXCARType.pops": {
            "name": "pops",
            "location": 2074,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BOXCARType.puts": {
            "name": "puts",
            "location": 2078,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BOXCARType.__call__": {
            "name": "__call__",
            "location": 2081,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        },
        "_GAUSSType.pops": {
            "name": "pops",
            "location": 2115,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_GAUSSType.puts": {
            "name": "puts",
            "location": 2119,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_GAUSSType.__call__": {
            "name": "__call__",
            "location": 2122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Mapping[(str, FloatOrArray)]"
                ]
            }
        }
    },
    "pyrads-master/rads/typing.py": {},
    "pyrads-master/rads/utility.py": {
        "ensure_open": {
            "name": "ensure_open",
            "location": 35,
            "return": [
                "IO[Any]"
            ],
            "arguments": {
                "file": [
                    "PathLikeOrFile"
                ],
                "mode": [
                    "str"
                ],
                "buffering": [
                    "int"
                ],
                "encoding": [
                    "Optional[str]"
                ],
                "errors": [
                    "Optional[str]"
                ],
                "newline": [
                    "Optional[str]"
                ],
                "closefd": [
                    "bool"
                ],
                "closeio": [
                    "bool"
                ]
            }
        },
        "filestring": {
            "name": "filestring",
            "location": 105,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "file": [
                    "PathLikeOrFile"
                ]
            }
        },
        "isio": {
            "name": "isio",
            "location": 135,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "Any"
                ]
            }
        },
        "xor": {
            "name": "xor",
            "location": 161,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "bool"
                ],
                "b": [
                    "bool"
                ]
            }
        },
        "contains_sublist": {
            "name": "contains_sublist",
            "location": 186,
            "return": [
                "bool"
            ],
            "arguments": {
                "list_": [
                    "List[Any]"
                ],
                "sublist": [
                    "List[Any]"
                ]
            }
        },
        "merge_sublist": {
            "name": "merge_sublist",
            "location": 207,
            "return": [
                "List[Any]"
            ],
            "arguments": {
                "list_": [
                    "List[Any]"
                ],
                "sublist": [
                    "List[Any]"
                ]
            }
        },
        "delete_sublist": {
            "name": "delete_sublist",
            "location": 225,
            "return": [
                "List[Any]"
            ],
            "arguments": {
                "list_": [
                    "List[Any]"
                ],
                "sublist": [
                    "List[Any]"
                ]
            }
        },
        "fortran_float": {
            "name": "fortran_float",
            "location": 244,
            "return": [
                "float"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "datetime_to_timestamp": {
            "name": "datetime_to_timestamp",
            "location": 298,
            "return": [
                "float"
            ],
            "arguments": {
                "time": [
                    "datetime.datetime"
                ]
            }
        },
        "timestamp_to_datetime": {
            "name": "timestamp_to_datetime",
            "location": 314,
            "return": [
                "datetime.datetime"
            ],
            "arguments": {
                "seconds": [
                    "float"
                ]
            }
        },
        "_NoCloseIOWrapper.__exit__": {
            "name": "__exit__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_NoCloseIOWrapper.close": {
            "name": "close",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyrads-master/rads/__init__.py": {},
    "pyrads-master/rads/__version__.py": {},
    "pyrads-master/rads/config/ast.py": {
        "_get_or_init": {
            "name": "_get_or_init",
            "location": 68,
            "return": [
                "T"
            ],
            "arguments": {
                "environment": [
                    "Any"
                ],
                "attr": [
                    "str"
                ],
                "mapping": [
                    "Callable[([], T)]"
                ]
            }
        },
        "_suggest_field": {
            "name": "_suggest_field",
            "location": 74,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "dataclass": [
                    "Any"
                ],
                "attempt": [
                    "str"
                ]
            }
        },
        "_has": {
            "name": "_has",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "Any"
                ],
                "attr": [
                    "str"
                ]
            }
        },
        "_get": {
            "name": "_get",
            "location": 87,
            "return": [
                "Any"
            ],
            "arguments": {
                "obj": [
                    "Any"
                ],
                "attr": [
                    "str"
                ]
            }
        },
        "_set": {
            "name": "_set",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "Any"
                ],
                "attr": [
                    "str"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "_del": {
            "name": "_del",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "Any"
                ],
                "attr": [
                    "str"
                ]
            }
        },
        "replace": {
            "name": "replace",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "environment": [
                    "Any"
                ],
                "attr": [
                    "str"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "append": {
            "name": "append",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "environment": [
                    "MutableMapping[(str, Any)]"
                ],
                "attr": [
                    "str"
                ],
                "value": [
                    "Union[(str, List[Any], Expression)]"
                ]
            }
        },
        "delete": {
            "name": "delete",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "environment": [
                    "MutableMapping[(str, Any)]"
                ],
                "attr": [
                    "str"
                ],
                "value": [
                    "Union[(str, List[Any], Expression)]"
                ]
            }
        },
        "merge": {
            "name": "merge",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "environment": [
                    "MutableMapping[(str, Any)]"
                ],
                "attr": [
                    "str"
                ],
                "value": [
                    "Union[(str, List[Any], Expression)]"
                ]
            }
        },
        "edit_append": {
            "name": "edit_append",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "environment": [
                    "MutableMapping[(str, Any)]"
                ],
                "attr": [
                    "str"
                ],
                "string": [
                    "str"
                ]
            }
        },
        "Condition.__repr__": {
            "name": "__repr__",
            "location": 352,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Condition.test": {
            "name": "test",
            "location": 356,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "selectors": [
                    "Mapping[(str, Any)]"
                ]
            }
        },
        "TrueCondition.test": {
            "name": "test",
            "location": 373,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "selectors": [
                    "Mapping[(str, Any)]"
                ]
            }
        },
        "FalseCondition.test": {
            "name": "test",
            "location": 380,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "selectors": [
                    "Mapping[(str, Any)]"
                ]
            }
        },
        "SatelliteCondition.__init__": {
            "name": "__init__",
            "location": 394,
            "return": [],
            "arguments": {
                "self": [],
                "satellites": [
                    "Container[str]"
                ],
                "invert": [
                    "bool"
                ]
            }
        },
        "SatelliteCondition.__repr__": {
            "name": "__repr__",
            "location": 404,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SatelliteCondition.test": {
            "name": "test",
            "location": 410,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "selectors": [
                    "Mapping[(str, Any)]"
                ]
            }
        },
        "ASTEvaluationError.__init__": {
            "name": "__init__",
            "location": 442,
            "return": [],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "source": [
                    "Optional[Source]"
                ]
            }
        },
        "Statement.__init__": {
            "name": "__init__",
            "location": 466,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Statement.__repr__": {
            "name": "__repr__",
            "location": 473,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Statement.eval": {
            "name": "eval",
            "location": 477,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "Any"
                ],
                "selectors": [
                    "Mapping[(str, Any)]"
                ]
            }
        },
        "NullStatement.eval": {
            "name": "eval",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "Any"
                ],
                "selectors": [
                    "Mapping[(str, Any)]"
                ]
            }
        },
        "CompoundStatement.__init__": {
            "name": "__init__",
            "location": 507,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CompoundStatement.__getitem__": {
            "name": "__getitem__",
            "location": 525,
            "return": [
                "Union[(Statement, 'CompoundStatement')]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(int, slice)]"
                ]
            }
        },
        "CompoundStatement.__len__": {
            "name": "__len__",
            "location": 532,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompoundStatement.__repr__": {
            "name": "__repr__",
            "location": 535,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompoundStatement.eval": {
            "name": "eval",
            "location": 541,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "Any"
                ],
                "selectors": [
                    "Mapping[(str, Any)]"
                ]
            }
        },
        "If.__init__": {
            "name": "__init__",
            "location": 571,
            "return": [],
            "arguments": {
                "self": [],
                "condition": [
                    "Condition"
                ],
                "true_statement": [
                    "Statement"
                ],
                "false_statement": [
                    "Optional[Statement]"
                ]
            }
        },
        "If.__repr__": {
            "name": "__repr__",
            "location": 594,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "If.eval": {
            "name": "eval",
            "location": 603,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "Any"
                ],
                "selectors": [
                    "Mapping[(str, Any)]"
                ]
            }
        },
        "Assignment.__init__": {
            "name": "__init__",
            "location": 654,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "condition": [
                    "Optional[Condition]"
                ],
                "action": [
                    "Optional[ActionType]"
                ]
            }
        },
        "Assignment.__repr__": {
            "name": "__repr__",
            "location": 683,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Assignment.eval": {
            "name": "eval",
            "location": 693,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "Any"
                ],
                "selectors": [
                    "Mapping[(str, Any)]"
                ]
            }
        },
        "Alias.__init__": {
            "name": "__init__",
            "location": 750,
            "return": [],
            "arguments": {
                "self": [],
                "alias": [
                    "Any"
                ],
                "variables": [
                    "Sequence[str]"
                ],
                "condition": [
                    "Optional[Condition]"
                ],
                "action": [
                    "Optional[ActionType]"
                ]
            }
        },
        "Alias.__repr__": {
            "name": "__repr__",
            "location": 779,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alias.eval": {
            "name": "eval",
            "location": 790,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "Any"
                ],
                "selectors": [
                    "Mapping[(str, Any)]"
                ]
            }
        },
        "SatelliteID.__init__": {
            "name": "__init__",
            "location": 821,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ],
                "id3": [
                    "str"
                ],
                "names": [
                    "Optional[Collection[str]]"
                ]
            }
        },
        "SatelliteID.__repr__": {
            "name": "__repr__",
            "location": 847,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SatelliteID.eval": {
            "name": "eval",
            "location": 853,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "Any"
                ],
                "selectors": [
                    "Mapping[(str, Any)]"
                ]
            }
        },
        "Satellites.__init__": {
            "name": "__init__",
            "location": 876,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Satellites.__getitem__": {
            "name": "__getitem__",
            "location": 888,
            "return": [
                "SatelliteID"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Satellites.__iter__": {
            "name": "__iter__",
            "location": 891,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Satellites.__len__": {
            "name": "__len__",
            "location": 894,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Satellites.__repr__": {
            "name": "__repr__",
            "location": 897,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Satellites.eval": {
            "name": "eval",
            "location": 903,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "Any"
                ],
                "selectors": [
                    "Mapping[(str, Any)]"
                ]
            }
        },
        "Block.__init__": {
            "name": "__init__",
            "location": 932,
            "return": [],
            "arguments": {
                "self": [],
                "inner_statement": [
                    "Statement"
                ],
                "condition": [
                    "Optional[Condition]"
                ]
            }
        },
        "Block.__repr__": {
            "name": "__repr__",
            "location": 953,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Block._init_builder": {
            "name": "_init_builder",
            "location": 960,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Block._build": {
            "name": "_build",
            "location": 963,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "builder": [
                    "Any"
                ]
            }
        },
        "Block._update_or_store": {
            "name": "_update_or_store",
            "location": 986,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "Any"
                ],
                "builder": [
                    "Any"
                ]
            }
        },
        "Block.eval": {
            "name": "eval",
            "location": 989,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "Any"
                ],
                "selectors": [
                    "Mapping[(str, Any)]"
                ]
            }
        },
        "Phase._init_builder": {
            "name": "_init_builder",
            "location": 1009,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Phase._update_or_store": {
            "name": "_update_or_store",
            "location": 1012,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "Any"
                ],
                "builder": [
                    "Any"
                ]
            }
        },
        "Variable._init_builder": {
            "name": "_init_builder",
            "location": 1019,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable._update_or_store": {
            "name": "_update_or_store",
            "location": 1022,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "Any"
                ],
                "builder": [
                    "Any"
                ]
            }
        }
    },
    "pyrads-master/rads/config/builders.py": {},
    "pyrads-master/rads/config/grammar.py": {
        "alias": {
            "name": "alias",
            "location": 74,
            "return": [
                "Parser"
            ],
            "arguments": {}
        },
        "ignore": {
            "name": "ignore",
            "location": 102,
            "return": [
                "Parser"
            ],
            "arguments": {
                "tag_": [
                    "Optional[str]"
                ]
            }
        },
        "value": {
            "name": "value",
            "location": 123,
            "return": [
                "Parser"
            ],
            "arguments": {
                "parser": [
                    "Callable[([str, Mapping[(str, str)]], Any)]"
                ],
                "tag_": [
                    "Optional[str]"
                ],
                "var": [
                    "Optional[str]"
                ]
            }
        },
        "if_statement": {
            "name": "if_statement",
            "location": 173,
            "return": [
                "Parser"
            ],
            "arguments": {
                "internal": [
                    "Parser"
                ]
            }
        },
        "_elseif_statement": {
            "name": "_elseif_statement",
            "location": 235,
            "return": [
                "Parser"
            ],
            "arguments": {
                "internal": [
                    "Parser"
                ]
            }
        },
        "_else_statement": {
            "name": "_else_statement",
            "location": 265,
            "return": [
                "Parser"
            ],
            "arguments": {
                "internal": [
                    "Parser"
                ]
            }
        },
        "satellites": {
            "name": "satellites",
            "location": 283,
            "return": [
                "Parser"
            ],
            "arguments": {}
        },
        "satellite_ids": {
            "name": "satellite_ids",
            "location": 321,
            "return": [
                "Parser"
            ],
            "arguments": {}
        },
        "subcycles": {
            "name": "subcycles",
            "location": 358,
            "return": [
                "Parser"
            ],
            "arguments": {}
        },
        "block": {
            "name": "block",
            "location": 399,
            "return": [
                "Parser"
            ],
            "arguments": {
                "parser": [
                    "Parser"
                ],
                "error_msg": [
                    "str"
                ]
            }
        },
        "phase": {
            "name": "phase",
            "location": 436,
            "return": [
                "Parser"
            ],
            "arguments": {}
        },
        "variable": {
            "name": "variable",
            "location": 456,
            "return": [
                "Parser"
            ],
            "arguments": {}
        },
        "variable_override": {
            "name": "variable_override",
            "location": 488,
            "return": [
                "Parser"
            ],
            "arguments": {
                "parser": [
                    "Callable[([str, Mapping[(str, str)]], Any)]"
                ],
                "tag_": [
                    "str"
                ],
                "field": [
                    "Optional[str]"
                ]
            }
        },
        "variable_overrides": {
            "name": "variable_overrides",
            "location": 540,
            "return": [
                "Parser"
            ],
            "arguments": {}
        },
        "satellite_grammar": {
            "name": "satellite_grammar",
            "location": 575,
            "return": [
                "Parser"
            ],
            "arguments": {}
        },
        "pre_config_grammar": {
            "name": "pre_config_grammar",
            "location": 612,
            "return": [
                "Parser"
            ],
            "arguments": {}
        },
        "dataroot_grammar": {
            "name": "dataroot_grammar",
            "location": 632,
            "return": [
                "Parser"
            ],
            "arguments": {}
        },
        "alias.process": {
            "name": "process",
            "location": 86,
            "return": [
                "Alias"
            ],
            "arguments": {
                "element": [
                    "Element"
                ]
            }
        },
        "ignore.process": {
            "name": "process",
            "location": 115,
            "return": [
                "NullStatement"
            ],
            "arguments": {
                "element": [
                    "Element"
                ]
            }
        },
        "value.process": {
            "name": "process",
            "location": 154,
            "return": [
                "Assignment"
            ],
            "arguments": {
                "element": [
                    "Element"
                ]
            }
        },
        "if_statement.process": {
            "name": "process",
            "location": 217,
            "return": [
                "If"
            ],
            "arguments": {
                "statements": [
                    "Tuple[(Element, Statement)]"
                ]
            }
        },
        "_elseif_statement.process": {
            "name": "process",
            "location": 251,
            "return": [
                "If"
            ],
            "arguments": {
                "statements": [
                    "Iterable[Any]"
                ]
            }
        },
        "_else_statement.process": {
            "name": "process",
            "location": 277,
            "return": [
                "Any"
            ],
            "arguments": {
                "element": [
                    "Element"
                ]
            }
        },
        "satellites.process": {
            "name": "process",
            "location": 297,
            "return": [
                "Satellites"
            ],
            "arguments": {
                "element": [
                    "Element"
                ]
            }
        },
        "satellite_ids.process": {
            "name": "process",
            "location": 335,
            "return": [
                "Assignment"
            ],
            "arguments": {
                "element": [
                    "Element"
                ]
            }
        },
        "subcycles.process": {
            "name": "process",
            "location": 371,
            "return": [
                "Assignment"
            ],
            "arguments": {
                "element": [
                    "Element"
                ]
            }
        },
        "block.process": {
            "name": "process",
            "location": 423,
            "return": [
                "Statement"
            ],
            "arguments": {
                "statements": [
                    "Sequence[Statement]"
                ]
            }
        },
        "block.recursive_parser": {
            "name": "recursive_parser",
            "location": 429,
            "return": [
                "Parser"
            ],
            "arguments": {}
        },
        "variable_override.process": {
            "name": "process",
            "location": 518,
            "return": [
                "Variable"
            ],
            "arguments": {
                "element": [
                    "Element"
                ]
            }
        }
    },
    "pyrads-master/rads/config/loader.py": {
        "_to_config_error": {
            "name": "_to_config_error",
            "location": 40,
            "return": [
                "ConfigError"
            ],
            "arguments": {
                "exc": [
                    "Exception"
                ]
            }
        },
        "config_files": {
            "name": "config_files",
            "location": 61,
            "return": [
                "Iterable[Path]"
            ],
            "arguments": {
                "dataroot": [
                    "Optional[PathLike]"
                ],
                "rads": [
                    "bool"
                ],
                "pyrads": [
                    "bool"
                ]
            }
        },
        "get_dataroot": {
            "name": "get_dataroot",
            "location": 131,
            "return": [
                "Optional[Path]"
            ],
            "arguments": {
                "dataroot": [
                    "Optional[PathLike]"
                ]
            }
        },
        "_filter_files": {
            "name": "_filter_files",
            "location": 206,
            "return": [
                "Iterable[PathOrFile]"
            ],
            "arguments": {
                "files": [
                    "Iterable[PathLikeOrFile]"
                ]
            }
        },
        "load_config": {
            "name": "load_config",
            "location": 216,
            "return": [
                "Config"
            ],
            "arguments": {}
        },
        "xml_loader": {
            "name": "xml_loader",
            "location": 281,
            "return": [
                "Callable[([Callable[(..., T)]], Callable[(..., T)])]"
            ],
            "arguments": {
                "grammar": [
                    "Parser"
                ]
            }
        },
        "_load_ast": {
            "name": "_load_ast",
            "location": 317,
            "return": [
                "Statement"
            ],
            "arguments": {
                "source": [
                    "PathLikeOrFile"
                ],
                "grammar": [
                    "Parser"
                ]
            }
        },
        "_load_dataroot": {
            "name": "_load_dataroot",
            "location": 342,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "ast": [
                    "Statement"
                ],
                "dataroot": [
                    "Optional[str]"
                ]
            }
        },
        "_load_preconfig": {
            "name": "_load_preconfig",
            "location": 348,
            "return": [
                "PreConfig"
            ],
            "arguments": {}
        },
        "_load_preconfig2": {
            "name": "_load_preconfig2",
            "location": 392,
            "return": [
                "T"
            ],
            "arguments": {
                "ast": [
                    "Statement"
                ],
                "builder": [
                    "T"
                ]
            }
        },
        "_load_satellites": {
            "name": "_load_satellites",
            "location": 398,
            "return": [
                "Mapping[(str, T)]"
            ],
            "arguments": {
                "ast": [
                    "Statement"
                ],
                "builders": [
                    "Mapping[(str, T)]"
                ]
            }
        },
        "xml_loader._decorator": {
            "name": "_decorator",
            "location": 304,
            "return": [
                "Callable[(..., T)]"
            ],
            "arguments": {
                "func": [
                    "Callable[(..., T)]"
                ]
            }
        },
        "xml_loader._decorator._loader": {
            "name": "_loader",
            "location": 306,
            "return": [
                "T"
            ],
            "arguments": {
                "source": [
                    "PathLikeOrFile"
                ]
            }
        }
    },
    "pyrads-master/rads/config/text_parsers.py": {
        "lift": {
            "name": "lift",
            "location": 104,
            "return": [
                "Callable[([str, Mapping[(str, str)]], _T)]"
            ],
            "arguments": {
                "string_parser": [
                    "'Union[Callable[[str], _T], Type[_SupportsFromString]]'"
                ]
            }
        },
        "list_of": {
            "name": "list_of",
            "location": 145,
            "return": [
                "Callable[([str, Mapping[(str, str)]], List[_T])]"
            ],
            "arguments": {
                "parser": [
                    "Callable[([str, Mapping[(str, str)]], _T)]"
                ]
            }
        },
        "range_of": {
            "name": "range_of",
            "location": 177,
            "return": [
                "Callable[([str, Mapping[(str, str)]], Range[N])]"
            ],
            "arguments": {
                "parser": [
                    "Callable[([str, Mapping[(str, str)]], N)]"
                ]
            }
        },
        "one_of": {
            "name": "one_of",
            "location": 226,
            "return": [
                "Callable[([str, Mapping[(str, str)]], Any)]"
            ],
            "arguments": {
                "parsers": [
                    "Iterable[Callable[([str, Mapping[(str, str)]], Any)]]"
                ]
            }
        },
        "compress": {
            "name": "compress",
            "location": 288,
            "return": [
                "Compress"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "_": [
                    "Mapping[(str, str)]"
                ]
            }
        },
        "cycles": {
            "name": "cycles",
            "location": 339,
            "return": [
                "Cycles"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "_": [
                    "Mapping[(str, str)]"
                ]
            }
        },
        "data": {
            "name": "data",
            "location": 373,
            "return": [
                "Any"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "attr": [
                    "Mapping[(str, str)]"
                ]
            }
        },
        "nop": {
            "name": "nop",
            "location": 429,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "_": [
                    "Mapping[(str, str)]"
                ]
            }
        },
        "ref_pass": {
            "name": "ref_pass",
            "location": 447,
            "return": [
                "ReferencePass"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "_": [
                    "Mapping[(str, str)]"
                ]
            }
        },
        "repeat": {
            "name": "repeat",
            "location": 503,
            "return": [
                "Repeat"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "_": [
                    "Mapping[(str, str)]"
                ]
            }
        },
        "time": {
            "name": "time",
            "location": 548,
            "return": [
                "datetime"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "_": [
                    "Mapping[(str, str)]"
                ]
            }
        },
        "unit": {
            "name": "unit",
            "location": 575,
            "return": [
                "Unit"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "_": [
                    "Mapping[(str, str)]"
                ]
            }
        },
        "_constant": {
            "name": "_constant",
            "location": 611,
            "return": [
                "Constant"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "attr": [
                    "Mapping[(str, str)]"
                ]
            }
        },
        "_flags": {
            "name": "_flags",
            "location": 627,
            "return": [
                "Flags"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "attr": [
                    "Mapping[(str, str)]"
                ]
            }
        },
        "_grid": {
            "name": "_grid",
            "location": 654,
            "return": [
                "Grid"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "attr": [
                    "Mapping[(str, str)]"
                ]
            }
        },
        "_invalid_data": {
            "name": "_invalid_data",
            "location": 674,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "_": [
                    "Mapping[(str, str)]"
                ]
            }
        },
        "_math": {
            "name": "_math",
            "location": 681,
            "return": [
                "Expression"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "attr": [
                    "Mapping[(str, str)]"
                ]
            }
        },
        "_netcdf": {
            "name": "_netcdf",
            "location": 707,
            "return": [
                "Union[(NetCDFVariable, NetCDFAttribute)]"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "attr": [
                    "Mapping[(str, str)]"
                ]
            }
        },
        "_rads_type": {
            "name": "_rads_type",
            "location": 726,
            "return": [
                "type"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "_time": {
            "name": "_time",
            "location": 740,
            "return": [
                "datetime"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "lift._parser": {
            "name": "_parser",
            "location": 133,
            "return": [
                "_T"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "_": [
                    "Mapping[(str, str)]"
                ]
            }
        },
        "list_of._parser": {
            "name": "_parser",
            "location": 165,
            "return": [
                "List[_T]"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "attr": [
                    "Mapping[(str, str)]"
                ]
            }
        },
        "list_of._terminal_parser": {
            "name": "_terminal_parser",
            "location": 168,
            "return": [
                "List[_T]"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "attr": [
                    "Mapping[(str, str)]"
                ]
            }
        },
        "range_of._parser": {
            "name": "_parser",
            "location": 203,
            "return": [
                "Range[N]"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "attr": [
                    "Mapping[(str, str)]"
                ]
            }
        },
        "range_of._terminal_parser": {
            "name": "_terminal_parser",
            "location": 217,
            "return": [
                "Range[N]"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "attr": [
                    "Mapping[(str, str)]"
                ]
            }
        },
        "one_of._parser": {
            "name": "_parser",
            "location": 256,
            "return": [
                "Any"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "attr": [
                    "Mapping[(str, str)]"
                ]
            }
        },
        "_SupportsFromString.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ]
            }
        }
    },
    "pyrads-master/rads/config/tree.py": {
        "ReferencePass.__str__": {
            "name": "__str__",
            "location": 113,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Repeat.__str__": {
            "name": "__str__",
            "location": 143,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubCycles.__str__": {
            "name": "__str__",
            "location": 162,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Phase.__lt__": {
            "name": "__lt__",
            "location": 207,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Phase.__gt__": {
            "name": "__gt__",
            "location": 212,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Phase.__str__": {
            "name": "__str__",
            "location": 217,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Compress.__str__": {
            "name": "__str__",
            "location": 260,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Flags.extract": {
            "name": "extract",
            "location": 281,
            "return": [
                "FloatOrArray"
            ],
            "arguments": {
                "self": [],
                "flags": [
                    "FloatOrArray"
                ]
            }
        },
        "MultiBitFlag.__post_init__": {
            "name": "__post_init__",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiBitFlag.extract": {
            "name": "extract",
            "location": 329,
            "return": [
                "IntOrArray"
            ],
            "arguments": {
                "self": [],
                "flags": [
                    "IntOrArray"
                ]
            }
        },
        "MultiBitFlag.__str__": {
            "name": "__str__",
            "location": 354,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingleBitFlag.__post_init__": {
            "name": "__post_init__",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingleBitFlag.extract": {
            "name": "extract",
            "location": 382,
            "return": [
                "IntOrArray"
            ],
            "arguments": {
                "self": [],
                "flags": [
                    "IntOrArray"
                ]
            }
        },
        "SingleBitFlag.__str__": {
            "name": "__str__",
            "location": 394,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SurfaceType.extract": {
            "name": "extract",
            "location": 415,
            "return": [
                "IntOrArray"
            ],
            "arguments": {
                "self": [],
                "flags": [
                    "IntOrArray"
                ]
            }
        },
        "SurfaceType.__str__": {
            "name": "__str__",
            "location": 439,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetCDFAttribute.__str__": {
            "name": "__str__",
            "location": 492,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetCDFVariable.__str__": {
            "name": "__str__",
            "location": 519,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable.__str__": {
            "name": "__str__",
            "location": 617,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Satellite.__str__": {
            "name": "__str__",
            "location": 705,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Satellite.full_string": {
            "name": "full_string",
            "location": 726,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 772,
            "return": [],
            "arguments": {
                "self": [],
                "pre_config": [
                    "PreConfig"
                ],
                "satellites": [
                    "Mapping[(str, Satellite)]"
                ]
            }
        },
        "Config.__str__": {
            "name": "__str__",
            "location": 785,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.full_string": {
            "name": "full_string",
            "location": 792,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyrads-master/rads/config/utility.py": {
        "error_at": {
            "name": "error_at",
            "location": 35,
            "return": [
                "Callable[([str], TerminalXMLParseError)]"
            ],
            "arguments": {
                "element": [
                    "Element"
                ]
            }
        },
        "continue_from": {
            "name": "continue_from",
            "location": 53,
            "return": [
                "Callable[([str], XMLParseError)]"
            ],
            "arguments": {
                "element": [
                    "Element"
                ]
            }
        },
        "source_from_element": {
            "name": "source_from_element",
            "location": 71,
            "return": [
                "Source"
            ],
            "arguments": {
                "element": [
                    "Element"
                ]
            }
        },
        "parse_action": {
            "name": "parse_action",
            "location": 83,
            "return": [
                "ActionType"
            ],
            "arguments": {
                "element": [
                    "Element"
                ]
            }
        },
        "parse_condition": {
            "name": "parse_condition",
            "location": 133,
            "return": [
                "Condition"
            ],
            "arguments": {
                "attr": [
                    "Mapping[(str, str)]"
                ]
            }
        },
        "named_block_processor": {
            "name": "named_block_processor",
            "location": 161,
            "return": [
                "Callable[([Element], Block)]"
            ],
            "arguments": {
                "parser": [
                    "Parser"
                ],
                "node": [
                    "Type[Block]"
                ]
            }
        },
        "error_at.error": {
            "name": "error",
            "location": 47,
            "return": [
                "TerminalXMLParseError"
            ],
            "arguments": {
                "message": [
                    "str"
                ]
            }
        },
        "continue_from.error": {
            "name": "error",
            "location": 65,
            "return": [
                "XMLParseError"
            ],
            "arguments": {
                "message": [
                    "str"
                ]
            }
        },
        "named_block_processor.process": {
            "name": "process",
            "location": 184,
            "return": [
                "Block"
            ],
            "arguments": {
                "element": [
                    "Element"
                ]
            }
        }
    },
    "pyrads-master/rads/config/xml_parsers.py": {
        "next_element": {
            "name": "next_element",
            "location": 198,
            "return": [
                "Element"
            ],
            "arguments": {
                "pos": [
                    "Element"
                ]
            }
        },
        "first_child": {
            "name": "first_child",
            "location": 217,
            "return": [
                "Element"
            ],
            "arguments": {
                "pos": [
                    "Element"
                ]
            }
        },
        "lazy": {
            "name": "lazy",
            "location": 693,
            "return": [
                "Parser"
            ],
            "arguments": {
                "parser_func": [
                    "Callable[([], Parser)]"
                ]
            }
        },
        "at": {
            "name": "at",
            "location": 706,
            "return": [
                "Parser"
            ],
            "arguments": {
                "parser": [
                    "Parser"
                ]
            }
        },
        "not_at": {
            "name": "not_at",
            "location": 719,
            "return": [
                "Parser"
            ],
            "arguments": {
                "parser": [
                    "Parser"
                ]
            }
        },
        "opt": {
            "name": "opt",
            "location": 732,
            "return": [
                "Parser"
            ],
            "arguments": {
                "parser": [
                    "Parser"
                ]
            }
        },
        "plus": {
            "name": "plus",
            "location": 747,
            "return": [
                "Parser"
            ],
            "arguments": {
                "parser": [
                    "Parser"
                ]
            }
        },
        "seq": {
            "name": "seq",
            "location": 760,
            "return": [
                "Parser"
            ],
            "arguments": {}
        },
        "sor": {
            "name": "sor",
            "location": 773,
            "return": [
                "Parser"
            ],
            "arguments": {}
        },
        "star": {
            "name": "star",
            "location": 788,
            "return": [
                "Parser"
            ],
            "arguments": {
                "parser": [
                    "Parser"
                ]
            }
        },
        "must": {
            "name": "must",
            "location": 801,
            "return": [
                "Parser"
            ],
            "arguments": {
                "parser": [
                    "Parser"
                ]
            }
        },
        "rep": {
            "name": "rep",
            "location": 822,
            "return": [
                "Parser"
            ],
            "arguments": {
                "parser": [
                    "Parser"
                ],
                "times": [
                    "int"
                ]
            }
        },
        "until": {
            "name": "until",
            "location": 839,
            "return": [
                "Parser"
            ],
            "arguments": {
                "parser": [
                    "Parser"
                ]
            }
        },
        "failure": {
            "name": "failure",
            "location": 868,
            "return": [
                "Parser"
            ],
            "arguments": {}
        },
        "success": {
            "name": "success",
            "location": 877,
            "return": [
                "Parser"
            ],
            "arguments": {}
        },
        "start": {
            "name": "start",
            "location": 886,
            "return": [
                "Parser"
            ],
            "arguments": {}
        },
        "end": {
            "name": "end",
            "location": 896,
            "return": [
                "Parser"
            ],
            "arguments": {}
        },
        "any": {
            "name": "any",
            "location": 905,
            "return": [
                "Parser"
            ],
            "arguments": {}
        },
        "tag": {
            "name": "tag",
            "location": 914,
            "return": [
                "Parser"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "TerminalXMLParseError.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "file": [
                    "Optional[str]"
                ],
                "line": [
                    "Optional[int]"
                ],
                "message": [
                    "Optional[str]"
                ]
            }
        },
        "TerminalXMLParseError.__str__": {
            "name": "__str__",
            "location": 156,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "XMLParseError.terminal": {
            "name": "terminal",
            "location": 181,
            "return": [
                "TerminalXMLParseError"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Optional[str]"
                ]
            }
        },
        "Parser.__call__": {
            "name": "__call__",
            "location": 229,
            "return": [
                "Tuple[(Any, Element)]"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "Element"
                ]
            }
        },
        "Parser.__add__": {
            "name": "__add__",
            "location": 256,
            "return": [
                "'Sequence'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'Parser'"
                ]
            }
        },
        "Parser.__or__": {
            "name": "__or__",
            "location": 272,
            "return": [
                "'Alternate'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'Parser'"
                ]
            }
        },
        "Parser.__xor__": {
            "name": "__xor__",
            "location": 288,
            "return": [
                "'Apply'"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable[([Any], Any)]"
                ]
            }
        },
        "Parser.__invert__": {
            "name": "__invert__",
            "location": 304,
            "return": [
                "'Not'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.__lshift__": {
            "name": "__lshift__",
            "location": 317,
            "return": [
                "'Must'"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "Apply.__init__": {
            "name": "__init__",
            "location": 338,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [
                    "Parser"
                ],
                "func": [
                    "Callable[([Any], Any)]"
                ],
                "catch": [
                    "Optional[Collection[type]]"
                ]
            }
        },
        "Apply.__call__": {
            "name": "__call__",
            "location": 369,
            "return": [
                "Tuple[(Any, Element)]"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "Element"
                ]
            }
        },
        "Lazy.__init__": {
            "name": "__init__",
            "location": 390,
            "return": [],
            "arguments": {
                "self": [],
                "parser_func": [
                    "Callable[([], Parser)]"
                ]
            }
        },
        "Lazy.__call__": {
            "name": "__call__",
            "location": 399,
            "return": [
                "Tuple[(Any, Element)]"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "Element"
                ]
            }
        },
        "Must.__init__": {
            "name": "__init__",
            "location": 408,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [
                    "Parser"
                ],
                "message": [
                    "Optional[str]"
                ]
            }
        },
        "Must.__call__": {
            "name": "__call__",
            "location": 419,
            "return": [
                "Tuple[(Any, Element)]"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "Element"
                ]
            }
        },
        "At.__init__": {
            "name": "__init__",
            "location": 429,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [
                    "Parser"
                ]
            }
        },
        "At.__call__": {
            "name": "__call__",
            "location": 436,
            "return": [
                "Tuple[(Any, Element)]"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "Element"
                ]
            }
        },
        "Not.__init__": {
            "name": "__init__",
            "location": 444,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [
                    "Parser"
                ]
            }
        },
        "Not.__call__": {
            "name": "__call__",
            "location": 451,
            "return": [
                "Tuple[(None, Element)]"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "Element"
                ]
            }
        },
        "Repeat.__init__": {
            "name": "__init__",
            "location": 462,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [
                    "Parser"
                ]
            }
        },
        "Repeat.__call__": {
            "name": "__call__",
            "location": 469,
            "return": [
                "Tuple[(List[Any], Element)]"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "Element"
                ]
            }
        },
        "_MultiParser.__init__": {
            "name": "__init__",
            "location": 483,
            "return": [],
            "arguments": {
                "self": [],
                "subtype": [
                    "type"
                ]
            }
        },
        "_MultiParser._append": {
            "name": "_append",
            "location": 500,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Parser"
                ]
            }
        },
        "Sequence.__init__": {
            "name": "__init__",
            "location": 515,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sequence.__call__": {
            "name": "__call__",
            "location": 522,
            "return": [
                "Tuple[(List[Any], Element)]"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "Element"
                ]
            }
        },
        "Sequence.__add__": {
            "name": "__add__",
            "location": 529,
            "return": [
                "'Sequence'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Parser"
                ]
            }
        },
        "Sequence.__iadd__": {
            "name": "__iadd__",
            "location": 547,
            "return": [
                "'Sequence'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Parser"
                ]
            }
        },
        "Alternate.__init__": {
            "name": "__init__",
            "location": 574,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Alternate.__call__": {
            "name": "__call__",
            "location": 581,
            "return": [
                "Tuple[(Any, Element)]"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "Element"
                ]
            }
        },
        "Alternate.__or__": {
            "name": "__or__",
            "location": 589,
            "return": [
                "'Alternate'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Parser"
                ]
            }
        },
        "Alternate.__ior__": {
            "name": "__ior__",
            "location": 608,
            "return": [
                "'Alternate'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Parser"
                ]
            }
        },
        "Success.__call__": {
            "name": "__call__",
            "location": 630,
            "return": [
                "Tuple[(None, Element)]"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "Element"
                ]
            }
        },
        "Failure.__call__": {
            "name": "__call__",
            "location": 637,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "Element"
                ]
            }
        },
        "Start.__call__": {
            "name": "__call__",
            "location": 644,
            "return": [
                "Tuple[(None, Element)]"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "Element"
                ]
            }
        },
        "End.__call__": {
            "name": "__call__",
            "location": 657,
            "return": [
                "Tuple[(None, Element)]"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "Element"
                ]
            }
        },
        "AnyElement.__call__": {
            "name": "__call__",
            "location": 673,
            "return": [
                "Tuple[(Element, Element)]"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "Element"
                ]
            }
        },
        "Tag.__init__": {
            "name": "__init__",
            "location": 680,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Tag.__call__": {
            "name": "__call__",
            "location": 687,
            "return": [
                "Tuple[(Element, Element)]"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "Element"
                ]
            }
        },
        "until.process": {
            "name": "process",
            "location": 853,
            "return": [
                "Element"
            ],
            "arguments": {
                "elements": [
                    "typing.Sequence[Element]"
                ]
            }
        },
        "until.process2": {
            "name": "process2",
            "location": 856,
            "return": [
                "typing.Sequence[Element]"
            ],
            "arguments": {
                "elements": [
                    "Tuple[(MutableSequence[Element], Element)]"
                ]
            }
        }
    },
    "pyrads-master/rads/config/__init__.py": {},
    "pyrads-master/rads/xml/base.py": {
        "Element.__repr__": {
            "name": "__repr__",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.__iter__": {
            "name": "__iter__",
            "location": 31,
            "return": [
                "Iterator['Element']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.__len__": {
            "name": "__len__",
            "location": 40,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.dumps": {
            "name": "dumps",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.next": {
            "name": "next",
            "location": 107,
            "return": [
                "'Element'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.prev": {
            "name": "prev",
            "location": 119,
            "return": [
                "'Element'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.up": {
            "name": "up",
            "location": 130,
            "return": [
                "'Element'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.down": {
            "name": "down",
            "location": 141,
            "return": [
                "'Element'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.file": {
            "name": "file",
            "location": 152,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.opening_line": {
            "name": "opening_line",
            "location": 161,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.num_lines": {
            "name": "num_lines",
            "location": 170,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.closing_line": {
            "name": "closing_line",
            "location": 179,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.tag": {
            "name": "tag",
            "location": 189,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.text": {
            "name": "text",
            "location": 194,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.attributes": {
            "name": "attributes",
            "location": 199,
            "return": [
                "Mapping[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyrads-master/rads/xml/etree.py": {
        "error_with_file": {
            "name": "error_with_file",
            "location": 123,
            "return": [
                "ParseError"
            ],
            "arguments": {
                "error": [
                    "ParseError"
                ],
                "file": [
                    "str"
                ]
            }
        },
        "Element.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "element": [
                    "etree.Element"
                ]
            }
        },
        "Element.__len__": {
            "name": "__len__",
            "location": 65,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.__iter__": {
            "name": "__iter__",
            "location": 68,
            "return": [
                "Iterator['Element']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.next": {
            "name": "next",
            "location": 72,
            "return": [
                "'Element'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.prev": {
            "name": "prev",
            "location": 83,
            "return": [
                "'Element'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.up": {
            "name": "up",
            "location": 94,
            "return": [
                "'Element'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.down": {
            "name": "down",
            "location": 99,
            "return": [
                "'Element'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.file": {
            "name": "file",
            "location": 107,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.tag": {
            "name": "tag",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.text": {
            "name": "text",
            "location": 115,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.attributes": {
            "name": "attributes",
            "location": 119,
            "return": [
                "Mapping[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyrads-master/rads/xml/lxml.py": {
        "parse": {
            "name": "parse",
            "location": 129,
            "return": [
                "etree._ElementTree"
            ],
            "arguments": {
                "source": [
                    "_FileOrFilename"
                ],
                "parser": [
                    "Optional[XMLParser]"
                ]
            }
        },
        "fromstring": {
            "name": "fromstring",
            "location": 151,
            "return": [
                "etree._Element"
            ],
            "arguments": {
                "text": [
                    "_ParserInputType"
                ],
                "parser": [
                    "Optional[XMLParser]"
                ]
            }
        },
        "fromstringlist": {
            "name": "fromstringlist",
            "location": 175,
            "return": [
                "etree._Element"
            ],
            "arguments": {
                "sequence": [
                    "Sequence[_ParserInputType]"
                ],
                "parser": [
                    "Optional[XMLParser]"
                ]
            }
        },
        "error_with_file": {
            "name": "error_with_file",
            "location": 194,
            "return": [
                "ParseError"
            ],
            "arguments": {
                "error": [
                    "ParseError"
                ],
                "file": [
                    "str"
                ]
            }
        },
        "Element.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "element": [
                    "etree._Element"
                ]
            }
        },
        "Element.__len__": {
            "name": "__len__",
            "location": 62,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.__iter__": {
            "name": "__iter__",
            "location": 65,
            "return": [
                "Iterator['Element']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.next": {
            "name": "next",
            "location": 69,
            "return": [
                "'Element'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.prev": {
            "name": "prev",
            "location": 75,
            "return": [
                "'Element'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.up": {
            "name": "up",
            "location": 81,
            "return": [
                "'Element'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.down": {
            "name": "down",
            "location": 87,
            "return": [
                "'Element'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.file": {
            "name": "file",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.opening_line": {
            "name": "opening_line",
            "location": 98,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.num_lines": {
            "name": "num_lines",
            "location": 102,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.closing_line": {
            "name": "closing_line",
            "location": 106,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.tag": {
            "name": "tag",
            "location": 110,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.text": {
            "name": "text",
            "location": 114,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.attributes": {
            "name": "attributes",
            "location": 118,
            "return": [
                "Mapping[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyrads-master/rads/xml/utility.py": {
        "_fix_source": {
            "name": "_fix_source",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "source": [
                    "PathLikeOrFile"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 38,
            "return": [
                "xml.Element"
            ],
            "arguments": {
                "source": [
                    "PathLikeOrFile"
                ],
                "parser": [
                    "Optional[xml.XMLParser]"
                ],
                "fixer": [
                    "Optional[Callable[([str], str)]]"
                ]
            }
        },
        "fromstring": {
            "name": "fromstring",
            "location": 72,
            "return": [
                "xml.Element"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "fromstringlist": {
            "name": "fromstringlist",
            "location": 107,
            "return": [
                "xml.Element"
            ],
            "arguments": {
                "sequence": [
                    "Sequence[str]"
                ],
                "parser": [
                    "Optional[xml.XMLParser]"
                ],
                "fixer": [
                    "Optional[Callable[([str], str)]]"
                ],
                "file": [
                    "Optional[str]"
                ]
            }
        },
        "rads_fixer": {
            "name": "rads_fixer",
            "location": 142,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "rootless_fixer": {
            "name": "rootless_fixer",
            "location": 170,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "preserve_empty": [
                    "bool"
                ]
            }
        },
        "is_empty": {
            "name": "is_empty",
            "location": 207,
            "return": [
                "bool"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "strip_comments": {
            "name": "strip_comments",
            "location": 225,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "strip_processing_instructions": {
            "name": "strip_processing_instructions",
            "location": 243,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "strip_blanklines": {
            "name": "strip_blanklines",
            "location": 260,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "rootless_fixer.is_prolog": {
            "name": "is_prolog",
            "location": 198,
            "return": [
                "bool"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "pyrads-master/rads/xml/__init__.py": {},
    "pyrads-master/tests/conftest.py": {},
    "pyrads-master/tests/test_datetime64util.py": {
        "test_year": {
            "name": "test_year",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_month": {
            "name": "test_month",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "test_day": {
            "name": "test_day",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "test_hour": {
            "name": "test_hour",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "test_minute": {
            "name": "test_minute",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "test_second": {
            "name": "test_second",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_microsecond": {
            "name": "test_microsecond",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "test_ymdhmsus": {
            "name": "test_ymdhmsus",
            "location": 77,
            "return": [],
            "arguments": {}
        }
    },
    "pyrads-master/tests/test_integration.py": {
        "test_load_config": {
            "name": "test_load_config",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "pyrads-master/tests/test_logging.py": {
        "log_and_read": {
            "name": "log_and_read",
            "location": 4,
            "return": [],
            "arguments": {
                "level": [],
                "tmp_path": []
            }
        },
        "test_logging_to_file_at_level_debug": {
            "name": "test_logging_to_file_at_level_debug",
            "location": 15,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_logging_to_file_at_level_info": {
            "name": "test_logging_to_file_at_level_info",
            "location": 25,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_logging_to_file_at_level_warning": {
            "name": "test_logging_to_file_at_level_warning",
            "location": 34,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_logging_to_file_at_level_error": {
            "name": "test_logging_to_file_at_level_error",
            "location": 42,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_logging_to_file_at_level_critical": {
            "name": "test_logging_to_file_at_level_critical",
            "location": 49,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        }
    },
    "pyrads-master/tests/test_rpn.py": {
        "contains_array": {
            "name": "contains_array",
            "location": 238,
            "return": [
                "bool"
            ],
            "arguments": {
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ]
            }
        },
        "contains_nan": {
            "name": "contains_nan",
            "location": 245,
            "return": [
                "bool"
            ],
            "arguments": {
                "stack": [
                    "MutableSequence[FloatOrArray]"
                ]
            }
        },
        "assert_token": {
            "name": "assert_token",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "operator": [
                    "Token"
                ],
                "pre_stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "post_stack": [
                    "MutableSequence[FloatOrArray]"
                ],
                "environment": [
                    "Optional[Mapping[(str, FloatOrArray)]]"
                ]
            }
        },
        "test_token_keywords": {
            "name": "test_token_keywords",
            "location": 2732,
            "return": [],
            "arguments": {}
        },
        "test_token_literals": {
            "name": "test_token_literals",
            "location": 2740,
            "return": [],
            "arguments": {}
        },
        "test_token_variables": {
            "name": "test_token_variables",
            "location": 2758,
            "return": [],
            "arguments": {}
        },
        "test_token_wrong_type": {
            "name": "test_token_wrong_type",
            "location": 2769,
            "return": [],
            "arguments": {}
        },
        "TestLiteral.test_init": {
            "name": "test_init",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLiteral.test_pops": {
            "name": "test_pops",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLiteral.test_puts": {
            "name": "test_puts",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLiteral.test_value": {
            "name": "test_value",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLiteral.test_call": {
            "name": "test_call",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLiteral.test_eq": {
            "name": "test_eq",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLiteral.test_ne": {
            "name": "test_ne",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLiteral.test_lt": {
            "name": "test_lt",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLiteral.test_le": {
            "name": "test_le",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLiteral.test_gt": {
            "name": "test_gt",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLiteral.test_ge": {
            "name": "test_ge",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLiteral.test_repr": {
            "name": "test_repr",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLiteral.test_str": {
            "name": "test_str",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLiteral.test_pi": {
            "name": "test_pi",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLiteral.test_e": {
            "name": "test_e",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariable.test_init": {
            "name": "test_init",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariable.test_pops": {
            "name": "test_pops",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariable.test_puts": {
            "name": "test_puts",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariable.test_name": {
            "name": "test_name",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariable.test_call": {
            "name": "test_call",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariable.test_eq": {
            "name": "test_eq",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariable.test_ne": {
            "name": "test_ne",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariable.test_repr": {
            "name": "test_repr",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariable.test_str": {
            "name": "test_str",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSUBOperator.test_repr": {
            "name": "test_repr",
            "location": 322,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSUBOperator.test_pops": {
            "name": "test_pops",
            "location": 325,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSUBOperator.test_puts": {
            "name": "test_puts",
            "location": 328,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSUBOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 331,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSUBOperator.test_call": {
            "name": "test_call",
            "location": 335,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestADDOperator.test_repr": {
            "name": "test_repr",
            "location": 350,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestADDOperator.test_pops": {
            "name": "test_pops",
            "location": 353,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestADDOperator.test_puts": {
            "name": "test_puts",
            "location": 356,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestADDOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 359,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestADDOperator.test_call": {
            "name": "test_call",
            "location": 363,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMULOperator.test_repr": {
            "name": "test_repr",
            "location": 378,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMULOperator.test_pops": {
            "name": "test_pops",
            "location": 381,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMULOperator.test_puts": {
            "name": "test_puts",
            "location": 384,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMULOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 387,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMULOperator.test_call": {
            "name": "test_call",
            "location": 391,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPOPOperator.test_repr": {
            "name": "test_repr",
            "location": 406,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPOPOperator.test_pops": {
            "name": "test_pops",
            "location": 409,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPOPOperator.test_puts": {
            "name": "test_puts",
            "location": 412,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPOPOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 415,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPOPOperator.test_call": {
            "name": "test_call",
            "location": 419,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNEGOperator.test_repr": {
            "name": "test_repr",
            "location": 428,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNEGOperator.test_pops": {
            "name": "test_pops",
            "location": 431,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNEGOperator.test_puts": {
            "name": "test_puts",
            "location": 434,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNEGOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 437,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNEGOperator.test_call": {
            "name": "test_call",
            "location": 441,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABSOperator.test_repr": {
            "name": "test_repr",
            "location": 454,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABSOperator.test_pops": {
            "name": "test_pops",
            "location": 457,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABSOperator.test_puts": {
            "name": "test_puts",
            "location": 460,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABSOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 463,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABSOperator.test_call": {
            "name": "test_call",
            "location": 467,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestINVOperator.test_repr": {
            "name": "test_repr",
            "location": 480,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestINVOperator.test_pops": {
            "name": "test_pops",
            "location": 483,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestINVOperator.test_puts": {
            "name": "test_puts",
            "location": 486,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestINVOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 489,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestINVOperator.test_call": {
            "name": "test_call",
            "location": 493,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSQRTOperator.test_repr": {
            "name": "test_repr",
            "location": 506,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSQRTOperator.test_pops": {
            "name": "test_pops",
            "location": 509,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSQRTOperator.test_puts": {
            "name": "test_puts",
            "location": 512,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSQRTOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 515,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSQRTOperator.test_call": {
            "name": "test_call",
            "location": 519,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSQROperator.test_repr": {
            "name": "test_repr",
            "location": 530,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSQROperator.test_pops": {
            "name": "test_pops",
            "location": 533,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSQROperator.test_puts": {
            "name": "test_puts",
            "location": 536,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSQROperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 539,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSQROperator.test_call": {
            "name": "test_call",
            "location": 543,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEXPOperator.test_repr": {
            "name": "test_repr",
            "location": 556,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEXPOperator.test_pops": {
            "name": "test_pops",
            "location": 559,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEXPOperator.test_puts": {
            "name": "test_puts",
            "location": 562,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEXPOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 565,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEXPOperator.test_call": {
            "name": "test_call",
            "location": 569,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLOGOperator.test_repr": {
            "name": "test_repr",
            "location": 583,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLOGOperator.test_pops": {
            "name": "test_pops",
            "location": 586,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLOGOperator.test_puts": {
            "name": "test_puts",
            "location": 589,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLOGOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 592,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLOGOperator.test_call": {
            "name": "test_call",
            "location": 596,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLOG10Operator.test_repr": {
            "name": "test_repr",
            "location": 620,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLOG10Operator.test_pops": {
            "name": "test_pops",
            "location": 623,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLOG10Operator.test_puts": {
            "name": "test_puts",
            "location": 626,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLOG10Operator.test_no_copy": {
            "name": "test_no_copy",
            "location": 629,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLOG10Operator.test_call": {
            "name": "test_call",
            "location": 633,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSINOperator.test_repr": {
            "name": "test_repr",
            "location": 651,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSINOperator.test_pops": {
            "name": "test_pops",
            "location": 654,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSINOperator.test_puts": {
            "name": "test_puts",
            "location": 657,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSINOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 660,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSINOperator.test_call": {
            "name": "test_call",
            "location": 664,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCOSOperator.test_repr": {
            "name": "test_repr",
            "location": 690,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCOSOperator.test_pops": {
            "name": "test_pops",
            "location": 693,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCOSOperator.test_puts": {
            "name": "test_puts",
            "location": 696,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCOSOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 699,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCOSOperator.test_call": {
            "name": "test_call",
            "location": 703,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTANOperator.test_repr": {
            "name": "test_repr",
            "location": 729,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTANOperator.test_pops": {
            "name": "test_pops",
            "location": 732,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTANOperator.test_puts": {
            "name": "test_puts",
            "location": 735,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTANOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 738,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTANOperator.test_call": {
            "name": "test_call",
            "location": 742,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSINDOperator.test_repr": {
            "name": "test_repr",
            "location": 767,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSINDOperator.test_pops": {
            "name": "test_pops",
            "location": 770,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSINDOperator.test_puts": {
            "name": "test_puts",
            "location": 773,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSINDOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 776,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSINDOperator.test_call": {
            "name": "test_call",
            "location": 780,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCOSDOperator.test_repr": {
            "name": "test_repr",
            "location": 806,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCOSDOperator.test_pops": {
            "name": "test_pops",
            "location": 809,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCOSDOperator.test_puts": {
            "name": "test_puts",
            "location": 812,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCOSDOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 815,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCOSDOperator.test_call": {
            "name": "test_call",
            "location": 819,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTANDOperator.test_repr": {
            "name": "test_repr",
            "location": 845,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTANDOperator.test_pops": {
            "name": "test_pops",
            "location": 848,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTANDOperator.test_puts": {
            "name": "test_puts",
            "location": 851,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTANDOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 854,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTANDOperator.test_call": {
            "name": "test_call",
            "location": 858,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSINHOperator.test_repr": {
            "name": "test_repr",
            "location": 883,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSINHOperator.test_pops": {
            "name": "test_pops",
            "location": 886,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSINHOperator.test_puts": {
            "name": "test_puts",
            "location": 889,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSINHOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 892,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSINHOperator.test_call": {
            "name": "test_call",
            "location": 896,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCOSHOperator.test_repr": {
            "name": "test_repr",
            "location": 910,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCOSHOperator.test_pops": {
            "name": "test_pops",
            "location": 913,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCOSHOperator.test_puts": {
            "name": "test_puts",
            "location": 916,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCOSHOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 919,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCOSHOperator.test_call": {
            "name": "test_call",
            "location": 923,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTANHOperator.test_repr": {
            "name": "test_repr",
            "location": 940,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTANHOperator.test_pops": {
            "name": "test_pops",
            "location": 943,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTANHOperator.test_puts": {
            "name": "test_puts",
            "location": 946,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTANHOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 949,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTANHOperator.test_call": {
            "name": "test_call",
            "location": 953,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestASINOperator.test_repr": {
            "name": "test_repr",
            "location": 970,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestASINOperator.test_pops": {
            "name": "test_pops",
            "location": 973,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestASINOperator.test_puts": {
            "name": "test_puts",
            "location": 976,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestASINOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 979,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestASINOperator.test_call": {
            "name": "test_call",
            "location": 983,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestACOSOperator.test_repr": {
            "name": "test_repr",
            "location": 1009,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestACOSOperator.test_pops": {
            "name": "test_pops",
            "location": 1012,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestACOSOperator.test_puts": {
            "name": "test_puts",
            "location": 1015,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestACOSOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 1018,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestACOSOperator.test_call": {
            "name": "test_call",
            "location": 1022,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestATANOperator.test_repr": {
            "name": "test_repr",
            "location": 1042,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestATANOperator.test_pops": {
            "name": "test_pops",
            "location": 1045,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestATANOperator.test_puts": {
            "name": "test_puts",
            "location": 1048,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestATANOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 1051,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestATANOperator.test_call": {
            "name": "test_call",
            "location": 1055,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestASINDOperator.test_repr": {
            "name": "test_repr",
            "location": 1080,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestASINDOperator.test_pops": {
            "name": "test_pops",
            "location": 1083,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestASINDOperator.test_puts": {
            "name": "test_puts",
            "location": 1086,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestASINDOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 1089,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestASINDOperator.test_call": {
            "name": "test_call",
            "location": 1093,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestACOSDOperator.test_repr": {
            "name": "test_repr",
            "location": 1119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestACOSDOperator.test_pops": {
            "name": "test_pops",
            "location": 1122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestACOSDOperator.test_puts": {
            "name": "test_puts",
            "location": 1125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestACOSDOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 1128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestACOSDOperator.test_call": {
            "name": "test_call",
            "location": 1132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestATANDOperator.test_repr": {
            "name": "test_repr",
            "location": 1152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestATANDOperator.test_pops": {
            "name": "test_pops",
            "location": 1155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestATANDOperator.test_puts": {
            "name": "test_puts",
            "location": 1158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestATANDOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 1161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestATANDOperator.test_call": {
            "name": "test_call",
            "location": 1165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestASINHOperator.test_repr": {
            "name": "test_repr",
            "location": 1190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestASINHOperator.test_pops": {
            "name": "test_pops",
            "location": 1193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestASINHOperator.test_puts": {
            "name": "test_puts",
            "location": 1196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestASINHOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 1199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestASINHOperator.test_call": {
            "name": "test_call",
            "location": 1203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestACOSHOperator.test_repr": {
            "name": "test_repr",
            "location": 1217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestACOSHOperator.test_pops": {
            "name": "test_pops",
            "location": 1220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestACOSHOperator.test_puts": {
            "name": "test_puts",
            "location": 1223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestACOSHOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 1226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestACOSHOperator.test_call": {
            "name": "test_call",
            "location": 1230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestATANHOperator.test_repr": {
            "name": "test_repr",
            "location": 1247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestATANHOperator.test_pops": {
            "name": "test_pops",
            "location": 1250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestATANHOperator.test_puts": {
            "name": "test_puts",
            "location": 1253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestATANHOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 1256,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestATANHOperator.test_call": {
            "name": "test_call",
            "location": 1260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestISNANOperator.test_repr": {
            "name": "test_repr",
            "location": 1277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestISNANOperator.test_pops": {
            "name": "test_pops",
            "location": 1280,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestISNANOperator.test_puts": {
            "name": "test_puts",
            "location": 1283,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestISNANOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 1286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestISNANOperator.test_call": {
            "name": "test_call",
            "location": 1290,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestISANOperator.test_repr": {
            "name": "test_repr",
            "location": 1303,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestISANOperator.test_pops": {
            "name": "test_pops",
            "location": 1306,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestISANOperator.test_puts": {
            "name": "test_puts",
            "location": 1309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestISANOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 1312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestISANOperator.test_call": {
            "name": "test_call",
            "location": 1316,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRINTOperator.test_repr": {
            "name": "test_repr",
            "location": 1329,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRINTOperator.test_pops": {
            "name": "test_pops",
            "location": 1332,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRINTOperator.test_puts": {
            "name": "test_puts",
            "location": 1335,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRINTOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 1338,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRINTOperator.test_call": {
            "name": "test_call",
            "location": 1342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNINTOperator.test_repr": {
            "name": "test_repr",
            "location": 1357,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNINTOperator.test_pops": {
            "name": "test_pops",
            "location": 1360,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNINTOperator.test_puts": {
            "name": "test_puts",
            "location": 1363,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNINTOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 1366,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNINTOperator.test_call": {
            "name": "test_call",
            "location": 1370,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCEILOperator.test_repr": {
            "name": "test_repr",
            "location": 1385,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCEILOperator.test_pops": {
            "name": "test_pops",
            "location": 1388,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCEILOperator.test_puts": {
            "name": "test_puts",
            "location": 1391,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCEILOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 1394,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCEILOperator.test_call": {
            "name": "test_call",
            "location": 1398,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCEILINGOperator.test_repr": {
            "name": "test_repr",
            "location": 1413,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCEILINGOperator.test_pops": {
            "name": "test_pops",
            "location": 1416,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCEILINGOperator.test_puts": {
            "name": "test_puts",
            "location": 1419,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCEILINGOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 1422,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCEILINGOperator.test_call": {
            "name": "test_call",
            "location": 1426,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFLOOROperator.test_repr": {
            "name": "test_repr",
            "location": 1441,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFLOOROperator.test_pops": {
            "name": "test_pops",
            "location": 1444,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFLOOROperator.test_puts": {
            "name": "test_puts",
            "location": 1447,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFLOOROperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 1450,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFLOOROperator.test_call": {
            "name": "test_call",
            "location": 1454,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestD2ROperator.test_repr": {
            "name": "test_repr",
            "location": 1469,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestD2ROperator.test_pops": {
            "name": "test_pops",
            "location": 1472,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestD2ROperator.test_puts": {
            "name": "test_puts",
            "location": 1475,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestD2ROperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 1478,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestD2ROperator.test_call": {
            "name": "test_call",
            "location": 1482,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestR2DOperator.test_repr": {
            "name": "test_repr",
            "location": 1508,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestR2DOperator.test_pops": {
            "name": "test_pops",
            "location": 1511,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestR2DOperator.test_puts": {
            "name": "test_puts",
            "location": 1514,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestR2DOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 1517,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestR2DOperator.test_call": {
            "name": "test_call",
            "location": 1521,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestYMDHMSOperator.test_repr": {
            "name": "test_repr",
            "location": 1547,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestYMDHMSOperator.test_pops": {
            "name": "test_pops",
            "location": 1550,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestYMDHMSOperator.test_puts": {
            "name": "test_puts",
            "location": 1553,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestYMDHMSOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 1556,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestYMDHMSOperator.test_call": {
            "name": "test_call",
            "location": 1560,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSUMOperator.test_repr": {
            "name": "test_repr",
            "location": 1582,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSUMOperator.test_pops": {
            "name": "test_pops",
            "location": 1585,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSUMOperator.test_puts": {
            "name": "test_puts",
            "location": 1588,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSUMOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 1591,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSUMOperator.test_call": {
            "name": "test_call",
            "location": 1595,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDIFFOperator.test_repr": {
            "name": "test_repr",
            "location": 1611,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDIFFOperator.test_pops": {
            "name": "test_pops",
            "location": 1614,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDIFFOperator.test_puts": {
            "name": "test_puts",
            "location": 1617,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDIFFOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 1620,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDIFFOperator.test_call": {
            "name": "test_call",
            "location": 1624,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDUPOperator.test_repr": {
            "name": "test_repr",
            "location": 1638,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDUPOperator.test_pops": {
            "name": "test_pops",
            "location": 1641,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDUPOperator.test_puts": {
            "name": "test_puts",
            "location": 1644,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDUPOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 1647,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDUPOperator.test_call": {
            "name": "test_call",
            "location": 1651,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDIVOperator.test_repr": {
            "name": "test_repr",
            "location": 1661,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDIVOperator.test_pops": {
            "name": "test_pops",
            "location": 1664,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDIVOperator.test_puts": {
            "name": "test_puts",
            "location": 1667,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDIVOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 1670,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDIVOperator.test_call": {
            "name": "test_call",
            "location": 1674,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPOWOperator.test_repr": {
            "name": "test_repr",
            "location": 1689,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPOWOperator.test_pops": {
            "name": "test_pops",
            "location": 1692,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPOWOperator.test_puts": {
            "name": "test_puts",
            "location": 1695,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPOWOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 1698,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPOWOperator.test_call": {
            "name": "test_call",
            "location": 1702,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFMODOperator.test_repr": {
            "name": "test_repr",
            "location": 1719,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFMODOperator.test_pops": {
            "name": "test_pops",
            "location": 1724,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFMODOperator.test_puts": {
            "name": "test_puts",
            "location": 1729,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFMODOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 1734,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFMODOperator.test_call": {
            "name": "test_call",
            "location": 1738,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMINOperator.test_repr": {
            "name": "test_repr",
            "location": 1755,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMINOperator.test_pops": {
            "name": "test_pops",
            "location": 1758,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMINOperator.test_puts": {
            "name": "test_puts",
            "location": 1761,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMINOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 1764,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMINOperator.test_call": {
            "name": "test_call",
            "location": 1768,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMAXOperator.test_repr": {
            "name": "test_repr",
            "location": 1784,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMAXOperator.test_pops": {
            "name": "test_pops",
            "location": 1787,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMAXOperator.test_puts": {
            "name": "test_puts",
            "location": 1790,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMAXOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 1793,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMAXOperator.test_call": {
            "name": "test_call",
            "location": 1797,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestATAN2Operator.test_repr": {
            "name": "test_repr",
            "location": 1813,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestATAN2Operator.test_pops": {
            "name": "test_pops",
            "location": 1816,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestATAN2Operator.test_puts": {
            "name": "test_puts",
            "location": 1819,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestATAN2Operator.test_no_copy": {
            "name": "test_no_copy",
            "location": 1822,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestATAN2Operator.test_call": {
            "name": "test_call",
            "location": 1826,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHYPOTOperator.test_repr": {
            "name": "test_repr",
            "location": 1872,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHYPOTOperator.test_pops": {
            "name": "test_pops",
            "location": 1875,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHYPOTOperator.test_puts": {
            "name": "test_puts",
            "location": 1878,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHYPOTOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 1881,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHYPOTOperator.test_call": {
            "name": "test_call",
            "location": 1885,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestR2Operator.test_repr": {
            "name": "test_repr",
            "location": 1916,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestR2Operator.test_pops": {
            "name": "test_pops",
            "location": 1919,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestR2Operator.test_puts": {
            "name": "test_puts",
            "location": 1922,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestR2Operator.test_no_copy": {
            "name": "test_no_copy",
            "location": 1925,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestR2Operator.test_call": {
            "name": "test_call",
            "location": 1929,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEQOperator.test_repr": {
            "name": "test_repr",
            "location": 1944,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEQOperator.test_pops": {
            "name": "test_pops",
            "location": 1947,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEQOperator.test_puts": {
            "name": "test_puts",
            "location": 1950,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEQOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 1953,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEQOperator.test_call": {
            "name": "test_call",
            "location": 1957,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNEOperator.test_repr": {
            "name": "test_repr",
            "location": 1981,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNEOperator.test_pops": {
            "name": "test_pops",
            "location": 1984,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNEOperator.test_puts": {
            "name": "test_puts",
            "location": 1987,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNEOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 1990,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNEOperator.test_call": {
            "name": "test_call",
            "location": 1994,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLTOperator.test_repr": {
            "name": "test_repr",
            "location": 2014,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLTOperator.test_pops": {
            "name": "test_pops",
            "location": 2017,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLTOperator.test_puts": {
            "name": "test_puts",
            "location": 2020,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLTOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 2023,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLTOperator.test_call": {
            "name": "test_call",
            "location": 2027,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLEOperator.test_repr": {
            "name": "test_repr",
            "location": 2048,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLEOperator.test_pops": {
            "name": "test_pops",
            "location": 2051,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLEOperator.test_puts": {
            "name": "test_puts",
            "location": 2054,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLEOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 2057,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLEOperator.test_le": {
            "name": "test_le",
            "location": 2061,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGTOperator.test_repr": {
            "name": "test_repr",
            "location": 2082,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGTOperator.test_pops": {
            "name": "test_pops",
            "location": 2085,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGTOperator.test_puts": {
            "name": "test_puts",
            "location": 2088,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGTOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 2091,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGTOperator.test_call": {
            "name": "test_call",
            "location": 2095,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGEOperator.test_repr": {
            "name": "test_repr",
            "location": 2116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGEOperator.test_pops": {
            "name": "test_pops",
            "location": 2119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGEOperator.test_puts": {
            "name": "test_puts",
            "location": 2122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGEOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 2125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGEOperator.test_call": {
            "name": "test_call",
            "location": 2129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNANOperator.test_repr": {
            "name": "test_repr",
            "location": 2150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNANOperator.test_pops": {
            "name": "test_pops",
            "location": 2153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNANOperator.test_puts": {
            "name": "test_puts",
            "location": 2156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNANOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 2159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNANOperator.test_call": {
            "name": "test_call",
            "location": 2163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestANDOperator.test_repr": {
            "name": "test_repr",
            "location": 2188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestANDOperator.test_pops": {
            "name": "test_pops",
            "location": 2191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestANDOperator.test_puts": {
            "name": "test_puts",
            "location": 2194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestANDOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 2197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestANDOperator.test_call": {
            "name": "test_call",
            "location": 2201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOROperator.test_repr": {
            "name": "test_repr",
            "location": 2221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOROperator.test_pops": {
            "name": "test_pops",
            "location": 2224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOROperator.test_puts": {
            "name": "test_puts",
            "location": 2227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOROperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 2230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOROperator.test_call": {
            "name": "test_call",
            "location": 2234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIANDOperator.test_repr": {
            "name": "test_repr",
            "location": 2260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIANDOperator.test_pops": {
            "name": "test_pops",
            "location": 2263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIANDOperator.test_puts": {
            "name": "test_puts",
            "location": 2266,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIANDOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 2269,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIANDOperator.test_call": {
            "name": "test_call",
            "location": 2273,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIOROperator.test_repr": {
            "name": "test_repr",
            "location": 2303,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIOROperator.test_pops": {
            "name": "test_pops",
            "location": 2306,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIOROperator.test_puts": {
            "name": "test_puts",
            "location": 2309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIOROperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 2312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIOROperator.test_call": {
            "name": "test_call",
            "location": 2316,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBTESTOperator.test_repr": {
            "name": "test_repr",
            "location": 2346,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBTESTOperator.test_pops": {
            "name": "test_pops",
            "location": 2349,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBTESTOperator.test_puts": {
            "name": "test_puts",
            "location": 2352,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBTESTOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 2355,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBTESTOperator.test_call": {
            "name": "test_call",
            "location": 2359,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAVGOperator.test_repr": {
            "name": "test_repr",
            "location": 2395,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAVGOperator.test_pops": {
            "name": "test_pops",
            "location": 2398,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAVGOperator.test_puts": {
            "name": "test_puts",
            "location": 2401,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAVGOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 2404,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAVGOperator.test_call": {
            "name": "test_call",
            "location": 2408,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDXDYOperator.test_repr": {
            "name": "test_repr",
            "location": 2434,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDXDYOperator.test_pops": {
            "name": "test_pops",
            "location": 2437,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDXDYOperator.test_puts": {
            "name": "test_puts",
            "location": 2440,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDXDYOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 2443,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDXDYOperator.test_call": {
            "name": "test_call",
            "location": 2447,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEXCHOperator.test_rerpr": {
            "name": "test_rerpr",
            "location": 2480,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEXCHOperator.test_pops": {
            "name": "test_pops",
            "location": 2483,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEXCHOperator.test_puts": {
            "name": "test_puts",
            "location": 2486,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEXCHOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 2489,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEXCHOperator.test_call": {
            "name": "test_call",
            "location": 2493,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestINRANGEOperator.test_repr": {
            "name": "test_repr",
            "location": 2512,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestINRANGEOperator.test_pops": {
            "name": "test_pops",
            "location": 2515,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestINRANGEOperator.test_puts": {
            "name": "test_puts",
            "location": 2518,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestINRANGEOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 2521,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestINRANGEOperator.test_call": {
            "name": "test_call",
            "location": 2525,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBOXCAROperator.test_repr": {
            "name": "test_repr",
            "location": 2559,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBOXCAROperator.test_pops": {
            "name": "test_pops",
            "location": 2562,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBOXCAROperator.test_puts": {
            "name": "test_puts",
            "location": 2565,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBOXCAROperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 2568,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBOXCAROperator.test_call": {
            "name": "test_call",
            "location": 2572,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGAUSSOperator.test_repr": {
            "name": "test_repr",
            "location": 2640,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGAUSSOperator.test_pops": {
            "name": "test_pops",
            "location": 2643,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGAUSSOperator.test_puts": {
            "name": "test_puts",
            "location": 2646,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGAUSSOperator.test_no_copy": {
            "name": "test_no_copy",
            "location": 2649,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGAUSSOperator.test_call": {
            "name": "test_call",
            "location": 2653,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpression.test_init_with_token_sequence": {
            "name": "test_init_with_token_sequence",
            "location": 2775,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpression.test_init_with_mixed_sequence": {
            "name": "test_init_with_mixed_sequence",
            "location": 2788,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpression.test_init_with_token_string": {
            "name": "test_init_with_token_string",
            "location": 2808,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpression.test_eq_with_token_sequence": {
            "name": "test_eq_with_token_sequence",
            "location": 2832,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpression.test_eq_with_mixed_sequence": {
            "name": "test_eq_with_mixed_sequence",
            "location": 2856,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpression.test_eq_with_token_string": {
            "name": "test_eq_with_token_string",
            "location": 2876,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpression.test_eq_with_complete_expression": {
            "name": "test_eq_with_complete_expression",
            "location": 2899,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpression.test_pops": {
            "name": "test_pops",
            "location": 2904,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpression.test_puts": {
            "name": "test_puts",
            "location": 2917,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpression.test_variables": {
            "name": "test_variables",
            "location": 2930,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpression.test_complete": {
            "name": "test_complete",
            "location": 2940,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpression.test_is_complete": {
            "name": "test_is_complete",
            "location": 2988,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpression.test_call": {
            "name": "test_call",
            "location": 3002,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpression.test_contains": {
            "name": "test_contains",
            "location": 3017,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpression.test_getitem_int_index": {
            "name": "test_getitem_int_index",
            "location": 3030,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpression.test_getitem_slice_index": {
            "name": "test_getitem_slice_index",
            "location": 3040,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpression.test_iter": {
            "name": "test_iter",
            "location": 3047,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpression.test_len": {
            "name": "test_len",
            "location": 3056,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpression.test_ne": {
            "name": "test_ne",
            "location": 3069,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpression.test_ne_with_complete_expression": {
            "name": "test_ne_with_complete_expression",
            "location": 3093,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpression.test_add": {
            "name": "test_add",
            "location": 3098,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpression.test_repr": {
            "name": "test_repr",
            "location": 3127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpression.test_str": {
            "name": "test_str",
            "location": 3152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCompleteExpression.test_init_with_token_sequence": {
            "name": "test_init_with_token_sequence",
            "location": 3167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCompleteExpression.test_init_with_mixed_sequence": {
            "name": "test_init_with_mixed_sequence",
            "location": 3172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCompleteExpression.test_init_with_token_string": {
            "name": "test_init_with_token_string",
            "location": 3183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCompleteExpression.test_init_no_results_with_token_sequence": {
            "name": "test_init_no_results_with_token_sequence",
            "location": 3196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCompleteExpression.test_init_no_results_with_mixed_sequence": {
            "name": "test_init_no_results_with_mixed_sequence",
            "location": 3209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCompleteExpression.test_init_no_results_with_token_string": {
            "name": "test_init_no_results_with_token_string",
            "location": 3217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCompleteExpression.test_init_too_many_results_with_token_sequence": {
            "name": "test_init_too_many_results_with_token_sequence",
            "location": 3230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCompleteExpression.test_init_too_many_results_with_mixed_sequence": {
            "name": "test_init_too_many_results_with_mixed_sequence",
            "location": 3244,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCompleteExpression.test_init_too_many_results_with_token_string": {
            "name": "test_init_too_many_results_with_token_string",
            "location": 3258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCompleteExpression.test_init_stack_underflow_with_token_sequence": {
            "name": "test_init_stack_underflow_with_token_sequence",
            "location": 3272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCompleteExpression.test_init_stack_underflow_with_mixed_sequence": {
            "name": "test_init_stack_underflow_with_mixed_sequence",
            "location": 3288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCompleteExpression.test_init_stack_underflow_with_token_string": {
            "name": "test_init_stack_underflow_with_token_string",
            "location": 3304,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCompleteExpression.test_complete": {
            "name": "test_complete",
            "location": 3320,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCompleteExpression.test_eval": {
            "name": "test_eval",
            "location": 3325,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCompleteExpression.test_eq_with_expresion": {
            "name": "test_eq_with_expresion",
            "location": 3333,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCompleteExpression.test_ne_with_expresion": {
            "name": "test_ne_with_expresion",
            "location": 3338,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyrads-master/tests/test_utility.py": {
        "test_ensure_open_closeio_default": {
            "name": "test_ensure_open_closeio_default",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_ensure_open_closeio_true": {
            "name": "test_ensure_open_closeio_true",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "test_ensure_open_closeio_false": {
            "name": "test_ensure_open_closeio_false",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "test_isio": {
            "name": "test_isio",
            "location": 41,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_isio_read": {
            "name": "test_isio_read",
            "location": 49,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_isio_write": {
            "name": "test_isio_write",
            "location": 60,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_xor": {
            "name": "test_xor",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "test_contains_sublist": {
            "name": "test_contains_sublist",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "test_merge_sublist": {
            "name": "test_merge_sublist",
            "location": 91,
            "return": [],
            "arguments": {}
        },
        "test_delete_sublist": {
            "name": "test_delete_sublist",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "test_fortran_float": {
            "name": "test_fortran_float",
            "location": 111,
            "return": [],
            "arguments": {}
        },
        "test_datetime_to_epoch": {
            "name": "test_datetime_to_epoch",
            "location": 130,
            "return": [],
            "arguments": {}
        },
        "test_datetime_to_epoch_with_default_epoch": {
            "name": "test_datetime_to_epoch_with_default_epoch",
            "location": 138,
            "return": [],
            "arguments": {}
        },
        "test_epoch_to_datetime": {
            "name": "test_epoch_to_datetime",
            "location": 153,
            "return": [],
            "arguments": {}
        },
        "test_epoch_to_datetime_with_default_epoch": {
            "name": "test_epoch_to_datetime_with_default_epoch",
            "location": 161,
            "return": [],
            "arguments": {}
        }
    },
    "pyrads-master/tests/__init__.py": {},
    "pyrads-master/tests/config/test_text_parsers.py": {
        "test_exceptions": {
            "name": "test_exceptions",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_lift": {
            "name": "test_lift",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "test_list_of": {
            "name": "test_list_of",
            "location": 59,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_range_of": {
            "name": "test_range_of",
            "location": 75,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_one_of": {
            "name": "test_one_of",
            "location": 96,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_compress": {
            "name": "test_compress",
            "location": 117,
            "return": [],
            "arguments": {}
        },
        "test_cycles": {
            "name": "test_cycles",
            "location": 141,
            "return": [],
            "arguments": {}
        },
        "test_data_as_constant": {
            "name": "test_data_as_constant",
            "location": 156,
            "return": [],
            "arguments": {}
        },
        "test_data_as_flags": {
            "name": "test_data_as_flags",
            "location": 179,
            "return": [],
            "arguments": {}
        },
        "test_data_as_grid": {
            "name": "test_data_as_grid",
            "location": 210,
            "return": [],
            "arguments": {}
        },
        "test_data_as_math": {
            "name": "test_data_as_math",
            "location": 261,
            "return": [],
            "arguments": {}
        },
        "test_data_as_netcdf": {
            "name": "test_data_as_netcdf",
            "location": 292,
            "return": [],
            "arguments": {}
        },
        "test_data_with_invalid": {
            "name": "test_data_with_invalid",
            "location": 365,
            "return": [],
            "arguments": {}
        },
        "test_nop": {
            "name": "test_nop",
            "location": 371,
            "return": [],
            "arguments": {}
        },
        "test_ref_pass": {
            "name": "test_ref_pass",
            "location": 375,
            "return": [],
            "arguments": {}
        },
        "test_repeat": {
            "name": "test_repeat",
            "location": 407,
            "return": [],
            "arguments": {}
        },
        "test_time": {
            "name": "test_time",
            "location": 427,
            "return": [],
            "arguments": {}
        },
        "test_unit": {
            "name": "test_unit",
            "location": 439,
            "return": [],
            "arguments": {}
        }
    },
    "pyrads-master/tests/config/test_tree.py": {
        "TestSingleBitFlag.test_init": {
            "name": "test_init",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSingleBitFlag.test_bit": {
            "name": "test_bit",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSingleBitFlag.test_extract_with_value": {
            "name": "test_extract_with_value",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSingleBitFlag.test_extract_with_array": {
            "name": "test_extract_with_array",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMutiBitFlag.test_init": {
            "name": "test_init",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMutiBitFlag.test_bit": {
            "name": "test_bit",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMutiBitFlag.test_length": {
            "name": "test_length",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMutiBitFlag.test_extract_with_value": {
            "name": "test_extract_with_value",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMutiBitFlag.test_extract_with_array": {
            "name": "test_extract_with_array",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSurfaceType.test_init": {
            "name": "test_init",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSurfaceType.test_extract_with_value": {
            "name": "test_extract_with_value",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSurfaceType.test_extract_with_array": {
            "name": "test_extract_with_array",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyrads-master/tests/config/test_utility.py": {
        "test_parse_action_replace_is_default": {
            "name": "test_parse_action_replace_is_default",
            "location": 8,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_parse_action_replace": {
            "name": "test_parse_action_replace",
            "location": 13,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_parse_action_append": {
            "name": "test_parse_action_append",
            "location": 18,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_parse_action_delete": {
            "name": "test_parse_action_delete",
            "location": 23,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_parse_action_merge": {
            "name": "test_parse_action_merge",
            "location": 28,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_parse_action_invalid": {
            "name": "test_parse_action_invalid",
            "location": 33,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_parse_action_edit_append": {
            "name": "test_parse_action_edit_append",
            "location": 39,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_parse_action_invalid_edit": {
            "name": "test_parse_action_invalid_edit",
            "location": 44,
            "return": [],
            "arguments": {
                "mocker": []
            }
        }
    },
    "pyrads-master/tests/config/__init__.py": {},
    "pyrads-master/tests/xml/test_utility.py": {
        "test_strip_comments_single_line_comments": {
            "name": "test_strip_comments_single_line_comments",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_strip_comments_inline_comments": {
            "name": "test_strip_comments_inline_comments",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "test_strip_comments_multiline_comments": {
            "name": "test_strip_comments_multiline_comments",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "test_strip_processing_instructions": {
            "name": "test_strip_processing_instructions",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "test_strip_blanklines": {
            "name": "test_strip_blanklines",
            "location": 70,
            "return": [],
            "arguments": {}
        },
        "test_rads_fixer": {
            "name": "test_rads_fixer",
            "location": 84,
            "return": [],
            "arguments": {}
        },
        "test_rootless_fixer": {
            "name": "test_rootless_fixer",
            "location": 105,
            "return": [],
            "arguments": {}
        },
        "test_rootless_fixer_with_empty_file": {
            "name": "test_rootless_fixer_with_empty_file",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "test_fromstring": {
            "name": "test_fromstring",
            "location": 145,
            "return": [],
            "arguments": {}
        },
        "test_fromstring_with_file": {
            "name": "test_fromstring_with_file",
            "location": 160,
            "return": [],
            "arguments": {}
        },
        "test_fromstring_with_empty_xml": {
            "name": "test_fromstring_with_empty_xml",
            "location": 168,
            "return": [],
            "arguments": {}
        },
        "test_fromstring_with_empty_xml_and_file": {
            "name": "test_fromstring_with_empty_xml_and_file",
            "location": 178,
            "return": [],
            "arguments": {}
        },
        "test_fromstring_with_fixer": {
            "name": "test_fromstring_with_fixer",
            "location": 189,
            "return": [],
            "arguments": {}
        },
        "test_fromstringlist": {
            "name": "test_fromstringlist",
            "location": 208,
            "return": [],
            "arguments": {}
        },
        "test_fromstringlist_with_file": {
            "name": "test_fromstringlist_with_file",
            "location": 223,
            "return": [],
            "arguments": {}
        },
        "test_fromstringlist_with_empty_xml": {
            "name": "test_fromstringlist_with_empty_xml",
            "location": 229,
            "return": [],
            "arguments": {}
        },
        "test_fromstringlist_with_empty_xml_and_file": {
            "name": "test_fromstringlist_with_empty_xml_and_file",
            "location": 236,
            "return": [],
            "arguments": {}
        },
        "test_fromstringlist_with_fixer": {
            "name": "test_fromstringlist_with_fixer",
            "location": 244,
            "return": [],
            "arguments": {}
        },
        "test_parse": {
            "name": "test_parse",
            "location": 266,
            "return": [],
            "arguments": {}
        },
        "test_parse_with_empty_file": {
            "name": "test_parse_with_empty_file",
            "location": 284,
            "return": [],
            "arguments": {}
        },
        "test_parse_with_fixer": {
            "name": "test_parse_with_fixer",
            "location": 297,
            "return": [],
            "arguments": {}
        },
        "test_fromstring_with_fixer.fixer": {
            "name": "fixer",
            "location": 197,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "test_fromstringlist_with_fixer.fixer": {
            "name": "fixer",
            "location": 252,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "test_parse_with_fixer.fixer": {
            "name": "fixer",
            "location": 308,
            "return": [],
            "arguments": {
                "text": []
            }
        }
    },
    "pyrads-master/tests/xml/__init__.py": {}
}
{
    "pyserde-master/conftest.py": {},
    "pyserde-master/bench/attrs_class.py": {
        "new": {
            "name": "new",
            "location": 27,
            "return": [
                "Runner"
            ],
            "arguments": {
                "size": [
                    "Size"
                ]
            }
        },
        "se": {
            "name": "se",
            "location": 36,
            "return": [],
            "arguments": {
                "obj": [
                    "Union[(Small, Medium)]"
                ]
            }
        },
        "astuple": {
            "name": "astuple",
            "location": 40,
            "return": [],
            "arguments": {
                "obj": [
                    "Union[(Small, Medium)]"
                ]
            }
        },
        "asdict": {
            "name": "asdict",
            "location": 44,
            "return": [],
            "arguments": {
                "obj": [
                    "Union[(Small, Medium)]"
                ]
            }
        }
    },
    "pyserde-master/bench/bench.py": {
        "run": {
            "name": "run",
            "location": 106,
            "return": [],
            "arguments": {
                "opt": [
                    "Opt"
                ],
                "name": [
                    "str"
                ],
                "tc": [
                    "'TestCase'"
                ]
            }
        },
        "equals_small": {
            "name": "equals_small",
            "location": 129,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "equals_medium": {
            "name": "equals_medium",
            "location": 134,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "main": {
            "name": "main",
            "location": 158,
            "return": [],
            "arguments": {
                "full": [
                    "bool"
                ],
                "test": [
                    "str"
                ],
                "chart": [
                    "bool"
                ],
                "output": [
                    "Path"
                ]
            }
        },
        "Opt.__post_init__": {
            "name": "__post_init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bencher.run": {
            "name": "run",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "func": [],
                "expected": []
            }
        },
        "Bencher.draw_chart": {
            "name": "draw_chart",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCase.make": {
            "name": "make",
            "location": 125,
            "return": [
                "Dict[(str, 'TestCase')]"
            ],
            "arguments": {
                "cls": [],
                "size": [
                    "Size"
                ],
                "expected": [],
                "number": []
            }
        }
    },
    "pyserde-master/bench/cattrs_class.py": {
        "new": {
            "name": "new",
            "location": 10,
            "return": [
                "Runner"
            ],
            "arguments": {
                "size": [
                    "Size"
                ]
            }
        },
        "se": {
            "name": "se",
            "location": 23,
            "return": [],
            "arguments": {
                "obj": [
                    "Union[(Small, Medium)]"
                ]
            }
        },
        "de": {
            "name": "de",
            "location": 27,
            "return": [],
            "arguments": {
                "cls": [
                    "Type"
                ],
                "data": [
                    "str"
                ]
            }
        },
        "asdict": {
            "name": "asdict",
            "location": 31,
            "return": [],
            "arguments": {
                "obj": [
                    "Union[(Small, Medium)]"
                ]
            }
        }
    },
    "pyserde-master/bench/dacite_class.py": {
        "de": {
            "name": "de",
            "location": 10,
            "return": [],
            "arguments": {
                "cls": [
                    "Type"
                ],
                "data": [
                    "str"
                ]
            }
        },
        "new": {
            "name": "new",
            "location": 14,
            "return": [
                "Runner"
            ],
            "arguments": {
                "size": [
                    "Size"
                ]
            }
        }
    },
    "pyserde-master/bench/data.py": {},
    "pyserde-master/bench/dataclasses_class.py": {
        "new": {
            "name": "new",
            "location": 28,
            "return": [
                "Runner"
            ],
            "arguments": {
                "size": [
                    "Size"
                ]
            }
        },
        "se": {
            "name": "se",
            "location": 37,
            "return": [],
            "arguments": {
                "obj": [
                    "Union[(Small, Medium)]"
                ]
            }
        },
        "astuple": {
            "name": "astuple",
            "location": 41,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "asdict": {
            "name": "asdict",
            "location": 45,
            "return": [],
            "arguments": {
                "d": []
            }
        }
    },
    "pyserde-master/bench/marshmallow_class.py": {
        "new": {
            "name": "new",
            "location": 33,
            "return": [
                "Runner"
            ],
            "arguments": {
                "size": [
                    "Size"
                ]
            }
        },
        "se": {
            "name": "se",
            "location": 46,
            "return": [],
            "arguments": {
                "schema": [
                    "ms.Schema"
                ],
                "obj": [
                    "Union[(Small, Medium)]"
                ]
            }
        },
        "de": {
            "name": "de",
            "location": 50,
            "return": [],
            "arguments": {
                "schema": [
                    "ms.Schema"
                ],
                "data": [
                    "str"
                ]
            }
        },
        "asdict": {
            "name": "asdict",
            "location": 54,
            "return": [],
            "arguments": {
                "schema": [
                    "ms.Schema"
                ],
                "data": [
                    "str"
                ]
            }
        },
        "SmallSchema.make_small": {
            "name": "make_small",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MediumSchema.make_medium": {
            "name": "make_medium",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "pyserde-master/bench/mashumaro_class.py": {
        "new": {
            "name": "new",
            "location": 27,
            "return": [
                "Runner"
            ],
            "arguments": {
                "size": [
                    "Size"
                ]
            }
        },
        "se": {
            "name": "se",
            "location": 40,
            "return": [],
            "arguments": {
                "obj": [
                    "Union[(Small, Medium)]"
                ]
            }
        },
        "de": {
            "name": "de",
            "location": 44,
            "return": [],
            "arguments": {
                "cls": [
                    "Type"
                ],
                "data": [
                    "str"
                ]
            }
        }
    },
    "pyserde-master/bench/pyserde_class.py": {
        "new": {
            "name": "new",
            "location": 30,
            "return": [
                "Runner"
            ],
            "arguments": {
                "size": [
                    "Size"
                ]
            }
        },
        "se": {
            "name": "se",
            "location": 43,
            "return": [],
            "arguments": {
                "obj": [
                    "Union[(Small, Medium)]"
                ]
            }
        },
        "de": {
            "name": "de",
            "location": 47,
            "return": [],
            "arguments": {
                "cls": [
                    "Type"
                ],
                "data": [
                    "str"
                ]
            }
        },
        "astuple": {
            "name": "astuple",
            "location": 51,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "asdict": {
            "name": "asdict",
            "location": 55,
            "return": [],
            "arguments": {
                "data": []
            }
        }
    },
    "pyserde-master/bench/raw.py": {
        "new": {
            "name": "new",
            "location": 10,
            "return": [
                "Runner"
            ],
            "arguments": {
                "size": [
                    "Size"
                ]
            }
        },
        "se_small": {
            "name": "se_small",
            "location": 29,
            "return": [],
            "arguments": {
                "s": [
                    "Small"
                ]
            }
        },
        "se_medium": {
            "name": "se_medium",
            "location": 33,
            "return": [],
            "arguments": {
                "m": [
                    "Medium"
                ]
            }
        },
        "de_small": {
            "name": "de_small",
            "location": 37,
            "return": [
                "Small"
            ],
            "arguments": {
                "data": [
                    "str"
                ]
            }
        },
        "_de_small": {
            "name": "_de_small",
            "location": 41,
            "return": [
                "Small"
            ],
            "arguments": {
                "dct": []
            }
        },
        "de_medium": {
            "name": "de_medium",
            "location": 45,
            "return": [
                "Medium"
            ],
            "arguments": {
                "data": [
                    "str"
                ]
            }
        },
        "astuple_small": {
            "name": "astuple_small",
            "location": 50,
            "return": [
                "Tuple[(int, str, float, bool)]"
            ],
            "arguments": {
                "sm": [
                    "Small"
                ]
            }
        },
        "astuple_medium": {
            "name": "astuple_medium",
            "location": 54,
            "return": [
                "Tuple[List[Tuple[(int, str, float, bool)]]]"
            ],
            "arguments": {
                "md": [
                    "Medium"
                ]
            }
        },
        "asdict_small": {
            "name": "asdict_small",
            "location": 58,
            "return": [],
            "arguments": {
                "s": [
                    "Small"
                ]
            }
        },
        "asdict_medium": {
            "name": "asdict_medium",
            "location": 62,
            "return": [],
            "arguments": {
                "m": [
                    "Medium"
                ]
            }
        }
    },
    "pyserde-master/bench/runner.py": {},
    "pyserde-master/bench/__init__.py": {},
    "pyserde-master/examples/any.py": {
        "main": {
            "name": "main",
            "location": 23,
            "return": [],
            "arguments": {}
        }
    },
    "pyserde-master/examples/collection.py": {
        "main": {
            "name": "main",
            "location": 31,
            "return": [],
            "arguments": {}
        }
    },
    "pyserde-master/examples/custom_class_serializer.py": {
        "serializer": {
            "name": "serializer",
            "location": 8,
            "return": [],
            "arguments": {
                "cls": [],
                "o": []
            }
        },
        "deserializer": {
            "name": "deserializer",
            "location": 21,
            "return": [],
            "arguments": {
                "cls": [],
                "o": []
            }
        },
        "main": {
            "name": "main",
            "location": 44,
            "return": [],
            "arguments": {}
        }
    },
    "pyserde-master/examples/custom_field_serializer.py": {
        "main": {
            "name": "main",
            "location": 17,
            "return": [],
            "arguments": {}
        }
    },
    "pyserde-master/examples/default.py": {
        "main": {
            "name": "main",
            "location": 17,
            "return": [],
            "arguments": {}
        }
    },
    "pyserde-master/examples/enum34.py": {},
    "pyserde-master/examples/env.py": {
        "main": {
            "name": "main",
            "location": 19,
            "return": [],
            "arguments": {}
        }
    },
    "pyserde-master/examples/flatten.py": {
        "main": {
            "name": "main",
            "location": 22,
            "return": [],
            "arguments": {}
        }
    },
    "pyserde-master/examples/forward_reference.py": {
        "main": {
            "name": "main",
            "location": 25,
            "return": [],
            "arguments": {}
        }
    },
    "pyserde-master/examples/generics.py": {
        "main": {
            "name": "main",
            "location": 27,
            "return": [],
            "arguments": {}
        }
    },
    "pyserde-master/examples/imported.py": {},
    "pyserde-master/examples/jsonfile.py": {
        "main": {
            "name": "main",
            "location": 42,
            "return": [],
            "arguments": {}
        }
    },
    "pyserde-master/examples/lazy_type_evaluation.py": {
        "main": {
            "name": "main",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "Foo.foo": {
            "name": "foo",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "cls": [
                    "Foo"
                ]
            }
        }
    },
    "pyserde-master/examples/literal.py": {
        "main": {
            "name": "main",
            "location": 22,
            "return": [],
            "arguments": {}
        }
    },
    "pyserde-master/examples/newtype.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [],
            "arguments": {}
        }
    },
    "pyserde-master/examples/rename.py": {
        "main": {
            "name": "main",
            "location": 23,
            "return": [],
            "arguments": {}
        }
    },
    "pyserde-master/examples/rename_all.py": {
        "main": {
            "name": "main",
            "location": 23,
            "return": [],
            "arguments": {}
        }
    },
    "pyserde-master/examples/runner.py": {
        "run_all": {
            "name": "run_all",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 64,
            "return": [],
            "arguments": {
                "module": []
            }
        }
    },
    "pyserde-master/examples/simple.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [],
            "arguments": {}
        }
    },
    "pyserde-master/examples/skip.py": {
        "main": {
            "name": "main",
            "location": 35,
            "return": [],
            "arguments": {}
        }
    },
    "pyserde-master/examples/tomlfile.py": {
        "main": {
            "name": "main",
            "location": 47,
            "return": [],
            "arguments": {}
        }
    },
    "pyserde-master/examples/type_check_strict.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [],
            "arguments": {}
        }
    },
    "pyserde-master/examples/type_datetime.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [],
            "arguments": {}
        }
    },
    "pyserde-master/examples/type_decimal.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [],
            "arguments": {}
        }
    },
    "pyserde-master/examples/union.py": {
        "main": {
            "name": "main",
            "location": 28,
            "return": [],
            "arguments": {}
        }
    },
    "pyserde-master/examples/union_operator.py": {
        "main": {
            "name": "main",
            "location": 28,
            "return": [],
            "arguments": {}
        }
    },
    "pyserde-master/examples/union_tagging.py": {
        "external_tagging": {
            "name": "external_tagging",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "internal_tagging": {
            "name": "internal_tagging",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "adjacent_tagging": {
            "name": "adjacent_tagging",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "untagged": {
            "name": "untagged",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 73,
            "return": [],
            "arguments": {}
        }
    },
    "pyserde-master/examples/user_exception.py": {
        "main": {
            "name": "main",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "Foo.__post_init__": {
            "name": "__post_init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyserde-master/examples/yamlfile.py": {
        "main": {
            "name": "main",
            "location": 77,
            "return": [],
            "arguments": {}
        }
    },
    "pyserde-master/examples/__init__.py": {},
    "pyserde-master/examples/webapi/app.py": {
        "hello_world": {
            "name": "hello_world",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "todos": {
            "name": "todos",
            "location": 24,
            "return": [],
            "arguments": {}
        }
    },
    "pyserde-master/serde/compat.py": {
        "get_origin": {
            "name": "get_origin",
            "location": 109,
            "return": [],
            "arguments": {
                "typ": []
            }
        },
        "get_args": {
            "name": "get_args",
            "location": 119,
            "return": [],
            "arguments": {
                "typ": []
            }
        },
        "typename": {
            "name": "typename",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {
                "typ": [],
                "with_typing_module": [
                    "bool"
                ]
            }
        },
        "type_args": {
            "name": "type_args",
            "location": 226,
            "return": [],
            "arguments": {
                "typ": []
            }
        },
        "union_args": {
            "name": "union_args",
            "location": 240,
            "return": [
                "Tuple"
            ],
            "arguments": {
                "typ": [
                    "Union"
                ]
            }
        },
        "dataclass_fields": {
            "name": "dataclass_fields",
            "location": 258,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "cls": [
                    "Type"
                ]
            }
        },
        "iter_types": {
            "name": "iter_types",
            "location": 287,
            "return": [
                "Iterator[Union[(Type, typing.Any)]]"
            ],
            "arguments": {
                "cls": [
                    "Type"
                ]
            }
        },
        "iter_unions": {
            "name": "iter_unions",
            "location": 333,
            "return": [
                "Iterator[Type]"
            ],
            "arguments": {
                "cls": [
                    "Type"
                ]
            }
        },
        "iter_literals": {
            "name": "iter_literals",
            "location": 362,
            "return": [
                "Iterator[Type]"
            ],
            "arguments": {
                "cls": [
                    "Type"
                ]
            }
        },
        "is_union": {
            "name": "is_union",
            "location": 392,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": []
            }
        },
        "is_opt": {
            "name": "is_opt",
            "location": 412,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": []
            }
        },
        "is_bare_opt": {
            "name": "is_bare_opt",
            "location": 443,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": []
            }
        },
        "is_list": {
            "name": "is_list",
            "location": 456,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": []
            }
        },
        "is_bare_list": {
            "name": "is_bare_list",
            "location": 472,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": []
            }
        },
        "is_tuple": {
            "name": "is_tuple",
            "location": 485,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": []
            }
        },
        "is_bare_tuple": {
            "name": "is_bare_tuple",
            "location": 495,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": []
            }
        },
        "is_set": {
            "name": "is_set",
            "location": 508,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": []
            }
        },
        "is_bare_set": {
            "name": "is_bare_set",
            "location": 524,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": []
            }
        },
        "is_dict": {
            "name": "is_dict",
            "location": 537,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": []
            }
        },
        "is_bare_dict": {
            "name": "is_bare_dict",
            "location": 553,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": []
            }
        },
        "is_none": {
            "name": "is_none",
            "location": 566,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": []
            }
        },
        "is_enum": {
            "name": "is_enum",
            "location": 581,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": []
            }
        },
        "is_primitive": {
            "name": "is_primitive",
            "location": 591,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": []
            }
        },
        "is_new_type_primitive": {
            "name": "is_new_type_primitive",
            "location": 608,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": []
            }
        },
        "is_generic": {
            "name": "is_generic",
            "location": 619,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": []
            }
        },
        "is_literal": {
            "name": "is_literal",
            "location": 635,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": []
            }
        },
        "is_any": {
            "name": "is_any",
            "location": 653,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": []
            }
        },
        "is_str_serializable": {
            "name": "is_str_serializable",
            "location": 660,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": []
            }
        },
        "is_datetime": {
            "name": "is_datetime",
            "location": 667,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": []
            }
        },
        "is_str_serializable_instance": {
            "name": "is_str_serializable_instance",
            "location": 674,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": []
            }
        },
        "is_datetime_instance": {
            "name": "is_datetime_instance",
            "location": 678,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": []
            }
        },
        "find_generic_arg": {
            "name": "find_generic_arg",
            "location": 682,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [],
                "field": []
            }
        },
        "get_generic_arg": {
            "name": "get_generic_arg",
            "location": 713,
            "return": [],
            "arguments": {
                "typ": [],
                "index": []
            }
        },
        "has_default": {
            "name": "has_default",
            "location": 735,
            "return": [
                "bool"
            ],
            "arguments": {
                "field": []
            }
        },
        "has_default_factory": {
            "name": "has_default_factory",
            "location": 751,
            "return": [
                "bool"
            ],
            "arguments": {
                "field": []
            }
        },
        "get_np_origin": {
            "name": "get_np_origin",
            "location": 54,
            "return": [],
            "arguments": {
                "tp": []
            }
        },
        "get_np_args": {
            "name": "get_np_args",
            "location": 57,
            "return": [],
            "arguments": {
                "tp": []
            }
        }
    },
    "pyserde-master/serde/core.py": {
        "init": {
            "name": "init",
            "location": 63,
            "return": [],
            "arguments": {
                "debug": [
                    "bool"
                ]
            }
        },
        "raise_unsupported_type": {
            "name": "raise_unsupported_type",
            "location": 139,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "gen": {
            "name": "gen",
            "location": 144,
            "return": [
                "str"
            ],
            "arguments": {
                "code": [
                    "str"
                ],
                "globals": [
                    "Dict"
                ],
                "locals": [
                    "Dict"
                ]
            }
        },
        "add_func": {
            "name": "add_func",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "serde_scope": [
                    "SerdeScope"
                ],
                "func_name": [
                    "str"
                ],
                "func_code": [
                    "str"
                ],
                "globals": [
                    "Dict"
                ]
            }
        },
        "is_instance": {
            "name": "is_instance",
            "location": 177,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "Any"
                ],
                "typ": [
                    "Type"
                ]
            }
        },
        "is_opt_instance": {
            "name": "is_opt_instance",
            "location": 213,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "Any"
                ],
                "typ": [
                    "Type"
                ]
            }
        },
        "is_union_instance": {
            "name": "is_union_instance",
            "location": 220,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "Any"
                ],
                "typ": [
                    "Type"
                ]
            }
        },
        "is_list_instance": {
            "name": "is_list_instance",
            "location": 227,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "Any"
                ],
                "typ": [
                    "Type"
                ]
            }
        },
        "is_set_instance": {
            "name": "is_set_instance",
            "location": 237,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "Any"
                ],
                "typ": [
                    "Type"
                ]
            }
        },
        "is_tuple_instance": {
            "name": "is_tuple_instance",
            "location": 247,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "Any"
                ],
                "typ": [
                    "Type"
                ]
            }
        },
        "is_dict_instance": {
            "name": "is_dict_instance",
            "location": 258,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "Any"
                ],
                "typ": [
                    "Type"
                ]
            }
        },
        "is_generic_instance": {
            "name": "is_generic_instance",
            "location": 271,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "Any"
                ],
                "typ": [
                    "Type"
                ]
            }
        },
        "skip_if_false": {
            "name": "skip_if_false",
            "location": 303,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "skip_if_default": {
            "name": "skip_if_default",
            "location": 307,
            "return": [],
            "arguments": {
                "v": [],
                "default": []
            }
        },
        "field": {
            "name": "field",
            "location": 318,
            "return": [],
            "arguments": {}
        },
        "fields": {
            "name": "fields",
            "location": 529,
            "return": [
                "List[F]"
            ],
            "arguments": {
                "field_cls": [
                    "Type[F]"
                ],
                "cls": [
                    "Type"
                ]
            }
        },
        "conv": {
            "name": "conv",
            "location": 536,
            "return": [
                "str"
            ],
            "arguments": {
                "f": [
                    "Field"
                ],
                "case": [
                    "Optional[str]"
                ]
            }
        },
        "union_func_name": {
            "name": "union_func_name",
            "location": 553,
            "return": [
                "str"
            ],
            "arguments": {
                "prefix": [
                    "str"
                ],
                "union_args": [
                    "List[Type]"
                ]
            }
        },
        "literal_func_name": {
            "name": "literal_func_name",
            "location": 568,
            "return": [
                "str"
            ],
            "arguments": {
                "literal_args": [
                    "List[Any]"
                ]
            }
        },
        "ensure": {
            "name": "ensure",
            "location": 634,
            "return": [],
            "arguments": {
                "expr": [],
                "description": []
            }
        },
        "should_impl_dataclass": {
            "name": "should_impl_dataclass",
            "location": 639,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "render_type_check": {
            "name": "render_type_check",
            "location": 676,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "Type"
                ]
            }
        },
        "SerdeScope.__repr__": {
            "name": "__repr__",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerdeScope._justify": {
            "name": "_justify",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ],
                "length": []
            }
        },
        "Func.__call__": {
            "name": "__call__",
            "location": 292,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "Func.name": {
            "name": "name",
            "location": 296,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.from_dataclass": {
            "name": "from_dataclass",
            "location": 442,
            "return": [
                "'Field'"
            ],
            "arguments": {
                "cls": [],
                "f": [
                    "dataclasses.Field"
                ]
            }
        },
        "Field.to_dataclass": {
            "name": "to_dataclass",
            "location": 493,
            "return": [
                "dataclasses.Field"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.mangle": {
            "name": "mangle",
            "location": 509,
            "return": [
                "str"
            ],
            "arguments": {
                "field": [
                    "dataclasses.Field"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Field.conv_name": {
            "name": "conv_name",
            "location": 515,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "case": [
                    "Optional[str]"
                ]
            }
        },
        "Field.supports_default": {
            "name": "supports_default",
            "location": 522,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tagging.is_external": {
            "name": "is_external",
            "location": 600,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tagging.is_internal": {
            "name": "is_internal",
            "location": 603,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tagging.is_adjacent": {
            "name": "is_adjacent",
            "location": 606,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tagging.is_untagged": {
            "name": "is_untagged",
            "location": 609,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tagging.is_taggable": {
            "name": "is_taggable",
            "location": 613,
            "return": [],
            "arguments": {
                "cls": [],
                "typ": []
            }
        },
        "Tagging.check": {
            "name": "check",
            "location": 616,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeCheck.is_strict": {
            "name": "is_strict",
            "location": 737,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeCheck.is_coerce": {
            "name": "is_coerce",
            "location": 740,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeCheck.__call__": {
            "name": "__call__",
            "location": 743,
            "return": [
                "'TypeCheck'"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyserde-master/serde/de.py": {
        "serde_custom_class_deserializer": {
            "name": "serde_custom_class_deserializer",
            "location": 92,
            "return": [],
            "arguments": {
                "cls": [
                    "Type"
                ],
                "datavar": [],
                "value": [],
                "custom": [
                    "DeserializeFunc"
                ],
                "default": [
                    "Callable"
                ]
            }
        },
        "default_deserializer": {
            "name": "default_deserializer",
            "location": 108,
            "return": [],
            "arguments": {
                "_cls": [
                    "Type"
                ],
                "obj": []
            }
        },
        "_make_deserialize": {
            "name": "_make_deserialize",
            "location": 115,
            "return": [],
            "arguments": {
                "cls_name": [
                    "str"
                ],
                "fields": []
            }
        },
        "deserialize": {
            "name": "deserialize",
            "location": 140,
            "return": [],
            "arguments": {
                "_cls": [],
                "rename_all": [
                    "Optional[str]"
                ],
                "reuse_instances_default": [
                    "bool"
                ],
                "deserializer": [
                    "Optional[DeserializeFunc]"
                ],
                "tagging": [
                    "Tagging"
                ]
            }
        },
        "is_deserializable": {
            "name": "is_deserializable",
            "location": 285,
            "return": [
                "bool"
            ],
            "arguments": {
                "instance_or_class": [
                    "Any"
                ]
            }
        },
        "from_obj": {
            "name": "from_obj",
            "location": 318,
            "return": [],
            "arguments": {
                "c": [
                    "Type"
                ],
                "o": [
                    "Any"
                ],
                "named": [
                    "bool"
                ],
                "reuse_instances": [
                    "bool"
                ],
                "type_check": [
                    "TypeCheck"
                ]
            }
        },
        "from_dict": {
            "name": "from_dict",
            "location": 417,
            "return": [],
            "arguments": {
                "cls": [],
                "o": [],
                "reuse_instances": [
                    "bool"
                ],
                "type_check": [
                    "TypeCheck"
                ]
            }
        },
        "from_tuple": {
            "name": "from_tuple",
            "location": 440,
            "return": [],
            "arguments": {
                "cls": [],
                "o": [],
                "reuse_instances": [
                    "bool"
                ],
                "type_check": [
                    "TypeCheck"
                ]
            }
        },
        "to_arg": {
            "name": "to_arg",
            "location": 804,
            "return": [
                "DeField"
            ],
            "arguments": {
                "f": [
                    "DeField"
                ],
                "index": [],
                "rename_all": [
                    "Optional[str]"
                ]
            }
        },
        "to_iter_arg": {
            "name": "to_iter_arg",
            "location": 811,
            "return": [
                "DeField"
            ],
            "arguments": {
                "f": [
                    "DeField"
                ]
            }
        },
        "render_from_iter": {
            "name": "render_from_iter",
            "location": 817,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "Type"
                ],
                "custom": [
                    "Optional[DeserializeFunc]"
                ]
            }
        },
        "render_from_dict": {
            "name": "render_from_dict",
            "location": 852,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "Type"
                ],
                "rename_all": [
                    "Optional[str]"
                ],
                "custom": [
                    "Optional[DeserializeFunc]"
                ]
            }
        },
        "render_union_func": {
            "name": "render_union_func",
            "location": 889,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "Type"
                ],
                "union_args": [
                    "List[Type]"
                ],
                "tagging": [
                    "Tagging"
                ]
            }
        },
        "render_literal_func": {
            "name": "render_literal_func",
            "location": 947,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "Type"
                ],
                "literal_args": [
                    "List[Any]"
                ],
                "tagging": [
                    "Tagging"
                ]
            }
        },
        "deserialize.wrap": {
            "name": "wrap",
            "location": 205,
            "return": [],
            "arguments": {
                "cls": [
                    "Type"
                ]
            }
        },
        "Deserializer.deserialize": {
            "name": "deserialize",
            "location": 307,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "DeField.__getitem__": {
            "name": "__getitem__",
            "location": 473,
            "return": [
                "'DeField'"
            ],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "DeField.key_field": {
            "name": "key_field",
            "location": 492,
            "return": [
                "'DeField'"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeField.value_field": {
            "name": "value_field",
            "location": 501,
            "return": [
                "'DeField'"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeField.data": {
            "name": "data",
            "location": 515,
            "return": [],
            "arguments": {
                "self": [],
                "d": []
            }
        },
        "DeField.data_or": {
            "name": "data_or",
            "location": 518,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InnerField.data": {
            "name": "data",
            "location": 536,
            "return": [],
            "arguments": {
                "self": [],
                "d": []
            }
        },
        "Renderer.render": {
            "name": "render",
            "location": 554,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "DeField"
                ]
            }
        },
        "Renderer.custom_field_deserializer": {
            "name": "custom_field_deserializer",
            "location": 618,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "DeField"
                ]
            }
        },
        "Renderer.custom_class_deserializer": {
            "name": "custom_class_deserializer",
            "location": 625,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "DeField"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "Renderer.dataclass": {
            "name": "dataclass",
            "location": 635,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "DeField"
                ]
            }
        },
        "Renderer.opt": {
            "name": "opt",
            "location": 651,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "DeField"
                ]
            }
        },
        "Renderer.list": {
            "name": "list",
            "location": 682,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "DeField"
                ]
            }
        },
        "Renderer.set": {
            "name": "set",
            "location": 698,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "DeField"
                ]
            }
        },
        "Renderer.tuple": {
            "name": "tuple",
            "location": 714,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "DeField"
                ]
            }
        },
        "Renderer.dict": {
            "name": "dict",
            "location": 739,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "DeField"
                ]
            }
        },
        "Renderer.enum": {
            "name": "enum",
            "location": 760,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "DeField"
                ]
            }
        },
        "Renderer.primitive": {
            "name": "primitive",
            "location": 763,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "DeField"
                ]
            }
        },
        "Renderer.c_tor": {
            "name": "c_tor",
            "location": 778,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "DeField"
                ]
            }
        },
        "Renderer.c_tor_with_check": {
            "name": "c_tor_with_check",
            "location": 781,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "DeField"
                ],
                "ctor": [
                    "Optional[str]"
                ]
            }
        },
        "Renderer.union_func": {
            "name": "union_func",
            "location": 786,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "DeField"
                ]
            }
        },
        "Renderer.literal": {
            "name": "literal",
            "location": 790,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "DeField"
                ]
            }
        },
        "Renderer.default": {
            "name": "default",
            "location": 794,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "DeField"
                ],
                "code": [
                    "str"
                ]
            }
        }
    },
    "pyserde-master/serde/inspect.py": {
        "inspect": {
            "name": "inspect",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 34,
            "return": [],
            "arguments": {
                "arg": []
            }
        }
    },
    "pyserde-master/serde/json.py": {
        "to_json": {
            "name": "to_json",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "Any"
                ],
                "se": [
                    "Type[Serializer]"
                ],
                "type_check": [
                    "TypeCheck"
                ]
            }
        },
        "from_json": {
            "name": "from_json",
            "location": 67,
            "return": [
                "T"
            ],
            "arguments": {
                "c": [
                    "Type[T]"
                ],
                "s": [
                    "Union[(str, bytes)]"
                ],
                "de": [
                    "Type[Deserializer]"
                ],
                "type_check": [
                    "TypeCheck"
                ]
            }
        },
        "json_dumps": {
            "name": "json_dumps",
            "location": 26,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "json_loads": {
            "name": "json_loads",
            "location": 34,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "JsonSerializer.serialize": {
            "name": "serialize",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "JsonDeserializer.deserialize": {
            "name": "deserialize",
            "location": 49,
            "return": [],
            "arguments": {
                "cls": [],
                "s": [
                    "Union[(bytes, str)]"
                ]
            }
        }
    },
    "pyserde-master/serde/msgpack.py": {
        "to_msgpack": {
            "name": "to_msgpack",
            "location": 37,
            "return": [
                "bytes"
            ],
            "arguments": {
                "obj": [
                    "Any"
                ],
                "se": [
                    "Type[Serializer]"
                ],
                "named": [
                    "bool"
                ],
                "ext_dict": [
                    "Dict[(Type, int)]"
                ],
                "type_check": [
                    "TypeCheck"
                ]
            }
        },
        "from_msgpack": {
            "name": "from_msgpack",
            "location": 72,
            "return": [
                "Type[T]"
            ],
            "arguments": {
                "c": [
                    "Type[T]"
                ],
                "s": [
                    "str"
                ],
                "de": [
                    "Type[Deserializer]"
                ],
                "named": [
                    "bool"
                ],
                "ext_dict": [
                    "Dict[(int, Type)]"
                ],
                "type_check": [
                    "TypeCheck"
                ]
            }
        },
        "MsgPackSerializer.serialize": {
            "name": "serialize",
            "location": 20,
            "return": [
                "bytes"
            ],
            "arguments": {
                "cls": [],
                "obj": [],
                "use_bin_type": [
                    "bool"
                ],
                "ext_type_code": [
                    "int"
                ]
            }
        },
        "MsgPackDeserializer.deserialize": {
            "name": "deserialize",
            "location": 33,
            "return": [],
            "arguments": {
                "cls": [],
                "s": [],
                "raw": [
                    "bool"
                ],
                "use_list": [
                    "bool"
                ]
            }
        }
    },
    "pyserde-master/serde/numpy.py": {
        "fullname": {
            "name": "fullname",
            "location": 6,
            "return": [],
            "arguments": {
                "klass": []
            }
        },
        "is_numpy_type": {
            "name": "is_numpy_type",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": []
            }
        },
        "is_numpy_available": {
            "name": "is_numpy_available",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "encode_numpy": {
            "name": "encode_numpy",
            "location": 27,
            "return": [],
            "arguments": {
                "obj": [
                    "Any"
                ]
            }
        },
        "is_bare_numpy_array": {
            "name": "is_bare_numpy_array",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": []
            }
        },
        "is_numpy_scalar": {
            "name": "is_numpy_scalar",
            "location": 98,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": []
            }
        },
        "is_numpy_datetime": {
            "name": "is_numpy_datetime",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": []
            }
        },
        "serialize_numpy_scalar": {
            "name": "serialize_numpy_scalar",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "arg": []
            }
        },
        "deserialize_numpy_scalar": {
            "name": "deserialize_numpy_scalar",
            "location": 107,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "is_numpy_array": {
            "name": "is_numpy_array",
            "location": 110,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": []
            }
        },
        "serialize_numpy_array": {
            "name": "serialize_numpy_array",
            "location": 113,
            "return": [
                "str"
            ],
            "arguments": {
                "arg": []
            }
        },
        "serialize_numpy_datetime": {
            "name": "serialize_numpy_datetime",
            "location": 116,
            "return": [
                "str"
            ],
            "arguments": {
                "arg": []
            }
        },
        "deserialize_numpy_array": {
            "name": "deserialize_numpy_array",
            "location": 119,
            "return": [
                "str"
            ],
            "arguments": {
                "arg": []
            }
        },
        "deserialize_numpy_array_direct": {
            "name": "deserialize_numpy_array_direct",
            "location": 122,
            "return": [],
            "arguments": {
                "typ": [],
                "arg": []
            }
        }
    },
    "pyserde-master/serde/se.py": {
        "default_serializer": {
            "name": "default_serializer",
            "location": 88,
            "return": [],
            "arguments": {
                "_cls": [
                    "Type"
                ],
                "obj": []
            }
        },
        "serde_custom_class_serializer": {
            "name": "serde_custom_class_serializer",
            "location": 95,
            "return": [],
            "arguments": {
                "cls": [
                    "Type"
                ],
                "obj": [],
                "custom": [
                    "SerializeFunc"
                ],
                "default": [
                    "Callable"
                ]
            }
        },
        "_make_serialize": {
            "name": "_make_serialize",
            "location": 114,
            "return": [],
            "arguments": {
                "cls_name": [
                    "str"
                ],
                "fields": []
            }
        },
        "serialize": {
            "name": "serialize",
            "location": 139,
            "return": [],
            "arguments": {
                "_cls": [],
                "rename_all": [
                    "Optional[str]"
                ],
                "reuse_instances_default": [
                    "bool"
                ],
                "convert_sets_default": [
                    "bool"
                ],
                "serializer": [
                    "Optional[SerializeFunc]"
                ],
                "tagging": [
                    "Tagging"
                ]
            }
        },
        "is_serializable": {
            "name": "is_serializable",
            "location": 275,
            "return": [
                "bool"
            ],
            "arguments": {
                "instance_or_class": [
                    "Any"
                ]
            }
        },
        "to_obj": {
            "name": "to_obj",
            "location": 294,
            "return": [],
            "arguments": {
                "o": [],
                "named": [
                    "bool"
                ],
                "reuse_instances": [
                    "bool"
                ],
                "convert_sets": [
                    "bool"
                ],
                "c": [
                    "Type"
                ],
                "type_check": [
                    "TypeCheck"
                ]
            }
        },
        "astuple": {
            "name": "astuple",
            "location": 350,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "to_tuple": {
            "name": "to_tuple",
            "location": 357,
            "return": [
                "Any"
            ],
            "arguments": {
                "o": [],
                "reuse_instances": [
                    "bool"
                ],
                "convert_sets": [
                    "bool"
                ],
                "type_check": [
                    "TypeCheck"
                ]
            }
        },
        "asdict": {
            "name": "asdict",
            "location": 380,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "to_dict": {
            "name": "to_dict",
            "location": 387,
            "return": [
                "Any"
            ],
            "arguments": {
                "o": [],
                "reuse_instances": [
                    "bool"
                ],
                "convert_sets": [
                    "bool"
                ],
                "type_check": [
                    "TypeCheck"
                ]
            }
        },
        "sefields": {
            "name": "sefields",
            "location": 436,
            "return": [
                "Iterator[SeField]"
            ],
            "arguments": {
                "cls": [
                    "Type"
                ]
            }
        },
        "render_to_tuple": {
            "name": "render_to_tuple",
            "location": 446,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "Type"
                ],
                "custom": [
                    "Optional[SerializeFunc]"
                ]
            }
        },
        "render_to_dict": {
            "name": "render_to_dict",
            "location": 473,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "Type"
                ],
                "case": [
                    "Optional[str]"
                ],
                "custom": [
                    "Optional[SerializeFunc]"
                ]
            }
        },
        "render_union_func": {
            "name": "render_union_func",
            "location": 508,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "Type"
                ],
                "union_args": [
                    "List[Type]"
                ],
                "tagging": [
                    "Tagging"
                ]
            }
        },
        "enum_value": {
            "name": "enum_value",
            "location": 778,
            "return": [],
            "arguments": {
                "cls": [],
                "e": []
            }
        },
        "Serializer.serialize": {
            "name": "serialize",
            "location": 110,
            "return": [],
            "arguments": {
                "cls": [],
                "obj": []
            }
        },
        "serialize.wrap": {
            "name": "wrap",
            "location": 205,
            "return": [],
            "arguments": {
                "cls": [
                    "Type"
                ]
            }
        },
        "SeField.varname": {
            "name": "varname",
            "location": 419,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeField.__getitem__": {
            "name": "__getitem__",
            "location": 431,
            "return": [
                "'SeField'"
            ],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "LRenderer.render": {
            "name": "render",
            "location": 562,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "SeField"
                ]
            }
        },
        "LRenderer.flatten": {
            "name": "flatten",
            "location": 571,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "SeField"
                ]
            }
        },
        "Renderer.render": {
            "name": "render",
            "location": 590,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "SeField"
                ]
            }
        },
        "Renderer.custom_field_serializer": {
            "name": "custom_field_serializer",
            "location": 672,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "SeField"
                ]
            }
        },
        "Renderer.dataclass": {
            "name": "dataclass",
            "location": 679,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "SeField"
                ]
            }
        },
        "Renderer.opt": {
            "name": "opt",
            "location": 695,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "SeField"
                ]
            }
        },
        "Renderer.list": {
            "name": "list",
            "location": 706,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "SeField"
                ]
            }
        },
        "Renderer.set": {
            "name": "set",
            "location": 717,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "SeField"
                ]
            }
        },
        "Renderer.tuple": {
            "name": "tuple",
            "location": 731,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "SeField"
                ]
            }
        },
        "Renderer.dict": {
            "name": "dict",
            "location": 745,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "SeField"
                ]
            }
        },
        "Renderer.enum": {
            "name": "enum",
            "location": 758,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "SeField"
                ]
            }
        },
        "Renderer.primitive": {
            "name": "primitive",
            "location": 761,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "SeField"
                ]
            }
        },
        "Renderer.string": {
            "name": "string",
            "location": 767,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "SeField"
                ]
            }
        },
        "Renderer.union_func": {
            "name": "union_func",
            "location": 770,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "SeField"
                ]
            }
        },
        "Renderer.literal": {
            "name": "literal",
            "location": 774,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "SeField"
                ]
            }
        }
    },
    "pyserde-master/serde/toml.py": {
        "to_toml": {
            "name": "to_toml",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [],
                "se": [
                    "Type[Serializer]"
                ],
                "type_check": [
                    "TypeCheck"
                ]
            }
        },
        "from_toml": {
            "name": "from_toml",
            "location": 41,
            "return": [
                "T"
            ],
            "arguments": {
                "c": [
                    "Type[T]"
                ],
                "s": [
                    "str"
                ],
                "de": [
                    "Type[Deserializer]"
                ],
                "type_check": [
                    "TypeCheck"
                ]
            }
        },
        "TomlSerializer.serialize": {
            "name": "serialize",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "obj": []
            }
        },
        "TomlDeserializer.deserialize": {
            "name": "deserialize",
            "location": 25,
            "return": [],
            "arguments": {
                "cls": [],
                "s": []
            }
        }
    },
    "pyserde-master/serde/yaml.py": {
        "to_yaml": {
            "name": "to_yaml",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [],
                "se": [
                    "Type[Serializer]"
                ],
                "type_check": [
                    "TypeCheck"
                ]
            }
        },
        "from_yaml": {
            "name": "from_yaml",
            "location": 40,
            "return": [
                "T"
            ],
            "arguments": {
                "c": [
                    "Type[T]"
                ],
                "s": [
                    "str"
                ],
                "de": [
                    "Type[Deserializer]"
                ],
                "type_check": [
                    "TypeCheck"
                ]
            }
        },
        "YamlSerializer.serialize": {
            "name": "serialize",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "obj": []
            }
        },
        "YamlDeserializer.deserialize": {
            "name": "deserialize",
            "location": 24,
            "return": [],
            "arguments": {
                "cls": [],
                "s": []
            }
        }
    },
    "pyserde-master/serde/__init__.py": {
        "serde": {
            "name": "serde",
            "location": 104,
            "return": [],
            "arguments": {
                "_cls": []
            }
        },
        "serde.wrap": {
            "name": "wrap",
            "location": 109,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "pyserde-master/tests/common.py": {
        "param": {
            "name": "param",
            "location": 45,
            "return": [],
            "arguments": {
                "val": [],
                "typ": [],
                "filter": [
                    "Optional[Callable]"
                ]
            }
        },
        "toml_not_supported": {
            "name": "toml_not_supported",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "se": [],
                "de": [],
                "opt": []
            }
        },
        "make_id_from_dict": {
            "name": "make_id_from_dict",
            "location": 124,
            "return": [
                "str"
            ],
            "arguments": {
                "d": [
                    "Dict"
                ]
            }
        },
        "opt_case_ids": {
            "name": "opt_case_ids",
            "location": 132,
            "return": [],
            "arguments": {}
        },
        "type_ids": {
            "name": "type_ids",
            "location": 136,
            "return": [],
            "arguments": {}
        },
        "type_combinations_ids": {
            "name": "type_combinations_ids",
            "location": 146,
            "return": [],
            "arguments": {}
        },
        "type_ids.make_id": {
            "name": "make_id",
            "location": 139,
            "return": [],
            "arguments": {
                "pair": [
                    "Tuple"
                ]
            }
        },
        "type_combinations_ids.make_id": {
            "name": "make_id",
            "location": 149,
            "return": [],
            "arguments": {
                "quad": [
                    "Tuple"
                ]
            }
        }
    },
    "pyserde-master/tests/data.py": {},
    "pyserde-master/tests/imported.py": {},
    "pyserde-master/tests/test_basics.py": {
        "test_simple": {
            "name": "test_simple",
            "location": 37,
            "return": [],
            "arguments": {
                "se": [],
                "de": [],
                "opt": [],
                "t": [],
                "T": [],
                "f": []
            }
        },
        "test_simple_with_reuse_instances": {
            "name": "test_simple_with_reuse_instances",
            "location": 72,
            "return": [],
            "arguments": {
                "se": [],
                "de": [],
                "opt": [],
                "t": [],
                "T": [],
                "filter": []
            }
        },
        "test_non_dataclass": {
            "name": "test_non_dataclass",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "test_string_forward_reference_works": {
            "name": "test_string_forward_reference_works",
            "location": 133,
            "return": [],
            "arguments": {}
        },
        "test_unresolved_forward_reference_throws": {
            "name": "test_unresolved_forward_reference_throws",
            "location": 142,
            "return": [],
            "arguments": {}
        },
        "test_list": {
            "name": "test_list",
            "location": 158,
            "return": [],
            "arguments": {
                "se": [],
                "de": [],
                "opt": []
            }
        },
        "test_dict_with_non_str_keys": {
            "name": "test_dict_with_non_str_keys",
            "location": 171,
            "return": [],
            "arguments": {
                "se": [],
                "de": [],
                "opt": []
            }
        },
        "test_enum": {
            "name": "test_enum",
            "location": 187,
            "return": [],
            "arguments": {
                "se": [],
                "de": [],
                "opt": []
            }
        },
        "test_enum_imported": {
            "name": "test_enum_imported",
            "location": 236,
            "return": [],
            "arguments": {
                "se": [],
                "de": []
            }
        },
        "test_tuple": {
            "name": "test_tuple",
            "location": 247,
            "return": [],
            "arguments": {
                "se": [],
                "de": [],
                "opt": []
            }
        },
        "test_single_element_tuples": {
            "name": "test_single_element_tuples",
            "location": 297,
            "return": [],
            "arguments": {
                "se": [],
                "de": []
            }
        },
        "test_dataclass_default_factory": {
            "name": "test_dataclass_default_factory",
            "location": 310,
            "return": [],
            "arguments": {
                "se": [],
                "de": []
            }
        },
        "test_default": {
            "name": "test_default",
            "location": 324,
            "return": [],
            "arguments": {
                "se": [],
                "de": []
            }
        },
        "test_list_pri": {
            "name": "test_list_pri",
            "location": 361,
            "return": [],
            "arguments": {
                "se": [],
                "de": []
            }
        },
        "test_dict_pri": {
            "name": "test_dict_pri",
            "location": 370,
            "return": [],
            "arguments": {
                "se": [],
                "de": []
            }
        },
        "test_json": {
            "name": "test_json",
            "location": 378,
            "return": [],
            "arguments": {}
        },
        "test_msgpack": {
            "name": "test_msgpack",
            "location": 389,
            "return": [],
            "arguments": {}
        },
        "test_msgpack_unnamed": {
            "name": "test_msgpack_unnamed",
            "location": 396,
            "return": [],
            "arguments": {}
        },
        "test_toml": {
            "name": "test_toml",
            "location": 403,
            "return": [],
            "arguments": {}
        },
        "test_rename": {
            "name": "test_rename",
            "location": 430,
            "return": [],
            "arguments": {
                "se": [],
                "de": []
            }
        },
        "test_rename_msgpack": {
            "name": "test_rename_msgpack",
            "location": 440,
            "return": [],
            "arguments": {
                "se": [],
                "de": []
            }
        },
        "test_rename_formats": {
            "name": "test_rename_formats",
            "location": 451,
            "return": [],
            "arguments": {
                "se": [],
                "de": []
            }
        },
        "test_skip_if": {
            "name": "test_skip_if",
            "location": 461,
            "return": [],
            "arguments": {
                "se": [],
                "de": []
            }
        },
        "test_skip_if_false": {
            "name": "test_skip_if_false",
            "location": 477,
            "return": [],
            "arguments": {
                "se": [],
                "de": []
            }
        },
        "test_skip_if_overrides_skip_if_false": {
            "name": "test_skip_if_overrides_skip_if_false",
            "location": 487,
            "return": [],
            "arguments": {
                "se": [],
                "de": []
            }
        },
        "test_skip_if_default": {
            "name": "test_skip_if_default",
            "location": 500,
            "return": [],
            "arguments": {
                "se": [],
                "de": []
            }
        },
        "test_inheritance": {
            "name": "test_inheritance",
            "location": 515,
            "return": [],
            "arguments": {
                "se": [],
                "de": []
            }
        },
        "test_duplicate_decorators": {
            "name": "test_duplicate_decorators",
            "location": 536,
            "return": [],
            "arguments": {
                "se": [],
                "de": []
            }
        },
        "test_ext": {
            "name": "test_ext",
            "location": 552,
            "return": [],
            "arguments": {
                "se": [],
                "de": []
            }
        },
        "test_exception_on_not_supported_types": {
            "name": "test_exception_on_not_supported_types",
            "location": 591,
            "return": [],
            "arguments": {}
        },
        "test_dataclass_inheritance": {
            "name": "test_dataclass_inheritance",
            "location": 609,
            "return": [],
            "arguments": {}
        },
        "make_serde": {
            "name": "make_serde",
            "location": 638,
            "return": [],
            "arguments": {
                "class_name": [
                    "str"
                ],
                "se": [
                    "bool"
                ],
                "fields": []
            }
        },
        "test_make_serialize_deserialize": {
            "name": "test_make_serialize_deserialize",
            "location": 646,
            "return": [],
            "arguments": {
                "se": []
            }
        },
        "test_exception_to_from_obj": {
            "name": "test_exception_to_from_obj",
            "location": 687,
            "return": [],
            "arguments": {}
        },
        "test_user_error": {
            "name": "test_user_error",
            "location": 699,
            "return": [],
            "arguments": {}
        },
        "test_type_check": {
            "name": "test_type_check",
            "location": 775,
            "return": [],
            "arguments": {
                "T": [],
                "data": [],
                "exc": []
            }
        },
        "test_exception_on_not_supported_types.UnsupportedClass.__init__": {
            "name": "__init__",
            "location": 593,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_user_error.Foo.__post_init__": {
            "name": "__post_init__",
            "location": 708,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyserde-master/tests/test_compat.py": {
        "test_types": {
            "name": "test_types",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "test_typename": {
            "name": "test_typename",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "test_iter_types": {
            "name": "test_iter_types",
            "location": 89,
            "return": [],
            "arguments": {}
        },
        "test_iter_unions": {
            "name": "test_iter_unions",
            "location": 108,
            "return": [],
            "arguments": {}
        },
        "test_type_args": {
            "name": "test_type_args",
            "location": 125,
            "return": [],
            "arguments": {}
        },
        "test_union_args": {
            "name": "test_union_args",
            "location": 140,
            "return": [],
            "arguments": {}
        },
        "test_is_instance": {
            "name": "test_is_instance",
            "location": 146,
            "return": [],
            "arguments": {}
        },
        "test_is_generic": {
            "name": "test_is_generic",
            "location": 236,
            "return": [],
            "arguments": {}
        }
    },
    "pyserde-master/tests/test_core.py": {
        "test_should_impl_dataclass": {
            "name": "test_should_impl_dataclass",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "pyserde-master/tests/test_custom.py": {
        "test_custom_field_serializer": {
            "name": "test_custom_field_serializer",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_raise_error": {
            "name": "test_raise_error",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "test_wrong_signature": {
            "name": "test_wrong_signature",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "test_custom_class_serializer": {
            "name": "test_custom_class_serializer",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "test_field_serialize_override_class_serializer": {
            "name": "test_field_serialize_override_class_serializer",
            "location": 113,
            "return": [],
            "arguments": {}
        },
        "test_override_by_default_serializer": {
            "name": "test_override_by_default_serializer",
            "location": 144,
            "return": [],
            "arguments": {}
        },
        "test_raise_error.raise_exception": {
            "name": "raise_exception",
            "location": 36,
            "return": [],
            "arguments": {
                "_": []
            }
        },
        "test_custom_class_serializer.serializer": {
            "name": "serializer",
            "location": 65,
            "return": [],
            "arguments": {
                "cls": [],
                "o": []
            }
        },
        "test_custom_class_serializer.deserializer": {
            "name": "deserializer",
            "location": 71,
            "return": [],
            "arguments": {
                "cls": [],
                "o": []
            }
        },
        "test_custom_class_serializer.fallback": {
            "name": "fallback",
            "location": 95,
            "return": [],
            "arguments": {
                "_": [],
                "__": []
            }
        },
        "test_field_serialize_override_class_serializer.serializer": {
            "name": "serializer",
            "location": 114,
            "return": [],
            "arguments": {
                "cls": [],
                "o": []
            }
        },
        "test_field_serialize_override_class_serializer.deserializer": {
            "name": "deserializer",
            "location": 120,
            "return": [],
            "arguments": {
                "cls": [],
                "o": []
            }
        },
        "test_override_by_default_serializer.serializer": {
            "name": "serializer",
            "location": 145,
            "return": [],
            "arguments": {
                "cls": [],
                "o": []
            }
        },
        "test_override_by_default_serializer.deserializer": {
            "name": "deserializer",
            "location": 151,
            "return": [],
            "arguments": {
                "cls": [],
                "o": []
            }
        }
    },
    "pyserde-master/tests/test_de.py": {
        "test_from_obj": {
            "name": "test_from_obj",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "pyserde-master/tests/test_flatten.py": {
        "test_flatten_simple": {
            "name": "test_flatten_simple",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_flatten": {
            "name": "test_flatten",
            "location": 34,
            "return": [],
            "arguments": {
                "se": [],
                "de": []
            }
        }
    },
    "pyserde-master/tests/test_lazy_type_evaluation.py": {
        "test_serde_with_lazy_type_annotations": {
            "name": "test_serde_with_lazy_type_annotations",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "test_forward_reference_works": {
            "name": "test_forward_reference_works",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "test_unresolved_forward_reference_throws": {
            "name": "test_unresolved_forward_reference_throws",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "test_string_forward_reference_throws": {
            "name": "test_string_forward_reference_throws",
            "location": 96,
            "return": [],
            "arguments": {}
        }
    },
    "pyserde-master/tests/test_literal.py": {
        "test_dict": {
            "name": "test_dict",
            "location": 140,
            "return": [],
            "arguments": {
                "se": [],
                "de": [],
                "opt": []
            }
        },
        "test_tuple": {
            "name": "test_tuple",
            "location": 153,
            "return": [],
            "arguments": {
                "se": [],
                "de": [],
                "opt": []
            }
        },
        "test_list_literals": {
            "name": "test_list_literals",
            "location": 166,
            "return": [],
            "arguments": {
                "se": [],
                "de": []
            }
        },
        "test_dict_literals": {
            "name": "test_dict_literals",
            "location": 175,
            "return": [],
            "arguments": {
                "se": [],
                "de": []
            }
        },
        "test_json": {
            "name": "test_json",
            "location": 183,
            "return": [],
            "arguments": {}
        },
        "test_msgpack": {
            "name": "test_msgpack",
            "location": 189,
            "return": [],
            "arguments": {}
        },
        "test_msgpack_unnamed": {
            "name": "test_msgpack_unnamed",
            "location": 196,
            "return": [],
            "arguments": {}
        }
    },
    "pyserde-master/tests/test_numpy.py": {
        "test_numpy_simple": {
            "name": "test_numpy_simple",
            "location": 21,
            "return": [],
            "arguments": {
                "se": [],
                "de": [],
                "opt": []
            }
        },
        "test_encode_numpy": {
            "name": "test_encode_numpy",
            "location": 96,
            "return": [],
            "arguments": {
                "se": [],
                "de": [],
                "opt": []
            }
        },
        "test_encode_numpy_with_no_default_encoder": {
            "name": "test_encode_numpy_with_no_default_encoder",
            "location": 183,
            "return": [],
            "arguments": {
                "se": [],
                "de": []
            }
        },
        "test_numpy_misc": {
            "name": "test_numpy_misc",
            "location": 226,
            "return": [],
            "arguments": {}
        },
        "test_numpy_simple.NPFoo.__eq__": {
            "name": "__eq__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "test_encode_numpy.BadClass.__init__": {
            "name": "__init__",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "pyserde-master/tests/test_se.py": {
        "test_asdict": {
            "name": "test_asdict",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_astuple": {
            "name": "test_astuple",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "test_se_func_iter": {
            "name": "test_se_func_iter",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_convert_sets_option": {
            "name": "test_convert_sets_option",
            "location": 106,
            "return": [],
            "arguments": {}
        }
    },
    "pyserde-master/tests/test_union.py": {
        "test_union": {
            "name": "test_union",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "test_union_optional": {
            "name": "test_union_optional",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "test_union_containers": {
            "name": "test_union_containers",
            "location": 113,
            "return": [],
            "arguments": {}
        },
        "test_union_with_complex_types": {
            "name": "test_union_with_complex_types",
            "location": 131,
            "return": [],
            "arguments": {}
        },
        "test_union_with_complex_types_and_reuse_instances": {
            "name": "test_union_with_complex_types_and_reuse_instances",
            "location": 155,
            "return": [],
            "arguments": {}
        },
        "test_optional_union_with_complex_types": {
            "name": "test_optional_union_with_complex_types",
            "location": 176,
            "return": [],
            "arguments": {}
        },
        "test_union_with_complex_types_in_containers": {
            "name": "test_union_with_complex_types_in_containers",
            "location": 190,
            "return": [],
            "arguments": {}
        },
        "test_union_exception_if_nothing_matches": {
            "name": "test_union_exception_if_nothing_matches",
            "location": 208,
            "return": [],
            "arguments": {}
        },
        "test_union_in_union": {
            "name": "test_union_in_union",
            "location": 249,
            "return": [],
            "arguments": {}
        },
        "test_union_in_other_type": {
            "name": "test_union_in_other_type",
            "location": 267,
            "return": [],
            "arguments": {}
        },
        "test_union_rename_all": {
            "name": "test_union_rename_all",
            "location": 281,
            "return": [],
            "arguments": {}
        },
        "test_union_with_list_of_other_class": {
            "name": "test_union_with_list_of_other_class",
            "location": 290,
            "return": [],
            "arguments": {}
        },
        "test_union_with_union_in_nested_types": {
            "name": "test_union_with_union_in_nested_types",
            "location": 306,
            "return": [],
            "arguments": {}
        },
        "test_union_with_union_in_nested_tuple": {
            "name": "test_union_with_union_in_nested_tuple",
            "location": 323,
            "return": [],
            "arguments": {}
        },
        "test_generic_union": {
            "name": "test_generic_union",
            "location": 344,
            "return": [],
            "arguments": {}
        },
        "test_external_tagging": {
            "name": "test_external_tagging",
            "location": 382,
            "return": [],
            "arguments": {}
        },
        "test_internal_tagging": {
            "name": "test_internal_tagging",
            "location": 436,
            "return": [],
            "arguments": {}
        },
        "test_adjacent_tagging": {
            "name": "test_adjacent_tagging",
            "location": 489,
            "return": [],
            "arguments": {}
        },
        "test_untagged": {
            "name": "test_untagged",
            "location": 558,
            "return": [],
            "arguments": {}
        }
    },
    "pyserde-master/tests/__init__.py": {}
}
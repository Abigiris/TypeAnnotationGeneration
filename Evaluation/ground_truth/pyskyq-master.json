{
    "pyskyq-master/setup.py": {
        "setup_package": {
            "name": "setup_package",
            "location": 8,
            "return": [],
            "arguments": {}
        }
    },
    "pyskyq-master/docs/conf.py": {},
    "pyskyq-master/src/pyskyq/channel.py": {
        "channel_from_json": {
            "name": "channel_from_json",
            "location": 263,
            "return": [
                "Channel"
            ],
            "arguments": {
                "json_": []
            }
        },
        "channel_from_skyq_service": {
            "name": "channel_from_skyq_service",
            "location": 288,
            "return": [
                "Channel"
            ],
            "arguments": {
                "skyq_chan": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "channel_from_xmltv_list": {
            "name": "channel_from_xmltv_list",
            "location": 303,
            "return": [
                "Channel"
            ],
            "arguments": {
                "xml_chan": [
                    "Element"
                ]
            }
        },
        "merge_channels": {
            "name": "merge_channels",
            "location": 320,
            "return": [
                "Channel"
            ],
            "arguments": {
                "chan_a": [
                    "Channel"
                ],
                "chan_b": [
                    "Channel"
                ]
            }
        },
        "_ChannelJSONEncoder.default": {
            "name": "default",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Channel.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.__new__": {
            "name": "__new__",
            "location": 116,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Channel.__getattr__": {
            "name": "__getattr__",
            "location": 131,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Channel.__setattr__": {
            "name": "__setattr__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "Channel.__repr__": {
            "name": "__repr__",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Channel.__hash__": {
            "name": "__hash__",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Channel.__eq__": {
            "name": "__eq__",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Channel.as_json": {
            "name": "as_json",
            "location": 188,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.sources": {
            "name": "sources",
            "location": 193,
            "return": [
                "CSRC"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.load_skyq_summary_data": {
            "name": "load_skyq_summary_data",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chan_dict": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Channel.load_skyq_detail_data": {
            "name": "load_skyq_detail_data",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "detail_dict": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Channel.load_xmltv_data": {
            "name": "load_xmltv_data",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xml_chan": [
                    "Element"
                ],
                "base_url": [
                    "URL"
                ]
            }
        }
    },
    "pyskyq-master/src/pyskyq/constants.py": {},
    "pyskyq-master/src/pyskyq/epg.py": {
        "EPG.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ]
            }
        },
        "EPG.__repr__": {
            "name": "__repr__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EPG.channels_loaded": {
            "name": "channels_loaded",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EPG.as_json": {
            "name": "as_json",
            "location": 119,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EPG.from_json": {
            "name": "from_json",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json_": [
                    "str"
                ]
            }
        },
        "EPG.get_channel_by_sid": {
            "name": "get_channel_by_sid",
            "location": 146,
            "return": [
                "Channel"
            ],
            "arguments": {
                "self": [],
                "sid": [
                    "Any"
                ]
            }
        },
        "EPG.apply_XMLTVListing": {
            "name": "apply_XMLTVListing",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "listing": [
                    "XMLTVListing"
                ]
            }
        }
    },
    "pyskyq-master/src/pyskyq/programme.py": {
        "programme_from_xmltv_list": {
            "name": "programme_from_xmltv_list",
            "location": 105,
            "return": [
                "Programme"
            ],
            "arguments": {
                "xml_prog": [
                    "Element"
                ]
            }
        },
        "Programme.__post_init__": {
            "name": "__post_init__",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Programme.__hash__": {
            "name": "__hash__",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyskyq-master/src/pyskyq/remote.py": {
        "press_remote": {
            "name": "press_remote",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "str"
                ],
                "code": [
                    "int"
                ]
            }
        }
    },
    "pyskyq-master/src/pyskyq/status.py": {},
    "pyskyq-master/src/pyskyq/utils.py": {
        "parse_http_date": {
            "name": "parse_http_date",
            "location": 9,
            "return": [
                "datetime"
            ],
            "arguments": {
                "httpdatetime": [
                    "str"
                ]
            }
        },
        "skyq_json_decoder_hook": {
            "name": "skyq_json_decoder_hook",
            "location": 23,
            "return": [],
            "arguments": {
                "obj": []
            }
        }
    },
    "pyskyq-master/src/pyskyq/xmltvlisting.py": {
        "_xml_parse_and_remove": {
            "name": "_xml_parse_and_remove",
            "location": 251,
            "return": [
                "Iterator[Tuple[(str, Element)]]"
            ],
            "arguments": {
                "filename": [
                    "Union[(str, bytes, int, IO[Any])]"
                ]
            }
        },
        "XMLTVListing.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "URL"
                ],
                "path": [
                    "PathLike"
                ]
            }
        },
        "XMLTVListing.__hash__": {
            "name": "__hash__",
            "location": 85,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "XMLTVListing.__eq__": {
            "name": "__eq__",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "XMLTVListing.__repr__": {
            "name": "__repr__",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XMLTVListing.last_modified": {
            "name": "last_modified",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XMLTVListing.url": {
            "name": "url",
            "location": 114,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": []
            }
        },
        "XMLTVListing.downloaded": {
            "name": "downloaded",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "XMLTVListing.downloading": {
            "name": "downloading",
            "location": 134,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "XMLTVListing.file_path": {
            "name": "file_path",
            "location": 144,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "XMLTVListing.parse": {
            "name": "parse",
            "location": 229,
            "return": [
                "Iterator[Union[(Channel, Programme)]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyskyq-master/src/pyskyq/_h11_header_monkey_patch.py": {
        "write_headers_titlecase": {
            "name": "write_headers_titlecase",
            "location": 3,
            "return": [],
            "arguments": {
                "headers": [],
                "write": []
            }
        }
    },
    "pyskyq-master/src/pyskyq/_version.py": {},
    "pyskyq-master/src/pyskyq/__init__.py": {},
    "pyskyq-master/src/pyskyq/examples/cli_epg.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 18,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {
                "args": [
                    "List[str]"
                ]
            }
        }
    },
    "pyskyq-master/src/pyskyq/examples/cli_remote.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 19,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {
                "args": [
                    "List[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 31,
            "return": [],
            "arguments": {
                "args": [
                    "List[str]"
                ]
            }
        }
    },
    "pyskyq-master/src/pyskyq/examples/cli_status.py": {},
    "pyskyq-master/tests/asynccontextmanagermock.py": {
        "AsyncContextManagerMock.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AsyncContextManagerMock.__await__": {
            "name": "__await__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyskyq-master/tests/http_server.py": {
        "TrioHTTPWrapper.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "stream": []
            }
        },
        "TrioHTTPWrapper.basic_headers": {
            "name": "basic_headers",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyskyq-master/tests/isloated_filesystem.py": {
        "isolated_filesystem": {
            "name": "isolated_filesystem",
            "location": 12,
            "return": [],
            "arguments": {}
        }
    },
    "pyskyq-master/tests/mock_constants.py": {},
    "pyskyq-master/tests/test_channel.py": {
        "test_hashable_channels": {
            "name": "test_hashable_channels",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "test_blank_channel": {
            "name": "test_blank_channel",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "test_channel_from_skyq_service": {
            "name": "test_channel_from_skyq_service",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "test_channel_from_xmltv_data": {
            "name": "test_channel_from_xmltv_data",
            "location": 100,
            "return": [],
            "arguments": {}
        },
        "test_channel_from_both_sources": {
            "name": "test_channel_from_both_sources",
            "location": 113,
            "return": [],
            "arguments": {}
        },
        "test_channel_json": {
            "name": "test_channel_json",
            "location": 146,
            "return": [],
            "arguments": {}
        }
    },
    "pyskyq-master/tests/test_cli.py": {},
    "pyskyq-master/tests/test_epg.py": {
        "test_apply_EPG_XMLTV_listing": {
            "name": "test_apply_EPG_XMLTV_listing",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "test_from_json": {
            "name": "test_from_json",
            "location": 127,
            "return": [],
            "arguments": {}
        }
    },
    "pyskyq-master/tests/test_remote.py": {
        "test_sky_remote_send_command": {
            "name": "test_sky_remote_send_command",
            "location": 13,
            "return": [],
            "arguments": {
                "mocker": []
            }
        }
    },
    "pyskyq-master/tests/test_status.py": {},
    "pyskyq-master/tests/test_xmltvlisting.py": {
        "test_xmltvlisting_init": {
            "name": "test_xmltvlisting_init",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_channel_parse": {
            "name": "test_channel_parse",
            "location": 163,
            "return": [],
            "arguments": {}
        }
    },
    "pyskyq-master/tests/__init__.py": {}
}
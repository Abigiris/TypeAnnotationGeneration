{
    "pyspark-stubs-master/conftest.py": {
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 29,
            "return": [],
            "arguments": {
                "config": []
            }
        }
    },
    "pyspark-stubs-master/setup.py": {
        "list_packages": {
            "name": "list_packages",
            "location": 38,
            "return": [],
            "arguments": {
                "src_path": []
            }
        }
    },
    "pyspark-stubs-master/tests/mypy_test.py": {
        "log": {
            "name": "log",
            "location": 53,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "match": {
            "name": "match",
            "location": 58,
            "return": [],
            "arguments": {
                "fn": [],
                "args": [],
                "blacklist": []
            }
        },
        "libpath": {
            "name": "libpath",
            "location": 82,
            "return": [],
            "arguments": {
                "major": [],
                "minor": []
            }
        },
        "main": {
            "name": "main",
            "location": 96,
            "return": [],
            "arguments": {}
        }
    },
    "pyspark-stubs-master/tests/unit/testpyspark.py": {},
    "pyspark-stubs-master/third_party/3/pyspark/accumulators.py": {
        "Accumulator.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aid": [
                    "int"
                ],
                "value": [
                    "T"
                ],
                "accum_param": [
                    "AccumulatorParam[T]"
                ]
            }
        },
        "Accumulator.__reduce__": {
            "name": "__reduce__",
            "location": 38,
            "return": [
                "Tuple[(Callable[([int, int, AccumulatorParam[T]], Accumulator[T])], Tuple[(int, int, AccumulatorParam[T])])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Accumulator.value": {
            "name": "value",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T"
                ]
            }
        },
        "Accumulator.add": {
            "name": "add",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "term": [
                    "T"
                ]
            }
        },
        "Accumulator.__iadd__": {
            "name": "__iadd__",
            "location": 49,
            "return": [
                "Accumulator[T]"
            ],
            "arguments": {
                "self": [],
                "term": [
                    "T"
                ]
            }
        },
        "AccumulatorParam.zero": {
            "name": "zero",
            "location": 52,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T"
                ]
            }
        },
        "AccumulatorParam.addInPlace": {
            "name": "addInPlace",
            "location": 53,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "value1": [
                    "T"
                ],
                "value2": [
                    "T"
                ]
            }
        },
        "AddingAccumulatorParam.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "zero_value": [
                    "U"
                ]
            }
        },
        "AddingAccumulatorParam.zero": {
            "name": "zero",
            "location": 58,
            "return": [
                "U"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "U"
                ]
            }
        },
        "AddingAccumulatorParam.addInPlace": {
            "name": "addInPlace",
            "location": 59,
            "return": [
                "U"
            ],
            "arguments": {
                "self": [],
                "value1": [
                    "U"
                ],
                "value2": [
                    "U"
                ]
            }
        },
        "_UpdateRequestHandler.handle": {
            "name": "handle",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccumulatorServer.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_address": [
                    "Tuple[(str, int)]"
                ],
                "RequestHandlerClass": [
                    "Type[socketserver.BaseRequestHandler]"
                ],
                "auth_token": [
                    "str"
                ]
            }
        },
        "AccumulatorServer.shutdown": {
            "name": "shutdown",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/broadcast.py": {
        "Broadcast.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sc": [
                    "Optional[Any]"
                ],
                "value": [
                    "Optional[T]"
                ],
                "pickle_registry": [
                    "Optional[Any]"
                ],
                "path": [
                    "Optional[Any]"
                ],
                "sock_file": [
                    "Optional[Any]"
                ]
            }
        },
        "Broadcast.dump": {
            "name": "dump",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "f": [
                    "Any"
                ]
            }
        },
        "Broadcast.load_from_path": {
            "name": "load_from_path",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ]
            }
        },
        "Broadcast.load": {
            "name": "load",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "file": [
                    "Any"
                ]
            }
        },
        "Broadcast.value": {
            "name": "value",
            "location": 39,
            "return": [
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "Broadcast.unpersist": {
            "name": "unpersist",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blocking": [
                    "bool"
                ]
            }
        },
        "Broadcast.destroy": {
            "name": "destroy",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blocking": [
                    "bool"
                ]
            }
        },
        "Broadcast.__reduce__": {
            "name": "__reduce__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BroadcastPickleRegistry.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BroadcastPickleRegistry.__iter__": {
            "name": "__iter__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BroadcastPickleRegistry.add": {
            "name": "add",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bcast": [
                    "Any"
                ]
            }
        },
        "BroadcastPickleRegistry.clear": {
            "name": "clear",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/conf.py": {
        "SparkConf.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loadDefaults": [
                    "bool"
                ],
                "_jvm": [
                    "Optional[JVMView]"
                ],
                "_jconf": [
                    "Optional[JavaObject]"
                ]
            }
        },
        "SparkConf.set": {
            "name": "set",
            "location": 31,
            "return": [
                "SparkConf"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "SparkConf.setIfMissing": {
            "name": "setIfMissing",
            "location": 32,
            "return": [
                "SparkConf"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "SparkConf.setMaster": {
            "name": "setMaster",
            "location": 33,
            "return": [
                "SparkConf"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "SparkConf.setAppName": {
            "name": "setAppName",
            "location": 34,
            "return": [
                "SparkConf"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "SparkConf.setSparkHome": {
            "name": "setSparkHome",
            "location": 35,
            "return": [
                "SparkConf"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "SparkConf.setExecutorEnv": {
            "name": "setExecutorEnv",
            "location": 39,
            "return": [
                "SparkConf"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkConf.setAll": {
            "name": "setAll",
            "location": 40,
            "return": [
                "SparkConf"
            ],
            "arguments": {
                "self": [],
                "pairs": [
                    "List[Tuple[(str, str)]]"
                ]
            }
        },
        "SparkConf.get": {
            "name": "get",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "defaultValue": [
                    "Optional[str]"
                ]
            }
        },
        "SparkConf.getAll": {
            "name": "getAll",
            "location": 42,
            "return": [
                "List[Tuple[(str, str)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkConf.contains": {
            "name": "contains",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "SparkConf.toDebugString": {
            "name": "toDebugString",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/context.py": {
        "SparkContext.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "master": [
                    "Optional[str]"
                ],
                "appName": [
                    "Optional[str]"
                ],
                "sparkHome": [
                    "Optional[str]"
                ],
                "pyFiles": [
                    "Optional[List[str]]"
                ],
                "environment": [
                    "Optional[Dict[(str, str)]]"
                ],
                "batchSize": [
                    "int"
                ],
                "serializer": [
                    "Serializer"
                ],
                "conf": [
                    "Optional[SparkConf]"
                ],
                "gateway": [
                    "Optional[JavaGateway]"
                ],
                "jsc": [
                    "Optional[JavaObject]"
                ],
                "profiler_cls": [
                    "type"
                ]
            }
        },
        "SparkContext.__getnewargs__": {
            "name": "__getnewargs__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SparkContext.__enter__": {
            "name": "__enter__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SparkContext.__exit__": {
            "name": "__exit__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "value": [],
                "trace": []
            }
        },
        "SparkContext.getOrCreate": {
            "name": "getOrCreate",
            "location": 58,
            "return": [
                "SparkContext"
            ],
            "arguments": {
                "cls": [],
                "conf": [
                    "Optional[SparkConf]"
                ]
            }
        },
        "SparkContext.setLogLevel": {
            "name": "setLogLevel",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logLevel": [
                    "str"
                ]
            }
        },
        "SparkContext.setSystemProperty": {
            "name": "setSystemProperty",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "SparkContext.version": {
            "name": "version",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkContext.applicationId": {
            "name": "applicationId",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkContext.uiWebUrl": {
            "name": "uiWebUrl",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkContext.startTime": {
            "name": "startTime",
            "location": 69,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkContext.defaultParallelism": {
            "name": "defaultParallelism",
            "location": 71,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkContext.defaultMinPartitions": {
            "name": "defaultMinPartitions",
            "location": 73,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkContext.stop": {
            "name": "stop",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkContext.emptyRDD": {
            "name": "emptyRDD",
            "location": 75,
            "return": [
                "RDD[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkContext.range": {
            "name": "range",
            "location": 76,
            "return": [
                "RDD[int]"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int"
                ],
                "end": [
                    "Optional[int]"
                ],
                "step": [
                    "int"
                ],
                "numSlices": [
                    "Optional[int]"
                ]
            }
        },
        "SparkContext.parallelize": {
            "name": "parallelize",
            "location": 83,
            "return": [
                "RDD[T]"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "Iterable[T]"
                ],
                "numSlices": [
                    "Optional[int]"
                ]
            }
        },
        "SparkContext.pickleFile": {
            "name": "pickleFile",
            "location": 84,
            "return": [
                "RDD[Any]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "minPartitions": [
                    "Optional[int]"
                ]
            }
        },
        "SparkContext.textFile": {
            "name": "textFile",
            "location": 85,
            "return": [
                "RDD[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "minPartitions": [
                    "Optional[int]"
                ],
                "use_unicode": [
                    "bool"
                ]
            }
        },
        "SparkContext.wholeTextFiles": {
            "name": "wholeTextFiles",
            "location": 88,
            "return": [
                "RDD[Tuple[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "minPartitions": [
                    "Optional[int]"
                ],
                "use_unicode": [
                    "bool"
                ]
            }
        },
        "SparkContext.binaryFiles": {
            "name": "binaryFiles",
            "location": 91,
            "return": [
                "RDD[Tuple[(str, bytes)]]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "minPartitions": [
                    "Optional[int]"
                ]
            }
        },
        "SparkContext.binaryRecords": {
            "name": "binaryRecords",
            "location": 94,
            "return": [
                "RDD[bytes]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "recordLength": [
                    "int"
                ]
            }
        },
        "SparkContext.sequenceFile": {
            "name": "sequenceFile",
            "location": 95,
            "return": [
                "RDD[Tuple[(T, U)]]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "keyClass": [
                    "Optional[str]"
                ],
                "valueClass": [
                    "Optional[str]"
                ],
                "keyConverter": [
                    "Optional[str]"
                ],
                "valueConverter": [
                    "Optional[str]"
                ],
                "minSplits": [
                    "Optional[int]"
                ],
                "batchSize": [
                    "int"
                ]
            }
        },
        "SparkContext.newAPIHadoopFile": {
            "name": "newAPIHadoopFile",
            "location": 105,
            "return": [
                "RDD[Tuple[(T, U)]]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "inputFormatClass": [
                    "str"
                ],
                "keyClass": [
                    "str"
                ],
                "valueClass": [
                    "str"
                ],
                "keyConverter": [
                    "Optional[str]"
                ],
                "valueConverter": [
                    "Optional[str]"
                ],
                "conf": [
                    "Optional[Dict[(str, str)]]"
                ],
                "batchSize": [
                    "int"
                ]
            }
        },
        "SparkContext.newAPIHadoopRDD": {
            "name": "newAPIHadoopRDD",
            "location": 116,
            "return": [
                "RDD[Tuple[(T, U)]]"
            ],
            "arguments": {
                "self": [],
                "inputFormatClass": [
                    "str"
                ],
                "keyClass": [
                    "str"
                ],
                "valueClass": [
                    "str"
                ],
                "keyConverter": [
                    "Optional[str]"
                ],
                "valueConverter": [
                    "Optional[str]"
                ],
                "conf": [
                    "Optional[Dict[(str, str)]]"
                ],
                "batchSize": [
                    "int"
                ]
            }
        },
        "SparkContext.hadoopFile": {
            "name": "hadoopFile",
            "location": 126,
            "return": [
                "RDD[Tuple[(T, U)]]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "inputFormatClass": [
                    "str"
                ],
                "keyClass": [
                    "str"
                ],
                "valueClass": [
                    "str"
                ],
                "keyConverter": [
                    "Optional[str]"
                ],
                "valueConverter": [
                    "Optional[str]"
                ],
                "conf": [
                    "Optional[Dict[(str, str)]]"
                ],
                "batchSize": [
                    "int"
                ]
            }
        },
        "SparkContext.hadoopRDD": {
            "name": "hadoopRDD",
            "location": 137,
            "return": [
                "RDD[Tuple[(T, U)]]"
            ],
            "arguments": {
                "self": [],
                "inputFormatClass": [
                    "str"
                ],
                "keyClass": [
                    "str"
                ],
                "valueClass": [
                    "str"
                ],
                "keyConverter": [
                    "Optional[str]"
                ],
                "valueConverter": [
                    "Optional[str]"
                ],
                "conf": [
                    "Optional[Dict[(str, str)]]"
                ],
                "batchSize": [
                    "int"
                ]
            }
        },
        "SparkContext.union": {
            "name": "union",
            "location": 147,
            "return": [
                "RDD[T]"
            ],
            "arguments": {
                "self": [],
                "rdds": [
                    "Iterable[RDD[T]]"
                ]
            }
        },
        "SparkContext.broadcast": {
            "name": "broadcast",
            "location": 148,
            "return": [
                "Broadcast[T]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T"
                ]
            }
        },
        "SparkContext.accumulator": {
            "name": "accumulator",
            "location": 149,
            "return": [
                "Accumulator[T]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T"
                ],
                "accum_param": [
                    "Optional[AccumulatorParam[T]]"
                ]
            }
        },
        "SparkContext.addFile": {
            "name": "addFile",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "recursive": [
                    "bool"
                ]
            }
        },
        "SparkContext.addPyFile": {
            "name": "addPyFile",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "SparkContext.setCheckpointDir": {
            "name": "setCheckpointDir",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dirName": [
                    "str"
                ]
            }
        },
        "SparkContext.setJobGroup": {
            "name": "setJobGroup",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "groupId": [
                    "str"
                ],
                "description": [
                    "str"
                ],
                "interruptOnCancel": [
                    "bool"
                ]
            }
        },
        "SparkContext.setLocalProperty": {
            "name": "setLocalProperty",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "SparkContext.getLocalProperty": {
            "name": "getLocalProperty",
            "location": 159,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "SparkContext.sparkUser": {
            "name": "sparkUser",
            "location": 160,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkContext.setJobDescription": {
            "name": "setJobDescription",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "SparkContext.cancelJobGroup": {
            "name": "cancelJobGroup",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "groupId": [
                    "str"
                ]
            }
        },
        "SparkContext.cancelAllJobs": {
            "name": "cancelAllJobs",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkContext.statusTracker": {
            "name": "statusTracker",
            "location": 164,
            "return": [
                "StatusTracker"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkContext.runJob": {
            "name": "runJob",
            "location": 165,
            "return": [
                "List[U]"
            ],
            "arguments": {
                "self": [],
                "rdd": [
                    "RDD[T]"
                ],
                "partitionFunc": [
                    "Callable[([Iterable[T]], Iterable[U])]"
                ],
                "partitions": [
                    "Optional[List[int]]"
                ],
                "allowLocal": [
                    "bool"
                ]
            }
        },
        "SparkContext.show_profiles": {
            "name": "show_profiles",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkContext.dump_profiles": {
            "name": "dump_profiles",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "SparkContext.getConf": {
            "name": "getConf",
            "location": 174,
            "return": [
                "SparkConf"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkContext.resources": {
            "name": "resources",
            "location": 176,
            "return": [
                "Dict[(str, ResourceInformation)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/daemon.py": {
        "compute_real_exit_code": {
            "name": "compute_real_exit_code",
            "location": 27,
            "return": [],
            "arguments": {
                "exit_code": [
                    "Any"
                ]
            }
        },
        "worker": {
            "name": "worker",
            "location": 28,
            "return": [],
            "arguments": {
                "sock": [
                    "Any"
                ],
                "authenticated": [
                    "Any"
                ]
            }
        },
        "manager": {
            "name": "manager",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/files.py": {
        "SparkFiles.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkFiles.get": {
            "name": "get",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "filename": [
                    "str"
                ]
            }
        },
        "SparkFiles.getRootDirectory": {
            "name": "getRootDirectory",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/find_spark_home.py": {},
    "pyspark-stubs-master/third_party/3/pyspark/java_gateway.py": {
        "launch_gateway": {
            "name": "launch_gateway",
            "location": 22,
            "return": [],
            "arguments": {
                "conf": [
                    "Optional[Any]"
                ],
                "popen_kwargs": [
                    "Optional[Any]"
                ]
            }
        },
        "local_connect_and_auth": {
            "name": "local_connect_and_auth",
            "location": 23,
            "return": [],
            "arguments": {
                "port": [
                    "Any"
                ],
                "auth_secret": [
                    "Any"
                ]
            }
        },
        "ensure_callback_server_started": {
            "name": "ensure_callback_server_started",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "gw": [
                    "Any"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/join.py": {
        "python_join": {
            "name": "python_join",
            "location": 28,
            "return": [
                "pyspark.rdd.RDD[Tuple[(K, Tuple[(V, U)])]]"
            ],
            "arguments": {
                "rdd": [
                    "pyspark.rdd.RDD[Tuple[(K, V)]]"
                ],
                "other": [
                    "pyspark.rdd.RDD[Tuple[(K, U)]]"
                ],
                "numPartitions": [
                    "int"
                ]
            }
        },
        "python_right_outer_join": {
            "name": "python_right_outer_join",
            "location": 33,
            "return": [
                "pyspark.rdd.RDD[Tuple[(K, Tuple[(V, Optional[U])])]]"
            ],
            "arguments": {
                "rdd": [
                    "pyspark.rdd.RDD[Tuple[(K, V)]]"
                ],
                "other": [
                    "pyspark.rdd.RDD[Tuple[(K, U)]]"
                ],
                "numPartitions": [
                    "int"
                ]
            }
        },
        "python_left_outer_join": {
            "name": "python_left_outer_join",
            "location": 38,
            "return": [
                "pyspark.rdd.RDD[Tuple[(K, Tuple[(Optional[V], U)])]]"
            ],
            "arguments": {
                "rdd": [
                    "pyspark.rdd.RDD[Tuple[(K, V)]]"
                ],
                "other": [
                    "pyspark.rdd.RDD[Tuple[(K, U)]]"
                ],
                "numPartitions": [
                    "int"
                ]
            }
        },
        "python_full_outer_join": {
            "name": "python_full_outer_join",
            "location": 43,
            "return": [
                "pyspark.rdd.RDD[Tuple[(K, Tuple[(Optional[V], Optional[U])])]]"
            ],
            "arguments": {
                "rdd": [
                    "pyspark.rdd.RDD[Tuple[(K, V)]]"
                ],
                "other": [
                    "pyspark.rdd.RDD[Tuple[(K, U)]]"
                ],
                "numPartitions": [
                    "int"
                ]
            }
        },
        "python_cogroup": {
            "name": "python_cogroup",
            "location": 48,
            "return": [
                "pyspark.rdd.RDD[Tuple[(K, Tuple[(ResultIterable[V], ...)])]]"
            ],
            "arguments": {
                "rdds": [
                    "Iterable[pyspark.rdd.RDD[Tuple[(K, V)]]]"
                ],
                "numPartitions": [
                    "int"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/profiler.py": {
        "ProfilerCollector.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "profiler_cls": [
                    "Type[Profiler]"
                ],
                "dump_path": [
                    "Optional[str]"
                ]
            }
        },
        "ProfilerCollector.new_profiler": {
            "name": "new_profiler",
            "location": 33,
            "return": [
                "Profiler"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "SparkContext"
                ]
            }
        },
        "ProfilerCollector.add_profiler": {
            "name": "add_profiler",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int"
                ],
                "profiler": [
                    "Profiler"
                ]
            }
        },
        "ProfilerCollector.dump_profiles": {
            "name": "dump_profiles",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "ProfilerCollector.show_profiles": {
            "name": "show_profiles",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profiler.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "SparkContext"
                ]
            }
        },
        "Profiler.profile": {
            "name": "profile",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable[([], Any)]"
                ]
            }
        },
        "Profiler.stats": {
            "name": "stats",
            "location": 41,
            "return": [
                "pstats.Stats"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profiler.show": {
            "name": "show",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int"
                ]
            }
        },
        "Profiler.dump": {
            "name": "dump",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "PStatsParam.zero": {
            "name": "zero",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "pstats.Stats"
                ]
            }
        },
        "PStatsParam.addInPlace": {
            "name": "addInPlace",
            "location": 49,
            "return": [
                "Optional[pstats.Stats]"
            ],
            "arguments": {
                "value1": [
                    "Optional[pstats.Stats]"
                ],
                "value2": [
                    "Optional[pstats.Stats]"
                ]
            }
        },
        "BasicProfiler.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "SparkContext"
                ]
            }
        },
        "BasicProfiler.profile": {
            "name": "profile",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable[([], Any)]"
                ]
            }
        },
        "BasicProfiler.stats": {
            "name": "stats",
            "location": 56,
            "return": [
                "pstats.Stats"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/rdd.py": {
        "portable_hash": {
            "name": "portable_hash",
            "location": 74,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "Hashable"
                ]
            }
        },
        "BoundedFloat.__new__": {
            "name": "__new__",
            "location": 88,
            "return": [],
            "arguments": {
                "cls": [],
                "mean": [
                    "float"
                ],
                "confidence": [
                    "float"
                ],
                "low": [
                    "float"
                ],
                "high": [
                    "float"
                ]
            }
        },
        "Partitioner.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numPartitions": [],
                "partitionFunc": []
            }
        },
        "Partitioner.__eq__": {
            "name": "__eq__",
            "location": 94,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Partitioner.__call__": {
            "name": "__call__",
            "location": 95,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "Any"
                ]
            }
        },
        "RDD.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jrdd": [
                    "JavaObject"
                ],
                "ctx": [
                    "pyspark.context.SparkContext"
                ],
                "jrdd_deserializer": [
                    "Serializer"
                ]
            }
        },
        "RDD.id": {
            "name": "id",
            "location": 108,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RDD.__getnewargs__": {
            "name": "__getnewargs__",
            "location": 109,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "RDD.context": {
            "name": "context",
            "location": 111,
            "return": [
                "pyspark.context.SparkContext"
            ],
            "arguments": {
                "self": []
            }
        },
        "RDD.cache": {
            "name": "cache",
            "location": 112,
            "return": [
                "RDD[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RDD.persist": {
            "name": "persist",
            "location": 113,
            "return": [
                "RDD[T]"
            ],
            "arguments": {
                "self": [],
                "storageLevel": [
                    "StorageLevel"
                ]
            }
        },
        "RDD.unpersist": {
            "name": "unpersist",
            "location": 114,
            "return": [
                "RDD[T]"
            ],
            "arguments": {
                "self": [],
                "blocking": [
                    "bool"
                ]
            }
        },
        "RDD.checkpoint": {
            "name": "checkpoint",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RDD.isCheckpointed": {
            "name": "isCheckpointed",
            "location": 116,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RDD.localCheckpoint": {
            "name": "localCheckpoint",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RDD.isLocallyCheckpointed": {
            "name": "isLocallyCheckpointed",
            "location": 118,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RDD.getCheckpointFile": {
            "name": "getCheckpointFile",
            "location": 119,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RDD.map": {
            "name": "map",
            "location": 120,
            "return": [
                "RDD[U]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([T], U)]"
                ],
                "preservesPartitioning": [
                    "bool"
                ]
            }
        },
        "RDD.flatMap": {
            "name": "flatMap",
            "location": 121,
            "return": [
                "RDD[U]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([T], Iterable[U])]"
                ],
                "preservesPartitioning": [
                    "bool"
                ]
            }
        },
        "RDD.mapPartitions": {
            "name": "mapPartitions",
            "location": 124,
            "return": [
                "RDD[U]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([Iterable[T]], Iterable[U])]"
                ],
                "preservesPartitioning": [
                    "bool"
                ]
            }
        },
        "RDD.mapPartitionsWithIndex": {
            "name": "mapPartitionsWithIndex",
            "location": 127,
            "return": [
                "RDD[U]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([int, Iterable[T]], Iterable[U])]"
                ],
                "preservesPartitioning": [
                    "bool"
                ]
            }
        },
        "RDD.mapPartitionsWithSplit": {
            "name": "mapPartitionsWithSplit",
            "location": 132,
            "return": [
                "RDD[U]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([int, Iterable[T]], Iterable[U])]"
                ],
                "preservesPartitioning": [
                    "bool"
                ]
            }
        },
        "RDD.getNumPartitions": {
            "name": "getNumPartitions",
            "location": 137,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RDD.filter": {
            "name": "filter",
            "location": 138,
            "return": [
                "RDD[T]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([T], bool)]"
                ]
            }
        },
        "RDD.distinct": {
            "name": "distinct",
            "location": 139,
            "return": [
                "RDD[T]"
            ],
            "arguments": {
                "self": [],
                "numPartitions": [
                    "Optional[int]"
                ]
            }
        },
        "RDD.sample": {
            "name": "sample",
            "location": 140,
            "return": [
                "RDD[T]"
            ],
            "arguments": {
                "self": [],
                "withReplacement": [
                    "bool"
                ],
                "fraction": [
                    "float"
                ],
                "seed": [
                    "Optional[int]"
                ]
            }
        },
        "RDD.randomSplit": {
            "name": "randomSplit",
            "location": 143,
            "return": [
                "List[RDD[T]]"
            ],
            "arguments": {
                "self": [],
                "weights": [
                    "List[Union[(int, float)]]"
                ],
                "seed": [
                    "Optional[int]"
                ]
            }
        },
        "RDD.takeSample": {
            "name": "takeSample",
            "location": 146,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "self": [],
                "withReplacement": [
                    "bool"
                ],
                "num": [
                    "int"
                ],
                "seed": [
                    "Optional[int]"
                ]
            }
        },
        "RDD.union": {
            "name": "union",
            "location": 149,
            "return": [
                "RDD[Union[(T, U)]]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "RDD[U]"
                ]
            }
        },
        "RDD.intersection": {
            "name": "intersection",
            "location": 150,
            "return": [
                "RDD[T]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "RDD[T]"
                ]
            }
        },
        "RDD.__add__": {
            "name": "__add__",
            "location": 151,
            "return": [
                "RDD[T]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "RDD[T]"
                ]
            }
        },
        "RDD.repartitionAndSortWithinPartitions": {
            "name": "repartitionAndSortWithinPartitions",
            "location": 168,
            "return": [
                "RDD[Tuple[(K, V)]]"
            ],
            "arguments": {
                "self": [
                    "RDD[Tuple[(K, V)]]"
                ],
                "numPartitions": [
                    "Optional[int]"
                ],
                "partitionFunc": [
                    "Callable[([K], int)]"
                ],
                "ascending": [
                    "bool"
                ]
            }
        },
        "RDD.sortByKey": {
            "name": "sortByKey",
            "location": 190,
            "return": [
                "RDD[Tuple[(K, V)]]"
            ],
            "arguments": {
                "self": [
                    "RDD[Tuple[(K, V)]]"
                ],
                "ascending": [
                    "bool"
                ],
                "numPartitions": [
                    "Optional[int]"
                ]
            }
        },
        "RDD.sortBy": {
            "name": "sortBy",
            "location": 197,
            "return": [
                "RDD[T]"
            ],
            "arguments": {
                "self": [
                    "RDD[T]"
                ],
                "keyfunc": [
                    "Callable[([T], O)]"
                ],
                "ascending": [
                    "bool"
                ],
                "numPartitions": [
                    "Optional[int]"
                ]
            }
        },
        "RDD.glom": {
            "name": "glom",
            "location": 203,
            "return": [
                "RDD[List[T]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RDD.cartesian": {
            "name": "cartesian",
            "location": 204,
            "return": [
                "RDD[Tuple[(T, U)]]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "RDD[U]"
                ]
            }
        },
        "RDD.groupBy": {
            "name": "groupBy",
            "location": 205,
            "return": [
                "RDD[Tuple[(K, Iterable[T])]]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([T], K)]"
                ],
                "numPartitions": [
                    "Optional[int]"
                ],
                "partitionFunc": [
                    "Callable[([K], int)]"
                ]
            }
        },
        "RDD.pipe": {
            "name": "pipe",
            "location": 211,
            "return": [
                "RDD[str]"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str"
                ],
                "env": [
                    "Optional[Dict[(str, str)]]"
                ],
                "checkCode": [
                    "bool"
                ]
            }
        },
        "RDD.foreach": {
            "name": "foreach",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([T], None)]"
                ]
            }
        },
        "RDD.foreachPartition": {
            "name": "foreachPartition",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([Iterable[T]], None)]"
                ]
            }
        },
        "RDD.collect": {
            "name": "collect",
            "location": 216,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RDD.collectWithJobGroup": {
            "name": "collectWithJobGroup",
            "location": 217,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "self": [],
                "groupId": [
                    "str"
                ],
                "description": [
                    "str"
                ],
                "interruptOnCancel": [
                    "bool"
                ]
            }
        },
        "RDD.reduce": {
            "name": "reduce",
            "location": 220,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([T, T], T)]"
                ]
            }
        },
        "RDD.treeReduce": {
            "name": "treeReduce",
            "location": 221,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([T, T], T)]"
                ],
                "depth": [
                    "int"
                ]
            }
        },
        "RDD.fold": {
            "name": "fold",
            "location": 222,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "zeroValue": [
                    "T"
                ],
                "op": [
                    "Callable[([T, T], T)]"
                ]
            }
        },
        "RDD.aggregate": {
            "name": "aggregate",
            "location": 223,
            "return": [
                "U"
            ],
            "arguments": {
                "self": [],
                "zeroValue": [
                    "U"
                ],
                "seqOp": [
                    "Callable[([U, T], U)]"
                ],
                "combOp": [
                    "Callable[([U, U], U)]"
                ]
            }
        },
        "RDD.treeAggregate": {
            "name": "treeAggregate",
            "location": 226,
            "return": [
                "U"
            ],
            "arguments": {
                "self": [],
                "zeroValue": [
                    "U"
                ],
                "seqOp": [
                    "Callable[([U, T], U)]"
                ],
                "combOp": [
                    "Callable[([U, U], U)]"
                ],
                "depth": [
                    "int"
                ]
            }
        },
        "RDD.max": {
            "name": "max",
            "location": 236,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Callable[([T], O)]"
                ]
            }
        },
        "RDD.min": {
            "name": "min",
            "location": 240,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Callable[([T], O)]"
                ]
            }
        },
        "RDD.sum": {
            "name": "sum",
            "location": 241,
            "return": [
                "NumberOrArray"
            ],
            "arguments": {
                "self": [
                    "RDD[NumberOrArray]"
                ]
            }
        },
        "RDD.count": {
            "name": "count",
            "location": 242,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RDD.stats": {
            "name": "stats",
            "location": 243,
            "return": [
                "StatCounter"
            ],
            "arguments": {
                "self": [
                    "RDD[NumberOrArray]"
                ]
            }
        },
        "RDD.histogram": {
            "name": "histogram",
            "location": 244,
            "return": [
                "Tuple[(List[T], List[int])]"
            ],
            "arguments": {
                "self": [],
                "buckets": [
                    "List[T]"
                ]
            }
        },
        "RDD.mean": {
            "name": "mean",
            "location": 245,
            "return": [
                "NumberOrArray"
            ],
            "arguments": {
                "self": [
                    "RDD[NumberOrArray]"
                ]
            }
        },
        "RDD.variance": {
            "name": "variance",
            "location": 246,
            "return": [
                "NumberOrArray"
            ],
            "arguments": {
                "self": [
                    "RDD[NumberOrArray]"
                ]
            }
        },
        "RDD.stdev": {
            "name": "stdev",
            "location": 247,
            "return": [
                "NumberOrArray"
            ],
            "arguments": {
                "self": [
                    "RDD[NumberOrArray]"
                ]
            }
        },
        "RDD.sampleStdev": {
            "name": "sampleStdev",
            "location": 248,
            "return": [
                "NumberOrArray"
            ],
            "arguments": {
                "self": [
                    "RDD[NumberOrArray]"
                ]
            }
        },
        "RDD.sampleVariance": {
            "name": "sampleVariance",
            "location": 249,
            "return": [
                "NumberOrArray"
            ],
            "arguments": {
                "self": [
                    "RDD[NumberOrArray]"
                ]
            }
        },
        "RDD.countByValue": {
            "name": "countByValue",
            "location": 250,
            "return": [
                "Dict[(K, int)]"
            ],
            "arguments": {
                "self": [
                    "RDD[K]"
                ]
            }
        },
        "RDD.top": {
            "name": "top",
            "location": 254,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "self": [
                    "RDD[T]"
                ],
                "num": [
                    "int"
                ],
                "key": [
                    "Callable[([T], O)]"
                ]
            }
        },
        "RDD.takeOrdered": {
            "name": "takeOrdered",
            "location": 258,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "self": [
                    "RDD[T]"
                ],
                "num": [
                    "int"
                ],
                "key": [
                    "Callable[([T], O)]"
                ]
            }
        },
        "RDD.take": {
            "name": "take",
            "location": 259,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "int"
                ]
            }
        },
        "RDD.first": {
            "name": "first",
            "location": 260,
            "return": [
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "RDD.isEmpty": {
            "name": "isEmpty",
            "location": 261,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RDD.saveAsNewAPIHadoopDataset": {
            "name": "saveAsNewAPIHadoopDataset",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [
                    "RDD[Tuple[(K, V)]]"
                ],
                "conf": [
                    "Dict[(str, str)]"
                ],
                "keyConverter": [
                    "Optional[str]"
                ],
                "valueConverter": [
                    "Optional[str]"
                ]
            }
        },
        "RDD.saveAsNewAPIHadoopFile": {
            "name": "saveAsNewAPIHadoopFile",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [
                    "RDD[Tuple[(K, V)]]"
                ],
                "path": [
                    "str"
                ],
                "outputFormatClass": [
                    "str"
                ],
                "keyClass": [
                    "Optional[str]"
                ],
                "valueClass": [
                    "Optional[str]"
                ],
                "keyConverter": [
                    "Optional[str]"
                ],
                "valueConverter": [
                    "Optional[str]"
                ],
                "conf": [
                    "Optional[Dict[(str, str)]]"
                ]
            }
        },
        "RDD.saveAsHadoopDataset": {
            "name": "saveAsHadoopDataset",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [
                    "RDD[Tuple[(K, V)]]"
                ],
                "conf": [
                    "Dict[(str, str)]"
                ],
                "keyConverter": [
                    "Optional[str]"
                ],
                "valueConverter": [
                    "Optional[str]"
                ]
            }
        },
        "RDD.saveAsHadoopFile": {
            "name": "saveAsHadoopFile",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [
                    "RDD[Tuple[(K, V)]]"
                ],
                "path": [
                    "str"
                ],
                "outputFormatClass": [
                    "str"
                ],
                "keyClass": [
                    "Optional[str]"
                ],
                "valueClass": [
                    "Optional[str]"
                ],
                "keyConverter": [
                    "Optional[str]"
                ],
                "valueConverter": [
                    "Optional[str]"
                ],
                "conf": [
                    "Optional[str]"
                ],
                "compressionCodecClass": [
                    "Optional[str]"
                ]
            }
        },
        "RDD.saveAsSequenceFile": {
            "name": "saveAsSequenceFile",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [
                    "RDD[Tuple[(K, V)]]"
                ],
                "path": [
                    "str"
                ],
                "compressionCodecClass": [
                    "Optional[str]"
                ]
            }
        },
        "RDD.saveAsPickleFile": {
            "name": "saveAsPickleFile",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "batchSize": [
                    "int"
                ]
            }
        },
        "RDD.saveAsTextFile": {
            "name": "saveAsTextFile",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "compressionCodecClass": [
                    "Optional[str]"
                ]
            }
        },
        "RDD.collectAsMap": {
            "name": "collectAsMap",
            "location": 302,
            "return": [
                "Dict[(K, V)]"
            ],
            "arguments": {
                "self": [
                    "RDD[Tuple[(K, V)]]"
                ]
            }
        },
        "RDD.keys": {
            "name": "keys",
            "location": 303,
            "return": [
                "RDD[K]"
            ],
            "arguments": {
                "self": [
                    "RDD[Tuple[(K, V)]]"
                ]
            }
        },
        "RDD.values": {
            "name": "values",
            "location": 304,
            "return": [
                "RDD[V]"
            ],
            "arguments": {
                "self": [
                    "RDD[Tuple[(K, V)]]"
                ]
            }
        },
        "RDD.reduceByKey": {
            "name": "reduceByKey",
            "location": 305,
            "return": [
                "RDD[Tuple[(K, V)]]"
            ],
            "arguments": {
                "self": [
                    "RDD[Tuple[(K, V)]]"
                ],
                "func": [
                    "Callable[([V, V], V)]"
                ],
                "numPartitions": [
                    "Optional[int]"
                ],
                "partitionFunc": [
                    "Callable[([K], int)]"
                ]
            }
        },
        "RDD.reduceByKeyLocally": {
            "name": "reduceByKeyLocally",
            "location": 311,
            "return": [
                "Dict[(K, V)]"
            ],
            "arguments": {
                "self": [
                    "RDD[Tuple[(K, V)]]"
                ],
                "func": [
                    "Callable[([V, V], V)]"
                ]
            }
        },
        "RDD.countByKey": {
            "name": "countByKey",
            "location": 314,
            "return": [
                "Dict[(K, int)]"
            ],
            "arguments": {
                "self": [
                    "RDD[Tuple[(K, V)]]"
                ]
            }
        },
        "RDD.join": {
            "name": "join",
            "location": 315,
            "return": [
                "RDD[Tuple[(K, Tuple[(V, U)])]]"
            ],
            "arguments": {
                "self": [
                    "RDD[Tuple[(K, V)]]"
                ],
                "other": [
                    "RDD[Tuple[(K, U)]]"
                ],
                "numPartitions": [
                    "Optional[int]"
                ]
            }
        },
        "RDD.leftOuterJoin": {
            "name": "leftOuterJoin",
            "location": 320,
            "return": [
                "RDD[Tuple[(K, Tuple[(V, Optional[U])])]]"
            ],
            "arguments": {
                "self": [
                    "RDD[Tuple[(K, V)]]"
                ],
                "other": [
                    "RDD[Tuple[(K, U)]]"
                ],
                "numPartitions": [
                    "Optional[int]"
                ]
            }
        },
        "RDD.rightOuterJoin": {
            "name": "rightOuterJoin",
            "location": 325,
            "return": [
                "RDD[Tuple[(K, Tuple[(Optional[V], U)])]]"
            ],
            "arguments": {
                "self": [
                    "RDD[Tuple[(K, V)]]"
                ],
                "other": [
                    "RDD[Tuple[(K, U)]]"
                ],
                "numPartitions": [
                    "Optional[int]"
                ]
            }
        },
        "RDD.fullOuterJoin": {
            "name": "fullOuterJoin",
            "location": 330,
            "return": [
                "RDD[Tuple[(K, Tuple[(Optional[V], Optional[U])])]]"
            ],
            "arguments": {
                "self": [
                    "RDD[Tuple[(K, V)]]"
                ],
                "other": [
                    "RDD[Tuple[(K, U)]]"
                ],
                "numPartitions": [
                    "Optional[int]"
                ]
            }
        },
        "RDD.partitionBy": {
            "name": "partitionBy",
            "location": 335,
            "return": [
                "RDD[Tuple[(K, V)]]"
            ],
            "arguments": {
                "self": [
                    "RDD[Tuple[(K, V)]]"
                ],
                "numPartitions": [
                    "int"
                ],
                "partitionFunc": [
                    "Callable[([K], int)]"
                ]
            }
        },
        "RDD.combineByKey": {
            "name": "combineByKey",
            "location": 340,
            "return": [
                "RDD[Tuple[(K, U)]]"
            ],
            "arguments": {
                "self": [
                    "RDD[Tuple[(K, V)]]"
                ],
                "createCombiner": [
                    "Callable[([V], U)]"
                ],
                "mergeValue": [
                    "Callable[([U, V], U)]"
                ],
                "mergeCombiners": [
                    "Callable[([U, U], U)]"
                ],
                "numPartitions": [
                    "Optional[int]"
                ],
                "partitionFunc": [
                    "Callable[([K], int)]"
                ]
            }
        },
        "RDD.aggregateByKey": {
            "name": "aggregateByKey",
            "location": 348,
            "return": [
                "RDD[Tuple[(K, U)]]"
            ],
            "arguments": {
                "self": [
                    "RDD[Tuple[(K, V)]]"
                ],
                "zeroValue": [
                    "U"
                ],
                "seqFunc": [
                    "Callable[([U, V], U)]"
                ],
                "combFunc": [
                    "Callable[([U, U], U)]"
                ],
                "numPartitions": [
                    "Optional[int]"
                ],
                "partitionFunc": [
                    "Callable[([K], int)]"
                ]
            }
        },
        "RDD.foldByKey": {
            "name": "foldByKey",
            "location": 356,
            "return": [
                "RDD[Tuple[(K, V)]]"
            ],
            "arguments": {
                "self": [
                    "RDD[Tuple[(K, V)]]"
                ],
                "zeroValue": [
                    "V"
                ],
                "func": [
                    "Callable[([V, V], V)]"
                ],
                "numPartitions": [
                    "Optional[int]"
                ],
                "partitionFunc": [
                    "Callable[([K], int)]"
                ]
            }
        },
        "RDD.groupByKey": {
            "name": "groupByKey",
            "location": 363,
            "return": [
                "RDD[Tuple[(K, Iterable[V])]]"
            ],
            "arguments": {
                "self": [
                    "RDD[Tuple[(K, V)]]"
                ],
                "numPartitions": [
                    "Optional[int]"
                ],
                "partitionFunc": [
                    "Callable[([K], int)]"
                ]
            }
        },
        "RDD.flatMapValues": {
            "name": "flatMapValues",
            "location": 368,
            "return": [
                "RDD[Tuple[(K, U)]]"
            ],
            "arguments": {
                "self": [
                    "RDD[Tuple[(K, V)]]"
                ],
                "f": [
                    "Callable[([V], Iterable[U])]"
                ]
            }
        },
        "RDD.mapValues": {
            "name": "mapValues",
            "location": 371,
            "return": [
                "RDD[Tuple[(K, U)]]"
            ],
            "arguments": {
                "self": [
                    "RDD[Tuple[(K, V)]]"
                ],
                "f": [
                    "Callable[([V], U)]"
                ]
            }
        },
        "RDD.groupWith": {
            "name": "groupWith",
            "location": 383,
            "return": [
                "RDD[Tuple[(K, Tuple[(ResultIterable[V], ResultIterable[V1], ResultIterable[V2], ResultIterable[V3])])]]"
            ],
            "arguments": {
                "self": [
                    "RDD[Tuple[(K, V)]]"
                ],
                "other1": [
                    "RDD[Tuple[(K, V1)]]"
                ],
                "other2": [
                    "RDD[Tuple[(K, V2)]]"
                ],
                "other3": [
                    "RDD[Tuple[(K, V3)]]"
                ]
            }
        },
        "RDD.cogroup": {
            "name": "cogroup",
            "location": 399,
            "return": [
                "RDD[Tuple[(K, Tuple[(ResultIterable[V], ResultIterable[U])])]]"
            ],
            "arguments": {
                "self": [
                    "RDD[Tuple[(K, V)]]"
                ],
                "other": [
                    "RDD[Tuple[(K, U)]]"
                ],
                "numPartitions": [
                    "Optional[int]"
                ]
            }
        },
        "RDD.sampleByKey": {
            "name": "sampleByKey",
            "location": 404,
            "return": [
                "RDD[Tuple[(K, V)]]"
            ],
            "arguments": {
                "self": [
                    "RDD[Tuple[(K, V)]]"
                ],
                "withReplacement": [
                    "bool"
                ],
                "fractions": [
                    "Dict[(K, Union[(float, int)])]"
                ],
                "seed": [
                    "Optional[int]"
                ]
            }
        },
        "RDD.subtractByKey": {
            "name": "subtractByKey",
            "location": 410,
            "return": [
                "RDD[Tuple[(K, V)]]"
            ],
            "arguments": {
                "self": [
                    "RDD[Tuple[(K, V)]]"
                ],
                "other": [
                    "RDD[Tuple[(K, U)]]"
                ],
                "numPartitions": [
                    "Optional[int]"
                ]
            }
        },
        "RDD.subtract": {
            "name": "subtract",
            "location": 415,
            "return": [
                "RDD[T]"
            ],
            "arguments": {
                "self": [
                    "RDD[T]"
                ],
                "other": [
                    "RDD[T]"
                ],
                "numPartitions": [
                    "Optional[int]"
                ]
            }
        },
        "RDD.keyBy": {
            "name": "keyBy",
            "location": 418,
            "return": [
                "RDD[Tuple[(K, T)]]"
            ],
            "arguments": {
                "self": [
                    "RDD[T]"
                ],
                "f": [
                    "Callable[([T], K)]"
                ]
            }
        },
        "RDD.repartition": {
            "name": "repartition",
            "location": 419,
            "return": [
                "RDD[T]"
            ],
            "arguments": {
                "self": [],
                "numPartitions": [
                    "int"
                ]
            }
        },
        "RDD.coalesce": {
            "name": "coalesce",
            "location": 420,
            "return": [
                "RDD[T]"
            ],
            "arguments": {
                "self": [],
                "numPartitions": [
                    "int"
                ],
                "shuffle": [
                    "bool"
                ]
            }
        },
        "RDD.zip": {
            "name": "zip",
            "location": 421,
            "return": [
                "RDD[Tuple[(T, U)]]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "RDD[U]"
                ]
            }
        },
        "RDD.zipWithIndex": {
            "name": "zipWithIndex",
            "location": 422,
            "return": [
                "RDD[Tuple[(T, int)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RDD.zipWithUniqueId": {
            "name": "zipWithUniqueId",
            "location": 423,
            "return": [
                "RDD[Tuple[(T, int)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RDD.name": {
            "name": "name",
            "location": 424,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RDD.setName": {
            "name": "setName",
            "location": 425,
            "return": [
                "RDD[T]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "RDD.toDebugString": {
            "name": "toDebugString",
            "location": 426,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "RDD.getStorageLevel": {
            "name": "getStorageLevel",
            "location": 427,
            "return": [
                "StorageLevel"
            ],
            "arguments": {
                "self": []
            }
        },
        "RDD.lookup": {
            "name": "lookup",
            "location": 428,
            "return": [
                "List[V]"
            ],
            "arguments": {
                "self": [
                    "RDD[Tuple[(K, V)]]"
                ],
                "key": [
                    "K"
                ]
            }
        },
        "RDD.countApprox": {
            "name": "countApprox",
            "location": 429,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int"
                ],
                "confidence": [
                    "float"
                ]
            }
        },
        "RDD.sumApprox": {
            "name": "sumApprox",
            "location": 430,
            "return": [
                "BoundedFloat"
            ],
            "arguments": {
                "self": [
                    "RDD[Union[(float, int)]]"
                ],
                "timeout": [
                    "int"
                ],
                "confidence": [
                    "float"
                ]
            }
        },
        "RDD.meanApprox": {
            "name": "meanApprox",
            "location": 433,
            "return": [
                "BoundedFloat"
            ],
            "arguments": {
                "self": [
                    "RDD[Union[(float, int)]]"
                ],
                "timeout": [
                    "int"
                ],
                "confidence": [
                    "float"
                ]
            }
        },
        "RDD.countApproxDistinct": {
            "name": "countApproxDistinct",
            "location": 436,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "relativeSD": [
                    "float"
                ]
            }
        },
        "RDD.toLocalIterator": {
            "name": "toLocalIterator",
            "location": 437,
            "return": [
                "Iterator[T]"
            ],
            "arguments": {
                "self": [],
                "prefetchPartitions": [
                    "bool"
                ]
            }
        },
        "RDD.barrier": {
            "name": "barrier",
            "location": 438,
            "return": [
                "RDDBarrier[T]"
            ],
            "arguments": {
                "self": [
                    "RDD[T]"
                ]
            }
        },
        "RDD.withResources": {
            "name": "withResources",
            "location": 439,
            "return": [
                "RDD[T]"
            ],
            "arguments": {
                "self": [
                    "RDD[T]"
                ],
                "profile": [
                    "ResourceProfile"
                ]
            }
        },
        "RDD.getResourceProfile": {
            "name": "getResourceProfile",
            "location": 440,
            "return": [
                "Optional[ResourceProfile]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RDD.toDF": {
            "name": "toDF",
            "location": 448,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [
                    "RDD[RowLike]"
                ],
                "schema": [
                    "Optional[StructType]"
                ]
            }
        },
        "RDDBarrier.__init__": {
            "name": "__init__",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rdd": [
                    "RDD[T]"
                ]
            }
        },
        "RDDBarrier.mapPartitions": {
            "name": "mapPartitions",
            "location": 453,
            "return": [
                "RDD[U]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([Iterable[T]], Iterable[U])]"
                ],
                "preservesPartitioning": [
                    "bool"
                ]
            }
        },
        "RDDBarrier.mapPartitionsWithIndex": {
            "name": "mapPartitionsWithIndex",
            "location": 456,
            "return": [
                "RDD[U]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([int, Iterable[T]], Iterable[U])]"
                ],
                "preservesPartitioning": [
                    "bool"
                ]
            }
        },
        "PipelinedRDD.__init__": {
            "name": "__init__",
            "location": 471,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prev": [
                    "RDD[T]"
                ],
                "func": [
                    "Callable[([Iterable[T]], Iterable[U])]"
                ],
                "preservesPartitioning": [
                    "bool"
                ],
                "isFromBarrier": [
                    "bool"
                ]
            }
        },
        "PipelinedRDD.getNumPartitions": {
            "name": "getNumPartitions",
            "location": 478,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipelinedRDD.id": {
            "name": "id",
            "location": 479,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/rddsampler.py": {
        "RDDSamplerBase.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "withReplacement": [
                    "bool"
                ],
                "seed": [
                    "Optional[int]"
                ]
            }
        },
        "RDDSamplerBase.initRandomGenerator": {
            "name": "initRandomGenerator",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "split": [
                    "int"
                ]
            }
        },
        "RDDSamplerBase.getUniformSample": {
            "name": "getUniformSample",
            "location": 29,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "RDDSamplerBase.getPoissonSample": {
            "name": "getPoissonSample",
            "location": 30,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "mean": [
                    "float"
                ]
            }
        },
        "RDDSamplerBase.func": {
            "name": "func",
            "location": 31,
            "return": [
                "Iterator[Any]"
            ],
            "arguments": {
                "self": [],
                "split": [
                    "int"
                ],
                "iterator": [
                    "Iterator[Any]"
                ]
            }
        },
        "RDDSampler.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "withReplacement": [
                    "bool"
                ],
                "fraction": [
                    "float"
                ],
                "seed": [
                    "Optional[int]"
                ]
            }
        },
        "RDDSampler.func": {
            "name": "func",
            "location": 37,
            "return": [
                "Iterator[T]"
            ],
            "arguments": {
                "self": [],
                "split": [
                    "int"
                ],
                "iterator": [
                    "Iterator[T]"
                ]
            }
        },
        "RDDRangeSampler.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lowerBound": [
                    "T"
                ],
                "upperBound": [
                    "T"
                ],
                "seed": [
                    "Optional[Any]"
                ]
            }
        },
        "RDDRangeSampler.func": {
            "name": "func",
            "location": 43,
            "return": [
                "Iterator[T]"
            ],
            "arguments": {
                "self": [],
                "split": [
                    "int"
                ],
                "iterator": [
                    "Iterator[T]"
                ]
            }
        },
        "RDDStratifiedSampler.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "withReplacement": [
                    "bool"
                ],
                "fractions": [
                    "Dict[(K, float)]"
                ],
                "seed": [
                    "Optional[int]"
                ]
            }
        },
        "RDDStratifiedSampler.func": {
            "name": "func",
            "location": 52,
            "return": [
                "Iterator[Tuple[(K, V)]]"
            ],
            "arguments": {
                "self": [],
                "split": [
                    "int"
                ],
                "iterator": [
                    "Iterator[Tuple[(K, V)]]"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/resultiterable.py": {
        "ResultIterable.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "SizedIterable[T]"
                ]
            }
        },
        "ResultIterable.__iter__": {
            "name": "__iter__",
            "location": 29,
            "return": [
                "Iterator[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultIterable.__len__": {
            "name": "__len__",
            "location": 30,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/serializers.py": {
        "write_with_length": {
            "name": "write_with_length",
            "location": 116,
            "return": [],
            "arguments": {
                "obj": [
                    "Any"
                ],
                "stream": [
                    "Any"
                ]
            }
        },
        "pack_long": {
            "name": "pack_long",
            "location": 117,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "read_int": {
            "name": "read_int",
            "location": 118,
            "return": [],
            "arguments": {
                "stream": []
            }
        },
        "read_long": {
            "name": "read_long",
            "location": 119,
            "return": [],
            "arguments": {
                "stream": []
            }
        },
        "read_bool": {
            "name": "read_bool",
            "location": 120,
            "return": [],
            "arguments": {
                "stream": []
            }
        },
        "write_int": {
            "name": "write_int",
            "location": 121,
            "return": [],
            "arguments": {
                "value": [],
                "stream": []
            }
        },
        "write_long": {
            "name": "write_long",
            "location": 122,
            "return": [],
            "arguments": {
                "value": [],
                "stream": []
            }
        },
        "Serializer.dump_stream": {
            "name": "dump_stream",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterator": [
                    "Any"
                ],
                "stream": [
                    "Any"
                ]
            }
        },
        "Serializer.load_stream": {
            "name": "load_stream",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "Any"
                ]
            }
        },
        "Serializer.__eq__": {
            "name": "__eq__",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Serializer.__ne__": {
            "name": "__ne__",
            "location": 33,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Serializer.__hash__": {
            "name": "__hash__",
            "location": 34,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "FramedSerializer.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FramedSerializer.dump_stream": {
            "name": "dump_stream",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterator": [
                    "Any"
                ],
                "stream": [
                    "Any"
                ]
            }
        },
        "FramedSerializer.load_stream": {
            "name": "load_stream",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "Any"
                ]
            }
        },
        "FramedSerializer.dumps": {
            "name": "dumps",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "FramedSerializer.loads": {
            "name": "loads",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "BatchedSerializer.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serializer": [
                    "Any"
                ],
                "batchSize": [
                    "Any"
                ]
            }
        },
        "BatchedSerializer.dump_stream": {
            "name": "dump_stream",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterator": [
                    "Any"
                ],
                "stream": [
                    "Any"
                ]
            }
        },
        "BatchedSerializer.load_stream": {
            "name": "load_stream",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "stream": [
                    "Any"
                ]
            }
        },
        "FlattenedValuesSerializer.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serializer": [
                    "Any"
                ],
                "batchSize": [
                    "int"
                ]
            }
        },
        "FlattenedValuesSerializer.load_stream": {
            "name": "load_stream",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "stream": [
                    "Any"
                ]
            }
        },
        "AutoBatchedSerializer.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serializer": [
                    "Any"
                ],
                "bestSize": [
                    "Any"
                ]
            }
        },
        "AutoBatchedSerializer.dump_stream": {
            "name": "dump_stream",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterator": [
                    "Any"
                ],
                "stream": [
                    "Any"
                ]
            }
        },
        "CartesianDeserializer.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key_ser": [
                    "Any"
                ],
                "val_ser": [
                    "Any"
                ]
            }
        },
        "CartesianDeserializer.load_stream": {
            "name": "load_stream",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "stream": [
                    "Any"
                ]
            }
        },
        "PairDeserializer.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key_ser": [
                    "Any"
                ],
                "val_ser": [
                    "Any"
                ]
            }
        },
        "PairDeserializer.load_stream": {
            "name": "load_stream",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "stream": [
                    "Any"
                ]
            }
        },
        "NoOpSerializer.loads": {
            "name": "loads",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "NoOpSerializer.dumps": {
            "name": "dumps",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "PickleSerializer.dumps": {
            "name": "dumps",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "PickleSerializer.loads": {
            "name": "loads",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ],
                "encoding": [
                    "str"
                ]
            }
        },
        "CloudPickleSerializer.dumps": {
            "name": "dumps",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "MarshalSerializer.dumps": {
            "name": "dumps",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "MarshalSerializer.loads": {
            "name": "loads",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "AutoSerializer.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoSerializer.dumps": {
            "name": "dumps",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "AutoSerializer.loads": {
            "name": "loads",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "CompressedSerializer.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serializer": [
                    "Any"
                ]
            }
        },
        "CompressedSerializer.dumps": {
            "name": "dumps",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "CompressedSerializer.loads": {
            "name": "loads",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "UTF8Deserializer.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "use_unicode": [
                    "bool"
                ]
            }
        },
        "UTF8Deserializer.loads": {
            "name": "loads",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "stream": [
                    "Any"
                ]
            }
        },
        "UTF8Deserializer.load_stream": {
            "name": "load_stream",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "Any"
                ]
            }
        },
        "ChunkedStream.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wrapped": [
                    "Any"
                ],
                "buffer_size": [
                    "Any"
                ]
            }
        },
        "ChunkedStream.write": {
            "name": "write",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bytes": [
                    "Any"
                ]
            }
        },
        "ChunkedStream.close": {
            "name": "close",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChunkedStream.closed": {
            "name": "closed",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/shell.py": {},
    "pyspark-stubs-master/third_party/3/pyspark/shuffle.py": {
        "get_used_memory": {
            "name": "get_used_memory",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "Aggregator.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "createCombiner": [
                    "Any"
                ],
                "mergeValue": [
                    "Any"
                ],
                "mergeCombiners": [
                    "Any"
                ]
            }
        },
        "SimpleAggregator.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "combiner": [
                    "Any"
                ]
            }
        },
        "Merger.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aggregator": [
                    "Any"
                ]
            }
        },
        "Merger.mergeValues": {
            "name": "mergeValues",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterator": [
                    "Any"
                ]
            }
        },
        "Merger.mergeCombiners": {
            "name": "mergeCombiners",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterator": [
                    "Any"
                ]
            }
        },
        "Merger.items": {
            "name": "items",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExternalMerger.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aggregator": [
                    "Any"
                ],
                "memory_limit": [
                    "int"
                ],
                "serializer": [
                    "Optional[Any]"
                ],
                "localdirs": [
                    "Optional[Any]"
                ],
                "scale": [
                    "int"
                ],
                "partitions": [
                    "int"
                ],
                "batch": [
                    "int"
                ]
            }
        },
        "ExternalMerger.mergeValues": {
            "name": "mergeValues",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterator": [
                    "Any"
                ]
            }
        },
        "ExternalMerger.mergeCombiners": {
            "name": "mergeCombiners",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterator": [
                    "Any"
                ],
                "limit": [
                    "Optional[Any]"
                ]
            }
        },
        "ExternalMerger.items": {
            "name": "items",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExternalSorter.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "memory_limit": [
                    "Any"
                ],
                "serializer": [
                    "Optional[Any]"
                ]
            }
        },
        "ExternalSorter.sorted": {
            "name": "sorted",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "iterator": [
                    "Any"
                ],
                "key": [
                    "Optional[Any]"
                ],
                "reverse": [
                    "bool"
                ]
            }
        },
        "ExternalList.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "Any"
                ]
            }
        },
        "ExternalList.__iter__": {
            "name": "__iter__",
            "location": 91,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExternalList.__len__": {
            "name": "__len__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExternalList.append": {
            "name": "append",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "ExternalList.__del__": {
            "name": "__del__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExternalListOfList.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "Any"
                ]
            }
        },
        "ExternalListOfList.append": {
            "name": "append",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "ExternalListOfList.__iter__": {
            "name": "__iter__",
            "location": 100,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByKey.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterator": [
                    "Any"
                ]
            }
        },
        "GroupByKey.__iter__": {
            "name": "__iter__",
            "location": 105,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExternalGroupBy.flattened_serializer": {
            "name": "flattened_serializer",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/statcounter.py": {
        "StatCounter.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "Optional[Iterable[float]]"
                ]
            }
        },
        "StatCounter.merge": {
            "name": "merge",
            "location": 32,
            "return": [
                "StatCounter"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "StatCounter.mergeStats": {
            "name": "mergeStats",
            "location": 33,
            "return": [
                "StatCounter"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "StatCounter"
                ]
            }
        },
        "StatCounter.copy": {
            "name": "copy",
            "location": 34,
            "return": [
                "StatCounter"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatCounter.count": {
            "name": "count",
            "location": 35,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatCounter.mean": {
            "name": "mean",
            "location": 36,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatCounter.sum": {
            "name": "sum",
            "location": 37,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatCounter.min": {
            "name": "min",
            "location": 38,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatCounter.max": {
            "name": "max",
            "location": 39,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatCounter.variance": {
            "name": "variance",
            "location": 40,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatCounter.sampleVariance": {
            "name": "sampleVariance",
            "location": 41,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatCounter.stdev": {
            "name": "stdev",
            "location": 42,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatCounter.sampleStdev": {
            "name": "sampleStdev",
            "location": 43,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatCounter.asDict": {
            "name": "asDict",
            "location": 44,
            "return": [
                "Dict[(str, Union[(float, int)])]"
            ],
            "arguments": {
                "self": [],
                "sample": [
                    "bool"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/status.py": {
        "StatusTracker.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jtracker": [
                    "JavaObject"
                ]
            }
        },
        "StatusTracker.getJobIdsForGroup": {
            "name": "getJobIdsForGroup",
            "location": 38,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "jobGroup": [
                    "Optional[str]"
                ]
            }
        },
        "StatusTracker.getActiveStageIds": {
            "name": "getActiveStageIds",
            "location": 39,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusTracker.getActiveJobsIds": {
            "name": "getActiveJobsIds",
            "location": 40,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusTracker.getJobInfo": {
            "name": "getJobInfo",
            "location": 41,
            "return": [
                "SparkJobInfo"
            ],
            "arguments": {
                "self": [],
                "jobId": [
                    "int"
                ]
            }
        },
        "StatusTracker.getStageInfo": {
            "name": "getStageInfo",
            "location": 42,
            "return": [
                "SparkStageInfo"
            ],
            "arguments": {
                "self": [],
                "stageId": [
                    "int"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/storagelevel.py": {
        "StorageLevel.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "useDisk": [
                    "bool"
                ],
                "useMemory": [
                    "bool"
                ],
                "useOffHeap": [
                    "bool"
                ],
                "deserialized": [
                    "bool"
                ],
                "replication": [
                    "int"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/taskcontext.py": {
        "TaskContext.__new__": {
            "name": "__new__",
            "location": 24,
            "return": [
                "TaskContext"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TaskContext.get": {
            "name": "get",
            "location": 26,
            "return": [
                "TaskContext"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TaskContext.stageId": {
            "name": "stageId",
            "location": 27,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskContext.partitionId": {
            "name": "partitionId",
            "location": 28,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskContext.attemptNumber": {
            "name": "attemptNumber",
            "location": 29,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskContext.taskAttemptId": {
            "name": "taskAttemptId",
            "location": 30,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskContext.getLocalProperty": {
            "name": "getLocalProperty",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "TaskContext.resources": {
            "name": "resources",
            "location": 32,
            "return": [
                "Dict[(str, ResourceInformation)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BarrierTaskContext.get": {
            "name": "get",
            "location": 38,
            "return": [
                "BarrierTaskContext"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BarrierTaskContext.barrier": {
            "name": "barrier",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BarrierTaskContext.allGather": {
            "name": "allGather",
            "location": 40,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "BarrierTaskContext.getTaskInfos": {
            "name": "getTaskInfos",
            "location": 41,
            "return": [
                "List[BarrierTaskInfo]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BarrierTaskInfo.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/traceback_utils.py": {
        "first_spark_call": {
            "name": "first_spark_call",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "SCCallSiteSync.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sc": [
                    "Any"
                ]
            }
        },
        "SCCallSiteSync.__enter__": {
            "name": "__enter__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SCCallSiteSync.__exit__": {
            "name": "__exit__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "tb": [
                    "Any"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/util.py": {
        "print_exec": {
            "name": "print_exec",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [
                    "Any"
                ]
            }
        },
        "fail_on_stopiteration": {
            "name": "fail_on_stopiteration",
            "location": 31,
            "return": [
                "F"
            ],
            "arguments": {
                "f": [
                    "F"
                ]
            }
        },
        "VersionUtils.majorMinorVersion": {
            "name": "majorMinorVersion",
            "location": 29,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "sparkVersion": [
                    "str"
                ]
            }
        },
        "InheritableThread.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "target": [
                    "Any"
                ]
            }
        },
        "InheritableThread.__del__": {
            "name": "__del__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/version.py": {},
    "pyspark-stubs-master/third_party/3/pyspark/worker.py": {
        "report_times": {
            "name": "report_times",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "outfile": [
                    "Any"
                ],
                "boot": [
                    "Any"
                ],
                "init": [
                    "Any"
                ],
                "finish": [
                    "Any"
                ]
            }
        },
        "add_path": {
            "name": "add_path",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "Any"
                ]
            }
        },
        "read_command": {
            "name": "read_command",
            "location": 56,
            "return": [],
            "arguments": {
                "serializer": [
                    "Any"
                ],
                "file": [
                    "Any"
                ]
            }
        },
        "chain": {
            "name": "chain",
            "location": 57,
            "return": [],
            "arguments": {
                "f": [
                    "Any"
                ],
                "g": [
                    "Any"
                ]
            }
        },
        "wrap_udf": {
            "name": "wrap_udf",
            "location": 58,
            "return": [],
            "arguments": {
                "f": [
                    "Any"
                ],
                "return_type": [
                    "Any"
                ]
            }
        },
        "wrap_scalar_pandas_udf": {
            "name": "wrap_scalar_pandas_udf",
            "location": 59,
            "return": [],
            "arguments": {
                "f": [
                    "Any"
                ],
                "return_type": [
                    "Any"
                ]
            }
        },
        "wrap_pandas_iter_udf": {
            "name": "wrap_pandas_iter_udf",
            "location": 60,
            "return": [],
            "arguments": {
                "f": [
                    "Any"
                ],
                "return_type": [
                    "Any"
                ]
            }
        },
        "wrap_cogrouped_map_pandas_udf": {
            "name": "wrap_cogrouped_map_pandas_udf",
            "location": 61,
            "return": [],
            "arguments": {
                "f": [
                    "Any"
                ],
                "return_type": [
                    "Any"
                ],
                "argspec": [
                    "Any"
                ]
            }
        },
        "wrap_grouped_map_pandas_udf": {
            "name": "wrap_grouped_map_pandas_udf",
            "location": 62,
            "return": [],
            "arguments": {
                "f": [
                    "Any"
                ],
                "return_type": [
                    "Any"
                ],
                "argspec": [
                    "Any"
                ]
            }
        },
        "wrap_grouped_agg_pandas_udf": {
            "name": "wrap_grouped_agg_pandas_udf",
            "location": 63,
            "return": [],
            "arguments": {
                "f": [
                    "Any"
                ],
                "return_type": [
                    "Any"
                ]
            }
        },
        "wrap_window_agg_pandas_udf": {
            "name": "wrap_window_agg_pandas_udf",
            "location": 64,
            "return": [],
            "arguments": {
                "f": [
                    "Any"
                ],
                "return_type": [
                    "Any"
                ],
                "runner_conf": [
                    "Any"
                ],
                "udf_index": [
                    "Any"
                ]
            }
        },
        "wrap_unbounded_window_agg_pandas_udf": {
            "name": "wrap_unbounded_window_agg_pandas_udf",
            "location": 67,
            "return": [],
            "arguments": {
                "f": [
                    "Any"
                ],
                "return_type": [
                    "Any"
                ]
            }
        },
        "wrap_bounded_window_agg_pandas_udf": {
            "name": "wrap_bounded_window_agg_pandas_udf",
            "location": 68,
            "return": [],
            "arguments": {
                "f": [
                    "Any"
                ],
                "return_type": [
                    "Any"
                ]
            }
        },
        "read_single_udf": {
            "name": "read_single_udf",
            "location": 69,
            "return": [],
            "arguments": {
                "pickleSer": [
                    "Any"
                ],
                "infile": [
                    "Any"
                ],
                "eval_type": [
                    "Any"
                ],
                "runner_conf": [
                    "Any"
                ],
                "udf_index": [
                    "Any"
                ]
            }
        },
        "read_udfs": {
            "name": "read_udfs",
            "location": 72,
            "return": [],
            "arguments": {
                "pickleSer": [
                    "Any"
                ],
                "infile": [
                    "Any"
                ],
                "eval_type": [
                    "Any"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "infile": [
                    "Any"
                ],
                "outfile": [
                    "Any"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/_globals.py": {
        "_NoValueType.__new__": {
            "name": "__new__",
            "location": 26,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "_NoValueType.__reduce__": {
            "name": "__reduce__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/_typing.py": {
        "SupportsIAdd.__iadd__": {
            "name": "__iadd__",
            "location": 28,
            "return": [
                "SupportsIAdd"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsIAdd"
                ]
            }
        },
        "SupportsOrdering.__le__": {
            "name": "__le__",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsOrdering"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/__init__.py": {
        "since": {
            "name": "since",
            "location": 66,
            "return": [
                "Callable[([T], T)]"
            ],
            "arguments": {
                "version": [
                    "str"
                ]
            }
        },
        "copy_func": {
            "name": "copy_func",
            "location": 67,
            "return": [
                "F"
            ],
            "arguments": {
                "f": [
                    "F"
                ],
                "name": [
                    "Optional[str]"
                ],
                "sinceversion": [
                    "Optional[str]"
                ],
                "doc": [
                    "Optional[str]"
                ]
            }
        },
        "keyword_only": {
            "name": "keyword_only",
            "location": 73,
            "return": [
                "F"
            ],
            "arguments": {
                "func": [
                    "F"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/ml/base.py": {
        "_FitMultipleIterator.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fitSingleModel": [
                    "Callable[([int], Transformer)]"
                ],
                "numModels": [
                    "int"
                ]
            }
        },
        "_FitMultipleIterator.__iter__": {
            "name": "__iter__",
            "location": 61,
            "return": [
                "_FitMultipleIterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "_FitMultipleIterator.__next__": {
            "name": "__next__",
            "location": 62,
            "return": [
                "Tuple[(int, Transformer)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_FitMultipleIterator.next": {
            "name": "next",
            "location": 63,
            "return": [
                "Tuple[(int, Transformer)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Estimator.fit": {
            "name": "fit",
            "location": 69,
            "return": [
                "List[M]"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "DataFrame"
                ],
                "params": [
                    "List[ParamMap]"
                ]
            }
        },
        "Estimator.fitMultiple": {
            "name": "fitMultiple",
            "location": 70,
            "return": [
                "Iterable[Tuple[(int, M)]]"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "DataFrame"
                ],
                "params": [
                    "List[ParamMap]"
                ]
            }
        },
        "Transformer.transform": {
            "name": "transform",
            "location": 75,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "DataFrame"
                ],
                "params": [
                    "Optional[ParamMap]"
                ]
            }
        },
        "UnaryTransformer.createTransformFunc": {
            "name": "createTransformFunc",
            "location": 82,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnaryTransformer.outputDataType": {
            "name": "outputDataType",
            "location": 83,
            "return": [
                "DataType"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnaryTransformer.validateInputType": {
            "name": "validateInputType",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inputType": [
                    "DataType"
                ]
            }
        },
        "UnaryTransformer.transformSchema": {
            "name": "transformSchema",
            "location": 85,
            "return": [
                "StructType"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "StructType"
                ]
            }
        },
        "UnaryTransformer.setInputCol": {
            "name": "setInputCol",
            "location": 86,
            "return": [
                "M"
            ],
            "arguments": {
                "self": [
                    "M"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "UnaryTransformer.setOutputCol": {
            "name": "setOutputCol",
            "location": 87,
            "return": [
                "M"
            ],
            "arguments": {
                "self": [
                    "M"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "Predictor.setLabelCol": {
            "name": "setLabelCol",
            "location": 92,
            "return": [
                "P"
            ],
            "arguments": {
                "self": [
                    "P"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "Predictor.setFeaturesCol": {
            "name": "setFeaturesCol",
            "location": 93,
            "return": [
                "P"
            ],
            "arguments": {
                "self": [
                    "P"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "Predictor.setPredictionCol": {
            "name": "setPredictionCol",
            "location": 94,
            "return": [
                "P"
            ],
            "arguments": {
                "self": [
                    "P"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "PredictionModel.setFeaturesCol": {
            "name": "setFeaturesCol",
            "location": 97,
            "return": [
                "M"
            ],
            "arguments": {
                "self": [
                    "M"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "PredictionModel.setPredictionCol": {
            "name": "setPredictionCol",
            "location": 98,
            "return": [
                "M"
            ],
            "arguments": {
                "self": [
                    "M"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "PredictionModel.numFeatures": {
            "name": "numFeatures",
            "location": 101,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredictionModel.predict": {
            "name": "predict",
            "location": 103,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/ml/classification.py": {
        "Classifier.setRawPredictionCol": {
            "name": "setRawPredictionCol",
            "location": 66,
            "return": [
                "P"
            ],
            "arguments": {
                "self": [
                    "P"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "ClassificationModel.setRawPredictionCol": {
            "name": "setRawPredictionCol",
            "location": 69,
            "return": [
                "P"
            ],
            "arguments": {
                "self": [
                    "P"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "ClassificationModel.numClasses": {
            "name": "numClasses",
            "location": 72,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassificationModel.predictRaw": {
            "name": "predictRaw",
            "location": 74,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Vector"
                ]
            }
        },
        "ProbabilisticClassifier.setProbabilityCol": {
            "name": "setProbabilityCol",
            "location": 83,
            "return": [
                "P"
            ],
            "arguments": {
                "self": [
                    "P"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "ProbabilisticClassifier.setThresholds": {
            "name": "setThresholds",
            "location": 84,
            "return": [
                "P"
            ],
            "arguments": {
                "self": [
                    "P"
                ],
                "value": [
                    "List[float]"
                ]
            }
        },
        "ProbabilisticClassificationModel.setProbabilityCol": {
            "name": "setProbabilityCol",
            "location": 89,
            "return": [
                "M"
            ],
            "arguments": {
                "self": [
                    "M"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "ProbabilisticClassificationModel.setThresholds": {
            "name": "setThresholds",
            "location": 90,
            "return": [
                "M"
            ],
            "arguments": {
                "self": [
                    "M"
                ],
                "value": [
                    "List[float]"
                ]
            }
        },
        "ProbabilisticClassificationModel.predictProbability": {
            "name": "predictProbability",
            "location": 92,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Vector"
                ]
            }
        },
        "_JavaClassifier.setRawPredictionCol": {
            "name": "setRawPredictionCol",
            "location": 95,
            "return": [
                "P"
            ],
            "arguments": {
                "self": [
                    "P"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "_JavaClassificationModel.numClasses": {
            "name": "numClasses",
            "location": 99,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_JavaClassificationModel.predictRaw": {
            "name": "predictRaw",
            "location": 100,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Vector"
                ]
            }
        },
        "_JavaProbabilisticClassificationModel.predictProbability": {
            "name": "predictProbability",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "_ClassificationSummary.predictions": {
            "name": "predictions",
            "location": 113,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ClassificationSummary.predictionCol": {
            "name": "predictionCol",
            "location": 115,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ClassificationSummary.labelCol": {
            "name": "labelCol",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ClassificationSummary.weightCol": {
            "name": "weightCol",
            "location": 119,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ClassificationSummary.labels": {
            "name": "labels",
            "location": 121,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ClassificationSummary.truePositiveRateByLabel": {
            "name": "truePositiveRateByLabel",
            "location": 123,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ClassificationSummary.falsePositiveRateByLabel": {
            "name": "falsePositiveRateByLabel",
            "location": 125,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ClassificationSummary.precisionByLabel": {
            "name": "precisionByLabel",
            "location": 127,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ClassificationSummary.recallByLabel": {
            "name": "recallByLabel",
            "location": 129,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ClassificationSummary.fMeasureByLabel": {
            "name": "fMeasureByLabel",
            "location": 130,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "beta": [
                    "float"
                ]
            }
        },
        "_ClassificationSummary.accuracy": {
            "name": "accuracy",
            "location": 132,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ClassificationSummary.weightedTruePositiveRate": {
            "name": "weightedTruePositiveRate",
            "location": 134,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ClassificationSummary.weightedFalsePositiveRate": {
            "name": "weightedFalsePositiveRate",
            "location": 136,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ClassificationSummary.weightedRecall": {
            "name": "weightedRecall",
            "location": 138,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ClassificationSummary.weightedPrecision": {
            "name": "weightedPrecision",
            "location": 140,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ClassificationSummary.weightedFMeasure": {
            "name": "weightedFMeasure",
            "location": 141,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "beta": [
                    "float"
                ]
            }
        },
        "_TrainingSummary.objectiveHistory": {
            "name": "objectiveHistory",
            "location": 145,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TrainingSummary.totalIterations": {
            "name": "totalIterations",
            "location": 147,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BinaryClassificationSummary.scoreCol": {
            "name": "scoreCol",
            "location": 151,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BinaryClassificationSummary.roc": {
            "name": "roc",
            "location": 153,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BinaryClassificationSummary.areaUnderROC": {
            "name": "areaUnderROC",
            "location": 155,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BinaryClassificationSummary.pr": {
            "name": "pr",
            "location": 157,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BinaryClassificationSummary.fMeasureByThreshold": {
            "name": "fMeasureByThreshold",
            "location": 159,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BinaryClassificationSummary.precisionByThreshold": {
            "name": "precisionByThreshold",
            "location": 161,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BinaryClassificationSummary.recallByThreshold": {
            "name": "recallByThreshold",
            "location": 163,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "_LinearSVCParams.__init__": {
            "name": "__init__",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearSVC.__init__": {
            "name": "__init__",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearSVC.setParams": {
            "name": "setParams",
            "location": 203,
            "return": [
                "LinearSVC"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearSVC.setMaxIter": {
            "name": "setMaxIter",
            "location": 220,
            "return": [
                "LinearSVC"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "LinearSVC.setRegParam": {
            "name": "setRegParam",
            "location": 221,
            "return": [
                "LinearSVC"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "LinearSVC.setTol": {
            "name": "setTol",
            "location": 222,
            "return": [
                "LinearSVC"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "LinearSVC.setFitIntercept": {
            "name": "setFitIntercept",
            "location": 223,
            "return": [
                "LinearSVC"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "LinearSVC.setStandardization": {
            "name": "setStandardization",
            "location": 224,
            "return": [
                "LinearSVC"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "LinearSVC.setThreshold": {
            "name": "setThreshold",
            "location": 225,
            "return": [
                "LinearSVC"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "LinearSVC.setWeightCol": {
            "name": "setWeightCol",
            "location": 226,
            "return": [
                "LinearSVC"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "LinearSVC.setAggregationDepth": {
            "name": "setAggregationDepth",
            "location": 227,
            "return": [
                "LinearSVC"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "LinearSVC.setBlockSize": {
            "name": "setBlockSize",
            "location": 228,
            "return": [
                "LinearSVC"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "LinearSVCModel.setThreshold": {
            "name": "setThreshold",
            "location": 237,
            "return": [
                "LinearSVCModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "LinearSVCModel.coefficients": {
            "name": "coefficients",
            "location": 239,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearSVCModel.intercept": {
            "name": "intercept",
            "location": 241,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearSVCModel.summary": {
            "name": "summary",
            "location": 242,
            "return": [
                "LinearSVCTrainingSummary"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearSVCModel.evaluate": {
            "name": "evaluate",
            "location": 243,
            "return": [
                "LinearSVCSummary"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "DataFrame"
                ]
            }
        },
        "_LogisticRegressionParams.__init__": {
            "name": "__init__",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_LogisticRegressionParams.setThreshold": {
            "name": "setThreshold",
            "location": 268,
            "return": [
                "P"
            ],
            "arguments": {
                "self": [
                    "P"
                ],
                "value": [
                    "float"
                ]
            }
        },
        "_LogisticRegressionParams.getThreshold": {
            "name": "getThreshold",
            "location": 269,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_LogisticRegressionParams.setThresholds": {
            "name": "setThresholds",
            "location": 270,
            "return": [
                "P"
            ],
            "arguments": {
                "self": [
                    "P"
                ],
                "value": [
                    "List[float]"
                ]
            }
        },
        "_LogisticRegressionParams.getThresholds": {
            "name": "getThresholds",
            "location": 271,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_LogisticRegressionParams.getFamily": {
            "name": "getFamily",
            "location": 272,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_LogisticRegressionParams.getLowerBoundsOnCoefficients": {
            "name": "getLowerBoundsOnCoefficients",
            "location": 273,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "_LogisticRegressionParams.getUpperBoundsOnCoefficients": {
            "name": "getUpperBoundsOnCoefficients",
            "location": 274,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "_LogisticRegressionParams.getLowerBoundsOnIntercepts": {
            "name": "getLowerBoundsOnIntercepts",
            "location": 275,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "_LogisticRegressionParams.getUpperBoundsOnIntercepts": {
            "name": "getUpperBoundsOnIntercepts",
            "location": 276,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogisticRegression.__init__": {
            "name": "__init__",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogisticRegression.setParams": {
            "name": "setParams",
            "location": 309,
            "return": [
                "LogisticRegression"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogisticRegression.setFamily": {
            "name": "setFamily",
            "location": 334,
            "return": [
                "LogisticRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "LogisticRegression.setLowerBoundsOnCoefficients": {
            "name": "setLowerBoundsOnCoefficients",
            "location": 335,
            "return": [
                "LogisticRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Matrix"
                ]
            }
        },
        "LogisticRegression.setUpperBoundsOnCoefficients": {
            "name": "setUpperBoundsOnCoefficients",
            "location": 336,
            "return": [
                "LogisticRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Matrix"
                ]
            }
        },
        "LogisticRegression.setLowerBoundsOnIntercepts": {
            "name": "setLowerBoundsOnIntercepts",
            "location": 337,
            "return": [
                "LogisticRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Vector"
                ]
            }
        },
        "LogisticRegression.setUpperBoundsOnIntercepts": {
            "name": "setUpperBoundsOnIntercepts",
            "location": 338,
            "return": [
                "LogisticRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Vector"
                ]
            }
        },
        "LogisticRegression.setMaxIter": {
            "name": "setMaxIter",
            "location": 339,
            "return": [
                "LogisticRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "LogisticRegression.setRegParam": {
            "name": "setRegParam",
            "location": 340,
            "return": [
                "LogisticRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "LogisticRegression.setTol": {
            "name": "setTol",
            "location": 341,
            "return": [
                "LogisticRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "LogisticRegression.setElasticNetParam": {
            "name": "setElasticNetParam",
            "location": 342,
            "return": [
                "LogisticRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "LogisticRegression.setFitIntercept": {
            "name": "setFitIntercept",
            "location": 343,
            "return": [
                "LogisticRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "LogisticRegression.setStandardization": {
            "name": "setStandardization",
            "location": 344,
            "return": [
                "LogisticRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "LogisticRegression.setWeightCol": {
            "name": "setWeightCol",
            "location": 345,
            "return": [
                "LogisticRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "LogisticRegression.setAggregationDepth": {
            "name": "setAggregationDepth",
            "location": 346,
            "return": [
                "LogisticRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "LogisticRegression.setBlockSize": {
            "name": "setBlockSize",
            "location": 347,
            "return": [
                "LogisticRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "LogisticRegressionModel.coefficients": {
            "name": "coefficients",
            "location": 357,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogisticRegressionModel.intercept": {
            "name": "intercept",
            "location": 359,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogisticRegressionModel.coefficientMatrix": {
            "name": "coefficientMatrix",
            "location": 361,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogisticRegressionModel.interceptVector": {
            "name": "interceptVector",
            "location": 363,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogisticRegressionModel.summary": {
            "name": "summary",
            "location": 365,
            "return": [
                "LogisticRegressionTrainingSummary"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogisticRegressionModel.evaluate": {
            "name": "evaluate",
            "location": 366,
            "return": [
                "LogisticRegressionSummary"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "DataFrame"
                ]
            }
        },
        "LogisticRegressionSummary.probabilityCol": {
            "name": "probabilityCol",
            "location": 370,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogisticRegressionSummary.featuresCol": {
            "name": "featuresCol",
            "location": 372,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_DecisionTreeClassifierParams.__init__": {
            "name": "__init__",
            "location": 385,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DecisionTreeClassifier.__init__": {
            "name": "__init__",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionTreeClassifier.setParams": {
            "name": "setParams",
            "location": 414,
            "return": [
                "DecisionTreeClassifier"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionTreeClassifier.setMaxDepth": {
            "name": "setMaxDepth",
            "location": 435,
            "return": [
                "DecisionTreeClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "DecisionTreeClassifier.setMaxBins": {
            "name": "setMaxBins",
            "location": 436,
            "return": [
                "DecisionTreeClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "DecisionTreeClassifier.setMinInstancesPerNode": {
            "name": "setMinInstancesPerNode",
            "location": 437,
            "return": [
                "DecisionTreeClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "DecisionTreeClassifier.setMinWeightFractionPerNode": {
            "name": "setMinWeightFractionPerNode",
            "location": 438,
            "return": [
                "DecisionTreeClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "DecisionTreeClassifier.setMinInfoGain": {
            "name": "setMinInfoGain",
            "location": 439,
            "return": [
                "DecisionTreeClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "DecisionTreeClassifier.setMaxMemoryInMB": {
            "name": "setMaxMemoryInMB",
            "location": 440,
            "return": [
                "DecisionTreeClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "DecisionTreeClassifier.setCacheNodeIds": {
            "name": "setCacheNodeIds",
            "location": 441,
            "return": [
                "DecisionTreeClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "DecisionTreeClassifier.setImpurity": {
            "name": "setImpurity",
            "location": 442,
            "return": [
                "DecisionTreeClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "DecisionTreeClassifier.setCheckpointInterval": {
            "name": "setCheckpointInterval",
            "location": 443,
            "return": [
                "DecisionTreeClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "DecisionTreeClassifier.setSeed": {
            "name": "setSeed",
            "location": 444,
            "return": [
                "DecisionTreeClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "DecisionTreeClassifier.setWeightCol": {
            "name": "setWeightCol",
            "location": 445,
            "return": [
                "DecisionTreeClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "DecisionTreeClassificationModel.featureImportances": {
            "name": "featureImportances",
            "location": 455,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RandomForestClassifierParams.__init__": {
            "name": "__init__",
            "location": 458,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RandomForestClassifier.__init__": {
            "name": "__init__",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomForestClassifier.setParams": {
            "name": "setParams",
            "location": 491,
            "return": [
                "RandomForestClassifier"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomForestClassifier.setMaxDepth": {
            "name": "setMaxDepth",
            "location": 516,
            "return": [
                "RandomForestClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "RandomForestClassifier.setMaxBins": {
            "name": "setMaxBins",
            "location": 517,
            "return": [
                "RandomForestClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "RandomForestClassifier.setMinInstancesPerNode": {
            "name": "setMinInstancesPerNode",
            "location": 518,
            "return": [
                "RandomForestClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "RandomForestClassifier.setMinInfoGain": {
            "name": "setMinInfoGain",
            "location": 519,
            "return": [
                "RandomForestClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "RandomForestClassifier.setMaxMemoryInMB": {
            "name": "setMaxMemoryInMB",
            "location": 520,
            "return": [
                "RandomForestClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "RandomForestClassifier.setCacheNodeIds": {
            "name": "setCacheNodeIds",
            "location": 521,
            "return": [
                "RandomForestClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "RandomForestClassifier.setImpurity": {
            "name": "setImpurity",
            "location": 522,
            "return": [
                "RandomForestClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "RandomForestClassifier.setNumTrees": {
            "name": "setNumTrees",
            "location": 523,
            "return": [
                "RandomForestClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "RandomForestClassifier.setBootstrap": {
            "name": "setBootstrap",
            "location": 524,
            "return": [
                "RandomForestClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "RandomForestClassifier.setSubsamplingRate": {
            "name": "setSubsamplingRate",
            "location": 525,
            "return": [
                "RandomForestClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "RandomForestClassifier.setFeatureSubsetStrategy": {
            "name": "setFeatureSubsetStrategy",
            "location": 526,
            "return": [
                "RandomForestClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "RandomForestClassifier.setSeed": {
            "name": "setSeed",
            "location": 527,
            "return": [
                "RandomForestClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "RandomForestClassifier.setCheckpointInterval": {
            "name": "setCheckpointInterval",
            "location": 528,
            "return": [
                "RandomForestClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "RandomForestClassifier.setWeightCol": {
            "name": "setWeightCol",
            "location": 529,
            "return": [
                "RandomForestClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "RandomForestClassifier.setMinWeightFractionPerNode": {
            "name": "setMinWeightFractionPerNode",
            "location": 530,
            "return": [
                "RandomForestClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "RandomForestClassificationModel.featureImportances": {
            "name": "featureImportances",
            "location": 541,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomForestClassificationModel.trees": {
            "name": "trees",
            "location": 543,
            "return": [
                "List[DecisionTreeClassificationModel]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomForestClassificationModel.summary": {
            "name": "summary",
            "location": 544,
            "return": [
                "RandomForestClassificationTrainingSummary"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomForestClassificationModel.evaluate": {
            "name": "evaluate",
            "location": 545,
            "return": [
                "RandomForestClassificationSummary"
            ],
            "arguments": {
                "self": [],
                "dataset": []
            }
        },
        "_GBTClassifierParams.__init__": {
            "name": "__init__",
            "location": 559,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_GBTClassifierParams.getLossType": {
            "name": "getLossType",
            "location": 560,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GBTClassifier.__init__": {
            "name": "__init__",
            "location": 568,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GBTClassifier.setParams": {
            "name": "setParams",
            "location": 593,
            "return": [
                "GBTClassifier"
            ],
            "arguments": {
                "self": []
            }
        },
        "GBTClassifier.setMaxDepth": {
            "name": "setMaxDepth",
            "location": 618,
            "return": [
                "GBTClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "GBTClassifier.setMaxBins": {
            "name": "setMaxBins",
            "location": 619,
            "return": [
                "GBTClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "GBTClassifier.setMinInstancesPerNode": {
            "name": "setMinInstancesPerNode",
            "location": 620,
            "return": [
                "GBTClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "GBTClassifier.setMinInfoGain": {
            "name": "setMinInfoGain",
            "location": 621,
            "return": [
                "GBTClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "GBTClassifier.setMaxMemoryInMB": {
            "name": "setMaxMemoryInMB",
            "location": 622,
            "return": [
                "GBTClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "GBTClassifier.setCacheNodeIds": {
            "name": "setCacheNodeIds",
            "location": 623,
            "return": [
                "GBTClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "GBTClassifier.setImpurity": {
            "name": "setImpurity",
            "location": 624,
            "return": [
                "GBTClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "GBTClassifier.setLossType": {
            "name": "setLossType",
            "location": 625,
            "return": [
                "GBTClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "GBTClassifier.setSubsamplingRate": {
            "name": "setSubsamplingRate",
            "location": 626,
            "return": [
                "GBTClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "GBTClassifier.setFeatureSubsetStrategy": {
            "name": "setFeatureSubsetStrategy",
            "location": 627,
            "return": [
                "GBTClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "GBTClassifier.setValidationIndicatorCol": {
            "name": "setValidationIndicatorCol",
            "location": 628,
            "return": [
                "GBTClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "GBTClassifier.setMaxIter": {
            "name": "setMaxIter",
            "location": 629,
            "return": [
                "GBTClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "GBTClassifier.setCheckpointInterval": {
            "name": "setCheckpointInterval",
            "location": 630,
            "return": [
                "GBTClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "GBTClassifier.setSeed": {
            "name": "setSeed",
            "location": 631,
            "return": [
                "GBTClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "GBTClassifier.setStepSize": {
            "name": "setStepSize",
            "location": 632,
            "return": [
                "GBTClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "GBTClassifier.setWeightCol": {
            "name": "setWeightCol",
            "location": 633,
            "return": [
                "GBTClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "GBTClassifier.setMinWeightFractionPerNode": {
            "name": "setMinWeightFractionPerNode",
            "location": 634,
            "return": [
                "GBTClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "GBTClassificationModel.featureImportances": {
            "name": "featureImportances",
            "location": 644,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "GBTClassificationModel.trees": {
            "name": "trees",
            "location": 646,
            "return": [
                "List[DecisionTreeRegressionModel]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GBTClassificationModel.evaluateEachIteration": {
            "name": "evaluateEachIteration",
            "location": 647,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "DataFrame"
                ]
            }
        },
        "_NaiveBayesParams.__init__": {
            "name": "__init__",
            "location": 652,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_NaiveBayesParams.getSmoothing": {
            "name": "getSmoothing",
            "location": 653,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_NaiveBayesParams.getModelType": {
            "name": "getModelType",
            "location": 654,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NaiveBayes.__init__": {
            "name": "__init__",
            "location": 664,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NaiveBayes.setParams": {
            "name": "setParams",
            "location": 677,
            "return": [
                "NaiveBayes"
            ],
            "arguments": {
                "self": []
            }
        },
        "NaiveBayes.setSmoothing": {
            "name": "setSmoothing",
            "location": 690,
            "return": [
                "NaiveBayes"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "NaiveBayes.setModelType": {
            "name": "setModelType",
            "location": 691,
            "return": [
                "NaiveBayes"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "NaiveBayes.setWeightCol": {
            "name": "setWeightCol",
            "location": 692,
            "return": [
                "NaiveBayes"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "NaiveBayesModel.pi": {
            "name": "pi",
            "location": 701,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "NaiveBayesModel.theta": {
            "name": "theta",
            "location": 703,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "NaiveBayesModel.sigma": {
            "name": "sigma",
            "location": 705,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MultilayerPerceptronParams.__init__": {
            "name": "__init__",
            "location": 719,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_MultilayerPerceptronParams.getLayers": {
            "name": "getLayers",
            "location": 720,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MultilayerPerceptronParams.getInitialWeights": {
            "name": "getInitialWeights",
            "location": 721,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultilayerPerceptronClassifier.__init__": {
            "name": "__init__",
            "location": 729,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultilayerPerceptronClassifier.setParams": {
            "name": "setParams",
            "location": 746,
            "return": [
                "MultilayerPerceptronClassifier"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultilayerPerceptronClassifier.setLayers": {
            "name": "setLayers",
            "location": 763,
            "return": [
                "MultilayerPerceptronClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[int]"
                ]
            }
        },
        "MultilayerPerceptronClassifier.setBlockSize": {
            "name": "setBlockSize",
            "location": 764,
            "return": [
                "MultilayerPerceptronClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "MultilayerPerceptronClassifier.setInitialWeights": {
            "name": "setInitialWeights",
            "location": 765,
            "return": [
                "MultilayerPerceptronClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Vector"
                ]
            }
        },
        "MultilayerPerceptronClassifier.setMaxIter": {
            "name": "setMaxIter",
            "location": 766,
            "return": [
                "MultilayerPerceptronClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "MultilayerPerceptronClassifier.setSeed": {
            "name": "setSeed",
            "location": 767,
            "return": [
                "MultilayerPerceptronClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "MultilayerPerceptronClassifier.setTol": {
            "name": "setTol",
            "location": 768,
            "return": [
                "MultilayerPerceptronClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "MultilayerPerceptronClassifier.setStepSize": {
            "name": "setStepSize",
            "location": 769,
            "return": [
                "MultilayerPerceptronClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "MultilayerPerceptronClassifier.setSolver": {
            "name": "setSolver",
            "location": 770,
            "return": [
                "MultilayerPerceptronClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "MultilayerPerceptronClassificationModel.weights": {
            "name": "weights",
            "location": 780,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultilayerPerceptronClassificationModel.summary": {
            "name": "summary",
            "location": 781,
            "return": [
                "MultilayerPerceptronClassificationTrainingSummary"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultilayerPerceptronClassificationModel.evaluate": {
            "name": "evaluate",
            "location": 782,
            "return": [
                "MultilayerPerceptronClassificationSummary"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "DataFrame"
                ]
            }
        },
        "_OneVsRestParams.getClassifier": {
            "name": "getClassifier",
            "location": 793,
            "return": [
                "Estimator[M]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneVsRest.__init__": {
            "name": "__init__",
            "location": 802,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneVsRest.setParams": {
            "name": "setParams",
            "location": 813,
            "return": [
                "OneVsRest"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneVsRest.setClassifier": {
            "name": "setClassifier",
            "location": 824,
            "return": [
                "OneVsRest"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Estimator[M]"
                ]
            }
        },
        "OneVsRest.setLabelCol": {
            "name": "setLabelCol",
            "location": 825,
            "return": [
                "OneVsRest"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "OneVsRest.setFeaturesCol": {
            "name": "setFeaturesCol",
            "location": 826,
            "return": [
                "OneVsRest"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "OneVsRest.setPredictionCol": {
            "name": "setPredictionCol",
            "location": 827,
            "return": [
                "OneVsRest"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "OneVsRest.setRawPredictionCol": {
            "name": "setRawPredictionCol",
            "location": 828,
            "return": [
                "OneVsRest"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "OneVsRest.setWeightCol": {
            "name": "setWeightCol",
            "location": 829,
            "return": [
                "OneVsRest"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "OneVsRest.setParallelism": {
            "name": "setParallelism",
            "location": 830,
            "return": [
                "OneVsRest"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "OneVsRest.copy": {
            "name": "copy",
            "location": 831,
            "return": [
                "OneVsRest"
            ],
            "arguments": {
                "self": [],
                "extra": [
                    "Optional[ParamMap]"
                ]
            }
        },
        "OneVsRestModel.__init__": {
            "name": "__init__",
            "location": 837,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "models": [
                    "List[Transformer]"
                ]
            }
        },
        "OneVsRestModel.setFeaturesCol": {
            "name": "setFeaturesCol",
            "location": 838,
            "return": [
                "OneVsRestModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "OneVsRestModel.setPredictionCol": {
            "name": "setPredictionCol",
            "location": 839,
            "return": [
                "OneVsRestModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "OneVsRestModel.setRawPredictionCol": {
            "name": "setRawPredictionCol",
            "location": 840,
            "return": [
                "OneVsRestModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "OneVsRestModel.copy": {
            "name": "copy",
            "location": 841,
            "return": [
                "OneVsRestModel"
            ],
            "arguments": {
                "self": [],
                "extra": [
                    "Optional[ParamMap]"
                ]
            }
        },
        "FMClassifier.__init__": {
            "name": "__init__",
            "location": 854,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "featuresCol": [
                    "str"
                ],
                "labelCol": [
                    "str"
                ],
                "predictionCol": [
                    "str"
                ],
                "probabilityCol": [
                    "str"
                ],
                "rawPredictionCol": [
                    "str"
                ],
                "factorSize": [
                    "int"
                ],
                "fitIntercept": [
                    "bool"
                ],
                "fitLinear": [
                    "bool"
                ],
                "regParam": [
                    "float"
                ],
                "miniBatchFraction": [
                    "float"
                ],
                "initStd": [
                    "float"
                ],
                "maxIter": [
                    "int"
                ],
                "stepSize": [
                    "float"
                ],
                "tol": [
                    "float"
                ],
                "solver": [
                    "str"
                ],
                "thresholds": [
                    "Optional[Any]"
                ],
                "seed": [
                    "Optional[Any]"
                ]
            }
        },
        "FMClassifier.setParams": {
            "name": "setParams",
            "location": 874,
            "return": [],
            "arguments": {
                "self": [],
                "featuresCol": [
                    "str"
                ],
                "labelCol": [
                    "str"
                ],
                "predictionCol": [
                    "str"
                ],
                "probabilityCol": [
                    "str"
                ],
                "rawPredictionCol": [
                    "str"
                ],
                "factorSize": [
                    "int"
                ],
                "fitIntercept": [
                    "bool"
                ],
                "fitLinear": [
                    "bool"
                ],
                "regParam": [
                    "float"
                ],
                "miniBatchFraction": [
                    "float"
                ],
                "initStd": [
                    "float"
                ],
                "maxIter": [
                    "int"
                ],
                "stepSize": [
                    "float"
                ],
                "tol": [
                    "float"
                ],
                "solver": [
                    "str"
                ],
                "thresholds": [
                    "Optional[Any]"
                ],
                "seed": [
                    "Optional[Any]"
                ]
            }
        },
        "FMClassifier.setFactorSize": {
            "name": "setFactorSize",
            "location": 894,
            "return": [
                "FMClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "FMClassifier.setFitLinear": {
            "name": "setFitLinear",
            "location": 895,
            "return": [
                "FMClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "FMClassifier.setMiniBatchFraction": {
            "name": "setMiniBatchFraction",
            "location": 896,
            "return": [
                "FMClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "FMClassifier.setInitStd": {
            "name": "setInitStd",
            "location": 897,
            "return": [
                "FMClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "FMClassifier.setMaxIter": {
            "name": "setMaxIter",
            "location": 898,
            "return": [
                "FMClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "FMClassifier.setStepSize": {
            "name": "setStepSize",
            "location": 899,
            "return": [
                "FMClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "FMClassifier.setTol": {
            "name": "setTol",
            "location": 900,
            "return": [
                "FMClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "FMClassifier.setSolver": {
            "name": "setSolver",
            "location": 901,
            "return": [
                "FMClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "FMClassifier.setSeed": {
            "name": "setSeed",
            "location": 902,
            "return": [
                "FMClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "FMClassifier.setFitIntercept": {
            "name": "setFitIntercept",
            "location": 903,
            "return": [
                "FMClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "FMClassifier.setRegParam": {
            "name": "setRegParam",
            "location": 904,
            "return": [
                "FMClassifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "FMClassificationModel.intercept": {
            "name": "intercept",
            "location": 913,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "FMClassificationModel.linear": {
            "name": "linear",
            "location": 915,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "FMClassificationModel.factors": {
            "name": "factors",
            "location": 917,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "FMClassificationModel.summary": {
            "name": "summary",
            "location": 918,
            "return": [
                "FMClassificationTrainingSummary"
            ],
            "arguments": {
                "self": []
            }
        },
        "FMClassificationModel.evaluate": {
            "name": "evaluate",
            "location": 919,
            "return": [
                "FMClassificationSummary"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "DataFrame"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/ml/clustering.py": {
        "ClusteringSummary.predictionCol": {
            "name": "predictionCol",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusteringSummary.predictions": {
            "name": "predictions",
            "location": 52,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusteringSummary.featuresCol": {
            "name": "featuresCol",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusteringSummary.k": {
            "name": "k",
            "location": 56,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusteringSummary.cluster": {
            "name": "cluster",
            "location": 58,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusteringSummary.clusterSizes": {
            "name": "clusterSizes",
            "location": 60,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusteringSummary.numIter": {
            "name": "numIter",
            "location": 62,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_GaussianMixtureParams.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_GaussianMixtureParams.getK": {
            "name": "getK",
            "location": 76,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GaussianMixtureModel.setFeaturesCol": {
            "name": "setFeaturesCol",
            "location": 85,
            "return": [
                "GaussianMixtureModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "GaussianMixtureModel.setPredictionCol": {
            "name": "setPredictionCol",
            "location": 86,
            "return": [
                "GaussianMixtureModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "GaussianMixtureModel.setProbabilityCol": {
            "name": "setProbabilityCol",
            "location": 87,
            "return": [
                "GaussianMixtureModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "GaussianMixtureModel.weights": {
            "name": "weights",
            "location": 89,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GaussianMixtureModel.gaussians": {
            "name": "gaussians",
            "location": 91,
            "return": [
                "List[MultivariateGaussian]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GaussianMixtureModel.gaussiansDF": {
            "name": "gaussiansDF",
            "location": 93,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "GaussianMixtureModel.summary": {
            "name": "summary",
            "location": 95,
            "return": [
                "GaussianMixtureSummary"
            ],
            "arguments": {
                "self": []
            }
        },
        "GaussianMixtureModel.predict": {
            "name": "predict",
            "location": 96,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Vector"
                ]
            }
        },
        "GaussianMixtureModel.predictProbability": {
            "name": "predictProbability",
            "location": 97,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Vector"
                ]
            }
        },
        "GaussianMixture.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GaussianMixture.setParams": {
            "name": "setParams",
            "location": 118,
            "return": [
                "GaussianMixture"
            ],
            "arguments": {
                "self": []
            }
        },
        "GaussianMixture.setK": {
            "name": "setK",
            "location": 131,
            "return": [
                "GaussianMixture"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "GaussianMixture.setMaxIter": {
            "name": "setMaxIter",
            "location": 132,
            "return": [
                "GaussianMixture"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "GaussianMixture.setFeaturesCol": {
            "name": "setFeaturesCol",
            "location": 133,
            "return": [
                "GaussianMixture"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "GaussianMixture.setPredictionCol": {
            "name": "setPredictionCol",
            "location": 134,
            "return": [
                "GaussianMixture"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "GaussianMixture.setProbabilityCol": {
            "name": "setProbabilityCol",
            "location": 135,
            "return": [
                "GaussianMixture"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "GaussianMixture.setWeightCol": {
            "name": "setWeightCol",
            "location": 136,
            "return": [
                "GaussianMixture"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "GaussianMixture.setSeed": {
            "name": "setSeed",
            "location": 137,
            "return": [
                "GaussianMixture"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "GaussianMixture.setTol": {
            "name": "setTol",
            "location": 138,
            "return": [
                "GaussianMixture"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "GaussianMixture.setAggregationDepth": {
            "name": "setAggregationDepth",
            "location": 139,
            "return": [
                "GaussianMixture"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "GaussianMixtureSummary.probabilityCol": {
            "name": "probabilityCol",
            "location": 143,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GaussianMixtureSummary.probability": {
            "name": "probability",
            "location": 145,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "GaussianMixtureSummary.logLikelihood": {
            "name": "logLikelihood",
            "location": 147,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "KMeansSummary.trainingCost": {
            "name": "trainingCost",
            "location": 150,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_KMeansParams.__init__": {
            "name": "__init__",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_KMeansParams.getK": {
            "name": "getK",
            "location": 165,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_KMeansParams.getInitMode": {
            "name": "getInitMode",
            "location": 166,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_KMeansParams.getInitSteps": {
            "name": "getInitSteps",
            "location": 167,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "KMeansModel.setFeaturesCol": {
            "name": "setFeaturesCol",
            "location": 176,
            "return": [
                "KMeansModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "KMeansModel.setPredictionCol": {
            "name": "setPredictionCol",
            "location": 177,
            "return": [
                "KMeansModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "KMeansModel.clusterCenters": {
            "name": "clusterCenters",
            "location": 178,
            "return": [
                "List[ndarray]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KMeansModel.summary": {
            "name": "summary",
            "location": 180,
            "return": [
                "KMeansSummary"
            ],
            "arguments": {
                "self": []
            }
        },
        "KMeansModel.predict": {
            "name": "predict",
            "location": 181,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Vector"
                ]
            }
        },
        "KMeans.__init__": {
            "name": "__init__",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KMeans.setParams": {
            "name": "setParams",
            "location": 200,
            "return": [
                "KMeans"
            ],
            "arguments": {
                "self": []
            }
        },
        "KMeans.setK": {
            "name": "setK",
            "location": 214,
            "return": [
                "KMeans"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "KMeans.setInitMode": {
            "name": "setInitMode",
            "location": 215,
            "return": [
                "KMeans"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "KMeans.setInitSteps": {
            "name": "setInitSteps",
            "location": 216,
            "return": [
                "KMeans"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "KMeans.setDistanceMeasure": {
            "name": "setDistanceMeasure",
            "location": 217,
            "return": [
                "KMeans"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "KMeans.setMaxIter": {
            "name": "setMaxIter",
            "location": 218,
            "return": [
                "KMeans"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "KMeans.setFeaturesCol": {
            "name": "setFeaturesCol",
            "location": 219,
            "return": [
                "KMeans"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "KMeans.setPredictionCol": {
            "name": "setPredictionCol",
            "location": 220,
            "return": [
                "KMeans"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "KMeans.setSeed": {
            "name": "setSeed",
            "location": 221,
            "return": [
                "KMeans"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "KMeans.setTol": {
            "name": "setTol",
            "location": 222,
            "return": [
                "KMeans"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "KMeans.setWeightCol": {
            "name": "setWeightCol",
            "location": 223,
            "return": [
                "KMeans"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "_BisectingKMeansParams.__init__": {
            "name": "__init__",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_BisectingKMeansParams.getK": {
            "name": "getK",
            "location": 236,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BisectingKMeansParams.getMinDivisibleClusterSize": {
            "name": "getMinDivisibleClusterSize",
            "location": 237,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BisectingKMeansModel.setFeaturesCol": {
            "name": "setFeaturesCol",
            "location": 246,
            "return": [
                "BisectingKMeansModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "BisectingKMeansModel.setPredictionCol": {
            "name": "setPredictionCol",
            "location": 247,
            "return": [
                "BisectingKMeansModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "BisectingKMeansModel.clusterCenters": {
            "name": "clusterCenters",
            "location": 248,
            "return": [
                "List[ndarray]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BisectingKMeansModel.computeCost": {
            "name": "computeCost",
            "location": 249,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "DataFrame"
                ]
            }
        },
        "BisectingKMeansModel.summary": {
            "name": "summary",
            "location": 251,
            "return": [
                "BisectingKMeansSummary"
            ],
            "arguments": {
                "self": []
            }
        },
        "BisectingKMeansModel.predict": {
            "name": "predict",
            "location": 252,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Vector"
                ]
            }
        },
        "BisectingKMeans.__init__": {
            "name": "__init__",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BisectingKMeans.setParams": {
            "name": "setParams",
            "location": 272,
            "return": [
                "BisectingKMeans"
            ],
            "arguments": {
                "self": []
            }
        },
        "BisectingKMeans.setK": {
            "name": "setK",
            "location": 284,
            "return": [
                "BisectingKMeans"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "BisectingKMeans.setMinDivisibleClusterSize": {
            "name": "setMinDivisibleClusterSize",
            "location": 285,
            "return": [
                "BisectingKMeans"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "BisectingKMeans.setDistanceMeasure": {
            "name": "setDistanceMeasure",
            "location": 286,
            "return": [
                "BisectingKMeans"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "BisectingKMeans.setMaxIter": {
            "name": "setMaxIter",
            "location": 287,
            "return": [
                "BisectingKMeans"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "BisectingKMeans.setFeaturesCol": {
            "name": "setFeaturesCol",
            "location": 288,
            "return": [
                "BisectingKMeans"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "BisectingKMeans.setPredictionCol": {
            "name": "setPredictionCol",
            "location": 289,
            "return": [
                "BisectingKMeans"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "BisectingKMeans.setSeed": {
            "name": "setSeed",
            "location": 290,
            "return": [
                "BisectingKMeans"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "BisectingKMeans.setWeightCol": {
            "name": "setWeightCol",
            "location": 291,
            "return": [
                "BisectingKMeans"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "BisectingKMeansSummary.trainingCost": {
            "name": "trainingCost",
            "location": 295,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_LDAParams.__init__": {
            "name": "__init__",
            "location": 308,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_LDAParams.setK": {
            "name": "setK",
            "location": 309,
            "return": [
                "LDA"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "_LDAParams.getOptimizer": {
            "name": "getOptimizer",
            "location": 310,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_LDAParams.getLearningOffset": {
            "name": "getLearningOffset",
            "location": 311,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_LDAParams.getLearningDecay": {
            "name": "getLearningDecay",
            "location": 312,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_LDAParams.getSubsamplingRate": {
            "name": "getSubsamplingRate",
            "location": 313,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_LDAParams.getOptimizeDocConcentration": {
            "name": "getOptimizeDocConcentration",
            "location": 314,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_LDAParams.getDocConcentration": {
            "name": "getDocConcentration",
            "location": 315,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_LDAParams.getTopicConcentration": {
            "name": "getTopicConcentration",
            "location": 316,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_LDAParams.getTopicDistributionCol": {
            "name": "getTopicDistributionCol",
            "location": 317,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_LDAParams.getKeepLastCheckpoint": {
            "name": "getKeepLastCheckpoint",
            "location": 318,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAModel.setFeaturesCol": {
            "name": "setFeaturesCol",
            "location": 321,
            "return": [
                "LDAModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "LDAModel.setSeed": {
            "name": "setSeed",
            "location": 322,
            "return": [
                "LDAModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "LDAModel.setTopicDistributionCol": {
            "name": "setTopicDistributionCol",
            "location": 323,
            "return": [
                "LDAModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "LDAModel.isDistributed": {
            "name": "isDistributed",
            "location": 324,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAModel.vocabSize": {
            "name": "vocabSize",
            "location": 325,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAModel.topicsMatrix": {
            "name": "topicsMatrix",
            "location": 326,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAModel.logLikelihood": {
            "name": "logLikelihood",
            "location": 327,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "DataFrame"
                ]
            }
        },
        "LDAModel.logPerplexity": {
            "name": "logPerplexity",
            "location": 328,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "DataFrame"
                ]
            }
        },
        "LDAModel.describeTopics": {
            "name": "describeTopics",
            "location": 329,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "maxTermsPerTopic": [
                    "int"
                ]
            }
        },
        "LDAModel.estimatedDocConcentration": {
            "name": "estimatedDocConcentration",
            "location": 330,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistributedLDAModel.toLocal": {
            "name": "toLocal",
            "location": 335,
            "return": [
                "LDAModel"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistributedLDAModel.trainingLogLikelihood": {
            "name": "trainingLogLikelihood",
            "location": 336,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistributedLDAModel.logPrior": {
            "name": "logPrior",
            "location": 337,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistributedLDAModel.getCheckpointFiles": {
            "name": "getCheckpointFiles",
            "location": 338,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDA.__init__": {
            "name": "__init__",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDA.setParams": {
            "name": "setParams",
            "location": 361,
            "return": [
                "LDA"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDA.setCheckpointInterval": {
            "name": "setCheckpointInterval",
            "location": 379,
            "return": [
                "LDA"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "LDA.setSeed": {
            "name": "setSeed",
            "location": 380,
            "return": [
                "LDA"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "LDA.setK": {
            "name": "setK",
            "location": 381,
            "return": [
                "LDA"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "LDA.setOptimizer": {
            "name": "setOptimizer",
            "location": 382,
            "return": [
                "LDA"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "LDA.setLearningOffset": {
            "name": "setLearningOffset",
            "location": 383,
            "return": [
                "LDA"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "LDA.setLearningDecay": {
            "name": "setLearningDecay",
            "location": 384,
            "return": [
                "LDA"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "LDA.setSubsamplingRate": {
            "name": "setSubsamplingRate",
            "location": 385,
            "return": [
                "LDA"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "LDA.setOptimizeDocConcentration": {
            "name": "setOptimizeDocConcentration",
            "location": 386,
            "return": [
                "LDA"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "LDA.setDocConcentration": {
            "name": "setDocConcentration",
            "location": 387,
            "return": [
                "LDA"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[float]"
                ]
            }
        },
        "LDA.setTopicConcentration": {
            "name": "setTopicConcentration",
            "location": 388,
            "return": [
                "LDA"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "LDA.setTopicDistributionCol": {
            "name": "setTopicDistributionCol",
            "location": 389,
            "return": [
                "LDA"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "LDA.setKeepLastCheckpoint": {
            "name": "setKeepLastCheckpoint",
            "location": 390,
            "return": [
                "LDA"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "LDA.setMaxIter": {
            "name": "setMaxIter",
            "location": 391,
            "return": [
                "LDA"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "LDA.setFeaturesCol": {
            "name": "setFeaturesCol",
            "location": 392,
            "return": [
                "LDA"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "_PowerIterationClusteringParams.__init__": {
            "name": "__init__",
            "location": 399,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_PowerIterationClusteringParams.getK": {
            "name": "getK",
            "location": 400,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_PowerIterationClusteringParams.getInitMode": {
            "name": "getInitMode",
            "location": 401,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_PowerIterationClusteringParams.getSrcCol": {
            "name": "getSrcCol",
            "location": 402,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_PowerIterationClusteringParams.getDstCol": {
            "name": "getDstCol",
            "location": 403,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PowerIterationClustering.__init__": {
            "name": "__init__",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PowerIterationClustering.setParams": {
            "name": "setParams",
            "location": 421,
            "return": [
                "PowerIterationClustering"
            ],
            "arguments": {
                "self": []
            }
        },
        "PowerIterationClustering.setK": {
            "name": "setK",
            "location": 431,
            "return": [
                "PowerIterationClustering"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "PowerIterationClustering.setInitMode": {
            "name": "setInitMode",
            "location": 432,
            "return": [
                "PowerIterationClustering"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "PowerIterationClustering.setSrcCol": {
            "name": "setSrcCol",
            "location": 433,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "PowerIterationClustering.setDstCol": {
            "name": "setDstCol",
            "location": 434,
            "return": [
                "PowerIterationClustering"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "PowerIterationClustering.setMaxIter": {
            "name": "setMaxIter",
            "location": 435,
            "return": [
                "PowerIterationClustering"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "PowerIterationClustering.setWeightCol": {
            "name": "setWeightCol",
            "location": 436,
            "return": [
                "PowerIterationClustering"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "PowerIterationClustering.assignClusters": {
            "name": "assignClusters",
            "location": 437,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "DataFrame"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/ml/common.py": {
        "callJavaFunc": {
            "name": "callJavaFunc",
            "location": 19,
            "return": [],
            "arguments": {
                "sc": [],
                "func": []
            }
        },
        "inherit_doc": {
            "name": "inherit_doc",
            "location": 20,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/ml/evaluation.py": {
        "setParams": {
            "name": "setParams",
            "location": 79,
            "return": [
                "BinaryClassificationEvaluator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Evaluator.evaluate": {
            "name": "evaluate",
            "location": 44,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "dataset": [],
                "params": [
                    "Optional[ParamMap]"
                ]
            }
        },
        "Evaluator.isLargerBetter": {
            "name": "isLargerBetter",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "JavaEvaluator.isLargerBetter": {
            "name": "isLargerBetter",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryClassificationEvaluator.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryClassificationEvaluator.setMetricName": {
            "name": "setMetricName",
            "location": 69,
            "return": [
                "BinaryClassificationEvaluator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "BinaryClassificationEvaluatorMetricType"
                ]
            }
        },
        "BinaryClassificationEvaluator.getMetricName": {
            "name": "getMetricName",
            "location": 72,
            "return": [
                "BinaryClassificationEvaluatorMetricType"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryClassificationEvaluator.setNumBins": {
            "name": "setNumBins",
            "location": 73,
            "return": [
                "BinaryClassificationEvaluator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "BinaryClassificationEvaluator.getNumBins": {
            "name": "getNumBins",
            "location": 74,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryClassificationEvaluator.setLabelCol": {
            "name": "setLabelCol",
            "location": 75,
            "return": [
                "BinaryClassificationEvaluator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "BinaryClassificationEvaluator.setRawPredictionCol": {
            "name": "setRawPredictionCol",
            "location": 76,
            "return": [
                "BinaryClassificationEvaluator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "BinaryClassificationEvaluator.setWeightCol": {
            "name": "setWeightCol",
            "location": 77,
            "return": [
                "BinaryClassificationEvaluator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "RegressionEvaluator.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegressionEvaluator.setMetricName": {
            "name": "setMetricName",
            "location": 108,
            "return": [
                "RegressionEvaluator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "RegressionEvaluatorMetricType"
                ]
            }
        },
        "RegressionEvaluator.getMetricName": {
            "name": "getMetricName",
            "location": 111,
            "return": [
                "RegressionEvaluatorMetricType"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegressionEvaluator.setThroughOrigin": {
            "name": "setThroughOrigin",
            "location": 112,
            "return": [
                "RegressionEvaluator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "RegressionEvaluator.getThroughOrigin": {
            "name": "getThroughOrigin",
            "location": 113,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegressionEvaluator.setLabelCol": {
            "name": "setLabelCol",
            "location": 114,
            "return": [
                "RegressionEvaluator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "RegressionEvaluator.setPredictionCol": {
            "name": "setPredictionCol",
            "location": 115,
            "return": [
                "RegressionEvaluator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "RegressionEvaluator.setWeightCol": {
            "name": "setWeightCol",
            "location": 116,
            "return": [
                "RegressionEvaluator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "RegressionEvaluator.setParams": {
            "name": "setParams",
            "location": 117,
            "return": [
                "RegressionEvaluator"
            ],
            "arguments": {
                "self": []
            }
        },
        "MulticlassClassificationEvaluator.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MulticlassClassificationEvaluator.setMetricName": {
            "name": "setMetricName",
            "location": 152,
            "return": [
                "MulticlassClassificationEvaluator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "MulticlassClassificationEvaluatorMetricType"
                ]
            }
        },
        "MulticlassClassificationEvaluator.getMetricName": {
            "name": "getMetricName",
            "location": 155,
            "return": [
                "MulticlassClassificationEvaluatorMetricType"
            ],
            "arguments": {
                "self": []
            }
        },
        "MulticlassClassificationEvaluator.setMetricLabel": {
            "name": "setMetricLabel",
            "location": 156,
            "return": [
                "MulticlassClassificationEvaluator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "MulticlassClassificationEvaluator.getMetricLabel": {
            "name": "getMetricLabel",
            "location": 157,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MulticlassClassificationEvaluator.setBeta": {
            "name": "setBeta",
            "location": 158,
            "return": [
                "MulticlassClassificationEvaluator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "MulticlassClassificationEvaluator.getBeta": {
            "name": "getBeta",
            "location": 159,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MulticlassClassificationEvaluator.setEps": {
            "name": "setEps",
            "location": 160,
            "return": [
                "MulticlassClassificationEvaluator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "MulticlassClassificationEvaluator.getEps": {
            "name": "getEps",
            "location": 161,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MulticlassClassificationEvaluator.setLabelCol": {
            "name": "setLabelCol",
            "location": 162,
            "return": [
                "MulticlassClassificationEvaluator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "MulticlassClassificationEvaluator.setPredictionCol": {
            "name": "setPredictionCol",
            "location": 163,
            "return": [
                "MulticlassClassificationEvaluator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "MulticlassClassificationEvaluator.setProbabilityCol": {
            "name": "setProbabilityCol",
            "location": 164,
            "return": [
                "MulticlassClassificationEvaluator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "MulticlassClassificationEvaluator.setWeightCol": {
            "name": "setWeightCol",
            "location": 165,
            "return": [
                "MulticlassClassificationEvaluator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "MulticlassClassificationEvaluator.setParams": {
            "name": "setParams",
            "location": 166,
            "return": [
                "MulticlassClassificationEvaluator"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultilabelClassificationEvaluator.__init__": {
            "name": "__init__",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultilabelClassificationEvaluator.setMetricName": {
            "name": "setMetricName",
            "location": 196,
            "return": [
                "MultilabelClassificationEvaluator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "MultilabelClassificationEvaluatorMetricType"
                ]
            }
        },
        "MultilabelClassificationEvaluator.getMetricName": {
            "name": "getMetricName",
            "location": 199,
            "return": [
                "MultilabelClassificationEvaluatorMetricType"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultilabelClassificationEvaluator.setMetricLabel": {
            "name": "setMetricLabel",
            "location": 200,
            "return": [
                "MultilabelClassificationEvaluator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "MultilabelClassificationEvaluator.getMetricLabel": {
            "name": "getMetricLabel",
            "location": 201,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultilabelClassificationEvaluator.setLabelCol": {
            "name": "setLabelCol",
            "location": 202,
            "return": [
                "MultilabelClassificationEvaluator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "MultilabelClassificationEvaluator.setPredictionCol": {
            "name": "setPredictionCol",
            "location": 203,
            "return": [
                "MultilabelClassificationEvaluator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "MultilabelClassificationEvaluator.setParams": {
            "name": "setParams",
            "location": 204,
            "return": [
                "MultilabelClassificationEvaluator"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusteringEvaluator.__init__": {
            "name": "__init__",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusteringEvaluator.setParams": {
            "name": "setParams",
            "location": 232,
            "return": [
                "ClusteringEvaluator"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusteringEvaluator.setMetricName": {
            "name": "setMetricName",
            "location": 241,
            "return": [
                "ClusteringEvaluator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "ClusteringEvaluatorMetricType"
                ]
            }
        },
        "ClusteringEvaluator.getMetricName": {
            "name": "getMetricName",
            "location": 244,
            "return": [
                "ClusteringEvaluatorMetricType"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusteringEvaluator.setDistanceMeasure": {
            "name": "setDistanceMeasure",
            "location": 245,
            "return": [
                "ClusteringEvaluator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "ClusteringEvaluator.getDistanceMeasure": {
            "name": "getDistanceMeasure",
            "location": 246,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusteringEvaluator.setFeaturesCol": {
            "name": "setFeaturesCol",
            "location": 247,
            "return": [
                "ClusteringEvaluator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "ClusteringEvaluator.setPredictionCol": {
            "name": "setPredictionCol",
            "location": 248,
            "return": [
                "ClusteringEvaluator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "ClusteringEvaluator.setWeightCol": {
            "name": "setWeightCol",
            "location": 249,
            "return": [
                "ClusteringEvaluator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "RankingEvaluator.__init__": {
            "name": "__init__",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RankingEvaluator.setMetricName": {
            "name": "setMetricName",
            "location": 268,
            "return": [
                "RankingEvaluator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "RankingEvaluatorMetricType"
                ]
            }
        },
        "RankingEvaluator.getMetricName": {
            "name": "getMetricName",
            "location": 269,
            "return": [
                "RankingEvaluatorMetricType"
            ],
            "arguments": {
                "self": []
            }
        },
        "RankingEvaluator.setK": {
            "name": "setK",
            "location": 270,
            "return": [
                "RankingEvaluator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "RankingEvaluator.getK": {
            "name": "getK",
            "location": 271,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RankingEvaluator.setLabelCol": {
            "name": "setLabelCol",
            "location": 272,
            "return": [
                "RankingEvaluator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "RankingEvaluator.setPredictionCol": {
            "name": "setPredictionCol",
            "location": 273,
            "return": [
                "RankingEvaluator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "RankingEvaluator.setParams": {
            "name": "setParams",
            "location": 274,
            "return": [
                "RankingEvaluator"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/ml/feature.py": {
        "Binarizer.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Binarizer.setParams": {
            "name": "setParams",
            "location": 83,
            "return": [
                "Binarizer"
            ],
            "arguments": {
                "self": []
            }
        },
        "Binarizer.setThreshold": {
            "name": "setThreshold",
            "location": 90,
            "return": [
                "Binarizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "Binarizer.setThresholds": {
            "name": "setThresholds",
            "location": 91,
            "return": [
                "Binarizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[float]"
                ]
            }
        },
        "Binarizer.setInputCol": {
            "name": "setInputCol",
            "location": 92,
            "return": [
                "Binarizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Binarizer.setInputCols": {
            "name": "setInputCols",
            "location": 93,
            "return": [
                "Binarizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]"
                ]
            }
        },
        "Binarizer.setOutputCol": {
            "name": "setOutputCol",
            "location": 94,
            "return": [
                "Binarizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Binarizer.setOutputCols": {
            "name": "setOutputCols",
            "location": 95,
            "return": [
                "Binarizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]"
                ]
            }
        },
        "_LSHParams.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_LSHParams.getNumHashTables": {
            "name": "getNumHashTables",
            "location": 100,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_LSH.setNumHashTables": {
            "name": "setNumHashTables",
            "location": 103,
            "return": [
                "P"
            ],
            "arguments": {
                "self": [
                    "P"
                ],
                "value": []
            }
        },
        "_LSH.setInputCol": {
            "name": "setInputCol",
            "location": 104,
            "return": [
                "P"
            ],
            "arguments": {
                "self": [
                    "P"
                ],
                "value": []
            }
        },
        "_LSH.setOutputCol": {
            "name": "setOutputCol",
            "location": 105,
            "return": [
                "P"
            ],
            "arguments": {
                "self": [
                    "P"
                ],
                "value": []
            }
        },
        "_LSHModel.setInputCol": {
            "name": "setInputCol",
            "location": 108,
            "return": [
                "P"
            ],
            "arguments": {
                "self": [
                    "P"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "_LSHModel.setOutputCol": {
            "name": "setOutputCol",
            "location": 109,
            "return": [
                "P"
            ],
            "arguments": {
                "self": [
                    "P"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "_LSHModel.approxNearestNeighbors": {
            "name": "approxNearestNeighbors",
            "location": 110,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "DataFrame"
                ],
                "key": [
                    "Vector"
                ],
                "numNearestNeighbors": [
                    "int"
                ],
                "distCol": [
                    "str"
                ]
            }
        },
        "_LSHModel.approxSimilarityJoin": {
            "name": "approxSimilarityJoin",
            "location": 117,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "datasetA": [
                    "DataFrame"
                ],
                "datasetB": [
                    "DataFrame"
                ],
                "threshold": [
                    "float"
                ],
                "distCol": [
                    "str"
                ]
            }
        },
        "_BucketedRandomProjectionLSHParams.getBucketLength": {
            "name": "getBucketLength",
            "location": 127,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BucketedRandomProjectionLSH.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BucketedRandomProjectionLSH.setParams": {
            "name": "setParams",
            "location": 145,
            "return": [
                "BucketedRandomProjectionLSH"
            ],
            "arguments": {
                "self": []
            }
        },
        "BucketedRandomProjectionLSH.setBucketLength": {
            "name": "setBucketLength",
            "location": 154,
            "return": [
                "BucketedRandomProjectionLSH"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "BucketedRandomProjectionLSH.setSeed": {
            "name": "setSeed",
            "location": 155,
            "return": [
                "BucketedRandomProjectionLSH"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "Bucketizer.__init__": {
            "name": "__init__",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bucketizer.setParams": {
            "name": "setParams",
            "location": 205,
            "return": [
                "Bucketizer"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bucketizer.setSplits": {
            "name": "setSplits",
            "location": 213,
            "return": [
                "Bucketizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[float]"
                ]
            }
        },
        "Bucketizer.getSplits": {
            "name": "getSplits",
            "location": 214,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bucketizer.setSplitsArray": {
            "name": "setSplitsArray",
            "location": 215,
            "return": [
                "Bucketizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[List[float]]"
                ]
            }
        },
        "Bucketizer.getSplitsArray": {
            "name": "getSplitsArray",
            "location": 216,
            "return": [
                "List[List[float]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bucketizer.setInputCol": {
            "name": "setInputCol",
            "location": 217,
            "return": [
                "Bucketizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Bucketizer.setInputCols": {
            "name": "setInputCols",
            "location": 218,
            "return": [
                "Bucketizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]"
                ]
            }
        },
        "Bucketizer.setOutputCol": {
            "name": "setOutputCol",
            "location": 219,
            "return": [
                "Bucketizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Bucketizer.setOutputCols": {
            "name": "setOutputCols",
            "location": 220,
            "return": [
                "Bucketizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]"
                ]
            }
        },
        "Bucketizer.setHandleInvalid": {
            "name": "setHandleInvalid",
            "location": 221,
            "return": [
                "Bucketizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "_CountVectorizerParams.__init__": {
            "name": "__init__",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CountVectorizerParams.getMinTF": {
            "name": "getMinTF",
            "location": 230,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CountVectorizerParams.getMinDF": {
            "name": "getMinDF",
            "location": 231,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CountVectorizerParams.getMaxDF": {
            "name": "getMaxDF",
            "location": 232,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CountVectorizerParams.getVocabSize": {
            "name": "getVocabSize",
            "location": 233,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CountVectorizerParams.getBinary": {
            "name": "getBinary",
            "location": 234,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CountVectorizer.__init__": {
            "name": "__init__",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CountVectorizer.setParams": {
            "name": "setParams",
            "location": 253,
            "return": [
                "CountVectorizer"
            ],
            "arguments": {
                "self": []
            }
        },
        "CountVectorizer.setMinTF": {
            "name": "setMinTF",
            "location": 264,
            "return": [
                "CountVectorizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "CountVectorizer.setMinDF": {
            "name": "setMinDF",
            "location": 265,
            "return": [
                "CountVectorizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "CountVectorizer.setMaxDF": {
            "name": "setMaxDF",
            "location": 266,
            "return": [
                "CountVectorizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "CountVectorizer.setVocabSize": {
            "name": "setVocabSize",
            "location": 267,
            "return": [
                "CountVectorizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "CountVectorizer.setBinary": {
            "name": "setBinary",
            "location": 268,
            "return": [
                "CountVectorizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "CountVectorizer.setInputCol": {
            "name": "setInputCol",
            "location": 269,
            "return": [
                "CountVectorizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "CountVectorizer.setOutputCol": {
            "name": "setOutputCol",
            "location": 270,
            "return": [
                "CountVectorizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "CountVectorizerModel.setInputCol": {
            "name": "setInputCol",
            "location": 275,
            "return": [
                "CountVectorizerModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "CountVectorizerModel.setOutputCol": {
            "name": "setOutputCol",
            "location": 276,
            "return": [
                "CountVectorizerModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "CountVectorizerModel.setMinTF": {
            "name": "setMinTF",
            "location": 277,
            "return": [
                "CountVectorizerModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "CountVectorizerModel.setBinary": {
            "name": "setBinary",
            "location": 278,
            "return": [
                "CountVectorizerModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "CountVectorizerModel.from_vocabulary": {
            "name": "from_vocabulary",
            "location": 280,
            "return": [
                "CountVectorizerModel"
            ],
            "arguments": {
                "cls": [],
                "vocabulary": [
                    "List[str]"
                ],
                "inputCol": [
                    "str"
                ],
                "outputCol": [
                    "Optional[str]"
                ],
                "minTF": [
                    "Optional[float]"
                ],
                "binary": [
                    "Optional[bool]"
                ]
            }
        },
        "CountVectorizerModel.vocabulary": {
            "name": "vocabulary",
            "location": 289,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DCT.__init__": {
            "name": "__init__",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DCT.setParams": {
            "name": "setParams",
            "location": 302,
            "return": [
                "DCT"
            ],
            "arguments": {
                "self": []
            }
        },
        "DCT.setInverse": {
            "name": "setInverse",
            "location": 309,
            "return": [
                "DCT"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "DCT.getInverse": {
            "name": "getInverse",
            "location": 310,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DCT.setInputCol": {
            "name": "setInputCol",
            "location": 311,
            "return": [
                "DCT"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "DCT.setOutputCol": {
            "name": "setOutputCol",
            "location": 312,
            "return": [
                "DCT"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "ElementwiseProduct.__init__": {
            "name": "__init__",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementwiseProduct.setParams": {
            "name": "setParams",
            "location": 329,
            "return": [
                "ElementwiseProduct"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementwiseProduct.setScalingVec": {
            "name": "setScalingVec",
            "location": 336,
            "return": [
                "ElementwiseProduct"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Vector"
                ]
            }
        },
        "ElementwiseProduct.getScalingVec": {
            "name": "getScalingVec",
            "location": 337,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementwiseProduct.setInputCol": {
            "name": "setInputCol",
            "location": 338,
            "return": [
                "ElementwiseProduct"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "ElementwiseProduct.setOutputCol": {
            "name": "setOutputCol",
            "location": 339,
            "return": [
                "ElementwiseProduct"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "FeatureHasher.__init__": {
            "name": "__init__",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeatureHasher.setParams": {
            "name": "setParams",
            "location": 358,
            "return": [
                "FeatureHasher"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeatureHasher.setCategoricalCols": {
            "name": "setCategoricalCols",
            "location": 366,
            "return": [
                "FeatureHasher"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]"
                ]
            }
        },
        "FeatureHasher.getCategoricalCols": {
            "name": "getCategoricalCols",
            "location": 367,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeatureHasher.setInputCols": {
            "name": "setInputCols",
            "location": 368,
            "return": [
                "FeatureHasher"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]"
                ]
            }
        },
        "FeatureHasher.setOutputCol": {
            "name": "setOutputCol",
            "location": 369,
            "return": [
                "FeatureHasher"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "FeatureHasher.setNumFeatures": {
            "name": "setNumFeatures",
            "location": 370,
            "return": [
                "FeatureHasher"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "HashingTF.__init__": {
            "name": "__init__",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashingTF.setParams": {
            "name": "setParams",
            "location": 389,
            "return": [
                "HashingTF"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashingTF.setBinary": {
            "name": "setBinary",
            "location": 397,
            "return": [
                "HashingTF"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "HashingTF.getBinary": {
            "name": "getBinary",
            "location": 398,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashingTF.setInputCol": {
            "name": "setInputCol",
            "location": 399,
            "return": [
                "HashingTF"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "HashingTF.setOutputCol": {
            "name": "setOutputCol",
            "location": 400,
            "return": [
                "HashingTF"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "HashingTF.setNumFeatures": {
            "name": "setNumFeatures",
            "location": 401,
            "return": [
                "HashingTF"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "HashingTF.indexOf": {
            "name": "indexOf",
            "location": 402,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "term": [
                    "Any"
                ]
            }
        },
        "_IDFParams.__init__": {
            "name": "__init__",
            "location": 406,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_IDFParams.getMinDocFreq": {
            "name": "getMinDocFreq",
            "location": 407,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IDF.__init__": {
            "name": "__init__",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IDF.setParams": {
            "name": "setParams",
            "location": 417,
            "return": [
                "IDF"
            ],
            "arguments": {
                "self": []
            }
        },
        "IDF.setMinDocFreq": {
            "name": "setMinDocFreq",
            "location": 424,
            "return": [
                "IDF"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "IDF.setInputCol": {
            "name": "setInputCol",
            "location": 425,
            "return": [
                "IDF"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "IDF.setOutputCol": {
            "name": "setOutputCol",
            "location": 426,
            "return": [
                "IDF"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "IDFModel.setInputCol": {
            "name": "setInputCol",
            "location": 429,
            "return": [
                "IDFModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "IDFModel.setOutputCol": {
            "name": "setOutputCol",
            "location": 430,
            "return": [
                "IDFModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "IDFModel.idf": {
            "name": "idf",
            "location": 432,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "IDFModel.docFreq": {
            "name": "docFreq",
            "location": 434,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IDFModel.numDocs": {
            "name": "numDocs",
            "location": 436,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ImputerParams.getStrategy": {
            "name": "getStrategy",
            "location": 443,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ImputerParams.getMissingValue": {
            "name": "getMissingValue",
            "location": 444,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Imputer.__init__": {
            "name": "__init__",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Imputer.setParams": {
            "name": "setParams",
            "location": 480,
            "return": [
                "Imputer"
            ],
            "arguments": {
                "self": []
            }
        },
        "Imputer.setStrategy": {
            "name": "setStrategy",
            "location": 489,
            "return": [
                "Imputer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Imputer.setMissingValue": {
            "name": "setMissingValue",
            "location": 490,
            "return": [
                "Imputer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "Imputer.setInputCols": {
            "name": "setInputCols",
            "location": 491,
            "return": [
                "Imputer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]"
                ]
            }
        },
        "Imputer.setOutputCols": {
            "name": "setOutputCols",
            "location": 492,
            "return": [
                "Imputer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]"
                ]
            }
        },
        "Imputer.setInputCol": {
            "name": "setInputCol",
            "location": 493,
            "return": [
                "Imputer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Imputer.setOutputCol": {
            "name": "setOutputCol",
            "location": 494,
            "return": [
                "Imputer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Imputer.setRelativeError": {
            "name": "setRelativeError",
            "location": 495,
            "return": [
                "Imputer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "ImputerModel.setInputCols": {
            "name": "setInputCols",
            "location": 500,
            "return": [
                "ImputerModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]"
                ]
            }
        },
        "ImputerModel.setOutputCols": {
            "name": "setOutputCols",
            "location": 501,
            "return": [
                "ImputerModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]"
                ]
            }
        },
        "ImputerModel.setInputCol": {
            "name": "setInputCol",
            "location": 502,
            "return": [
                "ImputerModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "ImputerModel.setOutputCol": {
            "name": "setOutputCol",
            "location": 503,
            "return": [
                "ImputerModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "ImputerModel.surrogateDF": {
            "name": "surrogateDF",
            "location": 505,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interaction.__init__": {
            "name": "__init__",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interaction.setParams": {
            "name": "setParams",
            "location": 517,
            "return": [
                "Interaction"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interaction.setInputCols": {
            "name": "setInputCols",
            "location": 520,
            "return": [
                "Interaction"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]"
                ]
            }
        },
        "Interaction.setOutputCol": {
            "name": "setOutputCol",
            "location": 521,
            "return": [
                "Interaction"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "MaxAbsScaler.__init__": {
            "name": "__init__",
            "location": 531,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MaxAbsScaler.setParams": {
            "name": "setParams",
            "location": 534,
            "return": [
                "MaxAbsScaler"
            ],
            "arguments": {
                "self": []
            }
        },
        "MaxAbsScaler.setInputCol": {
            "name": "setInputCol",
            "location": 537,
            "return": [
                "MaxAbsScaler"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "MaxAbsScaler.setOutputCol": {
            "name": "setOutputCol",
            "location": 538,
            "return": [
                "MaxAbsScaler"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "MaxAbsScalerModel.setInputCol": {
            "name": "setInputCol",
            "location": 543,
            "return": [
                "MaxAbsScalerModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "MaxAbsScalerModel.setOutputCol": {
            "name": "setOutputCol",
            "location": 544,
            "return": [
                "MaxAbsScalerModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "MaxAbsScalerModel.maxAbs": {
            "name": "maxAbs",
            "location": 546,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinHashLSH.__init__": {
            "name": "__init__",
            "location": 556,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinHashLSH.setParams": {
            "name": "setParams",
            "location": 564,
            "return": [
                "MinHashLSH"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinHashLSH.setSeed": {
            "name": "setSeed",
            "location": 572,
            "return": [
                "MinHashLSH"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "_MinMaxScalerParams.__init__": {
            "name": "__init__",
            "location": 579,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_MinMaxScalerParams.getMin": {
            "name": "getMin",
            "location": 580,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MinMaxScalerParams.getMax": {
            "name": "getMax",
            "location": 581,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinMaxScaler.__init__": {
            "name": "__init__",
            "location": 589,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinMaxScaler.setParams": {
            "name": "setParams",
            "location": 597,
            "return": [
                "MinMaxScaler"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinMaxScaler.setMin": {
            "name": "setMin",
            "location": 605,
            "return": [
                "MinMaxScaler"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "MinMaxScaler.setMax": {
            "name": "setMax",
            "location": 606,
            "return": [
                "MinMaxScaler"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "MinMaxScaler.setInputCol": {
            "name": "setInputCol",
            "location": 607,
            "return": [
                "MinMaxScaler"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "MinMaxScaler.setOutputCol": {
            "name": "setOutputCol",
            "location": 608,
            "return": [
                "MinMaxScaler"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "MinMaxScalerModel.setInputCol": {
            "name": "setInputCol",
            "location": 613,
            "return": [
                "MinMaxScalerModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "MinMaxScalerModel.setOutputCol": {
            "name": "setOutputCol",
            "location": 614,
            "return": [
                "MinMaxScalerModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "MinMaxScalerModel.setMin": {
            "name": "setMin",
            "location": 615,
            "return": [
                "MinMaxScalerModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "MinMaxScalerModel.setMax": {
            "name": "setMax",
            "location": 616,
            "return": [
                "MinMaxScalerModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "MinMaxScalerModel.originalMin": {
            "name": "originalMin",
            "location": 618,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinMaxScalerModel.originalMax": {
            "name": "originalMax",
            "location": 620,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "NGram.__init__": {
            "name": "__init__",
            "location": 626,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NGram.setParams": {
            "name": "setParams",
            "location": 633,
            "return": [
                "NGram"
            ],
            "arguments": {
                "self": []
            }
        },
        "NGram.setN": {
            "name": "setN",
            "location": 640,
            "return": [
                "NGram"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "NGram.getN": {
            "name": "getN",
            "location": 641,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NGram.setInputCol": {
            "name": "setInputCol",
            "location": 642,
            "return": [
                "NGram"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "NGram.setOutputCol": {
            "name": "setOutputCol",
            "location": 643,
            "return": [
                "NGram"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Normalizer.__init__": {
            "name": "__init__",
            "location": 653,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Normalizer.setParams": {
            "name": "setParams",
            "location": 660,
            "return": [
                "Normalizer"
            ],
            "arguments": {
                "self": []
            }
        },
        "Normalizer.setP": {
            "name": "setP",
            "location": 667,
            "return": [
                "Normalizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "Normalizer.getP": {
            "name": "getP",
            "location": 668,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Normalizer.setInputCol": {
            "name": "setInputCol",
            "location": 669,
            "return": [
                "Normalizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Normalizer.setOutputCol": {
            "name": "setOutputCol",
            "location": 670,
            "return": [
                "Normalizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "_OneHotEncoderParams.__init__": {
            "name": "__init__",
            "location": 675,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_OneHotEncoderParams.getDropLast": {
            "name": "getDropLast",
            "location": 676,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneHotEncoder.__init__": {
            "name": "__init__",
            "location": 694,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneHotEncoder.setParams": {
            "name": "setParams",
            "location": 712,
            "return": [
                "OneHotEncoder"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneHotEncoder.setDropLast": {
            "name": "setDropLast",
            "location": 720,
            "return": [
                "OneHotEncoder"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "OneHotEncoder.setInputCols": {
            "name": "setInputCols",
            "location": 721,
            "return": [
                "OneHotEncoder"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]"
                ]
            }
        },
        "OneHotEncoder.setOutputCols": {
            "name": "setOutputCols",
            "location": 722,
            "return": [
                "OneHotEncoder"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]"
                ]
            }
        },
        "OneHotEncoder.setHandleInvalid": {
            "name": "setHandleInvalid",
            "location": 723,
            "return": [
                "OneHotEncoder"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "OneHotEncoder.setInputCol": {
            "name": "setInputCol",
            "location": 724,
            "return": [
                "OneHotEncoder"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "OneHotEncoder.setOutputCol": {
            "name": "setOutputCol",
            "location": 725,
            "return": [
                "OneHotEncoder"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "OneHotEncoderModel.setDropLast": {
            "name": "setDropLast",
            "location": 730,
            "return": [
                "OneHotEncoderModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "OneHotEncoderModel.setInputCols": {
            "name": "setInputCols",
            "location": 731,
            "return": [
                "OneHotEncoderModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]"
                ]
            }
        },
        "OneHotEncoderModel.setOutputCols": {
            "name": "setOutputCols",
            "location": 732,
            "return": [
                "OneHotEncoderModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]"
                ]
            }
        },
        "OneHotEncoderModel.setInputCol": {
            "name": "setInputCol",
            "location": 733,
            "return": [
                "OneHotEncoderModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "OneHotEncoderModel.setOutputCol": {
            "name": "setOutputCol",
            "location": 734,
            "return": [
                "OneHotEncoderModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "OneHotEncoderModel.setHandleInvalid": {
            "name": "setHandleInvalid",
            "location": 735,
            "return": [
                "OneHotEncoderModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "OneHotEncoderModel.categorySizes": {
            "name": "categorySizes",
            "location": 737,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolynomialExpansion.__init__": {
            "name": "__init__",
            "location": 747,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolynomialExpansion.setParams": {
            "name": "setParams",
            "location": 754,
            "return": [
                "PolynomialExpansion"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolynomialExpansion.setDegree": {
            "name": "setDegree",
            "location": 761,
            "return": [
                "PolynomialExpansion"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "PolynomialExpansion.getDegree": {
            "name": "getDegree",
            "location": 762,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolynomialExpansion.setInputCol": {
            "name": "setInputCol",
            "location": 763,
            "return": [
                "PolynomialExpansion"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "PolynomialExpansion.setOutputCol": {
            "name": "setOutputCol",
            "location": 764,
            "return": [
                "PolynomialExpansion"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "QuantileDiscretizer.__init__": {
            "name": "__init__",
            "location": 791,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantileDiscretizer.setParams": {
            "name": "setParams",
            "location": 811,
            "return": [
                "QuantileDiscretizer"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantileDiscretizer.setNumBuckets": {
            "name": "setNumBuckets",
            "location": 820,
            "return": [
                "QuantileDiscretizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "QuantileDiscretizer.getNumBuckets": {
            "name": "getNumBuckets",
            "location": 821,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantileDiscretizer.setNumBucketsArray": {
            "name": "setNumBucketsArray",
            "location": 822,
            "return": [
                "QuantileDiscretizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[int]"
                ]
            }
        },
        "QuantileDiscretizer.getNumBucketsArray": {
            "name": "getNumBucketsArray",
            "location": 823,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantileDiscretizer.setRelativeError": {
            "name": "setRelativeError",
            "location": 824,
            "return": [
                "QuantileDiscretizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "QuantileDiscretizer.setInputCol": {
            "name": "setInputCol",
            "location": 825,
            "return": [
                "QuantileDiscretizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "QuantileDiscretizer.setInputCols": {
            "name": "setInputCols",
            "location": 826,
            "return": [
                "QuantileDiscretizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]"
                ]
            }
        },
        "QuantileDiscretizer.setOutputCol": {
            "name": "setOutputCol",
            "location": 827,
            "return": [
                "QuantileDiscretizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "QuantileDiscretizer.setOutputCols": {
            "name": "setOutputCols",
            "location": 828,
            "return": [
                "QuantileDiscretizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]"
                ]
            }
        },
        "QuantileDiscretizer.setHandleInvalid": {
            "name": "setHandleInvalid",
            "location": 829,
            "return": [
                "QuantileDiscretizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "_RobustScalerParams.__init__": {
            "name": "__init__",
            "location": 836,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_RobustScalerParams.getLower": {
            "name": "getLower",
            "location": 837,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RobustScalerParams.getUpper": {
            "name": "getUpper",
            "location": 838,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RobustScalerParams.getWithCentering": {
            "name": "getWithCentering",
            "location": 839,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RobustScalerParams.getWithScaling": {
            "name": "getWithScaling",
            "location": 840,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RobustScaler.__init__": {
            "name": "__init__",
            "location": 845,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RobustScaler.setParams": {
            "name": "setParams",
            "location": 856,
            "return": [
                "RobustScaler"
            ],
            "arguments": {
                "self": []
            }
        },
        "RobustScaler.setLower": {
            "name": "setLower",
            "location": 867,
            "return": [
                "RobustScaler"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "RobustScaler.setUpper": {
            "name": "setUpper",
            "location": 868,
            "return": [
                "RobustScaler"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "RobustScaler.setWithCentering": {
            "name": "setWithCentering",
            "location": 869,
            "return": [
                "RobustScaler"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "RobustScaler.setWithScaling": {
            "name": "setWithScaling",
            "location": 870,
            "return": [
                "RobustScaler"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "RobustScaler.setInputCol": {
            "name": "setInputCol",
            "location": 871,
            "return": [
                "RobustScaler"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "RobustScaler.setOutputCol": {
            "name": "setOutputCol",
            "location": 872,
            "return": [
                "RobustScaler"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "RobustScaler.setRelativeError": {
            "name": "setRelativeError",
            "location": 873,
            "return": [
                "RobustScaler"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "RobustScalerModel.setInputCol": {
            "name": "setInputCol",
            "location": 878,
            "return": [
                "RobustScalerModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "RobustScalerModel.setOutputCol": {
            "name": "setOutputCol",
            "location": 879,
            "return": [
                "RobustScalerModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "RobustScalerModel.median": {
            "name": "median",
            "location": 881,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "RobustScalerModel.range": {
            "name": "range",
            "location": 883,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegexTokenizer.__init__": {
            "name": "__init__",
            "location": 896,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegexTokenizer.setParams": {
            "name": "setParams",
            "location": 906,
            "return": [
                "RegexTokenizer"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegexTokenizer.setMinTokenLength": {
            "name": "setMinTokenLength",
            "location": 916,
            "return": [
                "RegexTokenizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "RegexTokenizer.getMinTokenLength": {
            "name": "getMinTokenLength",
            "location": 917,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegexTokenizer.setGaps": {
            "name": "setGaps",
            "location": 918,
            "return": [
                "RegexTokenizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "RegexTokenizer.getGaps": {
            "name": "getGaps",
            "location": 919,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegexTokenizer.setPattern": {
            "name": "setPattern",
            "location": 920,
            "return": [
                "RegexTokenizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "RegexTokenizer.getPattern": {
            "name": "getPattern",
            "location": 921,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegexTokenizer.setToLowercase": {
            "name": "setToLowercase",
            "location": 922,
            "return": [
                "RegexTokenizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "RegexTokenizer.getToLowercase": {
            "name": "getToLowercase",
            "location": 923,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegexTokenizer.setInputCol": {
            "name": "setInputCol",
            "location": 924,
            "return": [
                "RegexTokenizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "RegexTokenizer.setOutputCol": {
            "name": "setOutputCol",
            "location": 925,
            "return": [
                "RegexTokenizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "SQLTransformer.__init__": {
            "name": "__init__",
            "location": 929,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLTransformer.setParams": {
            "name": "setParams",
            "location": 930,
            "return": [
                "SQLTransformer"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLTransformer.setStatement": {
            "name": "setStatement",
            "location": 931,
            "return": [
                "SQLTransformer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "SQLTransformer.getStatement": {
            "name": "getStatement",
            "location": 932,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_StandardScalerParams.__init__": {
            "name": "__init__",
            "location": 937,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_StandardScalerParams.getWithMean": {
            "name": "getWithMean",
            "location": 938,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_StandardScalerParams.getWithStd": {
            "name": "getWithStd",
            "location": 939,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StandardScaler.__init__": {
            "name": "__init__",
            "location": 947,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StandardScaler.setParams": {
            "name": "setParams",
            "location": 955,
            "return": [
                "StandardScaler"
            ],
            "arguments": {
                "self": []
            }
        },
        "StandardScaler.setWithMean": {
            "name": "setWithMean",
            "location": 963,
            "return": [
                "StandardScaler"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "StandardScaler.setWithStd": {
            "name": "setWithStd",
            "location": 964,
            "return": [
                "StandardScaler"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "StandardScaler.setInputCol": {
            "name": "setInputCol",
            "location": 965,
            "return": [
                "StandardScaler"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "StandardScaler.setOutputCol": {
            "name": "setOutputCol",
            "location": 966,
            "return": [
                "StandardScaler"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "StandardScalerModel.setInputCol": {
            "name": "setInputCol",
            "location": 974,
            "return": [
                "StandardScalerModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "StandardScalerModel.setOutputCol": {
            "name": "setOutputCol",
            "location": 975,
            "return": [
                "StandardScalerModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "StandardScalerModel.std": {
            "name": "std",
            "location": 977,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "StandardScalerModel.mean": {
            "name": "mean",
            "location": 979,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "_StringIndexerParams.__init__": {
            "name": "__init__",
            "location": 986,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_StringIndexerParams.getStringOrderType": {
            "name": "getStringOrderType",
            "location": 987,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringIndexer.__init__": {
            "name": "__init__",
            "location": 1005,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringIndexer.setParams": {
            "name": "setParams",
            "location": 1023,
            "return": [
                "StringIndexer"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringIndexer.setStringOrderType": {
            "name": "setStringOrderType",
            "location": 1031,
            "return": [
                "StringIndexer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "StringIndexer.setInputCol": {
            "name": "setInputCol",
            "location": 1032,
            "return": [
                "StringIndexer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "StringIndexer.setInputCols": {
            "name": "setInputCols",
            "location": 1033,
            "return": [
                "StringIndexer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]"
                ]
            }
        },
        "StringIndexer.setOutputCol": {
            "name": "setOutputCol",
            "location": 1034,
            "return": [
                "StringIndexer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "StringIndexer.setOutputCols": {
            "name": "setOutputCols",
            "location": 1035,
            "return": [
                "StringIndexer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]"
                ]
            }
        },
        "StringIndexer.setHandleInvalid": {
            "name": "setHandleInvalid",
            "location": 1036,
            "return": [
                "StringIndexer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "StringIndexerModel.setInputCol": {
            "name": "setInputCol",
            "location": 1041,
            "return": [
                "StringIndexerModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "StringIndexerModel.setInputCols": {
            "name": "setInputCols",
            "location": 1042,
            "return": [
                "StringIndexerModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]"
                ]
            }
        },
        "StringIndexerModel.setOutputCol": {
            "name": "setOutputCol",
            "location": 1043,
            "return": [
                "StringIndexerModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "StringIndexerModel.setOutputCols": {
            "name": "setOutputCols",
            "location": 1044,
            "return": [
                "StringIndexerModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]"
                ]
            }
        },
        "StringIndexerModel.setHandleInvalid": {
            "name": "setHandleInvalid",
            "location": 1045,
            "return": [
                "StringIndexerModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "StringIndexerModel.from_labels": {
            "name": "from_labels",
            "location": 1047,
            "return": [
                "StringIndexerModel"
            ],
            "arguments": {
                "cls": [],
                "labels": [
                    "List[str]"
                ],
                "inputCol": [
                    "str"
                ],
                "outputCol": [
                    "Optional[str]"
                ],
                "handleInvalid": [
                    "Optional[str]"
                ]
            }
        },
        "StringIndexerModel.from_arrays_of_labels": {
            "name": "from_arrays_of_labels",
            "location": 1055,
            "return": [
                "StringIndexerModel"
            ],
            "arguments": {
                "cls": [],
                "arrayOfLabels": [
                    "List[List[str]]"
                ],
                "inputCols": [
                    "List[str]"
                ],
                "outputCols": [
                    "Optional[List[str]]"
                ],
                "handleInvalid": [
                    "Optional[str]"
                ]
            }
        },
        "StringIndexerModel.labels": {
            "name": "labels",
            "location": 1063,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexToString.__init__": {
            "name": "__init__",
            "location": 1073,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexToString.setParams": {
            "name": "setParams",
            "location": 1080,
            "return": [
                "IndexToString"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexToString.setLabels": {
            "name": "setLabels",
            "location": 1087,
            "return": [
                "IndexToString"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]"
                ]
            }
        },
        "IndexToString.getLabels": {
            "name": "getLabels",
            "location": 1088,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexToString.setInputCol": {
            "name": "setInputCol",
            "location": 1089,
            "return": [
                "IndexToString"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "IndexToString.setOutputCol": {
            "name": "setOutputCol",
            "location": 1090,
            "return": [
                "IndexToString"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "StopWordsRemover.__init__": {
            "name": "__init__",
            "location": 1115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StopWordsRemover.setParams": {
            "name": "setParams",
            "location": 1135,
            "return": [
                "StopWordsRemover"
            ],
            "arguments": {
                "self": []
            }
        },
        "StopWordsRemover.setStopWords": {
            "name": "setStopWords",
            "location": 1144,
            "return": [
                "StopWordsRemover"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]"
                ]
            }
        },
        "StopWordsRemover.getStopWords": {
            "name": "getStopWords",
            "location": 1145,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StopWordsRemover.setCaseSensitive": {
            "name": "setCaseSensitive",
            "location": 1146,
            "return": [
                "StopWordsRemover"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "StopWordsRemover.getCaseSensitive": {
            "name": "getCaseSensitive",
            "location": 1147,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StopWordsRemover.setLocale": {
            "name": "setLocale",
            "location": 1148,
            "return": [
                "StopWordsRemover"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "StopWordsRemover.getLocale": {
            "name": "getLocale",
            "location": 1149,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StopWordsRemover.setInputCol": {
            "name": "setInputCol",
            "location": 1150,
            "return": [
                "StopWordsRemover"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "StopWordsRemover.setOutputCol": {
            "name": "setOutputCol",
            "location": 1151,
            "return": [
                "StopWordsRemover"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "StopWordsRemover.setInputCols": {
            "name": "setInputCols",
            "location": 1152,
            "return": [
                "StopWordsRemover"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]"
                ]
            }
        },
        "StopWordsRemover.setOutputCols": {
            "name": "setOutputCols",
            "location": 1153,
            "return": [
                "StopWordsRemover"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]"
                ]
            }
        },
        "StopWordsRemover.loadDefaultStopWords": {
            "name": "loadDefaultStopWords",
            "location": 1155,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "language": [
                    "str"
                ]
            }
        },
        "Tokenizer.__init__": {
            "name": "__init__",
            "location": 1164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tokenizer.setParams": {
            "name": "setParams",
            "location": 1167,
            "return": [
                "Tokenizer"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tokenizer.setInputCol": {
            "name": "setInputCol",
            "location": 1170,
            "return": [
                "Tokenizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Tokenizer.setOutputCol": {
            "name": "setOutputCol",
            "location": 1171,
            "return": [
                "Tokenizer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "VectorAssembler.__init__": {
            "name": "__init__",
            "location": 1182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectorAssembler.setParams": {
            "name": "setParams",
            "location": 1189,
            "return": [
                "VectorAssembler"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectorAssembler.setInputCols": {
            "name": "setInputCols",
            "location": 1196,
            "return": [
                "VectorAssembler"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]"
                ]
            }
        },
        "VectorAssembler.setOutputCol": {
            "name": "setOutputCol",
            "location": 1197,
            "return": [
                "VectorAssembler"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "VectorAssembler.setHandleInvalid": {
            "name": "setHandleInvalid",
            "location": 1198,
            "return": [
                "VectorAssembler"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "_VectorIndexerParams.__init__": {
            "name": "__init__",
            "location": 1203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_VectorIndexerParams.getMaxCategories": {
            "name": "getMaxCategories",
            "location": 1204,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectorIndexer.__init__": {
            "name": "__init__",
            "location": 1213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectorIndexer.setParams": {
            "name": "setParams",
            "location": 1221,
            "return": [
                "VectorIndexer"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectorIndexer.setMaxCategories": {
            "name": "setMaxCategories",
            "location": 1229,
            "return": [
                "VectorIndexer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "VectorIndexer.setInputCol": {
            "name": "setInputCol",
            "location": 1230,
            "return": [
                "VectorIndexer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "VectorIndexer.setOutputCol": {
            "name": "setOutputCol",
            "location": 1231,
            "return": [
                "VectorIndexer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "VectorIndexer.setHandleInvalid": {
            "name": "setHandleInvalid",
            "location": 1232,
            "return": [
                "VectorIndexer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "VectorIndexerModel.setInputCol": {
            "name": "setInputCol",
            "location": 1237,
            "return": [
                "VectorIndexerModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "VectorIndexerModel.setOutputCol": {
            "name": "setOutputCol",
            "location": 1238,
            "return": [
                "VectorIndexerModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "VectorIndexerModel.numFeatures": {
            "name": "numFeatures",
            "location": 1240,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectorIndexerModel.categoryMaps": {
            "name": "categoryMaps",
            "location": 1242,
            "return": [
                "Dict[(int, Tuple[(float, int)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectorSlicer.__init__": {
            "name": "__init__",
            "location": 1253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectorSlicer.setParams": {
            "name": "setParams",
            "location": 1261,
            "return": [
                "VectorSlicer"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectorSlicer.setIndices": {
            "name": "setIndices",
            "location": 1269,
            "return": [
                "VectorSlicer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[int]"
                ]
            }
        },
        "VectorSlicer.getIndices": {
            "name": "getIndices",
            "location": 1270,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectorSlicer.setNames": {
            "name": "setNames",
            "location": 1271,
            "return": [
                "VectorSlicer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]"
                ]
            }
        },
        "VectorSlicer.getNames": {
            "name": "getNames",
            "location": 1272,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectorSlicer.setInputCol": {
            "name": "setInputCol",
            "location": 1273,
            "return": [
                "VectorSlicer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "VectorSlicer.setOutputCol": {
            "name": "setOutputCol",
            "location": 1274,
            "return": [
                "VectorSlicer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "_Word2VecParams.__init__": {
            "name": "__init__",
            "location": 1282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Word2VecParams.getVectorSize": {
            "name": "getVectorSize",
            "location": 1283,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Word2VecParams.getNumPartitions": {
            "name": "getNumPartitions",
            "location": 1284,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Word2VecParams.getMinCount": {
            "name": "getMinCount",
            "location": 1285,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Word2VecParams.getWindowSize": {
            "name": "getWindowSize",
            "location": 1286,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Word2VecParams.getMaxSentenceLength": {
            "name": "getMaxSentenceLength",
            "location": 1287,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word2Vec.__init__": {
            "name": "__init__",
            "location": 1295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word2Vec.setParams": {
            "name": "setParams",
            "location": 1309,
            "return": [
                "Word2Vec"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word2Vec.setVectorSize": {
            "name": "setVectorSize",
            "location": 1323,
            "return": [
                "Word2Vec"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "Word2Vec.setNumPartitions": {
            "name": "setNumPartitions",
            "location": 1324,
            "return": [
                "Word2Vec"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "Word2Vec.setMinCount": {
            "name": "setMinCount",
            "location": 1325,
            "return": [
                "Word2Vec"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "Word2Vec.setWindowSize": {
            "name": "setWindowSize",
            "location": 1326,
            "return": [
                "Word2Vec"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "Word2Vec.setMaxSentenceLength": {
            "name": "setMaxSentenceLength",
            "location": 1327,
            "return": [
                "Word2Vec"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "Word2Vec.setMaxIter": {
            "name": "setMaxIter",
            "location": 1328,
            "return": [
                "Word2Vec"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "Word2Vec.setInputCol": {
            "name": "setInputCol",
            "location": 1329,
            "return": [
                "Word2Vec"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Word2Vec.setOutputCol": {
            "name": "setOutputCol",
            "location": 1330,
            "return": [
                "Word2Vec"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Word2Vec.setSeed": {
            "name": "setSeed",
            "location": 1331,
            "return": [
                "Word2Vec"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "Word2Vec.setStepSize": {
            "name": "setStepSize",
            "location": 1332,
            "return": [
                "Word2Vec"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "Word2VecModel.getVectors": {
            "name": "getVectors",
            "location": 1337,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word2VecModel.setInputCol": {
            "name": "setInputCol",
            "location": 1338,
            "return": [
                "Word2VecModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Word2VecModel.setOutputCol": {
            "name": "setOutputCol",
            "location": 1339,
            "return": [
                "Word2VecModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Word2VecModel.findSynonyms": {
            "name": "findSynonyms",
            "location": 1343,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "Vector"
                ],
                "num": [
                    "int"
                ]
            }
        },
        "Word2VecModel.findSynonymsArray": {
            "name": "findSynonymsArray",
            "location": 1347,
            "return": [
                "List[Tuple[(str, float)]]"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "Vector"
                ],
                "num": [
                    "int"
                ]
            }
        },
        "_PCAParams.getK": {
            "name": "getK",
            "location": 1351,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PCA.__init__": {
            "name": "__init__",
            "location": 1354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PCA.setParams": {
            "name": "setParams",
            "location": 1361,
            "return": [
                "PCA"
            ],
            "arguments": {
                "self": []
            }
        },
        "PCA.setK": {
            "name": "setK",
            "location": 1368,
            "return": [
                "PCA"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "PCA.setInputCol": {
            "name": "setInputCol",
            "location": 1369,
            "return": [
                "PCA"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "PCA.setOutputCol": {
            "name": "setOutputCol",
            "location": 1370,
            "return": [
                "PCA"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "PCAModel.setInputCol": {
            "name": "setInputCol",
            "location": 1373,
            "return": [
                "PCAModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "PCAModel.setOutputCol": {
            "name": "setOutputCol",
            "location": 1374,
            "return": [
                "PCAModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "PCAModel.pc": {
            "name": "pc",
            "location": 1376,
            "return": [
                "DenseMatrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "PCAModel.explainedVariance": {
            "name": "explainedVariance",
            "location": 1378,
            "return": [
                "DenseVector"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RFormulaParams.__init__": {
            "name": "__init__",
            "location": 1385,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_RFormulaParams.getFormula": {
            "name": "getFormula",
            "location": 1386,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RFormulaParams.getForceIndexLabel": {
            "name": "getForceIndexLabel",
            "location": 1387,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RFormulaParams.getStringIndexerOrderType": {
            "name": "getStringIndexerOrderType",
            "location": 1388,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RFormula.__init__": {
            "name": "__init__",
            "location": 1396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RFormula.setParams": {
            "name": "setParams",
            "location": 1406,
            "return": [
                "RFormula"
            ],
            "arguments": {
                "self": []
            }
        },
        "RFormula.setFormula": {
            "name": "setFormula",
            "location": 1416,
            "return": [
                "RFormula"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "RFormula.setForceIndexLabel": {
            "name": "setForceIndexLabel",
            "location": 1417,
            "return": [
                "RFormula"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "RFormula.setStringIndexerOrderType": {
            "name": "setStringIndexerOrderType",
            "location": 1418,
            "return": [
                "RFormula"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "RFormula.setFeaturesCol": {
            "name": "setFeaturesCol",
            "location": 1419,
            "return": [
                "RFormula"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "RFormula.setLabelCol": {
            "name": "setLabelCol",
            "location": 1420,
            "return": [
                "RFormula"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "RFormula.setHandleInvalid": {
            "name": "setHandleInvalid",
            "location": 1421,
            "return": [
                "RFormula"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "_SelectorParams.__init__": {
            "name": "__init__",
            "location": 1434,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_SelectorParams.getSelectorType": {
            "name": "getSelectorType",
            "location": 1435,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SelectorParams.getNumTopFeatures": {
            "name": "getNumTopFeatures",
            "location": 1436,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SelectorParams.getPercentile": {
            "name": "getPercentile",
            "location": 1437,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SelectorParams.getFpr": {
            "name": "getFpr",
            "location": 1438,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SelectorParams.getFdr": {
            "name": "getFdr",
            "location": 1439,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SelectorParams.getFwe": {
            "name": "getFwe",
            "location": 1440,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Selector.setSelectorType": {
            "name": "setSelectorType",
            "location": 1443,
            "return": [
                "P"
            ],
            "arguments": {
                "self": [
                    "P"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "_Selector.setNumTopFeatures": {
            "name": "setNumTopFeatures",
            "location": 1444,
            "return": [
                "P"
            ],
            "arguments": {
                "self": [
                    "P"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "_Selector.setPercentile": {
            "name": "setPercentile",
            "location": 1445,
            "return": [
                "P"
            ],
            "arguments": {
                "self": [
                    "P"
                ],
                "value": [
                    "float"
                ]
            }
        },
        "_Selector.setFpr": {
            "name": "setFpr",
            "location": 1446,
            "return": [
                "P"
            ],
            "arguments": {
                "self": [
                    "P"
                ],
                "value": [
                    "float"
                ]
            }
        },
        "_Selector.setFdr": {
            "name": "setFdr",
            "location": 1447,
            "return": [
                "P"
            ],
            "arguments": {
                "self": [
                    "P"
                ],
                "value": [
                    "float"
                ]
            }
        },
        "_Selector.setFwe": {
            "name": "setFwe",
            "location": 1448,
            "return": [
                "P"
            ],
            "arguments": {
                "self": [
                    "P"
                ],
                "value": [
                    "float"
                ]
            }
        },
        "_Selector.setFeaturesCol": {
            "name": "setFeaturesCol",
            "location": 1449,
            "return": [
                "P"
            ],
            "arguments": {
                "self": [
                    "P"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "_Selector.setOutputCol": {
            "name": "setOutputCol",
            "location": 1450,
            "return": [
                "P"
            ],
            "arguments": {
                "self": [
                    "P"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "_Selector.setLabelCol": {
            "name": "setLabelCol",
            "location": 1451,
            "return": [
                "P"
            ],
            "arguments": {
                "self": [
                    "P"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "_SelectorModel.setFeaturesCol": {
            "name": "setFeaturesCol",
            "location": 1454,
            "return": [
                "P"
            ],
            "arguments": {
                "self": [
                    "P"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "_SelectorModel.setOutputCol": {
            "name": "setOutputCol",
            "location": 1455,
            "return": [
                "P"
            ],
            "arguments": {
                "self": [
                    "P"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "_SelectorModel.selectedFeatures": {
            "name": "selectedFeatures",
            "location": 1457,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ANOVASelector.__init__": {
            "name": "__init__",
            "location": 1462,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numTopFeatures": [
                    "int"
                ],
                "featuresCol": [
                    "str"
                ],
                "outputCol": [
                    "Optional[str]"
                ],
                "labelCol": [
                    "str"
                ],
                "selectorType": [
                    "str"
                ],
                "percentile": [
                    "float"
                ],
                "fpr": [
                    "float"
                ],
                "fdr": [
                    "float"
                ],
                "fwe": [
                    "float"
                ]
            }
        },
        "ANOVASelector.setParams": {
            "name": "setParams",
            "location": 1474,
            "return": [
                "ANOVASelector"
            ],
            "arguments": {
                "self": [],
                "numTopFeatures": [
                    "int"
                ],
                "featuresCol": [
                    "str"
                ],
                "outputCol": [
                    "Optional[str]"
                ],
                "labelCol": [
                    "str"
                ],
                "selectorType": [
                    "str"
                ],
                "percentile": [
                    "float"
                ],
                "fpr": [
                    "float"
                ],
                "fdr": [
                    "float"
                ],
                "fwe": [
                    "float"
                ]
            }
        },
        "ChiSqSelector.__init__": {
            "name": "__init__",
            "location": 1496,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChiSqSelector.setParams": {
            "name": "setParams",
            "location": 1509,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChiSqSelector.setSelectorType": {
            "name": "setSelectorType",
            "location": 1522,
            "return": [
                "ChiSqSelector"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "ChiSqSelector.setNumTopFeatures": {
            "name": "setNumTopFeatures",
            "location": 1523,
            "return": [
                "ChiSqSelector"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "ChiSqSelector.setPercentile": {
            "name": "setPercentile",
            "location": 1524,
            "return": [
                "ChiSqSelector"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "ChiSqSelector.setFpr": {
            "name": "setFpr",
            "location": 1525,
            "return": [
                "ChiSqSelector"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "ChiSqSelector.setFdr": {
            "name": "setFdr",
            "location": 1526,
            "return": [
                "ChiSqSelector"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "ChiSqSelector.setFwe": {
            "name": "setFwe",
            "location": 1527,
            "return": [
                "ChiSqSelector"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "ChiSqSelector.setFeaturesCol": {
            "name": "setFeaturesCol",
            "location": 1528,
            "return": [
                "ChiSqSelector"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "ChiSqSelector.setOutputCol": {
            "name": "setOutputCol",
            "location": 1529,
            "return": [
                "ChiSqSelector"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "ChiSqSelector.setLabelCol": {
            "name": "setLabelCol",
            "location": 1530,
            "return": [
                "ChiSqSelector"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "ChiSqSelectorModel.setFeaturesCol": {
            "name": "setFeaturesCol",
            "location": 1535,
            "return": [
                "ChiSqSelectorModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "ChiSqSelectorModel.setOutputCol": {
            "name": "setOutputCol",
            "location": 1536,
            "return": [
                "ChiSqSelectorModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "ChiSqSelectorModel.selectedFeatures": {
            "name": "selectedFeatures",
            "location": 1538,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectorSizeHint.__init__": {
            "name": "__init__",
            "location": 1549,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectorSizeHint.setParams": {
            "name": "setParams",
            "location": 1556,
            "return": [
                "VectorSizeHint"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectorSizeHint.setSize": {
            "name": "setSize",
            "location": 1563,
            "return": [
                "VectorSizeHint"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "VectorSizeHint.getSize": {
            "name": "getSize",
            "location": 1564,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectorSizeHint.setInputCol": {
            "name": "setInputCol",
            "location": 1565,
            "return": [
                "VectorSizeHint"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "VectorSizeHint.setHandleInvalid": {
            "name": "setHandleInvalid",
            "location": 1566,
            "return": [
                "VectorSizeHint"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "FValueSelector.__init__": {
            "name": "__init__",
            "location": 1571,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numTopFeatures": [
                    "int"
                ],
                "featuresCol": [
                    "str"
                ],
                "outputCol": [
                    "Optional[str]"
                ],
                "labelCol": [
                    "str"
                ],
                "selectorType": [
                    "str"
                ],
                "percentile": [
                    "float"
                ],
                "fpr": [
                    "float"
                ],
                "fdr": [
                    "float"
                ],
                "fwe": [
                    "float"
                ]
            }
        },
        "FValueSelector.setParams": {
            "name": "setParams",
            "location": 1583,
            "return": [
                "FValueSelector"
            ],
            "arguments": {
                "self": [],
                "numTopFeatures": [
                    "int"
                ],
                "featuresCol": [
                    "str"
                ],
                "outputCol": [
                    "Optional[str]"
                ],
                "labelCol": [
                    "str"
                ],
                "selectorType": [
                    "str"
                ],
                "percentile": [
                    "float"
                ],
                "fpr": [
                    "float"
                ],
                "fdr": [
                    "float"
                ],
                "fwe": [
                    "float"
                ]
            }
        },
        "_VarianceThresholdSelectorParams.getVarianceThreshold": {
            "name": "getVarianceThreshold",
            "location": 1602,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "VarianceThresholdSelector.__init__": {
            "name": "__init__",
            "location": 1607,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "featuresCol": [
                    "str"
                ],
                "outputCol": [
                    "Optional[str]"
                ],
                "varianceThreshold": [
                    "float"
                ]
            }
        },
        "VarianceThresholdSelector.setParams": {
            "name": "setParams",
            "location": 1613,
            "return": [],
            "arguments": {
                "self": [],
                "featuresCol": [
                    "str"
                ],
                "outputCol": [
                    "Optional[str]"
                ],
                "varianceThreshold": [
                    "float"
                ]
            }
        },
        "VarianceThresholdSelector.setVarianceThreshold": {
            "name": "setVarianceThreshold",
            "location": 1619,
            "return": [
                "VarianceThresholdSelector"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "VarianceThresholdSelector.setFeaturesCol": {
            "name": "setFeaturesCol",
            "location": 1620,
            "return": [
                "VarianceThresholdSelector"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "VarianceThresholdSelector.setOutputCol": {
            "name": "setOutputCol",
            "location": 1621,
            "return": [
                "VarianceThresholdSelector"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "VarianceThresholdSelectorModel.setFeaturesCol": {
            "name": "setFeaturesCol",
            "location": 1626,
            "return": [
                "VarianceThresholdSelectorModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "VarianceThresholdSelectorModel.setOutputCol": {
            "name": "setOutputCol",
            "location": 1627,
            "return": [
                "VarianceThresholdSelectorModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "VarianceThresholdSelectorModel.selectedFeatures": {
            "name": "selectedFeatures",
            "location": 1629,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/ml/fpm.py": {
        "_FPGrowthParams.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_FPGrowthParams.getItemsCol": {
            "name": "getItemsCol",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_FPGrowthParams.getMinSupport": {
            "name": "getMinSupport",
            "location": 35,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_FPGrowthParams.getNumPartitions": {
            "name": "getNumPartitions",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_FPGrowthParams.getMinConfidence": {
            "name": "getMinConfidence",
            "location": 37,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "FPGrowthModel.setItemsCol": {
            "name": "setItemsCol",
            "location": 42,
            "return": [
                "FPGrowthModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "FPGrowthModel.setMinConfidence": {
            "name": "setMinConfidence",
            "location": 43,
            "return": [
                "FPGrowthModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "FPGrowthModel.setPredictionCol": {
            "name": "setPredictionCol",
            "location": 44,
            "return": [
                "FPGrowthModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "FPGrowthModel.freqItemsets": {
            "name": "freqItemsets",
            "location": 46,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "FPGrowthModel.associationRules": {
            "name": "associationRules",
            "location": 48,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "FPGrowth.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FPGrowth.setParams": {
            "name": "setParams",
            "location": 65,
            "return": [
                "FPGrowth"
            ],
            "arguments": {
                "self": []
            }
        },
        "FPGrowth.setItemsCol": {
            "name": "setItemsCol",
            "location": 74,
            "return": [
                "FPGrowth"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "FPGrowth.setMinSupport": {
            "name": "setMinSupport",
            "location": 75,
            "return": [
                "FPGrowth"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "FPGrowth.setNumPartitions": {
            "name": "setNumPartitions",
            "location": 76,
            "return": [
                "FPGrowth"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "FPGrowth.setMinConfidence": {
            "name": "setMinConfidence",
            "location": 77,
            "return": [
                "FPGrowth"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "FPGrowth.setPredictionCol": {
            "name": "setPredictionCol",
            "location": 78,
            "return": [
                "FPGrowth"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "PrefixSpan.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrefixSpan.setParams": {
            "name": "setParams",
            "location": 93,
            "return": [
                "PrefixSpan"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrefixSpan.setMinSupport": {
            "name": "setMinSupport",
            "location": 101,
            "return": [
                "PrefixSpan"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "PrefixSpan.getMinSupport": {
            "name": "getMinSupport",
            "location": 102,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrefixSpan.setMaxPatternLength": {
            "name": "setMaxPatternLength",
            "location": 103,
            "return": [
                "PrefixSpan"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "PrefixSpan.getMaxPatternLength": {
            "name": "getMaxPatternLength",
            "location": 104,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrefixSpan.setMaxLocalProjDBSize": {
            "name": "setMaxLocalProjDBSize",
            "location": 105,
            "return": [
                "PrefixSpan"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "PrefixSpan.getMaxLocalProjDBSize": {
            "name": "getMaxLocalProjDBSize",
            "location": 106,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrefixSpan.setSequenceCol": {
            "name": "setSequenceCol",
            "location": 107,
            "return": [
                "PrefixSpan"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "PrefixSpan.getSequenceCol": {
            "name": "getSequenceCol",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrefixSpan.findFrequentSequentialPatterns": {
            "name": "findFrequentSequentialPatterns",
            "location": 109,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "DataFrame"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/ml/functions.py": {
        "vector_to_array": {
            "name": "vector_to_array",
            "location": 22,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "Column"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/ml/image.py": {
        "_ImageSchema.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ImageSchema.imageSchema": {
            "name": "imageSchema",
            "location": 28,
            "return": [
                "StructType"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ImageSchema.ocvTypes": {
            "name": "ocvTypes",
            "location": 30,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ImageSchema.columnSchema": {
            "name": "columnSchema",
            "location": 32,
            "return": [
                "StructType"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ImageSchema.imageFields": {
            "name": "imageFields",
            "location": 34,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ImageSchema.undefinedImageType": {
            "name": "undefinedImageType",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ImageSchema.toNDArray": {
            "name": "toNDArray",
            "location": 37,
            "return": [
                "ndarray"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "Row"
                ]
            }
        },
        "_ImageSchema.toImage": {
            "name": "toImage",
            "location": 38,
            "return": [
                "Row"
            ],
            "arguments": {
                "self": [],
                "array": [
                    "ndarray"
                ],
                "origin": [
                    "str"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/ml/pipeline.py": {
        "Pipeline.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.setStages": {
            "name": "setStages",
            "location": 40,
            "return": [
                "Pipeline"
            ],
            "arguments": {
                "self": [],
                "stages": [
                    "List[PipelineStage]"
                ]
            }
        },
        "Pipeline.getStages": {
            "name": "getStages",
            "location": 41,
            "return": [
                "List[PipelineStage]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.setParams": {
            "name": "setParams",
            "location": 42,
            "return": [
                "Pipeline"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.copy": {
            "name": "copy",
            "location": 43,
            "return": [
                "Pipeline"
            ],
            "arguments": {
                "self": [],
                "extra": [
                    "Optional[Dict[(Param, str)]]"
                ]
            }
        },
        "Pipeline.write": {
            "name": "write",
            "location": 44,
            "return": [
                "JavaMLWriter"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.save": {
            "name": "save",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Pipeline.read": {
            "name": "read",
            "location": 47,
            "return": [
                "PipelineReader"
            ],
            "arguments": {
                "cls": []
            }
        },
        "PipelineWriter.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Pipeline"
                ]
            }
        },
        "PipelineWriter.saveImpl": {
            "name": "saveImpl",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "PipelineReader.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type[Pipeline]"
                ]
            }
        },
        "PipelineReader.load": {
            "name": "load",
            "location": 57,
            "return": [
                "Pipeline"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "PipelineModelWriter.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "PipelineModel"
                ]
            }
        },
        "PipelineModelWriter.saveImpl": {
            "name": "saveImpl",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "PipelineModelReader.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type[PipelineModel]"
                ]
            }
        },
        "PipelineModelReader.load": {
            "name": "load",
            "location": 67,
            "return": [
                "PipelineModel"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "PipelineModel.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stages": [
                    "List[Transformer]"
                ]
            }
        },
        "PipelineModel.copy": {
            "name": "copy",
            "location": 72,
            "return": [
                "PipelineModel"
            ],
            "arguments": {
                "self": [],
                "extra": [
                    "Optional[Dict[(Param, Any)]]"
                ]
            }
        },
        "PipelineModel.write": {
            "name": "write",
            "location": 73,
            "return": [
                "JavaMLWriter"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipelineModel.save": {
            "name": "save",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "PipelineModel.read": {
            "name": "read",
            "location": 76,
            "return": [
                "PipelineModelReader"
            ],
            "arguments": {
                "cls": []
            }
        },
        "PipelineSharedReadWrite.checkStagesForJava": {
            "name": "checkStagesForJava",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "stages": [
                    "List[PipelineStage]"
                ]
            }
        },
        "PipelineSharedReadWrite.validateStages": {
            "name": "validateStages",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "stages": [
                    "List[PipelineStage]"
                ]
            }
        },
        "PipelineSharedReadWrite.saveImpl": {
            "name": "saveImpl",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "Union[(Pipeline, PipelineModel)]"
                ],
                "stages": [
                    "List[PipelineStage]"
                ],
                "sc": [
                    "SparkContext"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "PipelineSharedReadWrite.load": {
            "name": "load",
            "location": 91,
            "return": [
                "Tuple[(str, List[PipelineStage])]"
            ],
            "arguments": {
                "metadata": [
                    "Dict[(str, Any)]"
                ],
                "sc": [
                    "SparkContext"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "PipelineSharedReadWrite.getStagePath": {
            "name": "getStagePath",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "stageUid": [
                    "str"
                ],
                "stageIdx": [
                    "int"
                ],
                "numStages": [
                    "int"
                ],
                "stagesDir": [
                    "str"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/ml/recommendation.py": {
        "_ALSModelParams.getUserCol": {
            "name": "getUserCol",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ALSModelParams.getItemCol": {
            "name": "getItemCol",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ALSModelParams.getColdStartStrategy": {
            "name": "getColdStartStrategy",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ALSParams.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ALSParams.getRank": {
            "name": "getRank",
            "location": 60,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ALSParams.getNumUserBlocks": {
            "name": "getNumUserBlocks",
            "location": 61,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ALSParams.getNumItemBlocks": {
            "name": "getNumItemBlocks",
            "location": 62,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ALSParams.getImplicitPrefs": {
            "name": "getImplicitPrefs",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ALSParams.getAlpha": {
            "name": "getAlpha",
            "location": 64,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ALSParams.getRatingCol": {
            "name": "getRatingCol",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ALSParams.getNonnegative": {
            "name": "getNonnegative",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ALSParams.getIntermediateStorageLevel": {
            "name": "getIntermediateStorageLevel",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ALSParams.getFinalStorageLevel": {
            "name": "getFinalStorageLevel",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ALS.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ALS.setParams": {
            "name": "setParams",
            "location": 92,
            "return": [
                "ALS"
            ],
            "arguments": {
                "self": []
            }
        },
        "ALS.setRank": {
            "name": "setRank",
            "location": 113,
            "return": [
                "ALS"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "ALS.setNumUserBlocks": {
            "name": "setNumUserBlocks",
            "location": 114,
            "return": [
                "ALS"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "ALS.setNumItemBlocks": {
            "name": "setNumItemBlocks",
            "location": 115,
            "return": [
                "ALS"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "ALS.setNumBlocks": {
            "name": "setNumBlocks",
            "location": 116,
            "return": [
                "ALS"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "ALS.setImplicitPrefs": {
            "name": "setImplicitPrefs",
            "location": 117,
            "return": [
                "ALS"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "ALS.setAlpha": {
            "name": "setAlpha",
            "location": 118,
            "return": [
                "ALS"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "ALS.setUserCol": {
            "name": "setUserCol",
            "location": 119,
            "return": [
                "ALS"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "ALS.setItemCol": {
            "name": "setItemCol",
            "location": 120,
            "return": [
                "ALS"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "ALS.setRatingCol": {
            "name": "setRatingCol",
            "location": 121,
            "return": [
                "ALS"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "ALS.setNonnegative": {
            "name": "setNonnegative",
            "location": 122,
            "return": [
                "ALS"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "ALS.setIntermediateStorageLevel": {
            "name": "setIntermediateStorageLevel",
            "location": 123,
            "return": [
                "ALS"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "ALS.setFinalStorageLevel": {
            "name": "setFinalStorageLevel",
            "location": 124,
            "return": [
                "ALS"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "ALS.setColdStartStrategy": {
            "name": "setColdStartStrategy",
            "location": 125,
            "return": [
                "ALS"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "ALS.setMaxIter": {
            "name": "setMaxIter",
            "location": 126,
            "return": [
                "ALS"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "ALS.setRegParam": {
            "name": "setRegParam",
            "location": 127,
            "return": [
                "ALS"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "ALS.setPredictionCol": {
            "name": "setPredictionCol",
            "location": 128,
            "return": [
                "ALS"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "ALS.setCheckpointInterval": {
            "name": "setCheckpointInterval",
            "location": 129,
            "return": [
                "ALS"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "ALS.setSeed": {
            "name": "setSeed",
            "location": 130,
            "return": [
                "ALS"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "ALS.setBlockSize": {
            "name": "setBlockSize",
            "location": 131,
            "return": [
                "ALS"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "ALSModel.setUserCol": {
            "name": "setUserCol",
            "location": 134,
            "return": [
                "ALSModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "ALSModel.setItemCol": {
            "name": "setItemCol",
            "location": 135,
            "return": [
                "ALSModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "ALSModel.setColdStartStrategy": {
            "name": "setColdStartStrategy",
            "location": 136,
            "return": [
                "ALSModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "ALSModel.setPredictionCol": {
            "name": "setPredictionCol",
            "location": 137,
            "return": [
                "ALSModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "ALSModel.setBlockSize": {
            "name": "setBlockSize",
            "location": 138,
            "return": [
                "ALSModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "ALSModel.rank": {
            "name": "rank",
            "location": 140,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ALSModel.userFactors": {
            "name": "userFactors",
            "location": 142,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "ALSModel.itemFactors": {
            "name": "itemFactors",
            "location": 144,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "ALSModel.recommendForAllUsers": {
            "name": "recommendForAllUsers",
            "location": 145,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "numItems": [
                    "int"
                ]
            }
        },
        "ALSModel.recommendForAllItems": {
            "name": "recommendForAllItems",
            "location": 146,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "numUsers": [
                    "int"
                ]
            }
        },
        "ALSModel.recommendForUserSubset": {
            "name": "recommendForUserSubset",
            "location": 147,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "DataFrame"
                ],
                "numItems": [
                    "int"
                ]
            }
        },
        "ALSModel.recommendForItemSubset": {
            "name": "recommendForItemSubset",
            "location": 150,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "DataFrame"
                ],
                "numUsers": [
                    "int"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/ml/regression.py": {
        "_LinearRegressionParams.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_LinearRegressionParams.getEpsilon": {
            "name": "getEpsilon",
            "location": 95,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearRegression.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearRegression.setParams": {
            "name": "setParams",
            "location": 121,
            "return": [
                "LinearRegression"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearRegression.setEpsilon": {
            "name": "setEpsilon",
            "location": 139,
            "return": [
                "LinearRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "LinearRegression.setMaxIter": {
            "name": "setMaxIter",
            "location": 140,
            "return": [
                "LinearRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "LinearRegression.setRegParam": {
            "name": "setRegParam",
            "location": 141,
            "return": [
                "LinearRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "LinearRegression.setTol": {
            "name": "setTol",
            "location": 142,
            "return": [
                "LinearRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "LinearRegression.setElasticNetParam": {
            "name": "setElasticNetParam",
            "location": 143,
            "return": [
                "LinearRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "LinearRegression.setFitIntercept": {
            "name": "setFitIntercept",
            "location": 144,
            "return": [
                "LinearRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "LinearRegression.setStandardization": {
            "name": "setStandardization",
            "location": 145,
            "return": [
                "LinearRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "LinearRegression.setWeightCol": {
            "name": "setWeightCol",
            "location": 146,
            "return": [
                "LinearRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "LinearRegression.setSolver": {
            "name": "setSolver",
            "location": 147,
            "return": [
                "LinearRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "LinearRegression.setAggregationDepth": {
            "name": "setAggregationDepth",
            "location": 148,
            "return": [
                "LinearRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "LinearRegression.setLoss": {
            "name": "setLoss",
            "location": 149,
            "return": [
                "LinearRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "LinearRegression.setBlockSize": {
            "name": "setBlockSize",
            "location": 150,
            "return": [
                "LinearRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "LinearRegressionModel.coefficients": {
            "name": "coefficients",
            "location": 160,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearRegressionModel.intercept": {
            "name": "intercept",
            "location": 162,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearRegressionModel.summary": {
            "name": "summary",
            "location": 164,
            "return": [
                "LinearRegressionTrainingSummary"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearRegressionModel.evaluate": {
            "name": "evaluate",
            "location": 165,
            "return": [
                "LinearRegressionSummary"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "DataFrame"
                ]
            }
        },
        "LinearRegressionSummary.predictions": {
            "name": "predictions",
            "location": 169,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearRegressionSummary.predictionCol": {
            "name": "predictionCol",
            "location": 171,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearRegressionSummary.labelCol": {
            "name": "labelCol",
            "location": 173,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearRegressionSummary.featuresCol": {
            "name": "featuresCol",
            "location": 175,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearRegressionSummary.explainedVariance": {
            "name": "explainedVariance",
            "location": 177,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearRegressionSummary.meanAbsoluteError": {
            "name": "meanAbsoluteError",
            "location": 179,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearRegressionSummary.meanSquaredError": {
            "name": "meanSquaredError",
            "location": 181,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearRegressionSummary.rootMeanSquaredError": {
            "name": "rootMeanSquaredError",
            "location": 183,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearRegressionSummary.r2": {
            "name": "r2",
            "location": 185,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearRegressionSummary.r2adj": {
            "name": "r2adj",
            "location": 187,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearRegressionSummary.residuals": {
            "name": "residuals",
            "location": 189,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearRegressionSummary.numInstances": {
            "name": "numInstances",
            "location": 191,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearRegressionSummary.devianceResiduals": {
            "name": "devianceResiduals",
            "location": 193,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearRegressionSummary.coefficientStandardErrors": {
            "name": "coefficientStandardErrors",
            "location": 195,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearRegressionSummary.tValues": {
            "name": "tValues",
            "location": 197,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearRegressionSummary.pValues": {
            "name": "pValues",
            "location": 199,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearRegressionTrainingSummary.objectiveHistory": {
            "name": "objectiveHistory",
            "location": 203,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearRegressionTrainingSummary.totalIterations": {
            "name": "totalIterations",
            "location": 205,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_IsotonicRegressionParams.getIsotonic": {
            "name": "getIsotonic",
            "location": 212,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_IsotonicRegressionParams.getFeatureIndex": {
            "name": "getFeatureIndex",
            "location": 213,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsotonicRegression.__init__": {
            "name": "__init__",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsotonicRegression.setParams": {
            "name": "setParams",
            "location": 232,
            "return": [
                "IsotonicRegression"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsotonicRegression.setIsotonic": {
            "name": "setIsotonic",
            "location": 242,
            "return": [
                "IsotonicRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "IsotonicRegression.setFeatureIndex": {
            "name": "setFeatureIndex",
            "location": 243,
            "return": [
                "IsotonicRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "IsotonicRegression.setFeaturesCol": {
            "name": "setFeaturesCol",
            "location": 244,
            "return": [
                "IsotonicRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "IsotonicRegression.setPredictionCol": {
            "name": "setPredictionCol",
            "location": 245,
            "return": [
                "IsotonicRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "IsotonicRegression.setLabelCol": {
            "name": "setLabelCol",
            "location": 246,
            "return": [
                "IsotonicRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "IsotonicRegression.setWeightCol": {
            "name": "setWeightCol",
            "location": 247,
            "return": [
                "IsotonicRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "IsotonicRegressionModel.setFeaturesCol": {
            "name": "setFeaturesCol",
            "location": 255,
            "return": [
                "IsotonicRegressionModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "IsotonicRegressionModel.setPredictionCol": {
            "name": "setPredictionCol",
            "location": 256,
            "return": [
                "IsotonicRegressionModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "IsotonicRegressionModel.setFeatureIndex": {
            "name": "setFeatureIndex",
            "location": 257,
            "return": [
                "IsotonicRegressionModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "IsotonicRegressionModel.boundaries": {
            "name": "boundaries",
            "location": 259,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsotonicRegressionModel.predictions": {
            "name": "predictions",
            "location": 261,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsotonicRegressionModel.numFeatures": {
            "name": "numFeatures",
            "location": 263,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsotonicRegressionModel.predict": {
            "name": "predict",
            "location": 264,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "_DecisionTreeRegressorParams.__init__": {
            "name": "__init__",
            "location": 269,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DecisionTreeRegressor.__init__": {
            "name": "__init__",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionTreeRegressor.setParams": {
            "name": "setParams",
            "location": 297,
            "return": [
                "DecisionTreeRegressor"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionTreeRegressor.setMaxDepth": {
            "name": "setMaxDepth",
            "location": 317,
            "return": [
                "DecisionTreeRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "DecisionTreeRegressor.setMaxBins": {
            "name": "setMaxBins",
            "location": 318,
            "return": [
                "DecisionTreeRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "DecisionTreeRegressor.setMinInstancesPerNode": {
            "name": "setMinInstancesPerNode",
            "location": 319,
            "return": [
                "DecisionTreeRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "DecisionTreeRegressor.setMinWeightFractionPerNode": {
            "name": "setMinWeightFractionPerNode",
            "location": 320,
            "return": [
                "DecisionTreeRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "DecisionTreeRegressor.setMinInfoGain": {
            "name": "setMinInfoGain",
            "location": 321,
            "return": [
                "DecisionTreeRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "DecisionTreeRegressor.setMaxMemoryInMB": {
            "name": "setMaxMemoryInMB",
            "location": 322,
            "return": [
                "DecisionTreeRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "DecisionTreeRegressor.setCacheNodeIds": {
            "name": "setCacheNodeIds",
            "location": 323,
            "return": [
                "DecisionTreeRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "DecisionTreeRegressor.setImpurity": {
            "name": "setImpurity",
            "location": 324,
            "return": [
                "DecisionTreeRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "DecisionTreeRegressor.setCheckpointInterval": {
            "name": "setCheckpointInterval",
            "location": 325,
            "return": [
                "DecisionTreeRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "DecisionTreeRegressor.setSeed": {
            "name": "setSeed",
            "location": 326,
            "return": [
                "DecisionTreeRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "DecisionTreeRegressor.setWeightCol": {
            "name": "setWeightCol",
            "location": 327,
            "return": [
                "DecisionTreeRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "DecisionTreeRegressor.setVarianceCol": {
            "name": "setVarianceCol",
            "location": 328,
            "return": [
                "DecisionTreeRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "DecisionTreeRegressionModel.setVarianceCol": {
            "name": "setVarianceCol",
            "location": 337,
            "return": [
                "DecisionTreeRegressionModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "DecisionTreeRegressionModel.featureImportances": {
            "name": "featureImportances",
            "location": 339,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RandomForestRegressorParams.__init__": {
            "name": "__init__",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RandomForestRegressor.__init__": {
            "name": "__init__",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomForestRegressor.setParams": {
            "name": "setParams",
            "location": 373,
            "return": [
                "RandomForestRegressor"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomForestRegressor.setMaxDepth": {
            "name": "setMaxDepth",
            "location": 396,
            "return": [
                "RandomForestRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "RandomForestRegressor.setMaxBins": {
            "name": "setMaxBins",
            "location": 397,
            "return": [
                "RandomForestRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "RandomForestRegressor.setMinInstancesPerNode": {
            "name": "setMinInstancesPerNode",
            "location": 398,
            "return": [
                "RandomForestRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "RandomForestRegressor.setMinInfoGain": {
            "name": "setMinInfoGain",
            "location": 399,
            "return": [
                "RandomForestRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "RandomForestRegressor.setMaxMemoryInMB": {
            "name": "setMaxMemoryInMB",
            "location": 400,
            "return": [
                "RandomForestRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "RandomForestRegressor.setCacheNodeIds": {
            "name": "setCacheNodeIds",
            "location": 401,
            "return": [
                "RandomForestRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "RandomForestRegressor.setImpurity": {
            "name": "setImpurity",
            "location": 402,
            "return": [
                "RandomForestRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "RandomForestRegressor.setNumTrees": {
            "name": "setNumTrees",
            "location": 403,
            "return": [
                "RandomForestRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "RandomForestRegressor.setBootstrap": {
            "name": "setBootstrap",
            "location": 404,
            "return": [
                "RandomForestRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "RandomForestRegressor.setSubsamplingRate": {
            "name": "setSubsamplingRate",
            "location": 405,
            "return": [
                "RandomForestRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "RandomForestRegressor.setFeatureSubsetStrategy": {
            "name": "setFeatureSubsetStrategy",
            "location": 406,
            "return": [
                "RandomForestRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "RandomForestRegressor.setCheckpointInterval": {
            "name": "setCheckpointInterval",
            "location": 407,
            "return": [
                "RandomForestRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "RandomForestRegressor.setSeed": {
            "name": "setSeed",
            "location": 408,
            "return": [
                "RandomForestRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "RandomForestRegressor.setWeightCol": {
            "name": "setWeightCol",
            "location": 409,
            "return": [
                "RandomForestRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "RandomForestRegressor.setMinWeightFractionPerNode": {
            "name": "setMinWeightFractionPerNode",
            "location": 410,
            "return": [
                "RandomForestRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "RandomForestRegressionModel.trees": {
            "name": "trees",
            "location": 420,
            "return": [
                "List[DecisionTreeRegressionModel]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomForestRegressionModel.featureImportances": {
            "name": "featureImportances",
            "location": 422,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "_GBTRegressorParams.__init__": {
            "name": "__init__",
            "location": 427,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_GBTRegressorParams.getLossType": {
            "name": "getLossType",
            "location": 428,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GBTRegressor.__init__": {
            "name": "__init__",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GBTRegressor.setParams": {
            "name": "setParams",
            "location": 462,
            "return": [
                "GBTRegressor"
            ],
            "arguments": {
                "self": []
            }
        },
        "GBTRegressor.setMaxDepth": {
            "name": "setMaxDepth",
            "location": 488,
            "return": [
                "GBTRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "GBTRegressor.setMaxBins": {
            "name": "setMaxBins",
            "location": 489,
            "return": [
                "GBTRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "GBTRegressor.setMinInstancesPerNode": {
            "name": "setMinInstancesPerNode",
            "location": 490,
            "return": [
                "GBTRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "GBTRegressor.setMinInfoGain": {
            "name": "setMinInfoGain",
            "location": 491,
            "return": [
                "GBTRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "GBTRegressor.setMaxMemoryInMB": {
            "name": "setMaxMemoryInMB",
            "location": 492,
            "return": [
                "GBTRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "GBTRegressor.setCacheNodeIds": {
            "name": "setCacheNodeIds",
            "location": 493,
            "return": [
                "GBTRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "GBTRegressor.setImpurity": {
            "name": "setImpurity",
            "location": 494,
            "return": [
                "GBTRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "GBTRegressor.setLossType": {
            "name": "setLossType",
            "location": 495,
            "return": [
                "GBTRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "GBTRegressor.setSubsamplingRate": {
            "name": "setSubsamplingRate",
            "location": 496,
            "return": [
                "GBTRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "GBTRegressor.setFeatureSubsetStrategy": {
            "name": "setFeatureSubsetStrategy",
            "location": 497,
            "return": [
                "GBTRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "GBTRegressor.setValidationIndicatorCol": {
            "name": "setValidationIndicatorCol",
            "location": 498,
            "return": [
                "GBTRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "GBTRegressor.setMaxIter": {
            "name": "setMaxIter",
            "location": 499,
            "return": [
                "GBTRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "GBTRegressor.setCheckpointInterval": {
            "name": "setCheckpointInterval",
            "location": 500,
            "return": [
                "GBTRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "GBTRegressor.setSeed": {
            "name": "setSeed",
            "location": 501,
            "return": [
                "GBTRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "GBTRegressor.setStepSize": {
            "name": "setStepSize",
            "location": 502,
            "return": [
                "GBTRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "GBTRegressor.setWeightCol": {
            "name": "setWeightCol",
            "location": 503,
            "return": [
                "GBTRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "GBTRegressor.setMinWeightFractionPerNode": {
            "name": "setMinWeightFractionPerNode",
            "location": 504,
            "return": [
                "GBTRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "GBTRegressionModel.featureImportances": {
            "name": "featureImportances",
            "location": 514,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "GBTRegressionModel.trees": {
            "name": "trees",
            "location": 516,
            "return": [
                "List[DecisionTreeRegressionModel]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GBTRegressionModel.evaluateEachIteration": {
            "name": "evaluateEachIteration",
            "location": 517,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "DataFrame"
                ],
                "loss": [
                    "str"
                ]
            }
        },
        "_AFTSurvivalRegressionParams.__init__": {
            "name": "__init__",
            "location": 530,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AFTSurvivalRegressionParams.getCensorCol": {
            "name": "getCensorCol",
            "location": 531,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_AFTSurvivalRegressionParams.getQuantileProbabilities": {
            "name": "getQuantileProbabilities",
            "location": 532,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_AFTSurvivalRegressionParams.getQuantilesCol": {
            "name": "getQuantilesCol",
            "location": 533,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AFTSurvivalRegression.__init__": {
            "name": "__init__",
            "location": 541,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AFTSurvivalRegression.setParams": {
            "name": "setParams",
            "location": 556,
            "return": [
                "AFTSurvivalRegression"
            ],
            "arguments": {
                "self": []
            }
        },
        "AFTSurvivalRegression.setCensorCol": {
            "name": "setCensorCol",
            "location": 571,
            "return": [
                "AFTSurvivalRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "AFTSurvivalRegression.setQuantileProbabilities": {
            "name": "setQuantileProbabilities",
            "location": 572,
            "return": [
                "AFTSurvivalRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[float]"
                ]
            }
        },
        "AFTSurvivalRegression.setQuantilesCol": {
            "name": "setQuantilesCol",
            "location": 573,
            "return": [
                "AFTSurvivalRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "AFTSurvivalRegression.setMaxIter": {
            "name": "setMaxIter",
            "location": 574,
            "return": [
                "AFTSurvivalRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "AFTSurvivalRegression.setTol": {
            "name": "setTol",
            "location": 575,
            "return": [
                "AFTSurvivalRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "AFTSurvivalRegression.setFitIntercept": {
            "name": "setFitIntercept",
            "location": 576,
            "return": [
                "AFTSurvivalRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "AFTSurvivalRegression.setAggregationDepth": {
            "name": "setAggregationDepth",
            "location": 577,
            "return": [
                "AFTSurvivalRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "AFTSurvivalRegression.setBlockSize": {
            "name": "setBlockSize",
            "location": 578,
            "return": [
                "AFTSurvivalRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "AFTSurvivalRegressionModel.setQuantileProbabilities": {
            "name": "setQuantileProbabilities",
            "location": 586,
            "return": [
                "AFTSurvivalRegressionModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[float]"
                ]
            }
        },
        "AFTSurvivalRegressionModel.setQuantilesCol": {
            "name": "setQuantilesCol",
            "location": 589,
            "return": [
                "AFTSurvivalRegressionModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "AFTSurvivalRegressionModel.coefficients": {
            "name": "coefficients",
            "location": 591,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "AFTSurvivalRegressionModel.intercept": {
            "name": "intercept",
            "location": 593,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "AFTSurvivalRegressionModel.scale": {
            "name": "scale",
            "location": 595,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "AFTSurvivalRegressionModel.predictQuantiles": {
            "name": "predictQuantiles",
            "location": 596,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": [],
                "features": [
                    "Vector"
                ]
            }
        },
        "AFTSurvivalRegressionModel.predict": {
            "name": "predict",
            "location": 597,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "features": [
                    "Vector"
                ]
            }
        },
        "_GeneralizedLinearRegressionParams.__init__": {
            "name": "__init__",
            "location": 616,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_GeneralizedLinearRegressionParams.getFamily": {
            "name": "getFamily",
            "location": 617,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_GeneralizedLinearRegressionParams.getLinkPredictionCol": {
            "name": "getLinkPredictionCol",
            "location": 618,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_GeneralizedLinearRegressionParams.getLink": {
            "name": "getLink",
            "location": 619,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_GeneralizedLinearRegressionParams.getVariancePower": {
            "name": "getVariancePower",
            "location": 620,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_GeneralizedLinearRegressionParams.getLinkPower": {
            "name": "getLinkPower",
            "location": 621,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_GeneralizedLinearRegressionParams.getOffsetCol": {
            "name": "getOffsetCol",
            "location": 622,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneralizedLinearRegression.__init__": {
            "name": "__init__",
            "location": 630,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneralizedLinearRegression.setParams": {
            "name": "setParams",
            "location": 650,
            "return": [
                "GeneralizedLinearRegression"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneralizedLinearRegression.setFamily": {
            "name": "setFamily",
            "location": 670,
            "return": [
                "GeneralizedLinearRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "GeneralizedLinearRegression.setLinkPredictionCol": {
            "name": "setLinkPredictionCol",
            "location": 671,
            "return": [
                "GeneralizedLinearRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "GeneralizedLinearRegression.setLink": {
            "name": "setLink",
            "location": 672,
            "return": [
                "GeneralizedLinearRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "GeneralizedLinearRegression.setVariancePower": {
            "name": "setVariancePower",
            "location": 673,
            "return": [
                "GeneralizedLinearRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "GeneralizedLinearRegression.setLinkPower": {
            "name": "setLinkPower",
            "location": 674,
            "return": [
                "GeneralizedLinearRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "GeneralizedLinearRegression.setOffsetCol": {
            "name": "setOffsetCol",
            "location": 675,
            "return": [
                "GeneralizedLinearRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "GeneralizedLinearRegression.setMaxIter": {
            "name": "setMaxIter",
            "location": 676,
            "return": [
                "GeneralizedLinearRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "GeneralizedLinearRegression.setRegParam": {
            "name": "setRegParam",
            "location": 677,
            "return": [
                "GeneralizedLinearRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "GeneralizedLinearRegression.setTol": {
            "name": "setTol",
            "location": 678,
            "return": [
                "GeneralizedLinearRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "GeneralizedLinearRegression.setFitIntercept": {
            "name": "setFitIntercept",
            "location": 679,
            "return": [
                "GeneralizedLinearRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "GeneralizedLinearRegression.setWeightCol": {
            "name": "setWeightCol",
            "location": 680,
            "return": [
                "GeneralizedLinearRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "GeneralizedLinearRegression.setSolver": {
            "name": "setSolver",
            "location": 681,
            "return": [
                "GeneralizedLinearRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "GeneralizedLinearRegression.setAggregationDepth": {
            "name": "setAggregationDepth",
            "location": 682,
            "return": [
                "GeneralizedLinearRegression"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "GeneralizedLinearRegressionModel.setLinkPredictionCol": {
            "name": "setLinkPredictionCol",
            "location": 691,
            "return": [
                "GeneralizedLinearRegressionModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "GeneralizedLinearRegressionModel.coefficients": {
            "name": "coefficients",
            "location": 693,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneralizedLinearRegressionModel.intercept": {
            "name": "intercept",
            "location": 695,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneralizedLinearRegressionModel.summary": {
            "name": "summary",
            "location": 697,
            "return": [
                "GeneralizedLinearRegressionTrainingSummary"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneralizedLinearRegressionModel.evaluate": {
            "name": "evaluate",
            "location": 698,
            "return": [
                "GeneralizedLinearRegressionSummary"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "DataFrame"
                ]
            }
        },
        "GeneralizedLinearRegressionSummary.predictions": {
            "name": "predictions",
            "location": 702,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneralizedLinearRegressionSummary.predictionCol": {
            "name": "predictionCol",
            "location": 704,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneralizedLinearRegressionSummary.rank": {
            "name": "rank",
            "location": 706,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneralizedLinearRegressionSummary.degreesOfFreedom": {
            "name": "degreesOfFreedom",
            "location": 708,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneralizedLinearRegressionSummary.residualDegreeOfFreedom": {
            "name": "residualDegreeOfFreedom",
            "location": 710,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneralizedLinearRegressionSummary.residualDegreeOfFreedomNull": {
            "name": "residualDegreeOfFreedomNull",
            "location": 712,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneralizedLinearRegressionSummary.residuals": {
            "name": "residuals",
            "location": 713,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "residualsType": [
                    "str"
                ]
            }
        },
        "GeneralizedLinearRegressionSummary.nullDeviance": {
            "name": "nullDeviance",
            "location": 715,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneralizedLinearRegressionSummary.deviance": {
            "name": "deviance",
            "location": 717,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneralizedLinearRegressionSummary.dispersion": {
            "name": "dispersion",
            "location": 719,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneralizedLinearRegressionSummary.aic": {
            "name": "aic",
            "location": 721,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneralizedLinearRegressionTrainingSummary.numIterations": {
            "name": "numIterations",
            "location": 725,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneralizedLinearRegressionTrainingSummary.solver": {
            "name": "solver",
            "location": 727,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneralizedLinearRegressionTrainingSummary.coefficientStandardErrors": {
            "name": "coefficientStandardErrors",
            "location": 729,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneralizedLinearRegressionTrainingSummary.tValues": {
            "name": "tValues",
            "location": 731,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneralizedLinearRegressionTrainingSummary.pValues": {
            "name": "pValues",
            "location": 733,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_FactorizationMachinesParams.__init__": {
            "name": "__init__",
            "location": 751,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_FactorizationMachinesParams.getFactorSize": {
            "name": "getFactorSize",
            "location": 752,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_FactorizationMachinesParams.getFitLinear": {
            "name": "getFitLinear",
            "location": 753,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_FactorizationMachinesParams.getMiniBatchFraction": {
            "name": "getMiniBatchFraction",
            "location": 754,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_FactorizationMachinesParams.getInitStd": {
            "name": "getInitStd",
            "location": 755,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FMRegressor.__init__": {
            "name": "__init__",
            "location": 768,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "featuresCol": [
                    "str"
                ],
                "labelCol": [
                    "str"
                ],
                "predictionCol": [
                    "str"
                ],
                "factorSize": [
                    "int"
                ],
                "fitIntercept": [
                    "bool"
                ],
                "fitLinear": [
                    "bool"
                ],
                "regParam": [
                    "float"
                ],
                "miniBatchFraction": [
                    "float"
                ],
                "initStd": [
                    "float"
                ],
                "maxIter": [
                    "int"
                ],
                "stepSize": [
                    "float"
                ],
                "tol": [
                    "float"
                ],
                "solver": [
                    "str"
                ],
                "seed": [
                    "Optional[int]"
                ]
            }
        },
        "FMRegressor.setParams": {
            "name": "setParams",
            "location": 785,
            "return": [
                "FMRegressor"
            ],
            "arguments": {
                "self": [],
                "featuresCol": [
                    "str"
                ],
                "labelCol": [
                    "str"
                ],
                "predictionCol": [
                    "str"
                ],
                "factorSize": [
                    "int"
                ],
                "fitIntercept": [
                    "bool"
                ],
                "fitLinear": [
                    "bool"
                ],
                "regParam": [
                    "float"
                ],
                "miniBatchFraction": [
                    "float"
                ],
                "initStd": [
                    "float"
                ],
                "maxIter": [
                    "int"
                ],
                "stepSize": [
                    "float"
                ],
                "tol": [
                    "float"
                ],
                "solver": [
                    "str"
                ],
                "seed": [
                    "Optional[int]"
                ]
            }
        },
        "FMRegressor.setFactorSize": {
            "name": "setFactorSize",
            "location": 802,
            "return": [
                "FMRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "FMRegressor.setFitLinear": {
            "name": "setFitLinear",
            "location": 803,
            "return": [
                "FMRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "FMRegressor.setMiniBatchFraction": {
            "name": "setMiniBatchFraction",
            "location": 804,
            "return": [
                "FMRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "FMRegressor.setInitStd": {
            "name": "setInitStd",
            "location": 805,
            "return": [
                "FMRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "FMRegressor.setMaxIter": {
            "name": "setMaxIter",
            "location": 806,
            "return": [
                "FMRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "FMRegressor.setStepSize": {
            "name": "setStepSize",
            "location": 807,
            "return": [
                "FMRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "FMRegressor.setTol": {
            "name": "setTol",
            "location": 808,
            "return": [
                "FMRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "FMRegressor.setSolver": {
            "name": "setSolver",
            "location": 809,
            "return": [
                "FMRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "FMRegressor.setSeed": {
            "name": "setSeed",
            "location": 810,
            "return": [
                "FMRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "FMRegressor.setFitIntercept": {
            "name": "setFitIntercept",
            "location": 811,
            "return": [
                "FMRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "FMRegressor.setRegParam": {
            "name": "setRegParam",
            "location": 812,
            "return": [
                "FMRegressor"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "FMRegressionModel.intercept": {
            "name": "intercept",
            "location": 821,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "FMRegressionModel.linear": {
            "name": "linear",
            "location": 823,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "FMRegressionModel.factors": {
            "name": "factors",
            "location": 825,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/ml/stat.py": {
        "ChiSquareTest.test": {
            "name": "test",
            "location": 30,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "dataset": [
                    "DataFrame"
                ],
                "featuresCol": [
                    "str"
                ],
                "labelCol": [
                    "str"
                ],
                "flatten": [
                    "bool"
                ]
            }
        },
        "Correlation.corr": {
            "name": "corr",
            "location": 36,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "dataset": [
                    "DataFrame"
                ],
                "column": [
                    "str"
                ],
                "method": [
                    "str"
                ]
            }
        },
        "KolmogorovSmirnovTest.test": {
            "name": "test",
            "location": 40,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "dataset": [
                    "DataFrame"
                ],
                "sampleCol": [
                    "str"
                ],
                "distName": [
                    "str"
                ]
            }
        },
        "Summarizer.mean": {
            "name": "mean",
            "location": 46,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "Column"
                ],
                "weightCol": [
                    "Optional[Column]"
                ]
            }
        },
        "Summarizer.sum": {
            "name": "sum",
            "location": 48,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "Column"
                ],
                "weightCol": [
                    "Optional[Column]"
                ]
            }
        },
        "Summarizer.variance": {
            "name": "variance",
            "location": 50,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "Column"
                ],
                "weightCol": [
                    "Optional[Column]"
                ]
            }
        },
        "Summarizer.std": {
            "name": "std",
            "location": 52,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "Column"
                ],
                "weightCol": [
                    "Optional[Column]"
                ]
            }
        },
        "Summarizer.count": {
            "name": "count",
            "location": 54,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "Column"
                ],
                "weightCol": [
                    "Optional[Column]"
                ]
            }
        },
        "Summarizer.numNonZeros": {
            "name": "numNonZeros",
            "location": 56,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "Column"
                ],
                "weightCol": [
                    "Optional[Column]"
                ]
            }
        },
        "Summarizer.max": {
            "name": "max",
            "location": 58,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "Column"
                ],
                "weightCol": [
                    "Optional[Column]"
                ]
            }
        },
        "Summarizer.min": {
            "name": "min",
            "location": 60,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "Column"
                ],
                "weightCol": [
                    "Optional[Column]"
                ]
            }
        },
        "Summarizer.normL1": {
            "name": "normL1",
            "location": 62,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "Column"
                ],
                "weightCol": [
                    "Optional[Column]"
                ]
            }
        },
        "Summarizer.normL2": {
            "name": "normL2",
            "location": 64,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "Column"
                ],
                "weightCol": [
                    "Optional[Column]"
                ]
            }
        },
        "Summarizer.metrics": {
            "name": "metrics",
            "location": 66,
            "return": [
                "SummaryBuilder"
            ],
            "arguments": {}
        },
        "SummaryBuilder.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jSummaryBuilder": [
                    "JavaObject"
                ]
            }
        },
        "SummaryBuilder.summary": {
            "name": "summary",
            "location": 70,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "featuresCol": [
                    "Column"
                ],
                "weightCol": [
                    "Optional[Column]"
                ]
            }
        },
        "MultivariateGaussian.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mean": [
                    "Vector"
                ],
                "cov": [
                    "Matrix"
                ]
            }
        },
        "ANOVATest.test": {
            "name": "test",
            "location": 81,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "dataset": [
                    "DataFrame"
                ],
                "featuresCol": [
                    "str"
                ],
                "labelCol": [
                    "str"
                ],
                "flatten": [
                    "bool"
                ]
            }
        },
        "FValueTest.test": {
            "name": "test",
            "location": 87,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "dataset": [
                    "DataFrame"
                ],
                "featuresCol": [
                    "str"
                ],
                "labelCol": [
                    "str"
                ],
                "flatten": [
                    "bool"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/ml/tree.py": {
        "_DecisionTreeModel.numNodes": {
            "name": "numNodes",
            "location": 40,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_DecisionTreeModel.depth": {
            "name": "depth",
            "location": 42,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_DecisionTreeModel.toDebugString": {
            "name": "toDebugString",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_DecisionTreeModel.predictLeaf": {
            "name": "predictLeaf",
            "location": 45,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Vector"
                ]
            }
        },
        "_DecisionTreeParams.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_DecisionTreeParams.setLeafCol": {
            "name": "setLeafCol",
            "location": 57,
            "return": [
                "P"
            ],
            "arguments": {
                "self": [
                    "P"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "_DecisionTreeParams.getLeafCol": {
            "name": "getLeafCol",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_DecisionTreeParams.getMaxDepth": {
            "name": "getMaxDepth",
            "location": 59,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_DecisionTreeParams.getMaxBins": {
            "name": "getMaxBins",
            "location": 60,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_DecisionTreeParams.getMinInstancesPerNode": {
            "name": "getMinInstancesPerNode",
            "location": 61,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_DecisionTreeParams.getMinInfoGain": {
            "name": "getMinInfoGain",
            "location": 62,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_DecisionTreeParams.getMaxMemoryInMB": {
            "name": "getMaxMemoryInMB",
            "location": 63,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_DecisionTreeParams.getCacheNodeIds": {
            "name": "getCacheNodeIds",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TreeEnsembleModel.trees": {
            "name": "trees",
            "location": 68,
            "return": [
                "Sequence[_DecisionTreeModel]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TreeEnsembleModel.getNumTrees": {
            "name": "getNumTrees",
            "location": 70,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TreeEnsembleModel.treeWeights": {
            "name": "treeWeights",
            "location": 72,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TreeEnsembleModel.totalNumNodes": {
            "name": "totalNumNodes",
            "location": 74,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TreeEnsembleModel.toDebugString": {
            "name": "toDebugString",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TreeEnsembleParams.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TreeEnsembleParams.getSubsamplingRate": {
            "name": "getSubsamplingRate",
            "location": 83,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TreeEnsembleParams.getFeatureSubsetStrategy": {
            "name": "getFeatureSubsetStrategy",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RandomForestParams.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RandomForestParams.getNumTrees": {
            "name": "getNumTrees",
            "location": 90,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RandomForestParams.getBootstrap": {
            "name": "getBootstrap",
            "location": 91,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_GBTParams.getValidationTol": {
            "name": "getValidationTol",
            "location": 98,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_HasVarianceImpurity.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_HasVarianceImpurity.getImpurity": {
            "name": "getImpurity",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TreeClassifierParams.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TreeClassifierParams.getImpurity": {
            "name": "getImpurity",
            "location": 110,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/ml/tuning.py": {
        "ParamGridBuilder.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParamGridBuilder.addGrid": {
            "name": "addGrid",
            "location": 31,
            "return": [
                "ParamGridBuilder"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "Param"
                ],
                "values": [
                    "List[Any]"
                ]
            }
        },
        "ParamGridBuilder.baseOn": {
            "name": "baseOn",
            "location": 35,
            "return": [
                "ParamGridBuilder"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParamGridBuilder.build": {
            "name": "build",
            "location": 36,
            "return": [
                "List[ParamMap]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ValidatorParams.getEstimator": {
            "name": "getEstimator",
            "location": 42,
            "return": [
                "Estimator"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ValidatorParams.getEstimatorParamMaps": {
            "name": "getEstimatorParamMaps",
            "location": 43,
            "return": [
                "List[ParamMap]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ValidatorParams.getEvaluator": {
            "name": "getEvaluator",
            "location": 44,
            "return": [
                "Evaluator"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CrossValidatorParams.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_CrossValidatorParams.getNumFolds": {
            "name": "getNumFolds",
            "location": 50,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CrossValidatorParams.getFoldCol": {
            "name": "getFoldCol",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CrossValidator.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CrossValidator.setParams": {
            "name": "setParams",
            "location": 73,
            "return": [
                "CrossValidator"
            ],
            "arguments": {
                "self": []
            }
        },
        "CrossValidator.setEstimator": {
            "name": "setEstimator",
            "location": 85,
            "return": [
                "CrossValidator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Estimator"
                ]
            }
        },
        "CrossValidator.setEstimatorParamMaps": {
            "name": "setEstimatorParamMaps",
            "location": 86,
            "return": [
                "CrossValidator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[ParamMap]"
                ]
            }
        },
        "CrossValidator.setEvaluator": {
            "name": "setEvaluator",
            "location": 87,
            "return": [
                "CrossValidator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Evaluator"
                ]
            }
        },
        "CrossValidator.setNumFolds": {
            "name": "setNumFolds",
            "location": 88,
            "return": [
                "CrossValidator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "CrossValidator.setFoldCol": {
            "name": "setFoldCol",
            "location": 89,
            "return": [
                "CrossValidator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "CrossValidator.setSeed": {
            "name": "setSeed",
            "location": 90,
            "return": [
                "CrossValidator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "CrossValidator.setParallelism": {
            "name": "setParallelism",
            "location": 91,
            "return": [
                "CrossValidator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "CrossValidator.setCollectSubModels": {
            "name": "setCollectSubModels",
            "location": 92,
            "return": [
                "CrossValidator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "CrossValidator.copy": {
            "name": "copy",
            "location": 93,
            "return": [
                "CrossValidator"
            ],
            "arguments": {
                "self": [],
                "extra": [
                    "Optional[ParamMap]"
                ]
            }
        },
        "CrossValidator.write": {
            "name": "write",
            "location": 94,
            "return": [
                "MLWriter"
            ],
            "arguments": {
                "self": []
            }
        },
        "CrossValidator.read": {
            "name": "read",
            "location": 96,
            "return": [
                "MLReader"
            ],
            "arguments": {
                "cls": [
                    "Type[CrossValidator]"
                ]
            }
        },
        "CrossValidatorModel.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bestModel": [
                    "Model"
                ],
                "avgMetrics": [
                    "List[float]"
                ],
                "subModels": [
                    "Optional[List[List[Model]]]"
                ]
            }
        },
        "CrossValidatorModel.copy": {
            "name": "copy",
            "location": 110,
            "return": [
                "CrossValidatorModel"
            ],
            "arguments": {
                "self": [],
                "extra": [
                    "Optional[ParamMap]"
                ]
            }
        },
        "CrossValidatorModel.write": {
            "name": "write",
            "location": 111,
            "return": [
                "MLWriter"
            ],
            "arguments": {
                "self": []
            }
        },
        "CrossValidatorModel.read": {
            "name": "read",
            "location": 113,
            "return": [
                "MLReader"
            ],
            "arguments": {
                "cls": [
                    "Type[CrossValidatorModel]"
                ]
            }
        },
        "_TrainValidationSplitParams.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_TrainValidationSplitParams.getTrainRatio": {
            "name": "getTrainRatio",
            "location": 118,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainValidationSplit.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainValidationSplit.setParams": {
            "name": "setParams",
            "location": 139,
            "return": [
                "TrainValidationSplit"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainValidationSplit.setEstimator": {
            "name": "setEstimator",
            "location": 150,
            "return": [
                "TrainValidationSplit"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Estimator"
                ]
            }
        },
        "TrainValidationSplit.setEstimatorParamMaps": {
            "name": "setEstimatorParamMaps",
            "location": 151,
            "return": [
                "TrainValidationSplit"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[ParamMap]"
                ]
            }
        },
        "TrainValidationSplit.setEvaluator": {
            "name": "setEvaluator",
            "location": 152,
            "return": [
                "TrainValidationSplit"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Evaluator"
                ]
            }
        },
        "TrainValidationSplit.setTrainRatio": {
            "name": "setTrainRatio",
            "location": 153,
            "return": [
                "TrainValidationSplit"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "TrainValidationSplit.setSeed": {
            "name": "setSeed",
            "location": 154,
            "return": [
                "TrainValidationSplit"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "TrainValidationSplit.setParallelism": {
            "name": "setParallelism",
            "location": 155,
            "return": [
                "TrainValidationSplit"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "TrainValidationSplit.setCollectSubModels": {
            "name": "setCollectSubModels",
            "location": 156,
            "return": [
                "TrainValidationSplit"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "TrainValidationSplit.copy": {
            "name": "copy",
            "location": 157,
            "return": [
                "TrainValidationSplit"
            ],
            "arguments": {
                "self": [],
                "extra": [
                    "Optional[ParamMap]"
                ]
            }
        },
        "TrainValidationSplit.write": {
            "name": "write",
            "location": 158,
            "return": [
                "MLWriter"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainValidationSplit.read": {
            "name": "read",
            "location": 160,
            "return": [
                "MLReader"
            ],
            "arguments": {
                "cls": [
                    "Type[TrainValidationSplit]"
                ]
            }
        },
        "TrainValidationSplitModel.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bestModel": [
                    "Model"
                ],
                "validationMetrics": [
                    "List[float]"
                ],
                "subModels": [
                    "Optional[List[Model]]"
                ]
            }
        },
        "TrainValidationSplitModel.setEstimator": {
            "name": "setEstimator",
            "location": 177,
            "return": [
                "TrainValidationSplitModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Estimator"
                ]
            }
        },
        "TrainValidationSplitModel.setEstimatorParamMaps": {
            "name": "setEstimatorParamMaps",
            "location": 178,
            "return": [
                "TrainValidationSplitModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[ParamMap]"
                ]
            }
        },
        "TrainValidationSplitModel.setEvaluator": {
            "name": "setEvaluator",
            "location": 181,
            "return": [
                "TrainValidationSplitModel"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Evaluator"
                ]
            }
        },
        "TrainValidationSplitModel.copy": {
            "name": "copy",
            "location": 182,
            "return": [
                "TrainValidationSplitModel"
            ],
            "arguments": {
                "self": [],
                "extra": [
                    "Optional[ParamMap]"
                ]
            }
        },
        "TrainValidationSplitModel.write": {
            "name": "write",
            "location": 183,
            "return": [
                "MLWriter"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainValidationSplitModel.read": {
            "name": "read",
            "location": 185,
            "return": [
                "MLReader"
            ],
            "arguments": {
                "cls": [
                    "Type[TrainValidationSplitModel]"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/ml/util.py": {
        "Identifiable.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseReadWrite.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseReadWrite.session": {
            "name": "session",
            "location": 35,
            "return": [
                "Union[(MLWriter, MLReader)]"
            ],
            "arguments": {
                "self": [],
                "sparkSession": [
                    "SparkSession"
                ]
            }
        },
        "BaseReadWrite.sparkSession": {
            "name": "sparkSession",
            "location": 37,
            "return": [
                "SparkSession"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseReadWrite.sc": {
            "name": "sc",
            "location": 39,
            "return": [
                "SparkContext"
            ],
            "arguments": {
                "self": []
            }
        },
        "MLWriter.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MLWriter.save": {
            "name": "save",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "MLWriter.saveImpl": {
            "name": "saveImpl",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "MLWriter.overwrite": {
            "name": "overwrite",
            "location": 46,
            "return": [
                "MLWriter"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneralMLWriter.format": {
            "name": "format",
            "location": 50,
            "return": [
                "MLWriter"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ]
            }
        },
        "JavaMLWriter.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "JavaMLWritable"
                ]
            }
        },
        "JavaMLWriter.save": {
            "name": "save",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "JavaMLWriter.overwrite": {
            "name": "overwrite",
            "location": 55,
            "return": [
                "JavaMLWriter"
            ],
            "arguments": {
                "self": []
            }
        },
        "JavaMLWriter.option": {
            "name": "option",
            "location": 56,
            "return": [
                "JavaMLWriter"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "JavaMLWriter.session": {
            "name": "session",
            "location": 57,
            "return": [
                "JavaMLWriter"
            ],
            "arguments": {
                "self": [],
                "sparkSession": [
                    "SparkSession"
                ]
            }
        },
        "GeneralJavaMLWriter.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "MLWritable"
                ]
            }
        },
        "GeneralJavaMLWriter.format": {
            "name": "format",
            "location": 61,
            "return": [
                "GeneralJavaMLWriter"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ]
            }
        },
        "MLWritable.write": {
            "name": "write",
            "location": 64,
            "return": [
                "MLWriter"
            ],
            "arguments": {
                "self": []
            }
        },
        "MLWritable.save": {
            "name": "save",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "JavaMLWritable.write": {
            "name": "write",
            "location": 68,
            "return": [
                "JavaMLWriter"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneralJavaMLWritable.write": {
            "name": "write",
            "location": 71,
            "return": [
                "GeneralJavaMLWriter"
            ],
            "arguments": {
                "self": []
            }
        },
        "MLReader.load": {
            "name": "load",
            "location": 74,
            "return": [
                "R"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "JavaMLReader.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "clazz": [
                    "Type[JavaMLReadable]"
                ]
            }
        },
        "JavaMLReader.load": {
            "name": "load",
            "location": 78,
            "return": [
                "R"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "JavaMLReader.session": {
            "name": "session",
            "location": 79,
            "return": [
                "JavaMLReader[R]"
            ],
            "arguments": {
                "self": [],
                "sparkSession": [
                    "SparkSession"
                ]
            }
        },
        "MLReadable.read": {
            "name": "read",
            "location": 83,
            "return": [
                "MLReader[R]"
            ],
            "arguments": {
                "cls": [
                    "Type[R]"
                ]
            }
        },
        "MLReadable.load": {
            "name": "load",
            "location": 85,
            "return": [
                "R"
            ],
            "arguments": {
                "cls": [
                    "Type[R]"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "JavaMLReadable.read": {
            "name": "read",
            "location": 89,
            "return": [
                "JavaMLReader[R]"
            ],
            "arguments": {
                "cls": [
                    "Type[R]"
                ]
            }
        },
        "DefaultParamsWritable.write": {
            "name": "write",
            "location": 92,
            "return": [
                "MLWriter"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultParamsWriter.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "DefaultParamsWritable"
                ]
            }
        },
        "DefaultParamsWriter.saveImpl": {
            "name": "saveImpl",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "DefaultParamsWriter.saveMetadata": {
            "name": "saveMetadata",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "DefaultParamsWritable"
                ],
                "path": [
                    "str"
                ],
                "sc": [
                    "SparkContext"
                ],
                "extraMetadata": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "paramMap": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "DefaultParamsReadable.read": {
            "name": "read",
            "location": 109,
            "return": [
                "MLReader[R]"
            ],
            "arguments": {
                "cls": [
                    "Type[R]"
                ]
            }
        },
        "DefaultParamsReader.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type[MLReadable]"
                ]
            }
        },
        "DefaultParamsReader.load": {
            "name": "load",
            "location": 114,
            "return": [
                "R"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "DefaultParamsReader.loadMetadata": {
            "name": "loadMetadata",
            "location": 116,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "sc": [
                    "SparkContext"
                ],
                "expectedClassName": [
                    "str"
                ]
            }
        },
        "DefaultParamsReader.getAndSetParams": {
            "name": "getAndSetParams",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "R"
                ],
                "metadata": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "DefaultParamsReader.loadParamsInstance": {
            "name": "loadParamsInstance",
            "location": 122,
            "return": [
                "R"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "sc": [
                    "SparkContext"
                ]
            }
        },
        "HasTrainingSummary.hasSummary": {
            "name": "hasSummary",
            "location": 126,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasTrainingSummary.summary": {
            "name": "summary",
            "location": 128,
            "return": [
                "S"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/ml/wrapper.py": {
        "JavaWrapper.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "java_obj": [
                    "Optional[Any]"
                ]
            }
        },
        "JavaWrapper.__del__": {
            "name": "__del__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JavaParams.copy": {
            "name": "copy",
            "location": 32,
            "return": [
                "P"
            ],
            "arguments": {
                "self": [
                    "P"
                ],
                "extra": [
                    "Optional[ParamMap]"
                ]
            }
        },
        "JavaParams.clear": {
            "name": "clear",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "Param"
                ]
            }
        },
        "JavaModel.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "java_model": [
                    "Optional[Any]"
                ]
            }
        },
        "JavaPredictionModel.numFeatures": {
            "name": "numFeatures",
            "location": 47,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "JavaPredictionModel.predict": {
            "name": "predict",
            "location": 48,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/ml/_typing.py": {},
    "pyspark-stubs-master/third_party/3/pyspark/ml/__init__.py": {},
    "pyspark-stubs-master/third_party/3/pyspark/ml/linalg/__init__.py": {
        "VectorUDT.sqlType": {
            "name": "sqlType",
            "location": 29,
            "return": [
                "StructType"
            ],
            "arguments": {
                "cls": []
            }
        },
        "VectorUDT.module": {
            "name": "module",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "VectorUDT.scalaUDT": {
            "name": "scalaUDT",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "VectorUDT.serialize": {
            "name": "serialize",
            "location": 34,
            "return": [
                "Tuple[(int, Optional[int], Optional[List[int]], List[float])]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Vector"
                ]
            }
        },
        "VectorUDT.deserialize": {
            "name": "deserialize",
            "location": 37,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": [],
                "datum": [
                    "Any"
                ]
            }
        },
        "VectorUDT.simpleString": {
            "name": "simpleString",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatrixUDT.sqlType": {
            "name": "sqlType",
            "location": 42,
            "return": [
                "StructType"
            ],
            "arguments": {
                "cls": []
            }
        },
        "MatrixUDT.module": {
            "name": "module",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "MatrixUDT.scalaUDT": {
            "name": "scalaUDT",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "MatrixUDT.serialize": {
            "name": "serialize",
            "location": 47,
            "return": [
                "Tuple[(int, int, int, Optional[List[int]], Optional[List[int]], List[float], bool)]"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "MatrixUDT.deserialize": {
            "name": "deserialize",
            "location": 52,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": [],
                "datum": [
                    "Any"
                ]
            }
        },
        "MatrixUDT.simpleString": {
            "name": "simpleString",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vector.toArray": {
            "name": "toArray",
            "location": 57,
            "return": [
                "ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "DenseVector.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "__arr": [
                    "Iterable[float]"
                ]
            }
        },
        "DenseVector.parse": {
            "name": "parse",
            "location": 68,
            "return": [
                "DenseVector"
            ],
            "arguments": {
                "s": []
            }
        },
        "DenseVector.__reduce__": {
            "name": "__reduce__",
            "location": 69,
            "return": [
                "Tuple[(type, bytes)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DenseVector.numNonzeros": {
            "name": "numNonzeros",
            "location": 70,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DenseVector.norm": {
            "name": "norm",
            "location": 71,
            "return": [
                "float64"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "Union[(float, str)]"
                ]
            }
        },
        "DenseVector.dot": {
            "name": "dot",
            "location": 72,
            "return": [
                "float64"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[float]"
                ]
            }
        },
        "DenseVector.squared_distance": {
            "name": "squared_distance",
            "location": 73,
            "return": [
                "float64"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[float]"
                ]
            }
        },
        "DenseVector.toArray": {
            "name": "toArray",
            "location": 74,
            "return": [
                "ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "DenseVector.values": {
            "name": "values",
            "location": 76,
            "return": [
                "ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "DenseVector.__getitem__": {
            "name": "__getitem__",
            "location": 77,
            "return": [
                "float64"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int"
                ]
            }
        },
        "DenseVector.__len__": {
            "name": "__len__",
            "location": 78,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DenseVector.__eq__": {
            "name": "__eq__",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "DenseVector.__ne__": {
            "name": "__ne__",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "DenseVector.__hash__": {
            "name": "__hash__",
            "location": 81,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DenseVector.__getattr__": {
            "name": "__getattr__",
            "location": 82,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        },
        "DenseVector.__neg__": {
            "name": "__neg__",
            "location": 83,
            "return": [
                "DenseVector"
            ],
            "arguments": {
                "self": []
            }
        },
        "DenseVector.__add__": {
            "name": "__add__",
            "location": 84,
            "return": [
                "DenseVector"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(float, Iterable[float])]"
                ]
            }
        },
        "DenseVector.__sub__": {
            "name": "__sub__",
            "location": 85,
            "return": [
                "DenseVector"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(float, Iterable[float])]"
                ]
            }
        },
        "DenseVector.__mul__": {
            "name": "__mul__",
            "location": 86,
            "return": [
                "DenseVector"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(float, Iterable[float])]"
                ]
            }
        },
        "DenseVector.__div__": {
            "name": "__div__",
            "location": 87,
            "return": [
                "DenseVector"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(float, Iterable[float])]"
                ]
            }
        },
        "DenseVector.__truediv__": {
            "name": "__truediv__",
            "location": 88,
            "return": [
                "DenseVector"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(float, Iterable[float])]"
                ]
            }
        },
        "DenseVector.__mod__": {
            "name": "__mod__",
            "location": 89,
            "return": [
                "DenseVector"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(float, Iterable[float])]"
                ]
            }
        },
        "DenseVector.__radd__": {
            "name": "__radd__",
            "location": 90,
            "return": [
                "DenseVector"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(float, Iterable[float])]"
                ]
            }
        },
        "DenseVector.__rsub__": {
            "name": "__rsub__",
            "location": 91,
            "return": [
                "DenseVector"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(float, Iterable[float])]"
                ]
            }
        },
        "DenseVector.__rmul__": {
            "name": "__rmul__",
            "location": 92,
            "return": [
                "DenseVector"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(float, Iterable[float])]"
                ]
            }
        },
        "DenseVector.__rdiv__": {
            "name": "__rdiv__",
            "location": 93,
            "return": [
                "DenseVector"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(float, Iterable[float])]"
                ]
            }
        },
        "DenseVector.__rtruediv__": {
            "name": "__rtruediv__",
            "location": 94,
            "return": [
                "DenseVector"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(float, Iterable[float])]"
                ]
            }
        },
        "DenseVector.__rmod__": {
            "name": "__rmod__",
            "location": 95,
            "return": [
                "DenseVector"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(float, Iterable[float])]"
                ]
            }
        },
        "SparseVector.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int"
                ],
                "__map": [
                    "Dict[(int, float)]"
                ]
            }
        },
        "SparseVector.numNonzeros": {
            "name": "numNonzeros",
            "location": 113,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparseVector.norm": {
            "name": "norm",
            "location": 114,
            "return": [
                "float64"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "Union[(float, str)]"
                ]
            }
        },
        "SparseVector.__reduce__": {
            "name": "__reduce__",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SparseVector.parse": {
            "name": "parse",
            "location": 117,
            "return": [
                "SparseVector"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "SparseVector.dot": {
            "name": "dot",
            "location": 118,
            "return": [
                "float64"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[float]"
                ]
            }
        },
        "SparseVector.squared_distance": {
            "name": "squared_distance",
            "location": 119,
            "return": [
                "float64"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[float]"
                ]
            }
        },
        "SparseVector.toArray": {
            "name": "toArray",
            "location": 120,
            "return": [
                "ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparseVector.__len__": {
            "name": "__len__",
            "location": 121,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparseVector.__eq__": {
            "name": "__eq__",
            "location": 122,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SparseVector.__getitem__": {
            "name": "__getitem__",
            "location": 123,
            "return": [
                "float64"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "SparseVector.__ne__": {
            "name": "__ne__",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SparseVector.__hash__": {
            "name": "__hash__",
            "location": 125,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vectors.sparse": {
            "name": "sparse",
            "location": 144,
            "return": [
                "SparseVector"
            ],
            "arguments": {
                "size": [
                    "int"
                ],
                "__map": [
                    "Dict[(int, float)]"
                ]
            }
        },
        "Vectors.dense": {
            "name": "dense",
            "location": 153,
            "return": [
                "DenseVector"
            ],
            "arguments": {
                "self": [],
                "__arr": [
                    "Iterable[float]"
                ]
            }
        },
        "Vectors.stringify": {
            "name": "stringify",
            "location": 155,
            "return": [
                "str"
            ],
            "arguments": {
                "vector": [
                    "Vector"
                ]
            }
        },
        "Vectors.squared_distance": {
            "name": "squared_distance",
            "location": 157,
            "return": [
                "float64"
            ],
            "arguments": {
                "v1": [
                    "Vector"
                ],
                "v2": [
                    "Vector"
                ]
            }
        },
        "Vectors.norm": {
            "name": "norm",
            "location": 159,
            "return": [
                "float64"
            ],
            "arguments": {
                "vector": [
                    "Vector"
                ],
                "p": [
                    "Union[(float, str)]"
                ]
            }
        },
        "Vectors.parse": {
            "name": "parse",
            "location": 161,
            "return": [
                "Vector"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "Vectors.zeros": {
            "name": "zeros",
            "location": 163,
            "return": [
                "DenseVector"
            ],
            "arguments": {
                "size": [
                    "int"
                ]
            }
        },
        "Matrix.__init__": {
            "name": "__init__",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numRows": [
                    "int"
                ],
                "numCols": [
                    "int"
                ],
                "isTransposed": [
                    "bool"
                ]
            }
        },
        "Matrix.toArray": {
            "name": "toArray",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DenseMatrix.__init__": {
            "name": "__init__",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numRows": [
                    "int"
                ],
                "numCols": [
                    "int"
                ],
                "values": [
                    "Iterable[float]"
                ],
                "isTransposed": [
                    "bool"
                ]
            }
        },
        "DenseMatrix.__reduce__": {
            "name": "__reduce__",
            "location": 189,
            "return": [
                "Tuple[(type, Tuple[(int, int, bytes, int)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DenseMatrix.toArray": {
            "name": "toArray",
            "location": 190,
            "return": [
                "ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "DenseMatrix.toSparse": {
            "name": "toSparse",
            "location": 191,
            "return": [
                "SparseMatrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "DenseMatrix.__getitem__": {
            "name": "__getitem__",
            "location": 192,
            "return": [
                "float64"
            ],
            "arguments": {
                "self": [],
                "indices": [
                    "Tuple[(int, int)]"
                ]
            }
        },
        "DenseMatrix.__eq__": {
            "name": "__eq__",
            "location": 193,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SparseMatrix.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numRows": [
                    "int"
                ],
                "numCols": [
                    "int"
                ],
                "colPtrs": [
                    "Iterable[int]"
                ],
                "rowIndices": [
                    "Iterable[int]"
                ],
                "values": [
                    "Iterable[float]"
                ],
                "isTransposed": [
                    "bool"
                ]
            }
        },
        "SparseMatrix.__reduce__": {
            "name": "__reduce__",
            "location": 219,
            "return": [
                "Tuple[(type, Tuple[(int, int, bytes, bytes, bytes, int)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparseMatrix.__getitem__": {
            "name": "__getitem__",
            "location": 220,
            "return": [
                "float64"
            ],
            "arguments": {
                "self": [],
                "indices": [
                    "Tuple[(int, int)]"
                ]
            }
        },
        "SparseMatrix.toArray": {
            "name": "toArray",
            "location": 221,
            "return": [
                "ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparseMatrix.toDense": {
            "name": "toDense",
            "location": 222,
            "return": [
                "DenseMatrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparseMatrix.__eq__": {
            "name": "__eq__",
            "location": 223,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrices.dense": {
            "name": "dense",
            "location": 233,
            "return": [
                "DenseMatrix"
            ],
            "arguments": {
                "numRows": [
                    "int"
                ],
                "numCols": [
                    "int"
                ],
                "values": [
                    "Iterable[float]"
                ],
                "isTransposed": [
                    "bool"
                ]
            }
        },
        "Matrices.sparse": {
            "name": "sparse",
            "location": 248,
            "return": [
                "SparseMatrix"
            ],
            "arguments": {
                "numRows": [
                    "int"
                ],
                "numCols": [
                    "int"
                ],
                "colPtrs": [
                    "Iterable[int]"
                ],
                "rowIndices": [
                    "Iterable[int]"
                ],
                "values": [
                    "Iterable[float]"
                ],
                "isTransposed": [
                    "bool"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/ml/param/shared.py": {
        "HasMaxIter.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasMaxIter.getMaxIter": {
            "name": "getMaxIter",
            "location": 27,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasRegParam.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasRegParam.getRegParam": {
            "name": "getRegParam",
            "location": 32,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasFeaturesCol.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasFeaturesCol.getFeaturesCol": {
            "name": "getFeaturesCol",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasLabelCol.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasLabelCol.getLabelCol": {
            "name": "getLabelCol",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasPredictionCol.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasPredictionCol.getPredictionCol": {
            "name": "getPredictionCol",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasProbabilityCol.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasProbabilityCol.getProbabilityCol": {
            "name": "getProbabilityCol",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasRawPredictionCol.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasRawPredictionCol.getRawPredictionCol": {
            "name": "getRawPredictionCol",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasInputCol.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasInputCol.getInputCol": {
            "name": "getInputCol",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasInputCols.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasInputCols.getInputCols": {
            "name": "getInputCols",
            "location": 67,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasOutputCol.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasOutputCol.getOutputCol": {
            "name": "getOutputCol",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasOutputCols.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasOutputCols.getOutputCols": {
            "name": "getOutputCols",
            "location": 77,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasNumFeatures.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasNumFeatures.getNumFeatures": {
            "name": "getNumFeatures",
            "location": 82,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasCheckpointInterval.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasCheckpointInterval.getCheckpointInterval": {
            "name": "getCheckpointInterval",
            "location": 87,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasSeed.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasSeed.getSeed": {
            "name": "getSeed",
            "location": 92,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasTol.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasTol.getTol": {
            "name": "getTol",
            "location": 97,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasRelativeError.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasRelativeError.getRelativeError": {
            "name": "getRelativeError",
            "location": 102,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasStepSize.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasStepSize.getStepSize": {
            "name": "getStepSize",
            "location": 107,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasHandleInvalid.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasHandleInvalid.getHandleInvalid": {
            "name": "getHandleInvalid",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasElasticNetParam.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasElasticNetParam.getElasticNetParam": {
            "name": "getElasticNetParam",
            "location": 117,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasFitIntercept.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasFitIntercept.getFitIntercept": {
            "name": "getFitIntercept",
            "location": 122,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasStandardization.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasStandardization.getStandardization": {
            "name": "getStandardization",
            "location": 127,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasThresholds.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasThresholds.getThresholds": {
            "name": "getThresholds",
            "location": 132,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasThreshold.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasThreshold.getThreshold": {
            "name": "getThreshold",
            "location": 137,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasWeightCol.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasWeightCol.getWeightCol": {
            "name": "getWeightCol",
            "location": 142,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasSolver.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasSolver.getSolver": {
            "name": "getSolver",
            "location": 147,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasVarianceCol.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasVarianceCol.getVarianceCol": {
            "name": "getVarianceCol",
            "location": 152,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasAggregationDepth.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasAggregationDepth.getAggregationDepth": {
            "name": "getAggregationDepth",
            "location": 157,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasParallelism.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasParallelism.getParallelism": {
            "name": "getParallelism",
            "location": 162,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasCollectSubModels.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasCollectSubModels.getCollectSubModels": {
            "name": "getCollectSubModels",
            "location": 167,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasLoss.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasLoss.getLoss": {
            "name": "getLoss",
            "location": 172,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasValidationIndicatorCol.__init__": {
            "name": "__init__",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasValidationIndicatorCol.getValidationIndicatorCol": {
            "name": "getValidationIndicatorCol",
            "location": 177,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasDistanceMeasure.__init__": {
            "name": "__init__",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasDistanceMeasure.getDistanceMeasure": {
            "name": "getDistanceMeasure",
            "location": 182,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasBlockSize.__init__": {
            "name": "__init__",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasBlockSize.getBlockSize": {
            "name": "getBlockSize",
            "location": 187,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/ml/param/_shared_params_code_gen.py": {},
    "pyspark-stubs-master/third_party/3/pyspark/ml/param/__init__.py": {
        "Param.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "pyspark.ml.util.Identifiable"
                ],
                "name": [
                    "str"
                ],
                "doc": [
                    "str"
                ],
                "typeConverter": [
                    "Optional[Callable[([Any], T)]]"
                ]
            }
        },
        "Param.__hash__": {
            "name": "__hash__",
            "location": 40,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Param.__eq__": {
            "name": "__eq__",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "TypeConverters.identity": {
            "name": "identity",
            "location": 45,
            "return": [
                "T"
            ],
            "arguments": {
                "value": [
                    "T"
                ]
            }
        },
        "TypeConverters.toList": {
            "name": "toList",
            "location": 47,
            "return": [
                "List"
            ],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "TypeConverters.toListFloat": {
            "name": "toListFloat",
            "location": 49,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "TypeConverters.toListInt": {
            "name": "toListInt",
            "location": 51,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "TypeConverters.toListString": {
            "name": "toListString",
            "location": 53,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "TypeConverters.toVector": {
            "name": "toVector",
            "location": 55,
            "return": [
                "DenseVector"
            ],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "TypeConverters.toMatrix": {
            "name": "toMatrix",
            "location": 57,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "TypeConverters.toFloat": {
            "name": "toFloat",
            "location": 59,
            "return": [
                "float"
            ],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "TypeConverters.toInt": {
            "name": "toInt",
            "location": 61,
            "return": [
                "int"
            ],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "TypeConverters.toString": {
            "name": "toString",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "TypeConverters.toBoolean": {
            "name": "toBoolean",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "Params.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Params.params": {
            "name": "params",
            "location": 70,
            "return": [
                "List[Param]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Params.explainParam": {
            "name": "explainParam",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "str"
                ]
            }
        },
        "Params.explainParams": {
            "name": "explainParams",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Params.getParam": {
            "name": "getParam",
            "location": 73,
            "return": [
                "Param"
            ],
            "arguments": {
                "self": [],
                "paramName": [
                    "str"
                ]
            }
        },
        "Params.isSet": {
            "name": "isSet",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "Param[Any]"
                ]
            }
        },
        "Params.hasDefault": {
            "name": "hasDefault",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "Param[Any]"
                ]
            }
        },
        "Params.isDefined": {
            "name": "isDefined",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "Param[Any]"
                ]
            }
        },
        "Params.hasParam": {
            "name": "hasParam",
            "location": 86,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "paramName": [
                    "str"
                ]
            }
        },
        "Params.getOrDefault": {
            "name": "getOrDefault",
            "location": 90,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "Param[T]"
                ]
            }
        },
        "Params.extractParamMap": {
            "name": "extractParamMap",
            "location": 91,
            "return": [
                "pyspark.ml._typing.ParamMap"
            ],
            "arguments": {
                "self": [],
                "extra": [
                    "Optional[pyspark.ml._typing.ParamMap]"
                ]
            }
        },
        "Params.copy": {
            "name": "copy",
            "location": 94,
            "return": [
                "Params"
            ],
            "arguments": {
                "self": [],
                "extra": [
                    "Optional[pyspark.ml._typing.ParamMap]"
                ]
            }
        },
        "Params.set": {
            "name": "set",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "Param"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "Params.clear": {
            "name": "clear",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "Param"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/mllib/classification.py": {
        "LinearClassificationModel.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "weights": [
                    "Vector"
                ],
                "intercept": [
                    "float"
                ]
            }
        },
        "LinearClassificationModel.setThreshold": {
            "name": "setThreshold",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "LinearClassificationModel.threshold": {
            "name": "threshold",
            "location": 36,
            "return": [
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearClassificationModel.clearThreshold": {
            "name": "clearThreshold",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearClassificationModel.predict": {
            "name": "predict",
            "location": 41,
            "return": [
                "RDD[Union[(int, float)]]"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "RDD[VectorLike]"
                ]
            }
        },
        "LogisticRegressionModel.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "weights": [
                    "Vector"
                ],
                "intercept": [
                    "float"
                ],
                "numFeatures": [
                    "int"
                ],
                "numClasses": [
                    "int"
                ]
            }
        },
        "LogisticRegressionModel.numFeatures": {
            "name": "numFeatures",
            "location": 48,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogisticRegressionModel.numClasses": {
            "name": "numClasses",
            "location": 50,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogisticRegressionModel.predict": {
            "name": "predict",
            "location": 54,
            "return": [
                "RDD[Union[(int, float)]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "RDD[VectorLike]"
                ]
            }
        },
        "LogisticRegressionModel.save": {
            "name": "save",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sc": [
                    "SparkContext"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "LogisticRegressionModel.load": {
            "name": "load",
            "location": 57,
            "return": [
                "LogisticRegressionModel"
            ],
            "arguments": {
                "cls": [],
                "sc": [
                    "SparkContext"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "LogisticRegressionWithSGD.train": {
            "name": "train",
            "location": 61,
            "return": [
                "LogisticRegressionModel"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "RDD[LabeledPoint]"
                ],
                "iterations": [
                    "int"
                ],
                "step": [
                    "float"
                ],
                "miniBatchFraction": [
                    "float"
                ],
                "initialWeights": [
                    "Optional[VectorLike]"
                ],
                "regParam": [
                    "float"
                ],
                "regType": [
                    "str"
                ],
                "intercept": [
                    "bool"
                ],
                "validateData": [
                    "bool"
                ],
                "convergenceTol": [
                    "float"
                ]
            }
        },
        "LogisticRegressionWithLBFGS.train": {
            "name": "train",
            "location": 77,
            "return": [
                "LogisticRegressionModel"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "RDD[LabeledPoint]"
                ],
                "iterations": [
                    "int"
                ],
                "initialWeights": [
                    "Optional[VectorLike]"
                ],
                "regParam": [
                    "float"
                ],
                "regType": [
                    "str"
                ],
                "intercept": [
                    "bool"
                ],
                "corrections": [
                    "int"
                ],
                "tolerance": [
                    "float"
                ],
                "validateData": [
                    "bool"
                ],
                "numClasses": [
                    "int"
                ]
            }
        },
        "SVMModel.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "weights": [
                    "Vector"
                ],
                "intercept": [
                    "float"
                ]
            }
        },
        "SVMModel.predict": {
            "name": "predict",
            "location": 96,
            "return": [
                "RDD[float64]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "RDD[VectorLike]"
                ]
            }
        },
        "SVMModel.save": {
            "name": "save",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sc": [
                    "SparkContext"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "SVMModel.load": {
            "name": "load",
            "location": 99,
            "return": [
                "SVMModel"
            ],
            "arguments": {
                "cls": [],
                "sc": [
                    "SparkContext"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "SVMWithSGD.train": {
            "name": "train",
            "location": 103,
            "return": [
                "SVMModel"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "RDD[LabeledPoint]"
                ],
                "iterations": [
                    "int"
                ],
                "step": [
                    "float"
                ],
                "regParam": [
                    "float"
                ],
                "miniBatchFraction": [
                    "float"
                ],
                "initialWeights": [
                    "Optional[VectorLike]"
                ],
                "regType": [
                    "str"
                ],
                "intercept": [
                    "bool"
                ],
                "validateData": [
                    "bool"
                ],
                "convergenceTol": [
                    "float"
                ]
            }
        },
        "NaiveBayesModel.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "labels": [],
                "pi": [],
                "theta": []
            }
        },
        "NaiveBayesModel.predict": {
            "name": "predict",
            "location": 125,
            "return": [
                "RDD[float64]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "RDD[VectorLike]"
                ]
            }
        },
        "NaiveBayesModel.save": {
            "name": "save",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sc": [
                    "SparkContext"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "NaiveBayesModel.load": {
            "name": "load",
            "location": 128,
            "return": [
                "NaiveBayesModel"
            ],
            "arguments": {
                "cls": [],
                "sc": [
                    "SparkContext"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "NaiveBayes.train": {
            "name": "train",
            "location": 132,
            "return": [
                "NaiveBayesModel"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "RDD[VectorLike]"
                ],
                "lambda_": [
                    "float"
                ]
            }
        },
        "StreamingLogisticRegressionWithSGD.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stepSize": [
                    "float"
                ],
                "numIterations": [
                    "int"
                ],
                "miniBatchFraction": [
                    "float"
                ],
                "regParam": [
                    "float"
                ],
                "convergenceTol": [
                    "float"
                ]
            }
        },
        "StreamingLogisticRegressionWithSGD.setInitialWeights": {
            "name": "setInitialWeights",
            "location": 148,
            "return": [
                "StreamingLogisticRegressionWithSGD"
            ],
            "arguments": {
                "self": [],
                "initialWeights": [
                    "VectorLike"
                ]
            }
        },
        "StreamingLogisticRegressionWithSGD.trainOn": {
            "name": "trainOn",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dstream": [
                    "DStream[LabeledPoint]"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/mllib/clustering.py": {
        "BisectingKMeansModel.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "java_model": [
                    "JavaObject"
                ]
            }
        },
        "BisectingKMeansModel.clusterCenters": {
            "name": "clusterCenters",
            "location": 41,
            "return": [
                "List[ndarray]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BisectingKMeansModel.k": {
            "name": "k",
            "location": 43,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BisectingKMeansModel.predict": {
            "name": "predict",
            "location": 47,
            "return": [
                "RDD[int]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "RDD[VectorLike]"
                ]
            }
        },
        "BisectingKMeansModel.computeCost": {
            "name": "computeCost",
            "location": 51,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "RDD[VectorLike]"
                ]
            }
        },
        "BisectingKMeans.train": {
            "name": "train",
            "location": 55,
            "return": [
                "BisectingKMeansModel"
            ],
            "arguments": {
                "self": [],
                "rdd": [
                    "RDD[VectorLike]"
                ],
                "k": [
                    "int"
                ],
                "maxIterations": [
                    "int"
                ],
                "minDivisibleClusterSize": [
                    "float"
                ],
                "seed": [
                    "int"
                ]
            }
        },
        "KMeansModel.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "centers": [
                    "List[ndarray]"
                ]
            }
        },
        "KMeansModel.clusterCenters": {
            "name": "clusterCenters",
            "location": 68,
            "return": [
                "List[ndarray]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KMeansModel.k": {
            "name": "k",
            "location": 70,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "KMeansModel.predict": {
            "name": "predict",
            "location": 74,
            "return": [
                "RDD[int]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "RDD[VectorLike]"
                ]
            }
        },
        "KMeansModel.computeCost": {
            "name": "computeCost",
            "location": 75,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "rdd": [
                    "RDD[VectorLike]"
                ]
            }
        },
        "KMeansModel.save": {
            "name": "save",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sc": [
                    "SparkContext"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "KMeansModel.load": {
            "name": "load",
            "location": 78,
            "return": [
                "KMeansModel"
            ],
            "arguments": {
                "cls": [],
                "sc": [
                    "SparkContext"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "KMeans.train": {
            "name": "train",
            "location": 82,
            "return": [
                "KMeansModel"
            ],
            "arguments": {
                "cls": [],
                "rdd": [
                    "RDD[VectorLike]"
                ],
                "k": [
                    "int"
                ],
                "maxIterations": [
                    "int"
                ],
                "initializationMode": [
                    "str"
                ],
                "seed": [
                    "Optional[int]"
                ],
                "initializationSteps": [
                    "int"
                ],
                "epsilon": [
                    "float"
                ],
                "initialModel": [
                    "Optional[KMeansModel]"
                ]
            }
        },
        "GaussianMixtureModel.weights": {
            "name": "weights",
            "location": 98,
            "return": [
                "ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "GaussianMixtureModel.gaussians": {
            "name": "gaussians",
            "location": 100,
            "return": [
                "List[MultivariateGaussian]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GaussianMixtureModel.k": {
            "name": "k",
            "location": 102,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GaussianMixtureModel.predict": {
            "name": "predict",
            "location": 106,
            "return": [
                "RDD[int]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "RDD[VectorLike]"
                ]
            }
        },
        "GaussianMixtureModel.predictSoft": {
            "name": "predictSoft",
            "location": 110,
            "return": [
                "RDD[array.array]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "RDD[VectorLike]"
                ]
            }
        },
        "GaussianMixtureModel.load": {
            "name": "load",
            "location": 112,
            "return": [
                "GaussianMixtureModel"
            ],
            "arguments": {
                "cls": [],
                "sc": [
                    "SparkContext"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "GaussianMixture.train": {
            "name": "train",
            "location": 116,
            "return": [
                "GaussianMixtureModel"
            ],
            "arguments": {
                "cls": [],
                "rdd": [
                    "RDD[VectorLike]"
                ],
                "k": [
                    "int"
                ],
                "convergenceTol": [
                    "float"
                ],
                "maxIterations": [
                    "int"
                ],
                "seed": [
                    "Optional[int]"
                ],
                "initialModel": [
                    "Optional[GaussianMixtureModel]"
                ]
            }
        },
        "PowerIterationClusteringModel.k": {
            "name": "k",
            "location": 130,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PowerIterationClusteringModel.assignments": {
            "name": "assignments",
            "location": 131,
            "return": [
                "RDD[PowerIterationClustering.Assignment]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PowerIterationClusteringModel.load": {
            "name": "load",
            "location": 133,
            "return": [
                "PowerIterationClusteringModel"
            ],
            "arguments": {
                "cls": [],
                "sc": [
                    "SparkContext"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "PowerIterationClustering.train": {
            "name": "train",
            "location": 137,
            "return": [
                "PowerIterationClusteringModel"
            ],
            "arguments": {
                "cls": [],
                "rdd": [
                    "RDD[Tuple[(int, int, float)]]"
                ],
                "k": [
                    "int"
                ],
                "maxIterations": [
                    "int"
                ],
                "initMode": [
                    "str"
                ]
            }
        },
        "StreamingKMeansModel.__init__": {
            "name": "__init__",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "clusterCenters": [],
                "clusterWeights": []
            }
        },
        "StreamingKMeansModel.clusterWeights": {
            "name": "clusterWeights",
            "location": 149,
            "return": [
                "List[float64]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamingKMeansModel.update": {
            "name": "update",
            "location": 151,
            "return": [
                "StreamingKMeansModel"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "RDD[VectorLike]"
                ],
                "decayFactor": [
                    "float"
                ],
                "timeUnit": [
                    "str"
                ]
            }
        },
        "StreamingKMeans.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int"
                ],
                "decayFactor": [
                    "float"
                ],
                "timeUnit": [
                    "str"
                ]
            }
        },
        "StreamingKMeans.latestModel": {
            "name": "latestModel",
            "location": 159,
            "return": [
                "StreamingKMeansModel"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamingKMeans.setK": {
            "name": "setK",
            "location": 160,
            "return": [
                "StreamingKMeans"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int"
                ]
            }
        },
        "StreamingKMeans.setDecayFactor": {
            "name": "setDecayFactor",
            "location": 161,
            "return": [
                "StreamingKMeans"
            ],
            "arguments": {
                "self": [],
                "decayFactor": [
                    "float"
                ]
            }
        },
        "StreamingKMeans.setHalfLife": {
            "name": "setHalfLife",
            "location": 162,
            "return": [
                "StreamingKMeans"
            ],
            "arguments": {
                "self": [],
                "halfLife": [
                    "float"
                ],
                "timeUnit": [
                    "str"
                ]
            }
        },
        "StreamingKMeans.setInitialCenters": {
            "name": "setInitialCenters",
            "location": 163,
            "return": [
                "StreamingKMeans"
            ],
            "arguments": {
                "self": [],
                "centers": [
                    "List[VectorLike]"
                ],
                "weights": [
                    "List[float]"
                ]
            }
        },
        "StreamingKMeans.setRandomCenters": {
            "name": "setRandomCenters",
            "location": 166,
            "return": [
                "StreamingKMeans"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "int"
                ],
                "weight": [
                    "float"
                ],
                "seed": [
                    "int"
                ]
            }
        },
        "StreamingKMeans.trainOn": {
            "name": "trainOn",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dstream": [
                    "DStream[VectorLike]"
                ]
            }
        },
        "StreamingKMeans.predictOn": {
            "name": "predictOn",
            "location": 170,
            "return": [
                "DStream[int]"
            ],
            "arguments": {
                "self": [],
                "dstream": [
                    "DStream[VectorLike]"
                ]
            }
        },
        "StreamingKMeans.predictOnValues": {
            "name": "predictOnValues",
            "location": 171,
            "return": [
                "DStream[Tuple[(T, int)]]"
            ],
            "arguments": {
                "self": [],
                "dstream": [
                    "DStream[Tuple[(T, VectorLike)]]"
                ]
            }
        },
        "LDAModel.topicsMatrix": {
            "name": "topicsMatrix",
            "location": 176,
            "return": [
                "ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAModel.vocabSize": {
            "name": "vocabSize",
            "location": 177,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAModel.describeTopics": {
            "name": "describeTopics",
            "location": 178,
            "return": [
                "List[Tuple[(List[int], List[float])]]"
            ],
            "arguments": {
                "self": [],
                "maxTermsPerTopic": [
                    "Optional[int]"
                ]
            }
        },
        "LDAModel.load": {
            "name": "load",
            "location": 182,
            "return": [
                "LDAModel"
            ],
            "arguments": {
                "cls": [],
                "sc": [
                    "SparkContext"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "LDA.train": {
            "name": "train",
            "location": 186,
            "return": [
                "LDAModel"
            ],
            "arguments": {
                "cls": [],
                "rdd": [
                    "RDD[Tuple[(int, VectorLike)]]"
                ],
                "k": [
                    "int"
                ],
                "maxIterations": [
                    "int"
                ],
                "docConcentration": [
                    "float"
                ],
                "topicConcentration": [
                    "float"
                ],
                "seed": [
                    "Optional[int]"
                ],
                "checkpointInterval": [
                    "int"
                ],
                "optimizer": [
                    "str"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/mllib/common.py": {
        "callJavaFunc": {
            "name": "callJavaFunc",
            "location": 19,
            "return": [],
            "arguments": {
                "sc": [],
                "func": []
            }
        },
        "callMLlibFunc": {
            "name": "callMLlibFunc",
            "location": 20,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "inherit_doc": {
            "name": "inherit_doc",
            "location": 27,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "JavaModelWrapper.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "java_model": []
            }
        },
        "JavaModelWrapper.__del__": {
            "name": "__del__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JavaModelWrapper.call": {
            "name": "call",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/mllib/evaluation.py": {
        "BinaryClassificationMetrics.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scoreAndLabels": [
                    "RDD[Tuple[(float, float)]]"
                ]
            }
        },
        "BinaryClassificationMetrics.areaUnderROC": {
            "name": "areaUnderROC",
            "location": 29,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryClassificationMetrics.areaUnderPR": {
            "name": "areaUnderPR",
            "location": 31,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryClassificationMetrics.unpersist": {
            "name": "unpersist",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegressionMetrics.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "predictionAndObservations": [
                    "RDD[Tuple[(float, float)]]"
                ]
            }
        },
        "RegressionMetrics.explainedVariance": {
            "name": "explainedVariance",
            "location": 37,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegressionMetrics.meanAbsoluteError": {
            "name": "meanAbsoluteError",
            "location": 39,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegressionMetrics.meanSquaredError": {
            "name": "meanSquaredError",
            "location": 41,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegressionMetrics.rootMeanSquaredError": {
            "name": "rootMeanSquaredError",
            "location": 43,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegressionMetrics.r2": {
            "name": "r2",
            "location": 45,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MulticlassMetrics.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "predictionAndLabels": [
                    "RDD[Tuple[(float, float)]]"
                ]
            }
        },
        "MulticlassMetrics.confusionMatrix": {
            "name": "confusionMatrix",
            "location": 49,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "MulticlassMetrics.truePositiveRate": {
            "name": "truePositiveRate",
            "location": 50,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "float"
                ]
            }
        },
        "MulticlassMetrics.falsePositiveRate": {
            "name": "falsePositiveRate",
            "location": 51,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "float"
                ]
            }
        },
        "MulticlassMetrics.precision": {
            "name": "precision",
            "location": 52,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "float"
                ]
            }
        },
        "MulticlassMetrics.recall": {
            "name": "recall",
            "location": 53,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "float"
                ]
            }
        },
        "MulticlassMetrics.fMeasure": {
            "name": "fMeasure",
            "location": 54,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "float"
                ],
                "beta": [
                    "Optional[float]"
                ]
            }
        },
        "MulticlassMetrics.accuracy": {
            "name": "accuracy",
            "location": 56,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MulticlassMetrics.weightedTruePositiveRate": {
            "name": "weightedTruePositiveRate",
            "location": 58,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MulticlassMetrics.weightedFalsePositiveRate": {
            "name": "weightedFalsePositiveRate",
            "location": 60,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MulticlassMetrics.weightedRecall": {
            "name": "weightedRecall",
            "location": 62,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MulticlassMetrics.weightedPrecision": {
            "name": "weightedPrecision",
            "location": 64,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MulticlassMetrics.weightedFMeasure": {
            "name": "weightedFMeasure",
            "location": 65,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "beta": [
                    "Optional[float]"
                ]
            }
        },
        "RankingMetrics.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "predictionAndLabels": [
                    "RDD[Tuple[(List[T], List[T])]]"
                ]
            }
        },
        "RankingMetrics.precisionAt": {
            "name": "precisionAt",
            "location": 69,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int"
                ]
            }
        },
        "RankingMetrics.meanAveragePrecision": {
            "name": "meanAveragePrecision",
            "location": 71,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "RankingMetrics.meanAveragePrecisionAt": {
            "name": "meanAveragePrecisionAt",
            "location": 72,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int"
                ]
            }
        },
        "RankingMetrics.ndcgAt": {
            "name": "ndcgAt",
            "location": 73,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int"
                ]
            }
        },
        "RankingMetrics.recallAt": {
            "name": "recallAt",
            "location": 74,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int"
                ]
            }
        },
        "MultilabelMetrics.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "predictionAndLabels": [
                    "RDD[Tuple[(List[float], List[float])]]"
                ]
            }
        },
        "MultilabelMetrics.precision": {
            "name": "precision",
            "location": 80,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "Optional[float]"
                ]
            }
        },
        "MultilabelMetrics.recall": {
            "name": "recall",
            "location": 81,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "Optional[float]"
                ]
            }
        },
        "MultilabelMetrics.f1Measure": {
            "name": "f1Measure",
            "location": 82,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "Optional[float]"
                ]
            }
        },
        "MultilabelMetrics.microPrecision": {
            "name": "microPrecision",
            "location": 84,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultilabelMetrics.microRecall": {
            "name": "microRecall",
            "location": 86,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultilabelMetrics.microF1Measure": {
            "name": "microF1Measure",
            "location": 88,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultilabelMetrics.hammingLoss": {
            "name": "hammingLoss",
            "location": 90,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultilabelMetrics.subsetAccuracy": {
            "name": "subsetAccuracy",
            "location": 92,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultilabelMetrics.accuracy": {
            "name": "accuracy",
            "location": 94,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/mllib/feature.py": {
        "VectorTransformer.transform": {
            "name": "transform",
            "location": 36,
            "return": [
                "RDD[Vector]"
            ],
            "arguments": {
                "self": [],
                "vector": [
                    "RDD[VectorLike]"
                ]
            }
        },
        "Normalizer.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "float"
                ]
            }
        },
        "Normalizer.transform": {
            "name": "transform",
            "location": 44,
            "return": [
                "RDD[Vector]"
            ],
            "arguments": {
                "self": [],
                "vector": [
                    "RDD[VectorLike]"
                ]
            }
        },
        "JavaVectorTransformer.transform": {
            "name": "transform",
            "location": 50,
            "return": [
                "RDD[Vector]"
            ],
            "arguments": {
                "self": [],
                "vector": [
                    "RDD[VectorLike]"
                ]
            }
        },
        "StandardScalerModel.transform": {
            "name": "transform",
            "location": 56,
            "return": [
                "RDD[Vector]"
            ],
            "arguments": {
                "self": [],
                "vector": [
                    "RDD[VectorLike]"
                ]
            }
        },
        "StandardScalerModel.setWithMean": {
            "name": "setWithMean",
            "location": 57,
            "return": [
                "StandardScalerModel"
            ],
            "arguments": {
                "self": [],
                "withMean": [
                    "bool"
                ]
            }
        },
        "StandardScalerModel.setWithStd": {
            "name": "setWithStd",
            "location": 58,
            "return": [
                "StandardScalerModel"
            ],
            "arguments": {
                "self": [],
                "withStd": [
                    "bool"
                ]
            }
        },
        "StandardScalerModel.withStd": {
            "name": "withStd",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StandardScalerModel.withMean": {
            "name": "withMean",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StandardScalerModel.std": {
            "name": "std",
            "location": 64,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "StandardScalerModel.mean": {
            "name": "mean",
            "location": 66,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "StandardScaler.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "withMean": [
                    "bool"
                ],
                "withStd": [
                    "bool"
                ]
            }
        },
        "StandardScaler.fit": {
            "name": "fit",
            "location": 72,
            "return": [
                "StandardScalerModel"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "RDD[VectorLike]"
                ]
            }
        },
        "ChiSqSelectorModel.transform": {
            "name": "transform",
            "location": 78,
            "return": [
                "RDD[Vector]"
            ],
            "arguments": {
                "self": [],
                "vector": [
                    "RDD[VectorLike]"
                ]
            }
        },
        "ChiSqSelector.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numTopFeatures": [
                    "int"
                ],
                "selectorType": [
                    "str"
                ],
                "percentile": [
                    "float"
                ],
                "fpr": [
                    "float"
                ],
                "fdr": [
                    "float"
                ],
                "fwe": [
                    "float"
                ]
            }
        },
        "ChiSqSelector.setNumTopFeatures": {
            "name": "setNumTopFeatures",
            "location": 96,
            "return": [
                "ChiSqSelector"
            ],
            "arguments": {
                "self": [],
                "numTopFeatures": [
                    "int"
                ]
            }
        },
        "ChiSqSelector.setPercentile": {
            "name": "setPercentile",
            "location": 97,
            "return": [
                "ChiSqSelector"
            ],
            "arguments": {
                "self": [],
                "percentile": [
                    "float"
                ]
            }
        },
        "ChiSqSelector.setFpr": {
            "name": "setFpr",
            "location": 98,
            "return": [
                "ChiSqSelector"
            ],
            "arguments": {
                "self": [],
                "fpr": [
                    "float"
                ]
            }
        },
        "ChiSqSelector.setFdr": {
            "name": "setFdr",
            "location": 99,
            "return": [
                "ChiSqSelector"
            ],
            "arguments": {
                "self": [],
                "fdr": [
                    "float"
                ]
            }
        },
        "ChiSqSelector.setFwe": {
            "name": "setFwe",
            "location": 100,
            "return": [
                "ChiSqSelector"
            ],
            "arguments": {
                "self": [],
                "fwe": [
                    "float"
                ]
            }
        },
        "ChiSqSelector.setSelectorType": {
            "name": "setSelectorType",
            "location": 101,
            "return": [
                "ChiSqSelector"
            ],
            "arguments": {
                "self": [],
                "selectorType": [
                    "str"
                ]
            }
        },
        "ChiSqSelector.fit": {
            "name": "fit",
            "location": 102,
            "return": [
                "ChiSqSelectorModel"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "RDD[LabeledPoint]"
                ]
            }
        },
        "PCA.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int"
                ]
            }
        },
        "PCA.fit": {
            "name": "fit",
            "location": 109,
            "return": [
                "PCAModel"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "RDD[VectorLike]"
                ]
            }
        },
        "HashingTF.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numFeatures": [
                    "int"
                ]
            }
        },
        "HashingTF.setBinary": {
            "name": "setBinary",
            "location": 115,
            "return": [
                "HashingTF"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "HashingTF.indexOf": {
            "name": "indexOf",
            "location": 116,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "term": [
                    "Hashable"
                ]
            }
        },
        "HashingTF.transform": {
            "name": "transform",
            "location": 120,
            "return": [
                "RDD[Vector]"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "RDD[Iterable[Hashable]]"
                ]
            }
        },
        "IDFModel.transform": {
            "name": "transform",
            "location": 126,
            "return": [
                "RDD[Vector]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "RDD[VectorLike]"
                ]
            }
        },
        "IDFModel.idf": {
            "name": "idf",
            "location": 127,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "IDFModel.docFreq": {
            "name": "docFreq",
            "location": 128,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IDFModel.numDocs": {
            "name": "numDocs",
            "location": 129,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IDF.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "minDocFreq": [
                    "int"
                ]
            }
        },
        "IDF.fit": {
            "name": "fit",
            "location": 134,
            "return": [
                "IDFModel"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "RDD[VectorLike]"
                ]
            }
        },
        "Word2VecModel.transform": {
            "name": "transform",
            "location": 137,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str"
                ]
            }
        },
        "Word2VecModel.findSynonyms": {
            "name": "findSynonyms",
            "location": 138,
            "return": [
                "Iterable[Tuple[(str, float)]]"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str"
                ],
                "num": [
                    "int"
                ]
            }
        },
        "Word2VecModel.getVectors": {
            "name": "getVectors",
            "location": 139,
            "return": [
                "JavaMap"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word2VecModel.load": {
            "name": "load",
            "location": 141,
            "return": [
                "Word2VecModel"
            ],
            "arguments": {
                "cls": [],
                "sc": [
                    "SparkContext"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "Word2Vec.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word2Vec.setVectorSize": {
            "name": "setVectorSize",
            "location": 152,
            "return": [
                "Word2Vec"
            ],
            "arguments": {
                "self": [],
                "vectorSize": [
                    "int"
                ]
            }
        },
        "Word2Vec.setLearningRate": {
            "name": "setLearningRate",
            "location": 153,
            "return": [
                "Word2Vec"
            ],
            "arguments": {
                "self": [],
                "learningRate": [
                    "float"
                ]
            }
        },
        "Word2Vec.setNumPartitions": {
            "name": "setNumPartitions",
            "location": 154,
            "return": [
                "Word2Vec"
            ],
            "arguments": {
                "self": [],
                "numPartitions": [
                    "int"
                ]
            }
        },
        "Word2Vec.setNumIterations": {
            "name": "setNumIterations",
            "location": 155,
            "return": [
                "Word2Vec"
            ],
            "arguments": {
                "self": [],
                "numIterations": [
                    "int"
                ]
            }
        },
        "Word2Vec.setSeed": {
            "name": "setSeed",
            "location": 156,
            "return": [
                "Word2Vec"
            ],
            "arguments": {
                "self": [],
                "seed": [
                    "int"
                ]
            }
        },
        "Word2Vec.setMinCount": {
            "name": "setMinCount",
            "location": 157,
            "return": [
                "Word2Vec"
            ],
            "arguments": {
                "self": [],
                "minCount": [
                    "int"
                ]
            }
        },
        "Word2Vec.setWindowSize": {
            "name": "setWindowSize",
            "location": 158,
            "return": [
                "Word2Vec"
            ],
            "arguments": {
                "self": [],
                "windowSize": [
                    "int"
                ]
            }
        },
        "Word2Vec.fit": {
            "name": "fit",
            "location": 159,
            "return": [
                "Word2VecModel"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "RDD[List[str]]"
                ]
            }
        },
        "ElementwiseProduct.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scalingVector": [
                    "Vector"
                ]
            }
        },
        "ElementwiseProduct.transform": {
            "name": "transform",
            "location": 167,
            "return": [
                "RDD[Vector]"
            ],
            "arguments": {
                "self": [],
                "vector": [
                    "RDD[VectorLike]"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/mllib/fpm.py": {
        "FPGrowthModel.freqItemsets": {
            "name": "freqItemsets",
            "location": 30,
            "return": [
                "RDD[FPGrowth.FreqItemset[T]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FPGrowthModel.load": {
            "name": "load",
            "location": 32,
            "return": [
                "FPGrowthModel"
            ],
            "arguments": {
                "cls": [],
                "sc": [
                    "SparkContext"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "FPGrowth.train": {
            "name": "train",
            "location": 36,
            "return": [
                "FPGrowthModel[T]"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "RDD[List[T]]"
                ],
                "minSupport": [
                    "float"
                ],
                "numPartitions": [
                    "int"
                ]
            }
        },
        "PrefixSpanModel.freqSequences": {
            "name": "freqSequences",
            "location": 44,
            "return": [
                "RDD[PrefixSpan.FreqSequence[T]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrefixSpan.train": {
            "name": "train",
            "location": 48,
            "return": [
                "PrefixSpanModel[T]"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "RDD[List[List[T]]]"
                ],
                "minSupport": [
                    "float"
                ],
                "maxPatternLength": [
                    "int"
                ],
                "maxLocalProjDBSize": [
                    "int"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/mllib/random.py": {
        "RandomRDDs.uniformRDD": {
            "name": "uniformRDD",
            "location": 26,
            "return": [
                "RDD[float]"
            ],
            "arguments": {
                "sc": [
                    "SparkContext"
                ],
                "size": [
                    "int"
                ],
                "numPartitions": [
                    "Optional[int]"
                ],
                "seed": [
                    "Optional[int]"
                ]
            }
        },
        "RandomRDDs.normalRDD": {
            "name": "normalRDD",
            "location": 33,
            "return": [
                "RDD[float]"
            ],
            "arguments": {
                "sc": [
                    "SparkContext"
                ],
                "size": [
                    "int"
                ],
                "numPartitions": [
                    "Optional[int]"
                ],
                "seed": [
                    "Optional[int]"
                ]
            }
        },
        "RandomRDDs.logNormalRDD": {
            "name": "logNormalRDD",
            "location": 40,
            "return": [
                "RDD[float]"
            ],
            "arguments": {
                "sc": [
                    "SparkContext"
                ],
                "mean": [
                    "float"
                ],
                "std": [
                    "float"
                ],
                "size": [
                    "int"
                ],
                "numPartitions": [
                    "Optional[int]"
                ],
                "seed": [
                    "Optional[int]"
                ]
            }
        },
        "RandomRDDs.poissonRDD": {
            "name": "poissonRDD",
            "location": 49,
            "return": [
                "RDD[float]"
            ],
            "arguments": {
                "sc": [
                    "SparkContext"
                ],
                "mean": [
                    "float"
                ],
                "size": [
                    "int"
                ],
                "numPartitions": [
                    "Optional[int]"
                ],
                "seed": [
                    "Optional[int]"
                ]
            }
        },
        "RandomRDDs.exponentialRDD": {
            "name": "exponentialRDD",
            "location": 57,
            "return": [
                "RDD[float]"
            ],
            "arguments": {
                "sc": [
                    "SparkContext"
                ],
                "mean": [
                    "float"
                ],
                "size": [
                    "int"
                ],
                "numPartitions": [
                    "Optional[int]"
                ],
                "seed": [
                    "Optional[int]"
                ]
            }
        },
        "RandomRDDs.gammaRDD": {
            "name": "gammaRDD",
            "location": 65,
            "return": [
                "RDD[float]"
            ],
            "arguments": {
                "sc": [
                    "SparkContext"
                ],
                "shape": [
                    "float"
                ],
                "scale": [
                    "float"
                ],
                "size": [
                    "int"
                ],
                "numPartitions": [
                    "Optional[int]"
                ],
                "seed": [
                    "Optional[int]"
                ]
            }
        },
        "RandomRDDs.uniformVectorRDD": {
            "name": "uniformVectorRDD",
            "location": 74,
            "return": [
                "RDD[Vector]"
            ],
            "arguments": {
                "sc": [
                    "SparkContext"
                ],
                "numRows": [
                    "int"
                ],
                "numCols": [
                    "int"
                ],
                "numPartitions": [
                    "Optional[int]"
                ],
                "seed": [
                    "Optional[int]"
                ]
            }
        },
        "RandomRDDs.normalVectorRDD": {
            "name": "normalVectorRDD",
            "location": 82,
            "return": [
                "RDD[Vector]"
            ],
            "arguments": {
                "sc": [
                    "SparkContext"
                ],
                "numRows": [
                    "int"
                ],
                "numCols": [
                    "int"
                ],
                "numPartitions": [
                    "Optional[int]"
                ],
                "seed": [
                    "Optional[int]"
                ]
            }
        },
        "RandomRDDs.logNormalVectorRDD": {
            "name": "logNormalVectorRDD",
            "location": 90,
            "return": [
                "RDD[Vector]"
            ],
            "arguments": {
                "sc": [
                    "SparkContext"
                ],
                "mean": [
                    "float"
                ],
                "std": [],
                "numRows": [
                    "int"
                ],
                "numCols": [
                    "int"
                ],
                "numPartitions": [
                    "Optional[int]"
                ],
                "seed": [
                    "Optional[int]"
                ]
            }
        },
        "RandomRDDs.poissonVectorRDD": {
            "name": "poissonVectorRDD",
            "location": 100,
            "return": [
                "RDD[Vector]"
            ],
            "arguments": {
                "sc": [
                    "SparkContext"
                ],
                "mean": [
                    "float"
                ],
                "numRows": [
                    "int"
                ],
                "numCols": [
                    "int"
                ],
                "numPartitions": [
                    "Optional[int]"
                ],
                "seed": [
                    "Optional[int]"
                ]
            }
        },
        "RandomRDDs.exponentialVectorRDD": {
            "name": "exponentialVectorRDD",
            "location": 109,
            "return": [
                "RDD[Vector]"
            ],
            "arguments": {
                "sc": [
                    "SparkContext"
                ],
                "mean": [
                    "float"
                ],
                "numRows": [
                    "int"
                ],
                "numCols": [
                    "int"
                ],
                "numPartitions": [
                    "Optional[int]"
                ],
                "seed": [
                    "Optional[int]"
                ]
            }
        },
        "RandomRDDs.gammaVectorRDD": {
            "name": "gammaVectorRDD",
            "location": 118,
            "return": [
                "RDD[Vector]"
            ],
            "arguments": {
                "sc": [
                    "SparkContext"
                ],
                "shape": [
                    "float"
                ],
                "scale": [
                    "float"
                ],
                "numRows": [
                    "int"
                ],
                "numCols": [
                    "int"
                ],
                "numPartitions": [
                    "Optional[int]"
                ],
                "seed": [
                    "Optional[int]"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/mllib/recommendation.py": {
        "Rating.__reduce__": {
            "name": "__reduce__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MatrixFactorizationModel.predict": {
            "name": "predict",
            "location": 35,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "int"
                ],
                "product": [
                    "int"
                ]
            }
        },
        "MatrixFactorizationModel.predictAll": {
            "name": "predictAll",
            "location": 36,
            "return": [
                "RDD[Rating]"
            ],
            "arguments": {
                "self": [],
                "user_product": [
                    "RDD[Tuple[(int, int)]]"
                ]
            }
        },
        "MatrixFactorizationModel.userFeatures": {
            "name": "userFeatures",
            "location": 37,
            "return": [
                "RDD[Tuple[(int, array.array)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatrixFactorizationModel.productFeatures": {
            "name": "productFeatures",
            "location": 38,
            "return": [
                "RDD[Tuple[(int, array.array)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatrixFactorizationModel.recommendUsers": {
            "name": "recommendUsers",
            "location": 39,
            "return": [
                "List[Rating]"
            ],
            "arguments": {
                "self": [],
                "product": [
                    "int"
                ],
                "num": [
                    "int"
                ]
            }
        },
        "MatrixFactorizationModel.recommendProducts": {
            "name": "recommendProducts",
            "location": 40,
            "return": [
                "List[Rating]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "int"
                ],
                "num": [
                    "int"
                ]
            }
        },
        "MatrixFactorizationModel.recommendProductsForUsers": {
            "name": "recommendProductsForUsers",
            "location": 41,
            "return": [
                "RDD[Tuple[(int, Tuple[(Rating, ...)])]]"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "int"
                ]
            }
        },
        "MatrixFactorizationModel.recommendUsersForProducts": {
            "name": "recommendUsersForProducts",
            "location": 44,
            "return": [
                "RDD[Tuple[(int, Tuple[(Rating, ...)])]]"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "int"
                ]
            }
        },
        "MatrixFactorizationModel.rank": {
            "name": "rank",
            "location": 48,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatrixFactorizationModel.load": {
            "name": "load",
            "location": 50,
            "return": [
                "MatrixFactorizationModel"
            ],
            "arguments": {
                "cls": [],
                "sc": [
                    "SparkContext"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "ALS.train": {
            "name": "train",
            "location": 54,
            "return": [
                "MatrixFactorizationModel"
            ],
            "arguments": {
                "cls": [],
                "ratings": [
                    "Union[(RDD[Rating], RDD[Tuple[(int, int, float)]])]"
                ],
                "rank": [
                    "int"
                ],
                "iterations": [
                    "int"
                ],
                "lambda_": [
                    "float"
                ],
                "blocks": [
                    "int"
                ],
                "nonnegative": [
                    "bool"
                ],
                "seed": [
                    "Optional[int]"
                ]
            }
        },
        "ALS.trainImplicit": {
            "name": "trainImplicit",
            "location": 65,
            "return": [
                "MatrixFactorizationModel"
            ],
            "arguments": {
                "cls": [],
                "ratings": [
                    "Union[(RDD[Rating], RDD[Tuple[(int, int, float)]])]"
                ],
                "rank": [
                    "int"
                ],
                "iterations": [
                    "int"
                ],
                "lambda_": [
                    "float"
                ],
                "blocks": [
                    "int"
                ],
                "alpha": [
                    "float"
                ],
                "nonnegative": [
                    "bool"
                ],
                "seed": [
                    "Optional[int]"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/mllib/regression.py": {
        "LabeledPoint.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "float"
                ],
                "features": [
                    "Iterable[float]"
                ]
            }
        },
        "LabeledPoint.__reduce__": {
            "name": "__reduce__",
            "location": 35,
            "return": [
                "Tuple[(type, Tuple[bytes])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearModel.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "weights": [
                    "Vector"
                ],
                "intercept": [
                    "float"
                ]
            }
        },
        "LinearModel.weights": {
            "name": "weights",
            "location": 40,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearModel.intercept": {
            "name": "intercept",
            "location": 42,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearRegressionModelBase.predict": {
            "name": "predict",
            "location": 48,
            "return": [
                "RDD[float]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "RDD[Vector]"
                ]
            }
        },
        "LinearRegressionModel.save": {
            "name": "save",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sc": [
                    "SparkContext"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "LinearRegressionModel.load": {
            "name": "load",
            "location": 53,
            "return": [
                "LinearRegressionModel"
            ],
            "arguments": {
                "cls": [],
                "sc": [
                    "SparkContext"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "LinearRegressionWithSGD.train": {
            "name": "train",
            "location": 57,
            "return": [
                "LinearRegressionModel"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "RDD[LabeledPoint]"
                ],
                "iterations": [
                    "int"
                ],
                "step": [
                    "float"
                ],
                "miniBatchFraction": [
                    "float"
                ],
                "initialWeights": [
                    "Optional[VectorLike]"
                ],
                "regParam": [
                    "float"
                ],
                "regType": [
                    "Optional[str]"
                ],
                "intercept": [
                    "bool"
                ],
                "validateData": [
                    "bool"
                ],
                "convergenceTol": [
                    "float"
                ]
            }
        },
        "LassoModel.save": {
            "name": "save",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sc": [
                    "SparkContext"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "LassoModel.load": {
            "name": "load",
            "location": 74,
            "return": [
                "LassoModel"
            ],
            "arguments": {
                "cls": [],
                "sc": [
                    "SparkContext"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "LassoWithSGD.train": {
            "name": "train",
            "location": 78,
            "return": [
                "LassoModel"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "RDD[LabeledPoint]"
                ],
                "iterations": [
                    "int"
                ],
                "step": [
                    "float"
                ],
                "regParam": [
                    "float"
                ],
                "miniBatchFraction": [
                    "float"
                ],
                "initialWeights": [
                    "Optional[VectorLike]"
                ],
                "intercept": [
                    "bool"
                ],
                "validateData": [
                    "bool"
                ],
                "convergenceTol": [
                    "float"
                ]
            }
        },
        "RidgeRegressionModel.save": {
            "name": "save",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sc": [
                    "SparkContext"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "RidgeRegressionModel.load": {
            "name": "load",
            "location": 94,
            "return": [
                "RidgeRegressionModel"
            ],
            "arguments": {
                "cls": [],
                "sc": [
                    "SparkContext"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "RidgeRegressionWithSGD.train": {
            "name": "train",
            "location": 98,
            "return": [
                "RidgeRegressionModel"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "RDD[LabeledPoint]"
                ],
                "iterations": [
                    "int"
                ],
                "step": [
                    "float"
                ],
                "regParam": [
                    "float"
                ],
                "miniBatchFraction": [
                    "float"
                ],
                "initialWeights": [
                    "Optional[VectorLike]"
                ],
                "intercept": [
                    "bool"
                ],
                "validateData": [
                    "bool"
                ],
                "convergenceTol": [
                    "float"
                ]
            }
        },
        "IsotonicRegressionModel.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "boundaries": [
                    "ndarray"
                ],
                "predictions": [
                    "ndarray"
                ],
                "isotonic": [
                    "bool"
                ]
            }
        },
        "IsotonicRegressionModel.predict": {
            "name": "predict",
            "location": 121,
            "return": [
                "RDD[ndarray]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "RDD[Vector]"
                ]
            }
        },
        "IsotonicRegressionModel.save": {
            "name": "save",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sc": [
                    "SparkContext"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "IsotonicRegressionModel.load": {
            "name": "load",
            "location": 124,
            "return": [
                "IsotonicRegressionModel"
            ],
            "arguments": {
                "cls": [],
                "sc": [
                    "SparkContext"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "IsotonicRegression.train": {
            "name": "train",
            "location": 128,
            "return": [
                "IsotonicRegressionModel"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "RDD[VectorLike]"
                ],
                "isotonic": [
                    "bool"
                ]
            }
        },
        "StreamingLinearAlgorithm.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "LinearModel"
                ]
            }
        },
        "StreamingLinearAlgorithm.latestModel": {
            "name": "latestModel",
            "location": 134,
            "return": [
                "LinearModel"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamingLinearAlgorithm.predictOn": {
            "name": "predictOn",
            "location": 135,
            "return": [
                "DStream[float]"
            ],
            "arguments": {
                "self": [],
                "dstream": [
                    "DStream[VectorLike]"
                ]
            }
        },
        "StreamingLinearAlgorithm.predictOnValues": {
            "name": "predictOnValues",
            "location": 136,
            "return": [
                "DStream[Tuple[(K, float)]]"
            ],
            "arguments": {
                "self": [],
                "dstream": [
                    "DStream[Tuple[(K, VectorLike)]]"
                ]
            }
        },
        "StreamingLinearRegressionWithSGD.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stepSize": [
                    "float"
                ],
                "numIterations": [
                    "int"
                ],
                "miniBatchFraction": [
                    "float"
                ],
                "convergenceTol": [
                    "float"
                ]
            }
        },
        "StreamingLinearRegressionWithSGD.setInitialWeights": {
            "name": "setInitialWeights",
            "location": 152,
            "return": [
                "StreamingLinearRegressionWithSGD"
            ],
            "arguments": {
                "self": [],
                "initialWeights": [
                    "VectorLike"
                ]
            }
        },
        "StreamingLinearRegressionWithSGD.trainOn": {
            "name": "trainOn",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dstream": [
                    "DStream[LabeledPoint]"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/mllib/tree.py": {
        "TreeEnsembleModel.predict": {
            "name": "predict",
            "location": 31,
            "return": [
                "RDD[VectorLike]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "RDD[VectorLike]"
                ]
            }
        },
        "TreeEnsembleModel.numTrees": {
            "name": "numTrees",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeEnsembleModel.totalNumNodes": {
            "name": "totalNumNodes",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeEnsembleModel.toDebugString": {
            "name": "toDebugString",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionTreeModel.predict": {
            "name": "predict",
            "location": 40,
            "return": [
                "RDD[VectorLike]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "RDD[VectorLike]"
                ]
            }
        },
        "DecisionTreeModel.numNodes": {
            "name": "numNodes",
            "location": 41,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionTreeModel.depth": {
            "name": "depth",
            "location": 42,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionTreeModel.toDebugString": {
            "name": "toDebugString",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionTree.trainClassifier": {
            "name": "trainClassifier",
            "location": 47,
            "return": [
                "DecisionTreeModel"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "RDD[LabeledPoint]"
                ],
                "numClasses": [
                    "int"
                ],
                "categoricalFeaturesInfo": [
                    "Dict[(int, int)]"
                ],
                "impurity": [
                    "str"
                ],
                "maxDepth": [
                    "int"
                ],
                "maxBins": [
                    "int"
                ],
                "minInstancesPerNode": [
                    "int"
                ],
                "minInfoGain": [
                    "float"
                ]
            }
        },
        "DecisionTree.trainRegressor": {
            "name": "trainRegressor",
            "location": 59,
            "return": [
                "DecisionTreeModel"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "RDD[LabeledPoint]"
                ],
                "categoricalFeaturesInfo": [
                    "Dict[(int, int)]"
                ],
                "impurity": [
                    "str"
                ],
                "maxDepth": [
                    "int"
                ],
                "maxBins": [
                    "int"
                ],
                "minInstancesPerNode": [
                    "int"
                ],
                "minInfoGain": [
                    "float"
                ]
            }
        },
        "RandomForest.trainClassifier": {
            "name": "trainClassifier",
            "location": 75,
            "return": [
                "RandomForestModel"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "RDD[LabeledPoint]"
                ],
                "numClasses": [
                    "int"
                ],
                "categoricalFeaturesInfo": [
                    "Dict[(int, int)]"
                ],
                "numTrees": [
                    "int"
                ],
                "featureSubsetStrategy": [
                    "str"
                ],
                "impurity": [
                    "str"
                ],
                "maxDepth": [
                    "int"
                ],
                "maxBins": [
                    "int"
                ],
                "seed": [
                    "Optional[int]"
                ]
            }
        },
        "RandomForest.trainRegressor": {
            "name": "trainRegressor",
            "location": 88,
            "return": [
                "RandomForestModel"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "RDD[LabeledPoint]"
                ],
                "categoricalFeaturesInfo": [
                    "Dict[(int, int)]"
                ],
                "numTrees": [
                    "int"
                ],
                "featureSubsetStrategy": [
                    "str"
                ],
                "impurity": [
                    "str"
                ],
                "maxDepth": [
                    "int"
                ],
                "maxBins": [
                    "int"
                ],
                "seed": [
                    "Optional[int]"
                ]
            }
        },
        "GradientBoostedTrees.trainClassifier": {
            "name": "trainClassifier",
            "location": 106,
            "return": [
                "GradientBoostedTreesModel"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "RDD[LabeledPoint]"
                ],
                "categoricalFeaturesInfo": [
                    "Dict[(int, int)]"
                ],
                "loss": [
                    "str"
                ],
                "numIterations": [
                    "int"
                ],
                "learningRate": [
                    "float"
                ],
                "maxDepth": [
                    "int"
                ],
                "maxBins": [
                    "int"
                ]
            }
        },
        "GradientBoostedTrees.trainRegressor": {
            "name": "trainRegressor",
            "location": 117,
            "return": [
                "GradientBoostedTreesModel"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "RDD[LabeledPoint]"
                ],
                "categoricalFeaturesInfo": [
                    "Dict[(int, int)]"
                ],
                "loss": [
                    "str"
                ],
                "numIterations": [
                    "int"
                ],
                "learningRate": [
                    "float"
                ],
                "maxDepth": [
                    "int"
                ],
                "maxBins": [
                    "int"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/mllib/util.py": {
        "MLUtils.loadLibSVMFile": {
            "name": "loadLibSVMFile",
            "location": 32,
            "return": [
                "RDD[LabeledPoint]"
            ],
            "arguments": {
                "sc": [
                    "SparkContext"
                ],
                "path": [
                    "str"
                ],
                "numFeatures": [
                    "int"
                ],
                "minPartitions": [
                    "Optional[int]"
                ]
            }
        },
        "MLUtils.saveAsLibSVMFile": {
            "name": "saveAsLibSVMFile",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "RDD[LabeledPoint]"
                ],
                "dir": [
                    "str"
                ]
            }
        },
        "MLUtils.loadLabeledPoints": {
            "name": "loadLabeledPoints",
            "location": 41,
            "return": [
                "RDD[LabeledPoint]"
            ],
            "arguments": {
                "sc": [
                    "SparkContext"
                ],
                "path": [
                    "str"
                ],
                "minPartitions": [
                    "Optional[int]"
                ]
            }
        },
        "MLUtils.appendBias": {
            "name": "appendBias",
            "location": 45,
            "return": [
                "Vector"
            ],
            "arguments": {
                "data": [
                    "Vector"
                ]
            }
        },
        "MLUtils.loadVectors": {
            "name": "loadVectors",
            "location": 47,
            "return": [
                "RDD[Vector]"
            ],
            "arguments": {
                "sc": [
                    "SparkContext"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "MLUtils.convertVectorColumnsToML": {
            "name": "convertVectorColumnsToML",
            "location": 49,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "dataset": [
                    "DataFrame"
                ]
            }
        },
        "MLUtils.convertVectorColumnsFromML": {
            "name": "convertVectorColumnsFromML",
            "location": 51,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "dataset": [
                    "DataFrame"
                ]
            }
        },
        "MLUtils.convertMatrixColumnsToML": {
            "name": "convertMatrixColumnsToML",
            "location": 53,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "dataset": [
                    "DataFrame"
                ]
            }
        },
        "MLUtils.convertMatrixColumnsFromML": {
            "name": "convertMatrixColumnsFromML",
            "location": 55,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "dataset": [
                    "DataFrame"
                ]
            }
        },
        "Saveable.save": {
            "name": "save",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sc": [
                    "SparkContext"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "JavaSaveable.save": {
            "name": "save",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sc": [
                    "SparkContext"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "Loader.load": {
            "name": "load",
            "location": 65,
            "return": [
                "T"
            ],
            "arguments": {
                "cls": [],
                "sc": [
                    "SparkContext"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "JavaLoader.load": {
            "name": "load",
            "location": 69,
            "return": [
                "T"
            ],
            "arguments": {
                "cls": [],
                "sc": [
                    "SparkContext"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "LinearDataGenerator.generateLinearInput": {
            "name": "generateLinearInput",
            "location": 73,
            "return": [
                "List[LabeledPoint]"
            ],
            "arguments": {
                "intercept": [
                    "float"
                ],
                "weights": [
                    "VectorLike"
                ],
                "xMean": [
                    "VectorLike"
                ],
                "xVariance": [
                    "VectorLike"
                ],
                "nPoints": [
                    "int"
                ],
                "seed": [
                    "int"
                ],
                "eps": [
                    "float"
                ]
            }
        },
        "LinearDataGenerator.generateLinearRDD": {
            "name": "generateLinearRDD",
            "location": 83,
            "return": [
                "RDD[LabeledPoint]"
            ],
            "arguments": {
                "sc": [
                    "SparkContext"
                ],
                "nexamples": [
                    "int"
                ],
                "nfeatures": [
                    "int"
                ],
                "eps": [
                    "float"
                ],
                "nParts": [
                    "int"
                ],
                "intercept": [
                    "float"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/mllib/_typing.py": {},
    "pyspark-stubs-master/third_party/3/pyspark/mllib/__init__.py": {},
    "pyspark-stubs-master/third_party/3/pyspark/mllib/linalg/distributed.py": {
        "DistributedMatrix.numRows": {
            "name": "numRows",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistributedMatrix.numCols": {
            "name": "numCols",
            "location": 34,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RowMatrix.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rows": [
                    "RDD[Vector]"
                ],
                "numRows": [
                    "int"
                ],
                "numCols": [
                    "int"
                ]
            }
        },
        "RowMatrix.rows": {
            "name": "rows",
            "location": 41,
            "return": [
                "RDD[Vector]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RowMatrix.numRows": {
            "name": "numRows",
            "location": 42,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RowMatrix.numCols": {
            "name": "numCols",
            "location": 43,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RowMatrix.computeColumnSummaryStatistics": {
            "name": "computeColumnSummaryStatistics",
            "location": 44,
            "return": [
                "MultivariateStatisticalSummary"
            ],
            "arguments": {
                "self": []
            }
        },
        "RowMatrix.computeCovariance": {
            "name": "computeCovariance",
            "location": 45,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "RowMatrix.computeGramianMatrix": {
            "name": "computeGramianMatrix",
            "location": 46,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "RowMatrix.columnSimilarities": {
            "name": "columnSimilarities",
            "location": 47,
            "return": [
                "CoordinateMatrix"
            ],
            "arguments": {
                "self": [],
                "threshold": [
                    "float"
                ]
            }
        },
        "RowMatrix.tallSkinnyQR": {
            "name": "tallSkinnyQR",
            "location": 48,
            "return": [
                "QRDecomposition[(RowMatrix, Matrix)]"
            ],
            "arguments": {
                "self": [],
                "computeQ": [
                    "bool"
                ]
            }
        },
        "RowMatrix.computeSVD": {
            "name": "computeSVD",
            "location": 51,
            "return": [
                "SingularValueDecomposition[(RowMatrix, Matrix)]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int"
                ],
                "computeU": [
                    "bool"
                ],
                "rCond": [
                    "float"
                ]
            }
        },
        "RowMatrix.computePrincipalComponents": {
            "name": "computePrincipalComponents",
            "location": 54,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int"
                ]
            }
        },
        "RowMatrix.multiply": {
            "name": "multiply",
            "location": 55,
            "return": [
                "RowMatrix"
            ],
            "arguments": {
                "self": [],
                "matrix": [
                    "Matrix"
                ]
            }
        },
        "SingularValueDecomposition.U": {
            "name": "U",
            "location": 59,
            "return": [
                "Optional[UT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingularValueDecomposition.s": {
            "name": "s",
            "location": 61,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingularValueDecomposition.V": {
            "name": "V",
            "location": 63,
            "return": [
                "VT"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexedRow.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ],
                "vector": [
                    "VectorLike"
                ]
            }
        },
        "IndexedRowMatrix.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rows": [
                    "RDD[Union[(Tuple[(int, VectorLike)], IndexedRow)]]"
                ],
                "numRows": [
                    "int"
                ],
                "numCols": [
                    "int"
                ]
            }
        },
        "IndexedRowMatrix.rows": {
            "name": "rows",
            "location": 78,
            "return": [
                "RDD[IndexedRow]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexedRowMatrix.numRows": {
            "name": "numRows",
            "location": 79,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexedRowMatrix.numCols": {
            "name": "numCols",
            "location": 80,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexedRowMatrix.columnSimilarities": {
            "name": "columnSimilarities",
            "location": 81,
            "return": [
                "CoordinateMatrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexedRowMatrix.computeGramianMatrix": {
            "name": "computeGramianMatrix",
            "location": 82,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexedRowMatrix.toRowMatrix": {
            "name": "toRowMatrix",
            "location": 83,
            "return": [
                "RowMatrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexedRowMatrix.toCoordinateMatrix": {
            "name": "toCoordinateMatrix",
            "location": 84,
            "return": [
                "CoordinateMatrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexedRowMatrix.toBlockMatrix": {
            "name": "toBlockMatrix",
            "location": 85,
            "return": [
                "BlockMatrix"
            ],
            "arguments": {
                "self": [],
                "rowsPerBlock": [
                    "int"
                ],
                "colsPerBlock": [
                    "int"
                ]
            }
        },
        "IndexedRowMatrix.computeSVD": {
            "name": "computeSVD",
            "location": 88,
            "return": [
                "SingularValueDecomposition[(IndexedRowMatrix, Matrix)]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int"
                ],
                "computeU": [
                    "bool"
                ],
                "rCond": [
                    "float"
                ]
            }
        },
        "IndexedRowMatrix.multiply": {
            "name": "multiply",
            "location": 91,
            "return": [
                "IndexedRowMatrix"
            ],
            "arguments": {
                "self": [],
                "matrix": [
                    "Matrix"
                ]
            }
        },
        "MatrixEntry.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int"
                ],
                "j": [
                    "int"
                ],
                "value": [
                    "float"
                ]
            }
        },
        "CoordinateMatrix.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entries": [
                    "RDD[Union[(Tuple[(int, int, float)], MatrixEntry)]]"
                ],
                "numRows": [
                    "int"
                ],
                "numCols": [
                    "int"
                ]
            }
        },
        "CoordinateMatrix.entries": {
            "name": "entries",
            "location": 107,
            "return": [
                "RDD[MatrixEntry]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinateMatrix.numRows": {
            "name": "numRows",
            "location": 108,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinateMatrix.numCols": {
            "name": "numCols",
            "location": 109,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinateMatrix.transpose": {
            "name": "transpose",
            "location": 110,
            "return": [
                "CoordinateMatrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinateMatrix.toRowMatrix": {
            "name": "toRowMatrix",
            "location": 111,
            "return": [
                "RowMatrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinateMatrix.toIndexedRowMatrix": {
            "name": "toIndexedRowMatrix",
            "location": 112,
            "return": [
                "IndexedRowMatrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinateMatrix.toBlockMatrix": {
            "name": "toBlockMatrix",
            "location": 113,
            "return": [
                "BlockMatrix"
            ],
            "arguments": {
                "self": [],
                "rowsPerBlock": [
                    "int"
                ],
                "colsPerBlock": [
                    "int"
                ]
            }
        },
        "BlockMatrix.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blocks": [
                    "RDD[Tuple[(Tuple[(int, int)], Matrix)]]"
                ],
                "rowsPerBlock": [
                    "int"
                ],
                "colsPerBlock": [
                    "int"
                ],
                "numRows": [
                    "int"
                ],
                "numCols": [
                    "int"
                ]
            }
        },
        "BlockMatrix.blocks": {
            "name": "blocks",
            "location": 127,
            "return": [
                "RDD[Tuple[(Tuple[(int, int)], Matrix)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockMatrix.rowsPerBlock": {
            "name": "rowsPerBlock",
            "location": 129,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockMatrix.colsPerBlock": {
            "name": "colsPerBlock",
            "location": 131,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockMatrix.numRowBlocks": {
            "name": "numRowBlocks",
            "location": 133,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockMatrix.numColBlocks": {
            "name": "numColBlocks",
            "location": 135,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockMatrix.numRows": {
            "name": "numRows",
            "location": 136,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockMatrix.numCols": {
            "name": "numCols",
            "location": 137,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockMatrix.cache": {
            "name": "cache",
            "location": 138,
            "return": [
                "BlockMatrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockMatrix.persist": {
            "name": "persist",
            "location": 139,
            "return": [
                "BlockMatrix"
            ],
            "arguments": {
                "self": [],
                "storageLevel": [
                    "StorageLevel"
                ]
            }
        },
        "BlockMatrix.validate": {
            "name": "validate",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockMatrix.add": {
            "name": "add",
            "location": 141,
            "return": [
                "BlockMatrix"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "BlockMatrix"
                ]
            }
        },
        "BlockMatrix.subtract": {
            "name": "subtract",
            "location": 142,
            "return": [
                "BlockMatrix"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "BlockMatrix"
                ]
            }
        },
        "BlockMatrix.multiply": {
            "name": "multiply",
            "location": 143,
            "return": [
                "BlockMatrix"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "BlockMatrix"
                ]
            }
        },
        "BlockMatrix.transpose": {
            "name": "transpose",
            "location": 144,
            "return": [
                "BlockMatrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockMatrix.toLocalMatrix": {
            "name": "toLocalMatrix",
            "location": 145,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockMatrix.toIndexedRowMatrix": {
            "name": "toIndexedRowMatrix",
            "location": 146,
            "return": [
                "IndexedRowMatrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockMatrix.toCoordinateMatrix": {
            "name": "toCoordinateMatrix",
            "location": 147,
            "return": [
                "CoordinateMatrix"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/mllib/linalg/__init__.py": {
        "VectorUDT.sqlType": {
            "name": "sqlType",
            "location": 30,
            "return": [
                "StructType"
            ],
            "arguments": {
                "cls": []
            }
        },
        "VectorUDT.module": {
            "name": "module",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "VectorUDT.scalaUDT": {
            "name": "scalaUDT",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "VectorUDT.serialize": {
            "name": "serialize",
            "location": 35,
            "return": [
                "Tuple[(int, Optional[int], Optional[List[int]], List[float])]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Vector"
                ]
            }
        },
        "VectorUDT.deserialize": {
            "name": "deserialize",
            "location": 38,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": [],
                "datum": [
                    "Any"
                ]
            }
        },
        "VectorUDT.simpleString": {
            "name": "simpleString",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatrixUDT.sqlType": {
            "name": "sqlType",
            "location": 43,
            "return": [
                "StructType"
            ],
            "arguments": {
                "cls": []
            }
        },
        "MatrixUDT.module": {
            "name": "module",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "MatrixUDT.scalaUDT": {
            "name": "scalaUDT",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "MatrixUDT.serialize": {
            "name": "serialize",
            "location": 48,
            "return": [
                "Tuple[(int, int, int, Optional[List[int]], Optional[List[int]], List[float], bool)]"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "MatrixUDT.deserialize": {
            "name": "deserialize",
            "location": 53,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": [],
                "datum": [
                    "Any"
                ]
            }
        },
        "MatrixUDT.simpleString": {
            "name": "simpleString",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vector.toArray": {
            "name": "toArray",
            "location": 58,
            "return": [
                "ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vector.asML": {
            "name": "asML",
            "location": 59,
            "return": [
                "newlinalg.Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "DenseVector.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "__arr": [
                    "Iterable[float]"
                ]
            }
        },
        "DenseVector.parse": {
            "name": "parse",
            "location": 70,
            "return": [
                "DenseVector"
            ],
            "arguments": {
                "s": []
            }
        },
        "DenseVector.__reduce__": {
            "name": "__reduce__",
            "location": 71,
            "return": [
                "Tuple[(type, bytes)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DenseVector.numNonzeros": {
            "name": "numNonzeros",
            "location": 72,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DenseVector.norm": {
            "name": "norm",
            "location": 73,
            "return": [
                "float64"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "Union[(float, str)]"
                ]
            }
        },
        "DenseVector.dot": {
            "name": "dot",
            "location": 74,
            "return": [
                "float64"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[float]"
                ]
            }
        },
        "DenseVector.squared_distance": {
            "name": "squared_distance",
            "location": 75,
            "return": [
                "float64"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[float]"
                ]
            }
        },
        "DenseVector.toArray": {
            "name": "toArray",
            "location": 76,
            "return": [
                "ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "DenseVector.asML": {
            "name": "asML",
            "location": 77,
            "return": [
                "newlinalg.DenseVector"
            ],
            "arguments": {
                "self": []
            }
        },
        "DenseVector.values": {
            "name": "values",
            "location": 79,
            "return": [
                "ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "DenseVector.__getitem__": {
            "name": "__getitem__",
            "location": 80,
            "return": [
                "float64"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int"
                ]
            }
        },
        "DenseVector.__len__": {
            "name": "__len__",
            "location": 81,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DenseVector.__eq__": {
            "name": "__eq__",
            "location": 82,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "DenseVector.__ne__": {
            "name": "__ne__",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "DenseVector.__hash__": {
            "name": "__hash__",
            "location": 84,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DenseVector.__getattr__": {
            "name": "__getattr__",
            "location": 85,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        },
        "DenseVector.__neg__": {
            "name": "__neg__",
            "location": 86,
            "return": [
                "DenseVector"
            ],
            "arguments": {
                "self": []
            }
        },
        "DenseVector.__add__": {
            "name": "__add__",
            "location": 87,
            "return": [
                "DenseVector"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(float, Iterable[float])]"
                ]
            }
        },
        "DenseVector.__sub__": {
            "name": "__sub__",
            "location": 88,
            "return": [
                "DenseVector"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(float, Iterable[float])]"
                ]
            }
        },
        "DenseVector.__mul__": {
            "name": "__mul__",
            "location": 89,
            "return": [
                "DenseVector"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(float, Iterable[float])]"
                ]
            }
        },
        "DenseVector.__div__": {
            "name": "__div__",
            "location": 90,
            "return": [
                "DenseVector"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(float, Iterable[float])]"
                ]
            }
        },
        "DenseVector.__truediv__": {
            "name": "__truediv__",
            "location": 91,
            "return": [
                "DenseVector"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(float, Iterable[float])]"
                ]
            }
        },
        "DenseVector.__mod__": {
            "name": "__mod__",
            "location": 92,
            "return": [
                "DenseVector"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(float, Iterable[float])]"
                ]
            }
        },
        "DenseVector.__radd__": {
            "name": "__radd__",
            "location": 93,
            "return": [
                "DenseVector"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(float, Iterable[float])]"
                ]
            }
        },
        "DenseVector.__rsub__": {
            "name": "__rsub__",
            "location": 94,
            "return": [
                "DenseVector"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(float, Iterable[float])]"
                ]
            }
        },
        "DenseVector.__rmul__": {
            "name": "__rmul__",
            "location": 95,
            "return": [
                "DenseVector"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(float, Iterable[float])]"
                ]
            }
        },
        "DenseVector.__rdiv__": {
            "name": "__rdiv__",
            "location": 96,
            "return": [
                "DenseVector"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(float, Iterable[float])]"
                ]
            }
        },
        "DenseVector.__rtruediv__": {
            "name": "__rtruediv__",
            "location": 97,
            "return": [
                "DenseVector"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(float, Iterable[float])]"
                ]
            }
        },
        "DenseVector.__rmod__": {
            "name": "__rmod__",
            "location": 98,
            "return": [
                "DenseVector"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(float, Iterable[float])]"
                ]
            }
        },
        "SparseVector.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int"
                ],
                "__map": [
                    "Dict[(int, float)]"
                ]
            }
        },
        "SparseVector.numNonzeros": {
            "name": "numNonzeros",
            "location": 116,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparseVector.norm": {
            "name": "norm",
            "location": 117,
            "return": [
                "float64"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "Union[(float, str)]"
                ]
            }
        },
        "SparseVector.__reduce__": {
            "name": "__reduce__",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SparseVector.parse": {
            "name": "parse",
            "location": 120,
            "return": [
                "SparseVector"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "SparseVector.dot": {
            "name": "dot",
            "location": 121,
            "return": [
                "float64"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[float]"
                ]
            }
        },
        "SparseVector.squared_distance": {
            "name": "squared_distance",
            "location": 122,
            "return": [
                "float64"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[float]"
                ]
            }
        },
        "SparseVector.toArray": {
            "name": "toArray",
            "location": 123,
            "return": [
                "ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparseVector.asML": {
            "name": "asML",
            "location": 124,
            "return": [
                "newlinalg.SparseVector"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparseVector.__len__": {
            "name": "__len__",
            "location": 125,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparseVector.__eq__": {
            "name": "__eq__",
            "location": 126,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SparseVector.__getitem__": {
            "name": "__getitem__",
            "location": 127,
            "return": [
                "float64"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "SparseVector.__ne__": {
            "name": "__ne__",
            "location": 128,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SparseVector.__hash__": {
            "name": "__hash__",
            "location": 129,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vectors.sparse": {
            "name": "sparse",
            "location": 148,
            "return": [
                "SparseVector"
            ],
            "arguments": {
                "size": [
                    "int"
                ],
                "__map": [
                    "Dict[(int, float)]"
                ]
            }
        },
        "Vectors.dense": {
            "name": "dense",
            "location": 157,
            "return": [
                "DenseVector"
            ],
            "arguments": {
                "self": [],
                "__arr": [
                    "Iterable[float]"
                ]
            }
        },
        "Vectors.fromML": {
            "name": "fromML",
            "location": 159,
            "return": [
                "DenseVector"
            ],
            "arguments": {
                "vec": [
                    "newlinalg.DenseVector"
                ]
            }
        },
        "Vectors.stringify": {
            "name": "stringify",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {
                "vector": [
                    "Vector"
                ]
            }
        },
        "Vectors.squared_distance": {
            "name": "squared_distance",
            "location": 163,
            "return": [
                "float64"
            ],
            "arguments": {
                "v1": [
                    "Vector"
                ],
                "v2": [
                    "Vector"
                ]
            }
        },
        "Vectors.norm": {
            "name": "norm",
            "location": 165,
            "return": [
                "float64"
            ],
            "arguments": {
                "vector": [
                    "Vector"
                ],
                "p": [
                    "Union[(float, str)]"
                ]
            }
        },
        "Vectors.parse": {
            "name": "parse",
            "location": 167,
            "return": [
                "Vector"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "Vectors.zeros": {
            "name": "zeros",
            "location": 169,
            "return": [
                "DenseVector"
            ],
            "arguments": {
                "size": [
                    "int"
                ]
            }
        },
        "Matrix.__init__": {
            "name": "__init__",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numRows": [
                    "int"
                ],
                "numCols": [
                    "int"
                ],
                "isTransposed": [
                    "bool"
                ]
            }
        },
        "Matrix.toArray": {
            "name": "toArray",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.asML": {
            "name": "asML",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DenseMatrix.__init__": {
            "name": "__init__",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numRows": [
                    "int"
                ],
                "numCols": [
                    "int"
                ],
                "values": [
                    "Iterable[float]"
                ],
                "isTransposed": [
                    "bool"
                ]
            }
        },
        "DenseMatrix.__reduce__": {
            "name": "__reduce__",
            "location": 196,
            "return": [
                "Tuple[(type, Tuple[(int, int, bytes, int)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DenseMatrix.toArray": {
            "name": "toArray",
            "location": 197,
            "return": [
                "ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "DenseMatrix.toSparse": {
            "name": "toSparse",
            "location": 198,
            "return": [
                "SparseMatrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "DenseMatrix.asML": {
            "name": "asML",
            "location": 199,
            "return": [
                "newlinalg.DenseMatrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "DenseMatrix.__getitem__": {
            "name": "__getitem__",
            "location": 200,
            "return": [
                "float64"
            ],
            "arguments": {
                "self": [],
                "indices": [
                    "Tuple[(int, int)]"
                ]
            }
        },
        "DenseMatrix.__eq__": {
            "name": "__eq__",
            "location": 201,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SparseMatrix.__init__": {
            "name": "__init__",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numRows": [
                    "int"
                ],
                "numCols": [
                    "int"
                ],
                "colPtrs": [
                    "Iterable[int]"
                ],
                "rowIndices": [
                    "Iterable[int]"
                ],
                "values": [
                    "Iterable[float]"
                ],
                "isTransposed": [
                    "bool"
                ]
            }
        },
        "SparseMatrix.__reduce__": {
            "name": "__reduce__",
            "location": 227,
            "return": [
                "Tuple[(type, Tuple[(int, int, bytes, bytes, bytes, int)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparseMatrix.__getitem__": {
            "name": "__getitem__",
            "location": 228,
            "return": [
                "float64"
            ],
            "arguments": {
                "self": [],
                "indices": [
                    "Tuple[(int, int)]"
                ]
            }
        },
        "SparseMatrix.toArray": {
            "name": "toArray",
            "location": 229,
            "return": [
                "ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparseMatrix.toDense": {
            "name": "toDense",
            "location": 230,
            "return": [
                "DenseMatrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparseMatrix.asML": {
            "name": "asML",
            "location": 231,
            "return": [
                "newlinalg.SparseMatrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparseMatrix.__eq__": {
            "name": "__eq__",
            "location": 232,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrices.dense": {
            "name": "dense",
            "location": 242,
            "return": [
                "DenseMatrix"
            ],
            "arguments": {
                "numRows": [
                    "int"
                ],
                "numCols": [
                    "int"
                ],
                "values": [
                    "Iterable[float]"
                ],
                "isTransposed": [
                    "bool"
                ]
            }
        },
        "Matrices.sparse": {
            "name": "sparse",
            "location": 257,
            "return": [
                "SparseMatrix"
            ],
            "arguments": {
                "numRows": [
                    "int"
                ],
                "numCols": [
                    "int"
                ],
                "colPtrs": [
                    "Iterable[int]"
                ],
                "rowIndices": [
                    "Iterable[int]"
                ],
                "values": [
                    "Iterable[float]"
                ],
                "isTransposed": [
                    "bool"
                ]
            }
        },
        "Matrices.fromML": {
            "name": "fromML",
            "location": 266,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "mat": [
                    "newlinalg.Matrix"
                ]
            }
        },
        "QRDecomposition.__init__": {
            "name": "__init__",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "Q": [
                    "QT"
                ],
                "R": [
                    "RT"
                ]
            }
        },
        "QRDecomposition.Q": {
            "name": "Q",
            "location": 271,
            "return": [
                "QT"
            ],
            "arguments": {
                "self": []
            }
        },
        "QRDecomposition.R": {
            "name": "R",
            "location": 273,
            "return": [
                "RT"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/mllib/stat/distribution.py": {},
    "pyspark-stubs-master/third_party/3/pyspark/mllib/stat/KernelDensity.py": {
        "KernelDensity.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KernelDensity.setBandwidth": {
            "name": "setBandwidth",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bandwidth": [
                    "float"
                ]
            }
        },
        "KernelDensity.setSample": {
            "name": "setSample",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample": [
                    "RDD[float]"
                ]
            }
        },
        "KernelDensity.estimate": {
            "name": "estimate",
            "location": 27,
            "return": [
                "ndarray"
            ],
            "arguments": {
                "self": [],
                "points": [
                    "Iterable[float]"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/mllib/stat/test.py": {
        "TestResult.pValue": {
            "name": "pValue",
            "location": 27,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResult.degreesOfFreedom": {
            "name": "degreesOfFreedom",
            "location": 29,
            "return": [
                "DF"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResult.statistic": {
            "name": "statistic",
            "location": 31,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResult.nullHypothesis": {
            "name": "nullHypothesis",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChiSqTestResult.method": {
            "name": "method",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/mllib/stat/_statistics.py": {
        "MultivariateStatisticalSummary.mean": {
            "name": "mean",
            "location": 33,
            "return": [
                "ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultivariateStatisticalSummary.variance": {
            "name": "variance",
            "location": 34,
            "return": [
                "ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultivariateStatisticalSummary.count": {
            "name": "count",
            "location": 35,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultivariateStatisticalSummary.numNonzeros": {
            "name": "numNonzeros",
            "location": 36,
            "return": [
                "ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultivariateStatisticalSummary.max": {
            "name": "max",
            "location": 37,
            "return": [
                "ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultivariateStatisticalSummary.min": {
            "name": "min",
            "location": 38,
            "return": [
                "ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultivariateStatisticalSummary.normL1": {
            "name": "normL1",
            "location": 39,
            "return": [
                "ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultivariateStatisticalSummary.normL2": {
            "name": "normL2",
            "location": 40,
            "return": [
                "ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "Statistics.colStats": {
            "name": "colStats",
            "location": 44,
            "return": [
                "MultivariateStatisticalSummary"
            ],
            "arguments": {
                "rdd": [
                    "RDD[Vector]"
                ]
            }
        },
        "Statistics.corr": {
            "name": "corr",
            "location": 52,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [
                    "RDD[float]"
                ],
                "y": [
                    "RDD[float]"
                ],
                "method": [
                    "Optional[CorrelationMethod]"
                ]
            }
        },
        "Statistics.chiSqTest": {
            "name": "chiSqTest",
            "location": 65,
            "return": [
                "List[ChiSqTestResult]"
            ],
            "arguments": {
                "observed": [
                    "RDD[LabeledPoint]"
                ]
            }
        },
        "Statistics.kolmogorovSmirnovTest": {
            "name": "kolmogorovSmirnovTest",
            "location": 67,
            "return": [
                "KolmogorovSmirnovTestResult"
            ],
            "arguments": {
                "data": [],
                "distName": [
                    "Literal['norm']"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/mllib/stat/__init__.py": {},
    "pyspark-stubs-master/third_party/3/pyspark/resource/information.py": {
        "ResourceInformation.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "addresses": [
                    "Any"
                ]
            }
        },
        "ResourceInformation.name": {
            "name": "name",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResourceInformation.addresses": {
            "name": "addresses",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/resource/profile.py": {
        "ResourceProfile.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_java_resource_profile": [
                    "Optional[Any]"
                ],
                "_exec_req": [
                    "Any"
                ],
                "_task_req": [
                    "Any"
                ]
            }
        },
        "ResourceProfile.id": {
            "name": "id",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResourceProfile.taskResources": {
            "name": "taskResources",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResourceProfile.executorResources": {
            "name": "executorResources",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResourceProfileBuilder.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceProfileBuilder.require": {
            "name": "require",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "resourceRequest": [
                    "Any"
                ]
            }
        },
        "ResourceProfileBuilder.clearExecutorResourceRequests": {
            "name": "clearExecutorResourceRequests",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceProfileBuilder.clearTaskResourceRequests": {
            "name": "clearTaskResourceRequests",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceProfileBuilder.taskResources": {
            "name": "taskResources",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResourceProfileBuilder.executorResources": {
            "name": "executorResources",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResourceProfileBuilder.build": {
            "name": "build",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/resource/requests.py": {
        "ExecutorResourceRequest.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resourceName": [
                    "Any"
                ],
                "amount": [
                    "Any"
                ],
                "discoveryScript": [
                    "str"
                ],
                "vendor": [
                    "str"
                ]
            }
        },
        "ExecutorResourceRequest.resourceName": {
            "name": "resourceName",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExecutorResourceRequest.amount": {
            "name": "amount",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExecutorResourceRequest.discoveryScript": {
            "name": "discoveryScript",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExecutorResourceRequest.vendor": {
            "name": "vendor",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExecutorResourceRequests.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_jvm": [
                    "Optional[Any]"
                ],
                "_requests": [
                    "Optional[Any]"
                ]
            }
        },
        "ExecutorResourceRequests.memory": {
            "name": "memory",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "amount": [
                    "Any"
                ]
            }
        },
        "ExecutorResourceRequests.memoryOverhead": {
            "name": "memoryOverhead",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "amount": [
                    "Any"
                ]
            }
        },
        "ExecutorResourceRequests.pysparkMemory": {
            "name": "pysparkMemory",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "amount": [
                    "Any"
                ]
            }
        },
        "ExecutorResourceRequests.offheapMemory": {
            "name": "offheapMemory",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "amount": [
                    "Any"
                ]
            }
        },
        "ExecutorResourceRequests.cores": {
            "name": "cores",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "amount": [
                    "Any"
                ]
            }
        },
        "ExecutorResourceRequests.resource": {
            "name": "resource",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "resourceName": [
                    "Any"
                ],
                "amount": [
                    "Any"
                ],
                "discoveryScript": [
                    "str"
                ],
                "vendor": [
                    "str"
                ]
            }
        },
        "ExecutorResourceRequests.requests": {
            "name": "requests",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TaskResourceRequest.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resourceName": [
                    "Any"
                ],
                "amount": [
                    "Any"
                ]
            }
        },
        "TaskResourceRequest.resourceName": {
            "name": "resourceName",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TaskResourceRequest.amount": {
            "name": "amount",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TaskResourceRequests.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_jvm": [
                    "Optional[Any]"
                ],
                "_requests": [
                    "Optional[Any]"
                ]
            }
        },
        "TaskResourceRequests.cpus": {
            "name": "cpus",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "amount": [
                    "Any"
                ]
            }
        },
        "TaskResourceRequests.resource": {
            "name": "resource",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "resourceName": [
                    "Any"
                ],
                "amount": [
                    "Any"
                ]
            }
        },
        "TaskResourceRequests.requests": {
            "name": "requests",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/resource/__init__.py": {},
    "pyspark-stubs-master/third_party/3/pyspark/sql/catalog.py": {
        "Catalog.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sparkSession": [
                    "SparkSession"
                ]
            }
        },
        "Catalog.currentDatabase": {
            "name": "currentDatabase",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Catalog.setCurrentDatabase": {
            "name": "setCurrentDatabase",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dbName": [
                    "str"
                ]
            }
        },
        "Catalog.listDatabases": {
            "name": "listDatabases",
            "location": 37,
            "return": [
                "List[Database]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Catalog.listTables": {
            "name": "listTables",
            "location": 38,
            "return": [
                "List[Table]"
            ],
            "arguments": {
                "self": [],
                "dbName": [
                    "Optional[str]"
                ]
            }
        },
        "Catalog.listFunctions": {
            "name": "listFunctions",
            "location": 39,
            "return": [
                "List[Function]"
            ],
            "arguments": {
                "self": [],
                "dbName": [
                    "Optional[str]"
                ]
            }
        },
        "Catalog.listColumns": {
            "name": "listColumns",
            "location": 40,
            "return": [
                "List[Column]"
            ],
            "arguments": {
                "self": [],
                "tableName": [
                    "str"
                ],
                "dbName": [
                    "Optional[str]"
                ]
            }
        },
        "Catalog.createTable": {
            "name": "createTable",
            "location": 43,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "tableName": [
                    "str"
                ],
                "path": [
                    "Optional[str]"
                ],
                "source": [
                    "Optional[str]"
                ],
                "schema": [
                    "Optional[StructType]"
                ],
                "description": [
                    "Optional[str]"
                ]
            }
        },
        "Catalog.dropTempView": {
            "name": "dropTempView",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "viewName": [
                    "str"
                ]
            }
        },
        "Catalog.dropGlobalTempView": {
            "name": "dropGlobalTempView",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "viewName": [
                    "str"
                ]
            }
        },
        "Catalog.registerFunction": {
            "name": "registerFunction",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "f": [
                    "Callable[(..., Any)]"
                ],
                "returnType": [
                    "DataType"
                ]
            }
        },
        "Catalog.isCached": {
            "name": "isCached",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tableName": [
                    "str"
                ]
            }
        },
        "Catalog.cacheTable": {
            "name": "cacheTable",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tableName": [
                    "str"
                ]
            }
        },
        "Catalog.uncacheTable": {
            "name": "uncacheTable",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tableName": [
                    "str"
                ]
            }
        },
        "Catalog.clearCache": {
            "name": "clearCache",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Catalog.refreshTable": {
            "name": "refreshTable",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tableName": [
                    "str"
                ]
            }
        },
        "Catalog.recoverPartitions": {
            "name": "recoverPartitions",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tableName": [
                    "str"
                ]
            }
        },
        "Catalog.refreshByPath": {
            "name": "refreshByPath",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/sql/column.py": {
        "Column.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "JavaObject": []
            }
        },
        "Column.__neg__": {
            "name": "__neg__",
            "location": 36,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": []
            }
        },
        "Column.__add__": {
            "name": "__add__",
            "location": 37,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(Column, LiteralType, DecimalLiteral)]"
                ]
            }
        },
        "Column.__sub__": {
            "name": "__sub__",
            "location": 38,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(Column, LiteralType, DecimalLiteral)]"
                ]
            }
        },
        "Column.__mul__": {
            "name": "__mul__",
            "location": 39,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(Column, LiteralType, DecimalLiteral)]"
                ]
            }
        },
        "Column.__div__": {
            "name": "__div__",
            "location": 40,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(Column, LiteralType, DecimalLiteral)]"
                ]
            }
        },
        "Column.__truediv__": {
            "name": "__truediv__",
            "location": 41,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(Column, LiteralType, DecimalLiteral)]"
                ]
            }
        },
        "Column.__mod__": {
            "name": "__mod__",
            "location": 44,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(Column, LiteralType, DecimalLiteral)]"
                ]
            }
        },
        "Column.__radd__": {
            "name": "__radd__",
            "location": 45,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(LiteralType, DecimalLiteral)]"
                ]
            }
        },
        "Column.__rsub__": {
            "name": "__rsub__",
            "location": 46,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(LiteralType, DecimalLiteral)]"
                ]
            }
        },
        "Column.__rmul__": {
            "name": "__rmul__",
            "location": 47,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(LiteralType, DecimalLiteral)]"
                ]
            }
        },
        "Column.__rdiv__": {
            "name": "__rdiv__",
            "location": 48,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(LiteralType, DecimalLiteral)]"
                ]
            }
        },
        "Column.__rtruediv__": {
            "name": "__rtruediv__",
            "location": 49,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(LiteralType, DecimalLiteral)]"
                ]
            }
        },
        "Column.__rmod__": {
            "name": "__rmod__",
            "location": 50,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(bool, int, float, DecimalLiteral)]"
                ]
            }
        },
        "Column.__pow__": {
            "name": "__pow__",
            "location": 51,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(Column, LiteralType, DecimalLiteral)]"
                ]
            }
        },
        "Column.__rpow__": {
            "name": "__rpow__",
            "location": 52,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(LiteralType, DecimalLiteral)]"
                ]
            }
        },
        "Column.__eq__": {
            "name": "__eq__",
            "location": 53,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(Column, LiteralType, DateTimeLiteral, DecimalLiteral)]"
                ]
            }
        },
        "Column.__ne__": {
            "name": "__ne__",
            "location": 54,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Column.__lt__": {
            "name": "__lt__",
            "location": 55,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(Column, LiteralType, DateTimeLiteral, DecimalLiteral)]"
                ]
            }
        },
        "Column.__le__": {
            "name": "__le__",
            "location": 58,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(Column, LiteralType, DateTimeLiteral, DecimalLiteral)]"
                ]
            }
        },
        "Column.__ge__": {
            "name": "__ge__",
            "location": 61,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(Column, LiteralType, DateTimeLiteral, DecimalLiteral)]"
                ]
            }
        },
        "Column.__gt__": {
            "name": "__gt__",
            "location": 64,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(Column, LiteralType, DateTimeLiteral, DecimalLiteral)]"
                ]
            }
        },
        "Column.eqNullSafe": {
            "name": "eqNullSafe",
            "location": 67,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(Column, LiteralType, DecimalLiteral)]"
                ]
            }
        },
        "Column.__and__": {
            "name": "__and__",
            "location": 70,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Column"
                ]
            }
        },
        "Column.__or__": {
            "name": "__or__",
            "location": 71,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Column"
                ]
            }
        },
        "Column.__invert__": {
            "name": "__invert__",
            "location": 72,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": []
            }
        },
        "Column.__rand__": {
            "name": "__rand__",
            "location": 73,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Column"
                ]
            }
        },
        "Column.__ror__": {
            "name": "__ror__",
            "location": 74,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Column"
                ]
            }
        },
        "Column.__contains__": {
            "name": "__contains__",
            "location": 75,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Column.__getitem__": {
            "name": "__getitem__",
            "location": 76,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Column.bitwiseOR": {
            "name": "bitwiseOR",
            "location": 77,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(Column, int)]"
                ]
            }
        },
        "Column.bitwiseAND": {
            "name": "bitwiseAND",
            "location": 78,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(Column, int)]"
                ]
            }
        },
        "Column.bitwiseXOR": {
            "name": "bitwiseXOR",
            "location": 79,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(Column, int)]"
                ]
            }
        },
        "Column.getItem": {
            "name": "getItem",
            "location": 80,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "Column.getField": {
            "name": "getField",
            "location": 81,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "Column.withField": {
            "name": "withField",
            "location": 82,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "fieldName": [
                    "str"
                ],
                "col": [
                    "Column"
                ]
            }
        },
        "Column.__getattr__": {
            "name": "__getattr__",
            "location": 83,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Any"
                ]
            }
        },
        "Column.__iter__": {
            "name": "__iter__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Column.rlike": {
            "name": "rlike",
            "location": 85,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        },
        "Column.like": {
            "name": "like",
            "location": 86,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        },
        "Column.startswith": {
            "name": "startswith",
            "location": 87,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Union[(str, Column)]"
                ]
            }
        },
        "Column.endswith": {
            "name": "endswith",
            "location": 88,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Union[(str, Column)]"
                ]
            }
        },
        "Column.substr": {
            "name": "substr",
            "location": 92,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "startPos": [
                    "Column"
                ],
                "length": [
                    "Column"
                ]
            }
        },
        "Column.__getslice__": {
            "name": "__getslice__",
            "location": 93,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "startPos": [
                    "int"
                ],
                "length": [
                    "int"
                ]
            }
        },
        "Column.isin": {
            "name": "isin",
            "location": 94,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": []
            }
        },
        "Column.asc": {
            "name": "asc",
            "location": 95,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": []
            }
        },
        "Column.asc_nulls_first": {
            "name": "asc_nulls_first",
            "location": 96,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": []
            }
        },
        "Column.asc_nulls_last": {
            "name": "asc_nulls_last",
            "location": 97,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": []
            }
        },
        "Column.desc": {
            "name": "desc",
            "location": 98,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": []
            }
        },
        "Column.desc_nulls_first": {
            "name": "desc_nulls_first",
            "location": 99,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": []
            }
        },
        "Column.desc_nulls_last": {
            "name": "desc_nulls_last",
            "location": 100,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": []
            }
        },
        "Column.isNull": {
            "name": "isNull",
            "location": 101,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": []
            }
        },
        "Column.isNotNull": {
            "name": "isNotNull",
            "location": 102,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": []
            }
        },
        "Column.alias": {
            "name": "alias",
            "location": 103,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": []
            }
        },
        "Column.name": {
            "name": "name",
            "location": 104,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": []
            }
        },
        "Column.cast": {
            "name": "cast",
            "location": 105,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "dataType": [
                    "Union[(DataType, str)]"
                ]
            }
        },
        "Column.astype": {
            "name": "astype",
            "location": 106,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "dataType": [
                    "Union[(DataType, str)]"
                ]
            }
        },
        "Column.between": {
            "name": "between",
            "location": 107,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "lowerBound": [],
                "upperBound": []
            }
        },
        "Column.when": {
            "name": "when",
            "location": 108,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "Column"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "Column.otherwise": {
            "name": "otherwise",
            "location": 109,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "Column.over": {
            "name": "over",
            "location": 110,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "window": [
                    "WindowSpec"
                ]
            }
        },
        "Column.__nonzero__": {
            "name": "__nonzero__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Column.__bool__": {
            "name": "__bool__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/sql/conf.py": {
        "RuntimeConfig.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jconf": [
                    "JavaObject"
                ]
            }
        },
        "RuntimeConfig.set": {
            "name": "set",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "RuntimeConfig.get": {
            "name": "get",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "default": [
                    "Optional[str]"
                ]
            }
        },
        "RuntimeConfig.unset": {
            "name": "unset",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "RuntimeConfig.isModifiable": {
            "name": "isModifiable",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/sql/context.py": {
        "SQLContext.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sparkContext": [],
                "sparkSession": [
                    "Optional[SparkSession]"
                ],
                "jsqlContext": [
                    "Optional[JavaObject]"
                ]
            }
        },
        "SQLContext.getOrCreate": {
            "name": "getOrCreate",
            "location": 51,
            "return": [
                "SQLContext"
            ],
            "arguments": {
                "cls": [
                    "type"
                ],
                "sc": [
                    "SparkContext"
                ]
            }
        },
        "SQLContext.newSession": {
            "name": "newSession",
            "location": 52,
            "return": [
                "SQLContext"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLContext.setConf": {
            "name": "setConf",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": []
            }
        },
        "SQLContext.getConf": {
            "name": "getConf",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "defaultValue": [
                    "Optional[str]"
                ]
            }
        },
        "SQLContext.udf": {
            "name": "udf",
            "location": 56,
            "return": [
                "UDFRegistration"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLContext.range": {
            "name": "range",
            "location": 57,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int"
                ],
                "end": [
                    "Optional[int]"
                ],
                "step": [
                    "int"
                ],
                "numPartitions": [
                    "Optional[int]"
                ]
            }
        },
        "SQLContext.registerFunction": {
            "name": "registerFunction",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "f": [
                    "Callable[(..., Any)]"
                ],
                "returnType": [
                    "DataType"
                ]
            }
        },
        "SQLContext.registerJavaFunction": {
            "name": "registerJavaFunction",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "javaClassName": [
                    "str"
                ],
                "returnType": [
                    "Optional[DataType]"
                ]
            }
        },
        "SQLContext.createDataFrame": {
            "name": "createDataFrame",
            "location": 105,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "DataFrameLike"
                ],
                "schema": [
                    "Union[(StructType, str)]"
                ],
                "verifySchema": [
                    "bool"
                ]
            }
        },
        "SQLContext.registerDataFrameAsTable": {
            "name": "registerDataFrameAsTable",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "DataFrame"
                ],
                "tableName": [
                    "str"
                ]
            }
        },
        "SQLContext.dropTempTable": {
            "name": "dropTempTable",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tableName": [
                    "str"
                ]
            }
        },
        "SQLContext.createExternalTable": {
            "name": "createExternalTable",
            "location": 113,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "tableName": [
                    "str"
                ],
                "path": [
                    "Optional[str]"
                ],
                "source": [
                    "Optional[str]"
                ],
                "schema": [
                    "Optional[StructType]"
                ]
            }
        },
        "SQLContext.sql": {
            "name": "sql",
            "location": 121,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "sqlQuery": [
                    "str"
                ]
            }
        },
        "SQLContext.table": {
            "name": "table",
            "location": 122,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "tableName": [
                    "str"
                ]
            }
        },
        "SQLContext.tables": {
            "name": "tables",
            "location": 123,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "dbName": [
                    "Optional[str]"
                ]
            }
        },
        "SQLContext.tableNames": {
            "name": "tableNames",
            "location": 124,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "dbName": [
                    "Optional[str]"
                ]
            }
        },
        "SQLContext.cacheTable": {
            "name": "cacheTable",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tableName": [
                    "str"
                ]
            }
        },
        "SQLContext.uncacheTable": {
            "name": "uncacheTable",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tableName": [
                    "str"
                ]
            }
        },
        "SQLContext.clearCache": {
            "name": "clearCache",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLContext.read": {
            "name": "read",
            "location": 129,
            "return": [
                "DataFrameReader"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLContext.readStream": {
            "name": "readStream",
            "location": 131,
            "return": [
                "DataStreamReader"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLContext.streams": {
            "name": "streams",
            "location": 133,
            "return": [
                "StreamingQueryManager"
            ],
            "arguments": {
                "self": []
            }
        },
        "HiveContext.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sparkContext": [
                    "SparkContext"
                ],
                "jhiveContext": [
                    "Optional[JavaObject]"
                ]
            }
        },
        "HiveContext.refreshTable": {
            "name": "refreshTable",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tableName": [
                    "str"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/sql/dataframe.py": {
        "DataFrame.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jdf": [
                    "JavaObject"
                ],
                "sql_ctx": [
                    "SQLContext"
                ]
            }
        },
        "DataFrame.rdd": {
            "name": "rdd",
            "location": 57,
            "return": [
                "RDD[Row]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.na": {
            "name": "na",
            "location": 59,
            "return": [
                "DataFrameNaFunctions"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.stat": {
            "name": "stat",
            "location": 61,
            "return": [
                "DataFrameStatFunctions"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.toJSON": {
            "name": "toJSON",
            "location": 62,
            "return": [
                "RDD[str]"
            ],
            "arguments": {
                "self": [],
                "use_unicode": [
                    "bool"
                ]
            }
        },
        "DataFrame.registerTempTable": {
            "name": "registerTempTable",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "DataFrame.createTempView": {
            "name": "createTempView",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "DataFrame.createOrReplaceTempView": {
            "name": "createOrReplaceTempView",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "DataFrame.createGlobalTempView": {
            "name": "createGlobalTempView",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "DataFrame.write": {
            "name": "write",
            "location": 68,
            "return": [
                "DataFrameWriter"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.writeStream": {
            "name": "writeStream",
            "location": 70,
            "return": [
                "DataStreamWriter"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.schema": {
            "name": "schema",
            "location": 72,
            "return": [
                "StructType"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.printSchema": {
            "name": "printSchema",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.explain": {
            "name": "explain",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extended": [
                    "Optional[Union[(bool, str)]]"
                ],
                "mode": [
                    "Optional[str]"
                ]
            }
        },
        "DataFrame.exceptAll": {
            "name": "exceptAll",
            "location": 77,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "DataFrame"
                ]
            }
        },
        "DataFrame.isLocal": {
            "name": "isLocal",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.isStreaming": {
            "name": "isStreaming",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.show": {
            "name": "show",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "truncate": [
                    "Union[(bool, int)]"
                ],
                "vertical": [
                    "bool"
                ]
            }
        },
        "DataFrame.checkpoint": {
            "name": "checkpoint",
            "location": 84,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "eager": [
                    "bool"
                ]
            }
        },
        "DataFrame.localCheckpoint": {
            "name": "localCheckpoint",
            "location": 85,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "eager": [
                    "bool"
                ]
            }
        },
        "DataFrame.withWatermark": {
            "name": "withWatermark",
            "location": 86,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "eventTime": [
                    "ColumnOrName"
                ],
                "delayThreshold": [
                    "str"
                ]
            }
        },
        "DataFrame.hint": {
            "name": "hint",
            "location": 89,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "DataFrame.count": {
            "name": "count",
            "location": 90,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.collect": {
            "name": "collect",
            "location": 91,
            "return": [
                "List[Row]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.toLocalIterator": {
            "name": "toLocalIterator",
            "location": 92,
            "return": [
                "Iterator[Row]"
            ],
            "arguments": {
                "self": [],
                "prefetchPartitions": [
                    "bool"
                ]
            }
        },
        "DataFrame.limit": {
            "name": "limit",
            "location": 93,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "int"
                ]
            }
        },
        "DataFrame.take": {
            "name": "take",
            "location": 94,
            "return": [
                "List[Row]"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "int"
                ]
            }
        },
        "DataFrame.tail": {
            "name": "tail",
            "location": 95,
            "return": [
                "List[Row]"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "int"
                ]
            }
        },
        "DataFrame.foreach": {
            "name": "foreach",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([Row], None)]"
                ]
            }
        },
        "DataFrame.foreachPartition": {
            "name": "foreachPartition",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([Iterator[Row]], None)]"
                ]
            }
        },
        "DataFrame.cache": {
            "name": "cache",
            "location": 98,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.persist": {
            "name": "persist",
            "location": 99,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "storageLevel": [
                    "StorageLevel"
                ]
            }
        },
        "DataFrame.storageLevel": {
            "name": "storageLevel",
            "location": 101,
            "return": [
                "StorageLevel"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.unpersist": {
            "name": "unpersist",
            "location": 102,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "blocking": [
                    "bool"
                ]
            }
        },
        "DataFrame.coalesce": {
            "name": "coalesce",
            "location": 103,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "numPartitions": [
                    "int"
                ]
            }
        },
        "DataFrame.repartition": {
            "name": "repartition",
            "location": 107,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.repartitionByRange": {
            "name": "repartitionByRange",
            "location": 113,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.distinct": {
            "name": "distinct",
            "location": 114,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.sample": {
            "name": "sample",
            "location": 118,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "withReplacement": [
                    "Optional[bool]"
                ],
                "fraction": [
                    "float"
                ],
                "seed": [
                    "Optional[int]"
                ]
            }
        },
        "DataFrame.sampleBy": {
            "name": "sampleBy",
            "location": 124,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "col": [
                    "str"
                ],
                "fractions": [
                    "Dict[(Any, float)]"
                ],
                "seed": [
                    "Optional[int]"
                ]
            }
        },
        "DataFrame.randomSplit": {
            "name": "randomSplit",
            "location": 127,
            "return": [
                "List[DataFrame]"
            ],
            "arguments": {
                "self": [],
                "weights": [
                    "List[float]"
                ],
                "seed": [
                    "Optional[int]"
                ]
            }
        },
        "DataFrame.dtypes": {
            "name": "dtypes",
            "location": 131,
            "return": [
                "List[Tuple[(str, str)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.columns": {
            "name": "columns",
            "location": 133,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.colRegex": {
            "name": "colRegex",
            "location": 134,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "colName": [
                    "str"
                ]
            }
        },
        "DataFrame.alias": {
            "name": "alias",
            "location": 135,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "alias": [
                    "str"
                ]
            }
        },
        "DataFrame.crossJoin": {
            "name": "crossJoin",
            "location": 136,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "DataFrame"
                ]
            }
        },
        "DataFrame.join": {
            "name": "join",
            "location": 137,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "DataFrame"
                ],
                "on": [
                    "Optional[Union[(str, List[str], Column, List[Column])]]"
                ],
                "how": [
                    "Optional[str]"
                ]
            }
        },
        "DataFrame.sortWithinPartitions": {
            "name": "sortWithinPartitions",
            "location": 143,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.sort": {
            "name": "sort",
            "location": 148,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.orderBy": {
            "name": "orderBy",
            "location": 153,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.describe": {
            "name": "describe",
            "location": 158,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.summary": {
            "name": "summary",
            "location": 159,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.head": {
            "name": "head",
            "location": 163,
            "return": [
                "List[Row]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "DataFrame.first": {
            "name": "first",
            "location": 164,
            "return": [
                "Row"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.__getitem__": {
            "name": "__getitem__",
            "location": 165,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Union[(int, str, Column, List, Tuple)]"
                ]
            }
        },
        "DataFrame.__getattr__": {
            "name": "__getattr__",
            "location": 166,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "DataFrame.select": {
            "name": "select",
            "location": 170,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "__cols": [
                    "Union[(List[Column], List[str])]"
                ]
            }
        },
        "DataFrame.selectExpr": {
            "name": "selectExpr",
            "location": 174,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.filter": {
            "name": "filter",
            "location": 175,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "ColumnOrName"
                ]
            }
        },
        "DataFrame.groupBy": {
            "name": "groupBy",
            "location": 179,
            "return": [
                "GroupedData"
            ],
            "arguments": {
                "self": [],
                "__cols": [
                    "Union[(List[Column], List[str])]"
                ]
            }
        },
        "DataFrame.rollup": {
            "name": "rollup",
            "location": 183,
            "return": [
                "GroupedData"
            ],
            "arguments": {
                "self": [],
                "__cols": [
                    "Union[(List[Column], List[str])]"
                ]
            }
        },
        "DataFrame.cube": {
            "name": "cube",
            "location": 187,
            "return": [
                "GroupedData"
            ],
            "arguments": {
                "self": [],
                "__cols": [
                    "Union[(List[Column], List[str])]"
                ]
            }
        },
        "DataFrame.agg": {
            "name": "agg",
            "location": 188,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.union": {
            "name": "union",
            "location": 189,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "DataFrame"
                ]
            }
        },
        "DataFrame.unionAll": {
            "name": "unionAll",
            "location": 190,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "DataFrame"
                ]
            }
        },
        "DataFrame.unionByName": {
            "name": "unionByName",
            "location": 191,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "DataFrame"
                ],
                "allowMissingColumns": [
                    "bool"
                ]
            }
        },
        "DataFrame.intersect": {
            "name": "intersect",
            "location": 194,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "DataFrame"
                ]
            }
        },
        "DataFrame.intersectAll": {
            "name": "intersectAll",
            "location": 195,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "DataFrame"
                ]
            }
        },
        "DataFrame.subtract": {
            "name": "subtract",
            "location": 196,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "DataFrame"
                ]
            }
        },
        "DataFrame.dropDuplicates": {
            "name": "dropDuplicates",
            "location": 197,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "subset": [
                    "Optional[List[str]]"
                ]
            }
        },
        "DataFrame.dropna": {
            "name": "dropna",
            "location": 198,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "how": [
                    "str"
                ],
                "thresh": [
                    "Optional[int]"
                ],
                "subset": [
                    "Optional[List[str]]"
                ]
            }
        },
        "DataFrame.fillna": {
            "name": "fillna",
            "location": 211,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[(str, LiteralType)]"
                ]
            }
        },
        "DataFrame.replace": {
            "name": "replace",
            "location": 233,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "to_replace": [
                    "List[LiteralType]"
                ],
                "value": [
                    "OptionalPrimitiveType"
                ],
                "subset": [
                    "Optional[List[str]]"
                ]
            }
        },
        "DataFrame.approxQuantile": {
            "name": "approxQuantile",
            "location": 239,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "col": [
                    "str"
                ],
                "probabilities": [
                    "List[float]"
                ],
                "relativeError": [
                    "float"
                ]
            }
        },
        "DataFrame.corr": {
            "name": "corr",
            "location": 242,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "col1": [
                    "str"
                ],
                "col2": [
                    "str"
                ],
                "method": [
                    "Optional[str]"
                ]
            }
        },
        "DataFrame.cov": {
            "name": "cov",
            "location": 243,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "col1": [
                    "str"
                ],
                "col2": [
                    "str"
                ]
            }
        },
        "DataFrame.crosstab": {
            "name": "crosstab",
            "location": 244,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "col1": [
                    "str"
                ],
                "col2": [
                    "str"
                ]
            }
        },
        "DataFrame.freqItems": {
            "name": "freqItems",
            "location": 245,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "cols": [
                    "List[str]"
                ],
                "support": [
                    "Optional[float]"
                ]
            }
        },
        "DataFrame.withColumn": {
            "name": "withColumn",
            "location": 248,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "colName": [
                    "str"
                ],
                "col": [
                    "Column"
                ]
            }
        },
        "DataFrame.withColumnRenamed": {
            "name": "withColumnRenamed",
            "location": 249,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "existing": [
                    "str"
                ],
                "new": [
                    "str"
                ]
            }
        },
        "DataFrame.drop": {
            "name": "drop",
            "location": 253,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.toDF": {
            "name": "toDF",
            "location": 254,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.transform": {
            "name": "transform",
            "location": 255,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable[([DataFrame], DataFrame)]"
                ]
            }
        },
        "DataFrame.groupby": {
            "name": "groupby",
            "location": 259,
            "return": [
                "GroupedData"
            ],
            "arguments": {
                "self": [],
                "__cols": [
                    "Union[(List[Column], List[str])]"
                ]
            }
        },
        "DataFrame.drop_duplicates": {
            "name": "drop_duplicates",
            "location": 260,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "subset": [
                    "Optional[List[str]]"
                ]
            }
        },
        "DataFrame.where": {
            "name": "where",
            "location": 261,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "ColumnOrName"
                ]
            }
        },
        "DataFrame.sameSemantics": {
            "name": "sameSemantics",
            "location": 262,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "DataFrame"
                ]
            }
        },
        "DataFrame.semanticHash": {
            "name": "semanticHash",
            "location": 263,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.inputFiles": {
            "name": "inputFiles",
            "location": 264,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.writeTo": {
            "name": "writeTo",
            "location": 265,
            "return": [
                "DataFrameWriterV2"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str"
                ]
            }
        },
        "DataFrameNaFunctions.__init__": {
            "name": "__init__",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "DataFrame"
                ]
            }
        },
        "DataFrameNaFunctions.drop": {
            "name": "drop",
            "location": 270,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "how": [
                    "str"
                ],
                "thresh": [
                    "Optional[int]"
                ],
                "subset": [
                    "Optional[List[str]]"
                ]
            }
        },
        "DataFrameNaFunctions.fill": {
            "name": "fill",
            "location": 281,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[(str, LiteralType)]"
                ]
            }
        },
        "DataFrameNaFunctions.replace": {
            "name": "replace",
            "location": 303,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "to_replace": [
                    "List[LiteralType]"
                ],
                "value": [
                    "OptionalPrimitiveType"
                ],
                "subset": [
                    "Optional[List[str]]"
                ]
            }
        },
        "DataFrameStatFunctions.__init__": {
            "name": "__init__",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "DataFrame"
                ]
            }
        },
        "DataFrameStatFunctions.approxQuantile": {
            "name": "approxQuantile",
            "location": 313,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "col": [
                    "str"
                ],
                "probabilities": [
                    "List[float]"
                ],
                "relativeError": [
                    "float"
                ]
            }
        },
        "DataFrameStatFunctions.corr": {
            "name": "corr",
            "location": 316,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "col1": [
                    "str"
                ],
                "col2": [
                    "str"
                ],
                "method": [
                    "Optional[str]"
                ]
            }
        },
        "DataFrameStatFunctions.cov": {
            "name": "cov",
            "location": 317,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "col1": [
                    "str"
                ],
                "col2": [
                    "str"
                ]
            }
        },
        "DataFrameStatFunctions.crosstab": {
            "name": "crosstab",
            "location": 318,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "col1": [
                    "str"
                ],
                "col2": [
                    "str"
                ]
            }
        },
        "DataFrameStatFunctions.freqItems": {
            "name": "freqItems",
            "location": 319,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "cols": [
                    "List[str]"
                ],
                "support": [
                    "Optional[float]"
                ]
            }
        },
        "DataFrameStatFunctions.sampleBy": {
            "name": "sampleBy",
            "location": 322,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "col": [
                    "str"
                ],
                "fractions": [
                    "Dict[(Any, float)]"
                ],
                "seed": [
                    "Optional[int]"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/sql/functions.py": {
        "approxCountDistinct": {
            "name": "approxCountDistinct",
            "location": 40,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "rsd": [
                    "Optional[float]"
                ]
            }
        },
        "approx_count_distinct": {
            "name": "approx_count_distinct",
            "location": 41,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "rsd": [
                    "Optional[float]"
                ]
            }
        },
        "broadcast": {
            "name": "broadcast",
            "location": 42,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "df": [
                    "DataFrame"
                ]
            }
        },
        "coalesce": {
            "name": "coalesce",
            "location": 43,
            "return": [
                "Column"
            ],
            "arguments": {}
        },
        "corr": {
            "name": "corr",
            "location": 44,
            "return": [
                "Column"
            ],
            "arguments": {
                "col1": [
                    "ColumnOrName"
                ],
                "col2": [
                    "ColumnOrName"
                ]
            }
        },
        "covar_pop": {
            "name": "covar_pop",
            "location": 45,
            "return": [
                "Column"
            ],
            "arguments": {
                "col1": [
                    "ColumnOrName"
                ],
                "col2": [
                    "ColumnOrName"
                ]
            }
        },
        "covar_samp": {
            "name": "covar_samp",
            "location": 46,
            "return": [
                "Column"
            ],
            "arguments": {
                "col1": [
                    "ColumnOrName"
                ],
                "col2": [
                    "ColumnOrName"
                ]
            }
        },
        "countDistinct": {
            "name": "countDistinct",
            "location": 47,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "first": {
            "name": "first",
            "location": 48,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "ignorenulls": [
                    "bool"
                ]
            }
        },
        "grouping": {
            "name": "grouping",
            "location": 49,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "grouping_id": {
            "name": "grouping_id",
            "location": 50,
            "return": [
                "Column"
            ],
            "arguments": {}
        },
        "input_file_name": {
            "name": "input_file_name",
            "location": 51,
            "return": [
                "Column"
            ],
            "arguments": {}
        },
        "isnan": {
            "name": "isnan",
            "location": 52,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "isnull": {
            "name": "isnull",
            "location": 53,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "last": {
            "name": "last",
            "location": 54,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "ignorenulls": [
                    "bool"
                ]
            }
        },
        "monotonically_increasing_id": {
            "name": "monotonically_increasing_id",
            "location": 55,
            "return": [
                "Column"
            ],
            "arguments": {}
        },
        "nanvl": {
            "name": "nanvl",
            "location": 56,
            "return": [
                "Column"
            ],
            "arguments": {
                "col1": [
                    "ColumnOrName"
                ],
                "col2": [
                    "ColumnOrName"
                ]
            }
        },
        "percentile_approx": {
            "name": "percentile_approx",
            "location": 57,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "percentage": [
                    "Union[(Column, float, List[float])]"
                ],
                "accuracy": [
                    "Union[(Column, float)]"
                ]
            }
        },
        "rand": {
            "name": "rand",
            "location": 62,
            "return": [
                "Column"
            ],
            "arguments": {
                "seed": [
                    "Optional[int]"
                ]
            }
        },
        "randn": {
            "name": "randn",
            "location": 63,
            "return": [
                "Column"
            ],
            "arguments": {
                "seed": [
                    "Optional[int]"
                ]
            }
        },
        "round": {
            "name": "round",
            "location": 64,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "scale": [
                    "int"
                ]
            }
        },
        "bround": {
            "name": "bround",
            "location": 65,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "scale": [
                    "int"
                ]
            }
        },
        "shiftLeft": {
            "name": "shiftLeft",
            "location": 66,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "numBits": [
                    "int"
                ]
            }
        },
        "shiftRight": {
            "name": "shiftRight",
            "location": 67,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "numBits": [
                    "int"
                ]
            }
        },
        "shiftRightUnsigned": {
            "name": "shiftRightUnsigned",
            "location": 68,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [],
                "numBits": []
            }
        },
        "spark_partition_id": {
            "name": "spark_partition_id",
            "location": 69,
            "return": [
                "Column"
            ],
            "arguments": {}
        },
        "expr": {
            "name": "expr",
            "location": 70,
            "return": [
                "Column"
            ],
            "arguments": {
                "str": [
                    "str"
                ]
            }
        },
        "struct": {
            "name": "struct",
            "location": 71,
            "return": [
                "Column"
            ],
            "arguments": {}
        },
        "greatest": {
            "name": "greatest",
            "location": 72,
            "return": [
                "Column"
            ],
            "arguments": {}
        },
        "least": {
            "name": "least",
            "location": 73,
            "return": [
                "Column"
            ],
            "arguments": {}
        },
        "when": {
            "name": "when",
            "location": 74,
            "return": [
                "Column"
            ],
            "arguments": {
                "condition": [
                    "Column"
                ],
                "value": []
            }
        },
        "log": {
            "name": "log",
            "location": 78,
            "return": [
                "Column"
            ],
            "arguments": {
                "arg1": [
                    "float"
                ],
                "arg2": [
                    "ColumnOrName"
                ]
            }
        },
        "log2": {
            "name": "log2",
            "location": 79,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "conv": {
            "name": "conv",
            "location": 80,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "fromBase": [
                    "int"
                ],
                "toBase": [
                    "int"
                ]
            }
        },
        "factorial": {
            "name": "factorial",
            "location": 81,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "lag": {
            "name": "lag",
            "location": 82,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "offset": [
                    "int"
                ],
                "default": [
                    "Optional[Any]"
                ]
            }
        },
        "lead": {
            "name": "lead",
            "location": 85,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "offset": [
                    "int"
                ],
                "default": [
                    "Optional[Any]"
                ]
            }
        },
        "ntile": {
            "name": "ntile",
            "location": 88,
            "return": [
                "Column"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "current_date": {
            "name": "current_date",
            "location": 89,
            "return": [
                "Column"
            ],
            "arguments": {}
        },
        "current_timestamp": {
            "name": "current_timestamp",
            "location": 90,
            "return": [
                "Column"
            ],
            "arguments": {}
        },
        "date_format": {
            "name": "date_format",
            "location": 91,
            "return": [
                "Column"
            ],
            "arguments": {
                "date": [
                    "ColumnOrName"
                ],
                "format": [
                    "str"
                ]
            }
        },
        "year": {
            "name": "year",
            "location": 92,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "quarter": {
            "name": "quarter",
            "location": 93,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "month": {
            "name": "month",
            "location": 94,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "dayofweek": {
            "name": "dayofweek",
            "location": 95,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "dayofmonth": {
            "name": "dayofmonth",
            "location": 96,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "dayofyear": {
            "name": "dayofyear",
            "location": 97,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "hour": {
            "name": "hour",
            "location": 98,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "minute": {
            "name": "minute",
            "location": 99,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "second": {
            "name": "second",
            "location": 100,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "weekofyear": {
            "name": "weekofyear",
            "location": 101,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "date_add": {
            "name": "date_add",
            "location": 102,
            "return": [
                "Column"
            ],
            "arguments": {
                "start": [
                    "ColumnOrName"
                ],
                "days": [
                    "int"
                ]
            }
        },
        "date_sub": {
            "name": "date_sub",
            "location": 103,
            "return": [
                "Column"
            ],
            "arguments": {
                "start": [
                    "ColumnOrName"
                ],
                "days": [
                    "int"
                ]
            }
        },
        "datediff": {
            "name": "datediff",
            "location": 104,
            "return": [
                "Column"
            ],
            "arguments": {
                "end": [
                    "ColumnOrName"
                ],
                "start": [
                    "ColumnOrName"
                ]
            }
        },
        "add_months": {
            "name": "add_months",
            "location": 105,
            "return": [
                "Column"
            ],
            "arguments": {
                "start": [
                    "ColumnOrName"
                ],
                "months": [
                    "int"
                ]
            }
        },
        "months_between": {
            "name": "months_between",
            "location": 106,
            "return": [
                "Column"
            ],
            "arguments": {
                "date1": [
                    "ColumnOrName"
                ],
                "date2": [
                    "ColumnOrName"
                ],
                "roundOff": [
                    "bool"
                ]
            }
        },
        "to_date": {
            "name": "to_date",
            "location": 109,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "format": [
                    "Optional[str]"
                ]
            }
        },
        "to_timestamp": {
            "name": "to_timestamp",
            "location": 113,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "format": [
                    "str"
                ]
            }
        },
        "trunc": {
            "name": "trunc",
            "location": 114,
            "return": [
                "Column"
            ],
            "arguments": {
                "date": [
                    "ColumnOrName"
                ],
                "format": [
                    "str"
                ]
            }
        },
        "date_trunc": {
            "name": "date_trunc",
            "location": 115,
            "return": [
                "Column"
            ],
            "arguments": {
                "format": [
                    "str"
                ],
                "timestamp": [
                    "ColumnOrName"
                ]
            }
        },
        "next_day": {
            "name": "next_day",
            "location": 116,
            "return": [
                "Column"
            ],
            "arguments": {
                "date": [
                    "ColumnOrName"
                ],
                "dayOfWeek": [
                    "str"
                ]
            }
        },
        "last_day": {
            "name": "last_day",
            "location": 117,
            "return": [
                "Column"
            ],
            "arguments": {
                "date": [
                    "ColumnOrName"
                ]
            }
        },
        "from_unixtime": {
            "name": "from_unixtime",
            "location": 118,
            "return": [
                "Column"
            ],
            "arguments": {
                "timestamp": [
                    "ColumnOrName"
                ],
                "format": [
                    "str"
                ]
            }
        },
        "unix_timestamp": {
            "name": "unix_timestamp",
            "location": 119,
            "return": [
                "Column"
            ],
            "arguments": {
                "timestamp": [
                    "Optional[ColumnOrName]"
                ],
                "format": [
                    "str"
                ]
            }
        },
        "from_utc_timestamp": {
            "name": "from_utc_timestamp",
            "location": 122,
            "return": [
                "Column"
            ],
            "arguments": {
                "timestamp": [
                    "ColumnOrName"
                ],
                "tz": [
                    "ColumnOrName"
                ]
            }
        },
        "to_utc_timestamp": {
            "name": "to_utc_timestamp",
            "location": 123,
            "return": [
                "Column"
            ],
            "arguments": {
                "timestamp": [
                    "ColumnOrName"
                ],
                "tz": [
                    "ColumnOrName"
                ]
            }
        },
        "timestamp_seconds": {
            "name": "timestamp_seconds",
            "location": 124,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "window": {
            "name": "window",
            "location": 125,
            "return": [
                "Column"
            ],
            "arguments": {
                "timeColumn": [
                    "ColumnOrName"
                ],
                "windowDuration": [
                    "str"
                ],
                "slideDuration": [
                    "Optional[str]"
                ],
                "startTime": [
                    "Optional[str]"
                ]
            }
        },
        "crc32": {
            "name": "crc32",
            "location": 131,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "md5": {
            "name": "md5",
            "location": 132,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "sha1": {
            "name": "sha1",
            "location": 133,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "sha2": {
            "name": "sha2",
            "location": 134,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "numBits": [
                    "int"
                ]
            }
        },
        "hash": {
            "name": "hash",
            "location": 135,
            "return": [
                "Column"
            ],
            "arguments": {}
        },
        "xxhash64": {
            "name": "xxhash64",
            "location": 136,
            "return": [
                "Column"
            ],
            "arguments": {}
        },
        "concat": {
            "name": "concat",
            "location": 137,
            "return": [
                "Column"
            ],
            "arguments": {}
        },
        "concat_ws": {
            "name": "concat_ws",
            "location": 138,
            "return": [
                "Column"
            ],
            "arguments": {
                "sep": [
                    "str"
                ]
            }
        },
        "decode": {
            "name": "decode",
            "location": 139,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "charset": [
                    "str"
                ]
            }
        },
        "encode": {
            "name": "encode",
            "location": 140,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "charset": [
                    "str"
                ]
            }
        },
        "format_number": {
            "name": "format_number",
            "location": 141,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "d": [
                    "int"
                ]
            }
        },
        "format_string": {
            "name": "format_string",
            "location": 142,
            "return": [
                "Column"
            ],
            "arguments": {
                "format": [
                    "str"
                ]
            }
        },
        "instr": {
            "name": "instr",
            "location": 143,
            "return": [
                "Column"
            ],
            "arguments": {
                "str": [
                    "ColumnOrName"
                ],
                "substr": [
                    "str"
                ]
            }
        },
        "overlay": {
            "name": "overlay",
            "location": 144,
            "return": [
                "Column"
            ],
            "arguments": {
                "src": [
                    "ColumnOrName"
                ],
                "replace": [
                    "ColumnOrName"
                ],
                "pos": [
                    "Union[(Column, int)]"
                ],
                "len": [
                    "Union[(Column, int)]"
                ]
            }
        },
        "substring": {
            "name": "substring",
            "location": 150,
            "return": [
                "Column"
            ],
            "arguments": {
                "str": [
                    "ColumnOrName"
                ],
                "pos": [
                    "int"
                ],
                "len": [
                    "int"
                ]
            }
        },
        "substring_index": {
            "name": "substring_index",
            "location": 151,
            "return": [
                "Column"
            ],
            "arguments": {
                "str": [
                    "ColumnOrName"
                ],
                "delim": [
                    "str"
                ],
                "count": [
                    "int"
                ]
            }
        },
        "levenshtein": {
            "name": "levenshtein",
            "location": 152,
            "return": [
                "Column"
            ],
            "arguments": {
                "left": [
                    "ColumnOrName"
                ],
                "right": [
                    "ColumnOrName"
                ]
            }
        },
        "locate": {
            "name": "locate",
            "location": 153,
            "return": [
                "Column"
            ],
            "arguments": {
                "substr": [
                    "str"
                ],
                "str": [
                    "Column"
                ],
                "pos": [
                    "int"
                ]
            }
        },
        "lpad": {
            "name": "lpad",
            "location": 154,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "Column"
                ],
                "len": [
                    "int"
                ],
                "pad": [
                    "str"
                ]
            }
        },
        "rpad": {
            "name": "rpad",
            "location": 155,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "Column"
                ],
                "len": [
                    "int"
                ],
                "pad": [
                    "str"
                ]
            }
        },
        "repeat": {
            "name": "repeat",
            "location": 156,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "Column"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "split": {
            "name": "split",
            "location": 157,
            "return": [
                "Column"
            ],
            "arguments": {
                "str": [
                    "Column"
                ],
                "pattern": [
                    "str"
                ],
                "limit": [
                    "int"
                ]
            }
        },
        "regexp_extract": {
            "name": "regexp_extract",
            "location": 158,
            "return": [
                "Column"
            ],
            "arguments": {
                "str": [
                    "ColumnOrName"
                ],
                "pattern": [
                    "str"
                ],
                "idx": [
                    "int"
                ]
            }
        },
        "regexp_replace": {
            "name": "regexp_replace",
            "location": 159,
            "return": [
                "Column"
            ],
            "arguments": {
                "str": [
                    "ColumnOrName"
                ],
                "pattern": [
                    "str"
                ],
                "replacement": [
                    "str"
                ]
            }
        },
        "initcap": {
            "name": "initcap",
            "location": 160,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "soundex": {
            "name": "soundex",
            "location": 161,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "bin": {
            "name": "bin",
            "location": 162,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "hex": {
            "name": "hex",
            "location": 163,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "unhex": {
            "name": "unhex",
            "location": 164,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "length": {
            "name": "length",
            "location": 165,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "translate": {
            "name": "translate",
            "location": 166,
            "return": [
                "Column"
            ],
            "arguments": {
                "srcCol": [
                    "ColumnOrName"
                ],
                "matching": [
                    "str"
                ],
                "replace": [
                    "str"
                ]
            }
        },
        "map_from_arrays": {
            "name": "map_from_arrays",
            "location": 167,
            "return": [
                "Column"
            ],
            "arguments": {
                "col1": [
                    "ColumnOrName"
                ],
                "col2": [
                    "ColumnOrName"
                ]
            }
        },
        "create_map": {
            "name": "create_map",
            "location": 168,
            "return": [
                "Column"
            ],
            "arguments": {}
        },
        "array": {
            "name": "array",
            "location": 169,
            "return": [
                "Column"
            ],
            "arguments": {}
        },
        "array_contains": {
            "name": "array_contains",
            "location": 170,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "arrays_overlap": {
            "name": "arrays_overlap",
            "location": 171,
            "return": [
                "Column"
            ],
            "arguments": {
                "a1": [
                    "ColumnOrName"
                ],
                "a2": [
                    "ColumnOrName"
                ]
            }
        },
        "slice": {
            "name": "slice",
            "location": 172,
            "return": [
                "Column"
            ],
            "arguments": {
                "x": [
                    "ColumnOrName"
                ],
                "start": [
                    "int"
                ],
                "length": [
                    "int"
                ]
            }
        },
        "array_join": {
            "name": "array_join",
            "location": 173,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "delimiter": [
                    "str"
                ],
                "null_replacement": [
                    "Optional[str]"
                ]
            }
        },
        "array_position": {
            "name": "array_position",
            "location": 176,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "element_at": {
            "name": "element_at",
            "location": 177,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "extraction": [
                    "Any"
                ]
            }
        },
        "array_remove": {
            "name": "array_remove",
            "location": 178,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "element": [
                    "Any"
                ]
            }
        },
        "array_distinct": {
            "name": "array_distinct",
            "location": 179,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "array_intersect": {
            "name": "array_intersect",
            "location": 180,
            "return": [
                "Column"
            ],
            "arguments": {
                "col1": [
                    "ColumnOrName"
                ],
                "col2": [
                    "ColumnOrName"
                ]
            }
        },
        "array_union": {
            "name": "array_union",
            "location": 181,
            "return": [
                "Column"
            ],
            "arguments": {
                "col1": [
                    "ColumnOrName"
                ],
                "col2": [
                    "ColumnOrName"
                ]
            }
        },
        "array_except": {
            "name": "array_except",
            "location": 182,
            "return": [
                "Column"
            ],
            "arguments": {
                "col1": [
                    "ColumnOrName"
                ],
                "col2": [
                    "ColumnOrName"
                ]
            }
        },
        "explode": {
            "name": "explode",
            "location": 183,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "explode_outer": {
            "name": "explode_outer",
            "location": 184,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "posexplode": {
            "name": "posexplode",
            "location": 185,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "posexplode_outer": {
            "name": "posexplode_outer",
            "location": 186,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "get_json_object": {
            "name": "get_json_object",
            "location": 187,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "json_tuple": {
            "name": "json_tuple",
            "location": 188,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "from_json": {
            "name": "from_json",
            "location": 189,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "schema": [
                    "Union[(ArrayType, StructType, Column, str)]"
                ],
                "options": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "to_json": {
            "name": "to_json",
            "location": 194,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "options": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "schema_of_json": {
            "name": "schema_of_json",
            "location": 195,
            "return": [
                "Column"
            ],
            "arguments": {
                "json": [
                    "ColumnOrName"
                ],
                "options": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "schema_of_csv": {
            "name": "schema_of_csv",
            "location": 196,
            "return": [
                "Column"
            ],
            "arguments": {
                "csv": [
                    "ColumnOrName"
                ],
                "options": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "to_csv": {
            "name": "to_csv",
            "location": 197,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "options": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "size": {
            "name": "size",
            "location": 198,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "array_min": {
            "name": "array_min",
            "location": 199,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "array_max": {
            "name": "array_max",
            "location": 200,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "sort_array": {
            "name": "sort_array",
            "location": 201,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "asc": [
                    "bool"
                ]
            }
        },
        "array_sort": {
            "name": "array_sort",
            "location": 202,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "shuffle": {
            "name": "shuffle",
            "location": 203,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "reverse": {
            "name": "reverse",
            "location": 204,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "flatten": {
            "name": "flatten",
            "location": 205,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "map_keys": {
            "name": "map_keys",
            "location": 206,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "map_values": {
            "name": "map_values",
            "location": 207,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "map_entries": {
            "name": "map_entries",
            "location": 208,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "map_from_entries": {
            "name": "map_from_entries",
            "location": 209,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "array_repeat": {
            "name": "array_repeat",
            "location": 210,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "count": [
                    "Union[(Column, int)]"
                ]
            }
        },
        "arrays_zip": {
            "name": "arrays_zip",
            "location": 211,
            "return": [
                "Column"
            ],
            "arguments": {}
        },
        "map_concat": {
            "name": "map_concat",
            "location": 212,
            "return": [
                "Column"
            ],
            "arguments": {}
        },
        "sequence": {
            "name": "sequence",
            "location": 213,
            "return": [
                "Column"
            ],
            "arguments": {
                "start": [
                    "ColumnOrName"
                ],
                "stop": [
                    "ColumnOrName"
                ],
                "step": [
                    "Optional[ColumnOrName]"
                ]
            }
        },
        "from_csv": {
            "name": "from_csv",
            "location": 216,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "schema": [
                    "Union[(StructType, Column, str)]"
                ],
                "options": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "transform": {
            "name": "transform",
            "location": 224,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "f": [
                    "Callable[([Column, Column], Column)]"
                ]
            }
        },
        "exists": {
            "name": "exists",
            "location": 225,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "f": [
                    "Callable[([Column], Column)]"
                ]
            }
        },
        "forall": {
            "name": "forall",
            "location": 226,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "f": [
                    "Callable[([Column], Column)]"
                ]
            }
        },
        "filter": {
            "name": "filter",
            "location": 230,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "f": [
                    "Callable[([Column, Column], Column)]"
                ]
            }
        },
        "aggregate": {
            "name": "aggregate",
            "location": 231,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "zero": [
                    "ColumnOrName"
                ],
                "merge": [
                    "Callable[([Column, Column], Column)]"
                ],
                "finish": [
                    "Optional[Callable[([Column], Column)]]"
                ]
            }
        },
        "zip_with": {
            "name": "zip_with",
            "location": 237,
            "return": [
                "Column"
            ],
            "arguments": {
                "col1": [
                    "ColumnOrName"
                ],
                "ColumnOrName": [
                    "ColumnOrName"
                ],
                "f": [
                    "Callable[([Column, Column], Column)]"
                ]
            }
        },
        "transform_keys": {
            "name": "transform_keys",
            "location": 242,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "f": [
                    "Callable[([Column, Column], Column)]"
                ]
            }
        },
        "transform_values": {
            "name": "transform_values",
            "location": 245,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "f": [
                    "Callable[([Column, Column], Column)]"
                ]
            }
        },
        "map_filter": {
            "name": "map_filter",
            "location": 248,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ],
                "f": [
                    "Callable[([Column, Column], Column)]"
                ]
            }
        },
        "map_zip_with": {
            "name": "map_zip_with",
            "location": 249,
            "return": [
                "Column"
            ],
            "arguments": {
                "col1": [
                    "ColumnOrName"
                ],
                "col2": [
                    "ColumnOrName"
                ],
                "f": [
                    "Callable[([Column, Column, Column], Column)]"
                ]
            }
        },
        "abs": {
            "name": "abs",
            "location": 254,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "acos": {
            "name": "acos",
            "location": 255,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "asc": {
            "name": "asc",
            "location": 256,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "asc_nulls_first": {
            "name": "asc_nulls_first",
            "location": 257,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "asc_nulls_last": {
            "name": "asc_nulls_last",
            "location": 258,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "ascii": {
            "name": "ascii",
            "location": 259,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "asin": {
            "name": "asin",
            "location": 260,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "atan": {
            "name": "atan",
            "location": 261,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "atan2": {
            "name": "atan2",
            "location": 267,
            "return": [
                "Column"
            ],
            "arguments": {
                "col1": [
                    "ColumnOrName"
                ],
                "col2": [
                    "float"
                ]
            }
        },
        "avg": {
            "name": "avg",
            "location": 268,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "base64": {
            "name": "base64",
            "location": 269,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "bitwiseNOT": {
            "name": "bitwiseNOT",
            "location": 270,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "cbrt": {
            "name": "cbrt",
            "location": 271,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "ceil": {
            "name": "ceil",
            "location": 272,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "col": {
            "name": "col",
            "location": 273,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "str"
                ]
            }
        },
        "collect_list": {
            "name": "collect_list",
            "location": 274,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "collect_set": {
            "name": "collect_set",
            "location": 275,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "column": {
            "name": "column",
            "location": 276,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "str"
                ]
            }
        },
        "cos": {
            "name": "cos",
            "location": 277,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "cosh": {
            "name": "cosh",
            "location": 278,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "count": {
            "name": "count",
            "location": 279,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "cume_dist": {
            "name": "cume_dist",
            "location": 280,
            "return": [
                "Column"
            ],
            "arguments": {}
        },
        "degrees": {
            "name": "degrees",
            "location": 281,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "dense_rank": {
            "name": "dense_rank",
            "location": 282,
            "return": [
                "Column"
            ],
            "arguments": {}
        },
        "desc": {
            "name": "desc",
            "location": 283,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "desc_nulls_first": {
            "name": "desc_nulls_first",
            "location": 284,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "desc_nulls_last": {
            "name": "desc_nulls_last",
            "location": 285,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "exp": {
            "name": "exp",
            "location": 286,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "expm1": {
            "name": "expm1",
            "location": 287,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "floor": {
            "name": "floor",
            "location": 288,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "hypot": {
            "name": "hypot",
            "location": 294,
            "return": [
                "Column"
            ],
            "arguments": {
                "col1": [
                    "ColumnOrName"
                ],
                "col2": [
                    "float"
                ]
            }
        },
        "kurtosis": {
            "name": "kurtosis",
            "location": 295,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "lit": {
            "name": "lit",
            "location": 296,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "Any"
                ]
            }
        },
        "log10": {
            "name": "log10",
            "location": 297,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "log1p": {
            "name": "log1p",
            "location": 298,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "lower": {
            "name": "lower",
            "location": 299,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "ltrim": {
            "name": "ltrim",
            "location": 300,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "max": {
            "name": "max",
            "location": 301,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "mean": {
            "name": "mean",
            "location": 302,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "min": {
            "name": "min",
            "location": 303,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "percent_rank": {
            "name": "percent_rank",
            "location": 304,
            "return": [
                "Column"
            ],
            "arguments": {}
        },
        "pow": {
            "name": "pow",
            "location": 310,
            "return": [
                "Column"
            ],
            "arguments": {
                "col1": [
                    "ColumnOrName"
                ],
                "col2": [
                    "float"
                ]
            }
        },
        "radians": {
            "name": "radians",
            "location": 311,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "rank": {
            "name": "rank",
            "location": 312,
            "return": [
                "Column"
            ],
            "arguments": {}
        },
        "rint": {
            "name": "rint",
            "location": 313,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "row_number": {
            "name": "row_number",
            "location": 314,
            "return": [
                "Column"
            ],
            "arguments": {}
        },
        "rtrim": {
            "name": "rtrim",
            "location": 315,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "signum": {
            "name": "signum",
            "location": 316,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "sin": {
            "name": "sin",
            "location": 317,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "sinh": {
            "name": "sinh",
            "location": 318,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "skewness": {
            "name": "skewness",
            "location": 319,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "sqrt": {
            "name": "sqrt",
            "location": 320,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "stddev": {
            "name": "stddev",
            "location": 321,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "stddev_pop": {
            "name": "stddev_pop",
            "location": 322,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "stddev_samp": {
            "name": "stddev_samp",
            "location": 323,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "sum": {
            "name": "sum",
            "location": 324,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "sumDistinct": {
            "name": "sumDistinct",
            "location": 325,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "tan": {
            "name": "tan",
            "location": 326,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "tanh": {
            "name": "tanh",
            "location": 327,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "toDegrees": {
            "name": "toDegrees",
            "location": 328,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "toRadians": {
            "name": "toRadians",
            "location": 329,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "trim": {
            "name": "trim",
            "location": 330,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "unbase64": {
            "name": "unbase64",
            "location": 331,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "upper": {
            "name": "upper",
            "location": 332,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "var_pop": {
            "name": "var_pop",
            "location": 333,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "var_samp": {
            "name": "var_samp",
            "location": 334,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "variance": {
            "name": "variance",
            "location": 335,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [
                    "ColumnOrName"
                ]
            }
        },
        "udf": {
            "name": "udf",
            "location": 341,
            "return": [
                "Callable[([Callable[(..., Any)]], Callable[(..., Column)])]"
            ],
            "arguments": {
                "f": [
                    "DataTypeOrString"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/sql/group.py": {
        "GroupedData.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jgd": [
                    "JavaObject"
                ],
                "df": [
                    "DataFrame"
                ]
            }
        },
        "GroupedData.agg": {
            "name": "agg",
            "location": 35,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "__exprs": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "GroupedData.count": {
            "name": "count",
            "location": 36,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupedData.mean": {
            "name": "mean",
            "location": 37,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupedData.avg": {
            "name": "avg",
            "location": 38,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupedData.max": {
            "name": "max",
            "location": 39,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupedData.min": {
            "name": "min",
            "location": 40,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupedData.sum": {
            "name": "sum",
            "location": 41,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupedData.pivot": {
            "name": "pivot",
            "location": 42,
            "return": [
                "GroupedData"
            ],
            "arguments": {
                "self": [],
                "pivot_col": [
                    "str"
                ],
                "values": [
                    "Optional[List[LiteralType]]"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/sql/readwriter.py": {
        "DataFrameReader.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spark": [
                    "SQLContext"
                ]
            }
        },
        "DataFrameReader.format": {
            "name": "format",
            "location": 36,
            "return": [
                "DataFrameReader"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ]
            }
        },
        "DataFrameReader.schema": {
            "name": "schema",
            "location": 37,
            "return": [
                "DataFrameReader"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "Union[(StructType, str)]"
                ]
            }
        },
        "DataFrameReader.option": {
            "name": "option",
            "location": 38,
            "return": [
                "DataFrameReader"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "OptionalPrimitiveType"
                ]
            }
        },
        "DataFrameReader.options": {
            "name": "options",
            "location": 39,
            "return": [
                "DataFrameReader"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameReader.load": {
            "name": "load",
            "location": 40,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Optional[PathOrPaths]"
                ],
                "format": [
                    "Optional[str]"
                ],
                "schema": [
                    "Optional[StructType]"
                ]
            }
        },
        "DataFrameReader.json": {
            "name": "json",
            "location": 47,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Union[(str, List[str], RDD[str])]"
                ],
                "schema": [
                    "Optional[Union[(StructType, str)]]"
                ],
                "primitivesAsString": [
                    "Optional[Union[(bool, str)]]"
                ],
                "prefersDecimal": [
                    "Optional[Union[(bool, str)]]"
                ],
                "allowComments": [
                    "Optional[Union[(bool, str)]]"
                ],
                "allowUnquotedFieldNames": [
                    "Optional[Union[(bool, str)]]"
                ],
                "allowSingleQuotes": [
                    "Optional[Union[(bool, str)]]"
                ],
                "allowNumericLeadingZero": [
                    "Optional[Union[(bool, str)]]"
                ],
                "allowBackslashEscapingAnyCharacter": [
                    "Optional[Union[(bool, str)]]"
                ],
                "mode": [
                    "Optional[str]"
                ],
                "columnNameOfCorruptRecord": [
                    "Optional[str]"
                ],
                "dateFormat": [
                    "Optional[str]"
                ],
                "timestampFormat": [
                    "Optional[str]"
                ],
                "multiLine": [
                    "Optional[Union[(bool, str)]]"
                ],
                "allowUnquotedControlChars": [
                    "Optional[Union[(bool, str)]]"
                ],
                "lineSep": [
                    "Optional[str]"
                ],
                "samplingRatio": [
                    "Optional[Union[(float, str)]]"
                ],
                "dropFieldIfAllNull": [
                    "Optional[Union[(bool, str)]]"
                ],
                "encoding": [
                    "Optional[str]"
                ],
                "locale": [
                    "Optional[str]"
                ],
                "recursiveFileLookup": [
                    "Optional[bool]"
                ]
            }
        },
        "DataFrameReader.table": {
            "name": "table",
            "location": 71,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "tableName": [
                    "str"
                ]
            }
        },
        "DataFrameReader.parquet": {
            "name": "parquet",
            "location": 72,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameReader.text": {
            "name": "text",
            "location": 73,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "paths": [
                    "PathOrPaths"
                ],
                "wholetext": [
                    "bool"
                ],
                "lineSep": [
                    "Optional[str]"
                ],
                "recursiveFileLookup": [
                    "Optional[bool]"
                ]
            }
        },
        "DataFrameReader.csv": {
            "name": "csv",
            "location": 80,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "PathOrPaths"
                ],
                "schema": [
                    "Optional[Union[(StructType, str)]]"
                ],
                "sep": [
                    "Optional[str]"
                ],
                "encoding": [
                    "Optional[str]"
                ],
                "quote": [
                    "Optional[str]"
                ],
                "escape": [
                    "Optional[str]"
                ],
                "comment": [
                    "Optional[str]"
                ],
                "header": [
                    "Optional[Union[(bool, str)]]"
                ],
                "inferSchema": [
                    "Optional[Union[(bool, str)]]"
                ],
                "ignoreLeadingWhiteSpace": [
                    "Optional[Union[(bool, str)]]"
                ],
                "ignoreTrailingWhiteSpace": [
                    "Optional[Union[(bool, str)]]"
                ],
                "nullValue": [
                    "Optional[str]"
                ],
                "nanValue": [
                    "Optional[str]"
                ],
                "positiveInf": [
                    "Optional[str]"
                ],
                "negativeInf": [
                    "Optional[str]"
                ],
                "dateFormat": [
                    "Optional[str]"
                ],
                "timestampFormat": [
                    "Optional[str]"
                ],
                "maxColumns": [
                    "Optional[int]"
                ],
                "maxCharsPerColumn": [
                    "Optional[int]"
                ],
                "maxMalformedLogPerPartition": [
                    "Optional[int]"
                ],
                "mode": [
                    "Optional[str]"
                ],
                "columnNameOfCorruptRecord": [
                    "Optional[str]"
                ],
                "multiLine": [
                    "Optional[Union[(bool, str)]]"
                ],
                "charToEscapeQuoteEscaping": [
                    "Optional[str]"
                ],
                "samplingRatio": [
                    "Optional[Union[(float, str)]]"
                ],
                "enforceSchema": [
                    "Optional[Union[(bool, str)]]"
                ],
                "emptyValue": [
                    "Optional[str]"
                ],
                "locale": [
                    "Optional[str]"
                ],
                "lineSep": [
                    "Optional[str]"
                ]
            }
        },
        "DataFrameReader.orc": {
            "name": "orc",
            "location": 112,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "PathOrPaths"
                ],
                "mergeSchema": [
                    "Optional[bool]"
                ],
                "recursiveFileLookup": [
                    "Optional[bool]"
                ]
            }
        },
        "DataFrameReader.jdbc": {
            "name": "jdbc",
            "location": 135,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "table": [
                    "str"
                ]
            }
        },
        "DataFrameWriter.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "DataFrame"
                ]
            }
        },
        "DataFrameWriter.mode": {
            "name": "mode",
            "location": 146,
            "return": [
                "DataFrameWriter"
            ],
            "arguments": {
                "self": [],
                "saveMode": [
                    "str"
                ]
            }
        },
        "DataFrameWriter.format": {
            "name": "format",
            "location": 147,
            "return": [
                "DataFrameWriter"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ]
            }
        },
        "DataFrameWriter.option": {
            "name": "option",
            "location": 148,
            "return": [
                "DataFrameWriter"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "OptionalPrimitiveType"
                ]
            }
        },
        "DataFrameWriter.options": {
            "name": "options",
            "location": 149,
            "return": [
                "DataFrameWriter"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameWriter.partitionBy": {
            "name": "partitionBy",
            "location": 153,
            "return": [
                "DataFrameWriter"
            ],
            "arguments": {
                "self": [],
                "__cols": [
                    "List[str]"
                ]
            }
        },
        "DataFrameWriter.bucketBy": {
            "name": "bucketBy",
            "location": 157,
            "return": [
                "DataFrameWriter"
            ],
            "arguments": {
                "self": [],
                "numBuckets": [
                    "int"
                ],
                "col": [
                    "TupleOrListOfString"
                ]
            }
        },
        "DataFrameWriter.sortBy": {
            "name": "sortBy",
            "location": 163,
            "return": [
                "DataFrameWriter"
            ],
            "arguments": {
                "self": [],
                "col": [
                    "TupleOrListOfString"
                ]
            }
        },
        "DataFrameWriter.save": {
            "name": "save",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Optional[str]"
                ],
                "format": [
                    "Optional[str]"
                ],
                "mode": [
                    "Optional[str]"
                ],
                "partitionBy": [
                    "Optional[List[str]]"
                ]
            }
        },
        "DataFrameWriter.insertInto": {
            "name": "insertInto",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tableName": [
                    "str"
                ],
                "overwrite": [
                    "Optional[bool]"
                ]
            }
        },
        "DataFrameWriter.saveAsTable": {
            "name": "saveAsTable",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "format": [
                    "Optional[str]"
                ],
                "mode": [
                    "Optional[str]"
                ],
                "partitionBy": [
                    "Optional[List[str]]"
                ]
            }
        },
        "DataFrameWriter.json": {
            "name": "json",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "mode": [
                    "Optional[str]"
                ],
                "compression": [
                    "Optional[str]"
                ],
                "dateFormat": [
                    "Optional[str]"
                ],
                "timestampFormat": [
                    "Optional[str]"
                ],
                "lineSep": [
                    "Optional[str]"
                ],
                "encoding": [
                    "Optional[str]"
                ],
                "ignoreNullFields": [
                    "Optional[bool]"
                ]
            }
        },
        "DataFrameWriter.parquet": {
            "name": "parquet",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "mode": [
                    "Optional[str]"
                ],
                "partitionBy": [
                    "Optional[List[str]]"
                ],
                "compression": [
                    "Optional[str]"
                ]
            }
        },
        "DataFrameWriter.text": {
            "name": "text",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "compression": [
                    "Optional[str]"
                ],
                "lineSep": [
                    "Optional[str]"
                ]
            }
        },
        "DataFrameWriter.csv": {
            "name": "csv",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "mode": [
                    "Optional[str]"
                ],
                "compression": [
                    "Optional[str]"
                ],
                "sep": [
                    "Optional[str]"
                ],
                "quote": [
                    "Optional[str]"
                ],
                "escape": [
                    "Optional[str]"
                ],
                "header": [
                    "Optional[Union[(bool, str)]]"
                ],
                "nullValue": [
                    "Optional[str]"
                ],
                "escapeQuotes": [
                    "Optional[Union[(bool, str)]]"
                ],
                "quoteAll": [
                    "Optional[Union[(bool, str)]]"
                ],
                "dateFormat": [
                    "Optional[str]"
                ],
                "timestampFormat": [
                    "Optional[str]"
                ],
                "ignoreLeadingWhiteSpace": [
                    "Optional[Union[(bool, str)]]"
                ],
                "ignoreTrailingWhiteSpace": [
                    "Optional[Union[(bool, str)]]"
                ],
                "charToEscapeQuoteEscaping": [
                    "Optional[str]"
                ],
                "encoding": [
                    "Optional[str]"
                ],
                "emptyValue": [
                    "Optional[str]"
                ],
                "lineSep": [
                    "Optional[str]"
                ]
            }
        },
        "DataFrameWriter.orc": {
            "name": "orc",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "mode": [
                    "Optional[str]"
                ],
                "partitionBy": [
                    "Optional[List[str]]"
                ],
                "compression": [
                    "Optional[str]"
                ]
            }
        },
        "DataFrameWriter.jdbc": {
            "name": "jdbc",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "table": [
                    "str"
                ],
                "mode": [
                    "Optional[str]"
                ],
                "properties": [
                    "Optional[Dict[(str, str)]]"
                ]
            }
        },
        "DataFrameWriterV2.__init__": {
            "name": "__init__",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "DataFrame"
                ],
                "table": [
                    "str"
                ]
            }
        },
        "DataFrameWriterV2.using": {
            "name": "using",
            "location": 240,
            "return": [
                "DataFrameWriterV2"
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "str"
                ]
            }
        },
        "DataFrameWriterV2.option": {
            "name": "option",
            "location": 241,
            "return": [
                "DataFrameWriterV2"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "OptionalPrimitiveType"
                ]
            }
        },
        "DataFrameWriterV2.options": {
            "name": "options",
            "location": 242,
            "return": [
                "DataFrameWriterV2"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameWriterV2.tableProperty": {
            "name": "tableProperty",
            "location": 243,
            "return": [
                "DataFrameWriterV2"
            ],
            "arguments": {
                "self": [],
                "property": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "DataFrameWriterV2.partitionedBy": {
            "name": "partitionedBy",
            "location": 244,
            "return": [
                "DataFrameWriterV2"
            ],
            "arguments": {
                "self": [],
                "col": [
                    "Column"
                ]
            }
        },
        "DataFrameWriterV2.create": {
            "name": "create",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameWriterV2.replace": {
            "name": "replace",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameWriterV2.createOrReplace": {
            "name": "createOrReplace",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameWriterV2.append": {
            "name": "append",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameWriterV2.overwrite": {
            "name": "overwrite",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "Column"
                ]
            }
        },
        "DataFrameWriterV2.overwritePartitions": {
            "name": "overwritePartitions",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/sql/session.py": {
        "SparkSession.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sparkContext": [
                    "SparkContext"
                ],
                "jsparkSession": [
                    "Optional[JavaObject]"
                ]
            }
        },
        "SparkSession.newSession": {
            "name": "newSession",
            "location": 54,
            "return": [
                "SparkSession"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkSession.getActiveSession": {
            "name": "getActiveSession",
            "location": 56,
            "return": [
                "SparkSession"
            ],
            "arguments": {
                "cls": []
            }
        },
        "SparkSession.sparkContext": {
            "name": "sparkContext",
            "location": 58,
            "return": [
                "SparkContext"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkSession.version": {
            "name": "version",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkSession.conf": {
            "name": "conf",
            "location": 62,
            "return": [
                "RuntimeConfig"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkSession.catalog": {
            "name": "catalog",
            "location": 64,
            "return": [
                "Catalog"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkSession.udf": {
            "name": "udf",
            "location": 66,
            "return": [
                "UDFRegistration"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkSession.range": {
            "name": "range",
            "location": 67,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int"
                ],
                "end": [
                    "Optional[int]"
                ],
                "step": [
                    "int"
                ],
                "numPartitions": [
                    "Optional[int]"
                ]
            }
        },
        "SparkSession.createDataFrame": {
            "name": "createDataFrame",
            "location": 109,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "DataFrameLike"
                ],
                "schema": [
                    "Union[(StructType, str)]"
                ],
                "verifySchema": [
                    "bool"
                ]
            }
        },
        "SparkSession.sql": {
            "name": "sql",
            "location": 115,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "sqlQuery": [
                    "str"
                ]
            }
        },
        "SparkSession.table": {
            "name": "table",
            "location": 116,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "tableName": [
                    "str"
                ]
            }
        },
        "SparkSession.read": {
            "name": "read",
            "location": 118,
            "return": [
                "DataFrameReader"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkSession.readStream": {
            "name": "readStream",
            "location": 120,
            "return": [
                "DataStreamReader"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkSession.streams": {
            "name": "streams",
            "location": 122,
            "return": [
                "StreamingQueryManager"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkSession.stop": {
            "name": "stop",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkSession.__enter__": {
            "name": "__enter__",
            "location": 124,
            "return": [
                "SparkSession"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkSession.__exit__": {
            "name": "__exit__",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "SparkSession.Builder.config": {
            "name": "config",
            "location": 45,
            "return": [
                "SparkSession.Builder"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "SparkSession.Builder.master": {
            "name": "master",
            "location": 46,
            "return": [
                "SparkSession.Builder"
            ],
            "arguments": {
                "self": [],
                "master": [
                    "str"
                ]
            }
        },
        "SparkSession.Builder.appName": {
            "name": "appName",
            "location": 47,
            "return": [
                "SparkSession.Builder"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "SparkSession.Builder.enableHiveSupport": {
            "name": "enableHiveSupport",
            "location": 48,
            "return": [
                "SparkSession.Builder"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkSession.Builder.getOrCreate": {
            "name": "getOrCreate",
            "location": 49,
            "return": [
                "SparkSession"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/sql/streaming.py": {
        "StreamingQuery.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jsq": [
                    "JavaObject"
                ]
            }
        },
        "StreamingQuery.id": {
            "name": "id",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamingQuery.runId": {
            "name": "runId",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamingQuery.name": {
            "name": "name",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamingQuery.isActive": {
            "name": "isActive",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamingQuery.awaitTermination": {
            "name": "awaitTermination",
            "location": 41,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "Optional[int]"
                ]
            }
        },
        "StreamingQuery.status": {
            "name": "status",
            "location": 43,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamingQuery.recentProgress": {
            "name": "recentProgress",
            "location": 45,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamingQuery.lastProgress": {
            "name": "lastProgress",
            "location": 47,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamingQuery.processAllAvailable": {
            "name": "processAllAvailable",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamingQuery.stop": {
            "name": "stop",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamingQuery.explain": {
            "name": "explain",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extended": [
                    "bool"
                ]
            }
        },
        "StreamingQuery.exception": {
            "name": "exception",
            "location": 51,
            "return": [
                "Optional[StreamingQueryException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamingQueryManager.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jsqm": [
                    "JavaObject"
                ]
            }
        },
        "StreamingQueryManager.active": {
            "name": "active",
            "location": 56,
            "return": [
                "List[StreamingQuery]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamingQueryManager.get": {
            "name": "get",
            "location": 57,
            "return": [
                "StreamingQuery"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ]
            }
        },
        "StreamingQueryManager.awaitAnyTermination": {
            "name": "awaitAnyTermination",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "Optional[int]"
                ]
            }
        },
        "StreamingQueryManager.resetTerminated": {
            "name": "resetTerminated",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataStreamReader.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spark": [
                    "SQLContext"
                ]
            }
        },
        "DataStreamReader.format": {
            "name": "format",
            "location": 63,
            "return": [
                "DataStreamReader"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ]
            }
        },
        "DataStreamReader.schema": {
            "name": "schema",
            "location": 64,
            "return": [
                "DataStreamReader"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "Union[(StructType, str)]"
                ]
            }
        },
        "DataStreamReader.option": {
            "name": "option",
            "location": 65,
            "return": [
                "DataStreamReader"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "OptionalPrimitiveType"
                ]
            }
        },
        "DataStreamReader.options": {
            "name": "options",
            "location": 66,
            "return": [
                "DataStreamReader"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataStreamReader.load": {
            "name": "load",
            "location": 67,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Optional[str]"
                ],
                "format": [
                    "Optional[str]"
                ],
                "schema": [
                    "Optional[StructType]"
                ]
            }
        },
        "DataStreamReader.json": {
            "name": "json",
            "location": 74,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "schema": [
                    "Optional[Union[(StructType, str)]]"
                ],
                "primitivesAsString": [
                    "Optional[Union[(bool, str)]]"
                ],
                "prefersDecimal": [
                    "Optional[Union[(bool, str)]]"
                ],
                "allowComments": [
                    "Optional[Union[(bool, str)]]"
                ],
                "allowUnquotedFieldNames": [
                    "Optional[Union[(bool, str)]]"
                ],
                "allowSingleQuotes": [
                    "Optional[Union[(bool, str)]]"
                ],
                "allowNumericLeadingZero": [
                    "Optional[Union[(bool, str)]]"
                ],
                "allowBackslashEscapingAnyCharacter": [
                    "Optional[Union[(bool, str)]]"
                ],
                "mode": [
                    "Optional[str]"
                ],
                "columnNameOfCorruptRecord": [
                    "Optional[str]"
                ],
                "dateFormat": [
                    "Optional[str]"
                ],
                "timestampFormat": [
                    "Optional[str]"
                ],
                "multiLine": [
                    "Optional[Union[(bool, str)]]"
                ],
                "allowUnquotedControlChars": [
                    "Optional[Union[(bool, str)]]"
                ],
                "lineSep": [
                    "Optional[str]"
                ],
                "locale": [
                    "Optional[str]"
                ],
                "dropFieldIfAllNull": [
                    "Optional[Union[(bool, str)]]"
                ],
                "encoding": [
                    "Optional[str]"
                ],
                "recursiveFileLookup": [
                    "Optional[bool]"
                ]
            }
        },
        "DataStreamReader.orc": {
            "name": "orc",
            "location": 97,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "mergeSchema": [
                    "Optional[bool]"
                ],
                "recursiveFileLookup": [
                    "Optional[bool]"
                ]
            }
        },
        "DataStreamReader.parquet": {
            "name": "parquet",
            "location": 103,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "mergeSchema": [
                    "Optional[bool]"
                ],
                "recursiveFileLookup": [
                    "Optional[bool]"
                ]
            }
        },
        "DataStreamReader.text": {
            "name": "text",
            "location": 109,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "wholetext": [
                    "bool"
                ],
                "lineSep": [
                    "Optional[str]"
                ],
                "recursiveFileLookup": [
                    "Optional[bool]"
                ]
            }
        },
        "DataStreamReader.csv": {
            "name": "csv",
            "location": 116,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "schema": [
                    "Optional[Union[(StructType, str)]]"
                ],
                "sep": [
                    "Optional[str]"
                ],
                "encoding": [
                    "Optional[str]"
                ],
                "quote": [
                    "Optional[str]"
                ],
                "escape": [
                    "Optional[str]"
                ],
                "comment": [
                    "Optional[str]"
                ],
                "header": [
                    "Optional[Union[(bool, str)]]"
                ],
                "inferSchema": [
                    "Optional[Union[(bool, str)]]"
                ],
                "ignoreLeadingWhiteSpace": [
                    "Optional[Union[(bool, str)]]"
                ],
                "ignoreTrailingWhiteSpace": [
                    "Optional[Union[(bool, str)]]"
                ],
                "nullValue": [
                    "Optional[str]"
                ],
                "nanValue": [
                    "Optional[str]"
                ],
                "positiveInf": [
                    "Optional[str]"
                ],
                "negativeInf": [
                    "Optional[str]"
                ],
                "dateFormat": [
                    "Optional[str]"
                ],
                "timestampFormat": [
                    "Optional[str]"
                ],
                "maxColumns": [
                    "Optional[Union[(int, str)]]"
                ],
                "maxCharsPerColumn": [
                    "Optional[Union[(int, str)]]"
                ],
                "mode": [
                    "Optional[str]"
                ],
                "columnNameOfCorruptRecord": [
                    "Optional[str]"
                ],
                "multiLine": [
                    "Optional[Union[(bool, str)]]"
                ],
                "charToEscapeQuoteEscaping": [
                    "Optional[Union[(bool, str)]]"
                ],
                "enforceSchema": [
                    "Optional[Union[(bool, str)]]"
                ],
                "emptyValue": [
                    "Optional[str]"
                ],
                "locale": [
                    "Optional[str]"
                ],
                "lineSep": [
                    "Optional[str]"
                ]
            }
        },
        "DataStreamWriter.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "DataFrame"
                ]
            }
        },
        "DataStreamWriter.outputMode": {
            "name": "outputMode",
            "location": 149,
            "return": [
                "DataStreamWriter"
            ],
            "arguments": {
                "self": [],
                "outputMode": [
                    "str"
                ]
            }
        },
        "DataStreamWriter.format": {
            "name": "format",
            "location": 150,
            "return": [
                "DataStreamWriter"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ]
            }
        },
        "DataStreamWriter.option": {
            "name": "option",
            "location": 151,
            "return": [
                "DataStreamWriter"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "OptionalPrimitiveType"
                ]
            }
        },
        "DataStreamWriter.options": {
            "name": "options",
            "location": 152,
            "return": [
                "DataStreamWriter"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataStreamWriter.partitionBy": {
            "name": "partitionBy",
            "location": 156,
            "return": [
                "DataStreamWriter"
            ],
            "arguments": {
                "self": [],
                "__cols": [
                    "List[str]"
                ]
            }
        },
        "DataStreamWriter.queryName": {
            "name": "queryName",
            "location": 157,
            "return": [
                "DataStreamWriter"
            ],
            "arguments": {
                "self": [],
                "queryName": [
                    "str"
                ]
            }
        },
        "DataStreamWriter.trigger": {
            "name": "trigger",
            "location": 163,
            "return": [
                "DataStreamWriter"
            ],
            "arguments": {
                "self": [],
                "continuous": [
                    "bool"
                ]
            }
        },
        "DataStreamWriter.start": {
            "name": "start",
            "location": 164,
            "return": [
                "StreamingQuery"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Optional[str]"
                ],
                "format": [
                    "Optional[str]"
                ],
                "outputMode": [
                    "Optional[str]"
                ],
                "partitionBy": [
                    "Optional[Union[(str, List[str])]]"
                ],
                "queryName": [
                    "Optional[str]"
                ]
            }
        },
        "DataStreamWriter.foreach": {
            "name": "foreach",
            "location": 176,
            "return": [
                "DataStreamWriter"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "SupportsProcess"
                ]
            }
        },
        "DataStreamWriter.foreachBatch": {
            "name": "foreachBatch",
            "location": 177,
            "return": [
                "DataStreamWriter"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable[([DataFrame, int], None)]"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/sql/types.py": {
        "DataType.__hash__": {
            "name": "__hash__",
            "location": 27,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataType.__eq__": {
            "name": "__eq__",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "DataType.__ne__": {
            "name": "__ne__",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "DataType.typeName": {
            "name": "typeName",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "DataType.simpleString": {
            "name": "simpleString",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataType.jsonValue": {
            "name": "jsonValue",
            "location": 33,
            "return": [
                "Union[(str, Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataType.json": {
            "name": "json",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataType.needConversion": {
            "name": "needConversion",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataType.toInternal": {
            "name": "toInternal",
            "location": 36,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "DataType.fromInternal": {
            "name": "fromInternal",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "DataTypeSingleton.__call__": {
            "name": "__call__",
            "location": 40,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "DateType.needConversion": {
            "name": "needConversion",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateType.toInternal": {
            "name": "toInternal",
            "location": 54,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "datetime.date"
                ]
            }
        },
        "DateType.fromInternal": {
            "name": "fromInternal",
            "location": 55,
            "return": [
                "datetime.date"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int"
                ]
            }
        },
        "TimestampType.needConversion": {
            "name": "needConversion",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimestampType.toInternal": {
            "name": "toInternal",
            "location": 59,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "dt": [
                    "datetime.datetime"
                ]
            }
        },
        "TimestampType.fromInternal": {
            "name": "fromInternal",
            "location": 60,
            "return": [
                "datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "ts": [
                    "int"
                ]
            }
        },
        "DecimalType.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "precision": [
                    "int"
                ],
                "scale": [
                    "int"
                ]
            }
        },
        "DecimalType.simpleString": {
            "name": "simpleString",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecimalType.jsonValue": {
            "name": "jsonValue",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ByteType.simpleString": {
            "name": "simpleString",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegerType.simpleString": {
            "name": "simpleString",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LongType.simpleString": {
            "name": "simpleString",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShortType.simpleString": {
            "name": "simpleString",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayType.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elementType": [],
                "containsNull": [
                    "bool"
                ]
            }
        },
        "ArrayType.simpleString": {
            "name": "simpleString",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArrayType.jsonValue": {
            "name": "jsonValue",
            "location": 90,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayType.fromJson": {
            "name": "fromJson",
            "location": 92,
            "return": [
                "ArrayType"
            ],
            "arguments": {
                "cls": [],
                "json": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "ArrayType.needConversion": {
            "name": "needConversion",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayType.toInternal": {
            "name": "toInternal",
            "location": 94,
            "return": [
                "List[Optional[T]]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "List[Optional[T]]"
                ]
            }
        },
        "ArrayType.fromInternal": {
            "name": "fromInternal",
            "location": 95,
            "return": [
                "List[Optional[T]]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "List[Optional[T]]"
                ]
            }
        },
        "MapType.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keyType": [
                    "DataType"
                ],
                "valueType": [
                    "DataType"
                ],
                "valueContainsNull": [
                    "bool"
                ]
            }
        },
        "MapType.simpleString": {
            "name": "simpleString",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapType.jsonValue": {
            "name": "jsonValue",
            "location": 105,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapType.fromJson": {
            "name": "fromJson",
            "location": 107,
            "return": [
                "MapType"
            ],
            "arguments": {
                "cls": [],
                "json": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "MapType.needConversion": {
            "name": "needConversion",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapType.toInternal": {
            "name": "toInternal",
            "location": 109,
            "return": [
                "Dict[(T, Optional[U])]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Dict[(T, Optional[U])]"
                ]
            }
        },
        "MapType.fromInternal": {
            "name": "fromInternal",
            "location": 110,
            "return": [
                "Dict[(T, Optional[U])]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Dict[(T, Optional[U])]"
                ]
            }
        },
        "StructField.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "dataType": [
                    "DataType"
                ],
                "nullable": [
                    "bool"
                ],
                "metadata": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "StructField.simpleString": {
            "name": "simpleString",
            "location": 124,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StructField.jsonValue": {
            "name": "jsonValue",
            "location": 125,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StructField.fromJson": {
            "name": "fromJson",
            "location": 127,
            "return": [
                "StructField"
            ],
            "arguments": {
                "cls": [],
                "json": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "StructField.needConversion": {
            "name": "needConversion",
            "location": 128,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StructField.toInternal": {
            "name": "toInternal",
            "location": 129,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "T"
                ]
            }
        },
        "StructField.fromInternal": {
            "name": "fromInternal",
            "location": 130,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "T"
                ]
            }
        },
        "StructType.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "Optional[List[StructField]]"
                ]
            }
        },
        "StructType.add": {
            "name": "add",
            "location": 145,
            "return": [
                "StructType"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "StructField"
                ]
            }
        },
        "StructType.__iter__": {
            "name": "__iter__",
            "location": 146,
            "return": [
                "Iterator[StructField]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StructType.__len__": {
            "name": "__len__",
            "location": 147,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StructType.__getitem__": {
            "name": "__getitem__",
            "location": 148,
            "return": [
                "StructField"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(str, int)]"
                ]
            }
        },
        "StructType.simpleString": {
            "name": "simpleString",
            "location": 149,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StructType.jsonValue": {
            "name": "jsonValue",
            "location": 150,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StructType.fromJson": {
            "name": "fromJson",
            "location": 152,
            "return": [
                "StructType"
            ],
            "arguments": {
                "cls": [],
                "json": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "StructType.fieldNames": {
            "name": "fieldNames",
            "location": 153,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StructType.needConversion": {
            "name": "needConversion",
            "location": 154,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StructType.toInternal": {
            "name": "toInternal",
            "location": 155,
            "return": [
                "Tuple"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Tuple"
                ]
            }
        },
        "StructType.fromInternal": {
            "name": "fromInternal",
            "location": 156,
            "return": [
                "Row"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Tuple"
                ]
            }
        },
        "UserDefinedType.typeName": {
            "name": "typeName",
            "location": 160,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "UserDefinedType.sqlType": {
            "name": "sqlType",
            "location": 162,
            "return": [
                "DataType"
            ],
            "arguments": {
                "cls": []
            }
        },
        "UserDefinedType.module": {
            "name": "module",
            "location": 164,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "UserDefinedType.scalaUDT": {
            "name": "scalaUDT",
            "location": 166,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "UserDefinedType.needConversion": {
            "name": "needConversion",
            "location": 167,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserDefinedType.toInternal": {
            "name": "toInternal",
            "location": 168,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "UserDefinedType.fromInternal": {
            "name": "fromInternal",
            "location": 169,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "UserDefinedType.serialize": {
            "name": "serialize",
            "location": 170,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "UserDefinedType.deserialize": {
            "name": "deserialize",
            "location": 171,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "datum": [
                    "Any"
                ]
            }
        },
        "UserDefinedType.simpleString": {
            "name": "simpleString",
            "location": 172,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserDefinedType.json": {
            "name": "json",
            "location": 173,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserDefinedType.jsonValue": {
            "name": "jsonValue",
            "location": 174,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserDefinedType.fromJson": {
            "name": "fromJson",
            "location": 176,
            "return": [
                "UserDefinedType"
            ],
            "arguments": {
                "cls": [],
                "json": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "UserDefinedType.__eq__": {
            "name": "__eq__",
            "location": 177,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Row.__new__": {
            "name": "__new__",
            "location": 183,
            "return": [
                "Row"
            ],
            "arguments": {
                "self": []
            }
        },
        "Row.__init__": {
            "name": "__init__",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Row.asDict": {
            "name": "asDict",
            "location": 188,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "recursive": [
                    "bool"
                ]
            }
        },
        "Row.__contains__": {
            "name": "__contains__",
            "location": 189,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Any"
                ]
            }
        },
        "Row.__call__": {
            "name": "__call__",
            "location": 190,
            "return": [
                "Row"
            ],
            "arguments": {
                "self": []
            }
        },
        "Row.__getitem__": {
            "name": "__getitem__",
            "location": 191,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Any"
                ]
            }
        },
        "Row.__getattr__": {
            "name": "__getattr__",
            "location": 192,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        },
        "Row.__setattr__": {
            "name": "__setattr__",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "Row.__reduce__": {
            "name": "__reduce__",
            "location": 194,
            "return": [
                "Tuple[(Callable[([List[str], List[Any]], Row)], Tuple[(List[str], Tuple)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateConverter.can_convert": {
            "name": "can_convert",
            "location": 199,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "DateConverter.convert": {
            "name": "convert",
            "location": 200,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": [],
                "gateway_client": []
            }
        },
        "DatetimeConverter.can_convert": {
            "name": "can_convert",
            "location": 203,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "DatetimeConverter.convert": {
            "name": "convert",
            "location": 204,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": [],
                "gateway_client": []
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/sql/udf.py": {
        "UserDefinedFunction.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable[(..., Any)]"
                ],
                "returnType": [
                    "DataTypeOrString"
                ],
                "name": [
                    "Optional[str]"
                ],
                "evalType": [
                    "int"
                ],
                "deterministic": [
                    "bool"
                ]
            }
        },
        "UserDefinedFunction.returnType": {
            "name": "returnType",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserDefinedFunction.__call__": {
            "name": "__call__",
            "location": 39,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserDefinedFunction.asNondeterministic": {
            "name": "asNondeterministic",
            "location": 40,
            "return": [
                "UserDefinedFunction"
            ],
            "arguments": {
                "self": []
            }
        },
        "UDFRegistration.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sparkSession": [
                    "pyspark.sql.session.SparkSession"
                ]
            }
        },
        "UDFRegistration.register": {
            "name": "register",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "f": [
                    "Callable[(..., Any)]"
                ],
                "returnType": [
                    "Optional[DataTypeOrString]"
                ]
            }
        },
        "UDFRegistration.registerJavaFunction": {
            "name": "registerJavaFunction",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "javaClassName": [
                    "str"
                ],
                "returnType": [
                    "Optional[DataTypeOrString]"
                ]
            }
        },
        "UDFRegistration.registerJavaUDAF": {
            "name": "registerJavaUDAF",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "javaClassName": [
                    "str"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/sql/utils.py": {
        "convert_exception": {
            "name": "convert_exception",
            "location": 40,
            "return": [],
            "arguments": {
                "e": [
                    "Any"
                ]
            }
        },
        "capture_sql_exception": {
            "name": "capture_sql_exception",
            "location": 41,
            "return": [],
            "arguments": {
                "f": [
                    "Any"
                ]
            }
        },
        "install_exception_handler": {
            "name": "install_exception_handler",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "toJArray": {
            "name": "toJArray",
            "location": 43,
            "return": [],
            "arguments": {
                "gateway": [
                    "Any"
                ],
                "jtype": [
                    "Any"
                ],
                "arr": [
                    "Any"
                ]
            }
        },
        "require_test_compiled": {
            "name": "require_test_compiled",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "to_str": {
            "name": "to_str",
            "location": 55,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "CapturedException.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "desc": [
                    "Any"
                ],
                "stackTrace": [
                    "Any"
                ],
                "cause": [
                    "Optional[Any]"
                ]
            }
        },
        "ForeachBatchFunction.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sql_ctx": [
                    "Any"
                ],
                "func": [
                    "Any"
                ]
            }
        },
        "ForeachBatchFunction.call": {
            "name": "call",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jdf": [
                    "Any"
                ],
                "batch_id": [
                    "Any"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/sql/window.py": {
        "Window.partitionBy": {
            "name": "partitionBy",
            "location": 27,
            "return": [
                "WindowSpec"
            ],
            "arguments": {}
        },
        "Window.orderBy": {
            "name": "orderBy",
            "location": 29,
            "return": [
                "WindowSpec"
            ],
            "arguments": {}
        },
        "Window.rowsBetween": {
            "name": "rowsBetween",
            "location": 31,
            "return": [
                "WindowSpec"
            ],
            "arguments": {
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ]
            }
        },
        "Window.rangeBetween": {
            "name": "rangeBetween",
            "location": 33,
            "return": [
                "WindowSpec"
            ],
            "arguments": {
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ]
            }
        },
        "WindowSpec.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jspec": [
                    "JavaObject"
                ]
            }
        },
        "WindowSpec.partitionBy": {
            "name": "partitionBy",
            "location": 37,
            "return": [
                "WindowSpec"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowSpec.orderBy": {
            "name": "orderBy",
            "location": 38,
            "return": [
                "WindowSpec"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowSpec.rowsBetween": {
            "name": "rowsBetween",
            "location": 39,
            "return": [
                "WindowSpec"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ]
            }
        },
        "WindowSpec.rangeBetween": {
            "name": "rangeBetween",
            "location": 40,
            "return": [
                "WindowSpec"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/sql/_typing.py": {
        "SupportsOpen.open": {
            "name": "open",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "partition_id": [
                    "int"
                ],
                "epoch_id": [
                    "int"
                ]
            }
        },
        "SupportsProcess.process": {
            "name": "process",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "pyspark.sql.types.Row"
                ]
            }
        },
        "SupportsClose.close": {
            "name": "close",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "Exception"
                ]
            }
        },
        "UserDefinedFunctionLike.__call__": {
            "name": "__call__",
            "location": 57,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/sql/__init__.py": {},
    "pyspark-stubs-master/third_party/3/pyspark/sql/avro/functions.py": {
        "from_avro": {
            "name": "from_avro",
            "location": 24,
            "return": [
                "Column"
            ],
            "arguments": {
                "data": [
                    "ColumnOrName"
                ],
                "jsonFormatSchema": [
                    "str"
                ],
                "options": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "to_avro": {
            "name": "to_avro",
            "location": 27,
            "return": [
                "Column"
            ],
            "arguments": {
                "data": [
                    "ColumnOrName"
                ],
                "jsonFormatSchema": [
                    "str"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/sql/avro/__init__.py": {},
    "pyspark-stubs-master/third_party/3/pyspark/sql/pandas/conversion.py": {
        "PandasConversionMixin.toPandas": {
            "name": "toPandas",
            "location": 45,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkConversionMixin.createDataFrame": {
            "name": "createDataFrame",
            "location": 53,
            "return": [
                "pyspark.sql.dataframe.DataFrame"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "DataFrameLike"
                ],
                "schema": [
                    "Union[(StructType, str)]"
                ],
                "verifySchema": [
                    "bool"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/sql/pandas/functions.py": {
        "pandas_udf": {
            "name": "pandas_udf",
            "location": 174,
            "return": [
                "Callable[([PandasCogroupedMapFunction], CogroupedMapPandasUserDefinedFunction)]"
            ],
            "arguments": {
                "f": [
                    "Union[(StructType, str)]"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/sql/pandas/group_ops.py": {
        "PandasGroupedOpsMixin.cogroup": {
            "name": "cogroup",
            "location": 36,
            "return": [
                "PandasCogroupedOps"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "pyspark.sql.group.GroupedData"
                ]
            }
        },
        "PandasGroupedOpsMixin.apply": {
            "name": "apply",
            "location": 37,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "udf": [
                    "GroupedMapPandasUserDefinedFunction"
                ]
            }
        },
        "PandasGroupedOpsMixin.applyInPandas": {
            "name": "applyInPandas",
            "location": 38,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "PandasGroupedMapFunction"
                ],
                "schema": [
                    "Union[(StructType, str)]"
                ]
            }
        },
        "PandasCogroupedOps.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gd1": [
                    "pyspark.sql.group.GroupedData"
                ],
                "gd2": [
                    "pyspark.sql.group.GroupedData"
                ]
            }
        },
        "PandasCogroupedOps.applyInPandas": {
            "name": "applyInPandas",
            "location": 47,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "PandasCogroupedMapFunction"
                ],
                "schema": [
                    "Union[(StructType, str)]"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/sql/pandas/map_ops.py": {
        "PandasMapOpsMixin.mapInPandas": {
            "name": "mapInPandas",
            "location": 28,
            "return": [
                "pyspark.sql.dataframe.DataFrame"
            ],
            "arguments": {
                "self": [],
                "udf": [
                    "PandasMapIterFunction"
                ],
                "schema": [
                    "Union[(StructType, str)]"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/sql/pandas/serializers.py": {
        "ArrowCollectSerializer.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrowCollectSerializer.dump_stream": {
            "name": "dump_stream",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "iterator": [
                    "Any"
                ],
                "stream": [
                    "Any"
                ]
            }
        },
        "ArrowCollectSerializer.load_stream": {
            "name": "load_stream",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "Any"
                ]
            }
        },
        "ArrowStreamSerializer.dump_stream": {
            "name": "dump_stream",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterator": [
                    "Any"
                ],
                "stream": [
                    "Any"
                ]
            }
        },
        "ArrowStreamSerializer.load_stream": {
            "name": "load_stream",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "Any"
                ]
            }
        },
        "ArrowStreamPandasSerializer.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timezone": [
                    "Any"
                ],
                "safecheck": [
                    "Any"
                ],
                "assign_cols_by_name": [
                    "Any"
                ]
            }
        },
        "ArrowStreamPandasSerializer.arrow_to_pandas": {
            "name": "arrow_to_pandas",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "arrow_column": [
                    "Any"
                ]
            }
        },
        "ArrowStreamPandasSerializer.dump_stream": {
            "name": "dump_stream",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterator": [
                    "Any"
                ],
                "stream": [
                    "Any"
                ]
            }
        },
        "ArrowStreamPandasSerializer.load_stream": {
            "name": "load_stream",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "Any"
                ]
            }
        },
        "ArrowStreamPandasUDFSerializer.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timezone": [
                    "Any"
                ],
                "safecheck": [
                    "Any"
                ],
                "assign_cols_by_name": [
                    "Any"
                ],
                "df_for_struct": [
                    "bool"
                ]
            }
        },
        "ArrowStreamPandasUDFSerializer.arrow_to_pandas": {
            "name": "arrow_to_pandas",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "arrow_column": [
                    "Any"
                ]
            }
        },
        "ArrowStreamPandasUDFSerializer.dump_stream": {
            "name": "dump_stream",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "iterator": [
                    "Any"
                ],
                "stream": [
                    "Any"
                ]
            }
        },
        "CogroupUDFSerializer.load_stream": {
            "name": "load_stream",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "Any"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/sql/pandas/typehints.py": {
        "infer_eval_type": {
            "name": "infer_eval_type",
            "location": 24,
            "return": [],
            "arguments": {
                "sig": [
                    "Any"
                ]
            }
        },
        "check_tuple_annotation": {
            "name": "check_tuple_annotation",
            "location": 25,
            "return": [],
            "arguments": {
                "annotation": [
                    "Any"
                ],
                "parameter_check_func": [
                    "Optional[Any]"
                ]
            }
        },
        "check_iterator_annotation": {
            "name": "check_iterator_annotation",
            "location": 28,
            "return": [],
            "arguments": {
                "annotation": [
                    "Any"
                ],
                "parameter_check_func": [
                    "Optional[Any]"
                ]
            }
        },
        "check_union_annotation": {
            "name": "check_union_annotation",
            "location": 31,
            "return": [],
            "arguments": {
                "annotation": [
                    "Any"
                ],
                "parameter_check_func": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/sql/pandas/types.py": {
        "to_arrow_type": {
            "name": "to_arrow_type",
            "location": 38,
            "return": [],
            "arguments": {
                "dt": [
                    "Any"
                ]
            }
        },
        "to_arrow_schema": {
            "name": "to_arrow_schema",
            "location": 39,
            "return": [],
            "arguments": {
                "schema": [
                    "Any"
                ]
            }
        },
        "from_arrow_type": {
            "name": "from_arrow_type",
            "location": 40,
            "return": [],
            "arguments": {
                "at": [
                    "Any"
                ]
            }
        },
        "from_arrow_schema": {
            "name": "from_arrow_schema",
            "location": 41,
            "return": [],
            "arguments": {
                "arrow_schema": [
                    "Any"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/sql/pandas/utils.py": {
        "require_minimum_pandas_version": {
            "name": "require_minimum_pandas_version",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "require_minimum_pyarrow_version": {
            "name": "require_minimum_pyarrow_version",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/sql/pandas/__init__.py": {},
    "pyspark-stubs-master/third_party/3/pyspark/sql/pandas/_typing/__init__.py": {
        "PandasVariadicScalarToScalarFunction.__call__": {
            "name": "__call__",
            "location": 53,
            "return": [
                "SeriesLike"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasVariadicScalarToStructFunction.__call__": {
            "name": "__call__",
            "location": 150,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasVariadicGroupedAggFunction.__call__": {
            "name": "__call__",
            "location": 257,
            "return": [
                "LiteralType"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/sql/pandas/_typing/protocols/frame.py": {
        "DataFrameLike.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ],
                "index": [
                    "Optional[Axes]"
                ],
                "columns": [
                    "Optional[Axes]"
                ],
                "dtype": [
                    "Optional[Dtype]"
                ],
                "copy": [
                    "bool"
                ]
            }
        },
        "DataFrameLike.axes": {
            "name": "axes",
            "location": 47,
            "return": [
                "List[Index]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameLike.shape": {
            "name": "shape",
            "location": 49,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameLike.style": {
            "name": "style",
            "location": 51,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameLike.items": {
            "name": "items",
            "location": 52,
            "return": [
                "Iterable[Tuple[(Optional[Hashable], SeriesLike)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameLike.iteritems": {
            "name": "iteritems",
            "location": 53,
            "return": [
                "Iterable[Tuple[(Optional[Hashable], SeriesLike)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameLike.iterrows": {
            "name": "iterrows",
            "location": 54,
            "return": [
                "Iterable[Tuple[(Optional[Hashable], SeriesLike)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameLike.itertuples": {
            "name": "itertuples",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "bool"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "DataFrameLike.__len__": {
            "name": "__len__",
            "location": 56,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameLike.dot": {
            "name": "dot",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.__matmul__": {
            "name": "__matmul__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.__rmatmul__": {
            "name": "__rmatmul__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.from_dict": {
            "name": "from_dict",
            "location": 61,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "cls": [
                    "Any"
                ],
                "data": [
                    "Any"
                ],
                "orient": [
                    "Any"
                ],
                "dtype": [
                    "Any"
                ],
                "columns": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.to_numpy": {
            "name": "to_numpy",
            "location": 64,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "dtype": [
                    "Any"
                ],
                "copy": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.to_dict": {
            "name": "to_dict",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "orient": [
                    "str"
                ],
                "into": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.to_gbq": {
            "name": "to_gbq",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "destination_table": [
                    "Any"
                ],
                "project_id": [
                    "Any"
                ],
                "chunksize": [
                    "Any"
                ],
                "reauth": [
                    "Any"
                ],
                "if_exists": [
                    "Any"
                ],
                "auth_local_webserver": [
                    "Any"
                ],
                "table_schema": [
                    "Any"
                ],
                "location": [
                    "Any"
                ],
                "progress_bar": [
                    "Any"
                ],
                "credentials": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.from_records": {
            "name": "from_records",
            "location": 80,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "cls": [
                    "Any"
                ],
                "data": [
                    "Any"
                ],
                "index": [
                    "Any"
                ],
                "exclude": [
                    "Any"
                ],
                "columns": [
                    "Any"
                ],
                "coerce_float": [
                    "Any"
                ],
                "nrows": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.to_records": {
            "name": "to_records",
            "location": 89,
            "return": [
                "np.recarray"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "Any"
                ],
                "column_dtypes": [
                    "Any"
                ],
                "index_dtypes": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.to_stata": {
            "name": "to_stata",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ],
                "convert_dates": [
                    "Optional[Any]"
                ],
                "write_index": [
                    "bool"
                ],
                "byteorder": [
                    "Optional[Any]"
                ],
                "time_stamp": [
                    "Optional[Any]"
                ],
                "data_label": [
                    "Optional[Any]"
                ],
                "variable_labels": [
                    "Optional[Any]"
                ],
                "version": [
                    "int"
                ],
                "convert_strl": [
                    "Optional[Any]"
                ]
            }
        },
        "DataFrameLike.to_feather": {
            "name": "to_feather",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.to_markdown": {
            "name": "to_markdown",
            "location": 105,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "Optional[IO[str]]"
                ],
                "mode": [
                    "Optional[str]"
                ]
            }
        },
        "DataFrameLike.to_parquet": {
            "name": "to_parquet",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ],
                "engine": [
                    "Any"
                ],
                "compression": [
                    "Any"
                ],
                "index": [
                    "Any"
                ],
                "partition_cols": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.to_html": {
            "name": "to_html",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "buf": [
                    "Optional[Any]"
                ],
                "columns": [
                    "Optional[Any]"
                ],
                "col_space": [
                    "Optional[Any]"
                ],
                "header": [
                    "bool"
                ],
                "index": [
                    "bool"
                ],
                "na_rep": [
                    "str"
                ],
                "formatters": [
                    "Optional[Any]"
                ],
                "float_format": [
                    "Optional[Any]"
                ],
                "sparsify": [
                    "Optional[Any]"
                ],
                "index_names": [
                    "bool"
                ],
                "justify": [
                    "Optional[Any]"
                ],
                "max_rows": [
                    "Optional[Any]"
                ],
                "max_cols": [
                    "Optional[Any]"
                ],
                "show_dimensions": [
                    "bool"
                ],
                "decimal": [
                    "str"
                ],
                "bold_rows": [
                    "bool"
                ],
                "classes": [
                    "Optional[Any]"
                ],
                "escape": [
                    "bool"
                ],
                "notebook": [
                    "bool"
                ],
                "border": [
                    "Optional[Any]"
                ],
                "table_id": [
                    "Optional[Any]"
                ],
                "render_links": [
                    "bool"
                ],
                "encoding": [
                    "Optional[Any]"
                ]
            }
        },
        "DataFrameLike.info": {
            "name": "info",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbose": [
                    "Any"
                ],
                "buf": [
                    "Any"
                ],
                "max_cols": [
                    "Any"
                ],
                "memory_usage": [
                    "Any"
                ],
                "null_counts": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.memory_usage": {
            "name": "memory_usage",
            "location": 151,
            "return": [
                "SeriesLike"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "Any"
                ],
                "deep": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.transpose": {
            "name": "transpose",
            "location": 152,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameLike.__getitem__": {
            "name": "__getitem__",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.__setitem__": {
            "name": "__setitem__",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.query": {
            "name": "query",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "expr": [
                    "Any"
                ],
                "inplace": [
                    "bool"
                ]
            }
        },
        "DataFrameLike.eval": {
            "name": "eval",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "expr": [
                    "Any"
                ],
                "inplace": [
                    "bool"
                ]
            }
        },
        "DataFrameLike.select_dtypes": {
            "name": "select_dtypes",
            "location": 158,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "self": [],
                "include": [
                    "Any"
                ],
                "exclude": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.insert": {
            "name": "insert",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loc": [
                    "Any"
                ],
                "column": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "allow_duplicates": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.assign": {
            "name": "assign",
            "location": 164,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameLike.lookup": {
            "name": "lookup",
            "location": 165,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "row_labels": [
                    "Any"
                ],
                "col_labels": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.align": {
            "name": "align",
            "location": 166,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ],
                "join": [
                    "Any"
                ],
                "axis": [
                    "Any"
                ],
                "level": [
                    "Any"
                ],
                "copy": [
                    "Any"
                ],
                "fill_value": [
                    "Any"
                ],
                "method": [
                    "Any"
                ],
                "limit": [
                    "Any"
                ],
                "fill_axis": [
                    "Any"
                ],
                "broadcast_axis": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.reindex": {
            "name": "reindex",
            "location": 179,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameLike.drop": {
            "name": "drop",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "labels": [
                    "Optional[Any]"
                ],
                "axis": [
                    "int"
                ],
                "index": [
                    "Optional[Any]"
                ],
                "columns": [
                    "Optional[Any]"
                ],
                "level": [
                    "Optional[Any]"
                ],
                "inplace": [
                    "bool"
                ],
                "errors": [
                    "str"
                ]
            }
        },
        "DataFrameLike.rename": {
            "name": "rename",
            "location": 190,
            "return": [
                "Optional[DataFrameLike]"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "Optional[Renamer]"
                ]
            }
        },
        "DataFrameLike.fillna": {
            "name": "fillna",
            "location": 202,
            "return": [
                "Optional[DataFrameLike]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "method": [
                    "Any"
                ],
                "axis": [
                    "Any"
                ],
                "inplace": [
                    "Any"
                ],
                "limit": [
                    "Any"
                ],
                "downcast": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.replace": {
            "name": "replace",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "to_replace": [
                    "Optional[Any]"
                ],
                "value": [
                    "Optional[Any]"
                ],
                "inplace": [
                    "bool"
                ],
                "limit": [
                    "Optional[Any]"
                ],
                "regex": [
                    "bool"
                ],
                "method": [
                    "str"
                ]
            }
        },
        "DataFrameLike.shift": {
            "name": "shift",
            "location": 220,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "self": [],
                "periods": [
                    "Any"
                ],
                "freq": [
                    "Any"
                ],
                "axis": [
                    "Any"
                ],
                "fill_value": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.set_index": {
            "name": "set_index",
            "location": 227,
            "return": [],
            "arguments": {
                "self": [],
                "keys": [
                    "Any"
                ],
                "drop": [
                    "bool"
                ],
                "append": [
                    "bool"
                ],
                "inplace": [
                    "bool"
                ],
                "verify_integrity": [
                    "bool"
                ]
            }
        },
        "DataFrameLike.reset_index": {
            "name": "reset_index",
            "location": 235,
            "return": [
                "Optional[DataFrameLike]"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "Optional[Union[(Hashable, Sequence[Hashable])]]"
                ],
                "drop": [
                    "bool"
                ],
                "inplace": [
                    "bool"
                ],
                "col_level": [
                    "Hashable"
                ],
                "col_fill": [
                    "Optional[Hashable]"
                ]
            }
        },
        "DataFrameLike.isna": {
            "name": "isna",
            "location": 243,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameLike.isnull": {
            "name": "isnull",
            "location": 244,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameLike.notna": {
            "name": "notna",
            "location": 245,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameLike.notnull": {
            "name": "notnull",
            "location": 246,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameLike.dropna": {
            "name": "dropna",
            "location": 247,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [
                    "int"
                ],
                "how": [
                    "str"
                ],
                "thresh": [
                    "Optional[Any]"
                ],
                "subset": [
                    "Optional[Any]"
                ],
                "inplace": [
                    "bool"
                ]
            }
        },
        "DataFrameLike.drop_duplicates": {
            "name": "drop_duplicates",
            "location": 255,
            "return": [
                "Optional[DataFrameLike]"
            ],
            "arguments": {
                "self": [],
                "subset": [
                    "Optional[Union[(Hashable, Sequence[Hashable])]]"
                ],
                "keep": [
                    "Union[(str, bool)]"
                ],
                "inplace": [
                    "bool"
                ],
                "ignore_index": [
                    "bool"
                ]
            }
        },
        "DataFrameLike.duplicated": {
            "name": "duplicated",
            "location": 262,
            "return": [
                "SeriesLike"
            ],
            "arguments": {
                "self": [],
                "subset": [
                    "Optional[Union[(Hashable, Sequence[Hashable])]]"
                ],
                "keep": [
                    "Union[(str, bool)]"
                ]
            }
        },
        "DataFrameLike.sort_values": {
            "name": "sort_values",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "by": [
                    "Any"
                ],
                "axis": [
                    "int"
                ],
                "ascending": [
                    "bool"
                ],
                "inplace": [
                    "bool"
                ],
                "kind": [
                    "str"
                ],
                "na_position": [
                    "str"
                ],
                "ignore_index": [
                    "bool"
                ]
            }
        },
        "DataFrameLike.sort_index": {
            "name": "sort_index",
            "location": 277,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "axis": [
                    "Any"
                ],
                "level": [
                    "Any"
                ],
                "ascending": [
                    "Any"
                ],
                "inplace": [
                    "Any"
                ],
                "kind": [
                    "Any"
                ],
                "na_position": [
                    "Any"
                ],
                "sort_remaining": [
                    "Any"
                ],
                "ignore_index": [
                    "bool"
                ]
            }
        },
        "DataFrameLike.nlargest": {
            "name": "nlargest",
            "location": 288,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "Any"
                ],
                "columns": [
                    "Any"
                ],
                "keep": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.nsmallest": {
            "name": "nsmallest",
            "location": 289,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "Any"
                ],
                "columns": [
                    "Any"
                ],
                "keep": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.swaplevel": {
            "name": "swaplevel",
            "location": 290,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "Any"
                ],
                "j": [
                    "Any"
                ],
                "axis": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.reorder_levels": {
            "name": "reorder_levels",
            "location": 293,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "Any"
                ],
                "axis": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.combine": {
            "name": "combine",
            "location": 294,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "DataFrameLike"
                ],
                "func": [
                    "Any"
                ],
                "fill_value": [
                    "Any"
                ],
                "overwrite": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.combine_first": {
            "name": "combine_first",
            "location": 301,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "DataFrameLike"
                ]
            }
        },
        "DataFrameLike.update": {
            "name": "update",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ],
                "join": [
                    "Any"
                ],
                "overwrite": [
                    "Any"
                ],
                "filter_func": [
                    "Any"
                ],
                "errors": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.groupby": {
            "name": "groupby",
            "location": 310,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "by": [
                    "Any"
                ],
                "axis": [
                    "Any"
                ],
                "level": [
                    "Any"
                ],
                "as_index": [
                    "bool"
                ],
                "sort": [
                    "bool"
                ],
                "group_keys": [
                    "bool"
                ],
                "squeeze": [
                    "bool"
                ],
                "observed": [
                    "bool"
                ]
            }
        },
        "DataFrameLike.pivot": {
            "name": "pivot",
            "location": 321,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "Any"
                ],
                "columns": [
                    "Any"
                ],
                "values": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.pivot_table": {
            "name": "pivot_table",
            "location": 324,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "Any"
                ],
                "index": [
                    "Any"
                ],
                "columns": [
                    "Any"
                ],
                "aggfunc": [
                    "Any"
                ],
                "fill_value": [
                    "Any"
                ],
                "margins": [
                    "Any"
                ],
                "dropna": [
                    "Any"
                ],
                "margins_name": [
                    "Any"
                ],
                "observed": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.stack": {
            "name": "stack",
            "location": 336,
            "return": [],
            "arguments": {
                "self": [],
                "level": [
                    "int"
                ],
                "dropna": [
                    "bool"
                ]
            }
        },
        "DataFrameLike.explode": {
            "name": "explode",
            "location": 337,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "self": [],
                "column": [
                    "Union[(str, Tuple)]"
                ]
            }
        },
        "DataFrameLike.unstack": {
            "name": "unstack",
            "location": 338,
            "return": [],
            "arguments": {
                "self": [],
                "level": [
                    "int"
                ],
                "fill_value": [
                    "Optional[Any]"
                ]
            }
        },
        "DataFrameLike.melt": {
            "name": "melt",
            "location": 339,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "self": [],
                "id_vars": [
                    "Any"
                ],
                "value_vars": [
                    "Any"
                ],
                "var_name": [
                    "Any"
                ],
                "value_name": [
                    "Any"
                ],
                "col_level": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.diff": {
            "name": "diff",
            "location": 347,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "self": [],
                "periods": [
                    "Any"
                ],
                "axis": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.aggregate": {
            "name": "aggregate",
            "location": 348,
            "return": [],
            "arguments": {
                "self": [],
                "func": [
                    "Any"
                ],
                "axis": [
                    "int"
                ]
            }
        },
        "DataFrameLike.transform": {
            "name": "transform",
            "location": 350,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Any"
                ],
                "axis": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.apply": {
            "name": "apply",
            "location": 353,
            "return": [],
            "arguments": {
                "self": [],
                "func": [
                    "Any"
                ],
                "axis": [
                    "int"
                ],
                "raw": [
                    "bool"
                ],
                "result_type": [
                    "Optional[Any]"
                ],
                "args": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.applymap": {
            "name": "applymap",
            "location": 362,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.append": {
            "name": "append",
            "location": 363,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ],
                "ignore_index": [
                    "Any"
                ],
                "verify_integrity": [
                    "Any"
                ],
                "sort": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.join": {
            "name": "join",
            "location": 370,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ],
                "on": [
                    "Any"
                ],
                "how": [
                    "Any"
                ],
                "lsuffix": [
                    "Any"
                ],
                "rsuffix": [
                    "Any"
                ],
                "sort": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.merge": {
            "name": "merge",
            "location": 379,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "Any"
                ],
                "how": [
                    "Any"
                ],
                "on": [
                    "Any"
                ],
                "left_on": [
                    "Any"
                ],
                "right_on": [
                    "Any"
                ],
                "left_index": [
                    "Any"
                ],
                "right_index": [
                    "Any"
                ],
                "sort": [
                    "Any"
                ],
                "suffixes": [
                    "Any"
                ],
                "copy": [
                    "Any"
                ],
                "indicator": [
                    "Any"
                ],
                "validate": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.round": {
            "name": "round",
            "location": 394,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "self": [],
                "decimals": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.corr": {
            "name": "corr",
            "location": 397,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "Any"
                ],
                "min_periods": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.cov": {
            "name": "cov",
            "location": 398,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "self": [],
                "min_periods": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.corrwith": {
            "name": "corrwith",
            "location": 399,
            "return": [
                "SeriesLike"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ],
                "axis": [
                    "Any"
                ],
                "drop": [
                    "Any"
                ],
                "method": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.count": {
            "name": "count",
            "location": 402,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [
                    "int"
                ],
                "level": [
                    "Optional[Any]"
                ],
                "numeric_only": [
                    "bool"
                ]
            }
        },
        "DataFrameLike.nunique": {
            "name": "nunique",
            "location": 405,
            "return": [
                "SeriesLike"
            ],
            "arguments": {
                "self": [],
                "axis": [
                    "Any"
                ],
                "dropna": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.idxmin": {
            "name": "idxmin",
            "location": 406,
            "return": [
                "SeriesLike"
            ],
            "arguments": {
                "self": [],
                "axis": [
                    "Any"
                ],
                "skipna": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.idxmax": {
            "name": "idxmax",
            "location": 407,
            "return": [
                "SeriesLike"
            ],
            "arguments": {
                "self": [],
                "axis": [
                    "Any"
                ],
                "skipna": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.mode": {
            "name": "mode",
            "location": 408,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "self": [],
                "axis": [
                    "Any"
                ],
                "numeric_only": [
                    "Any"
                ],
                "dropna": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.quantile": {
            "name": "quantile",
            "location": 411,
            "return": [],
            "arguments": {
                "self": [],
                "q": [
                    "float"
                ],
                "axis": [
                    "int"
                ],
                "numeric_only": [
                    "bool"
                ],
                "interpolation": [
                    "str"
                ]
            }
        },
        "DataFrameLike.to_timestamp": {
            "name": "to_timestamp",
            "location": 418,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "self": [],
                "freq": [
                    "Any"
                ],
                "how": [
                    "Any"
                ],
                "axis": [
                    "Any"
                ],
                "copy": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.to_period": {
            "name": "to_period",
            "location": 421,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "self": [],
                "freq": [
                    "Any"
                ],
                "axis": [
                    "Any"
                ],
                "copy": [
                    "Any"
                ]
            }
        },
        "DataFrameLike.isin": {
            "name": "isin",
            "location": 424,
            "return": [
                "DataFrameLike"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "Any"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/sql/pandas/_typing/protocols/series.py": {
        "SeriesLike.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Optional[Any]"
                ],
                "index": [
                    "Optional[Any]"
                ],
                "dtype": [
                    "Optional[Any]"
                ],
                "name": [
                    "Optional[Any]"
                ],
                "copy": [
                    "bool"
                ],
                "fastpath": [
                    "bool"
                ]
            }
        },
        "SeriesLike.dtype": {
            "name": "dtype",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesLike.dtypes": {
            "name": "dtypes",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesLike.name": {
            "name": "name",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[Hashable]"
                ]
            }
        },
        "SeriesLike.values": {
            "name": "values",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesLike.ravel": {
            "name": "ravel",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "order": [
                    "str"
                ]
            }
        },
        "SeriesLike.__len__": {
            "name": "__len__",
            "location": 55,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesLike.view": {
            "name": "view",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "dtype": [
                    "Optional[Any]"
                ]
            }
        },
        "SeriesLike.__array_ufunc__": {
            "name": "__array_ufunc__",
            "location": 57,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "ufunc": [
                    "Callable"
                ],
                "method": [
                    "str"
                ]
            }
        },
        "SeriesLike.__array__": {
            "name": "__array__",
            "location": 60,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "dtype": [
                    "Any"
                ]
            }
        },
        "SeriesLike.axes": {
            "name": "axes",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesLike.take": {
            "name": "take",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "indices": [
                    "Any"
                ],
                "axis": [
                    "int"
                ],
                "is_copy": [
                    "bool"
                ]
            }
        },
        "SeriesLike.__getitem__": {
            "name": "__getitem__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "SeriesLike.__setitem__": {
            "name": "__setitem__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "SeriesLike.repeat": {
            "name": "repeat",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "repeats": [
                    "Any"
                ],
                "axis": [
                    "Optional[Any]"
                ]
            }
        },
        "SeriesLike.reset_index": {
            "name": "reset_index",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "level": [
                    "Optional[Any]"
                ],
                "drop": [
                    "bool"
                ],
                "name": [
                    "Optional[Any]"
                ],
                "inplace": [
                    "bool"
                ]
            }
        },
        "SeriesLike.to_string": {
            "name": "to_string",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "buf": [
                    "Optional[Any]"
                ],
                "na_rep": [
                    "str"
                ],
                "float_format": [
                    "Optional[Any]"
                ],
                "header": [
                    "bool"
                ],
                "index": [
                    "bool"
                ],
                "length": [
                    "bool"
                ],
                "dtype": [
                    "bool"
                ],
                "name": [
                    "bool"
                ],
                "max_rows": [
                    "Optional[Any]"
                ],
                "min_rows": [
                    "Optional[Any]"
                ]
            }
        },
        "SeriesLike.to_markdown": {
            "name": "to_markdown",
            "location": 93,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "Optional[IO[str]]"
                ],
                "mode": [
                    "Optional[str]"
                ]
            }
        },
        "SeriesLike.items": {
            "name": "items",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesLike.iteritems": {
            "name": "iteritems",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesLike.keys": {
            "name": "keys",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesLike.to_dict": {
            "name": "to_dict",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "into": [
                    "Any"
                ]
            }
        },
        "SeriesLike.to_frame": {
            "name": "to_frame",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[Any]"
                ]
            }
        },
        "SeriesLike.groupby": {
            "name": "groupby",
            "location": 101,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "by": [
                    "Any"
                ],
                "axis": [
                    "Any"
                ],
                "level": [
                    "Any"
                ],
                "as_index": [
                    "bool"
                ],
                "sort": [
                    "bool"
                ],
                "group_keys": [
                    "bool"
                ],
                "squeeze": [
                    "bool"
                ],
                "observed": [
                    "bool"
                ]
            }
        },
        "SeriesLike.count": {
            "name": "count",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "level": [
                    "Optional[Any]"
                ]
            }
        },
        "SeriesLike.mode": {
            "name": "mode",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "dropna": [
                    "bool"
                ]
            }
        },
        "SeriesLike.unique": {
            "name": "unique",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesLike.drop_duplicates": {
            "name": "drop_duplicates",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "keep": [
                    "str"
                ],
                "inplace": [
                    "bool"
                ]
            }
        },
        "SeriesLike.duplicated": {
            "name": "duplicated",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "keep": [
                    "str"
                ]
            }
        },
        "SeriesLike.idxmin": {
            "name": "idxmin",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [
                    "int"
                ],
                "skipna": [
                    "bool"
                ]
            }
        },
        "SeriesLike.idxmax": {
            "name": "idxmax",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [
                    "int"
                ],
                "skipna": [
                    "bool"
                ]
            }
        },
        "SeriesLike.round": {
            "name": "round",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "decimals": [
                    "int"
                ]
            }
        },
        "SeriesLike.quantile": {
            "name": "quantile",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "q": [
                    "float"
                ],
                "interpolation": [
                    "str"
                ]
            }
        },
        "SeriesLike.corr": {
            "name": "corr",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ],
                "method": [
                    "str"
                ],
                "min_periods": [
                    "Optional[Any]"
                ]
            }
        },
        "SeriesLike.cov": {
            "name": "cov",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ],
                "min_periods": [
                    "Optional[Any]"
                ]
            }
        },
        "SeriesLike.diff": {
            "name": "diff",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "periods": [
                    "int"
                ]
            }
        },
        "SeriesLike.autocorr": {
            "name": "autocorr",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "lag": [
                    "int"
                ]
            }
        },
        "SeriesLike.dot": {
            "name": "dot",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "SeriesLike.__matmul__": {
            "name": "__matmul__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "SeriesLike.__rmatmul__": {
            "name": "__rmatmul__",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "SeriesLike.searchsorted": {
            "name": "searchsorted",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "side": [
                    "str"
                ],
                "sorter": [
                    "Optional[Any]"
                ]
            }
        },
        "SeriesLike.append": {
            "name": "append",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "to_append": [
                    "Any"
                ],
                "ignore_index": [
                    "bool"
                ],
                "verify_integrity": [
                    "bool"
                ]
            }
        },
        "SeriesLike.combine": {
            "name": "combine",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ],
                "func": [
                    "Any"
                ],
                "fill_value": [
                    "Optional[Any]"
                ]
            }
        },
        "SeriesLike.combine_first": {
            "name": "combine_first",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "SeriesLike.update": {
            "name": "update",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "SeriesLike.sort_values": {
            "name": "sort_values",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [
                    "int"
                ],
                "ascending": [
                    "bool"
                ],
                "inplace": [
                    "bool"
                ],
                "kind": [
                    "str"
                ],
                "na_position": [
                    "str"
                ],
                "ignore_index": [
                    "bool"
                ]
            }
        },
        "SeriesLike.sort_index": {
            "name": "sort_index",
            "location": 150,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "axis": [
                    "Any"
                ],
                "level": [
                    "Any"
                ],
                "ascending": [
                    "Any"
                ],
                "inplace": [
                    "Any"
                ],
                "kind": [
                    "Any"
                ],
                "na_position": [
                    "Any"
                ],
                "sort_remaining": [
                    "Any"
                ],
                "ignore_index": [
                    "bool"
                ]
            }
        },
        "SeriesLike.argsort": {
            "name": "argsort",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [
                    "int"
                ],
                "kind": [
                    "str"
                ],
                "order": [
                    "Optional[Any]"
                ]
            }
        },
        "SeriesLike.nlargest": {
            "name": "nlargest",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "keep": [
                    "str"
                ]
            }
        },
        "SeriesLike.nsmallest": {
            "name": "nsmallest",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "keep": [
                    "str"
                ]
            }
        },
        "SeriesLike.swaplevel": {
            "name": "swaplevel",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "i": [
                    "int"
                ],
                "j": [
                    "int"
                ],
                "copy": [
                    "bool"
                ]
            }
        },
        "SeriesLike.reorder_levels": {
            "name": "reorder_levels",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "order": [
                    "Any"
                ]
            }
        },
        "SeriesLike.explode": {
            "name": "explode",
            "location": 166,
            "return": [
                "SeriesLike"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesLike.unstack": {
            "name": "unstack",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "level": [
                    "int"
                ],
                "fill_value": [
                    "Optional[Any]"
                ]
            }
        },
        "SeriesLike.map": {
            "name": "map",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "arg": [
                    "Any"
                ],
                "na_action": [
                    "Optional[Any]"
                ]
            }
        },
        "SeriesLike.aggregate": {
            "name": "aggregate",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "func": [
                    "Any"
                ],
                "axis": [
                    "int"
                ]
            }
        },
        "SeriesLike.transform": {
            "name": "transform",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "func": [
                    "Any"
                ],
                "axis": [
                    "int"
                ]
            }
        },
        "SeriesLike.apply": {
            "name": "apply",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "func": [
                    "Any"
                ],
                "convert_dtype": [
                    "bool"
                ],
                "args": [
                    "Any"
                ]
            }
        },
        "SeriesLike.align": {
            "name": "align",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ],
                "join": [
                    "str"
                ],
                "axis": [
                    "Optional[Any]"
                ],
                "level": [
                    "Optional[Any]"
                ],
                "copy": [
                    "bool"
                ],
                "fill_value": [
                    "Optional[Any]"
                ],
                "method": [
                    "Optional[Any]"
                ],
                "limit": [
                    "Optional[Any]"
                ],
                "fill_axis": [
                    "int"
                ],
                "broadcast_axis": [
                    "Optional[Any]"
                ]
            }
        },
        "SeriesLike.rename": {
            "name": "rename",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "Optional[Any]"
                ]
            }
        },
        "SeriesLike.reindex": {
            "name": "reindex",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "Optional[Any]"
                ]
            }
        },
        "SeriesLike.drop": {
            "name": "drop",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "labels": [
                    "Optional[Any]"
                ],
                "axis": [
                    "int"
                ],
                "index": [
                    "Optional[Any]"
                ],
                "columns": [
                    "Optional[Any]"
                ],
                "level": [
                    "Optional[Any]"
                ],
                "inplace": [
                    "bool"
                ],
                "errors": [
                    "str"
                ]
            }
        },
        "SeriesLike.fillna": {
            "name": "fillna",
            "location": 209,
            "return": [
                "Optional[SeriesLike]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "method": [
                    "Any"
                ],
                "axis": [
                    "Any"
                ],
                "inplace": [
                    "Any"
                ],
                "limit": [
                    "Any"
                ],
                "downcast": [
                    "Any"
                ]
            }
        },
        "SeriesLike.replace": {
            "name": "replace",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "to_replace": [
                    "Optional[Any]"
                ],
                "value": [
                    "Optional[Any]"
                ],
                "inplace": [
                    "bool"
                ],
                "limit": [
                    "Optional[Any]"
                ],
                "regex": [
                    "bool"
                ],
                "method": [
                    "str"
                ]
            }
        },
        "SeriesLike.shift": {
            "name": "shift",
            "location": 227,
            "return": [],
            "arguments": {
                "self": [],
                "periods": [
                    "int"
                ],
                "freq": [
                    "Optional[Any]"
                ],
                "axis": [
                    "int"
                ],
                "fill_value": [
                    "Optional[Any]"
                ]
            }
        },
        "SeriesLike.memory_usage": {
            "name": "memory_usage",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "bool"
                ],
                "deep": [
                    "bool"
                ]
            }
        },
        "SeriesLike.isin": {
            "name": "isin",
            "location": 235,
            "return": [],
            "arguments": {
                "self": [],
                "values": [
                    "Any"
                ]
            }
        },
        "SeriesLike.between": {
            "name": "between",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "left": [
                    "Any"
                ],
                "right": [
                    "Any"
                ],
                "inclusive": [
                    "bool"
                ]
            }
        },
        "SeriesLike.isna": {
            "name": "isna",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesLike.isnull": {
            "name": "isnull",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesLike.notna": {
            "name": "notna",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesLike.notnull": {
            "name": "notnull",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesLike.dropna": {
            "name": "dropna",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [
                    "int"
                ],
                "inplace": [
                    "bool"
                ],
                "how": [
                    "Optional[Any]"
                ]
            }
        },
        "SeriesLike.to_timestamp": {
            "name": "to_timestamp",
            "location": 244,
            "return": [],
            "arguments": {
                "self": [],
                "freq": [
                    "Optional[Any]"
                ],
                "how": [
                    "str"
                ],
                "copy": [
                    "bool"
                ]
            }
        },
        "SeriesLike.to_period": {
            "name": "to_period",
            "location": 247,
            "return": [],
            "arguments": {
                "self": [],
                "freq": [
                    "Optional[Any]"
                ],
                "copy": [
                    "bool"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/sql/pandas/_typing/protocols/__init__.py": {},
    "pyspark-stubs-master/third_party/3/pyspark/streaming/context.py": {
        "StreamingContext.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sparkContext": [
                    "SparkContext"
                ],
                "batchDuration": [
                    "Union[(float, int)]"
                ],
                "jssc": [
                    "Optional[JavaObject]"
                ]
            }
        },
        "StreamingContext.getOrCreate": {
            "name": "getOrCreate",
            "location": 39,
            "return": [
                "StreamingContext"
            ],
            "arguments": {
                "cls": [],
                "checkpointPath": [
                    "str"
                ],
                "setupFunc": [
                    "Callable[([], StreamingContext)]"
                ]
            }
        },
        "StreamingContext.getActive": {
            "name": "getActive",
            "location": 43,
            "return": [
                "StreamingContext"
            ],
            "arguments": {
                "cls": []
            }
        },
        "StreamingContext.getActiveOrCreate": {
            "name": "getActiveOrCreate",
            "location": 45,
            "return": [
                "StreamingContext"
            ],
            "arguments": {
                "cls": [],
                "checkpointPath": [
                    "str"
                ],
                "setupFunc": [
                    "Callable[([], StreamingContext)]"
                ]
            }
        },
        "StreamingContext.sparkContext": {
            "name": "sparkContext",
            "location": 49,
            "return": [
                "SparkContext"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamingContext.start": {
            "name": "start",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamingContext.awaitTermination": {
            "name": "awaitTermination",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "Optional[int]"
                ]
            }
        },
        "StreamingContext.awaitTerminationOrTimeout": {
            "name": "awaitTerminationOrTimeout",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int"
                ]
            }
        },
        "StreamingContext.stop": {
            "name": "stop",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stopSparkContext": [
                    "bool"
                ],
                "stopGraceFully": [
                    "bool"
                ]
            }
        },
        "StreamingContext.remember": {
            "name": "remember",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "duration": [
                    "int"
                ]
            }
        },
        "StreamingContext.checkpoint": {
            "name": "checkpoint",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "str"
                ]
            }
        },
        "StreamingContext.socketTextStream": {
            "name": "socketTextStream",
            "location": 58,
            "return": [
                "DStream[str]"
            ],
            "arguments": {
                "self": [],
                "hostname": [
                    "str"
                ],
                "port": [
                    "int"
                ],
                "storageLevel": [
                    "StorageLevel"
                ]
            }
        },
        "StreamingContext.textFileStream": {
            "name": "textFileStream",
            "location": 61,
            "return": [
                "DStream[str]"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "str"
                ]
            }
        },
        "StreamingContext.binaryRecordsStream": {
            "name": "binaryRecordsStream",
            "location": 62,
            "return": [
                "DStream[bytes]"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "str"
                ],
                "recordLength": [
                    "int"
                ]
            }
        },
        "StreamingContext.queueStream": {
            "name": "queueStream",
            "location": 65,
            "return": [
                "DStream[T]"
            ],
            "arguments": {
                "self": [],
                "rdds": [
                    "List[RDD[T]]"
                ],
                "oneAtATime": [
                    "bool"
                ],
                "default": [
                    "Optional[RDD[T]]"
                ]
            }
        },
        "StreamingContext.transform": {
            "name": "transform",
            "location": 71,
            "return": [
                "DStream[T]"
            ],
            "arguments": {
                "self": [],
                "dstreams": [
                    "List[DStream[Any]]"
                ],
                "transformFunc": [
                    "Callable[(..., RDD[T])]"
                ]
            }
        },
        "StreamingContext.union": {
            "name": "union",
            "location": 74,
            "return": [
                "DStream[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamingContext.addStreamingListener": {
            "name": "addStreamingListener",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "streamingListener": [
                    "StreamingListener"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/streaming/dstream.py": {
        "DStream.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jdstream": [],
                "ssc": [],
                "jrdd_deserializer": []
            }
        },
        "DStream.context": {
            "name": "context",
            "location": 46,
            "return": [
                "pyspark.streaming.context.StreamingContext"
            ],
            "arguments": {
                "self": []
            }
        },
        "DStream.count": {
            "name": "count",
            "location": 47,
            "return": [
                "DStream[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DStream.filter": {
            "name": "filter",
            "location": 48,
            "return": [
                "DStream[T]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([T], bool)]"
                ]
            }
        },
        "DStream.flatMap": {
            "name": "flatMap",
            "location": 49,
            "return": [
                "DStream[U]"
            ],
            "arguments": {
                "self": [
                    "DStream[T]"
                ],
                "f": [
                    "Callable[([T], Iterable[U])]"
                ],
                "preservesPartitioning": [
                    "bool"
                ]
            }
        },
        "DStream.map": {
            "name": "map",
            "location": 54,
            "return": [
                "DStream[U]"
            ],
            "arguments": {
                "self": [
                    "DStream[T]"
                ],
                "f": [
                    "Callable[([T], U)]"
                ],
                "preservesPartitioning": [
                    "bool"
                ]
            }
        },
        "DStream.mapPartitions": {
            "name": "mapPartitions",
            "location": 57,
            "return": [
                "DStream[U]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([Iterable[T]], Iterable[U])]"
                ],
                "preservesPartitioning": [
                    "bool"
                ]
            }
        },
        "DStream.mapPartitionsWithIndex": {
            "name": "mapPartitionsWithIndex",
            "location": 60,
            "return": [
                "DStream[U]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([int, Iterable[T]], Iterable[U])]"
                ],
                "preservesPartitioning": [
                    "bool"
                ]
            }
        },
        "DStream.reduce": {
            "name": "reduce",
            "location": 65,
            "return": [
                "DStream[T]"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable[([T, T], T)]"
                ]
            }
        },
        "DStream.reduceByKey": {
            "name": "reduceByKey",
            "location": 66,
            "return": [
                "DStream[Tuple[(K, V)]]"
            ],
            "arguments": {
                "self": [
                    "DStream[Tuple[(K, V)]]"
                ],
                "func": [
                    "Callable[([V, V], V)]"
                ],
                "numPartitions": [
                    "Optional[int]"
                ]
            }
        },
        "DStream.combineByKey": {
            "name": "combineByKey",
            "location": 71,
            "return": [
                "DStream[Tuple[(K, U)]]"
            ],
            "arguments": {
                "self": [
                    "DStream[Tuple[(K, V)]]"
                ],
                "createCombiner": [
                    "Callable[([V], U)]"
                ],
                "mergeValue": [
                    "Callable[([U, V], U)]"
                ],
                "mergeCombiners": [
                    "Callable[([U, U], U)]"
                ],
                "numPartitions": [
                    "Optional[int]"
                ]
            }
        },
        "DStream.partitionBy": {
            "name": "partitionBy",
            "location": 78,
            "return": [
                "DStream[Tuple[(K, V)]]"
            ],
            "arguments": {
                "self": [
                    "DStream[Tuple[(K, V)]]"
                ],
                "numPartitions": [
                    "int"
                ],
                "partitionFunc": [
                    "Callable[([K], int)]"
                ]
            }
        },
        "DStream.foreachRDD": {
            "name": "foreachRDD",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable[([datetime.datetime, RDD[T]], None)]"
                ]
            }
        },
        "DStream.pprint": {
            "name": "pprint",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "int"
                ]
            }
        },
        "DStream.mapValues": {
            "name": "mapValues",
            "location": 88,
            "return": [
                "DStream[Tuple[(K, U)]]"
            ],
            "arguments": {
                "self": [
                    "DStream[Tuple[(K, V)]]"
                ],
                "f": [
                    "Callable[([V], U)]"
                ]
            }
        },
        "DStream.flatMapValues": {
            "name": "flatMapValues",
            "location": 91,
            "return": [
                "DStream[Tuple[(K, U)]]"
            ],
            "arguments": {
                "self": [
                    "DStream[Tuple[(K, V)]]"
                ],
                "f": [
                    "Callable[([V], Iterable[U])]"
                ]
            }
        },
        "DStream.glom": {
            "name": "glom",
            "location": 94,
            "return": [
                "DStream[List[T]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DStream.cache": {
            "name": "cache",
            "location": 95,
            "return": [
                "DStream[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DStream.persist": {
            "name": "persist",
            "location": 96,
            "return": [
                "DStream[T]"
            ],
            "arguments": {
                "self": [],
                "storageLevel": [
                    "StorageLevel"
                ]
            }
        },
        "DStream.checkpoint": {
            "name": "checkpoint",
            "location": 97,
            "return": [
                "DStream[T]"
            ],
            "arguments": {
                "self": [],
                "interval": [
                    "Union[(float, int)]"
                ]
            }
        },
        "DStream.groupByKey": {
            "name": "groupByKey",
            "location": 98,
            "return": [
                "DStream[Tuple[(K, Iterable[V])]]"
            ],
            "arguments": {
                "self": [
                    "DStream[Tuple[(K, V)]]"
                ],
                "numPartitions": [
                    "Optional[int]"
                ]
            }
        },
        "DStream.countByValue": {
            "name": "countByValue",
            "location": 101,
            "return": [
                "DStream[Tuple[(T, int)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DStream.saveAsTextFiles": {
            "name": "saveAsTextFiles",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ],
                "suffix": [
                    "Optional[str]"
                ]
            }
        },
        "DStream.transform": {
            "name": "transform",
            "location": 106,
            "return": [
                "TransformedDStream[U]"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable[([datetime.datetime, RDD[T]], RDD[U])]"
                ]
            }
        },
        "DStream.transformWith": {
            "name": "transformWith",
            "location": 117,
            "return": [
                "DStream[V]"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable[([datetime.datetime, RDD[T], RDD[U]], RDD[V])]"
                ],
                "other": [
                    "RDD[U]"
                ],
                "keepSerializer": [
                    "bool"
                ]
            }
        },
        "DStream.repartition": {
            "name": "repartition",
            "location": 123,
            "return": [
                "DStream[T]"
            ],
            "arguments": {
                "self": [],
                "numPartitions": [
                    "int"
                ]
            }
        },
        "DStream.union": {
            "name": "union",
            "location": 124,
            "return": [
                "DStream[Union[(T, U)]]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "DStream[U]"
                ]
            }
        },
        "DStream.cogroup": {
            "name": "cogroup",
            "location": 125,
            "return": [
                "DStream[Tuple[(K, Tuple[(List[V], List[U])])]]"
            ],
            "arguments": {
                "self": [
                    "DStream[Tuple[(K, V)]]"
                ],
                "other": [
                    "DStream[Tuple[(K, U)]]"
                ],
                "numPartitions": [
                    "Optional[int]"
                ]
            }
        },
        "DStream.join": {
            "name": "join",
            "location": 130,
            "return": [
                "DStream[Tuple[(K, Tuple[(V, U)])]]"
            ],
            "arguments": {
                "self": [
                    "DStream[Tuple[(K, V)]]"
                ],
                "other": [
                    "DStream[Tuple[(K, U)]]"
                ],
                "numPartitions": [
                    "Optional[int]"
                ]
            }
        },
        "DStream.leftOuterJoin": {
            "name": "leftOuterJoin",
            "location": 135,
            "return": [
                "DStream[Tuple[(K, Tuple[(V, Optional[U])])]]"
            ],
            "arguments": {
                "self": [
                    "DStream[Tuple[(K, V)]]"
                ],
                "other": [
                    "DStream[Tuple[(K, U)]]"
                ],
                "numPartitions": [
                    "Optional[int]"
                ]
            }
        },
        "DStream.rightOuterJoin": {
            "name": "rightOuterJoin",
            "location": 140,
            "return": [
                "DStream[Tuple[(K, Tuple[(Optional[V], U)])]]"
            ],
            "arguments": {
                "self": [
                    "DStream[Tuple[(K, V)]]"
                ],
                "other": [
                    "DStream[Tuple[(K, U)]]"
                ],
                "numPartitions": [
                    "Optional[int]"
                ]
            }
        },
        "DStream.fullOuterJoin": {
            "name": "fullOuterJoin",
            "location": 145,
            "return": [
                "DStream[Tuple[(K, Tuple[(Optional[V], Optional[U])])]]"
            ],
            "arguments": {
                "self": [
                    "DStream[Tuple[(K, V)]]"
                ],
                "other": [
                    "DStream[Tuple[(K, U)]]"
                ],
                "numPartitions": [
                    "Optional[int]"
                ]
            }
        },
        "DStream.slice": {
            "name": "slice",
            "location": 150,
            "return": [
                "List[RDD[T]]"
            ],
            "arguments": {
                "self": [],
                "begin": [
                    "Union[(datetime.datetime, int)]"
                ],
                "end": [
                    "Union[(datetime.datetime, int)]"
                ]
            }
        },
        "DStream.window": {
            "name": "window",
            "location": 153,
            "return": [
                "DStream[T]"
            ],
            "arguments": {
                "self": [],
                "windowDuration": [
                    "int"
                ],
                "slideDuration": [
                    "Optional[int]"
                ]
            }
        },
        "DStream.reduceByWindow": {
            "name": "reduceByWindow",
            "location": 156,
            "return": [
                "DStream[T]"
            ],
            "arguments": {
                "self": [],
                "reduceFunc": [
                    "Callable[([T, T], T)]"
                ],
                "invReduceFunc": [
                    "Optional[Callable[([T, T], T)]]"
                ],
                "windowDuration": [
                    "int"
                ],
                "slideDuration": [
                    "int"
                ]
            }
        },
        "DStream.countByWindow": {
            "name": "countByWindow",
            "location": 163,
            "return": [
                "DStream[Tuple[(T, int)]]"
            ],
            "arguments": {
                "self": [],
                "windowDuration": [
                    "int"
                ],
                "slideDuration": [
                    "int"
                ]
            }
        },
        "DStream.countByValueAndWindow": {
            "name": "countByValueAndWindow",
            "location": 166,
            "return": [
                "DStream[Tuple[(T, int)]]"
            ],
            "arguments": {
                "self": [],
                "windowDuration": [
                    "int"
                ],
                "slideDuration": [
                    "int"
                ],
                "numPartitions": [
                    "Optional[int]"
                ]
            }
        },
        "DStream.groupByKeyAndWindow": {
            "name": "groupByKeyAndWindow",
            "location": 172,
            "return": [
                "DStream[Tuple[(K, Iterable[V])]]"
            ],
            "arguments": {
                "self": [
                    "DStream[Tuple[(K, V)]]"
                ],
                "windowDuration": [
                    "int"
                ],
                "slideDuration": [
                    "int"
                ],
                "numPartitions": [
                    "Optional[int]"
                ]
            }
        },
        "DStream.reduceByKeyAndWindow": {
            "name": "reduceByKeyAndWindow",
            "location": 178,
            "return": [
                "DStream[Tuple[(K, V)]]"
            ],
            "arguments": {
                "self": [
                    "DStream[Tuple[(K, V)]]"
                ],
                "func": [
                    "Callable[([V, V], V)]"
                ],
                "invFunc": [
                    "Optional[Callable[([V, V], V)]]"
                ],
                "windowDuration": [
                    "int"
                ],
                "slideDuration": [
                    "Optional[int]"
                ],
                "numPartitions": [
                    "Optional[int]"
                ],
                "filterFunc": [
                    "Optional[Callable[([Tuple[(K, V)]], bool)]]"
                ]
            }
        },
        "DStream.updateStateByKey": {
            "name": "updateStateByKey",
            "location": 187,
            "return": [
                "DStream[Tuple[(K, S)]]"
            ],
            "arguments": {
                "self": [
                    "DStream[Tuple[(K, V)]]"
                ],
                "updateFunc": [
                    "Callable[([Iterable[V], Optional[S]], S)]"
                ],
                "numPartitions": [
                    "Optional[int]"
                ],
                "initialRDD": [
                    "Optional[RDD[Tuple[(K, S)]]]"
                ]
            }
        },
        "TransformedDStream.__init__": {
            "name": "__init__",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [
                    "DStream[U]"
                ],
                "prev": [
                    "DStream[T]"
                ],
                "func": [
                    "Callable[([datetime.datetime, RDD[T]], RDD[U])]"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/streaming/kinesis.py": {
        "utf8_decoder": {
            "name": "utf8_decoder",
            "location": 23,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "KinesisUtils.createStream": {
            "name": "createStream",
            "location": 27,
            "return": [],
            "arguments": {
                "ssc": [],
                "kinesisAppName": [],
                "streamName": [],
                "endpointUrl": [],
                "regionName": [],
                "initialPositionInStream": [],
                "checkpointInterval": [],
                "storageLevel": [
                    "Any"
                ],
                "awsAccessKeyId": [
                    "Optional[Any]"
                ],
                "awsSecretKey": [
                    "Optional[Any]"
                ],
                "decoder": [
                    "Any"
                ],
                "stsAssumeRoleArn": [
                    "Optional[Any]"
                ],
                "stsSessionName": [
                    "Optional[Any]"
                ],
                "stsExternalId": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/streaming/listener.py": {
        "StreamingListener.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamingListener.onStreamingStarted": {
            "name": "onStreamingStarted",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "streamingStarted": [
                    "Any"
                ]
            }
        },
        "StreamingListener.onReceiverStarted": {
            "name": "onReceiverStarted",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "receiverStarted": [
                    "Any"
                ]
            }
        },
        "StreamingListener.onReceiverError": {
            "name": "onReceiverError",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "receiverError": [
                    "Any"
                ]
            }
        },
        "StreamingListener.onReceiverStopped": {
            "name": "onReceiverStopped",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "receiverStopped": [
                    "Any"
                ]
            }
        },
        "StreamingListener.onBatchSubmitted": {
            "name": "onBatchSubmitted",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batchSubmitted": [
                    "Any"
                ]
            }
        },
        "StreamingListener.onBatchStarted": {
            "name": "onBatchStarted",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batchStarted": [
                    "Any"
                ]
            }
        },
        "StreamingListener.onBatchCompleted": {
            "name": "onBatchCompleted",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batchCompleted": [
                    "Any"
                ]
            }
        },
        "StreamingListener.onOutputOperationStarted": {
            "name": "onOutputOperationStarted",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "outputOperationStarted": [
                    "Any"
                ]
            }
        },
        "StreamingListener.onOutputOperationCompleted": {
            "name": "onOutputOperationCompleted",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "outputOperationCompleted": [
                    "Any"
                ]
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/streaming/util.py": {
        "rddToFileName": {
            "name": "rddToFileName",
            "location": 48,
            "return": [],
            "arguments": {
                "prefix": [],
                "suffix": [],
                "timestamp": []
            }
        },
        "TransformFunction.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [],
                "func": []
            }
        },
        "TransformFunction.rdd_wrapper": {
            "name": "rdd_wrapper",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "TransformFunction.call": {
            "name": "call",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "milliseconds": [],
                "jrdds": []
            }
        },
        "TransformFunction.getLastFailure": {
            "name": "getLastFailure",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransformFunctionSerializer.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [],
                "serializer": [],
                "gateway": [
                    "Optional[Any]"
                ]
            }
        },
        "TransformFunctionSerializer.dumps": {
            "name": "dumps",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "TransformFunctionSerializer.loads": {
            "name": "loads",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TransformFunctionSerializer.getLastFailure": {
            "name": "getLastFailure",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyspark-stubs-master/third_party/3/pyspark/streaming/__init__.py": {}
}
{
    "pytest-mypy-plugins-master/setup.py": {},
    "pytest-mypy-plugins-master/pytest_mypy_plugins/collect.py": {
        "parse_test_files": {
            "name": "parse_test_files",
            "location": 27,
            "return": [
                "List[File]"
            ],
            "arguments": {
                "test_files": [
                    "List[Dict[(str, Any)]]"
                ]
            }
        },
        "parse_environment_variables": {
            "name": "parse_environment_variables",
            "location": 36,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "env_vars": [
                    "List[str]"
                ]
            }
        },
        "parse_parametrized": {
            "name": "parse_parametrized",
            "location": 44,
            "return": [
                "List[Mapping[(str, Any)]]"
            ],
            "arguments": {
                "params": [
                    "List[Mapping[(str, Any)]]"
                ]
            }
        },
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Parser"
                ]
            }
        },
        "File.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "content": [
                    "str"
                ]
            }
        },
        "SafeLineLoader.construct_mapping": {
            "name": "construct_mapping",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "yaml.Node"
                ],
                "deep": [
                    "bool"
                ]
            }
        },
        "YamlTestFile.collect": {
            "name": "collect",
            "location": 78,
            "return": [
                "Iterator['YamlTestItem']"
            ],
            "arguments": {
                "self": []
            }
        },
        "YamlTestFile._eval_skip": {
            "name": "_eval_skip",
            "location": 141,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "skip_if": [
                    "str"
                ]
            }
        },
        "pytest_collect_file": {
            "name": "pytest_collect_file",
            "location": 154,
            "return": [
                "Optional[YamlTestFile]"
            ],
            "arguments": {
                "path": [
                    "LocalPath"
                ],
                "parent": [
                    "Node"
                ]
            }
        }
    },
    "pytest-mypy-plugins-master/pytest_mypy_plugins/item.py": {
        "make_files": {
            "name": "make_files",
            "location": 56,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "rootdir": [
                    "Path"
                ],
                "files_to_create": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "replace_fpath_with_module_name": {
            "name": "replace_fpath_with_module_name",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "line": [
                    "str"
                ],
                "rootdir": [
                    "Path"
                ]
            }
        },
        "maybe_to_abspath": {
            "name": "maybe_to_abspath",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "rel_or_abs": [
                    "str"
                ],
                "rootdir": [
                    "Optional[Path]"
                ]
            }
        },
        "run_mypy_typechecking": {
            "name": "run_mypy_typechecking",
            "location": 90,
            "return": [
                "int"
            ],
            "arguments": {
                "cmd_options": [
                    "List[str]"
                ]
            }
        },
        "TraceLastReprEntry.toterminal": {
            "name": "toterminal",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tw": [
                    "TerminalWriter"
                ]
            }
        },
        "run_mypy_typechecking.flush_errors": {
            "name": "flush_errors",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "new_messages": [
                    "List[str]"
                ],
                "serious": [
                    "bool"
                ]
            }
        },
        "YamlTestItem.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "parent": [
                    "Optional[YamlTestFile]"
                ],
                "config": [
                    "Optional[Config]"
                ]
            }
        },
        "YamlTestItem.make_test_file": {
            "name": "make_test_file",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "File"
                ]
            }
        },
        "YamlTestItem.make_test_files_in_current_directory": {
            "name": "make_test_files_in_current_directory",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YamlTestItem.remove_cache_files": {
            "name": "remove_cache_files",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fpath_no_suffix": [
                    "Path"
                ]
            }
        },
        "YamlTestItem.typecheck_in_new_subprocess": {
            "name": "typecheck_in_new_subprocess",
            "location": 187,
            "return": [
                "Tuple[(int, Tuple[(str, str)])]"
            ],
            "arguments": {
                "self": [],
                "execution_path": [
                    "Path"
                ],
                "mypy_cmd_options": [
                    "List[Any]"
                ]
            }
        },
        "YamlTestItem.typecheck_in_same_process": {
            "name": "typecheck_in_same_process",
            "location": 216,
            "return": [
                "Tuple[(int, Tuple[(str, str)])]"
            ],
            "arguments": {
                "self": [],
                "execution_path": [
                    "Path"
                ],
                "mypy_cmd_options": [
                    "List[Any]"
                ]
            }
        },
        "YamlTestItem.execute_extension_hook": {
            "name": "execute_extension_hook",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YamlTestItem.runtest": {
            "name": "runtest",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YamlTestItem.prepare_mypy_cmd_options": {
            "name": "prepare_mypy_cmd_options",
            "location": 301,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "execution_path": [
                    "Path"
                ]
            }
        },
        "YamlTestItem.repr_failure": {
            "name": "repr_failure",
            "location": 332,
            "return": [
                "Union[(str, TerminalRepr)]"
            ],
            "arguments": {
                "self": [],
                "excinfo": [
                    "ExceptionInfo[BaseException]"
                ],
                "style": [
                    "Optional['_TracebackStyle']"
                ]
            }
        },
        "YamlTestItem.reportinfo": {
            "name": "reportinfo",
            "location": 357,
            "return": [
                "Tuple[(Union[(py.path.local, Path, str)], Optional[int], str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "YamlTestItem._collect_python_path": {
            "name": "_collect_python_path",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rootdir": [
                    "Optional[Path]"
                ],
                "execution_path": [
                    "Path"
                ]
            }
        },
        "YamlTestItem._collect_mypy_path": {
            "name": "_collect_mypy_path",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rootdir": [
                    "Optional[Path]"
                ]
            }
        }
    },
    "pytest-mypy-plugins-master/pytest_mypy_plugins/utils.py": {
        "temp_environ": {
            "name": "temp_environ",
            "location": 20,
            "return": [
                "Iterator[None]"
            ],
            "arguments": {}
        },
        "temp_path": {
            "name": "temp_path",
            "location": 31,
            "return": [
                "Iterator[None]"
            ],
            "arguments": {}
        },
        "temp_sys_modules": {
            "name": "temp_sys_modules",
            "location": 41,
            "return": [
                "Iterator[None]"
            ],
            "arguments": {}
        },
        "fname_to_module": {
            "name": "fname_to_module",
            "location": 49,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "fpath": [
                    "Path"
                ],
                "root_path": [
                    "Path"
                ]
            }
        },
        "remove_common_prefix": {
            "name": "remove_common_prefix",
            "location": 110,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "lines": [
                    "List[str]"
                ]
            }
        },
        "_add_aligned_message": {
            "name": "_add_aligned_message",
            "location": 124,
            "return": [
                "str"
            ],
            "arguments": {
                "s1": [
                    "str"
                ],
                "s2": [
                    "str"
                ],
                "error_message": [
                    "str"
                ]
            }
        },
        "remove_empty_lines": {
            "name": "remove_empty_lines",
            "location": 180,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "lines": [
                    "List[str]"
                ]
            }
        },
        "sorted_by_file_and_line": {
            "name": "sorted_by_file_and_line",
            "location": 188,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "lines": [
                    "List[str]"
                ]
            }
        },
        "assert_expected_matched_actual": {
            "name": "assert_expected_matched_actual",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "expected": [
                    "List[OutputMatcher]"
                ],
                "actual": [
                    "List[str]"
                ]
            }
        },
        "extract_output_matchers_from_comments": {
            "name": "extract_output_matchers_from_comments",
            "location": 283,
            "return": [
                "List[OutputMatcher]"
            ],
            "arguments": {
                "fname": [
                    "str"
                ],
                "input_lines": [
                    "List[str]"
                ],
                "regex": [
                    "bool"
                ]
            }
        },
        "extract_output_matchers_from_out": {
            "name": "extract_output_matchers_from_out",
            "location": 320,
            "return": [
                "List[OutputMatcher]"
            ],
            "arguments": {
                "out": [
                    "str"
                ],
                "params": [
                    "Mapping[(str, Any)]"
                ],
                "regex": [
                    "bool"
                ]
            }
        },
        "render_template": {
            "name": "render_template",
            "location": 354,
            "return": [
                "str"
            ],
            "arguments": {
                "template": [
                    "str"
                ],
                "data": [
                    "Mapping[(str, Any)]"
                ]
            }
        },
        "get_func_first_lnum": {
            "name": "get_func_first_lnum",
            "location": 358,
            "return": [
                "Optional[Tuple[(int, List[str])]]"
            ],
            "arguments": {
                "attr": [
                    "Callable[(..., None)]"
                ]
            }
        },
        "cd": {
            "name": "cd",
            "location": 368,
            "return": [
                "Iterator[None]"
            ],
            "arguments": {
                "path": [
                    "Union[(str, Path)]"
                ]
            }
        },
        "capture_std_streams": {
            "name": "capture_std_streams",
            "location": 383,
            "return": [
                "Iterator[Tuple[(io.StringIO, io.StringIO)]]"
            ],
            "arguments": {}
        },
        "OutputMatcher.matches": {
            "name": "matches",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "actual": [
                    "str"
                ]
            }
        },
        "OutputMatcher.__str__": {
            "name": "__str__",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OutputMatcher.__format__": {
            "name": "__format__",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "format_spec": [
                    "str"
                ]
            }
        },
        "OutputMatcher.__len__": {
            "name": "__len__",
            "location": 94,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypecheckAssertionError.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error_message": [
                    "Optional[str]"
                ],
                "lineno": [
                    "int"
                ]
            }
        },
        "TypecheckAssertionError.first_line": {
            "name": "first_line",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypecheckAssertionError.__str__": {
            "name": "__str__",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "sorted_by_file_and_line.extract_parts_as_tuple": {
            "name": "extract_parts_as_tuple",
            "location": 189,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "assert_expected_matched_actual.format_mismatched_line": {
            "name": "format_mismatched_line",
            "location": 208,
            "return": [
                "str"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "assert_expected_matched_actual.format_matched_line": {
            "name": "format_matched_line",
            "location": 211,
            "return": [
                "str"
            ],
            "arguments": {
                "line": [
                    "str"
                ],
                "width": [
                    "int"
                ]
            }
        },
        "assert_expected_matched_actual.format_error_lines": {
            "name": "format_error_lines",
            "location": 214,
            "return": [
                "str"
            ],
            "arguments": {
                "lines": [
                    "List[str]"
                ]
            }
        }
    },
    "pytest-mypy-plugins-master/pytest_mypy_plugins/__init__.py": {},
    "pytest-mypy-plugins-master/pytest_mypy_plugins/tests/reveal_type_hook.py": {
        "hook": {
            "name": "hook",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "item": [
                    "YamlTestItem"
                ]
            }
        }
    },
    "pytest-mypy-plugins-master/pytest_mypy_plugins/tests/test_utils.py": {
        "test_render_template_with_None_value": {
            "name": "test_render_template_with_None_value",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_assert_expected_matched_actual_failures": {
            "name": "test_assert_expected_matched_actual_failures",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "source_lines": [
                    "List[str]"
                ],
                "actual_lines": [
                    "List[str]"
                ],
                "expected_message_lines": [
                    "List[str]"
                ]
            }
        },
        "test_sorted_by_file_and_line_is_stable": {
            "name": "test_sorted_by_file_and_line_is_stable",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "input_lines": [
                    "List[str]"
                ]
            }
        },
        "test_sorted_by_file_and_line_is_stable.lines_for_file": {
            "name": "lines_for_file",
            "location": 211,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "lines": [
                    "List[str]"
                ],
                "fname": [
                    "str"
                ]
            }
        }
    },
    "pytest-mypy-plugins-master/pytest_mypy_plugins/tests/fixtures/pair.py": {}
}
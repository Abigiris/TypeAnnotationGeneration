{
    "python-algorithms-master/setup.py": {},
    "python-algorithms-master/python_algorithms/binary_search_tree.py": {
        "tree_insert": {
            "name": "tree_insert",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "root": [
                    "TreeNode"
                ],
                "new_node": [
                    "TreeNode"
                ]
            }
        },
        "in_order_tree_walk": {
            "name": "in_order_tree_walk",
            "location": 81,
            "return": [
                "Generator[(CT, None, None)]"
            ],
            "arguments": {
                "node": [
                    "Optional[TreeNode]"
                ]
            }
        },
        "tree_search": {
            "name": "tree_search",
            "location": 89,
            "return": [
                "Optional[TreeNode]"
            ],
            "arguments": {
                "node": [
                    "Optional[TreeNode]"
                ],
                "key": [
                    "CT"
                ]
            }
        },
        "tree_minimum": {
            "name": "tree_minimum",
            "location": 98,
            "return": [
                "Optional[TreeNode]"
            ],
            "arguments": {
                "node": [
                    "Optional[TreeNode]"
                ]
            }
        },
        "Comparable.__lt__": {
            "name": "__lt__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "TreeNode.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "CT"
                ],
                "value": [
                    "Any"
                ],
                "parent": [
                    "Optional['TreeNode']"
                ],
                "left_child": [
                    "Optional['TreeNode']"
                ],
                "right_child": [
                    "Optional['TreeNode']"
                ]
            }
        },
        "TreeNode.key": {
            "name": "key",
            "location": 32,
            "return": [
                "CT"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeNode.parent": {
            "name": "parent",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree_node": [
                    "Optional['TreeNode']"
                ]
            }
        },
        "TreeNode.left_child": {
            "name": "left_child",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree_node": [
                    "Optional['TreeNode']"
                ]
            }
        },
        "TreeNode.right_child": {
            "name": "right_child",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree_node": [
                    "Optional['TreeNode']"
                ]
            }
        }
    },
    "python-algorithms-master/python_algorithms/dynamic_programming.py": {
        "cut_rod": {
            "name": "cut_rod",
            "location": 8,
            "return": [
                "float"
            ],
            "arguments": {
                "prices": [
                    "List[float]"
                ],
                "rod_length": [
                    "int"
                ]
            }
        },
        "dice_rolls": {
            "name": "dice_rolls",
            "location": 23,
            "return": [
                "int"
            ],
            "arguments": {
                "num_rolls": [
                    "int"
                ],
                "sum_rolls": [
                    "int"
                ]
            }
        },
        "knapsack": {
            "name": "knapsack",
            "location": 42,
            "return": [
                "Tuple[(int, List[Tuple[(int, int)]])]"
            ],
            "arguments": {
                "items": [
                    "List[Tuple[(int, int)]]"
                ],
                "max_weight": [
                    "int"
                ]
            }
        },
        "min_remainder": {
            "name": "min_remainder",
            "location": 80,
            "return": [
                "int"
            ],
            "arguments": {
                "i": [
                    "int"
                ],
                "j": [
                    "int"
                ],
                "total": [
                    "int"
                ],
                "G": [
                    "List[List[int]]"
                ]
            }
        },
        "cut_rod._cut_rod": {
            "name": "_cut_rod",
            "location": 10,
            "return": [],
            "arguments": {
                "rod_length": []
            }
        },
        "dice_rolls._dice_rolls": {
            "name": "_dice_rolls",
            "location": 30,
            "return": [],
            "arguments": {
                "num_rolls": [],
                "sum_rolls": []
            }
        },
        "knapsack.best_value": {
            "name": "best_value",
            "location": 52,
            "return": [
                "int"
            ],
            "arguments": {
                "i": [
                    "int"
                ],
                "w": [
                    "int"
                ]
            }
        },
        "min_remainder._min_remainder": {
            "name": "_min_remainder",
            "location": 87,
            "return": [],
            "arguments": {
                "i": [],
                "j": [],
                "total": []
            }
        }
    },
    "python-algorithms-master/python_algorithms/graphs.py": {
        "breadth_first_search": {
            "name": "breadth_first_search",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [
                    "Graph"
                ],
                "origin": [
                    "Vertex"
                ]
            }
        },
        "Vertex.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str"
                ],
                "neighbors": [
                    "Optional[Dict[('Vertex', float)]]"
                ],
                "color": [
                    "Optional[NodeColor]"
                ],
                "distance": [
                    "Optional[float]"
                ],
                "predecessor": [
                    "Optional['Vertex']"
                ]
            }
        },
        "Vertex.__str__": {
            "name": "__str__",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vertex.label": {
            "name": "label",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vertex.neighbors": {
            "name": "neighbors",
            "location": 43,
            "return": [
                "Optional[Dict[('Vertex', float)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vertex.color": {
            "name": "color",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "NodeColor"
                ]
            }
        },
        "Vertex.distance": {
            "name": "distance",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "Vertex.predecessor": {
            "name": "predecessor",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional['Vertex']"
                ]
            }
        },
        "Vertex.add_neighbor": {
            "name": "add_neighbor",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "neighbor": [
                    "'Vertex'"
                ],
                "edge_weight": [
                    "float"
                ]
            }
        },
        "Graph.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connections": [
                    "Iterable[Tuple[(str, str, float)]]"
                ]
            }
        },
        "Graph.vertices": {
            "name": "vertices",
            "location": 85,
            "return": [
                "Dict[(str, Vertex)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph._build_graph": {
            "name": "_build_graph",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connections": [
                    "Iterable[Tuple[(str, str, float)]]"
                ]
            }
        }
    },
    "python-algorithms-master/python_algorithms/misc.py": {
        "gen_product_pairs": {
            "name": "gen_product_pairs",
            "location": 7,
            "return": [
                "Generator[(Tuple[(float, float)], None, None)]"
            ],
            "arguments": {
                "xs": [
                    "List[float]"
                ],
                "prod": [
                    "float"
                ]
            }
        },
        "max_sub_array": {
            "name": "max_sub_array",
            "location": 22,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "xs": [
                    "Sequence[int]"
                ]
            }
        }
    },
    "python-algorithms-master/python_algorithms/sorting.py": {
        "insertion_sort": {
            "name": "insertion_sort",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "A": [
                    "MutableSequence[CT]"
                ]
            }
        },
        "get_index_of_parent": {
            "name": "get_index_of_parent",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {
                "i": [
                    "int"
                ]
            }
        },
        "get_index_of_left_child": {
            "name": "get_index_of_left_child",
            "location": 37,
            "return": [
                "int"
            ],
            "arguments": {
                "i": [
                    "int"
                ]
            }
        },
        "get_index_of_right_child": {
            "name": "get_index_of_right_child",
            "location": 42,
            "return": [
                "int"
            ],
            "arguments": {
                "i": [
                    "int"
                ]
            }
        },
        "get_first_leaf_index": {
            "name": "get_first_leaf_index",
            "location": 47,
            "return": [
                "int"
            ],
            "arguments": {
                "len_heap": [
                    "int"
                ]
            }
        },
        "max_heapify": {
            "name": "max_heapify",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "A": [
                    "MutableSequence[CT]"
                ],
                "i": [
                    "int"
                ],
                "heap_size": [
                    "Optional[int]"
                ]
            }
        },
        "build_max_heap": {
            "name": "build_max_heap",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "A": [
                    "MutableSequence[CT]"
                ]
            }
        },
        "heap_sort": {
            "name": "heap_sort",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "A": [
                    "MutableSequence[CT]"
                ]
            }
        },
        "partition": {
            "name": "partition",
            "location": 90,
            "return": [
                "int"
            ],
            "arguments": {
                "A": [
                    "MutableSequence[CT]"
                ],
                "p": [
                    "Optional[int]"
                ],
                "r": [
                    "Optional[int]"
                ]
            }
        },
        "randomized_partition": {
            "name": "randomized_partition",
            "location": 113,
            "return": [
                "int"
            ],
            "arguments": {
                "A": [
                    "MutableSequence[CT]"
                ],
                "p": [
                    "Optional[int]"
                ],
                "r": [
                    "Optional[int]"
                ]
            }
        },
        "quick_sort": {
            "name": "quick_sort",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "A": [
                    "MutableSequence[CT]"
                ],
                "p": [
                    "Optional[int]"
                ],
                "r": [
                    "Optional[int]"
                ]
            }
        },
        "randomized_select": {
            "name": "randomized_select",
            "location": 139,
            "return": [
                "int"
            ],
            "arguments": {
                "A": [
                    "MutableSequence[CT]"
                ],
                "i": [
                    "int"
                ],
                "p": [
                    "Optional[int]"
                ],
                "r": [
                    "Optional[int]"
                ]
            }
        },
        "Comparable.__lt__": {
            "name": "__lt__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        }
    },
    "python-algorithms-master/python_algorithms/__init__.py": {},
    "python-algorithms-master/tests/test_binary_search_tree.py": {
        "test_build_a_tree": {
            "name": "test_build_a_tree",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "tree_root": {
            "name": "tree_root",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "test_in_order_tree_walk": {
            "name": "test_in_order_tree_walk",
            "location": 54,
            "return": [],
            "arguments": {
                "tree_root": []
            }
        },
        "test_tree_search": {
            "name": "test_tree_search",
            "location": 59,
            "return": [],
            "arguments": {
                "tree_root": []
            }
        },
        "test_tree_minimum": {
            "name": "test_tree_minimum",
            "location": 70,
            "return": [],
            "arguments": {
                "tree_root": []
            }
        }
    },
    "python-algorithms-master/tests/test_dynamic_programming.py": {
        "test_cut_rod": {
            "name": "test_cut_rod",
            "location": 13,
            "return": [],
            "arguments": {
                "rod_length": [],
                "expected": []
            }
        },
        "test_dice_rolls": {
            "name": "test_dice_rolls",
            "location": 26,
            "return": [],
            "arguments": {
                "num_rolls": [],
                "sum_rolls": [],
                "expected": []
            }
        },
        "test_knapsack": {
            "name": "test_knapsack",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "test_min_remainder": {
            "name": "test_min_remainder",
            "location": 41,
            "return": [],
            "arguments": {
                "total": [],
                "G": [],
                "expected": []
            }
        }
    },
    "python-algorithms-master/tests/test_graphs.py": {
        "undirected_graph": {
            "name": "undirected_graph",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_build_graph": {
            "name": "test_build_graph",
            "location": 33,
            "return": [],
            "arguments": {
                "undirected_graph": []
            }
        },
        "test_breadth_first_search": {
            "name": "test_breadth_first_search",
            "location": 46,
            "return": [],
            "arguments": {
                "undirected_graph": []
            }
        }
    },
    "python-algorithms-master/tests/test_misc.py": {
        "test_gen_product_pairs": {
            "name": "test_gen_product_pairs",
            "location": 15,
            "return": [],
            "arguments": {
                "xs": [],
                "prod": [],
                "expected": []
            }
        },
        "test_max_sub_array": {
            "name": "test_max_sub_array",
            "location": 23,
            "return": [],
            "arguments": {
                "xs": [],
                "expected": []
            }
        }
    },
    "python-algorithms-master/tests/test_sorting.py": {
        "test_insertion_sort": {
            "name": "test_insertion_sort",
            "location": 27,
            "return": [],
            "arguments": {
                "A": [],
                "expected": []
            }
        },
        "test_heap_get_index_of_parent": {
            "name": "test_heap_get_index_of_parent",
            "location": 36,
            "return": [],
            "arguments": {
                "i": [],
                "expected": []
            }
        },
        "test_heap_get_index_of_left_child": {
            "name": "test_heap_get_index_of_left_child",
            "location": 43,
            "return": [],
            "arguments": {
                "i": [],
                "expected": []
            }
        },
        "test_heap_get_index_of_right_child": {
            "name": "test_heap_get_index_of_right_child",
            "location": 48,
            "return": [],
            "arguments": {
                "i": [],
                "expected": []
            }
        },
        "test_get_first_leaf_index": {
            "name": "test_get_first_leaf_index",
            "location": 53,
            "return": [],
            "arguments": {
                "len_heap": [],
                "expected": []
            }
        },
        "test_heap_max_heapify": {
            "name": "test_heap_max_heapify",
            "location": 68,
            "return": [],
            "arguments": {
                "A": [],
                "i": [],
                "expected": []
            }
        },
        "test_build_max_heap": {
            "name": "test_build_max_heap",
            "location": 83,
            "return": [],
            "arguments": {
                "A": [],
                "expected": []
            }
        },
        "test_heap_sort": {
            "name": "test_heap_sort",
            "location": 96,
            "return": [],
            "arguments": {
                "A": [],
                "expected": []
            }
        },
        "test_partition": {
            "name": "test_partition",
            "location": 114,
            "return": [],
            "arguments": {
                "A": [],
                "p": [],
                "r": [],
                "q": [],
                "expected": []
            }
        },
        "test_quick_sort": {
            "name": "test_quick_sort",
            "location": 131,
            "return": [],
            "arguments": {
                "A": [],
                "expected": []
            }
        },
        "test_randomized_select": {
            "name": "test_randomized_select",
            "location": 141,
            "return": [],
            "arguments": {
                "A": [],
                "i": [],
                "expected": []
            }
        }
    }
}
{
    "python-dectest-master/dectest/_decorators.py": {
        "test": {
            "name": "test",
            "location": 9,
            "return": [
                "_F"
            ],
            "arguments": {
                "method": [
                    "_F"
                ]
            }
        },
        "before": {
            "name": "before",
            "location": 15,
            "return": [
                "_F"
            ],
            "arguments": {
                "method": [
                    "_F"
                ]
            }
        },
        "after": {
            "name": "after",
            "location": 25,
            "return": [
                "_F"
            ],
            "arguments": {
                "method": [
                    "_F"
                ]
            }
        },
        "skip": {
            "name": "skip",
            "location": 35,
            "return": [
                "Callable[([_F], _F)]"
            ],
            "arguments": {
                "reason": [
                    "str"
                ]
            }
        },
        "skip_if": {
            "name": "skip_if",
            "location": 51,
            "return": [
                "Callable[([_F], _F)]"
            ],
            "arguments": {
                "condition": [
                    "bool"
                ],
                "reason": [
                    "str"
                ]
            }
        },
        "skip_unless": {
            "name": "skip_unless",
            "location": 64,
            "return": [
                "Callable[([_F], _F)]"
            ],
            "arguments": {
                "condition": [
                    "bool"
                ],
                "reason": [
                    "str"
                ]
            }
        },
        "skip.decorate": {
            "name": "decorate",
            "location": 45,
            "return": [
                "_F"
            ],
            "arguments": {
                "method": [
                    "_F"
                ]
            }
        },
        "skip_if.decorate": {
            "name": "decorate",
            "location": 58,
            "return": [
                "_F"
            ],
            "arguments": {
                "method": [
                    "_F"
                ]
            }
        },
        "skip_unless.decorate": {
            "name": "decorate",
            "location": 71,
            "return": [
                "_F"
            ],
            "arguments": {
                "method": [
                    "_F"
                ]
            }
        }
    },
    "python-dectest-master/dectest/_testcase.py": {
        "_is_test_method": {
            "name": "_is_test_method",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "method": [
                    "Any"
                ]
            }
        },
        "_TestCaseMeta.__new__": {
            "name": "__new__",
            "location": 21,
            "return": [
                "_C"
            ],
            "arguments": {
                "mcs": [
                    "Type[_C]"
                ],
                "name": [
                    "str"
                ],
                "bases": [
                    "Tuple[(type, ...)]"
                ],
                "dct": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "TestCase.setUp": {
            "name": "setUp",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.tearDown": {
            "name": "tearDown",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase._get_decorated_methods": {
            "name": "_get_decorated_methods",
            "location": 56,
            "return": [
                "List[TestMethod]"
            ],
            "arguments": {
                "self": [],
                "attr_name": [
                    "str"
                ]
            }
        },
        "TestCase.patch": {
            "name": "patch",
            "location": 73,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Any"
                ]
            }
        },
        "TestCase._get_decorated_methods.get_methods_in_class": {
            "name": "get_methods_in_class",
            "location": 62,
            "return": [
                "List[TestMethod]"
            ],
            "arguments": {
                "class_": [
                    "type"
                ]
            }
        }
    },
    "python-dectest-master/dectest/_types.py": {},
    "python-dectest-master/dectest/__init__.py": {},
    "python-dectest-master/test_dectest/common.py": {
        "TestCaseTestBase.run_test_class": {
            "name": "run_test_class",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_": [
                    "Type[TestCase]"
                ]
            }
        },
        "TestCaseTestBase.run_test_suite": {
            "name": "run_test_suite",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "suite": [
                    "unittest.TestSuite"
                ]
            }
        },
        "TestCaseTestBase.assert_test_result": {
            "name": "assert_test_result",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "success": [
                    "int"
                ],
                "failure": [
                    "int"
                ],
                "error": [
                    "int"
                ],
                "skipped": [
                    "int"
                ]
            }
        }
    },
    "python-dectest-master/test_dectest/decorators.py": {
        "DecoratorTest.two_before_decorators": {
            "name": "two_before_decorators",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoratorTest.decorator__success": {
            "name": "decorator__success",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoratorTest.decorator__error": {
            "name": "decorator__error",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoratorTest.decorator__fail": {
            "name": "decorator__fail",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoratorTest.decorator__skip": {
            "name": "decorator__skip",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoratorTest.decorator__skip__without_arguments": {
            "name": "decorator__skip__without_arguments",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoratorTest.decorator__skip_if__true": {
            "name": "decorator__skip_if__true",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoratorTest.decorator__skip_if__false": {
            "name": "decorator__skip_if__false",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoratorTest.decorator__skip_unless__true": {
            "name": "decorator__skip_unless__true",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoratorTest.decorator__skip_unless__false": {
            "name": "decorator__skip_unless__false",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoratorTest.two_before_decorators.MyTestCase.before1": {
            "name": "before1",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoratorTest.two_before_decorators.MyTestCase.before2": {
            "name": "before2",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoratorTest.two_before_decorators.MyTestCase.my_test": {
            "name": "my_test",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoratorTest.decorator__success.MyTestCase.foo": {
            "name": "foo",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoratorTest.decorator__error.MyTestCase.foo": {
            "name": "foo",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoratorTest.decorator__fail.MyTestCase.foo": {
            "name": "foo",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoratorTest.decorator__skip.MyTestCase.foo": {
            "name": "foo",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoratorTest.decorator__skip_if__true.MyTestCase.foo": {
            "name": "foo",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoratorTest.decorator__skip_if__false.MyTestCase.foo": {
            "name": "foo",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoratorTest.decorator__skip_unless__true.MyTestCase.foo": {
            "name": "foo",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoratorTest.decorator__skip_unless__false.MyTestCase.foo": {
            "name": "foo",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoratorTest.decorator__skip__without_arguments.MyTestCase.foo": {
            "name": "foo",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-dectest-master/test_dectest/patch.py": {
        "PatchTest.patched": {
            "name": "patched",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PatchTest.cleanup_in_teardown": {
            "name": "cleanup_in_teardown",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PatchTest.patched.MyTestCase.my_test": {
            "name": "my_test",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PatchTest.cleanup_in_teardown.MyTestCase.my_test": {
            "name": "my_test",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-dectest-master/test_dectest/__init__.py": {}
}
{
    "python-jsonlog-master/setup.py": {},
    "python-jsonlog-master/examples/args.py": {},
    "python-jsonlog-master/examples/auto.py": {},
    "python-jsonlog-master/examples/cli.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "action": {
            "name": "action",
            "location": 16,
            "return": [],
            "arguments": {}
        }
    },
    "python-jsonlog-master/examples/error.py": {},
    "python-jsonlog-master/examples/extra.py": {},
    "python-jsonlog-master/examples/hello.py": {},
    "python-jsonlog-master/examples/mixed.py": {},
    "python-jsonlog-master/jsonlog/config.py": {
        "basicConfig": {
            "name": "basicConfig",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ensure_handlers": {
            "name": "ensure_handlers",
            "location": 56,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "ensure_handlers.wrapper": {
            "name": "wrapper",
            "location": 60,
            "return": [],
            "arguments": {}
        }
    },
    "python-jsonlog-master/jsonlog/formatter.py": {
        "BaseJSONFormatter.format": {
            "name": "format",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "logging.LogRecord"
                ]
            }
        },
        "BaseJSONFormatter.format_level": {
            "name": "format_level",
            "location": 118,
            "return": [
                "JSONValue"
            ],
            "arguments": {
                "self": [],
                "_levelno": [
                    "int"
                ],
                "levelname": [
                    "str"
                ]
            }
        },
        "BaseJSONFormatter.format_time": {
            "name": "format_time",
            "location": 122,
            "return": [
                "JSONValue"
            ],
            "arguments": {
                "self": [],
                "time": [
                    "float"
                ]
            }
        },
        "BaseJSONFormatter.format_message": {
            "name": "format_message",
            "location": 126,
            "return": [
                "JSONValue"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "logging.LogRecord"
                ]
            }
        },
        "BaseJSONFormatter.format_tb": {
            "name": "format_tb",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "exc_info": [
                    "ExcInfo"
                ]
            }
        },
        "BaseJSONFormatter.extra_attributes": {
            "name": "extra_attributes",
            "location": 134,
            "return": [
                "JSON"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "logging.LogRecord"
                ]
            }
        },
        "BaseJSONFormatter.filter_attrs": {
            "name": "filter_attrs",
            "location": 138,
            "return": [
                "JSON"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "JSON"
                ]
            }
        },
        "BaseJSONFormatter.filter_extra": {
            "name": "filter_extra",
            "location": 142,
            "return": [
                "JSON"
            ],
            "arguments": {
                "self": [],
                "extra": [
                    "JSON"
                ]
            }
        },
        "BaseJSONFormatter.filter_payload": {
            "name": "filter_payload",
            "location": 146,
            "return": [
                "JSON"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "JSON"
                ]
            }
        },
        "JSONFormatter.format_time": {
            "name": "format_time",
            "location": 181,
            "return": [
                "JSONValue"
            ],
            "arguments": {
                "self": [],
                "time": [
                    "float"
                ]
            }
        },
        "JSONFormatter.filter_attrs": {
            "name": "filter_attrs",
            "location": 185,
            "return": [
                "JSON"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "JSON"
                ]
            }
        },
        "JSONFormatter.filter_payload": {
            "name": "filter_payload",
            "location": 189,
            "return": [
                "JSON"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "JSON"
                ]
            }
        }
    },
    "python-jsonlog-master/jsonlog/__init__.py": {},
    "python-jsonlog-master/jsonlog/tests/capture.py": {
        "Capture.__repr__": {
            "name": "__repr__",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Capture.stderr": {
            "name": "stderr",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Capture.__contains__": {
            "name": "__contains__",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        }
    },
    "python-jsonlog-master/jsonlog/tests/conftest.py": {
        "reset_logging": {
            "name": "reset_logging",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "record": {
            "name": "record",
            "location": 27,
            "return": [
                "logging.LogRecord"
            ],
            "arguments": {
                "request": []
            }
        },
        "capture": {
            "name": "capture",
            "location": 32,
            "return": [
                "jsonlog.tests.capture.Capture"
            ],
            "arguments": {
                "capsys": [
                    "_pytest.capture.CaptureResult"
                ]
            }
        }
    },
    "python-jsonlog-master/jsonlog/tests/records.py": {
        "simple_record": {
            "name": "simple_record",
            "location": 8,
            "return": [
                "logging.LogRecord"
            ],
            "arguments": {}
        },
        "extra_record": {
            "name": "extra_record",
            "location": 14,
            "return": [
                "logging.LogRecord"
            ],
            "arguments": {}
        },
        "error_record": {
            "name": "error_record",
            "location": 27,
            "return": [
                "logging.LogRecord"
            ],
            "arguments": {}
        }
    },
    "python-jsonlog-master/jsonlog/tests/test_config.py": {
        "test_basic_config": {
            "name": "test_basic_config",
            "location": 13,
            "return": [],
            "arguments": {
                "capture": [
                    "jsonlog.tests.capture.Capture"
                ]
            }
        },
        "test_already_configured": {
            "name": "test_already_configured",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_basic_config_filename": {
            "name": "test_basic_config_filename",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "test_basic_config_kwargs": {
            "name": "test_basic_config_kwargs",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "test_ensure_config": {
            "name": "test_ensure_config",
            "location": 35,
            "return": [],
            "arguments": {
                "capture": [
                    "jsonlog.tests.capture.Capture"
                ]
            }
        },
        "test_dict_config": {
            "name": "test_dict_config",
            "location": 40,
            "return": [],
            "arguments": {
                "capture": [
                    "jsonlog.tests.capture.Capture"
                ]
            }
        }
    },
    "python-jsonlog-master/jsonlog/tests/test_formatter.py": {
        "test_base": {
            "name": "test_base",
            "location": 9,
            "return": [],
            "arguments": {
                "record": [
                    "logging.LogRecord"
                ]
            }
        },
        "test_base_indent": {
            "name": "test_base_indent",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "record": [
                    "logging.LogRecord"
                ]
            }
        },
        "test_json_format": {
            "name": "test_json_format",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "record": [
                    "logging.LogRecord"
                ]
            }
        },
        "test_json_indent": {
            "name": "test_json_indent",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "record": [
                    "logging.LogRecord"
                ]
            }
        },
        "test_json_keys": {
            "name": "test_json_keys",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "record": [
                    "logging.LogRecord"
                ]
            }
        },
        "test_json_args": {
            "name": "test_json_args",
            "location": 31,
            "return": [],
            "arguments": {
                "capture": [
                    "jsonlog.tests.capture.Capture"
                ]
            }
        },
        "test_json_args_map": {
            "name": "test_json_args_map",
            "location": 37,
            "return": [],
            "arguments": {
                "capture": [
                    "jsonlog.tests.capture.Capture"
                ]
            }
        },
        "test_json_extra": {
            "name": "test_json_extra",
            "location": 43,
            "return": [],
            "arguments": {
                "capture": [
                    "jsonlog.tests.capture.Capture"
                ]
            }
        },
        "test_json_error": {
            "name": "test_json_error",
            "location": 49,
            "return": [],
            "arguments": {
                "capture": [
                    "jsonlog.tests.capture.Capture"
                ]
            }
        },
        "test_json_exception": {
            "name": "test_json_exception",
            "location": 58,
            "return": [],
            "arguments": {
                "capture": [
                    "jsonlog.tests.capture.Capture"
                ]
            }
        },
        "test_json_null": {
            "name": "test_json_null",
            "location": 67,
            "return": [],
            "arguments": {
                "capture": [
                    "jsonlog.tests.capture.Capture"
                ]
            }
        },
        "test_adaptor": {
            "name": "test_adaptor",
            "location": 73,
            "return": [],
            "arguments": {
                "capture": [
                    "jsonlog.tests.capture.Capture"
                ]
            }
        }
    },
    "python-jsonlog-master/jsonlog/tests/__init__.py": {}
}
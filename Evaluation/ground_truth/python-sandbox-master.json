{
    "python-sandbox-master/bounding_box/main.py": {
        "draw_bboxes": {
            "name": "draw_bboxes",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "img": [
                    "Any"
                ],
                "bboxes": [
                    "List[List[int]]"
                ],
                "labels": [
                    "List[int]"
                ],
                "scores": [
                    "List[float]"
                ],
                "classes": [
                    "List[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "python-sandbox-master/load_measurement/log_docker_stats.py": {
        "parse_docker_stats": {
            "name": "parse_docker_stats",
            "location": 10,
            "return": [
                "t.Dict[(str, str)]"
            ],
            "arguments": {}
        },
        "default_containers": {
            "name": "default_containers",
            "location": 22,
            "return": [
                "t.List[str]"
            ],
            "arguments": {}
        },
        "default_csv_name": {
            "name": "default_csv_name",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "parse_args": {
            "name": "parse_args",
            "location": 31,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "python-sandbox-master/load_measurement/log_proc.py": {
        "parse_load_average": {
            "name": "parse_load_average",
            "location": 11,
            "return": [
                "t.List[str]"
            ],
            "arguments": {}
        },
        "make_header": {
            "name": "make_header",
            "location": 87,
            "return": [
                "t.List[str]"
            ],
            "arguments": {
                "cpu_keys": [
                    "t.List[str]"
                ]
            }
        },
        "make_row": {
            "name": "make_row",
            "location": 96,
            "return": [
                "t.List[str]"
            ],
            "arguments": {
                "cpu_keys": [
                    "t.List[str]"
                ],
                "cpu_usage": [
                    "CpuUsage"
                ]
            }
        },
        "default_csv_name": {
            "name": "default_csv_name",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "parse_args": {
            "name": "parse_args",
            "location": 112,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CpuUsage.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CpuUsage.cpu_usage_ratio": {
            "name": "cpu_usage_ratio",
            "location": 37,
            "return": [
                "t.Dict[(str, t.List[float])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CpuUsage.__parse_proc_stat": {
            "name": "__parse_proc_stat",
            "location": 53,
            "return": [
                "t.Dict[(str, t.List[int])]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "CpuUsage.get_cpu_keys": {
            "name": "get_cpu_keys",
            "location": 67,
            "return": [
                "t.List[str]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "CpuUsage.__read_proc_stat": {
            "name": "__read_proc_stat",
            "location": 72,
            "return": [
                "t.List[str]"
            ],
            "arguments": {}
        }
    },
    "python-sandbox-master/prohibit_override/init_subclass.py": {
        "final": {
            "name": "final",
            "location": 7,
            "return": [
                "AnyCallable"
            ],
            "arguments": {
                "funcobj": [
                    "AnyCallable"
                ]
            }
        },
        "get_func_type": {
            "name": "get_func_type",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "type"
                ],
                "func_name": [
                    "str"
                ]
            }
        },
        "Final.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Final.get_methods": {
            "name": "get_methods",
            "location": 40,
            "return": [
                "List[Tuple[(str, AnyCallable)]]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "A.final_member": {
            "name": "final_member",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "A.final_class": {
            "name": "final_class",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "A.final_static": {
            "name": "final_static",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "A.overridable": {
            "name": "overridable",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "L.overridable": {
            "name": "overridable",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "C.final_member": {
            "name": "final_member",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "D.final_member": {
            "name": "final_member",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "E.final_member": {
            "name": "final_member",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "F.final_member": {
            "name": "final_member",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "G.final_member": {
            "name": "final_member",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "H.final_member": {
            "name": "final_member",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "J.final_class": {
            "name": "final_class",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "K.final_static": {
            "name": "final_static",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "python-sandbox-master/prohibit_override/mypy.py": {
        "Base.hello": {
            "name": "hello",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Derived.hello": {
            "name": "hello",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-sandbox-master/pytorch_bn_fusion/main.py": {
        "fuse_conv_bn": {
            "name": "fuse_conv_bn",
            "location": 9,
            "return": [
                "nn.Conv2d"
            ],
            "arguments": {
                "conv": [
                    "nn.Conv2d"
                ],
                "bn": [
                    "nn.BatchNorm2d"
                ]
            }
        },
        "convert_bn_params": {
            "name": "convert_bn_params",
            "location": 17,
            "return": [
                "Tuple[(torch.Tensor, torch.Tensor)]"
            ],
            "arguments": {
                "bn": [
                    "nn.BatchNorm2d"
                ]
            }
        },
        "gen_conv": {
            "name": "gen_conv",
            "location": 24,
            "return": [
                "nn.Conv2d"
            ],
            "arguments": {
                "in_channels": [
                    "int"
                ],
                "out_channels": [
                    "int"
                ],
                "kernel_size": [
                    "int"
                ]
            }
        },
        "gen_bn": {
            "name": "gen_bn",
            "location": 28,
            "return": [
                "nn.BatchNorm2d"
            ],
            "arguments": {
                "num_features": [
                    "int"
                ]
            }
        },
        "TestBatchNormFusion.test_fuse_bn": {
            "name": "test_fuse_bn",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_features": [
                    "int"
                ]
            }
        },
        "TestBatchNormFusion.test_fuse_conv_bn": {
            "name": "test_fuse_conv_bn",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "in_channels": [
                    "int"
                ],
                "out_channels": [
                    "int"
                ]
            }
        }
    },
    "python-sandbox-master/pytorch_lightning_optuna/main.py": {
        "objective_wrapper": {
            "name": "objective_wrapper",
            "location": 92,
            "return": [],
            "arguments": {
                "epochs": [
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "Net.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "trial": []
            }
        },
        "Net.forward": {
            "name": "forward",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Net.training_step": {
            "name": "training_step",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "batch": [],
                "batch_nb": []
            }
        },
        "Net.validation_step": {
            "name": "validation_step",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "batch": [],
                "batch_nb": []
            }
        },
        "Net.validation_epoch_end": {
            "name": "validation_epoch_end",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "outputs": []
            }
        },
        "Net.on_post_performance_check": {
            "name": "on_post_performance_check",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Net.configure_optimizers": {
            "name": "configure_optimizers",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Net.train_dataloader": {
            "name": "train_dataloader",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Net.val_dataloader": {
            "name": "val_dataloader",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "objective_wrapper.objective": {
            "name": "objective",
            "location": 94,
            "return": [],
            "arguments": {
                "trial": []
            }
        }
    }
}
{
    "python-schema-registry-client-master/setup.py": {},
    "python-schema-registry-client-master/schema_registry/__init__.py": {},
    "python-schema-registry-client-master/schema_registry/client/auth_utils.py": {},
    "python-schema-registry-client-master/schema_registry/client/client.py": {
        "get_response_and_status_code": {
            "name": "get_response_and_status_code",
            "location": 22,
            "return": [
                "tuple"
            ],
            "arguments": {
                "response": [
                    "httpx.Response"
                ]
            }
        },
        "BaseClient.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "typing.Union[(str, dict)]"
                ],
                "ca_location": [
                    "str"
                ],
                "cert_location": [
                    "str"
                ],
                "key_location": [
                    "str"
                ],
                "key_password": [
                    "str"
                ],
                "extra_headers": [
                    "dict"
                ],
                "timeout": [
                    "typing.Optional[httpx.Timeout]"
                ],
                "pool_limits": [
                    "typing.Optional[httpx.Limits]"
                ],
                "auth": [
                    "typing.Optional[auth_utils.Auth]"
                ]
            }
        },
        "BaseClient.__eq__": {
            "name": "__eq__",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "typing.Any"
                ]
            }
        },
        "BaseClient._configure_auth": {
            "name": "_configure_auth",
            "location": 103,
            "return": [
                "typing.Tuple[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseClient._configure_client_tls": {
            "name": "_configure_client_tls",
            "location": 137,
            "return": [
                "typing.Optional[typing.Union[(str, typing.Tuple[(str, str)], typing.Tuple[(str, str, str)])]]"
            ],
            "arguments": {
                "conf": [
                    "dict"
                ]
            }
        },
        "BaseClient._get_client_kwargs": {
            "name": "_get_client_kwargs",
            "location": 157,
            "return": [
                "typing.Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseClient.prepare_headers": {
            "name": "prepare_headers",
            "location": 180,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "dict"
                ],
                "headers": [
                    "dict"
                ]
            }
        },
        "BaseClient._add_to_cache": {
            "name": "_add_to_cache",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "cache": [
                    "dict"
                ],
                "subject": [
                    "str"
                ],
                "schema": [
                    "typing.Union[(BaseSchema, str)]"
                ],
                "value": [
                    "typing.Union[(str, int)]"
                ]
            }
        },
        "BaseClient._cache_schema": {
            "name": "_cache_schema",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "typing.Union[(BaseSchema, str)]"
                ],
                "schema_id": [
                    "int"
                ],
                "subject": [
                    "str"
                ],
                "version": [
                    "typing.Union[(str, int)]"
                ]
            }
        },
        "BaseClient.request": {
            "name": "request",
            "location": 216,
            "return": [
                "typing.Union[(tuple, httpx.Response, typing.Coroutine[(typing.Any, typing.Any, typing.Any)])]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "method": [
                    "str"
                ],
                "body": [
                    "dict"
                ],
                "headers": [
                    "dict"
                ],
                "timeout": [
                    "typing.Union[(TimeoutTypes, UseClientDefault)]"
                ]
            }
        },
        "SchemaRegistryClient.request": {
            "name": "request",
            "location": 249,
            "return": [
                "httpx.Response"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "method": [
                    "str"
                ],
                "body": [
                    "dict"
                ],
                "headers": [
                    "dict"
                ],
                "timeout": [
                    "typing.Union[(TimeoutTypes, UseClientDefault)]"
                ]
            }
        },
        "SchemaRegistryClient.register": {
            "name": "register",
            "location": 265,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "subject": [
                    "str"
                ],
                "schema": [
                    "typing.Union[(BaseSchema, str)]"
                ],
                "headers": [
                    "dict"
                ],
                "timeout": [
                    "typing.Union[(TimeoutTypes, UseClientDefault)]"
                ],
                "schema_type": [
                    "str"
                ]
            }
        },
        "SchemaRegistryClient.get_subjects": {
            "name": "get_subjects",
            "location": 341,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "dict"
                ],
                "timeout": [
                    "typing.Union[(TimeoutTypes, UseClientDefault)]"
                ]
            }
        },
        "SchemaRegistryClient.delete_subject": {
            "name": "delete_subject",
            "location": 366,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "subject": [
                    "str"
                ],
                "headers": [
                    "dict"
                ],
                "timeout": [
                    "typing.Union[(TimeoutTypes, UseClientDefault)]"
                ]
            }
        },
        "SchemaRegistryClient.get_by_id": {
            "name": "get_by_id",
            "location": 397,
            "return": [
                "typing.Optional[typing.Union[(AvroSchema, JsonSchema)]]"
            ],
            "arguments": {
                "self": [],
                "schema_id": [
                    "int"
                ],
                "headers": [
                    "dict"
                ],
                "timeout": [
                    "typing.Union[(TimeoutTypes, UseClientDefault)]"
                ]
            }
        },
        "SchemaRegistryClient.get_schema_subject_versions": {
            "name": "get_schema_subject_versions",
            "location": 436,
            "return": [
                "typing.Optional[typing.List[SubjectVersion]]"
            ],
            "arguments": {
                "self": [],
                "schema_id": [
                    "int"
                ],
                "headers": [
                    "dict"
                ],
                "timeout": [
                    "typing.Union[(TimeoutTypes, UseClientDefault)]"
                ]
            }
        },
        "SchemaRegistryClient.get_schema": {
            "name": "get_schema",
            "location": 468,
            "return": [
                "typing.Optional[utils.SchemaVersion]"
            ],
            "arguments": {
                "self": [],
                "subject": [
                    "str"
                ],
                "version": [
                    "typing.Union[(int, str)]"
                ],
                "headers": [
                    "dict"
                ],
                "timeout": [
                    "typing.Union[(TimeoutTypes, UseClientDefault)]"
                ]
            }
        },
        "SchemaRegistryClient.get_versions": {
            "name": "get_versions",
            "location": 518,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "subject": [
                    "str"
                ],
                "headers": [
                    "dict"
                ],
                "timeout": [
                    "typing.Union[(TimeoutTypes, UseClientDefault)]"
                ]
            }
        },
        "SchemaRegistryClient.delete_version": {
            "name": "delete_version",
            "location": 548,
            "return": [
                "typing.Optional[int]"
            ],
            "arguments": {
                "self": [],
                "subject": [
                    "str"
                ],
                "version": [
                    "typing.Union[(int, str)]"
                ],
                "headers": [
                    "dict"
                ],
                "timeout": [
                    "typing.Union[(TimeoutTypes, UseClientDefault)]"
                ]
            }
        },
        "SchemaRegistryClient.check_version": {
            "name": "check_version",
            "location": 588,
            "return": [
                "typing.Optional[utils.SchemaVersion]"
            ],
            "arguments": {
                "self": [],
                "subject": [
                    "str"
                ],
                "schema": [
                    "typing.Union[(BaseSchema, str)]"
                ],
                "headers": [
                    "dict"
                ],
                "timeout": [
                    "typing.Union[(TimeoutTypes, UseClientDefault)]"
                ],
                "schema_type": [
                    "str"
                ]
            }
        },
        "SchemaRegistryClient.test_compatibility": {
            "name": "test_compatibility",
            "location": 648,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "subject": [
                    "str"
                ],
                "schema": [
                    "typing.Union[(AvroSchema, JsonSchema, str)]"
                ],
                "version": [
                    "typing.Union[(int, str)]"
                ],
                "headers": [
                    "dict"
                ],
                "timeout": [
                    "typing.Union[(TimeoutTypes, UseClientDefault)]"
                ],
                "schema_type": [
                    "str"
                ]
            }
        },
        "SchemaRegistryClient.update_compatibility": {
            "name": "update_compatibility",
            "location": 697,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "str"
                ],
                "subject": [
                    "str"
                ],
                "headers": [
                    "dict"
                ],
                "timeout": [
                    "typing.Union[(TimeoutTypes, UseClientDefault)]"
                ]
            }
        },
        "SchemaRegistryClient.get_compatibility": {
            "name": "get_compatibility",
            "location": 738,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "subject": [
                    "str"
                ],
                "headers": [
                    "dict"
                ],
                "timeout": [
                    "typing.Union[(TimeoutTypes, UseClientDefault)]"
                ]
            }
        }
    },
    "python-schema-registry-client-master/schema_registry/client/errors.py": {
        "ClientError.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "http_code": [
                    "int"
                ],
                "server_traceback": [
                    "str"
                ]
            }
        },
        "ClientError.__repr__": {
            "name": "__repr__",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientError.__str__": {
            "name": "__str__",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-schema-registry-client-master/schema_registry/client/paths.py": {},
    "python-schema-registry-client-master/schema_registry/client/schema.py": {
        "BaseSchema.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "typing.Union[(str, typing.Dict)]"
                ]
            }
        },
        "BaseSchema.parse_schema": {
            "name": "parse_schema",
            "location": 24,
            "return": [
                "typing.Dict"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "typing.Dict"
                ]
            }
        },
        "BaseSchema.load": {
            "name": "load",
            "location": 29,
            "return": [
                "BaseSchema"
            ],
            "arguments": {
                "fp": [
                    "str"
                ]
            }
        },
        "BaseSchema.name": {
            "name": "name",
            "location": 39,
            "return": [
                "typing.Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSchema.schema_type": {
            "name": "schema_type",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSchema.generate_hash": {
            "name": "generate_hash",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSchema.__hash__": {
            "name": "__hash__",
            "location": 50,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSchema.__str__": {
            "name": "__str__",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSchema.__eq__": {
            "name": "__eq__",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Any"
                ]
            }
        },
        "AvroSchema.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvroSchema.name": {
            "name": "name",
            "location": 70,
            "return": [
                "typing.Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvroSchema.schema_type": {
            "name": "schema_type",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvroSchema.expanded_schema": {
            "name": "expanded_schema",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvroSchema.flat_schema": {
            "name": "flat_schema",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvroSchema.parse_schema": {
            "name": "parse_schema",
            "location": 102,
            "return": [
                "typing.Dict"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "typing.Dict"
                ]
            }
        },
        "AvroSchema.load": {
            "name": "load",
            "location": 106,
            "return": [
                "AvroSchema"
            ],
            "arguments": {
                "fp": [
                    "str"
                ]
            }
        },
        "JsonSchema.name": {
            "name": "name",
            "location": 122,
            "return": [
                "typing.Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonSchema.schema_type": {
            "name": "schema_type",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonSchema.parse_schema": {
            "name": "parse_schema",
            "location": 129,
            "return": [
                "typing.Dict"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "typing.Dict"
                ]
            }
        },
        "JsonSchema.load": {
            "name": "load",
            "location": 134,
            "return": [
                "BaseSchema"
            ],
            "arguments": {
                "fp": [
                    "str"
                ]
            }
        },
        "SchemaFactory.create_schema": {
            "name": "create_schema",
            "location": 150,
            "return": [
                "typing.Union[(JsonSchema, AvroSchema)]"
            ],
            "arguments": {
                "schema": [
                    "str"
                ],
                "schema_type": [
                    "str"
                ]
            }
        }
    },
    "python-schema-registry-client-master/schema_registry/client/status.py": {
        "is_informational": {
            "name": "is_informational",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "code": [
                    "int"
                ]
            }
        },
        "is_success": {
            "name": "is_success",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "code": [
                    "int"
                ]
            }
        },
        "is_redirect": {
            "name": "is_redirect",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "code": [
                    "int"
                ]
            }
        },
        "is_client_error": {
            "name": "is_client_error",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "code": [
                    "int"
                ]
            }
        },
        "is_server_error": {
            "name": "is_server_error",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "code": [
                    "int"
                ]
            }
        }
    },
    "python-schema-registry-client-master/schema_registry/client/urls.py": {
        "UrlManager.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "str"
                ],
                "paths": [
                    "list"
                ]
            }
        },
        "UrlManager.url": {
            "name": "url",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlManager.url_for": {
            "name": "url_for",
            "location": 28,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "str"
                ]
            }
        },
        "Path.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "dict"
                ]
            }
        },
        "Path.name": {
            "name": "name",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.generate_url": {
            "name": "generate_url",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-schema-registry-client-master/schema_registry/client/utils.py": {},
    "python-schema-registry-client-master/schema_registry/client/__init__.py": {},
    "python-schema-registry-client-master/schema_registry/serializers/errors.py": {
        "SerializerError.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "SerializerError.__repr__": {
            "name": "__repr__",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializerError.__str__": {
            "name": "__str__",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-schema-registry-client-master/schema_registry/serializers/faust.py": {
        "avro_serializer_factory": {
            "name": "avro_serializer_factory",
            "location": 73,
            "return": [
                "'Serializer'"
            ],
            "arguments": {
                "schema_registry_client": [
                    "SchemaRegistryClient"
                ],
                "schema_subject": [
                    "str"
                ],
                "schema": [
                    "AvroSchema"
                ],
                "return_record_name": [
                    "bool"
                ]
            }
        },
        "json_serializer_factory": {
            "name": "json_serializer_factory",
            "location": 88,
            "return": [
                "'Serializer'"
            ],
            "arguments": {
                "schema_registry_client": [
                    "SchemaRegistryClient"
                ],
                "schema_subject": [
                    "str"
                ],
                "schema": [
                    "JsonSchema"
                ],
                "return_record_name": [
                    "bool"
                ]
            }
        },
        "Serializer.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "schema_subject": [
                    "str"
                ],
                "schema": [
                    "typing.Union[BaseSchema]"
                ],
                "message_serializer": [
                    "MessageSerializer"
                ]
            }
        },
        "Serializer._loads": {
            "name": "_loads",
            "location": 27,
            "return": [
                "typing.Optional[typing.Dict]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "bytes"
                ]
            }
        },
        "Serializer._dumps": {
            "name": "_dumps",
            "location": 31,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "typing.Dict[(str, typing.Any)]"
                ]
            }
        },
        "Serializer._clean_item": {
            "name": "_clean_item",
            "location": 44,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "item": [
                    "typing.Any"
                ]
            }
        },
        "Serializer.clean_payload": {
            "name": "clean_payload",
            "location": 57,
            "return": [
                "typing.Dict[(str, typing.Any)]"
            ],
            "arguments": {
                "payload": [
                    "typing.Dict[(str, typing.Any)]"
                ]
            }
        }
    },
    "python-schema-registry-client-master/schema_registry/serializers/message_serializer.py": {
        "ContextStringIO.__enter__": {
            "name": "__enter__",
            "location": 29,
            "return": [
                "'ContextStringIO'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextStringIO.__exit__": {
            "name": "__exit__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageSerializer.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "schemaregistry_client": [
                    "SchemaRegistryClient"
                ],
                "reader_schema": [
                    "typing.Optional[schema.AvroSchema]"
                ],
                "return_record_name": [
                    "bool"
                ]
            }
        },
        "MessageSerializer._serializer_schema_type": {
            "name": "_serializer_schema_type",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageSerializer._get_encoder_func": {
            "name": "_get_encoder_func",
            "location": 65,
            "return": [
                "typing.Callable"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "BaseSchema"
                ]
            }
        },
        "MessageSerializer._get_decoder_func": {
            "name": "_get_decoder_func",
            "location": 69,
            "return": [
                "typing.Callable"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "ContextStringIO"
                ],
                "writer_schema": [
                    "BaseSchema"
                ]
            }
        },
        "MessageSerializer.encode_record_with_schema": {
            "name": "encode_record_with_schema",
            "location": 72,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "subject": [
                    "str"
                ],
                "schema": [
                    "typing.Union[BaseSchema]"
                ],
                "record": [
                    "dict"
                ]
            }
        },
        "MessageSerializer.encode_record_with_schema_id": {
            "name": "encode_record_with_schema_id",
            "location": 93,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "schema_id": [
                    "int"
                ],
                "record": [
                    "dict"
                ]
            }
        },
        "MessageSerializer.decode_message": {
            "name": "decode_message",
            "location": 124,
            "return": [
                "typing.Optional[dict]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "typing.Optional[bytes]"
                ]
            }
        },
        "AvroMessageSerializer._serializer_schema_type": {
            "name": "_serializer_schema_type",
            "location": 174,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvroMessageSerializer._get_encoder_func": {
            "name": "_get_encoder_func",
            "location": 177,
            "return": [
                "typing.Callable"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "typing.Union[BaseSchema]"
                ]
            }
        },
        "AvroMessageSerializer._get_decoder_func": {
            "name": "_get_decoder_func",
            "location": 180,
            "return": [
                "typing.Callable"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "ContextStringIO"
                ],
                "writer_schema": [
                    "BaseSchema"
                ]
            }
        },
        "JsonMessageSerializer._serializer_schema_type": {
            "name": "_serializer_schema_type",
            "location": 198,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonMessageSerializer._get_encoder_func": {
            "name": "_get_encoder_func",
            "location": 201,
            "return": [
                "typing.Callable"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "typing.Union[BaseSchema]"
                ]
            }
        },
        "JsonMessageSerializer._get_decoder_func": {
            "name": "_get_decoder_func",
            "location": 208,
            "return": [
                "typing.Callable"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "ContextStringIO"
                ],
                "writer_schema": [
                    "BaseSchema"
                ]
            }
        },
        "AsyncMessageSerializer.__init__": {
            "name": "__init__",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "schemaregistry_client": [
                    "AsyncSchemaRegistryClient"
                ],
                "reader_schema": [
                    "typing.Optional[schema.AvroSchema]"
                ],
                "return_record_name": [
                    "bool"
                ]
            }
        },
        "AsyncMessageSerializer._serializer_schema_type": {
            "name": "_serializer_schema_type",
            "location": 242,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncMessageSerializer._get_encoder_func": {
            "name": "_get_encoder_func",
            "location": 246,
            "return": [
                "typing.Callable"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "BaseSchema"
                ]
            }
        },
        "AsyncMessageSerializer._get_decoder_func": {
            "name": "_get_decoder_func",
            "location": 250,
            "return": [
                "typing.Callable"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "ContextStringIO"
                ],
                "writer_schema": [
                    "BaseSchema"
                ]
            }
        },
        "AsyncAvroMessageSerializer._serializer_schema_type": {
            "name": "_serializer_schema_type",
            "location": 355,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncAvroMessageSerializer._get_encoder_func": {
            "name": "_get_encoder_func",
            "location": 358,
            "return": [
                "typing.Callable"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "typing.Union[BaseSchema]"
                ]
            }
        },
        "AsyncAvroMessageSerializer._get_decoder_func": {
            "name": "_get_decoder_func",
            "location": 361,
            "return": [
                "typing.Callable"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "ContextStringIO"
                ],
                "writer_schema": [
                    "BaseSchema"
                ]
            }
        },
        "AsyncJsonMessageSerializer._serializer_schema_type": {
            "name": "_serializer_schema_type",
            "location": 379,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncJsonMessageSerializer._get_encoder_func": {
            "name": "_get_encoder_func",
            "location": 382,
            "return": [
                "typing.Callable"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "typing.Union[BaseSchema]"
                ]
            }
        },
        "AsyncJsonMessageSerializer._get_decoder_func": {
            "name": "_get_decoder_func",
            "location": 389,
            "return": [
                "typing.Callable"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "ContextStringIO"
                ],
                "writer_schema": [
                    "BaseSchema"
                ]
            }
        },
        "JsonMessageSerializer._get_encoder_func.json_encoder_func": {
            "name": "json_encoder_func",
            "location": 202,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "record": [
                    "dict"
                ],
                "fp": [
                    "ContextStringIO"
                ]
            }
        },
        "JsonMessageSerializer._get_decoder_func.json_decoder_func": {
            "name": "json_decoder_func",
            "location": 209,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "payload": [
                    "typing.Union[(str, bytes)]"
                ]
            }
        },
        "AsyncJsonMessageSerializer._get_encoder_func.json_encoder_func": {
            "name": "json_encoder_func",
            "location": 383,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "record": [
                    "dict"
                ],
                "fp": [
                    "ContextStringIO"
                ]
            }
        },
        "AsyncJsonMessageSerializer._get_decoder_func.json_decoder_func": {
            "name": "json_decoder_func",
            "location": 390,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "payload": [
                    "typing.Union[(str, bytes)]"
                ]
            }
        }
    },
    "python-schema-registry-client-master/schema_registry/serializers/__init__.py": {},
    "python-schema-registry-client-master/tests/conftest.py": {
        "response_klass": {
            "name": "response_klass",
            "location": 115,
            "return": [],
            "arguments": {}
        },
        "client": {
            "name": "client",
            "location": 156,
            "return": [],
            "arguments": {}
        },
        "schemas": {
            "name": "schemas",
            "location": 194,
            "return": [],
            "arguments": {}
        },
        "avro_deployment_schema": {
            "name": "avro_deployment_schema",
            "location": 199,
            "return": [],
            "arguments": {}
        },
        "avro_country_schema": {
            "name": "avro_country_schema",
            "location": 204,
            "return": [],
            "arguments": {}
        },
        "avro_user_schema_v3": {
            "name": "avro_user_schema_v3",
            "location": 209,
            "return": [],
            "arguments": {}
        },
        "json_deployment_schema": {
            "name": "json_deployment_schema",
            "location": 227,
            "return": [],
            "arguments": {}
        },
        "json_country_schema": {
            "name": "json_country_schema",
            "location": 232,
            "return": [],
            "arguments": {}
        },
        "json_user_schema_v3": {
            "name": "json_user_schema_v3",
            "location": 237,
            "return": [],
            "arguments": {}
        },
        "avro_message_serializer": {
            "name": "avro_message_serializer",
            "location": 242,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "json_message_serializer": {
            "name": "json_message_serializer",
            "location": 247,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "async_avro_message_serializer": {
            "name": "async_avro_message_serializer",
            "location": 252,
            "return": [],
            "arguments": {
                "async_client": []
            }
        },
        "async_json_message_serializer": {
            "name": "async_json_message_serializer",
            "location": 257,
            "return": [],
            "arguments": {
                "async_client": []
            }
        },
        "certificates": {
            "name": "certificates",
            "location": 262,
            "return": [],
            "arguments": {}
        },
        "async_mock": {
            "name": "async_mock",
            "location": 297,
            "return": [],
            "arguments": {}
        },
        "dataclass_avro_schema": {
            "name": "dataclass_avro_schema",
            "location": 358,
            "return": [],
            "arguments": {}
        },
        "dataclass_avro_schema_advance": {
            "name": "dataclass_avro_schema_advance",
            "location": 371,
            "return": [],
            "arguments": {}
        },
        "dataclass_json_schema": {
            "name": "dataclass_json_schema",
            "location": 386,
            "return": [],
            "arguments": {}
        },
        "dataclass_json_schema_advance": {
            "name": "dataclass_json_schema_advance",
            "location": 401,
            "return": [],
            "arguments": {}
        },
        "Response.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "status_code": [],
                "content": []
            }
        },
        "Response.json": {
            "name": "json",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RequestLoggingAssertMixin.assert_url_suffix": {
            "name": "assert_url_suffix",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "call_no": [
                    "int"
                ],
                "url_suffix": [
                    "str"
                ]
            }
        },
        "RequestLoggingAssertMixin.assert_method": {
            "name": "assert_method",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "call_no": [
                    "int"
                ],
                "method": [
                    "str"
                ]
            }
        },
        "RequestLoggingSchemaRegistryClient.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "RequestLoggingSchemaRegistryClient.request": {
            "name": "request",
            "location": 143,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "method": [
                    "str"
                ],
                "body": [
                    "dict"
                ],
                "headers": [
                    "dict"
                ],
                "timeout": [
                    "typing.Union[(TimeoutTypes, UseClientDefault)]"
                ]
            }
        },
        "AsyncMock.__init__": {
            "name": "__init__",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "module": [],
                "func": [],
                "returned_value": []
            }
        },
        "AsyncMock.__enter__": {
            "name": "__enter__",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AsyncMock.__exit__": {
            "name": "__exit__",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AsyncMock.assert_called_with": {
            "name": "assert_called_with",
            "location": 285,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RequestLoggingAsyncSchemaRegistryClient.__init__": {
            "name": "__init__",
            "location": 302,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        }
    },
    "python-schema-registry-client-master/tests/data_gen.py": {
        "unix_time_millis": {
            "name": "unix_time_millis",
            "location": 14,
            "return": [],
            "arguments": {
                "dt": []
            }
        },
        "get_schema_path": {
            "name": "get_schema_path",
            "location": 18,
            "return": [],
            "arguments": {
                "fname": []
            }
        },
        "load_schema_file": {
            "name": "load_schema_file",
            "location": 31,
            "return": [],
            "arguments": {
                "fname": []
            }
        },
        "create_basic_item": {
            "name": "create_basic_item",
            "location": 37,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "create_adv_item": {
            "name": "create_adv_item",
            "location": 41,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "create_logical_item": {
            "name": "create_logical_item",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "create_nested_schema": {
            "name": "create_nested_schema",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "cleanup": {
            "name": "cleanup",
            "location": 83,
            "return": [],
            "arguments": {
                "files": []
            }
        }
    },
    "python-schema-registry-client-master/tests/__init__.py": {},
    "python-schema-registry-client-master/tests/client/test_urls.py": {
        "test_fail_url_manager_creation": {
            "name": "test_fail_url_manager_creation",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_url_with_path": {
            "name": "test_url_with_path",
            "location": 19,
            "return": [],
            "arguments": {
                "base_url": []
            }
        },
        "test_urls_generation": {
            "name": "test_urls_generation",
            "location": 29,
            "return": [],
            "arguments": {
                "base_url": []
            }
        },
        "test_client_paths": {
            "name": "test_client_paths",
            "location": 48,
            "return": [],
            "arguments": {
                "base_url": []
            }
        }
    },
    "python-schema-registry-client-master/tests/client/__init__.py": {},
    "python-schema-registry-client-master/tests/client/async_client/test_http_client.py": {
        "test_cert_with_key": {
            "name": "test_cert_with_key",
            "location": 18,
            "return": [],
            "arguments": {
                "certificates": []
            }
        },
        "test_custom_headers": {
            "name": "test_custom_headers",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "test_cert_path": {
            "name": "test_cert_path",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "test_init_with_dict": {
            "name": "test_init_with_dict",
            "location": 66,
            "return": [],
            "arguments": {
                "certificates": []
            }
        },
        "test_empty_url": {
            "name": "test_empty_url",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "test_invalid_type_url": {
            "name": "test_invalid_type_url",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "test_invalid_type_url_dict": {
            "name": "test_invalid_type_url_dict",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "test_basic_auth_invalid": {
            "name": "test_basic_auth_invalid",
            "location": 139,
            "return": [],
            "arguments": {}
        }
    },
    "python-schema-registry-client-master/tests/client/async_client/test_schema.py": {
        "test_avro_schema_from_string": {
            "name": "test_avro_schema_from_string",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_json_schema_from_string": {
            "name": "test_json_schema_from_string",
            "location": 27,
            "return": [],
            "arguments": {}
        }
    },
    "python-schema-registry-client-master/tests/client/async_client/test_schema_compatibility.py": {},
    "python-schema-registry-client-master/tests/client/async_client/test_schema_delete.py": {},
    "python-schema-registry-client-master/tests/client/async_client/test_schema_getters.py": {},
    "python-schema-registry-client-master/tests/client/async_client/test_schema_registration.py": {
        "assertLatest": {
            "name": "assertLatest",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "meta_tuple": [],
                "sid": [],
                "schema": [],
                "version": []
            }
        }
    },
    "python-schema-registry-client-master/tests/client/async_client/test_schema_version.py": {},
    "python-schema-registry-client-master/tests/client/async_client/__init__.py": {},
    "python-schema-registry-client-master/tests/client/sync_client/test_http_client.py": {
        "test_invalid_cert": {
            "name": "test_invalid_cert",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_cert_with_key": {
            "name": "test_cert_with_key",
            "location": 18,
            "return": [],
            "arguments": {
                "certificates": []
            }
        },
        "test_pickelable": {
            "name": "test_pickelable",
            "location": 31,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_custom_headers": {
            "name": "test_custom_headers",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "test_custom_httpx_config": {
            "name": "test_custom_httpx_config",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "test_override_headers": {
            "name": "test_override_headers",
            "location": 70,
            "return": [],
            "arguments": {
                "client": [],
                "avro_deployment_schema": [],
                "mocker": [],
                "response_klass": []
            }
        },
        "test_cert_path": {
            "name": "test_cert_path",
            "location": 91,
            "return": [],
            "arguments": {}
        },
        "test_init_with_dict": {
            "name": "test_init_with_dict",
            "location": 97,
            "return": [],
            "arguments": {
                "certificates": []
            }
        },
        "test_empty_url": {
            "name": "test_empty_url",
            "location": 109,
            "return": [],
            "arguments": {}
        },
        "test_invalid_type_url": {
            "name": "test_invalid_type_url",
            "location": 114,
            "return": [],
            "arguments": {}
        },
        "test_invalid_type_url_dict": {
            "name": "test_invalid_type_url_dict",
            "location": 119,
            "return": [],
            "arguments": {}
        },
        "test_invalid_url": {
            "name": "test_invalid_url",
            "location": 124,
            "return": [],
            "arguments": {}
        },
        "test_basic_auth_url": {
            "name": "test_basic_auth_url",
            "location": 129,
            "return": [],
            "arguments": {}
        },
        "test_basic_auth_user_info": {
            "name": "test_basic_auth_user_info",
            "location": 139,
            "return": [],
            "arguments": {}
        },
        "test_auth": {
            "name": "test_auth",
            "location": 156,
            "return": [],
            "arguments": {}
        },
        "test_basic_auth_invalid": {
            "name": "test_basic_auth_invalid",
            "location": 170,
            "return": [],
            "arguments": {}
        }
    },
    "python-schema-registry-client-master/tests/client/sync_client/test_schema.py": {
        "test_avro_schema_from_string": {
            "name": "test_avro_schema_from_string",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_avro_schema_from_file": {
            "name": "test_avro_schema_from_file",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_avro_schema_load_parse_error": {
            "name": "test_avro_schema_load_parse_error",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_avro_schema_type_property": {
            "name": "test_avro_schema_type_property",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "test_expanded_schema": {
            "name": "test_expanded_schema",
            "location": 29,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_flat_schema": {
            "name": "test_flat_schema",
            "location": 74,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_json_schema_from_string": {
            "name": "test_json_schema_from_string",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "test_json_schema_from_file": {
            "name": "test_json_schema_from_file",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "test_json_schema_load_parse_error": {
            "name": "test_json_schema_load_parse_error",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "test_json_schema_type_property": {
            "name": "test_json_schema_type_property",
            "location": 102,
            "return": [],
            "arguments": {}
        }
    },
    "python-schema-registry-client-master/tests/client/sync_client/test_schema_compatibility.py": {
        "test_avro_compatibility": {
            "name": "test_avro_compatibility",
            "location": 8,
            "return": [],
            "arguments": {
                "client": [],
                "avro_user_schema_v3": []
            }
        },
        "test_avro_compatibility_dataclasses_avroschema": {
            "name": "test_avro_compatibility_dataclasses_avroschema",
            "location": 20,
            "return": [],
            "arguments": {
                "client": [],
                "dataclass_avro_schema": [],
                "dataclass_avro_schema_advance": []
            }
        },
        "test_avro_update_compatibility_for_subject": {
            "name": "test_avro_update_compatibility_for_subject",
            "location": 31,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_avro_update_global_compatibility": {
            "name": "test_avro_update_global_compatibility",
            "location": 39,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_avro_update_compatibility_fail": {
            "name": "test_avro_update_compatibility_fail",
            "location": 47,
            "return": [],
            "arguments": {
                "client": [],
                "response_klass": [],
                "mocker": []
            }
        },
        "test_avro_get_compatibility_for_subject": {
            "name": "test_avro_get_compatibility_for_subject",
            "location": 57,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_avro_get_global_compatibility": {
            "name": "test_avro_get_global_compatibility",
            "location": 64,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_json_compatibility": {
            "name": "test_json_compatibility",
            "location": 71,
            "return": [],
            "arguments": {
                "client": [],
                "json_user_schema_v3": []
            }
        },
        "test_json_compatibility_dataclasses_jsonschema": {
            "name": "test_json_compatibility_dataclasses_jsonschema",
            "location": 84,
            "return": [],
            "arguments": {
                "client": [],
                "dataclass_json_schema": [],
                "dataclass_json_schema_advance": []
            }
        },
        "test_json_update_compatibility_for_subject": {
            "name": "test_json_update_compatibility_for_subject",
            "location": 98,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_json_update_global_compatibility": {
            "name": "test_json_update_global_compatibility",
            "location": 106,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_json_update_compatibility_fail": {
            "name": "test_json_update_compatibility_fail",
            "location": 114,
            "return": [],
            "arguments": {
                "client": [],
                "response_klass": [],
                "mocker": []
            }
        },
        "test_json_get_compatibility_for_subject": {
            "name": "test_json_get_compatibility_for_subject",
            "location": 124,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_json_get_global_compatibility": {
            "name": "test_json_get_global_compatibility",
            "location": 131,
            "return": [],
            "arguments": {
                "client": []
            }
        }
    },
    "python-schema-registry-client-master/tests/client/sync_client/test_schema_delete.py": {
        "test_avro_delete_subject": {
            "name": "test_avro_delete_subject",
            "location": 5,
            "return": [],
            "arguments": {
                "client": [],
                "avro_user_schema_v3": []
            }
        },
        "test_json_delete_subject": {
            "name": "test_json_delete_subject",
            "location": 15,
            "return": [],
            "arguments": {
                "client": [],
                "json_user_schema_v3": []
            }
        },
        "test_delete_subject_does_not_exist": {
            "name": "test_delete_subject_does_not_exist",
            "location": 25,
            "return": [],
            "arguments": {
                "client": []
            }
        }
    },
    "python-schema-registry-client-master/tests/client/sync_client/test_schema_getters.py": {
        "test_avro_getters": {
            "name": "test_avro_getters",
            "location": 5,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_avro_get_subjects": {
            "name": "test_avro_get_subjects",
            "location": 23,
            "return": [],
            "arguments": {
                "client": [],
                "avro_user_schema_v3": [],
                "avro_country_schema": []
            }
        },
        "test_json_getters": {
            "name": "test_json_getters",
            "location": 36,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_json_get_subjects": {
            "name": "test_json_get_subjects",
            "location": 54,
            "return": [],
            "arguments": {
                "client": [],
                "json_user_schema_v3": [],
                "json_country_schema": []
            }
        }
    },
    "python-schema-registry-client-master/tests/client/sync_client/test_schema_registration.py": {
        "assertLatest": {
            "name": "assertLatest",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "meta_tuple": [],
                "sid": [],
                "schema": [],
                "version": []
            }
        },
        "test_avro_register": {
            "name": "test_avro_register",
            "location": 14,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_avro_register_json_data": {
            "name": "test_avro_register_json_data",
            "location": 26,
            "return": [],
            "arguments": {
                "client": [],
                "avro_deployment_schema": []
            }
        },
        "test_avro_register_with_custom_headers": {
            "name": "test_avro_register_with_custom_headers",
            "location": 31,
            "return": [],
            "arguments": {
                "client": [],
                "avro_country_schema": []
            }
        },
        "test_avro_register_with_logical_types": {
            "name": "test_avro_register_with_logical_types",
            "location": 37,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_avro_multi_subject_register": {
            "name": "test_avro_multi_subject_register",
            "location": 45,
            "return": [],
            "arguments": {
                "client": [
                    "RequestLoggingSchemaRegistryClient"
                ]
            }
        },
        "test_avro_dupe_register": {
            "name": "test_avro_dupe_register",
            "location": 67,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_avro_multi_register": {
            "name": "test_avro_multi_register",
            "location": 98,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_register_dataclass_avro_schema": {
            "name": "test_register_dataclass_avro_schema",
            "location": 126,
            "return": [],
            "arguments": {
                "client": [],
                "dataclass_avro_schema": []
            }
        },
        "test_json_register": {
            "name": "test_json_register",
            "location": 138,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_json_register_json_data": {
            "name": "test_json_register_json_data",
            "location": 146,
            "return": [],
            "arguments": {
                "client": [],
                "json_deployment_schema": []
            }
        },
        "test_json_register_with_custom_headers": {
            "name": "test_json_register_with_custom_headers",
            "location": 151,
            "return": [],
            "arguments": {
                "client": [],
                "json_country_schema": []
            }
        },
        "test_json_multi_subject_register": {
            "name": "test_json_multi_subject_register",
            "location": 157,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_json_dupe_register": {
            "name": "test_json_dupe_register",
            "location": 168,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_json_multi_register": {
            "name": "test_json_multi_register",
            "location": 199,
            "return": [],
            "arguments": {
                "client": [],
                "json_user_schema_v3": []
            }
        },
        "test_register_dataclass_json_schema": {
            "name": "test_register_dataclass_json_schema",
            "location": 227,
            "return": [],
            "arguments": {
                "client": [],
                "dataclass_json_schema": []
            }
        }
    },
    "python-schema-registry-client-master/tests/client/sync_client/test_schema_version.py": {
        "test_avro_version_does_not_exists": {
            "name": "test_avro_version_does_not_exists",
            "location": 4,
            "return": [],
            "arguments": {
                "client": [],
                "avro_country_schema": []
            }
        },
        "test_avro_get_versions": {
            "name": "test_avro_get_versions",
            "location": 8,
            "return": [],
            "arguments": {
                "client": [],
                "avro_country_schema": []
            }
        },
        "test_avro_get_versions_does_not_exist": {
            "name": "test_avro_get_versions_does_not_exist",
            "location": 16,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_avro_check_version": {
            "name": "test_avro_check_version",
            "location": 20,
            "return": [],
            "arguments": {
                "client": [],
                "avro_country_schema": []
            }
        },
        "test_avro_check_version_dataclasses_avroschema": {
            "name": "test_avro_check_version_dataclasses_avroschema",
            "location": 29,
            "return": [],
            "arguments": {
                "client": [],
                "dataclass_avro_schema": []
            }
        },
        "test_avro_delete_version": {
            "name": "test_avro_delete_version",
            "location": 38,
            "return": [],
            "arguments": {
                "client": [],
                "avro_country_schema": []
            }
        },
        "test_avro_delete_version_does_not_exist": {
            "name": "test_avro_delete_version_does_not_exist",
            "location": 47,
            "return": [],
            "arguments": {
                "client": [],
                "avro_country_schema": []
            }
        },
        "test_json_version_does_not_exists": {
            "name": "test_json_version_does_not_exists",
            "location": 55,
            "return": [],
            "arguments": {
                "client": [],
                "json_country_schema": []
            }
        },
        "test_json_get_versions": {
            "name": "test_json_get_versions",
            "location": 59,
            "return": [],
            "arguments": {
                "client": [],
                "json_country_schema": []
            }
        },
        "test_json_get_versions_does_not_exist": {
            "name": "test_json_get_versions_does_not_exist",
            "location": 67,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_json_check_version": {
            "name": "test_json_check_version",
            "location": 71,
            "return": [],
            "arguments": {
                "client": [],
                "json_country_schema": []
            }
        },
        "test_json_check_version_dataclasses_jsonschema": {
            "name": "test_json_check_version_dataclasses_jsonschema",
            "location": 80,
            "return": [],
            "arguments": {
                "client": [],
                "dataclass_json_schema": []
            }
        },
        "test_json_delete_version": {
            "name": "test_json_delete_version",
            "location": 89,
            "return": [],
            "arguments": {
                "client": [],
                "json_country_schema": []
            }
        },
        "test_json_delete_version_does_not_exist": {
            "name": "test_json_delete_version_does_not_exist",
            "location": 98,
            "return": [],
            "arguments": {
                "client": [],
                "json_country_schema": []
            }
        }
    },
    "python-schema-registry-client-master/tests/client/sync_client/__init__.py": {},
    "python-schema-registry-client-master/tests/serializer/test_async_message_serializer.py": {},
    "python-schema-registry-client-master/tests/serializer/test_faust_serializer.py": {
        "test_create_avro_faust_serializer": {
            "name": "test_create_avro_faust_serializer",
            "location": 12,
            "return": [],
            "arguments": {
                "client": [],
                "avro_country_schema": []
            }
        },
        "test_avro_dumps_load_message": {
            "name": "test_avro_dumps_load_message",
            "location": 22,
            "return": [],
            "arguments": {
                "client": [],
                "avro_country_schema": []
            }
        },
        "test_avro_nested_schema": {
            "name": "test_avro_nested_schema",
            "location": 36,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_avro_dumps_load_with_register_codec": {
            "name": "test_avro_dumps_load_with_register_codec",
            "location": 51,
            "return": [],
            "arguments": {
                "client": [],
                "avro_country_schema": []
            }
        },
        "test_avro_nested_schema_with_register_codec": {
            "name": "test_avro_nested_schema_with_register_codec",
            "location": 72,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_avro_dumps_load_message_dataclasses_avro_schema": {
            "name": "test_avro_dumps_load_message_dataclasses_avro_schema",
            "location": 104,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_avro_dumps_load_message_union_avro_schema": {
            "name": "test_avro_dumps_load_message_union_avro_schema",
            "location": 128,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_create_json_faust_serializer": {
            "name": "test_create_json_faust_serializer",
            "location": 153,
            "return": [],
            "arguments": {
                "client": [],
                "json_country_schema": []
            }
        },
        "test_json_dumps_load_message": {
            "name": "test_json_dumps_load_message",
            "location": 163,
            "return": [],
            "arguments": {
                "client": [],
                "json_country_schema": []
            }
        },
        "test_json_nested_schema": {
            "name": "test_json_nested_schema",
            "location": 177,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_json_dumps_load_with_register_codec": {
            "name": "test_json_dumps_load_with_register_codec",
            "location": 192,
            "return": [],
            "arguments": {
                "client": [],
                "json_country_schema": []
            }
        },
        "test_json_nested_schema_with_register_codec": {
            "name": "test_json_nested_schema_with_register_codec",
            "location": 213,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_json_dumps_load_message_dataclasses_json_schema": {
            "name": "test_json_dumps_load_message_dataclasses_json_schema",
            "location": 245,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_json_dumps_load_message_union_json_schema": {
            "name": "test_json_dumps_load_message_union_json_schema",
            "location": 271,
            "return": [],
            "arguments": {
                "client": []
            }
        }
    },
    "python-schema-registry-client-master/tests/serializer/test_faust_serializer_clean_payload.py": {
        "test_avro_simple_record": {
            "name": "test_avro_simple_record",
            "location": 12,
            "return": [],
            "arguments": {
                "client": [],
                "avro_country_schema": []
            }
        },
        "test_avro_nested_record": {
            "name": "test_avro_nested_record",
            "location": 22,
            "return": [],
            "arguments": {
                "client": [],
                "avro_country_schema": []
            }
        },
        "test_avro_list_of_records": {
            "name": "test_avro_list_of_records",
            "location": 35,
            "return": [],
            "arguments": {
                "client": [],
                "avro_country_schema": []
            }
        },
        "test_avro_map_of_records": {
            "name": "test_avro_map_of_records",
            "location": 51,
            "return": [],
            "arguments": {
                "client": [],
                "avro_country_schema": []
            }
        },
        "test_json_simple_record": {
            "name": "test_json_simple_record",
            "location": 73,
            "return": [],
            "arguments": {
                "client": [],
                "json_country_schema": []
            }
        },
        "test_json_nested_record": {
            "name": "test_json_nested_record",
            "location": 83,
            "return": [],
            "arguments": {
                "client": [],
                "json_country_schema": []
            }
        },
        "test_json_list_of_records": {
            "name": "test_json_list_of_records",
            "location": 96,
            "return": [],
            "arguments": {
                "client": [],
                "json_country_schema": []
            }
        },
        "test_json_map_of_records": {
            "name": "test_json_map_of_records",
            "location": 112,
            "return": [],
            "arguments": {
                "client": [],
                "json_country_schema": []
            }
        }
    },
    "python-schema-registry-client-master/tests/serializer/test_message_serializer.py": {
        "assertAvroMessageIsSame": {
            "name": "assertAvroMessageIsSame",
            "location": 10,
            "return": [],
            "arguments": {
                "message": [],
                "expected": [],
                "schema_id": [],
                "avro_message_serializer": []
            }
        },
        "test_avro_encode_with_schema_id": {
            "name": "test_avro_encode_with_schema_id",
            "location": 23,
            "return": [],
            "arguments": {
                "client": [],
                "avro_message_serializer": []
            }
        },
        "test_avro_encode_logical_types": {
            "name": "test_avro_encode_logical_types",
            "location": 45,
            "return": [],
            "arguments": {
                "client": [],
                "avro_message_serializer": []
            }
        },
        "test_avro_encode_decode_with_schema_from_json": {
            "name": "test_avro_encode_decode_with_schema_from_json",
            "location": 65,
            "return": [],
            "arguments": {
                "avro_message_serializer": [],
                "avro_deployment_schema": []
            }
        },
        "test_avro_fail_encode_with_schema": {
            "name": "test_avro_fail_encode_with_schema",
            "location": 108,
            "return": [],
            "arguments": {
                "avro_message_serializer": [],
                "avro_deployment_schema": []
            }
        },
        "test_avro_encode_record_with_schema": {
            "name": "test_avro_encode_record_with_schema",
            "location": 115,
            "return": [],
            "arguments": {
                "client": [],
                "avro_message_serializer": []
            }
        },
        "test_avro_decode_none": {
            "name": "test_avro_decode_none",
            "location": 127,
            "return": [],
            "arguments": {
                "avro_message_serializer": []
            }
        },
        "assertJsonMessageIsSame": {
            "name": "assertJsonMessageIsSame",
            "location": 133,
            "return": [],
            "arguments": {
                "message": [],
                "expected": [],
                "schema_id": [],
                "json_message_serializer": []
            }
        },
        "test_json_encode_with_schema_id": {
            "name": "test_json_encode_with_schema_id",
            "location": 146,
            "return": [],
            "arguments": {
                "client": [],
                "json_message_serializer": []
            }
        },
        "test_json_encode_decode_with_schema_from_json": {
            "name": "test_json_encode_decode_with_schema_from_json",
            "location": 168,
            "return": [],
            "arguments": {
                "json_message_serializer": [],
                "json_deployment_schema": []
            }
        },
        "test_json_fail_encode_with_schema": {
            "name": "test_json_fail_encode_with_schema",
            "location": 184,
            "return": [],
            "arguments": {
                "json_message_serializer": [],
                "json_deployment_schema": []
            }
        },
        "test_json_encode_record_with_schema": {
            "name": "test_json_encode_record_with_schema",
            "location": 191,
            "return": [],
            "arguments": {
                "client": [],
                "json_message_serializer": []
            }
        },
        "test_json_decode_none": {
            "name": "test_json_decode_none",
            "location": 203,
            "return": [],
            "arguments": {
                "json_message_serializer": []
            }
        }
    },
    "python-schema-registry-client-master/tests/serializer/__init__.py": {}
}
{
    "python_architecture-master/setup.py": {
        "install_libs": {
            "name": "install_libs",
            "location": 16,
            "return": [],
            "arguments": {
                "sources": [],
                "develop": []
            }
        },
        "DevelopCmd.run": {
            "name": "run",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstallCmd.run": {
            "name": "run",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python_architecture-master/api/setup.py": {
        "get_requirements": {
            "name": "get_requirements",
            "location": 8,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "prefix": [
                    "str"
                ]
            }
        }
    },
    "python_architecture-master/api/bf_api/encoders.py": {
        "ApiJsonEncoder.default": {
            "name": "default",
            "location": 9,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        }
    },
    "python_architecture-master/api/bf_api/endpoints.py": {
        "search": {
            "name": "search",
            "location": 7,
            "return": [
                "List[Order]"
            ],
            "arguments": {
                "logic": [
                    "OrderLogic"
                ],
                "client_id": [
                    "int"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 11,
            "return": [
                "Order"
            ],
            "arguments": {
                "logic": [
                    "OrderLogic"
                ],
                "body": [
                    "dict"
                ]
            }
        },
        "add_product": {
            "name": "add_product",
            "location": 15,
            "return": [
                "Order"
            ],
            "arguments": {
                "logic": [
                    "OrderLogic"
                ],
                "order_id": [
                    "int"
                ],
                "product_id": [
                    "int"
                ]
            }
        }
    },
    "python_architecture-master/api/bf_api/example_data.py": {},
    "python_architecture-master/api/bf_api/injections.py": {
        "LogicModule.configure": {
            "name": "configure",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "binder": [
                    "injector.Binder"
                ]
            }
        },
        "MemoryProvidersModule.provide_clients": {
            "name": "provide_clients",
            "location": 16,
            "return": [
                "IClientRepository"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryProvidersModule.provide_orders": {
            "name": "provide_orders",
            "location": 24,
            "return": [
                "IOrderRepository"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryProvidersModule.provide_products": {
            "name": "provide_products",
            "location": 32,
            "return": [
                "IProductRepository"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_architecture-master/api/bf_api/main.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main.handle_offer_mgr_exception": {
            "name": "handle_offer_mgr_exception",
            "location": 16,
            "return": [
                "flask.Response"
            ],
            "arguments": {
                "exc": []
            }
        }
    },
    "python_architecture-master/api/bf_api/__init__.py": {},
    "python_architecture-master/cli/no_time_to_code_this.py": {},
    "python_architecture-master/k8s/locust/locustfile.py": {
        "StalkerTaskSet.get_angelinas_orders": {
            "name": "get_angelinas_orders",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python_architecture-master/ram_db/setup.py": {
        "get_requirements": {
            "name": "get_requirements",
            "location": 8,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "prefix": [
                    "str"
                ]
            }
        }
    },
    "python_architecture-master/ram_db/bf_ram_db/client.py": {
        "ClientRepositories.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "static_data": [
                    "Optional[List[Client]]"
                ]
            }
        },
        "ClientRepositories.create": {
            "name": "create",
            "location": 19,
            "return": [
                "Client"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ClientRepositories.get": {
            "name": "get",
            "location": 26,
            "return": [
                "Client"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "int"
                ]
            }
        }
    },
    "python_architecture-master/ram_db/bf_ram_db/order.py": {
        "OrderRepositories.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "static_data": [
                    "Optional[List[Order]]"
                ]
            }
        },
        "OrderRepositories.create": {
            "name": "create",
            "location": 20,
            "return": [
                "Order"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "Client"
                ]
            }
        },
        "OrderRepositories.get": {
            "name": "get",
            "location": 27,
            "return": [
                "Order"
            ],
            "arguments": {
                "self": [],
                "order_id": [
                    "int"
                ]
            }
        },
        "OrderRepositories.search": {
            "name": "search",
            "location": 33,
            "return": [
                "List[Order]"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "Optional[Client]"
                ],
                "created": [
                    "Optional[datetime]"
                ]
            }
        }
    },
    "python_architecture-master/ram_db/bf_ram_db/product.py": {
        "ProductRepositories.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "static_data": [
                    "Optional[List[Product]]"
                ]
            }
        },
        "ProductRepositories.create": {
            "name": "create",
            "location": 19,
            "return": [
                "Product"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "price": [
                    "float"
                ]
            }
        },
        "ProductRepositories.get": {
            "name": "get",
            "location": 26,
            "return": [
                "Product"
            ],
            "arguments": {
                "self": [],
                "product_id": [
                    "int"
                ]
            }
        }
    },
    "python_architecture-master/ram_db/bf_ram_db/ram_storage.py": {
        "RamStorage.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "storage": [
                    "StorageType"
                ],
                "pk_name": [
                    "str"
                ]
            }
        },
        "RamStorage.add": {
            "name": "add",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "T"
                ]
            }
        },
        "RamStorage.get": {
            "name": "get",
            "location": 21,
            "return": [
                "Optional[T]"
            ],
            "arguments": {
                "self": [],
                "pk": [
                    "int"
                ]
            }
        },
        "RamStorage.search": {
            "name": "search",
            "location": 24,
            "return": [
                "'RamStorage[T]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "RamStorage.remove": {
            "name": "remove",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "T"
                ]
            }
        },
        "RamStorage.all": {
            "name": "all",
            "location": 42,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RamStorage._get_item_pk": {
            "name": "_get_item_pk",
            "location": 45,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "T"
                ]
            }
        },
        "RamStorage.next_pk": {
            "name": "next_pk",
            "location": 48,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RamStorage.search.filter_by": {
            "name": "filter_by",
            "location": 25,
            "return": [
                "StorageType"
            ],
            "arguments": {
                "storage": [],
                "current_filter": [
                    "tuple"
                ]
            }
        }
    },
    "python_architecture-master/ram_db/bf_ram_db/__init__.py": {},
    "python_architecture-master/shop/setup.py": {
        "get_requirements": {
            "name": "get_requirements",
            "location": 8,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "prefix": [
                    "str"
                ]
            }
        }
    },
    "python_architecture-master/shop/bf_shop/entities.py": {},
    "python_architecture-master/shop/bf_shop/exceptions.py": {
        "BaseException.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Optional[str]"
                ],
                "detail": [
                    "Optional[str]"
                ]
            }
        },
        "ElementNotFound.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_architecture-master/shop/bf_shop/logic.py": {
        "OrderLogic.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "orders": [
                    "IOrderRepository"
                ],
                "products": [
                    "IProductRepository"
                ],
                "clients": [
                    "IClientRepository"
                ]
            }
        },
        "OrderLogic.search": {
            "name": "search",
            "location": 21,
            "return": [
                "List[Order]"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "int"
                ]
            }
        },
        "OrderLogic.create": {
            "name": "create",
            "location": 25,
            "return": [
                "Order"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "int"
                ]
            }
        },
        "OrderLogic.add_product": {
            "name": "add_product",
            "location": 29,
            "return": [
                "Order"
            ],
            "arguments": {
                "self": [],
                "order_id": [
                    "int"
                ],
                "product_id": [
                    "int"
                ]
            }
        }
    },
    "python_architecture-master/shop/bf_shop/repositories.py": {
        "IClientRepository.create": {
            "name": "create",
            "location": 10,
            "return": [
                "Client"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "IClientRepository.get": {
            "name": "get",
            "location": 14,
            "return": [
                "Client"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "int"
                ]
            }
        },
        "IOrderRepository.create": {
            "name": "create",
            "location": 20,
            "return": [
                "Order"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "Client"
                ]
            }
        },
        "IOrderRepository.get": {
            "name": "get",
            "location": 24,
            "return": [
                "Order"
            ],
            "arguments": {
                "self": [],
                "order_id": [
                    "int"
                ]
            }
        },
        "IOrderRepository.search": {
            "name": "search",
            "location": 28,
            "return": [
                "List[Order]"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "Optional[Client]"
                ],
                "created": [
                    "Optional[datetime]"
                ]
            }
        },
        "IProductRepository.create": {
            "name": "create",
            "location": 36,
            "return": [
                "Product"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "price": [
                    "float"
                ]
            }
        },
        "IProductRepository.get": {
            "name": "get",
            "location": 40,
            "return": [
                "Product"
            ],
            "arguments": {
                "self": [],
                "product_id": [
                    "int"
                ]
            }
        }
    },
    "python_architecture-master/shop/bf_shop/__init__.py": {},
    "python_architecture-master/shop/unittests/conftest.py": {
        "prepare_repositories": {
            "name": "prepare_repositories",
            "location": 13,
            "return": [
                "StaticRepositories"
            ],
            "arguments": {}
        },
        "prepare_repositories.Orders.create": {
            "name": "create",
            "location": 19,
            "return": [
                "Order"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "Client"
                ]
            }
        },
        "prepare_repositories.Orders.get": {
            "name": "get",
            "location": 22,
            "return": [
                "Order"
            ],
            "arguments": {
                "self": [],
                "order_id": [
                    "int"
                ]
            }
        },
        "prepare_repositories.Orders.search": {
            "name": "search",
            "location": 25,
            "return": [
                "List[Order]"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "Optional[Client]"
                ],
                "created": [
                    "Optional[datetime]"
                ]
            }
        },
        "prepare_repositories.Products.create": {
            "name": "create",
            "location": 31,
            "return": [
                "Product"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "price": [
                    "float"
                ]
            }
        },
        "prepare_repositories.Products.get": {
            "name": "get",
            "location": 34,
            "return": [
                "Product"
            ],
            "arguments": {
                "self": [],
                "product_id": [
                    "int"
                ]
            }
        },
        "prepare_repositories.Clients.create": {
            "name": "create",
            "location": 38,
            "return": [
                "Client"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "prepare_repositories.Clients.get": {
            "name": "get",
            "location": 41,
            "return": [
                "Client"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "int"
                ]
            }
        }
    },
    "python_architecture-master/shop/unittests/test_logic.py": {
        "test_add_product_increase_orders_total_cost": {
            "name": "test_add_product_increase_orders_total_cost",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_repositories": [
                    "StaticRepositories"
                ]
            }
        }
    },
    "python_architecture-master/shop/unittests/__init__.py": {}
}
{
    "qtqa-master/scripts/api-review/resetboring.py": {
        "main": {
            "name": "main",
            "location": 966,
            "return": [],
            "arguments": {
                "args": [],
                "hear": [],
                "talk": [],
                "complain": []
            }
        },
        "Selector.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "store": [],
                "new": [],
                "old": [],
                "mode": []
            }
        },
        "Selector.__get_lines": {
            "name": "__get_lines",
            "location": 144,
            "return": [],
            "arguments": {
                "store": [],
                "sha1": []
            }
        },
        "Selector.__end_copyright": {
            "name": "__end_copyright",
            "location": 152,
            "return": [],
            "arguments": {
                "seq": [],
                "marker": []
            }
        },
        "Selector.__get_hunks": {
            "name": "__get_hunks",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "isjunk": [],
                "differ": []
            }
        },
        "Selector.refine": {
            "name": "refine",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "Selector.__as_entry": {
            "name": "__as_entry",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "mode": [],
                "blob": [],
                "entry": []
            }
        },
        "Selector.restore": {
            "name": "restore",
            "location": 229,
            "return": [],
            "arguments": {
                "blob": [],
                "mode": [],
                "entry": []
            }
        },
        "Selector.__copy": {
            "name": "__copy",
            "location": 244,
            "return": [],
            "arguments": {
                "self": [],
                "tag": [],
                "startOld": [],
                "endOld": [],
                "startNew": [],
                "endNew": []
            }
        },
        "Selector.__digest": {
            "name": "__digest",
            "location": 252,
            "return": [],
            "arguments": {
                "self": [],
                "hunk": []
            }
        },
        "Scanner.__warnPara": {
            "name": "__warnPara",
            "location": 900,
            "return": [],
            "arguments": {
                "paragraph": [],
                "grmbl": []
            }
        },
        "Scanner.disclaimed": {
            "name": "disclaimed",
            "location": 907,
            "return": [],
            "arguments": {
                "cls": [],
                "path": [],
                "grmbl": []
            }
        },
        "Selector.Censor.minimize": {
            "name": "minimize",
            "location": 391,
            "return": [],
            "arguments": {
                "cls": [],
                "text": []
            }
        },
        "Selector.Censor.__iter_variants": {
            "name": "__iter_variants",
            "location": 418,
            "return": [],
            "arguments": {
                "cls": [],
                "tokens": []
            }
        },
        "Selector.Censor.harmonize": {
            "name": "harmonize",
            "location": 438,
            "return": [],
            "arguments": {
                "cls": [],
                "old": [],
                "new": []
            }
        },
        "Selector.Censor.__split": {
            "name": "__split",
            "location": 457,
            "return": [],
            "arguments": {
                "cls": [],
                "line": []
            }
        },
        "Selector.Censor.join": {
            "name": "join",
            "location": 492,
            "return": [],
            "arguments": {
                "cls": [],
                "orig": [],
                "tokens": []
            }
        },
        "Selector.Censor.recipe": {
            "name": "recipe",
            "location": 596,
            "return": [],
            "arguments": {}
        },
        "Selector.Censor.recipe.test": {
            "name": "test",
            "location": 735,
            "return": [],
            "arguments": {
                "words": [],
                "z": []
            }
        },
        "Selector.Censor.recipe.purge": {
            "name": "purge",
            "location": 737,
            "return": [],
            "arguments": {
                "words": [],
                "z": [],
                "s": []
            }
        },
        "Selector.Censor.recipe.find": {
            "name": "find",
            "location": 704,
            "return": [],
            "arguments": {
                "words": [],
                "after": []
            }
        }
    },
    "qtqa-master/scripts/coin/blacklist_tool/blacklistTool.py": {
        "clear": {
            "name": "clear",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "onExit": {
            "name": "onExit",
            "location": 85,
            "return": [],
            "arguments": {}
        },
        "getActionToPerform": {
            "name": "getActionToPerform",
            "location": 458,
            "return": [
                "str"
            ],
            "arguments": {
                "testname": [
                    "str"
                ],
                "blacklistedTestName": [
                    "str"
                ],
                "hasFailures": [
                    "bool"
                ],
                "notInBlacklist": [
                    "bool"
                ]
            }
        },
        "editEntry": {
            "name": "editEntry",
            "location": 539,
            "return": [
                "list"
            ],
            "arguments": {
                "testname": [
                    "str"
                ],
                "isPartialMatch": [
                    "bool"
                ],
                "failedPlatformsRaw": [
                    "list"
                ],
                "alreadyBlacklisted": [
                    "list"
                ],
                "action": [
                    "str"
                ]
            }
        },
        "appendPartialMatchSkipped": {
            "name": "appendPartialMatchSkipped",
            "location": 980,
            "return": [],
            "arguments": {
                "testname": [
                    "list"
                ],
                "blacklistedTestData": [
                    "dict"
                ],
                "failedPlatforms": [
                    "list"
                ]
            }
        },
        "processItem": {
            "name": "processItem",
            "location": 994,
            "return": [],
            "arguments": {
                "testname": [
                    "list"
                ],
                "failedPlatforms": [
                    "list"
                ]
            }
        },
        "getInfluxClient": {
            "name": "getInfluxClient",
            "location": 1207,
            "return": [
                "InfluxDBClient"
            ],
            "arguments": {}
        },
        "doQuery": {
            "name": "doQuery",
            "location": 1229,
            "return": [
                "dict"
            ],
            "arguments": {
                "module": [
                    "str"
                ]
            }
        },
        "getActivePlatforms": {
            "name": "getActivePlatforms",
            "location": 1398,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "validateQt5Dir": {
            "name": "validateQt5Dir",
            "location": 1460,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "editHelper.displayModifiedTable": {
            "name": "displayModifiedTable",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "deletedLines": [
                    "str"
                ],
                "addedLines": [
                    "str"
                ]
            }
        },
        "editHelper.printFailingConfigs": {
            "name": "printFailingConfigs",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "failedPlatforms": [
                    "list"
                ]
            }
        },
        "editHelper.paintHeader": {
            "name": "paintHeader",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "testname": [
                    "tuple"
                ],
                "blacklistedTestData": [
                    "dict"
                ],
                "failedPlatforms": [
                    "list"
                ]
            }
        },
        "editHelper.checkFailingPlatformSaturation": {
            "name": "checkFailingPlatformSaturation",
            "location": 156,
            "return": [
                "bool"
            ],
            "arguments": {
                "platforms": [
                    "list"
                ],
                "platformType": [
                    "str"
                ]
            }
        },
        "editHelper.locateBlacklist": {
            "name": "locateBlacklist",
            "location": 205,
            "return": [
                "dict"
            ],
            "arguments": {
                "blacklistPath": [
                    "str"
                ],
                "testnameTuple": [
                    "tuple"
                ]
            }
        },
        "editHelper.generateNewBlacklist": {
            "name": "generateNewBlacklist",
            "location": 287,
            "return": [
                "set"
            ],
            "arguments": {
                "blacklistedTestData": [
                    "dict"
                ],
                "failedPlatforms": [
                    "list"
                ]
            }
        },
        "editHelper.deleteLines": {
            "name": "deleteLines",
            "location": 304,
            "return": [
                "str"
            ],
            "arguments": {
                "blacklistedTestData": [
                    "dict"
                ],
                "preserveFile": [
                    "bool"
                ],
                "dryRun": [
                    "bool"
                ]
            }
        },
        "editHelper.writeNewEntry": {
            "name": "writeNewEntry",
            "location": 348,
            "return": [
                "dict"
            ],
            "arguments": {
                "blacklistedTestData": [
                    "dict"
                ],
                "linesToAdd": [
                    "list"
                ],
                "linesToDelete": [
                    "str"
                ]
            }
        },
        "editHelper.determineEditRequired": {
            "name": "determineEditRequired",
            "location": 381,
            "return": [
                "bool"
            ],
            "arguments": {
                "existingItems": [
                    "list"
                ],
                "newItems": [
                    "list"
                ]
            }
        },
        "editHelper.getEdits": {
            "name": "getEdits",
            "location": 389,
            "return": [
                "list"
            ],
            "arguments": {
                "testname": [
                    "tuple"
                ],
                "blacklistedTestData": [
                    "dict"
                ],
                "failedPlatforms": [
                    "list"
                ],
                "existingBlacklistItems": [
                    "list"
                ],
                "action": [
                    "str"
                ]
            }
        },
        "doQuery.setClientProp": {
            "name": "setClientProp",
            "location": 1234,
            "return": [
                "None"
            ],
            "arguments": {
                "prop": [
                    "str"
                ]
            }
        },
        "doQuery.showDBKeysFields": {
            "name": "showDBKeysFields",
            "location": 1256,
            "return": [
                "bool"
            ],
            "arguments": {
                "message": [
                    "str"
                ]
            }
        }
    },
    "qtqa-master/scripts/coin/blacklist_tool/platformEnums.py": {
        "OS.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "normalizedValue": [
                    "str"
                ],
                "osFamily": [
                    "str"
                ],
                "canBe": [
                    "list"
                ],
                "isOfType": [
                    "str"
                ]
            }
        },
        "OS.count": {
            "name": "count",
            "location": 92,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [],
                "typeRequested": [
                    "str"
                ]
            }
        },
        "OS.getFamily": {
            "name": "getFamily",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "normalizedValue": [
                    "str"
                ]
            }
        },
        "OS.getType": {
            "name": "getType",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "normalizedValue": [
                    "str"
                ]
            }
        },
        "OS.getCanBe": {
            "name": "getCanBe",
            "location": 115,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [],
                "normalizedValue": [
                    "str"
                ]
            }
        },
        "OS.getFamilyMembers": {
            "name": "getFamilyMembers",
            "location": 122,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [],
                "familyName": [
                    "str"
                ]
            }
        },
        "OS.getTypeMembers": {
            "name": "getTypeMembers",
            "location": 127,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [],
                "typeName": [
                    "str"
                ]
            }
        },
        "COMPILER.getNormalizedValue": {
            "name": "getNormalizedValue",
            "location": 143,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "requestName": [
                    "str"
                ]
            }
        },
        "COMPILER.isCompiler": {
            "name": "isCompiler",
            "location": 152,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "requestName": [
                    "str"
                ]
            }
        },
        "PLATFORM.__init__": {
            "name": "__init__",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "normalizedValue": [
                    "str"
                ],
                "canBe": [
                    "list"
                ],
                "osFamily": [
                    "str"
                ],
                "isRootType": [
                    "bool"
                ]
            }
        },
        "PLATFORM.getNormalizedValue": {
            "name": "getNormalizedValue",
            "location": 220,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "requestName": [
                    "str"
                ]
            }
        },
        "PLATFORM.getCanBe": {
            "name": "getCanBe",
            "location": 229,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [],
                "normalizedValue": [
                    "str"
                ]
            }
        },
        "PLATFORM.getFamily": {
            "name": "getFamily",
            "location": 239,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "normalizedValue": [
                    "str"
                ]
            }
        },
        "PLATFORM.getIsRootType": {
            "name": "getIsRootType",
            "location": 246,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "normalizedValue": [
                    "str"
                ]
            }
        }
    },
    "qtqa-master/scripts/generic/parse_build_log.py": {
        "read_file": {
            "name": "read_file",
            "location": 55,
            "return": [],
            "arguments": {
                "file_name": []
            }
        },
        "zcat": {
            "name": "zcat",
            "location": 63,
            "return": [],
            "arguments": {
                "file_name": []
            }
        },
        "is_compile_error": {
            "name": "is_compile_error",
            "location": 83,
            "return": [],
            "arguments": {
                "line": []
            }
        },
        "print_failed_test": {
            "name": "print_failed_test",
            "location": 101,
            "return": [],
            "arguments": {
                "lines": [],
                "start": [],
                "end": []
            }
        },
        "parse": {
            "name": "parse",
            "location": 118,
            "return": [],
            "arguments": {
                "lines": []
            }
        }
    },
    "qtqa-master/scripts/jira/jira-bug-closer/dump_jira_versions.py": {
        "print_versions": {
            "name": "print_versions",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "version_list": [
                    "List[Tuple[(LooseVersion, str, bool)]]"
                ]
            }
        }
    },
    "qtqa-master/scripts/jira/jira-bug-closer/main.py": {},
    "qtqa-master/scripts/jira/jira-bug-closer/oauth_dance.py": {
        "read": {
            "name": "read",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        }
    },
    "qtqa-master/scripts/jira/jira-bug-closer/bot/args.py": {
        "Args.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Args.config_section": {
            "name": "config_section",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Args.since": {
            "name": "since",
            "location": 48,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtqa-master/scripts/jira/jira-bug-closer/bot/bot.py": {
        "Bot.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bot.run": {
            "name": "run",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtqa-master/scripts/jira/jira-bug-closer/bot/__init__.py": {},
    "qtqa-master/scripts/jira/jira-bug-closer/config/config.py": {
        "Config.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "str"
                ]
            }
        },
        "Config.jira_url": {
            "name": "jira_url",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.get_oauth_data": {
            "name": "get_oauth_data",
            "location": 50,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.add_comment_to_issues": {
            "name": "add_comment_to_issues",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtqa-master/scripts/jira/jira-bug-closer/config/__init__.py": {},
    "qtqa-master/scripts/jira/jira-bug-closer/gerrit/streamevents.py": {
        "GerritSshClientSession.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GerritSshClientSession.setDataCallback": {
            "name": "setDataCallback",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "Callable[([str], Coroutine[(Any, Any, None)])]"
                ]
            }
        },
        "GerritSshClientSession.data_received": {
            "name": "data_received",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str"
                ],
                "datatype": [
                    "Any"
                ]
            }
        },
        "GerritSshClientSession.eof_received": {
            "name": "eof_received",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GerritSshClientSession.connection_lost": {
            "name": "connection_lost",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "Exception"
                ]
            }
        },
        "GerritSshClient.connection_made": {
            "name": "connection_made",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "asyncssh.SSHClientConnection"
                ]
            }
        },
        "GerritSshClient.auth_completed": {
            "name": "auth_completed",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GerritSshClient.connection_lost": {
            "name": "connection_lost",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "Exception"
                ]
            }
        },
        "GerritStreamEvents.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GerritStreamEvents.setDataCallback": {
            "name": "setDataCallback",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "Callable[([str], Coroutine[(Any, Any, None)])]"
                ]
            }
        }
    },
    "qtqa-master/scripts/jira/jira-bug-closer/gerrit/streamparser.py": {
        "GerritEvent.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "str"
                ],
                "project": [
                    "str"
                ],
                "branch": [
                    "str"
                ]
            }
        },
        "GerritEvent.__eq__": {
            "name": "__eq__",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "GerritEvent.__repr__": {
            "name": "__repr__",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GerritEvent.is_branch_update": {
            "name": "is_branch_update",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GerritStreamParser.parse": {
            "name": "parse",
            "location": 59,
            "return": [
                "GerritEvent"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str"
                ]
            }
        }
    },
    "qtqa-master/scripts/jira/jira-bug-closer/gerrit/__init__.py": {},
    "qtqa-master/scripts/jira/jira-bug-closer/git/repository.py": {
        "Repository.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Repository.repo_path": {
            "name": "repo_path",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Repository.git_command": {
            "name": "git_command",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str"
                ]
            }
        },
        "Repository._show_ref_output_to_dict": {
            "name": "_show_ref_output_to_dict",
            "location": 107,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "str"
                ]
            }
        },
        "Repository.get_task_number_and_fixes": {
            "name": "get_task_number_and_fixes",
            "location": 135,
            "return": [
                "Tuple[(List[str], List[str])]"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "str"
                ]
            }
        },
        "Repository._clean_branch_name": {
            "name": "_clean_branch_name",
            "location": 150,
            "return": [
                "str"
            ],
            "arguments": {
                "ref": [
                    "str"
                ]
            }
        },
        "Repository._clean_tag_name": {
            "name": "_clean_tag_name",
            "location": 157,
            "return": [
                "str"
            ],
            "arguments": {
                "ref": [
                    "str"
                ]
            }
        },
        "Repository._find_first_comparable_minor_version": {
            "name": "_find_first_comparable_minor_version",
            "location": 166,
            "return": [
                "Optional[Version]"
            ],
            "arguments": {
                "ref": [
                    "Version"
                ],
                "sorted_versions": [
                    "List[Version]"
                ]
            }
        }
    },
    "qtqa-master/scripts/jira/jira-bug-closer/git/version.py": {
        "Version.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "version_string": [
                    "str"
                ]
            }
        },
        "Version.__lt__": {
            "name": "__lt__",
            "location": 40,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Version.__eq__": {
            "name": "__eq__",
            "location": 49,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Version.__gt__": {
            "name": "__gt__",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Version.__repr__": {
            "name": "__repr__",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeRange.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repository": [
                    "str"
                ],
                "branch": [
                    "str"
                ],
                "before": [
                    "Optional[str]"
                ],
                "after": [
                    "str"
                ],
                "since": [
                    "Optional[str]"
                ]
            }
        },
        "ChangeRange.__repr__": {
            "name": "__repr__",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixedByTag.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repository": [
                    "str"
                ],
                "branch": [
                    "str"
                ],
                "sha1": [
                    "str"
                ],
                "author": [
                    "str"
                ],
                "subject": [
                    "str"
                ],
                "version": [
                    "Optional[str]"
                ],
                "task_numbers": [
                    "List[str]"
                ],
                "fixes": [
                    "List[str]"
                ]
            }
        },
        "FixedByTag.__eq__": {
            "name": "__eq__",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "FixedByTag.__repr__": {
            "name": "__repr__",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixedByTag.__hash__": {
            "name": "__hash__",
            "location": 96,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtqa-master/scripts/jira/jira-bug-closer/git/__init__.py": {},
    "qtqa-master/scripts/jira/jira-bug-closer/jiracloser/closer.py": {
        "JiraCloser.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Config"
                ]
            }
        },
        "JiraCloser._clean_jira_versions": {
            "name": "_clean_jira_versions",
            "location": 55,
            "return": [
                "List[Tuple[(LooseVersion, str, bool)]]"
            ],
            "arguments": {
                "jira_version_list": [
                    "List[Dict[(str, str)]]"
                ]
            }
        },
        "JiraCloser._jira_version_list": {
            "name": "_jira_version_list",
            "location": 71,
            "return": [
                "List[Tuple[(LooseVersion, str, bool)]]"
            ],
            "arguments": {
                "self": [],
                "issue": [
                    "jira.Issue"
                ]
            }
        },
        "JiraCloser._guess_fix_version": {
            "name": "_guess_fix_version",
            "location": 94,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str"
                ],
                "known_versions": [
                    "List[Tuple[(LooseVersion, str, bool)]]"
                ]
            }
        },
        "JiraCloser._get_fix_version_field": {
            "name": "_get_fix_version_field",
            "location": 127,
            "return": [
                "Tuple[(str, Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": [],
                "issue": [
                    "jira.Issue"
                ],
                "fix_version": [
                    "Optional[str]"
                ]
            }
        },
        "JiraCloser._get_change_sha1_field": {
            "name": "_get_change_sha1_field",
            "location": 174,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "issue": [
                    "jira.Issue"
                ],
                "fix": [
                    "FixedByTag"
                ]
            }
        },
        "JiraCloser._is_reopened": {
            "name": "_is_reopened",
            "location": 183,
            "return": [
                "bool"
            ],
            "arguments": {
                "issue": [
                    "jira.Issue"
                ]
            }
        },
        "JiraCloser._close_issue": {
            "name": "_close_issue",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "issue": [
                    "jira.Issue"
                ],
                "fields": [
                    "Dict[(str, Any)]"
                ],
                "ignore_reopened": [
                    "bool"
                ]
            }
        },
        "JiraCloser._update_issue": {
            "name": "_update_issue",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fix": [
                    "FixedByTag"
                ],
                "issue_key": [
                    "str"
                ],
                "fixes": [
                    "bool"
                ],
                "ignore_reopened": [
                    "bool"
                ]
            }
        },
        "JiraCloser._update_issue_with_retry": {
            "name": "_update_issue_with_retry",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fix": [
                    "FixedByTag"
                ],
                "issue_key": [
                    "str"
                ],
                "fixes": [
                    "bool"
                ],
                "ignore_reopened": [
                    "bool"
                ]
            }
        },
        "JiraCloser.run": {
            "name": "run",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fix": [
                    "FixedByTag"
                ]
            }
        },
        "JiraCloser._guess_fix_version.is_same_version": {
            "name": "is_same_version",
            "location": 99,
            "return": [
                "bool"
            ],
            "arguments": {
                "left": [
                    "LooseVersion"
                ],
                "right": [
                    "LooseVersion"
                ]
            }
        }
    },
    "qtqa-master/scripts/jira/jira-bug-closer/jiracloser/__init__.py": {},
    "qtqa-master/scripts/jira/jira-bug-closer/logger/logger.py": {
        "get_logger": {
            "name": "get_logger",
            "location": 36,
            "return": [
                "logging.Logger"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "qtqa-master/scripts/jira/jira-bug-closer/logger/__init__.py": {},
    "qtqa-master/scripts/jira/jira-bug-closer/tests/test_gitlog.py": {
        "test_version_class": {
            "name": "test_version_class",
            "location": 206,
            "return": [],
            "arguments": {
                "versions": [
                    "List[Version]"
                ],
                "sorted_versions": [
                    "List[Version]"
                ]
            }
        },
        "test_have_secrets": {
            "name": "test_have_secrets",
            "location": 214,
            "return": [],
            "arguments": {}
        }
    },
    "qtqa-master/scripts/jira/jira-bug-closer/tests/test_jira_close_issue.py": {
        "test_close_issue": {
            "name": "test_close_issue",
            "location": 37,
            "return": [],
            "arguments": {}
        }
    },
    "qtqa-master/scripts/jira/jira-bug-closer/tests/test_jira_versions.py": {
        "test_set_jira_versions": {
            "name": "test_set_jira_versions",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "test_jira_versions": {
            "name": "test_jira_versions",
            "location": 261,
            "return": [],
            "arguments": {
                "branch": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "test_jira_versions_creator": {
            "name": "test_jira_versions_creator",
            "location": 405,
            "return": [],
            "arguments": {
                "branch": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "test_jira_versions_to_dict": {
            "name": "test_jira_versions_to_dict",
            "location": 413,
            "return": [],
            "arguments": {
                "jira_version_list": [
                    "List[Dict[(str, str)]]"
                ],
                "expected": [
                    "List[Tuple[(LooseVersion, str, bool)]]"
                ]
            }
        }
    },
    "qtqa-master/scripts/jira/jira-bug-closer/tests/test_listing_projects.py": {},
    "qtqa-master/scripts/jira/jira-bug-closer/tests/test_streamparser.py": {
        "test_parser": {
            "name": "test_parser",
            "location": 132,
            "return": [],
            "arguments": {
                "message": [
                    "str"
                ],
                "expected": [
                    "GerritEvent"
                ],
                "is_branch_update": [
                    "bool"
                ]
            }
        }
    },
    "qtqa-master/scripts/jira/jira-bug-closer/tests/__init__.py": {},
    "qtqa-master/scripts/lancebot/lancebot.py": {
        "setWindowsEnv": {
            "name": "setWindowsEnv",
            "location": 110,
            "return": [],
            "arguments": {}
        },
        "on_rm_error": {
            "name": "on_rm_error",
            "location": 149,
            "return": [],
            "arguments": {
                "func": [],
                "path": [],
                "exc_info": []
            }
        },
        "resetOutput": {
            "name": "resetOutput",
            "location": 160,
            "return": [],
            "arguments": {}
        },
        "version_gt": {
            "name": "version_gt",
            "location": 172,
            "return": [],
            "arguments": {
                "branch": [
                    "str"
                ],
                "reference": [
                    "str"
                ]
            }
        },
        "setConfigureOptions": {
            "name": "setConfigureOptions",
            "location": 176,
            "return": [],
            "arguments": {}
        },
        "checkResult": {
            "name": "checkResult",
            "location": 212,
            "return": [],
            "arguments": {}
        },
        "exitTrap": {
            "name": "exitTrap",
            "location": 229,
            "return": [],
            "arguments": {}
        },
        "applyPatches": {
            "name": "applyPatches",
            "location": 239,
            "return": [],
            "arguments": {
                "module": [],
                "cherryPickType": []
            }
        },
        "clone": {
            "name": "clone",
            "location": 282,
            "return": [],
            "arguments": {
                "directory": [],
                "module": []
            }
        },
        "build": {
            "name": "build",
            "location": 314,
            "return": [],
            "arguments": {
                "directory": [],
                "module": [],
                "sha": [],
                "testType": []
            }
        },
        "getSha": {
            "name": "getSha",
            "location": 425,
            "return": [],
            "arguments": {
                "directory": [],
                "module": [],
                "shaType": []
            }
        },
        "storeSha": {
            "name": "storeSha",
            "location": 455,
            "return": [],
            "arguments": {
                "directory": [],
                "module": [],
                "shaType": [],
                "sha": []
            }
        },
        "clearShas": {
            "name": "clearShas",
            "location": 465,
            "return": [],
            "arguments": {
                "directory": []
            }
        },
        "updateRefBuild": {
            "name": "updateRefBuild",
            "location": 474,
            "return": [],
            "arguments": {
                "module": []
            }
        },
        "parseResults": {
            "name": "parseResults",
            "location": 498,
            "return": [
                "()"
            ],
            "arguments": {
                "file": [
                    "str"
                ]
            }
        },
        "runTest": {
            "name": "runTest",
            "location": 532,
            "return": [],
            "arguments": {
                "testBaseDir": [],
                "module": [],
                "testType": []
            }
        },
        "updateBaselines": {
            "name": "updateBaselines",
            "location": 682,
            "return": [],
            "arguments": {
                "module": []
            }
        },
        "updateQtBase": {
            "name": "updateQtBase",
            "location": 702,
            "return": [],
            "arguments": {
                "directory": [],
                "repo": []
            }
        },
        "testRepo": {
            "name": "testRepo",
            "location": 720,
            "return": [],
            "arguments": {
                "workdir": [],
                "module": []
            }
        },
        "doPatchTest": {
            "name": "doPatchTest",
            "location": 734,
            "return": [],
            "arguments": {}
        },
        "doHeadTest": {
            "name": "doHeadTest",
            "location": 760,
            "return": [],
            "arguments": {}
        }
    },
    "qtqa-master/scripts/packagetesting/testpackage.py": {
        "deployment": {
            "name": "deployment",
            "location": 65,
            "return": [],
            "arguments": {}
        },
        "deploy_tool_command": {
            "name": "deploy_tool_command",
            "location": 74,
            "return": [],
            "arguments": {
                "binary": []
            }
        },
        "example_command": {
            "name": "example_command",
            "location": 81,
            "return": [],
            "arguments": {
                "binary": []
            }
        },
        "normalize_path": {
            "name": "normalize_path",
            "location": 89,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "build_deploy_test_path": {
            "name": "build_deploy_test_path",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "qt_version_less_than": {
            "name": "qt_version_less_than",
            "location": 103,
            "return": [],
            "arguments": {
                "major": [],
                "minor": [],
                "patch": []
            }
        },
        "qt_version_greater_equal_than": {
            "name": "qt_version_greater_equal_than",
            "location": 107,
            "return": [],
            "arguments": {
                "major": [],
                "minor": [],
                "patch": []
            }
        },
        "examples": {
            "name": "examples",
            "location": 111,
            "return": [],
            "arguments": {}
        },
        "determine_make_command": {
            "name": "determine_make_command",
            "location": 129,
            "return": [],
            "arguments": {
                "mkspec": []
            }
        },
        "query_qmake": {
            "name": "query_qmake",
            "location": 138,
            "return": [],
            "arguments": {}
        },
        "execute": {
            "name": "execute",
            "location": 160,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "run_process_output": {
            "name": "run_process_output",
            "location": 170,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "build_qmake": {
            "name": "build_qmake",
            "location": 179,
            "return": [],
            "arguments": {
                "example_src_path": []
            }
        },
        "build_cmake": {
            "name": "build_cmake",
            "location": 184,
            "return": [],
            "arguments": {
                "example_src_path": []
            }
        },
        "run_example": {
            "name": "run_example",
            "location": 190,
            "return": [],
            "arguments": {
                "example": [],
                "test_deployment": []
            }
        }
    },
    "qtqa-master/scripts/packagetesting/testwheel.py": {
        "get_pyside_version_from_import": {
            "name": "get_pyside_version_from_import",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "pyside2_examples": {
            "name": "pyside2_examples",
            "location": 70,
            "return": [],
            "arguments": {}
        },
        "get_commercial_examples": {
            "name": "get_commercial_examples",
            "location": 79,
            "return": [],
            "arguments": {
                "examples_root": []
            }
        },
        "examples": {
            "name": "examples",
            "location": 86,
            "return": [],
            "arguments": {
                "examples_root": []
            }
        },
        "execute": {
            "name": "execute",
            "location": 111,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "run_process": {
            "name": "run_process",
            "location": 120,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "run_process_output": {
            "name": "run_process_output",
            "location": 129,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "run_example": {
            "name": "run_example",
            "location": 136,
            "return": [],
            "arguments": {
                "root": [],
                "path": []
            }
        },
        "has_module": {
            "name": "has_module",
            "location": 142,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "test_cxfreeze": {
            "name": "test_cxfreeze",
            "location": 152,
            "return": [],
            "arguments": {
                "example": []
            }
        },
        "test_pyinstaller": {
            "name": "test_pyinstaller",
            "location": 174,
            "return": [],
            "arguments": {
                "example": []
            }
        }
    },
    "qtqa-master/scripts/qt/branch_qt.py": {
        "is_major_minor": {
            "name": "is_major_minor",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "version": [
                    "str"
                ]
            }
        },
        "is_major_minor_patch": {
            "name": "is_major_minor_patch",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "version": [
                    "str"
                ]
            }
        },
        "get_repo_name": {
            "name": "get_repo_name",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "repo": [
                    "git.Repo"
                ]
            }
        },
        "versionCompare": {
            "name": "versionCompare",
            "location": 104,
            "return": [],
            "arguments": {
                "version1": [
                    "str"
                ],
                "version2": [
                    "str"
                ]
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 430,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {}
        },
        "gerrit_add_pushmaster": {
            "name": "gerrit_add_pushmaster",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "gerrit_remove_pushmaster": {
            "name": "gerrit_remove_pushmaster",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Credentials.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Credentials.username": {
            "name": "username",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Credentials.password": {
            "name": "password",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "versionCompare.normalize": {
            "name": "normalize",
            "location": 105,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "versionCompare.cmp": {
            "name": "cmp",
            "location": 108,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "QtBranching.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "Mode"
                ],
                "fromBranch": [
                    "str"
                ],
                "fromVersion": [
                    "str"
                ],
                "toBranch": [
                    "str"
                ],
                "pretend": [
                    "bool"
                ],
                "skip_hooks": [
                    "bool"
                ],
                "direct": [
                    "bool"
                ],
                "reviewers": [
                    "typing.Optional[typing.List[str]]"
                ],
                "repos": [
                    "typing.Optional[typing.List[str]]"
                ]
            }
        },
        "QtBranching.subprocess_or_pretend": {
            "name": "subprocess_or_pretend",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QtBranching.run": {
            "name": "run",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QtBranching.process_qt5_repositories": {
            "name": "process_qt5_repositories",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QtBranching.process_repository": {
            "name": "process_repository",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repo_path": [
                    "str"
                ]
            }
        },
        "QtBranching.handle_module": {
            "name": "handle_module",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repo": [
                    "git.Repo"
                ]
            }
        },
        "QtBranching.sanity_check": {
            "name": "sanity_check",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QtBranching.init_repository": {
            "name": "init_repository",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QtBranching.clean_submodule": {
            "name": "clean_submodule",
            "location": 236,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "submodule": [
                    "git.Submodule"
                ],
                "branch": [
                    "str"
                ]
            }
        },
        "QtBranching.checkout_and_pull_branch": {
            "name": "checkout_and_pull_branch",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": [
                    "git.Repo"
                ],
                "branch": [
                    "str"
                ]
            }
        },
        "QtBranching.clone_extra_repo": {
            "name": "clone_extra_repo",
            "location": 260,
            "return": [
                "git.Repo"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "branch": [
                    "str"
                ]
            }
        },
        "QtBranching.branch_repo": {
            "name": "branch_repo",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repo": [
                    "git.Repo"
                ]
            }
        },
        "QtBranching.merge_repo": {
            "name": "merge_repo",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repo": [
                    "git.Repo"
                ]
            }
        },
        "QtBranching.sync_repo": {
            "name": "sync_repo",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repo": [
                    "git.Repo"
                ]
            }
        },
        "QtBranching.version_bump": {
            "name": "version_bump",
            "location": 323,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str"
                ],
                "pattern": [
                    "str"
                ],
                "repo": [
                    "str"
                ]
            }
        },
        "QtBranching.version_bump_repo": {
            "name": "version_bump_repo",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repo": [
                    "git.Repo"
                ]
            }
        },
        "QtBranching.push": {
            "name": "push",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "str"
                ],
                "branch": [
                    "str"
                ]
            }
        },
        "QtBranching.bump_qtbase_datastream": {
            "name": "bump_qtbase_datastream",
            "location": 396,
            "return": [
                "typing.Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
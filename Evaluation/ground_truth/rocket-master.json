{
    "rocket-master/batch_test_tpot.py": {
        "main": {
            "name": "main",
            "location": 64,
            "return": [],
            "arguments": {
                "kwargs": []
            }
        },
        "batch_run": {
            "name": "batch_run",
            "location": 127,
            "return": [],
            "arguments": {}
        },
        "MyExecutor.feature_select": {
            "name": "feature_select",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "sub_train_set": [],
                "y": []
            }
        },
        "MyExecutor.judge_function_model": {
            "name": "judge_function_model",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "result": [],
                "n_var": []
            }
        }
    },
    "rocket-master/rocket_autosk.py": {
        "main": {
            "name": "main",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "MyExecutor.feature_select": {
            "name": "feature_select",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "sub_train_set": [],
                "y": []
            }
        },
        "MyExecutor.judge_function_model": {
            "name": "judge_function_model",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "result": [],
                "n_var": []
            }
        }
    },
    "rocket-master/rocket_tpot.py": {
        "main": {
            "name": "main",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "MyExecutor.feature_select": {
            "name": "feature_select",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "sub_train_set": [],
                "y": []
            }
        },
        "MyExecutor.judge_function_model": {
            "name": "judge_function_model",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "result": [],
                "n_var": []
            }
        }
    },
    "rocket-master/data/__init__.py": {},
    "rocket-master/data/model_hl/__init__.py": {},
    "rocket-master/data/model_mix/__init__.py": {
        "clean_data": {
            "name": "clean_data",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "get_data": {
            "name": "get_data",
            "location": 62,
            "return": [],
            "arguments": {}
        }
    },
    "rocket-master/lib/execute.py": {
        "Executor.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "df": [],
                "y": [],
                "model": []
            }
        },
        "Executor.feature_select": {
            "name": "feature_select",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "sub_train_set": [],
                "y": []
            }
        },
        "Executor.build_model": {
            "name": "build_model",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "mymodel": [],
                "train_x": [],
                "train_y": [],
                "test_x": [],
                "test_y": []
            }
        },
        "Executor.train_by_feature": {
            "name": "train_by_feature",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "feature": []
            }
        },
        "Executor.train_all": {
            "name": "train_all",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Executor.judge_function_model": {
            "name": "judge_function_model",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "result": []
            }
        },
        "Executor.get_variable_cnt": {
            "name": "get_variable_cnt",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "single_result": []
            }
        },
        "Executor.get_result": {
            "name": "get_result",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "n_var": []
            }
        }
    },
    "rocket-master/lib/judge_funcs.py": {
        "judge_function_v1": {
            "name": "judge_function_v1",
            "location": 9,
            "return": [],
            "arguments": {
                "result": []
            }
        },
        "judge_auc_mean_std": {
            "name": "judge_auc_mean_std",
            "location": 28,
            "return": [],
            "arguments": {
                "auc_mean": [],
                "auc_std": []
            }
        }
    },
    "rocket-master/lib/select_funcs.py": {
        "drop_useless": {
            "name": "drop_useless",
            "location": 12,
            "return": [],
            "arguments": {
                "df": []
            }
        },
        "drop_by_iv": {
            "name": "drop_by_iv",
            "location": 22,
            "return": [],
            "arguments": {
                "df": [],
                "y": [],
                "p": []
            }
        },
        "delMissing": {
            "name": "delMissing",
            "location": 52,
            "return": [],
            "arguments": {
                "df": [],
                "thresold": [],
                "cols": [],
                "include": []
            }
        },
        "handleMissing": {
            "name": "handleMissing",
            "location": 65,
            "return": [],
            "arguments": {
                "df": [],
                "missingValue": [],
                "cols": [],
                "strategies": []
            }
        },
        "turnDispersed": {
            "name": "turnDispersed",
            "location": 72,
            "return": [],
            "arguments": {
                "df": [],
                "cols": []
            }
        },
        "turnOneHot": {
            "name": "turnOneHot",
            "location": 80,
            "return": [],
            "arguments": {
                "df": [],
                "cols": []
            }
        }
    },
    "rocket-master/lib/utils.py": {
        "data_split": {
            "name": "data_split",
            "location": 13,
            "return": [],
            "arguments": {
                "data": [],
                "threads": [],
                "split_flag": []
            }
        },
        "smbinning_test": {
            "name": "smbinning_test",
            "location": 42,
            "return": [],
            "arguments": {
                "df": [],
                "Y": [],
                "x": []
            }
        },
        "calc_columns": {
            "name": "calc_columns",
            "location": 59,
            "return": [],
            "arguments": {
                "single_result": [],
                "tmp": [],
                "Y": [],
                "df": []
            }
        },
        "calc_iv": {
            "name": "calc_iv",
            "location": 85,
            "return": [],
            "arguments": {
                "df": [],
                "Y": [],
                "x": [],
                "cuts": []
            }
        },
        "getReport": {
            "name": "getReport",
            "location": 144,
            "return": [],
            "arguments": {
                "model": [],
                "trainSet": [],
                "X_train_ask": [],
                "y_train_ask": [],
                "testSet": [],
                "X_test_ask": [],
                "y_test_ask": []
            }
        }
    },
    "rocket-master/lib/__init__.py": {},
    "rocket-master/result/exp.py": {
        "ks_score": {
            "name": "ks_score",
            "location": 26,
            "return": [],
            "arguments": {
                "model": [],
                "X_train": [],
                "y_train": []
            }
        },
        "run": {
            "name": "run",
            "location": 39,
            "return": [],
            "arguments": {}
        }
    },
    "rocket-master/result/exp_v2.py": {},
    "rocket-master/smbinning/sb_test.py": {
        "smbinning_test": {
            "name": "smbinning_test",
            "location": 11,
            "return": [],
            "arguments": {
                "df": [],
                "Y": [],
                "x": []
            }
        },
        "calc_columns": {
            "name": "calc_columns",
            "location": 30,
            "return": [],
            "arguments": {
                "single_result": [],
                "tmp": [],
                "Y": [],
                "df": []
            }
        },
        "calc_iv": {
            "name": "calc_iv",
            "location": 57,
            "return": [],
            "arguments": {
                "df": [],
                "Y": [],
                "x": [],
                "cuts": []
            }
        }
    },
    "rocket-master/smbinning/smbinning.py": {
        "smbinning": {
            "name": "smbinning",
            "location": 10,
            "return": [],
            "arguments": {
                "df": [],
                "Y": [],
                "x": []
            }
        },
        "calc_columns": {
            "name": "calc_columns",
            "location": 26,
            "return": [],
            "arguments": {
                "single_result": [],
                "tmp": [],
                "Y": [],
                "df": []
            }
        },
        "calc_iv": {
            "name": "calc_iv",
            "location": 52,
            "return": [],
            "arguments": {
                "df": [],
                "Y": [],
                "x": [],
                "cuts": []
            }
        }
    },
    "rocket-master/smbinning/woe.py": {
        "WOE.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WOE.woe": {
            "name": "woe",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "X": [],
                "y": [],
                "to_discretize": [],
                "replace": []
            }
        },
        "WOE.compute_woe": {
            "name": "compute_woe",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "WOE.discretize": {
            "name": "discretize",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "WOE.replace_x": {
            "name": "replace_x",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "woe": [],
                "attributes": []
            }
        }
    },
    "rocket-master/smbinning/woe_test.py": {},
    "rocket-master/smbinning/__init__.py": {},
    "rocket-master/test/base.py": {
        "data_split": {
            "name": "data_split",
            "location": 3,
            "return": [],
            "arguments": {
                "data": [],
                "threads": []
            }
        }
    },
    "rocket-master/test/calc_auc.py": {},
    "rocket-master/test/demo1.py": {},
    "rocket-master/test/information_value.py": {
        "WOE.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WOE.woe": {
            "name": "woe",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "X": [],
                "y": [],
                "event": []
            }
        },
        "WOE.woe_single_x": {
            "name": "woe_single_x",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "event": []
            }
        },
        "WOE.woe_replace": {
            "name": "woe_replace",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "X": [],
                "woe_arr": []
            }
        },
        "WOE.combined_iv": {
            "name": "combined_iv",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "X": [],
                "y": [],
                "masks": [],
                "event": []
            }
        },
        "WOE.combine": {
            "name": "combine",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "list": []
            }
        },
        "WOE.count_binary": {
            "name": "count_binary",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "event": []
            }
        },
        "WOE.check_target_binary": {
            "name": "check_target_binary",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "y": []
            }
        },
        "WOE.feature_discretion": {
            "name": "feature_discretion",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "WOE.discrete": {
            "name": "discrete",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "WOE.WOE_MIN": {
            "name": "WOE_MIN",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "woe_min": []
            }
        },
        "WOE.WOE_MAX": {
            "name": "WOE_MAX",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "woe_max": []
            }
        }
    },
    "rocket-master/test/lable_encoding_test.py": {},
    "rocket-master/test/rocket_test_v2.py": {
        "main": {
            "name": "main",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "MyExecutor.feature_select": {
            "name": "feature_select",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "sub_train_set": [],
                "y": []
            }
        },
        "MyExecutor.judge_function_model": {
            "name": "judge_function_model",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "result": []
            }
        }
    },
    "rocket-master/test/test_cuda.py": {
        "vectorAdd": {
            "name": "vectorAdd",
            "location": 7,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "main": {
            "name": "main",
            "location": 10,
            "return": [],
            "arguments": {}
        }
    },
    "rocket-master/test/test_feature_importance.py": {},
    "rocket-master/test/test_gevent.py": {
        "test1": {
            "name": "test1",
            "location": 3,
            "return": [],
            "arguments": {}
        },
        "test2": {
            "name": "test2",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "rocket-master/test/test_gevent2.py": {
        "fake_get": {
            "name": "fake_get",
            "location": 11,
            "return": [],
            "arguments": {
                "url": []
            }
        }
    },
    "rocket-master/test/woe.py": {
        "WeightOfEvidence.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WeightOfEvidence._posibility": {
            "name": "_posibility",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "tag": [],
                "event": []
            }
        },
        "WeightOfEvidence.fit": {
            "name": "fit",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "WeightOfEvidence.transform": {
            "name": "transform",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "X": []
            }
        }
    },
    "rocket-master/test/__init__.py": {},
    "rocket-master/test/binningpy-master/setup.py": {},
    "rocket-master/test/binningpy-master/binningpy/base.py": {
        "BinningBase.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bin_nbr": [
                    "int"
                ],
                "confined": [
                    "bool"
                ],
                "copy": [
                    "bool"
                ]
            }
        },
        "BinningBase._transform_item": {
            "name": "_transform_item",
            "location": 37,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "item": [],
                "features_line": []
            }
        },
        "BinningBase._transform": {
            "name": "_transform",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "features_line": []
            }
        },
        "BinningBase.transform": {
            "name": "transform",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "BinningBase._inverse_transform_item": {
            "name": "_inverse_transform_item",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "item": [],
                "features_line": []
            }
        },
        "BinningBase._inverse_transform": {
            "name": "_inverse_transform",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "features_line": []
            }
        },
        "BinningBase.inverse_transform": {
            "name": "inverse_transform",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "BinningBase.fit": {
            "name": "fit",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "y": []
            }
        }
    },
    "rocket-master/test/binningpy-master/binningpy/__init__.py": {},
    "rocket-master/test/binningpy-master/binningpy/supervised/chi_merge.py": {},
    "rocket-master/test/binningpy-master/binningpy/supervised/minimum_entropy.py": {},
    "rocket-master/test/binningpy-master/binningpy/supervised/__init__.py": {},
    "rocket-master/test/binningpy-master/binningpy/unsupervised/constant_frequency.py": {},
    "rocket-master/test/binningpy-master/binningpy/unsupervised/constant_width.py": {
        "ConstantWidthBinning._reset": {
            "name": "_reset",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConstantWidthBinning.fit": {
            "name": "fit",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "y": []
            }
        },
        "ConstantWidthBinning.partial_fit": {
            "name": "partial_fit",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "y": []
            }
        }
    },
    "rocket-master/test/binningpy-master/binningpy/unsupervised/__init__.py": {},
    "rocket-master/test/binningpy-master/test/test_base.py": {
        "setUpModule": {
            "name": "setUpModule",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "tearDownModule": {
            "name": "tearDownModule",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "BinningBase_suite": {
            "name": "BinningBase_suite",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "TestBinningBase.setUpClass": {
            "name": "setUpClass",
            "location": 26,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestBinningBase.tearDownClass": {
            "name": "tearDownClass",
            "location": 30,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestBinningBase.setUp": {
            "name": "setUp",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinningBase.tearDown": {
            "name": "tearDown",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinningBase.test_BinningBase_init": {
            "name": "test_BinningBase_init",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinningBase.test_confined_transform": {
            "name": "test_confined_transform",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinningBase.test_unconfined_transform": {
            "name": "test_unconfined_transform",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rocket-master/test/binningpy-master/test/test_constant_width.py": {
        "setUpModule": {
            "name": "setUpModule",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "tearDownModule": {
            "name": "tearDownModule",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "BinningBase_suite": {
            "name": "BinningBase_suite",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "TestConstantWidthBinning.setUpClass": {
            "name": "setUpClass",
            "location": 26,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestConstantWidthBinning.tearDownClass": {
            "name": "tearDownClass",
            "location": 30,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestConstantWidthBinning.setUp": {
            "name": "setUp",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConstantWidthBinning.tearDown": {
            "name": "tearDown",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConstantWidthBinning.test_confined_transform": {
            "name": "test_confined_transform",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rocket-master/test/binningpy-master/test/__init__.py": {
        "setUpModule": {
            "name": "setUpModule",
            "location": 2,
            "return": [],
            "arguments": {}
        },
        "tearDownModule": {
            "name": "tearDownModule",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "rocket-master/test/woe/__init__.py": {},
    "rocket-master/tools/mylogger.py": {},
    "rocket-master/tools/__init__.py": {}
}
{
    "sb-vision-master/setup.py": {},
    "sb-vision-master/sb_vision/camera.py": {
        "Camera.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device_id": [
                    "int"
                ],
                "proposed_image_size": [
                    "Tuple[(int, int)]"
                ],
                "camera_model": [
                    "Optional[str]"
                ]
            }
        },
        "Camera.init": {
            "name": "init",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Camera._init_camera": {
            "name": "_init_camera",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Camera._deinit_camera": {
            "name": "_deinit_camera",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Camera.__del__": {
            "name": "__del__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Camera.get_image_size": {
            "name": "get_image_size",
            "location": 53,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Camera.capture_image": {
            "name": "capture_image",
            "location": 61,
            "return": [
                "Image"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileCamera.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "_PathLike"
                ],
                "camera_model": [
                    "Optional[str]"
                ]
            }
        },
        "FileCamera.init": {
            "name": "init",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileCamera.get_image_size": {
            "name": "get_image_size",
            "location": 89,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileCamera.capture_image": {
            "name": "capture_image",
            "location": 97,
            "return": [
                "Image"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sb-vision-master/sb_vision/camera_base.py": {
        "CameraBase.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "camera_model": [
                    "Optional[str]"
                ]
            }
        },
        "CameraBase.init": {
            "name": "init",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CameraBase.get_image_size": {
            "name": "get_image_size",
            "location": 29,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CameraBase.capture_image": {
            "name": "capture_image",
            "location": 34,
            "return": [
                "PIL.Image"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sb-vision-master/sb_vision/coordinates.py": {
        "cartesian_to_spherical": {
            "name": "cartesian_to_spherical",
            "location": 43,
            "return": [
                "Spherical"
            ],
            "arguments": {
                "cartesian": [
                    "Cartesian"
                ]
            }
        },
        "cartesian_to_legacy_polar": {
            "name": "cartesian_to_legacy_polar",
            "location": 53,
            "return": [
                "LegacyPolar"
            ],
            "arguments": {
                "cartesian": [
                    "Cartesian"
                ]
            }
        },
        "Cartesian.tolist": {
            "name": "tolist",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sb-vision-master/sb_vision/cv3d.py": {
        "_ffi_flattened_float_array": {
            "name": "_ffi_flattened_float_array",
            "location": 18,
            "return": [],
            "arguments": {
                "values": [
                    "Sequence[Sequence[float]]"
                ]
            }
        },
        "solve_pnp": {
            "name": "solve_pnp",
            "location": 37,
            "return": [
                "Tuple[(Cartesian, Tuple[(float, float, float)])]"
            ],
            "arguments": {
                "object_points": [
                    "Sequence[Sequence[float]]"
                ],
                "pixel_corners": [
                    "Sequence[PixelCoordinate]"
                ],
                "camera_matrix": [
                    "Sequence[Sequence[float]]"
                ],
                "distance_coefficients": [
                    "Sequence[Sequence[float]]"
                ]
            }
        }
    },
    "sb-vision-master/sb_vision/cvcapture.py": {
        "DeviceOpenError.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device_id": [
                    "int"
                ]
            }
        },
        "DeviceClosedError.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageCaptureError.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaptureDevice.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device_id": [
                    "int"
                ]
            }
        },
        "CaptureDevice.capture": {
            "name": "capture",
            "location": 57,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ]
            }
        },
        "CaptureDevice.__enter__": {
            "name": "__enter__",
            "location": 79,
            "return": [
                "'CaptureDevice'"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaptureDevice.__exit__": {
            "name": "__exit__",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "exc_value": [],
                "exc_type": [],
                "exc_traceback": []
            }
        },
        "CaptureDevice.close": {
            "name": "close",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sb-vision-master/sb_vision/find_3D_coords.py": {
        "_get_values_from_xml_element": {
            "name": "_get_values_from_xml_element",
            "location": 42,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "element": [
                    "etree.Element"
                ]
            }
        },
        "_find_element": {
            "name": "_find_element",
            "location": 52,
            "return": [
                "etree.Element"
            ],
            "arguments": {
                "root": [
                    "etree.Element"
                ],
                "descendant_name": [
                    "str"
                ]
            }
        },
        "_parse_matrix_xml_element": {
            "name": "_parse_matrix_xml_element",
            "location": 62,
            "return": [
                "List[List[np.float64]]"
            ],
            "arguments": {
                "element": [
                    "etree.Element"
                ]
            }
        },
        "_parse_tuple_xml_element": {
            "name": "_parse_tuple_xml_element",
            "location": 85,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "element": [
                    "etree.Element"
                ]
            }
        },
        "get_calibration": {
            "name": "get_calibration",
            "location": 94,
            "return": [
                "Tuple[(List[List[float]], List[List[float]], Tuple[(int, int)])]"
            ],
            "arguments": {
                "file_name": [
                    "Path"
                ]
            }
        },
        "load_camera_calibrations": {
            "name": "load_camera_calibrations",
            "location": 123,
            "return": [
                "Tuple[(List[List[float]], List[List[float]])]"
            ],
            "arguments": {
                "camera_model": [
                    "str"
                ],
                "image_size": [
                    "Tuple[(int, int)]"
                ]
            }
        },
        "calculate_transforms": {
            "name": "calculate_transforms",
            "location": 149,
            "return": [
                "Tuple[(Cartesian, Tuple[(float, float, float)])]"
            ],
            "arguments": {
                "marker_size": [
                    "Tuple[(float, float)]"
                ],
                "pixel_corners": [
                    "List[PixelCoordinate]"
                ],
                "camera_matrix": [
                    "List[List[float]]"
                ],
                "distance_coefficients": [
                    "List[List[float]]"
                ]
            }
        },
        "ResolutionMismatchError.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "camera_model": [
                    "str"
                ],
                "model_resolution": [
                    "Tuple[(int, int)]"
                ],
                "image_size": [
                    "Tuple[(int, int)]"
                ]
            }
        }
    },
    "sb-vision-master/sb_vision/game_specific.py": {},
    "sb-vision-master/sb_vision/tokens.py": {
        "Token.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int"
                ],
                "certainty": [
                    "float"
                ]
            }
        },
        "Token.from_apriltag_detection": {
            "name": "from_apriltag_detection",
            "location": 38,
            "return": [
                "'Token'"
            ],
            "arguments": {
                "cls": [],
                "apriltag_detection": [
                    "'ApriltagDetection'"
                ],
                "image_size": [
                    "Tuple[(int, int)]"
                ],
                "camera_model": [
                    "Optional[str]"
                ]
            }
        },
        "Token.update_pixel_coords": {
            "name": "update_pixel_coords",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Token.update_3D_transforms": {
            "name": "update_3D_transforms",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Token.__repr__": {
            "name": "__repr__",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.__eq__": {
            "name": "__eq__",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        }
    },
    "sb-vision-master/sb_vision/token_display.py": {
        "_draw_centered": {
            "name": "_draw_centered",
            "location": 9,
            "return": [],
            "arguments": {
                "pos": [],
                "text": [],
                "font": [],
                "color": [],
                "dr": []
            }
        },
        "display_tokens": {
            "name": "display_tokens",
            "location": 19,
            "return": [],
            "arguments": {
                "tokens": [],
                "image": []
            }
        }
    },
    "sb-vision-master/sb_vision/vision.py": {
        "Vision.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "camera": [
                    "CameraBase"
                ]
            }
        },
        "Vision.camera": {
            "name": "camera",
            "location": 23,
            "return": [
                "CameraBase"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vision.apriltag_detector": {
            "name": "apriltag_detector",
            "location": 37,
            "return": [
                "AprilTagDetector"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vision.capture_image": {
            "name": "capture_image",
            "location": 45,
            "return": [
                "Image.Image"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vision.process_image": {
            "name": "process_image",
            "location": 54,
            "return": [
                "List[Token]"
            ],
            "arguments": {
                "self": [],
                "img": [
                    "Image.Image"
                ]
            }
        },
        "Vision.snapshot": {
            "name": "snapshot",
            "location": 71,
            "return": [
                "List[Token]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sb-vision-master/sb_vision/__init__.py": {},
    "sb-vision-master/sb_vision/__main__.py": {},
    "sb-vision-master/sb_vision/cli/debug.py": {
        "_capture_and_display_image": {
            "name": "_capture_and_display_image",
            "location": 12,
            "return": [],
            "arguments": {
                "vision": [],
                "draw_tokens": [],
                "show_image": [],
                "output_file": []
            }
        },
        "main": {
            "name": "main",
            "location": 45,
            "return": [],
            "arguments": {
                "input_file": [],
                "device_id": [],
                "camera_model": []
            }
        },
        "add_arguments": {
            "name": "add_arguments",
            "location": 75,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "main.should_continue": {
            "name": "should_continue",
            "location": 64,
            "return": [],
            "arguments": {}
        }
    },
    "sb-vision-master/sb_vision/cli/summarise.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [],
            "arguments": {
                "files": [
                    "Sequence[pathlib.Path]"
                ],
                "camera_model": [
                    "str"
                ],
                "output": [
                    "TextIO"
                ]
            }
        },
        "add_arguments": {
            "name": "add_arguments",
            "location": 44,
            "return": [],
            "arguments": {
                "parser": []
            }
        }
    },
    "sb-vision-master/sb_vision/cli/__init__.py": {
        "add_subparser": {
            "name": "add_subparser",
            "location": 12,
            "return": [],
            "arguments": {
                "subparsers": [],
                "module": []
            }
        },
        "argument_parser": {
            "name": "argument_parser",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 33,
            "return": [],
            "arguments": {
                "args": []
            }
        }
    },
    "sb-vision-master/sb_vision/native/cv3d_build.py": {},
    "sb-vision-master/sb_vision/native/cvcapture_build.py": {},
    "sb-vision-master/sb_vision/native/__init__.py": {},
    "sb-vision-master/sb_vision/native/apriltag/apriltag_build.py": {},
    "sb-vision-master/sb_vision/native/apriltag/detector.py": {
        "AprilTagDetector.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_size": [
                    "Tuple[(int, int)]"
                ]
            }
        },
        "AprilTagDetector.__enter__": {
            "name": "__enter__",
            "location": 54,
            "return": [
                "'AprilTagDetector'"
            ],
            "arguments": {
                "self": []
            }
        },
        "AprilTagDetector.__exit__": {
            "name": "__exit__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Any"
                ],
                "exc_value": [
                    "Any"
                ],
                "traceback": [
                    "Any"
                ]
            }
        },
        "AprilTagDetector.__del__": {
            "name": "__del__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AprilTagDetector.close": {
            "name": "close",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AprilTagDetector._raise_if_already_closed": {
            "name": "_raise_if_already_closed",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AprilTagDetector.image_size": {
            "name": "image_size",
            "location": 82,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AprilTagDetector.detect_tags": {
            "name": "detect_tags",
            "location": 86,
            "return": [
                "Iterator['ApriltagDetection']"
            ],
            "arguments": {
                "self": [],
                "img": [
                    "Image"
                ]
            }
        }
    },
    "sb-vision-master/sb_vision/native/apriltag/lib.py": {
        "image_u8_create_stride": {
            "name": "image_u8_create_stride",
            "location": 11,
            "return": [
                "ImageU8"
            ],
            "arguments": {
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ],
                "stride": [
                    "int"
                ]
            }
        }
    },
    "sb-vision-master/sb_vision/native/apriltag/types.py": {},
    "sb-vision-master/sb_vision/native/apriltag/__init__.py": {},
    "sb-vision-master/tests/test_coordinates_from_file.py": {
        "test_image_coordinates": {
            "name": "test_image_coordinates",
            "location": 55,
            "return": [],
            "arguments": {
                "photo": [],
                "expected_cartesian": [],
                "expected_polar": [],
                "expected_spherical": []
            }
        },
        "test_image_coordinates.approx_dist": {
            "name": "approx_dist",
            "location": 61,
            "return": [],
            "arguments": {
                "expected": []
            }
        },
        "test_image_coordinates.approx_ang": {
            "name": "approx_ang",
            "location": 64,
            "return": [],
            "arguments": {
                "expected": []
            }
        }
    },
    "sb-vision-master/tests/test_coordinate_conversion.py": {
        "test_cartesian_to_spherical": {
            "name": "test_cartesian_to_spherical",
            "location": 86,
            "return": [],
            "arguments": {
                "cartesian": [],
                "spherical": []
            }
        }
    },
    "sb-vision-master/tests/test_imports.py": {
        "test_can_import_cvcapture": {
            "name": "test_can_import_cvcapture",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "sb-vision-master/tests/test_load_calibrations.py": {
        "test_rejects_mismatching_resolutions": {
            "name": "test_rejects_mismatching_resolutions",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "test_loading_config": {
            "name": "test_loading_config",
            "location": 26,
            "return": [],
            "arguments": {}
        }
    },
    "sb-vision-master/tests/test_marker_sizes.py": {
        "assertMarkerDistance": {
            "name": "assertMarkerDistance",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "camera": [
                    "CameraBase"
                ]
            }
        },
        "test_unknown_marker_size": {
            "name": "test_unknown_marker_size",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "test_large_marker_large_size": {
            "name": "test_large_marker_large_size",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "test_large_marker_small_size": {
            "name": "test_large_marker_small_size",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "test_small_marker_large_size": {
            "name": "test_small_marker_large_size",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "test_small_marker_small_size": {
            "name": "test_small_marker_small_size",
            "location": 78,
            "return": [],
            "arguments": {}
        }
    },
    "sb-vision-master/tests/test_recognition_from_file.py": {
        "test_recognises_markers": {
            "name": "test_recognises_markers",
            "location": 22,
            "return": [],
            "arguments": {
                "photo": [],
                "expected_tokens": []
            }
        }
    },
    "sb-vision-master/utils/capture_images.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 119,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "Stopwatch.print_duration": {
            "name": "print_duration",
            "location": 21,
            "return": [],
            "arguments": {
                "stopwatch": []
            }
        },
        "Stopwatch.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "on_stop": []
            }
        },
        "Stopwatch.__enter__": {
            "name": "__enter__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stopwatch.__exit__": {
            "name": "__exit__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_value": [],
                "traceback": []
            }
        },
        "Stopwatch.start": {
            "name": "start",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stopwatch.stop": {
            "name": "stop",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stopwatch.duration": {
            "name": "duration",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Resolution.from_argument": {
            "name": "from_argument",
            "location": 55,
            "return": [],
            "arguments": {
                "cls": [],
                "res": []
            }
        },
        "Resolution.from_string": {
            "name": "from_string",
            "location": 62,
            "return": [],
            "arguments": {
                "cls": [],
                "res": []
            }
        },
        "Resolution.__str__": {
            "name": "__str__",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    }
}
{
    "shromazdeni-master/setup.py": {},
    "shromazdeni-master/shromazdeni/business.py": {
        "log_command": {
            "name": "log_command",
            "location": 61,
            "return": [
                "F"
            ],
            "arguments": {
                "func": [
                    "F"
                ]
            }
        },
        "Person.__eq__": {
            "name": "__eq__",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Flat.sort_key": {
            "name": "sort_key",
            "location": 44,
            "return": [
                "Tuple[(int, ...)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Flat.nice_name": {
            "name": "nice_name",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandLogger.log": {
            "name": "log",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func_name": [
                    "str"
                ],
                "args": [
                    "Tuple"
                ]
            }
        },
        "log_command.wrapper": {
            "name": "wrapper",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [
                    "'Building'"
                ]
            }
        },
        "Building.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "flats": [
                    "List[Flat]"
                ]
            }
        },
        "Building.register_logger": {
            "name": "register_logger",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "CommandLogger"
                ]
            }
        },
        "Building.flats": {
            "name": "flats",
            "location": 84,
            "return": [
                "List[Flat]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Building.get_flat": {
            "name": "get_flat",
            "location": 87,
            "return": [
                "Flat"
            ],
            "arguments": {
                "self": [],
                "shortname": [
                    "str"
                ]
            }
        },
        "Building.percent_represented": {
            "name": "percent_represented",
            "location": 91,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Building.represent_flat": {
            "name": "represent_flat",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flat_name": [
                    "str"
                ],
                "person_name": [
                    "str"
                ]
            }
        },
        "Building.person_exists": {
            "name": "person_exists",
            "location": 99,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Building.add_person": {
            "name": "add_person",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Building.remove_flat_representative": {
            "name": "remove_flat_representative",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flat_name": [
                    "str"
                ]
            }
        },
        "Building._remove_flat_representative": {
            "name": "_remove_flat_representative",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flat_name": [
                    "str"
                ]
            }
        },
        "Building.remove_person": {
            "name": "remove_person",
            "location": 118,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Building.get_representative_flats": {
            "name": "get_representative_flats",
            "location": 125,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "person_name": [
                    "str"
                ]
            }
        },
        "Building.get_person_names": {
            "name": "get_person_names",
            "location": 132,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ]
            }
        },
        "Building.get_other_representatives": {
            "name": "get_other_representatives",
            "location": 135,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "person_name": [
                    "str"
                ]
            }
        }
    },
    "shromazdeni-master/shromazdeni/utils.py": {
        "_convert_flat": {
            "name": "_convert_flat",
            "location": 6,
            "return": [
                "business.Flat"
            ],
            "arguments": {
                "flat": [
                    "Dict"
                ],
                "shorten_name": [
                    "bool"
                ]
            }
        },
        "from_json_to_flats": {
            "name": "from_json_to_flats",
            "location": 31,
            "return": [
                "List[business.Flat]"
            ],
            "arguments": {
                "json_flats": [
                    "List"
                ]
            }
        },
        "from_owners_to_json": {
            "name": "from_owners_to_json",
            "location": 39,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "owners": [
                    "List[business.Owner]"
                ]
            }
        },
        "from_flats_to_json": {
            "name": "from_flats_to_json",
            "location": 43,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "flats": [
                    "List[business.Flat]"
                ]
            }
        },
        "format_persons": {
            "name": "format_persons",
            "location": 54,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "shromazdeni-master/shromazdeni/__init__.py": {},
    "shromazdeni-master/shromazdeni/__main__.py": {
        "setup_readline_if_available": {
            "name": "setup_readline_if_available",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "choice_from": {
            "name": "choice_from",
            "location": 28,
            "return": [
                "int"
            ],
            "arguments": {
                "title": [
                    "str"
                ],
                "choices": [
                    "List[str]"
                ],
                "stdout": [
                    "IO[str]"
                ]
            }
        },
        "confirm": {
            "name": "confirm",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "question": [
                    "str"
                ]
            }
        },
        "open_or_create_logfile": {
            "name": "open_or_create_logfile",
            "location": 269,
            "return": [
                "TextIO"
            ],
            "arguments": {
                "logfile": [
                    "TextIO"
                ],
                "model": [
                    "business.Building"
                ],
                "default_filename": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CommandLogger.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "logfile": [
                    "IO[str]"
                ]
            }
        },
        "CommandLogger.default_logname": {
            "name": "default_logname",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "flats_filename": [
                    "str"
                ]
            }
        },
        "CommandLogger.parse_logfile": {
            "name": "parse_logfile",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "logfile": [
                    "IO[str]"
                ],
                "model": [
                    "business.Building"
                ]
            }
        },
        "CommandLogger.create_logfile": {
            "name": "create_logfile",
            "location": 71,
            "return": [
                "TextIO"
            ],
            "arguments": {
                "filename": [
                    "Union[(str, pathlib.Path)]"
                ]
            }
        },
        "CommandLogger.log": {
            "name": "log",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func_name": [
                    "str"
                ],
                "args": [
                    "Tuple"
                ]
            }
        },
        "AppCmd.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "model": [
                    "business.Building"
                ],
                "completekey": [
                    "str"
                ],
                "stdin": [
                    "IO[str]"
                ],
                "stdout": [
                    "IO[str]"
                ]
            }
        },
        "AppCmd.set_prompt": {
            "name": "set_prompt",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppCmd.do_flat": {
            "name": "do_flat",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "str"
                ]
            }
        },
        "AppCmd.complete_flat": {
            "name": "complete_flat",
            "location": 121,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "line": [
                    "str"
                ],
                "beginx": [
                    "int"
                ],
                "endx": [
                    "int"
                ]
            }
        },
        "AppCmd._write_flat_owners": {
            "name": "_write_flat_owners",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flat": [
                    "business.Flat"
                ]
            }
        },
        "AppCmd.do_add": {
            "name": "do_add",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "str"
                ]
            }
        },
        "AppCmd._choose_person": {
            "name": "_choose_person",
            "location": 190,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "persons": [
                    "Set[str]"
                ]
            }
        },
        "AppCmd._remove_person": {
            "name": "_remove_person",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "person_name": [
                    "str"
                ]
            }
        },
        "AppCmd.do_remove": {
            "name": "do_remove",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "str"
                ]
            }
        },
        "AppCmd.complete_remove": {
            "name": "complete_remove",
            "location": 244,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "line": [
                    "str"
                ],
                "beginx": [
                    "int"
                ],
                "endx": [
                    "int"
                ]
            }
        },
        "AppCmd.do_presence": {
            "name": "do_presence",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "str"
                ]
            }
        },
        "AppCmd.do_quit": {
            "name": "do_quit",
            "location": 258,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "str"
                ]
            }
        }
    },
    "shromazdeni-master/shromazdeni/reports/presence.py": {
        "write_presence": {
            "name": "write_presence",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "building": [
                    "business.Building"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "write_signatures": {
            "name": "write_signatures",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "building": [
                    "business.Building"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "_write_presence": {
            "name": "_write_presence",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "building": [
                    "business.Building"
                ],
                "filename": [
                    "str"
                ],
                "kind": [
                    "ReportType"
                ]
            }
        }
    },
    "shromazdeni-master/shromazdeni/reports/utils.py": {
        "write_table": {
            "name": "write_table",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "fout": [
                    "IO[str]"
                ],
                "rows": [
                    "List"
                ],
                "header": [
                    "str"
                ],
                "fields": [
                    "List[Field]"
                ],
                "last_row": [
                    "Tuple"
                ]
            }
        },
        "convert_name": {
            "name": "convert_name",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "shromazdeni-master/shromazdeni/reports/__init__.py": {},
    "shromazdeni-master/shromazdeni/tools/crawler.py": {
        "parse_owners": {
            "name": "parse_owners",
            "location": 16,
            "return": [
                "List[Dict]"
            ],
            "arguments": {
                "response": [
                    "http.TextResponse"
                ]
            }
        },
        "download_building": {
            "name": "download_building",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ],
                "street": [
                    "str"
                ],
                "home_number": [
                    "str"
                ],
                "region": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "KatastrSpider.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "region": [
                    "str"
                ],
                "street": [
                    "str"
                ],
                "home_number": [
                    "str"
                ]
            }
        },
        "KatastrSpider.parse": {
            "name": "parse",
            "location": 51,
            "return": [
                "http.FormRequest"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "http.TextResponse"
                ]
            }
        },
        "KatastrSpider.parse_address": {
            "name": "parse_address",
            "location": 61,
            "return": [
                "http.FormRequest"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "http.TextResponse"
                ]
            }
        },
        "KatastrSpider.parse_building": {
            "name": "parse_building",
            "location": 77,
            "return": [
                "http.FormRequest"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "http.TextResponse"
                ]
            }
        },
        "KatastrSpider.parse_flat": {
            "name": "parse_flat",
            "location": 83,
            "return": [
                "http.FormRequest"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "http.TextResponse"
                ]
            }
        }
    },
    "shromazdeni-master/shromazdeni/tools/signatures.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "List[str]"
                ]
            }
        }
    },
    "shromazdeni-master/shromazdeni/tools/split.py": {
        "split_flats": {
            "name": "split_flats",
            "location": 11,
            "return": [
                "List[business.Flat]"
            ],
            "arguments": {
                "flats": [
                    "List[business.Flat]"
                ],
                "to_be_split": [
                    "Collection[str]"
                ]
            }
        },
        "validate_flat_names": {
            "name": "validate_flat_names",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser"
                ],
                "flats": [
                    "List[business.Flat]"
                ],
                "to_be_split": [
                    "Collection[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "List[str]"
                ]
            }
        }
    },
    "shromazdeni-master/shromazdeni/tools/__init__.py": {},
    "shromazdeni-master/tests/test_shromazdeni.py": {
        "simple_building": {
            "name": "simple_building",
            "location": 16,
            "return": [
                "business.Building"
            ],
            "arguments": {}
        },
        "building_with_one_owner": {
            "name": "building_with_one_owner",
            "location": 49,
            "return": [
                "business.Building"
            ],
            "arguments": {}
        },
        "create_flat": {
            "name": "create_flat",
            "location": 71,
            "return": [
                "business.Flat"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "represented": [
                    "business.Person"
                ]
            }
        },
        "test_flat_with_param": {
            "name": "test_flat_with_param",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_building": [
                    "business.Building"
                ]
            }
        },
        "test_flat_with_representation": {
            "name": "test_flat_with_representation",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_building": [
                    "business.Building"
                ]
            }
        },
        "test_flat_with_bad_param": {
            "name": "test_flat_with_bad_param",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_building": [
                    "business.Building"
                ]
            }
        },
        "test_flat_without_params": {
            "name": "test_flat_without_params",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_building": [
                    "business.Building"
                ]
            }
        },
        "test_complete_flat": {
            "name": "test_complete_flat",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_without_param": {
            "name": "test_add_without_param",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_building": [
                    "business.Building"
                ]
            }
        },
        "test_add_with_bad_param": {
            "name": "test_add_with_bad_param",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_building": [
                    "business.Building"
                ]
            }
        },
        "test_confirm_yes": {
            "name": "test_confirm_yes",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "MonkeyPatch"
                ]
            }
        },
        "test_confirm_no": {
            "name": "test_confirm_no",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "MonkeyPatch"
                ]
            }
        },
        "test_choice_from_invalid": {
            "name": "test_choice_from_invalid",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "MonkeyPatch"
                ],
                "choice": [
                    "str"
                ]
            }
        },
        "test_choice_from": {
            "name": "test_choice_from",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "MonkeyPatch"
                ]
            }
        },
        "test_add": {
            "name": "test_add",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_building": [
                    "business.Building"
                ],
                "monkeypatch": [
                    "MonkeyPatch"
                ]
            }
        },
        "test_add_new_person": {
            "name": "test_add_new_person",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_building": [
                    "business.Building"
                ],
                "monkeypatch": [
                    "MonkeyPatch"
                ]
            }
        },
        "test_add_ask_for_other_unit": {
            "name": "test_add_ask_for_other_unit",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "building_with_one_owner": [
                    "business.Building"
                ],
                "monkeypatch": [
                    "MonkeyPatch"
                ]
            }
        },
        "test_add_inform_about_extra_unit": {
            "name": "test_add_inform_about_extra_unit",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "building_with_one_owner": [
                    "business.Building"
                ],
                "monkeypatch": [
                    "MonkeyPatch"
                ]
            }
        },
        "test_complete_remove": {
            "name": "test_complete_remove",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_with_empty_args": {
            "name": "test_remove_with_empty_args",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_building": [
                    "business.Building"
                ]
            }
        },
        "test_remove_with_bad_args": {
            "name": "test_remove_with_bad_args",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_building": [
                    "business.Building"
                ]
            }
        },
        "test_remove_with_not_represented_flat": {
            "name": "test_remove_with_not_represented_flat",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_building": [
                    "business.Building"
                ]
            }
        },
        "test_remove_with_flat": {
            "name": "test_remove_with_flat",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_building": [
                    "business.Building"
                ]
            }
        },
        "test_remove_with_flat_person_represents_more_flats": {
            "name": "test_remove_with_flat_person_represents_more_flats",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_building": [
                    "business.Building"
                ]
            }
        },
        "test_remove_with_person": {
            "name": "test_remove_with_person",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_building": [
                    "business.Building"
                ]
            }
        },
        "test_default_log_name": {
            "name": "test_default_log_name",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_logfile": {
            "name": "test_parse_logfile",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_logfile": {
            "name": "test_create_logfile",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path"
                ]
            }
        },
        "fake_operation": {
            "name": "fake_operation",
            "location": 374,
            "return": [
                "int"
            ],
            "arguments": {
                "model": [
                    "business.Building"
                ],
                "a": [
                    "str"
                ],
                "b": [
                    "str"
                ]
            }
        },
        "test_log_command_decorator": {
            "name": "test_log_command_decorator",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_logger_log": {
            "name": "test_logger_log",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "shromazdeni-master/tests/test_signatures.py": {
        "test_signatures": {
            "name": "test_signatures",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "shromazdeni-master/tests/test_split.py": {
        "test_split": {
            "name": "test_split",
            "location": 16,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_invalid_flat": {
            "name": "test_invalid_flat",
            "location": 45,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        }
    },
    "shromazdeni-master/tests/test_utils.py": {
        "test_format_persons_single_person": {
            "name": "test_format_persons_single_person",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_format_persons_sjm": {
            "name": "test_format_persons_sjm",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_json": {
            "name": "test_load_json",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_json_shorten_names": {
            "name": "test_load_json_shorten_names",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
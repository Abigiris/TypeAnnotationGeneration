{
    "sif-master/examples/__init__.py": {},
    "sif-master/examples/greeter/client.py": {
        "main": {
            "name": "main",
            "location": 19,
            "return": [],
            "arguments": {}
        }
    },
    "sif-master/examples/greeter/deps.py": {
        "GreeterStub.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sif-master/examples/greeter/server.py": {
        "main": {
            "name": "main",
            "location": 19,
            "return": [],
            "arguments": {}
        }
    },
    "sif-master/examples/greeter/__init__.py": {},
    "sif-master/setups/sif.py": {},
    "sif-master/setups/sif_nats.py": {},
    "sif-master/setups/__init__.py": {},
    "sif-master/sif/data.py": {},
    "sif-master/sif/exceptions.py": {},
    "sif-master/sif/sif.py": {
        "Sif.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "str"
                ]
            }
        },
        "Sif.add_decl": {
            "name": "add_decl",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "decl": [
                    "Union[(RpcMethod, Subscription)]"
                ]
            }
        },
        "Sif.add_rpc_transport": {
            "name": "add_rpc_transport",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "transport": [
                    "RpcTransport"
                ]
            }
        },
        "Sif.add_pubsub_transport": {
            "name": "add_pubsub_transport",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "transport": [
                    "PubSubTransport"
                ]
            }
        },
        "Sif.add_subscriber": {
            "name": "add_subscriber",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "decl": [
                    "Subscription"
                ],
                "func": [
                    "ServiceMethod[(Any, Any)]"
                ]
            }
        },
        "Sif.add_rpc_method": {
            "name": "add_rpc_method",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "decl": [
                    "RpcMethod"
                ],
                "func": [
                    "ServiceMethod[(Any, Any)]"
                ]
            }
        },
        "Sif.create_rpc_call": {
            "name": "create_rpc_call",
            "location": 133,
            "return": [
                "RpcCall"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "str"
                ],
                "method": [
                    "str"
                ],
                "payload": [
                    "Any"
                ],
                "fut": [
                    "Optional[Future]"
                ]
            }
        },
        "Sif.create_event": {
            "name": "create_event",
            "location": 145,
            "return": [
                "Event"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "str"
                ],
                "topic": [
                    "str"
                ],
                "payload": [
                    "Any"
                ]
            }
        },
        "Sif.get_transport": {
            "name": "get_transport",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "decl": [
                    "Union[(RpcMethod, Subscription)]"
                ]
            }
        },
        "Sif.create_server": {
            "name": "create_server",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sif-master/sif/stub.py": {
        "Stub.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sif": []
            }
        },
        "Rpc.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stub": [
                    "Stub"
                ],
                "method": [
                    "str"
                ],
                "transport": [
                    "Union[(str, List[str])]"
                ],
                "req_serializer": [
                    "Optional[Serializer]"
                ],
                "req_deserializer": [
                    "Optional[Deserializer]"
                ],
                "resp_serializer": [
                    "Optional[Serializer]"
                ],
                "resp_deserializer": [
                    "Optional[Deserializer]"
                ]
            }
        },
        "Rpc.__call__": {
            "name": "__call__",
            "location": 46,
            "return": [
                "Awaitable[RpcRespPayload]"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "RpcReqPayload@@"
                ]
            }
        },
        "Rpc.listen": {
            "name": "listen",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "ServiceMethod[(RpcReqPayload, RpcRespPayload)]"
                ]
            }
        },
        "Sub.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stub": [
                    "Stub"
                ],
                "topic": [
                    "str"
                ],
                "transport": [
                    "Union[(str, List[str])]"
                ],
                "serializer": [
                    "Optional[Serializer]"
                ],
                "deserializer": [
                    "Optional[Deserializer]"
                ]
            }
        },
        "Sub.__call__": {
            "name": "__call__",
            "location": 88,
            "return": [
                "Awaitable[None]"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "EventPayload@@"
                ]
            }
        },
        "Sub.listen": {
            "name": "listen",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "func": [
                    "ServiceMethod[(EventPayload, None)]"
                ]
            }
        }
    },
    "sif-master/sif/transports.py": {
        "RpcTransport.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sif": [
                    "'Sif'"
                ]
            }
        },
        "RpcTransport.add_listener": {
            "name": "add_listener",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "decl": [
                    "RpcMethod"
                ]
            }
        },
        "RpcTransport.add_sender": {
            "name": "add_sender",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "decl": [
                    "RpcMethod"
                ]
            }
        },
        "PubSubTransport.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sif": [
                    "'Sif'"
                ]
            }
        },
        "PubSubTransport.add_listener": {
            "name": "add_listener",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "decl": [
                    "Subscription"
                ]
            }
        },
        "PubSubTransport.add_sender": {
            "name": "add_sender",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "decl": [
                    "Subscription"
                ]
            }
        }
    },
    "sif-master/sif/__init__.py": {},
    "sif-master/sif_nats/conn.py": {
        "Nats.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "NatsOpts"
                ]
            }
        }
    },
    "sif-master/sif_nats/data.py": {},
    "sif-master/sif_nats/rpc.py": {
        "decode_rpc_call": {
            "name": "decode_rpc_call",
            "location": 16,
            "return": [
                "RpcCall"
            ],
            "arguments": {
                "sif": [
                    "Sif"
                ],
                "payload": [
                    "bytes"
                ],
                "methods": [
                    "MethodsMap"
                ]
            }
        },
        "encode_rpc_response": {
            "name": "encode_rpc_response",
            "location": 40,
            "return": [
                "bytes"
            ],
            "arguments": {
                "payload": [
                    "Any"
                ],
                "status": [
                    "int"
                ],
                "decl": [
                    "RpcMethod"
                ]
            }
        },
        "encode_rpc_call": {
            "name": "encode_rpc_call",
            "location": 50,
            "return": [
                "bytes"
            ],
            "arguments": {
                "call": [
                    "RpcCall"
                ],
                "decl": [
                    "RpcMethod"
                ]
            }
        },
        "decode_rpc_response": {
            "name": "decode_rpc_response",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {
                "payload": [
                    "bytes"
                ],
                "decl": [
                    "RpcMethod"
                ]
            }
        },
        "SifNatsRpc.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sif": [
                    "Sif"
                ],
                "conn": [
                    "Nats"
                ]
            }
        }
    },
    "sif-master/sif_nats/__init__.py": {}
}
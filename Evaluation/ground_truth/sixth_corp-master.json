{
    "sixth_corp-master/src/app.py": {
        "clear_log": {
            "name": "clear_log",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "log_file": [
                    "str"
                ]
            }
        },
        "make_log": {
            "name": "make_log",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "log_file": [
                    "str"
                ]
            }
        },
        "initialize_logging": {
            "name": "initialize_logging",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sixth_corp-master/src/__init__.py": {},
    "sixth_corp-master/src/controllers/combat_scene_controller.py": {
        "CombatSceneController.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scene": [
                    "CombatScene"
                ]
            }
        },
        "CombatSceneController._notify": {
            "name": "_notify",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "EventType"
                ]
            }
        },
        "CombatSceneController._handle_input": {
            "name": "_handle_input",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_event": [
                    "InputEvent"
                ]
            }
        },
        "CombatSceneController._handle_mouse_click": {
            "name": "_handle_mouse_click",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_event": [
                    "InputEvent"
                ]
            }
        }
    },
    "sixth_corp-master/src/controllers/controller.py": {
        "Controller.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.activate": {
            "name": "activate",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.deactivate": {
            "name": "deactivate",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller._notify": {
            "name": "_notify",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "EventType"
                ]
            }
        },
        "Controller.notify": {
            "name": "notify",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "EventType"
                ]
            }
        }
    },
    "sixth_corp-master/src/controllers/controller_factory.py": {
        "build_controller": {
            "name": "build_controller",
            "location": 15,
            "return": [
                "Controller"
            ],
            "arguments": {
                "scene": [
                    "Scene"
                ]
            }
        }
    },
    "sixth_corp-master/src/controllers/decision_scene_controller.py": {
        "DecisionSceneController.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scene": [
                    "DecisionScene"
                ]
            }
        },
        "DecisionSceneController._notify": {
            "name": "_notify",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "EventType"
                ]
            }
        }
    },
    "sixth_corp-master/src/controllers/game.py": {
        "initialize_pygame": {
            "name": "initialize_pygame",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "no_UI": [
                    "bool"
                ]
            }
        },
        "Game.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.notify": {
            "name": "notify",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "EventType"
                ]
            }
        },
        "Game.run": {
            "name": "run",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scene_loader": [
                    "Callable[([], Scene)]"
                ]
            }
        }
    },
    "sixth_corp-master/src/controllers/inventory_controller.py": {
        "InventoryController.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scene": [
                    "InventoryScene"
                ]
            }
        },
        "InventoryController._notify": {
            "name": "_notify",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "EventType"
                ]
            }
        },
        "InventoryController._handle_mouse_click": {
            "name": "_handle_mouse_click",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "InputEvent"
                ]
            }
        }
    },
    "sixth_corp-master/src/controllers/keyboard.py": {
        "Keyboard.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keyboard.notify": {
            "name": "notify",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "EventType"
                ]
            }
        },
        "Keyboard.handle_inputs": {
            "name": "handle_inputs",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keyboard.handle_keypress": {
            "name": "handle_keypress",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key_name": [
                    "str"
                ]
            }
        },
        "Keyboard.handle_mouse_click": {
            "name": "handle_mouse_click",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keyboard.mouse_event": {
            "name": "mouse_event",
            "location": 45,
            "return": [
                "InputEvent"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keyboard.mouse_pos": {
            "name": "mouse_pos",
            "location": 49,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keyboard.get_binding": {
            "name": "get_binding",
            "location": 52,
            "return": [
                "EventType"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Keyboard.post_bound_event": {
            "name": "post_bound_event",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Keyboard.get_pygame_events": {
            "name": "get_pygame_events",
            "location": 59,
            "return": [
                "List[pygame.event.EventType]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keyboard.is_quit_event": {
            "name": "is_quit_event",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pg_event": [
                    "pygame.event.EventType"
                ]
            }
        }
    },
    "sixth_corp-master/src/controllers/scene_machine.py": {
        "SceneMachine.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SceneMachine.notify": {
            "name": "notify",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "EventType"
                ]
            }
        },
        "SceneMachine.controller": {
            "name": "controller",
            "location": 70,
            "return": [
                "Controller"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sixth_corp-master/src/controllers/settings_controller.py": {
        "SettingsController.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingsController._notify": {
            "name": "_notify",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "EventType"
                ]
            }
        }
    },
    "sixth_corp-master/src/controllers/__init__.py": {},
    "sixth_corp-master/src/controllers/tests/combat_scene_controller_test.py": {
        "_create_enemy": {
            "name": "_create_enemy",
            "location": 15,
            "return": [
                "Character"
            ],
            "arguments": {
                "health": [
                    "int"
                ]
            }
        },
        "_create_combat_controller": {
            "name": "_create_combat_controller",
            "location": 21,
            "return": [
                "CombatSceneController"
            ],
            "arguments": {
                "enemy": []
            }
        },
        "test_game_over": {
            "name": "test_game_over",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "test_selected_enemy": {
            "name": "test_selected_enemy",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "test_enemy_unselected_after_move": {
            "name": "test_enemy_unselected_after_move",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "test_reclick_unselects": {
            "name": "test_reclick_unselects",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "test_click_nothing_selects_nothing": {
            "name": "test_click_nothing_selects_nothing",
            "location": 75,
            "return": [],
            "arguments": {}
        }
    },
    "sixth_corp-master/src/controllers/tests/keyboard_test.py": {
        "setup_module": {
            "name": "setup_module",
            "location": 17,
            "return": [],
            "arguments": {
                "module": []
            }
        },
        "BasicListener.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BasicListener.notify": {
            "name": "notify",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "EventType"
                ]
            }
        },
        "KeyboardTest.setUp": {
            "name": "setUp",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyboardTest.test_quit": {
            "name": "test_quit",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyboardTest.test_unbound_key_posts_input_event": {
            "name": "test_unbound_key_posts_input_event",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyboardTest.test_bound_key_posts_bound_event": {
            "name": "test_bound_key_posts_bound_event",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyboardTest.test_mouse_click_posts_mouse_event": {
            "name": "test_mouse_click_posts_mouse_event",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sixth_corp-master/src/controllers/tests/scene_machine_test.py": {
        "test_toggle_settings": {
            "name": "test_toggle_settings",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_toggler_settings_then_inventory_stays_settings": {
            "name": "test_toggler_settings_then_inventory_stays_settings",
            "location": 27,
            "return": [],
            "arguments": {}
        }
    },
    "sixth_corp-master/src/controllers/tests/__init__.py": {},
    "sixth_corp-master/src/data/colors.py": {},
    "sixth_corp-master/src/data/constants.py": {
        "BackgroundImages.path": {
            "name": "path",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sixth_corp-master/src/data/keybindings.py": {
        "Keybindings.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keybindings.load": {
            "name": "load",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keybindings.save": {
            "name": "save",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keybindings.update_binding": {
            "name": "update_binding",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "event": [
                    "BasicEvents"
                ]
            }
        },
        "Keybindings.event_for_key": {
            "name": "event_for_key",
            "location": 68,
            "return": [
                "EventType"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Keybindings.keys_for_event": {
            "name": "keys_for_event",
            "location": 71,
            "return": [
                "Tuple[(str, ...)]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "BasicEvents"
                ]
            }
        },
        "Keybindings.__str__": {
            "name": "__str__",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sixth_corp-master/src/data/__init__.py": {},
    "sixth_corp-master/src/data/tests/keybindings_test.py": {
        "KeybindingsTest.default_binding": {
            "name": "default_binding",
            "location": 17,
            "return": [
                "Dict[(str, BasicEvents)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeybindingsTest.load_bindings": {
            "name": "load_bindings",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bindings": [
                    "Dict[(str, BasicEvents)]"
                ]
            }
        },
        "KeybindingsTest.test_load_settings": {
            "name": "test_load_settings",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeybindingsTest.test_save_settings": {
            "name": "test_save_settings",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeybindingsTest.test_update_settings": {
            "name": "test_update_settings",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeybindingsTest.test_inverse_binding": {
            "name": "test_inverse_binding",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeybindingsTest.test_inverse_binding_no_keys": {
            "name": "test_inverse_binding_no_keys",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeybindingsTest.test_update_settings_are_saved": {
            "name": "test_update_settings_are_saved",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sixth_corp-master/src/data/tests/__init__.py": {},
    "sixth_corp-master/src/events/events_base.py": {
        "BasicEvents.__eq__": {
            "name": "__eq__",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "BasicEvents.__str__": {
            "name": "__str__",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewSceneEvent.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scene": [
                    "Scene"
                ]
            }
        },
        "NewSceneEvent.__str__": {
            "name": "__str__",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputEvent.__str__": {
            "name": "__str__",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoveExecutedEvent.__str__": {
            "name": "__str__",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ControllerActivatedEvent.__str__": {
            "name": "__str__",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectPlayerMoveEvent.__str__": {
            "name": "__str__",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventManager.register": {
            "name": "register",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "l": [
                    "'EventListener'"
                ]
            }
        },
        "EventManager.post": {
            "name": "post",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "event": [
                    "EventType"
                ]
            }
        },
        "EventListener.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventListener.notify": {
            "name": "notify",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "EventType"
                ]
            }
        }
    },
    "sixth_corp-master/src/events/event_utils.py": {
        "simulate_mouse_click": {
            "name": "simulate_mouse_click",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "simulate_key_press": {
            "name": "simulate_key_press",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "key_name": [
                    "str"
                ]
            }
        },
        "post_scene_change": {
            "name": "post_scene_change",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "new_scene": [
                    "Scene"
                ]
            }
        }
    },
    "sixth_corp-master/src/events/__init__.py": {},
    "sixth_corp-master/src/events/tests/integration_test.py": {
        "setup_module": {
            "name": "setup_module",
            "location": 32,
            "return": [],
            "arguments": {
                "module": []
            }
        },
        "teardown_module": {
            "name": "teardown_module",
            "location": 46,
            "return": [],
            "arguments": {
                "module": []
            }
        },
        "_get_active_controller": {
            "name": "_get_active_controller",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "test_making_choices_removes_listener": {
            "name": "test_making_choices_removes_listener",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "test_press_debug_in_decision_scene_has_no_effect": {
            "name": "test_press_debug_in_decision_scene_has_no_effect",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "_one_health_enemy": {
            "name": "_one_health_enemy",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "test_combat_scene_to_decision_scene": {
            "name": "test_combat_scene_to_decision_scene",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "_typical_mods": {
            "name": "_typical_mods",
            "location": 161,
            "return": [
                "List[Mod]"
            ],
            "arguments": {
                "locations": [
                    "Iterable[SlotTypes]"
                ]
            }
        },
        "_get_current_scene": {
            "name": "_get_current_scene",
            "location": 173,
            "return": [
                "Scene"
            ],
            "arguments": {}
        },
        "_slot_header_position": {
            "name": "_slot_header_position",
            "location": 179,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "slot": [
                    "SlotTypes"
                ],
                "scene": [
                    "InventoryScene"
                ]
            }
        },
        "_mod_slot_position": {
            "name": "_mod_slot_position",
            "location": 193,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "mod": [
                    "Mod"
                ],
                "scene": [
                    "InventoryScene"
                ]
            }
        },
        "test_inventory_scene_control_flow": {
            "name": "test_inventory_scene_control_flow",
            "location": 202,
            "return": [],
            "arguments": {}
        },
        "test_combat_scene_to_decision_scene.dummy_scene": {
            "name": "dummy_scene",
            "location": 112,
            "return": [],
            "arguments": {}
        },
        "test_inventory_scene_control_flow.start_scene": {
            "name": "start_scene",
            "location": 216,
            "return": [
                "DecisionScene"
            ],
            "arguments": {}
        }
    },
    "sixth_corp-master/src/events/tests/listeners_test.py": {
        "test_initializing_game_adds_listeners": {
            "name": "test_initializing_game_adds_listeners",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "test_changing_scenes_removes_previous_listener": {
            "name": "test_changing_scenes_removes_previous_listener",
            "location": 23,
            "return": [],
            "arguments": {}
        }
    },
    "sixth_corp-master/src/events/tests/__init__.py": {},
    "sixth_corp-master/src/models/__init__.py": {},
    "sixth_corp-master/src/models/characters/ai_base.py": {
        "AI.select_move": {
            "name": "select_move",
            "location": 14,
            "return": [
                "Move"
            ],
            "arguments": {
                "self": [],
                "targets": [
                    "Sequence['Character']"
                ]
            }
        },
        "AI.set_user": {
            "name": "set_user",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "'Character'"
                ]
            }
        }
    },
    "sixth_corp-master/src/models/characters/character_base.py": {
        "Character.ai": {
            "name": "ai",
            "location": 18,
            "return": [
                "'AI'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Character.image_path": {
            "name": "image_path",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Character.chassis": {
            "name": "chassis",
            "location": 28,
            "return": [
                "'Chassis'"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sixth_corp-master/src/models/characters/character_examples.py": {
        "CharacterTypes.data": {
            "name": "data",
            "location": 40,
            "return": [
                "CharacterData"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sixth_corp-master/src/models/characters/character_impl.py": {
        "build_character": {
            "name": "build_character",
            "location": 105,
            "return": [
                "_CharacterImpl"
            ],
            "arguments": {
                "chassis": [
                    "Chassis"
                ],
                "ai_type": [
                    "AIType"
                ],
                "mods": [
                    "Iterable[Mod]"
                ],
                "name": [
                    "str"
                ],
                "image_path": [
                    "str"
                ],
                "data": [
                    "CharacterData"
                ]
            }
        },
        "_CharacterImpl.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chassis": [
                    "Chassis"
                ],
                "ai": [
                    "AI"
                ],
                "image_path": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "_CharacterImpl.status": {
            "name": "status",
            "location": 36,
            "return": [
                "Status"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CharacterImpl.chassis": {
            "name": "chassis",
            "location": 40,
            "return": [
                "Chassis"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CharacterImpl.image_path": {
            "name": "image_path",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CharacterImpl.ai": {
            "name": "ai",
            "location": 48,
            "return": [
                "AI"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CharacterImpl.__repr__": {
            "name": "__repr__",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CharacterImpl.description": {
            "name": "description",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CombinedStatus.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inventory": [
                    "InventoryBase"
                ]
            }
        },
        "_CombinedStatus.has_state": {
            "name": "has_state",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "State"
                ]
            }
        },
        "_CombinedStatus.set_state": {
            "name": "set_state",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "State"
                ],
                "value": [
                    "bool"
                ]
            }
        },
        "_CombinedStatus.get_attribute": {
            "name": "get_attribute",
            "location": 86,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "AttributeType"
                ]
            }
        },
        "_CombinedStatus.increment_attribute": {
            "name": "increment_attribute",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "AttributeType"
                ],
                "delta": [
                    "int"
                ]
            }
        },
        "_CombinedStatus.add_status_effect": {
            "name": "add_status_effect",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "effect": [
                    "StatusEffect"
                ]
            }
        },
        "_CombinedStatus.remove_status_effect": {
            "name": "remove_status_effect",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "effect": [
                    "StatusEffect"
                ]
            }
        },
        "_CombinedStatus.active_effects": {
            "name": "active_effects",
            "location": 100,
            "return": [
                "Sequence[StatusEffect]"
            ],
            "arguments": {
                "self": [],
                "check": [
                    "Callable[([StatusEffect], bool)]"
                ]
            }
        }
    },
    "sixth_corp-master/src/models/characters/chassis.py": {
        "Chassis.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "slot_capacities": [
                    "Dict[(SlotTypes, int)]"
                ],
                "base_mod": [
                    "Mod"
                ]
            }
        },
        "Chassis.from_data": {
            "name": "from_data",
            "location": 32,
            "return": [
                "'Chassis'"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "'ChassisData'"
                ]
            }
        },
        "Chassis.slot_capacities": {
            "name": "slot_capacities",
            "location": 38,
            "return": [
                "Dict[(SlotTypes, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chassis.mods_in_slot": {
            "name": "mods_in_slot",
            "location": 41,
            "return": [
                "Tuple[(Mod, ...)]"
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "SlotTypes"
                ]
            }
        },
        "Chassis.transfer_mod": {
            "name": "transfer_mod",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mod": [
                    "Mod"
                ],
                "target_slot": [
                    "SlotTypes"
                ]
            }
        },
        "Chassis.can_store": {
            "name": "can_store",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "mod": [
                    "Mod"
                ]
            }
        },
        "Chassis.slot_full": {
            "name": "slot_full",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "SlotTypes"
                ]
            }
        },
        "Chassis.remove_mod": {
            "name": "remove_mod",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mod": [
                    "Mod"
                ]
            }
        },
        "Chassis.all_mods": {
            "name": "all_mods",
            "location": 82,
            "return": [
                "Iterable[Mod]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chassis.all_active_mods": {
            "name": "all_active_mods",
            "location": 85,
            "return": [
                "Iterable[Mod]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chassis._all_mods": {
            "name": "_all_mods",
            "location": 88,
            "return": [
                "Iterable[Mod]"
            ],
            "arguments": {
                "self": [],
                "active_only": [
                    "bool"
                ]
            }
        },
        "Chassis._open_slots": {
            "name": "_open_slots",
            "location": 100,
            "return": [
                "List[SlotTypes]"
            ],
            "arguments": {
                "self": [],
                "slots": [
                    "Iterable[SlotTypes]"
                ]
            }
        },
        "Chassis._slot_vacant": {
            "name": "_slot_vacant",
            "location": 103,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "SlotTypes"
                ]
            }
        },
        "Chassis._store": {
            "name": "_store",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mod": [
                    "Mod"
                ]
            }
        }
    },
    "sixth_corp-master/src/models/characters/chassis_examples.py": {
        "ChassisTypes.data": {
            "name": "data",
            "location": 49,
            "return": [
                "ChassisData"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChassisTypes.__str__": {
            "name": "__str__",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sixth_corp-master/src/models/characters/conditions.py": {
        "status_condition": {
            "name": "status_condition",
            "location": 39,
            "return": [
                "StatusCondition"
            ],
            "arguments": {
                "bool_fun": [
                    "Callable[([Stateful], bool)]"
                ]
            }
        },
        "_is_hurt": {
            "name": "_is_hurt",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "target": [
                    "Stateful"
                ]
            }
        },
        "_StatusConditionImpl.__call__": {
            "name": "__call__",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Stateful"
                ]
            }
        },
        "_StatusConditionImpl.__and__": {
            "name": "__and__",
            "location": 18,
            "return": [
                "'StatusCondition'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "_StatusConditionImpl.__or__": {
            "name": "__or__",
            "location": 23,
            "return": [
                "'StatusCondition'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "_StatusConditionImpl.__invert__": {
            "name": "__invert__",
            "location": 29,
            "return": [
                "'StatusCondition'"
            ],
            "arguments": {
                "self": []
            }
        },
        "_StatusConditionImpl.__invert__.not_self": {
            "name": "not_self",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "target": [
                    "Stateful"
                ]
            }
        }
    },
    "sixth_corp-master/src/models/characters/inventory.py": {
        "_subroutine_stats": {
            "name": "_subroutine_stats",
            "location": 11,
            "return": [
                "Tuple[(int, int, str)]"
            ],
            "arguments": {
                "subroutine": [
                    "Subroutine"
                ]
            }
        },
        "InventoryBase.can_store": {
            "name": "can_store",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "mod": [
                    "Mod"
                ]
            }
        },
        "InventoryBase._store": {
            "name": "_store",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mod": [
                    "Mod"
                ]
            }
        },
        "InventoryBase.attempt_store": {
            "name": "attempt_store",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mod": [
                    "Mod"
                ]
            }
        },
        "InventoryBase.remove_mod": {
            "name": "remove_mod",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mod": [
                    "Mod"
                ]
            }
        },
        "InventoryBase.all_mods": {
            "name": "all_mods",
            "location": 44,
            "return": [
                "Iterable[Mod]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryBase.all_active_mods": {
            "name": "all_active_mods",
            "location": 48,
            "return": [
                "Iterable[Mod]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryBase.mods": {
            "name": "mods",
            "location": 51,
            "return": [
                "Iterable[Mod]"
            ],
            "arguments": {
                "self": [],
                "check": [
                    "Callable[([Mod], bool)]"
                ],
                "active_only": [
                    "bool"
                ]
            }
        },
        "InventoryBase.grants_state": {
            "name": "grants_state",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "State"
                ]
            }
        },
        "InventoryBase.total_modifier": {
            "name": "total_modifier",
            "location": 61,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "AttributeType"
                ]
            }
        },
        "InventoryBase.all_subroutines": {
            "name": "all_subroutines",
            "location": 65,
            "return": [
                "Sequence[Subroutine]"
            ],
            "arguments": {
                "self": [],
                "active_only": [
                    "bool"
                ]
            }
        },
        "BasicInventory.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicInventory.can_store": {
            "name": "can_store",
            "location": 95,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "mod": [
                    "Mod"
                ]
            }
        },
        "BasicInventory._store": {
            "name": "_store",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mod": [
                    "Mod"
                ]
            }
        },
        "BasicInventory.remove_mod": {
            "name": "remove_mod",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mod": [
                    "Mod"
                ]
            }
        },
        "BasicInventory.all_mods": {
            "name": "all_mods",
            "location": 105,
            "return": [
                "Iterable[Mod]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sixth_corp-master/src/models/characters/mods_base.py": {
        "build_mod": {
            "name": "build_mod",
            "location": 118,
            "return": [
                "Mod"
            ],
            "arguments": {
                "states_granted": [
                    "Union[(State, Sequence[State])]"
                ],
                "attribute_modifiers": [
                    "Dict[(AttributeType, int)]"
                ],
                "subroutines_granted": [
                    "_SubsType"
                ],
                "valid_slots": [
                    "Union[(SlotTypes, Sequence[SlotTypes])]"
                ],
                "description": [
                    "str"
                ],
                "data": [
                    "ModData"
                ]
            }
        },
        "Mod.description": {
            "name": "description",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mod.states_granted": {
            "name": "states_granted",
            "location": 27,
            "return": [
                "Sequence[State]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mod.attribute_modifiers": {
            "name": "attribute_modifiers",
            "location": 31,
            "return": [
                "Dict[(AttributeType, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mod.subroutines_granted": {
            "name": "subroutines_granted",
            "location": 35,
            "return": [
                "Sequence[Subroutine]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mod._valid_slots": {
            "name": "_valid_slots",
            "location": 39,
            "return": [
                "Set[SlotTypes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mod.valid_slots": {
            "name": "valid_slots",
            "location": 42,
            "return": [
                "List[SlotTypes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mod.__str__": {
            "name": "__str__",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ModImpl.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "states_granted": [
                    "Tuple[(State, ...)]"
                ],
                "attribute_modifiers": [
                    "Dict[(AttributeType, int)]"
                ],
                "subroutines_granted": [
                    "Tuple[(Subroutine, ...)]"
                ],
                "valid_slots": [
                    "Tuple[(SlotTypes, ...)]"
                ],
                "description": [
                    "str"
                ]
            }
        },
        "_ModImpl.states_granted": {
            "name": "states_granted",
            "location": 91,
            "return": [
                "Sequence[State]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ModImpl.attribute_modifiers": {
            "name": "attribute_modifiers",
            "location": 94,
            "return": [
                "Dict[(AttributeType, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ModImpl.subroutines_granted": {
            "name": "subroutines_granted",
            "location": 97,
            "return": [
                "Sequence[Subroutine]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ModImpl.description": {
            "name": "description",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ModImpl._valid_slots": {
            "name": "_valid_slots",
            "location": 103,
            "return": [
                "Set[SlotTypes]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sixth_corp-master/src/models/characters/mod_examples.py": {
        "ModTypes.data": {
            "name": "data",
            "location": 24,
            "return": [
                "ModData"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sixth_corp-master/src/models/characters/moves_base.py": {
        "Move.execute": {
            "name": "execute",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Move.description": {
            "name": "description",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Move.is_usable": {
            "name": "is_usable",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Move.__str__": {
            "name": "__str__",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Move.__repr__": {
            "name": "__repr__",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sixth_corp-master/src/models/characters/player.py": {
        "_build_player_char": {
            "name": "_build_player_char",
            "location": 8,
            "return": [
                "Character"
            ],
            "arguments": {}
        },
        "get_player": {
            "name": "get_player",
            "location": 20,
            "return": [
                "Character"
            ],
            "arguments": {}
        },
        "reset_player": {
            "name": "reset_player",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sixth_corp-master/src/models/characters/states.py": {
        "State.__str__": {
            "name": "__str__",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attributes.__str__": {
            "name": "__str__",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attributes.is_permanent": {
            "name": "is_permanent",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusEffect.build": {
            "name": "build",
            "location": 85,
            "return": [
                "'StatusEffect'"
            ],
            "arguments": {
                "cls": [],
                "label": [
                    "str"
                ],
                "states_granted": [
                    "Union[(State, Iterable[State])]"
                ],
                "states_prevented": [
                    "Union[(State, Iterable[State])]"
                ],
                "attribute_modifiers": [
                    "Dict[(AttributeType, int)]"
                ]
            }
        },
        "Status.has_state": {
            "name": "has_state",
            "location": 118,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "State"
                ]
            }
        },
        "Status.set_state": {
            "name": "set_state",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "State"
                ],
                "value": [
                    "bool"
                ]
            }
        },
        "Status.get_attribute": {
            "name": "get_attribute",
            "location": 128,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "AttributeType"
                ]
            }
        },
        "Status.increment_attribute": {
            "name": "increment_attribute",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "AttributeType"
                ],
                "delta": [
                    "int"
                ]
            }
        },
        "Status.add_status_effect": {
            "name": "add_status_effect",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "effect": [
                    "StatusEffect"
                ]
            }
        },
        "Status.remove_status_effect": {
            "name": "remove_status_effect",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "effect": [
                    "StatusEffect"
                ]
            }
        },
        "Status.active_effects": {
            "name": "active_effects",
            "location": 149,
            "return": [
                "Sequence[StatusEffect]"
            ],
            "arguments": {
                "self": [],
                "check": [
                    "Callable[([StatusEffect], bool)]"
                ]
            }
        },
        "Stateful.status": {
            "name": "status",
            "location": 162,
            "return": [
                "Status"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stateful.description": {
            "name": "description",
            "location": 166,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sixth_corp-master/src/models/characters/status.py": {
        "BasicStatus.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicStatus.has_state": {
            "name": "has_state",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "State"
                ]
            }
        },
        "BasicStatus.set_state": {
            "name": "set_state",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "State"
                ],
                "value": [
                    "bool"
                ]
            }
        },
        "BasicStatus.get_attribute": {
            "name": "get_attribute",
            "location": 50,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "AttributeType"
                ]
            }
        },
        "BasicStatus.set_attribute_bounds": {
            "name": "set_attribute_bounds",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "AttributeType"
                ],
                "lower": [
                    "_BoundType"
                ],
                "upper": [
                    "_BoundType"
                ]
            }
        },
        "BasicStatus._parse_bound": {
            "name": "_parse_bound",
            "location": 75,
            "return": [
                "_BoundFun"
            ],
            "arguments": {
                "self": [],
                "bound": [
                    "_BoundType"
                ],
                "is_lower": [
                    "bool"
                ]
            }
        },
        "BasicStatus.value_in_bounds": {
            "name": "value_in_bounds",
            "location": 92,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ],
                "attribute": [
                    "AttributeType"
                ]
            }
        },
        "BasicStatus.increment_attribute": {
            "name": "increment_attribute",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "AttributeType"
                ],
                "delta": [
                    "int"
                ]
            }
        },
        "BasicStatus.set_attribute": {
            "name": "set_attribute",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "AttributeType"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "BasicStatus._update_effect_states": {
            "name": "_update_effect_states",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicStatus.add_status_effect": {
            "name": "add_status_effect",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "effect": [
                    "StatusEffect"
                ]
            }
        },
        "BasicStatus.remove_status_effect": {
            "name": "remove_status_effect",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "effect": [
                    "StatusEffect"
                ]
            }
        },
        "BasicStatus.active_effects": {
            "name": "active_effects",
            "location": 132,
            "return": [
                "Sequence[StatusEffect]"
            ],
            "arguments": {
                "self": [],
                "check": [
                    "Callable[([StatusEffect], bool)]"
                ]
            }
        },
        "BasicStatus._parse_bound.int_fun": {
            "name": "int_fun",
            "location": 85,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "sixth_corp-master/src/models/characters/subroutines_base.py": {
        "_do_nothing": {
            "name": "_do_nothing",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "Character"
                ],
                "target": [
                    "Character"
                ]
            }
        },
        "_can_use_constant": {
            "name": "_can_use_constant",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "user": [
                    "Character"
                ],
                "target": [
                    "Character"
                ],
                "value": [
                    "bool"
                ]
            }
        },
        "_constant": {
            "name": "_constant",
            "location": 136,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "build_subroutine": {
            "name": "build_subroutine",
            "location": 140,
            "return": [
                "Subroutine"
            ],
            "arguments": {
                "use_fun": [
                    "Callable[([Character, Character], None)]"
                ],
                "can_use": [
                    "Union[(bool, Callable[([Character, Character], bool)])]"
                ],
                "num_cpu": [
                    "Union[(int, Callable[([], int)], partial)]"
                ],
                "time_to_resolve": [
                    "Union[(int, Callable[([], int)], partial)]"
                ],
                "description": [
                    "Union[(str, Callable[([], str)])]"
                ],
                "duration": [
                    "Union[(int, Callable[([], int)])]"
                ],
                "multi_use": [
                    "Union[(bool, Callable[([], bool)])]"
                ],
                "after_effect": [
                    "Callable[([Character, Character], None)]"
                ]
            }
        },
        "Subroutine._use": {
            "name": "_use",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Character"
                ],
                "target": [
                    "Character"
                ]
            }
        },
        "Subroutine.can_use": {
            "name": "can_use",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Character"
                ],
                "target": [
                    "Character"
                ]
            }
        },
        "Subroutine.use": {
            "name": "use",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Character"
                ],
                "target": [
                    "Character"
                ]
            }
        },
        "Subroutine.cpu_slots": {
            "name": "cpu_slots",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subroutine.time_to_resolve": {
            "name": "time_to_resolve",
            "location": 37,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subroutine.duration": {
            "name": "duration",
            "location": 41,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subroutine.multi_use": {
            "name": "multi_use",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subroutine.after_effect": {
            "name": "after_effect",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Character"
                ],
                "target": [
                    "Character"
                ]
            }
        },
        "Subroutine.description": {
            "name": "description",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subroutine.copy": {
            "name": "copy",
            "location": 66,
            "return": [
                "'Subroutine'"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SubroutineImpl.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "use_fun": [
                    "Callable[([Character, Character], None)]"
                ],
                "can_use_fun": [
                    "Callable[([Character, Character], bool)]"
                ],
                "cpu_slot_fun": [
                    "Callable[([], int)]"
                ],
                "time_slot_fun": [
                    "Callable[([], int)]"
                ],
                "description_fun": [
                    "Callable[([], str)]"
                ],
                "duration_fun": [
                    "Callable[([], int)]"
                ],
                "multi_use_fun": [
                    "Callable[([], bool)]"
                ],
                "after_effect_fun": [
                    "Callable[([Character, Character], None)]"
                ]
            }
        },
        "_SubroutineImpl.use": {
            "name": "use",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Character"
                ],
                "target": [
                    "Character"
                ]
            }
        },
        "_SubroutineImpl.can_use": {
            "name": "can_use",
            "location": 98,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Character"
                ],
                "target": [
                    "Character"
                ]
            }
        },
        "_SubroutineImpl.cpu_slots": {
            "name": "cpu_slots",
            "location": 101,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SubroutineImpl.time_to_resolve": {
            "name": "time_to_resolve",
            "location": 104,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SubroutineImpl.description": {
            "name": "description",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SubroutineImpl.duration": {
            "name": "duration",
            "location": 110,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SubroutineImpl.multi_use": {
            "name": "multi_use",
            "location": 113,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SubroutineImpl.after_effect": {
            "name": "after_effect",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Character"
                ],
                "target": [
                    "Character"
                ]
            }
        },
        "_SubroutineImpl.__copy__": {
            "name": "__copy__",
            "location": 119,
            "return": [
                "Subroutine"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sixth_corp-master/src/models/characters/subroutine_examples.py": {
        "damage_target": {
            "name": "damage_target",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "amount": [
                    "int"
                ],
                "target": [
                    "Character"
                ]
            }
        },
        "user_is_target": {
            "name": "user_is_target",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "user": [
                    "Character"
                ],
                "target": [
                    "Character"
                ]
            }
        },
        "same_team": {
            "name": "same_team",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "user": [
                    "Character"
                ],
                "target": [
                    "Character"
                ]
            }
        },
        "repair": {
            "name": "repair",
            "location": 37,
            "return": [
                "Subroutine"
            ],
            "arguments": {
                "amount": [
                    "int"
                ]
            }
        },
        "adjust_attribute": {
            "name": "adjust_attribute",
            "location": 58,
            "return": [
                "Subroutine"
            ],
            "arguments": {
                "attribute": [
                    "Attributes"
                ],
                "amount": [
                    "int"
                ],
                "duration": [
                    "int"
                ],
                "cpu_slots": [
                    "int"
                ],
                "time_to_resolve": [
                    "int"
                ],
                "is_buff": [
                    "bool"
                ]
            }
        },
        "shield_buff": {
            "name": "shield_buff",
            "location": 119,
            "return": [
                "Subroutine"
            ],
            "arguments": {
                "amount": [
                    "int"
                ],
                "num_rounds": [
                    "int"
                ],
                "cpu_slots": [
                    "int"
                ],
                "time_to_resolve": [
                    "int"
                ]
            }
        },
        "direct_damage": {
            "name": "direct_damage",
            "location": 157,
            "return": [
                "Subroutine"
            ],
            "arguments": {
                "damage": [
                    "int"
                ],
                "cpu_slots": [
                    "int"
                ],
                "time_to_resolve": [
                    "int"
                ],
                "label": [
                    "str"
                ]
            }
        },
        "damage_over_time": {
            "name": "damage_over_time",
            "location": 192,
            "return": [
                "Subroutine"
            ],
            "arguments": {
                "damage_per_round": [
                    "int"
                ],
                "num_rounds": [
                    "int"
                ],
                "cpu_slots": [
                    "int"
                ],
                "time_to_resolve": [
                    "int"
                ],
                "label": [
                    "str"
                ]
            }
        },
        "repair.use_fun": {
            "name": "use_fun",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "Character"
                ],
                "target": [
                    "Character"
                ]
            }
        },
        "adjust_attribute.use_fun": {
            "name": "use_fun",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "Character"
                ],
                "target": [
                    "Character"
                ]
            }
        },
        "adjust_attribute.can_use": {
            "name": "can_use",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "user": [
                    "Character"
                ],
                "target": [
                    "Character"
                ]
            }
        },
        "adjust_attribute.after_effect": {
            "name": "after_effect",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "Character"
                ],
                "target": [
                    "Character"
                ]
            }
        },
        "shield_buff.use_fun": {
            "name": "use_fun",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "Character"
                ],
                "target": [
                    "Character"
                ]
            }
        },
        "direct_damage.use_fun": {
            "name": "use_fun",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "Character"
                ],
                "target": [
                    "Character"
                ]
            }
        },
        "direct_damage.can_use_fun": {
            "name": "can_use_fun",
            "location": 182,
            "return": [
                "bool"
            ],
            "arguments": {
                "user": [
                    "Character"
                ],
                "target": [
                    "Character"
                ]
            }
        },
        "damage_over_time.use_fun": {
            "name": "use_fun",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "Character"
                ],
                "target": [
                    "Character"
                ]
            }
        },
        "damage_over_time.can_use_fun": {
            "name": "can_use_fun",
            "location": 227,
            "return": [
                "bool"
            ],
            "arguments": {
                "user": [
                    "Character"
                ],
                "target": [
                    "Character"
                ]
            }
        }
    },
    "sixth_corp-master/src/models/characters/__init__.py": {},
    "sixth_corp-master/src/models/characters/tests/character_base_test.py": {
        "CharacterTest._character": {
            "name": "_character",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CharacterTest.test_character_has_attributes": {
            "name": "test_character_has_attributes",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CharacterTest.test_kill_character": {
            "name": "test_kill_character",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CharacterTest.test_character_state_change": {
            "name": "test_character_state_change",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CharacterTest.test_mods_affect_max_attribute": {
            "name": "test_mods_affect_max_attribute",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CharacterTest.test_max_attributes_determine_bounds": {
            "name": "test_max_attributes_determine_bounds",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CharacterTest.test_mods_add_subroutines": {
            "name": "test_mods_add_subroutines",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sixth_corp-master/src/models/characters/tests/chassis_test.py": {
        "test_chassis_can_store_in_storage_by_default": {
            "name": "test_chassis_can_store_in_storage_by_default",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_chassis_can_store_after_making_space": {
            "name": "test_chassis_can_store_after_making_space",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_chassis_cannot_store_same_mod_twice": {
            "name": "test_chassis_cannot_store_same_mod_twice",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "test_chassis_base_mod_included": {
            "name": "test_chassis_base_mod_included",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "test_chassis_stores_in_active_slot_first": {
            "name": "test_chassis_stores_in_active_slot_first",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "test_chassis_mods_in_storage_not_active": {
            "name": "test_chassis_mods_in_storage_not_active",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "test_chassis_base_mod_is_active": {
            "name": "test_chassis_base_mod_is_active",
            "location": 62,
            "return": [],
            "arguments": {}
        }
    },
    "sixth_corp-master/src/models/characters/tests/conditions_test.py": {
        "test_status_condition_simple": {
            "name": "test_status_condition_simple",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_status_condition_or": {
            "name": "test_status_condition_or",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "test_status_condition_and": {
            "name": "test_status_condition_and",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "test_status_condition_not": {
            "name": "test_status_condition_not",
            "location": 79,
            "return": [],
            "arguments": {}
        },
        "_DummyStateful.description": {
            "name": "description",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_DummyStateful.status": {
            "name": "status",
            "location": 12,
            "return": [
                "BasicStatus"
            ],
            "arguments": {
                "self": []
            }
        },
        "_DummyStateful.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sixth_corp-master/src/models/characters/tests/states_test.py": {
        "test_str_methods": {
            "name": "test_str_methods",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_basic_status_attribute_bounds": {
            "name": "test_basic_status_attribute_bounds",
            "location": 12,
            "return": [],
            "arguments": {}
        }
    },
    "sixth_corp-master/src/models/characters/tests/status_test.py": {
        "test_basic_status_states": {
            "name": "test_basic_status_states",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_basis_status_attribute_increment_bounds": {
            "name": "test_basis_status_attribute_increment_bounds",
            "location": 26,
            "return": [],
            "arguments": {
                "att": [],
                "bound": []
            }
        },
        "test_status_effect_adds_state": {
            "name": "test_status_effect_adds_state",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "test_status_effect_prevents_state": {
            "name": "test_status_effect_prevents_state",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_status_effect_prevents_status_effect_state": {
            "name": "test_status_effect_prevents_status_effect_state",
            "location": 76,
            "return": [],
            "arguments": {}
        },
        "test_status_effect_attribute_increments_stack": {
            "name": "test_status_effect_attribute_increments_stack",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "test_status_effect_attribute_increments_stay_in_bounds": {
            "name": "test_status_effect_attribute_increments_stay_in_bounds",
            "location": 110,
            "return": [],
            "arguments": {}
        },
        "test_status_effect_partial_bounds": {
            "name": "test_status_effect_partial_bounds",
            "location": 134,
            "return": [],
            "arguments": {}
        }
    },
    "sixth_corp-master/src/models/characters/tests/subroutines_test.py": {
        "character": {
            "name": "character",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_repair_subroutine": {
            "name": "test_repair_subroutine",
            "location": 18,
            "return": [],
            "arguments": {
                "character": [
                    "Character"
                ]
            }
        },
        "test_fire_laser": {
            "name": "test_fire_laser",
            "location": 27,
            "return": [],
            "arguments": {
                "character": []
            }
        },
        "test_subroutine_eq": {
            "name": "test_subroutine_eq",
            "location": 40,
            "return": [],
            "arguments": {}
        }
    },
    "sixth_corp-master/src/models/characters/tests/__init__.py": {},
    "sixth_corp-master/src/models/combat/ai_impl.py": {
        "build_ai": {
            "name": "build_ai",
            "location": 64,
            "return": [
                "AI"
            ],
            "arguments": {
                "ai_type": [
                    "AIType"
                ]
            }
        },
        "_raise_error": {
            "name": "_raise_error",
            "location": 68,
            "return": [
                "Move"
            ],
            "arguments": {
                "moves": [
                    "Sequence[Move]"
                ]
            }
        },
        "_random_choice": {
            "name": "_random_choice",
            "location": 72,
            "return": [
                "Move"
            ],
            "arguments": {
                "moves": [
                    "Sequence[Move]"
                ]
            }
        },
        "_AIImpl.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "select_move_fun": [
                    "SelectionFun"
                ]
            }
        },
        "_AIImpl.select_move": {
            "name": "select_move",
            "location": 34,
            "return": [
                "Move"
            ],
            "arguments": {
                "self": [],
                "targets": [
                    "Sequence[Character]"
                ]
            }
        },
        "_AIImpl.set_user": {
            "name": "set_user",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Character"
                ]
            }
        },
        "AIType.selection_fun": {
            "name": "selection_fun",
            "location": 60,
            "return": [
                "SelectionFun"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MoveIterator.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MoveIterator.next_move": {
            "name": "next_move",
            "location": 84,
            "return": [
                "Move"
            ],
            "arguments": {
                "self": [],
                "moves": [
                    "Sequence[Move]"
                ]
            }
        }
    },
    "sixth_corp-master/src/models/combat/combat_logic.py": {
        "_make_unique": {
            "name": "_make_unique",
            "location": 123,
            "return": [
                "Move"
            ],
            "arguments": {
                "move": [
                    "Move"
                ]
            }
        },
        "CombatLogic.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "characters": [
                    "Sequence[Character]"
                ]
            }
        },
        "CombatLogic.stack": {
            "name": "stack",
            "location": 35,
            "return": [
                "CombatStack"
            ],
            "arguments": {
                "self": []
            }
        },
        "CombatLogic.start_round": {
            "name": "start_round",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "moves": [
                    "Sequence[Move]"
                ]
            }
        },
        "CombatLogic.end_round": {
            "name": "end_round",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CombatLogic.all_moves_present": {
            "name": "all_moves_present",
            "location": 84,
            "return": [
                "Tuple[(Move, ...)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CombatLogic.active_characters": {
            "name": "active_characters",
            "location": 93,
            "return": [
                "Tuple[(Character, ...)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CombatLogic._register_move": {
            "name": "_register_move",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "move": [
                    "Move"
                ]
            }
        },
        "CombatLogic._update_cpu_available": {
            "name": "_update_cpu_available",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "characters": [
                    "Iterable[Character]"
                ]
            }
        },
        "CombatLogic._initialize_characters": {
            "name": "_initialize_characters",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "characters": [
                    "Iterable[Character]"
                ]
            }
        }
    },
    "sixth_corp-master/src/models/combat/combat_stack.py": {
        "CombatStack.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CombatStack.resolved_moves": {
            "name": "resolved_moves",
            "location": 31,
            "return": [
                "Tuple[(Move, ...)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CombatStack.moves_times_remaining": {
            "name": "moves_times_remaining",
            "location": 42,
            "return": [
                "List[Tuple[(Move, int)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CombatStack.advance_time": {
            "name": "advance_time",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CombatStack.add_move": {
            "name": "add_move",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "move": [
                    "Move"
                ],
                "time_left": [
                    "int"
                ]
            }
        },
        "CombatStack.remove_moves": {
            "name": "remove_moves",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "Callable[([Move], bool)]"
                ]
            }
        }
    },
    "sixth_corp-master/src/models/combat/__init__.py": {},
    "sixth_corp-master/src/models/combat/tests/ai_test.py": {
        "AITest.test_no_valid_moves_gives_default_move": {
            "name": "test_no_valid_moves_gives_default_move",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "ai_type": []
            }
        }
    },
    "sixth_corp-master/src/models/combat/tests/combat_logic_test.py": {
        "player": {
            "name": "player",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "enemy": {
            "name": "enemy",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "test_combat_logic_initializes_cpu": {
            "name": "test_combat_logic_initializes_cpu",
            "location": 29,
            "return": [],
            "arguments": {
                "player": [],
                "enemy": []
            }
        },
        "test_direct_move_removes_and_returns_cpu": {
            "name": "test_direct_move_removes_and_returns_cpu",
            "location": 43,
            "return": [],
            "arguments": {
                "player": [],
                "enemy": []
            }
        },
        "test_move_with_multi_turn_use": {
            "name": "test_move_with_multi_turn_use",
            "location": 76,
            "return": [],
            "arguments": {
                "player": [],
                "enemy": [],
                "time_to_resolve": []
            }
        },
        "test_after_effect_occurs_at_end_of_move": {
            "name": "test_after_effect_occurs_at_end_of_move",
            "location": 122,
            "return": [],
            "arguments": {
                "player": [],
                "enemy": [],
                "multi_use": [],
                "duration": [],
                "time_to_resolve": []
            }
        },
        "test_move_disappears_after_expected_time": {
            "name": "test_move_disappears_after_expected_time",
            "location": 151,
            "return": [],
            "arguments": {
                "player": [],
                "enemy": [],
                "multi_use": [],
                "duration": [],
                "time_to_resolve": []
            }
        },
        "test_direct_move_removes_and_returns_cpu.get_cpu": {
            "name": "get_cpu",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "test_direct_move_removes_and_returns_cpu.get_health": {
            "name": "get_health",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "test_move_with_multi_turn_use.get_cpu": {
            "name": "get_cpu",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "test_move_with_multi_turn_use.get_health": {
            "name": "get_health",
            "location": 89,
            "return": [],
            "arguments": {}
        },
        "test_after_effect_occurs_at_end_of_move.after_effect": {
            "name": "after_effect",
            "location": 126,
            "return": [],
            "arguments": {
                "user": [],
                "target": []
            }
        }
    },
    "sixth_corp-master/src/models/combat/tests/combat_stack_test.py": {
        "test_resolved_moves_after_init": {
            "name": "test_resolved_moves_after_init",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_moves_remaining_correct_order": {
            "name": "test_moves_remaining_correct_order",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_update_multiple_times_correct_stack": {
            "name": "test_update_multiple_times_correct_stack",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_update_stack_called_before_execute_resolved": {
            "name": "test_update_stack_called_before_execute_resolved",
            "location": 67,
            "return": [],
            "arguments": {}
        }
    },
    "sixth_corp-master/src/models/combat/tests/shuffle_ai_test.py": {
        "test_shuffle_ai_only_provides_usable_moves": {
            "name": "test_shuffle_ai_only_provides_usable_moves",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_shuffle_ai_moves_dont_repeat": {
            "name": "test_shuffle_ai_moves_dont_repeat",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "test_no_valid_moves_means_do_nothing": {
            "name": "test_no_valid_moves_means_do_nothing",
            "location": 55,
            "return": [],
            "arguments": {}
        }
    },
    "sixth_corp-master/src/models/combat/tests/__init__.py": {},
    "sixth_corp-master/src/models/scenes/combat_scene.py": {
        "_valid_moves": {
            "name": "_valid_moves",
            "location": 27,
            "return": [
                "List[Move]"
            ],
            "arguments": {
                "user": [
                    "Character"
                ],
                "targets": [
                    "Sequence[Character]"
                ]
            }
        },
        "MoveInfo.time_minus_one": {
            "name": "time_minus_one",
            "location": 44,
            "return": [
                "'MoveInfo'"
            ],
            "arguments": {
                "self": []
            }
        },
        "CombatScene.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "enemies": [
                    "Sequence[Character]"
                ],
                "win_resolution": [
                    "Resolution"
                ],
                "loss_resolution": [
                    "Resolution"
                ],
                "background_image": [
                    "str"
                ]
            }
        },
        "CombatScene.animation_progress": {
            "name": "animation_progress",
            "location": 96,
            "return": [
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CombatScene.layout": {
            "name": "layout",
            "location": 104,
            "return": [
                "Layout"
            ],
            "arguments": {
                "self": []
            }
        },
        "CombatScene.background_image": {
            "name": "background_image",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CombatScene.available_moves": {
            "name": "available_moves",
            "location": 111,
            "return": [
                "List[Move]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CombatScene.is_resolved": {
            "name": "is_resolved",
            "location": 121,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CombatScene.get_resolution": {
            "name": "get_resolution",
            "location": 127,
            "return": [
                "Resolution"
            ],
            "arguments": {
                "self": []
            }
        },
        "CombatScene.notify": {
            "name": "notify",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "EventType"
                ]
            }
        },
        "CombatScene.__str__": {
            "name": "__str__",
            "location": 174,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CombatScene._update_layout": {
            "name": "_update_layout",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CombatScene._character_layout": {
            "name": "_character_layout",
            "location": 245,
            "return": [
                "Layout"
            ],
            "arguments": {
                "self": [],
                "char": [
                    "Character"
                ],
                "all_moves": [
                    "Sequence[Move]"
                ]
            }
        },
        "CombatScene._character_info": {
            "name": "_character_info",
            "location": 266,
            "return": [
                "CharacterInfo"
            ],
            "arguments": {
                "self": [],
                "char": [
                    "Character"
                ]
            }
        },
        "CombatScene._character_info.attr_value": {
            "name": "attr_value",
            "location": 268,
            "return": [
                "int"
            ],
            "arguments": {
                "attr": [
                    "Attributes"
                ]
            }
        }
    },
    "sixth_corp-master/src/models/scenes/decision_scene.py": {
        "transition_to": {
            "name": "transition_to",
            "location": 135,
            "return": [
                "SceneConstructor"
            ],
            "arguments": {
                "next_scene_fun": [
                    "SceneConstructor"
                ],
                "description": [
                    "str"
                ],
                "effects": [
                    "Union[(EffectType, Sequence[EffectType])]"
                ]
            }
        },
        "from_transition": {
            "name": "from_transition",
            "location": 151,
            "return": [
                "partial"
            ],
            "arguments": {
                "description": [
                    "str"
                ],
                "effects": [
                    "Union[(EffectType, Sequence[EffectType])]"
                ]
            }
        },
        "DecisionOption.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "description": [
                    "str"
                ],
                "next_scene_fun": [
                    "SceneConstructor"
                ],
                "effects": [
                    "Union[(EffectType, Sequence[EffectType])]"
                ]
            }
        },
        "DecisionOption.effects": {
            "name": "effects",
            "location": 27,
            "return": [
                "Sequence[EffectType]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionOption.next_scene": {
            "name": "next_scene",
            "location": 30,
            "return": [
                "Scene"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionScene.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prompt": [
                    "str"
                ],
                "choices": [
                    "Dict[(str, DecisionOption)]"
                ],
                "background_image": [
                    "str"
                ],
                "inventory_available": [
                    "bool"
                ],
                "centered_prompt": [
                    "bool"
                ],
                "centered_choices": [
                    "bool"
                ]
            }
        },
        "DecisionScene.notify": {
            "name": "notify",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "EventType"
                ]
            }
        },
        "DecisionScene.layout": {
            "name": "layout",
            "location": 72,
            "return": [
                "Layout"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionScene.inventory_available": {
            "name": "inventory_available",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionScene._select_inventory": {
            "name": "_select_inventory",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionScene.background_image": {
            "name": "background_image",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionScene.is_resolved": {
            "name": "is_resolved",
            "location": 98,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionScene.get_resolution": {
            "name": "get_resolution",
            "location": 101,
            "return": [
                "Resolution"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionScene.__str__": {
            "name": "__str__",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionScene._define_layout": {
            "name": "_define_layout",
            "location": 109,
            "return": [
                "Layout"
            ],
            "arguments": {
                "self": [],
                "centered_prompt": [
                    "bool"
                ],
                "centered_choices": [
                    "bool"
                ]
            }
        },
        "transition_to.scene_fun": {
            "name": "scene_fun",
            "location": 141,
            "return": [
                "DecisionScene"
            ],
            "arguments": {}
        },
        "DecisionScene._select_inventory.reload_self": {
            "name": "reload_self",
            "location": 83,
            "return": [
                "DecisionScene"
            ],
            "arguments": {}
        },
        "DecisionScene._select_inventory.inv_scene": {
            "name": "inv_scene",
            "location": 89,
            "return": [
                "InventoryScene"
            ],
            "arguments": {}
        }
    },
    "sixth_corp-master/src/models/scenes/effects.py": {
        "restart_game": {
            "name": "restart_game",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "increment_attribute": {
            "name": "increment_attribute",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "attribute": [
                    "AttributeType"
                ],
                "amount": [
                    "int"
                ],
                "target": [
                    "Stateful"
                ]
            }
        }
    },
    "sixth_corp-master/src/models/scenes/inventory_scene.py": {
        "_slot_header": {
            "name": "_slot_header",
            "location": 234,
            "return": [
                "SlotHeaderInfo"
            ],
            "arguments": {
                "slot": [
                    "SlotTypes"
                ],
                "chassis": [
                    "Chassis"
                ]
            }
        },
        "SlotHeaderInfo.num_filled": {
            "name": "num_filled",
            "location": 22,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryScene.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prev_scene_loader": [
                    "Callable[([], Scene)]"
                ],
                "loot_mods": [
                    "Callable[([], Iterable[Mod])]"
                ]
            }
        },
        "InventoryScene.notify": {
            "name": "notify",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "EventType"
                ]
            }
        },
        "InventoryScene.layout": {
            "name": "layout",
            "location": 99,
            "return": [
                "Layout"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryScene.selected_mod": {
            "name": "selected_mod",
            "location": 103,
            "return": [
                "Optional[Mod]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryScene.UI_error_message": {
            "name": "UI_error_message",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryScene.background_image": {
            "name": "background_image",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryScene.is_resolved": {
            "name": "is_resolved",
            "location": 114,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryScene.get_resolution": {
            "name": "get_resolution",
            "location": 117,
            "return": [
                "Resolution"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryScene._update_layout": {
            "name": "_update_layout",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryScene._slot_layout": {
            "name": "_slot_layout",
            "location": 213,
            "return": [
                "Layout"
            ],
            "arguments": {
                "self": [],
                "slot_data": [
                    "SlotHeaderInfo"
                ],
                "num_rows": [
                    "int"
                ]
            }
        }
    },
    "sixth_corp-master/src/models/scenes/layouts.py": {
        "Layout.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elements": [
                    "Sequence[Tuple[(Any, int)]]"
                ],
                "direction": [
                    "str"
                ],
                "dimensions": [
                    "Tuple[(int, int)]"
                ]
            }
        },
        "Layout.object_at": {
            "name": "object_at",
            "location": 58,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "Layout.rect_at": {
            "name": "rect_at",
            "location": 80,
            "return": [
                "Rect"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "Layout.get_rects": {
            "name": "get_rects",
            "location": 103,
            "return": [
                "List[Rect]"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Any"
                ]
            }
        },
        "Layout.all_objects": {
            "name": "all_objects",
            "location": 140,
            "return": [
                "List[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layout._rect_for_index": {
            "name": "_rect_for_index",
            "location": 156,
            "return": [
                "Rect"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "Layout._element_index_at": {
            "name": "_element_index_at",
            "location": 175,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "Layout._set_container": {
            "name": "_set_container",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "Rect"
                ]
            }
        }
    },
    "sixth_corp-master/src/models/scenes/scenes_base.py": {
        "Scene.is_resolved": {
            "name": "is_resolved",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scene.get_resolution": {
            "name": "get_resolution",
            "location": 16,
            "return": [
                "'Resolution'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scene.background_image": {
            "name": "background_image",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Resolution.next_scene": {
            "name": "next_scene",
            "location": 31,
            "return": [
                "Scene"
            ],
            "arguments": {
                "self": []
            }
        },
        "Resolution.effects": {
            "name": "effects",
            "location": 35,
            "return": [
                "Sequence[EffectType]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicResolution.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scene_fun": [
                    "Callable[([], Scene)]"
                ],
                "effect_seq": [
                    "Tuple[(EffectType, ...)]"
                ]
            }
        },
        "BasicResolution.next_scene": {
            "name": "next_scene",
            "location": 47,
            "return": [
                "Scene"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicResolution.effects": {
            "name": "effects",
            "location": 51,
            "return": [
                "Sequence[EffectType]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProbabilisticResolution.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resolutions_weights": [
                    "Sequence[Tuple[(Resolution, int)]]"
                ]
            }
        },
        "ProbabilisticResolution.next_scene": {
            "name": "next_scene",
            "location": 70,
            "return": [
                "Scene"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProbabilisticResolution.effects": {
            "name": "effects",
            "location": 74,
            "return": [
                "Sequence[EffectType]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sixth_corp-master/src/models/scenes/scene_examples.py": {
        "loading_scene": {
            "name": "loading_scene",
            "location": 22,
            "return": [
                "DecisionScene"
            ],
            "arguments": {}
        },
        "start_scene": {
            "name": "start_scene",
            "location": 39,
            "return": [
                "DecisionScene"
            ],
            "arguments": {}
        },
        "_mini_laser": {
            "name": "_mini_laser",
            "location": 50,
            "return": [
                "Tuple[Mod]"
            ],
            "arguments": {}
        },
        "swamp_scene": {
            "name": "swamp_scene",
            "location": 57,
            "return": [
                "DecisionScene"
            ],
            "arguments": {}
        },
        "second_scene": {
            "name": "second_scene",
            "location": 94,
            "return": [
                "DecisionScene"
            ],
            "arguments": {}
        },
        "example_combat_scene": {
            "name": "example_combat_scene",
            "location": 110,
            "return": [
                "'CombatScene'"
            ],
            "arguments": {}
        },
        "game_over_scene": {
            "name": "game_over_scene",
            "location": 122,
            "return": [
                "DecisionScene"
            ],
            "arguments": {}
        },
        "loading_scene.intro": {
            "name": "intro",
            "location": 24,
            "return": [
                "DecisionScene"
            ],
            "arguments": {}
        },
        "swamp_scene.success": {
            "name": "success",
            "location": 64,
            "return": [
                "Scene"
            ],
            "arguments": {
                "loot_scene": [
                    "bool"
                ]
            }
        },
        "ResolutionTypes.resolution": {
            "name": "resolution",
            "location": 135,
            "return": [
                "Resolution"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sixth_corp-master/src/models/scenes/settings_scene.py": {
        "SettingsScene.background_image": {
            "name": "background_image",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingsScene.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingsScene.is_resolved": {
            "name": "is_resolved",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingsScene.get_resolution": {
            "name": "get_resolution",
            "location": 19,
            "return": [
                "Resolution"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sixth_corp-master/src/models/scenes/skill_checks.py": {
        "sample_weights": {
            "name": "sample_weights",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {
                "weighted_objects": [
                    "Sequence[Tuple[(Any, int)]]"
                ]
            }
        },
        "Difficulty.success_prob": {
            "name": "success_prob",
            "location": 22,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Difficulty.__add__": {
            "name": "__add__",
            "location": 25,
            "return": [
                "'Difficulty'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Difficulty.__sub__": {
            "name": "__sub__",
            "location": 30,
            "return": [
                "'Difficulty'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Difficulty._adjust": {
            "name": "_adjust",
            "location": 35,
            "return": [
                "'Difficulty'"
            ],
            "arguments": {
                "self": [],
                "modifier": [
                    "int"
                ]
            }
        },
        "Difficulty.sample_success": {
            "name": "sample_success",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sixth_corp-master/src/models/scenes/__init__.py": {},
    "sixth_corp-master/src/models/scenes/scene_arcs/space_arc.py": {
        "_heal_over_time": {
            "name": "_heal_over_time",
            "location": 124,
            "return": [
                "Subroutine"
            ],
            "arguments": {}
        },
        "_bone_drill": {
            "name": "_bone_drill",
            "location": 139,
            "return": [
                "Subroutine"
            ],
            "arguments": {}
        },
        "_medical_bot": {
            "name": "_medical_bot",
            "location": 143,
            "return": [
                "Character"
            ],
            "arguments": {
                "number": [
                    "int"
                ]
            }
        },
        "SpaceArc.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "seed": [
                    "int"
                ]
            }
        },
        "SpaceArc.intro": {
            "name": "intro",
            "location": 35,
            "return": [
                "DecisionScene"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpaceArc.staging_area": {
            "name": "staging_area",
            "location": 54,
            "return": [
                "DecisionScene"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpaceArc._decrement_time_left": {
            "name": "_decrement_time_left",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpaceArc.cryo_chambers": {
            "name": "cryo_chambers",
            "location": 74,
            "return": [
                "DecisionScene"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpaceArc.scene_2": {
            "name": "scene_2",
            "location": 102,
            "return": [
                "DecisionScene"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpaceArc.medical_bot_combat": {
            "name": "medical_bot_combat",
            "location": 108,
            "return": [
                "CombatScene"
            ],
            "arguments": {
                "self": []
            }
        },
        "_heal_over_time.use_fun": {
            "name": "use_fun",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "Character"
                ],
                "target": [
                    "Character"
                ]
            }
        },
        "_heal_over_time.can_use": {
            "name": "can_use",
            "location": 128,
            "return": [
                "bool"
            ],
            "arguments": {
                "user": [
                    "Character"
                ],
                "target": [
                    "Character"
                ]
            }
        },
        "SpaceArc.medical_bot_combat.loot": {
            "name": "loot",
            "location": 111,
            "return": [
                "List[Mod]"
            ],
            "arguments": {}
        }
    },
    "sixth_corp-master/src/models/scenes/scene_arcs/__init__.py": {},
    "sixth_corp-master/src/models/scenes/tests/effects_test.py": {
        "player": {
            "name": "player",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "teardown_function": {
            "name": "teardown_function",
            "location": 15,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "test_restart_game": {
            "name": "test_restart_game",
            "location": 19,
            "return": [],
            "arguments": {
                "player": []
            }
        },
        "test_increment_player_attribute": {
            "name": "test_increment_player_attribute",
            "location": 27,
            "return": [],
            "arguments": {
                "player": []
            }
        },
        "test_increment_attribute": {
            "name": "test_increment_attribute",
            "location": 34,
            "return": [],
            "arguments": {}
        }
    },
    "sixth_corp-master/src/models/scenes/tests/layouts_test.py": {
        "test_vertical_layout_object_at": {
            "name": "test_vertical_layout_object_at",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_typical_nested_layout": {
            "name": "test_typical_nested_layout",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_horizontal_layout_rect_at": {
            "name": "test_horizontal_layout_rect_at",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "test_nested_layouts": {
            "name": "test_nested_layouts",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "test_empty_layout_rect_is_container": {
            "name": "test_empty_layout_rect_is_container",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "test_get_rects_single_element": {
            "name": "test_get_rects_single_element",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "test_get_rects_all": {
            "name": "test_get_rects_all",
            "location": 94,
            "return": [],
            "arguments": {}
        }
    },
    "sixth_corp-master/src/models/scenes/tests/scenes_base_test.py": {
        "_mock_resolution": {
            "name": "_mock_resolution",
            "location": 12,
            "return": [
                "Mock"
            ],
            "arguments": {
                "label": []
            }
        },
        "test_probabilistic_resolution_correct_probabilities": {
            "name": "test_probabilistic_resolution_correct_probabilities",
            "location": 17,
            "return": [],
            "arguments": {}
        }
    },
    "sixth_corp-master/src/models/scenes/tests/skills_test.py": {
        "test_difficulty_adjustments": {
            "name": "test_difficulty_adjustments",
            "location": 17,
            "return": [],
            "arguments": {
                "base": [],
                "modifier": [],
                "expected": []
            }
        },
        "test_skill_check_statistics": {
            "name": "test_skill_check_statistics",
            "location": 22,
            "return": [],
            "arguments": {
                "difficulty": []
            }
        },
        "test_sample_weights_correct_probability": {
            "name": "test_sample_weights_correct_probability",
            "location": 37,
            "return": [],
            "arguments": {}
        }
    },
    "sixth_corp-master/src/models/scenes/tests/__init__.py": {},
    "sixth_corp-master/src/util/testing_util.py": {
        "click_on_char": {
            "name": "click_on_char",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "char": [
                    "Character"
                ],
                "layout": [
                    "Layout"
                ]
            }
        },
        "_get_char_info": {
            "name": "_get_char_info",
            "location": 25,
            "return": [
                "CharacterInfo"
            ],
            "arguments": {
                "char": [
                    "Character"
                ],
                "layout": [
                    "Layout"
                ]
            }
        },
        "selected_char": {
            "name": "selected_char",
            "location": 33,
            "return": [
                "Optional[Character]"
            ],
            "arguments": {
                "layout": [
                    "Layout"
                ]
            }
        },
        "_get_combatant": {
            "name": "_get_combatant",
            "location": 43,
            "return": [
                "Character"
            ],
            "arguments": {
                "health": [
                    "int"
                ],
                "subroutine": [
                    "Subroutine"
                ],
                "name": [
                    "str"
                ],
                "ai_type": [
                    "AIType"
                ]
            }
        },
        "create_combat_group": {
            "name": "create_combat_group",
            "location": 54,
            "return": [
                "List[Character]"
            ],
            "arguments": {
                "group_size": [
                    "int"
                ],
                "health": [
                    "int"
                ],
                "damage": [
                    "int"
                ],
                "base_name": [
                    "str"
                ],
                "subroutine": [
                    "Subroutine"
                ]
            }
        }
    },
    "sixth_corp-master/src/util/__init__.py": {},
    "sixth_corp-master/src/views/pygame_images.py": {
        "load_image": {
            "name": "load_image",
            "location": 9,
            "return": [
                "pygame.Surface"
            ],
            "arguments": {
                "image_path": [
                    "str"
                ]
            }
        }
    },
    "sixth_corp-master/src/views/pygame_screen.py": {
        "get_screen": {
            "name": "get_screen",
            "location": 253,
            "return": [
                "Screen"
            ],
            "arguments": {}
        },
        "Screen.render_texts": {
            "name": "render_texts",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "texts": [
                    "List[str]"
                ],
                "font_size": [
                    "int"
                ],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "color": [
                    "ColorType"
                ],
                "spacing": [
                    "int"
                ]
            }
        },
        "Screen.render_text": {
            "name": "render_text",
            "location": 28,
            "return": [
                "Rect"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "font_size": [
                    "int"
                ],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "color": [
                    "ColorType"
                ],
                "w": [
                    "int"
                ],
                "h": [
                    "int"
                ]
            }
        },
        "Screen.render_text_in_rect": {
            "name": "render_text_in_rect",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "font_size": [
                    "int"
                ],
                "rect": [
                    "Rect"
                ],
                "color": [
                    "ColorType"
                ],
                "center_x": [
                    "bool"
                ],
                "center_y": [
                    "bool"
                ]
            }
        },
        "Screen.render_image": {
            "name": "render_image",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_path": [
                    "str"
                ],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "w": [
                    "int"
                ],
                "h": [
                    "int"
                ]
            }
        },
        "Screen.render_rect": {
            "name": "render_rect",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rect": [
                    "Rect"
                ],
                "color": [
                    "ColorType"
                ],
                "width": [
                    "int"
                ]
            }
        },
        "Screen.clear": {
            "name": "clear",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Screen.update": {
            "name": "update",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Screen.render_line": {
            "name": "render_line",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Tuple[(int, int)]"
                ],
                "end": [
                    "Tuple[(int, int)]"
                ],
                "color": [
                    "ColorType"
                ],
                "thickness": [
                    "int"
                ]
            }
        },
        "_PygameScreen.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_PygameScreen._font": {
            "name": "_font",
            "location": 115,
            "return": [
                "pygame.font.Font"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int"
                ]
            }
        },
        "_PygameScreen._initialize_screen": {
            "name": "_initialize_screen",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_PygameScreen.update": {
            "name": "update",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_PygameScreen.render_texts": {
            "name": "render_texts",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "texts": [
                    "List[str]"
                ],
                "font_size": [
                    "int"
                ],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "color": [
                    "ColorType"
                ],
                "spacing": [
                    "int"
                ]
            }
        },
        "_PygameScreen.render_text": {
            "name": "render_text",
            "location": 150,
            "return": [
                "Rect"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "font_size": [
                    "int"
                ],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "color": [
                    "ColorType"
                ],
                "w": [
                    "int"
                ],
                "h": [
                    "int"
                ]
            }
        },
        "_PygameScreen.render_line": {
            "name": "render_line",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Tuple[(int, int)]"
                ],
                "end": [
                    "Tuple[(int, int)]"
                ],
                "color": [
                    "ColorType"
                ],
                "thickness": [
                    "int"
                ]
            }
        },
        "_PygameScreen.render_text_in_rect": {
            "name": "render_text_in_rect",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "font_size": [
                    "int"
                ],
                "rect": [
                    "Rect"
                ],
                "color": [
                    "ColorType"
                ],
                "center_x": [
                    "bool"
                ],
                "center_y": [
                    "bool"
                ]
            }
        },
        "_PygameScreen.render_image": {
            "name": "render_image",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_path": [
                    "str"
                ],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "w": [
                    "int"
                ],
                "h": [
                    "int"
                ]
            }
        },
        "_PygameScreen.render_rect": {
            "name": "render_rect",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rect": [
                    "Rect"
                ],
                "color": [
                    "ColorType"
                ],
                "width": [
                    "int"
                ]
            }
        },
        "_PygameScreen.clear": {
            "name": "clear",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sixth_corp-master/src/views/scene_view.py": {
        "_build_scene_artists": {
            "name": "_build_scene_artists",
            "location": 45,
            "return": [
                "List[SceneArtist]"
            ],
            "arguments": {
                "scene": [
                    "Scene"
                ]
            }
        },
        "SceneView.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scene": [
                    "Scene"
                ]
            }
        },
        "SceneView.update": {
            "name": "update",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SceneView.toggle_debug": {
            "name": "toggle_debug",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sixth_corp-master/src/views/view_manager.py": {
        "ViewManager.notify": {
            "name": "notify",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "event": [
                    "EventType"
                ]
            }
        }
    },
    "sixth_corp-master/src/views/__init__.py": {},
    "sixth_corp-master/src/views/artists/background_artist.py": {
        "BackgroundArtist.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scene": [
                    "Scene"
                ]
            }
        },
        "BackgroundArtist.render": {
            "name": "render",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "screen": [
                    "Screen"
                ],
                "scene": [
                    "Scene"
                ]
            }
        }
    },
    "sixth_corp-master/src/views/artists/combat_artist.py": {
        "_render_move": {
            "name": "_render_move",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "move": [
                    "Move"
                ],
                "time": [
                    "Optional[int]"
                ],
                "rect": [
                    "Rect"
                ],
                "screen": [
                    "Screen"
                ],
                "small_text": [
                    "bool"
                ],
                "CPU_not_time": [
                    "bool"
                ]
            }
        },
        "_interpolate": {
            "name": "_interpolate",
            "location": 67,
            "return": [
                "Rect"
            ],
            "arguments": {
                "progress": [
                    "float"
                ],
                "rect_prev": [
                    "Rect"
                ],
                "rect_new": [
                    "Rect"
                ]
            }
        },
        "_render_characters": {
            "name": "_render_characters",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "scene": [
                    "CombatScene"
                ],
                "screen": [
                    "Screen"
                ]
            }
        },
        "_render_combat_options": {
            "name": "_render_combat_options",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "scene": [
                    "CombatScene"
                ],
                "screen": [
                    "Screen"
                ]
            }
        },
        "_render_character": {
            "name": "_render_character",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "info": [
                    "CharacterInfo"
                ],
                "screen": [
                    "Screen"
                ],
                "rect": [
                    "Rect"
                ]
            }
        },
        "CombatArtist.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CombatArtist.render": {
            "name": "render",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "screen": [
                    "Screen"
                ],
                "scene": [
                    "Scene"
                ]
            }
        },
        "CombatArtist._render_moves": {
            "name": "_render_moves",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scene": [
                    "CombatScene"
                ],
                "screen": [
                    "Screen"
                ]
            }
        }
    },
    "sixth_corp-master/src/views/artists/decision_artist.py": {
        "_render_text_data": {
            "name": "_render_text_data",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "DecisionInfo"
                ],
                "rect": [
                    "Rect"
                ],
                "screen": [
                    "Screen"
                ]
            }
        },
        "DecisionArtist.render": {
            "name": "render",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "screen": [
                    "Screen"
                ],
                "scene": [
                    "Scene"
                ]
            }
        }
    },
    "sixth_corp-master/src/views/artists/drawing_utils.py": {
        "_rescale_lengths": {
            "name": "_rescale_lengths",
            "location": 12,
            "return": [
                "Tuple[(int, ...)]"
            ],
            "arguments": {
                "scale": [
                    "float"
                ]
            }
        },
        "rescale_horizontal": {
            "name": "rescale_horizontal",
            "location": 19,
            "return": [
                "Tuple[(int, ...)]"
            ],
            "arguments": {}
        },
        "rescale_vertical": {
            "name": "rescale_vertical",
            "location": 23,
            "return": [
                "Tuple[(int, ...)]"
            ],
            "arguments": {}
        }
    },
    "sixth_corp-master/src/views/artists/inventory_artist.py": {
        "_render_slot_header": {
            "name": "_render_slot_header",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "slot_data": [
                    "SlotHeaderInfo"
                ],
                "rect": [
                    "Rect"
                ],
                "selected_mod_slots": [
                    "List[SlotTypes]"
                ],
                "screen": [
                    "Screen"
                ]
            }
        },
        "_render_mod_slot": {
            "name": "_render_mod_slot",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "slot_data": [
                    "SlotRowInfo"
                ],
                "rect": [
                    "Rect"
                ],
                "screen": [
                    "Screen"
                ]
            }
        },
        "_render_selected_mod_info": {
            "name": "_render_selected_mod_info",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "info": [
                    "SelectedModInfo"
                ],
                "rect": [
                    "Rect"
                ],
                "screen": [
                    "Screen"
                ]
            }
        },
        "_render_mod_property": {
            "name": "_render_mod_property",
            "location": 101,
            "return": [
                "Rect"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "spacing": [
                    "int"
                ],
                "label": [
                    "str"
                ],
                "lines": [
                    "Sequence[str]"
                ],
                "text_rect": [
                    "Rect"
                ],
                "screen": [
                    "Screen"
                ]
            }
        },
        "InventoryArtist.render": {
            "name": "render",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "screen": [
                    "Screen"
                ],
                "scene": [
                    "Scene"
                ]
            }
        }
    },
    "sixth_corp-master/src/views/artists/overlay_artist.py": {
        "OverlayArtist.render": {
            "name": "render",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "screen": [
                    "Screen"
                ],
                "scene": [
                    "Scene"
                ]
            }
        }
    },
    "sixth_corp-master/src/views/artists/scene_artist_base.py": {
        "SceneArtist.render": {
            "name": "render",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "screen": [
                    "Screen"
                ],
                "scene": [
                    "Scene"
                ]
            }
        }
    },
    "sixth_corp-master/src/views/artists/settings_artist.py": {
        "SettingsArtist.render": {
            "name": "render",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "screen": [
                    "Screen"
                ],
                "scene": [
                    "Scene"
                ]
            }
        }
    },
    "sixth_corp-master/src/views/artists/__init__.py": {}
}
{
    "socketio_pg-master/config.py": {},
    "socketio_pg-master/setup.py": {},
    "socketio_pg-master/socketio_pg/app.py": {
        "create_app": {
            "name": "create_app",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "setup_config": {
            "name": "setup_config",
            "location": 31,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "setup_db": {
            "name": "setup_db",
            "location": 38,
            "return": [],
            "arguments": {
                "app": []
            }
        }
    },
    "socketio_pg-master/socketio_pg/client.py": {
        "Client.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "connection": []
            }
        },
        "Client.sanitize_channel": {
            "name": "sanitize_channel",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str"
                ]
            }
        },
        "Client.publish": {
            "name": "publish",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [],
                "event_name": [
                    "str"
                ],
                "params": [
                    "Dict"
                ]
            }
        },
        "Client._execute": {
            "name": "_execute",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "cur": [],
                "query": []
            }
        }
    },
    "socketio_pg-master/socketio_pg/model.py": {},
    "socketio_pg-master/socketio_pg/server.py": {},
    "socketio_pg-master/socketio_pg/websocket.py": {
        "SocketServer.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "app": [],
                "dsn": [],
                "enable_test_page": [],
                "port": [],
                "test": []
            }
        },
        "SocketServer.client_error": {
            "name": "client_error",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "SocketServer.run": {
            "name": "run",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SocketServer.shutdown": {
            "name": "shutdown",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SocketServer.__init__.authenticate_user": {
            "name": "authenticate_user",
            "location": 33,
            "return": [],
            "arguments": {
                "request_": []
            }
        },
        "SocketServer.__init__.authenticated_only": {
            "name": "authenticated_only",
            "location": 42,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "SocketServer.__init__.handle_client_connect": {
            "name": "handle_client_connect",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "SocketServer.__init__.handle_client_disconnect": {
            "name": "handle_client_disconnect",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "SocketServer.__init__.handle_client_subscribe": {
            "name": "handle_client_subscribe",
            "location": 77,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "SocketServer.__init__.authenticated_only.wrapped": {
            "name": "wrapped",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "SocketServer.__init__.handle_client_subscribe.emit_green": {
            "name": "emit_green",
            "location": 88,
            "return": [],
            "arguments": {
                "q": [],
                "req_ctx": []
            }
        },
        "SocketServer.__init__.socket_test": {
            "name": "socket_test",
            "location": 106,
            "return": [],
            "arguments": {}
        },
        "SocketServer.__init__.test_pub": {
            "name": "test_pub",
            "location": 113,
            "return": [],
            "arguments": {
                "data": []
            }
        }
    },
    "socketio_pg-master/socketio_pg/__init__.py": {
        "PubSub.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask"
                ],
                "dsn": [
                    "str"
                ]
            }
        },
        "PubSub.disconnect": {
            "name": "disconnect",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PubSub.disable_listener": {
            "name": "disable_listener",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PubSub.sanitize_event_name": {
            "name": "sanitize_event_name",
            "location": 75,
            "return": [
                "EventName"
            ],
            "arguments": {
                "self": [],
                "event_name": [
                    "EventName"
                ]
            }
        },
        "PubSub.wait": {
            "name": "wait",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "conn": [],
                "timeout": []
            }
        },
        "PubSub._new_connection": {
            "name": "_new_connection",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PubSub.unsubscribe": {
            "name": "unsubscribe",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "subscription": []
            }
        },
        "PubSub.subscribe": {
            "name": "subscribe",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "event_name": [
                    "EventName"
                ],
                "queue": [
                    "ListenerQueue"
                ]
            }
        },
        "PubSub._subscribe": {
            "name": "_subscribe",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "event_name": [
                    "EventName"
                ]
            }
        },
        "PubSub._unsubscribe": {
            "name": "_unsubscribe",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "event_name": [
                    "EventName"
                ]
            }
        },
        "PubSub._debug": {
            "name": "_debug",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "PubSub.handle_event": {
            "name": "handle_event",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "notify": []
            }
        },
        "PubSub.publish": {
            "name": "publish",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "event_name": [],
                "payload": []
            }
        },
        "PubSub.listen": {
            "name": "listen",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "wait": []
            }
        },
        "PubSub._listen": {
            "name": "_listen",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "wait": []
            }
        },
        "PubSub.check_for_notifies": {
            "name": "check_for_notifies",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PubSub._check_for_notifies": {
            "name": "_check_for_notifies",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "socketio_pg-master/socketio_pg/tests/test_live.py": {
        "PubSubTestCase.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PubSubTestCase.on_connect": {
            "name": "on_connect",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PubSubTestCase.on_disconnect": {
            "name": "on_disconnect",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PubSubTestCase.test_subscribe_publish": {
            "name": "test_subscribe_publish",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PubSubTestCase._do_subscribe_publish": {
            "name": "_do_subscribe_publish",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "sio": []
            }
        },
        "PubSubTestCase._do_subscribe_publish.on_server_hello": {
            "name": "on_server_hello",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "socketio_pg-master/socketio_pg/tests/test_pubsub.py": {
        "PubSubTestCase.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PubSubTestCase.tearDown": {
            "name": "tearDown",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PubSubTestCase.test_ws_client_server": {
            "name": "test_ws_client_server",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PubSubTestCase._do_pubsub_test": {
            "name": "_do_pubsub_test",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "channel_name": []
            }
        },
        "PubSubTestCase.test_load": {
            "name": "test_load",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PubSubTestCase._do_pubsub_test.send_and_receive": {
            "name": "send_and_receive",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "PubSubTestCase.test_load.run_test": {
            "name": "run_test",
            "location": 84,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "PubSubTestCase.test_load.TestClient.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "num": []
            }
        }
    },
    "socketio_pg-master/socketio_pg/tests/__init__.py": {}
}
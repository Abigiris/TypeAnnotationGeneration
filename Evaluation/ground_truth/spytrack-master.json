{
    "spytrack-master/setup.py": {},
    "spytrack-master/spytrack/runner.py": {},
    "spytrack-master/spytrack/__main__.py": {},
    "spytrack-master/spytrack/analyze/analyzer_facade.py": {
        "AnalyzerFacade.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_repository": [
                    "EventRepository"
                ],
                "config": [
                    "Config"
                ]
            }
        },
        "AnalyzerFacade.analyze": {
            "name": "analyze",
            "location": 30,
            "return": [
                "List[MatchedEvent]"
            ],
            "arguments": {
                "self": [],
                "start_date": [
                    "datetime"
                ],
                "end_date": [
                    "datetime"
                ],
                "is_current": [
                    "bool"
                ]
            }
        }
    },
    "spytrack-master/spytrack/analyze/bucket_point.py": {
        "BucketPoint.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bucket_type": [
                    "BucketType"
                ],
                "timestamp": [
                    "datetime.datetime"
                ],
                "event": [
                    "Event"
                ],
                "is_end": [
                    "bool"
                ]
            }
        },
        "BucketPoint.event_data": {
            "name": "event_data",
            "location": 20,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BucketPoint.event_type": {
            "name": "event_type",
            "location": 24,
            "return": [
                "BucketType"
            ],
            "arguments": {
                "self": []
            }
        },
        "BucketPoint.is_end": {
            "name": "is_end",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BucketPoint.__lt__": {
            "name": "__lt__",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'BucketPoint'"
                ]
            }
        }
    },
    "spytrack-master/spytrack/analyze/bucket_type.py": {},
    "spytrack-master/spytrack/analyze/cached_event_repository.py": {
        "CachedEventRepository.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_repository": [
                    "EventRepository"
                ]
            }
        },
        "CachedEventRepository.get_bucket_events": {
            "name": "get_bucket_events",
            "location": 15,
            "return": [
                "Dict[(str, Events)]"
            ],
            "arguments": {
                "self": [],
                "buckets": [
                    "List[str]"
                ],
                "start_time": [
                    "datetime"
                ],
                "end_time": [
                    "datetime"
                ]
            }
        },
        "CachedEventRepository.get_events": {
            "name": "get_events",
            "location": 32,
            "return": [
                "Events"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "start_time": [
                    "datetime"
                ],
                "end_time": [
                    "datetime"
                ]
            }
        },
        "CachedEventRepository._cached_time_matches": {
            "name": "_cached_time_matches",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "compared_time": [
                    "datetime"
                ]
            }
        }
    },
    "spytrack-master/spytrack/analyze/event.py": {
        "Event.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "ParentEvent"
                ],
                "bucket_type": [
                    "BucketType"
                ]
            }
        },
        "Event.has_equal_data": {
            "name": "has_equal_data",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "'Event'"
                ]
            }
        },
        "Event.stringify_data": {
            "name": "stringify_data",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spytrack-master/spytrack/analyze/events_analyzer.py": {
        "EventsAnalyzer.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventsAnalyzer.analyze_events": {
            "name": "analyze_events",
            "location": 24,
            "return": [
                "Events"
            ],
            "arguments": {
                "self": [],
                "buckets": [
                    "Buckets"
                ],
                "bucket_events": [
                    "Dict[(BucketName, Events)]"
                ]
            }
        },
        "EventsAnalyzer.match": {
            "name": "match",
            "location": 85,
            "return": [
                "List[MatchedEvent]"
            ],
            "arguments": {
                "self": [],
                "events": [
                    "Events"
                ],
                "projects": [
                    "Projects"
                ]
            }
        },
        "EventsAnalyzer._match_event": {
            "name": "_match_event",
            "location": 100,
            "return": [
                "MatchedEvent"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Event"
                ],
                "projects": [
                    "Projects"
                ]
            }
        },
        "EventsAnalyzer._is_event_matching": {
            "name": "_is_event_matching",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Event"
                ],
                "definition": [
                    "Rule"
                ]
            }
        },
        "EventsAnalyzer.app_afk_timeline_condition": {
            "name": "app_afk_timeline_condition",
            "location": 121,
            "return": [
                "bool"
            ],
            "arguments": {
                "afk_event": [
                    "BucketPoint"
                ]
            }
        },
        "EventsAnalyzer.app_browser_timeline_condition": {
            "name": "app_browser_timeline_condition",
            "location": 125,
            "return": [
                "BucketPointCondition"
            ],
            "arguments": {
                "app_name": [
                    "str"
                ]
            }
        },
        "EventsAnalyzer._match_browser_buckets": {
            "name": "_match_browser_buckets",
            "location": 129,
            "return": [
                "Dict[(BucketName, str)]"
            ],
            "arguments": {
                "app_bucket": [
                    "str"
                ],
                "browser_buckets": [
                    "List[BucketName]"
                ],
                "timelines": [
                    "Dict[(BucketName, Timeline)]"
                ]
            }
        }
    },
    "spytrack-master/spytrack/analyze/event_repository.py": {
        "EventRepository.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "ActivityWatchClient"
                ]
            }
        },
        "EventRepository.fetch_buckets": {
            "name": "fetch_buckets",
            "location": 20,
            "return": [
                "Buckets"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventRepository._get_bucket_type": {
            "name": "_get_bucket_type",
            "location": 32,
            "return": [
                "BucketType"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ]
            }
        },
        "EventRepository.get_events": {
            "name": "get_events",
            "location": 42,
            "return": [
                "Events"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "start_date": [
                    "datetime"
                ],
                "end_date": [
                    "datetime"
                ]
            }
        },
        "EventRepository.get_bucket_events": {
            "name": "get_bucket_events",
            "location": 53,
            "return": [
                "Dict[(str, Events)]"
            ],
            "arguments": {
                "self": [],
                "buckets": [
                    "List[str]"
                ],
                "start_date": [
                    "datetime"
                ],
                "end_date": [
                    "datetime"
                ]
            }
        }
    },
    "spytrack-master/spytrack/analyze/matched_event.py": {
        "MatchedEvent.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "str"
                ],
                "rule_id": [
                    "str"
                ],
                "event": [
                    "Event"
                ]
            }
        }
    },
    "spytrack-master/spytrack/analyze/stats.py": {
        "get_pie_chart": {
            "name": "get_pie_chart",
            "location": 17,
            "return": [
                "PieChartData"
            ],
            "arguments": {
                "matched_events": [
                    "List[MatchedEvent]"
                ]
            }
        },
        "PieChartData.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PieChartData.count_event": {
            "name": "count_event",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "MatchedEvent"
                ]
            }
        }
    },
    "spytrack-master/spytrack/analyze/timeline.py": {
        "Timeline.create_from_bucket_events": {
            "name": "create_from_bucket_events",
            "location": 16,
            "return": [
                "'Timeline'"
            ],
            "arguments": {
                "bucket_type": [
                    "BucketType"
                ],
                "events": [
                    "Events"
                ]
            }
        },
        "Timeline.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_type": [
                    "BucketType"
                ],
                "points": [
                    "BucketPoints"
                ]
            }
        },
        "Timeline.intersect": {
            "name": "intersect",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spec_timeline": [
                    "'Timeline'"
                ],
                "intersect_condition": [
                    "CutCondition"
                ],
                "is_inclusive": [
                    "bool"
                ]
            }
        },
        "Timeline._is_source_of_point": {
            "name": "_is_source_of_point",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "BucketPoint"
                ]
            }
        },
        "Timeline._filter_empty_points": {
            "name": "_filter_empty_points",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cut_points": [
                    "BucketPoints"
                ]
            }
        },
        "Timeline.get_browser_app": {
            "name": "get_browser_app",
            "location": 116,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "app_timeline": [
                    "'Timeline'"
                ]
            }
        },
        "Timeline._get_event_at": {
            "name": "_get_event_at",
            "location": 127,
            "return": [
                "Optional[BucketPoint]"
            ],
            "arguments": {
                "self": [],
                "at_time": [
                    "datetime.datetime"
                ]
            }
        },
        "Timeline.get_events": {
            "name": "get_events",
            "location": 143,
            "return": [
                "Events"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spytrack-master/spytrack/analyze/__init__.py": {},
    "spytrack-master/spytrack/config/config.py": {
        "Rule.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "Rule.to_json": {
            "name": "to_json",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rule.__iter__": {
            "name": "__iter__",
            "location": 22,
            "return": [
                "Iterator[Dict[(str, str)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rule.__getitem__": {
            "name": "__getitem__",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        },
        "Rule.__contains__": {
            "name": "__contains__",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        },
        "Rule.__len__": {
            "name": "__len__",
            "location": 31,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rule.is_web": {
            "name": "is_web",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rule.is_app": {
            "name": "is_app",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.reinstate": {
            "name": "reinstate",
            "location": 43,
            "return": [
                "'Project'"
            ],
            "arguments": {
                "config_project": [
                    "Any"
                ]
            }
        },
        "Project.create_empty": {
            "name": "create_empty",
            "location": 49,
            "return": [
                "'Project'"
            ],
            "arguments": {
                "none_project": [
                    "str"
                ]
            }
        },
        "Project.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "rules": [
                    "List[Rule]"
                ]
            }
        },
        "Project.to_json": {
            "name": "to_json",
            "location": 56,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Projects.reinstate": {
            "name": "reinstate",
            "location": 65,
            "return": [
                "'Projects'"
            ],
            "arguments": {
                "config_projects": [
                    "List[Any]"
                ],
                "none_project": [
                    "str"
                ]
            }
        },
        "Projects.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "projects": [
                    "List[Project]"
                ],
                "none_project": [
                    "str"
                ]
            }
        },
        "Projects.__iter__": {
            "name": "__iter__",
            "location": 79,
            "return": [
                "Iterator[Project]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Projects.__len__": {
            "name": "__len__",
            "location": 82,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Projects.to_json": {
            "name": "to_json",
            "location": 85,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.parse": {
            "name": "parse",
            "location": 94,
            "return": [
                "'Config'"
            ],
            "arguments": {
                "values": [
                    "ConfigDict"
                ]
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int"
                ],
                "host": [
                    "str"
                ],
                "interval": [
                    "int"
                ],
                "run_daemon": [
                    "bool"
                ],
                "start_day_time": [
                    "str"
                ],
                "projects": [
                    "Projects"
                ]
            }
        },
        "Config.modify": {
            "name": "modify",
            "location": 116,
            "return": [
                "'Config'"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int"
                ],
                "host": [
                    "str"
                ],
                "interval": [
                    "int"
                ],
                "run_daemon": [
                    "bool"
                ],
                "projects": [
                    "List[Project]"
                ]
            }
        },
        "Config.get_full_address": {
            "name": "get_full_address",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spytrack-master/spytrack/config/config_storage.py": {
        "get_config_file": {
            "name": "get_config_file",
            "location": 9,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "FileConfigStorage.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "Path"
                ]
            }
        },
        "FileConfigStorage.load": {
            "name": "load",
            "location": 29,
            "return": [
                "Config"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileConfigStorage.save": {
            "name": "save",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Config"
                ]
            }
        },
        "FileConfigStorage._persist": {
            "name": "_persist",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dump": [
                    "ConfigDict"
                ]
            }
        }
    },
    "spytrack-master/spytrack/config/default_config.py": {},
    "spytrack-master/spytrack/config/__init__.py": {},
    "spytrack-master/spytrack/gui/chart.py": {
        "Chart.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Config"
                ],
                "chart_view": [
                    "QChartView"
                ]
            }
        },
        "Chart.draw": {
            "name": "draw",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chart_data": [
                    "PieChartData"
                ]
            }
        },
        "Chart.reload_config": {
            "name": "reload_config",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Config"
                ]
            }
        }
    },
    "spytrack-master/spytrack/gui/gui.py": {
        "Gui.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_storage": [
                    "ConfigStorage"
                ],
                "stats_runner": [
                    "Runner"
                ]
            }
        },
        "Gui.run": {
            "name": "run",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gui.run_headless": {
            "name": "run_headless",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spytrack-master/spytrack/gui/main_page_widget.py": {
        "MainPageWidget.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_storage": [
                    "ConfigStorage"
                ],
                "reload_config": [
                    "Callable[([Config], None)]"
                ]
            }
        },
        "MainPageWidget._show_settings": {
            "name": "_show_settings",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainPageWidget._reload_config": {
            "name": "_reload_config",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Config"
                ]
            }
        },
        "MainPageWidget._setup_datetime": {
            "name": "_setup_datetime",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainPageWidget._get_last_day_beginning": {
            "name": "_get_last_day_beginning",
            "location": 75,
            "return": [
                "datetime"
            ],
            "arguments": {
                "self": [],
                "now_time": [
                    "datetime"
                ]
            }
        },
        "MainPageWidget._run_timer": {
            "name": "_run_timer",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainPageWidget._run_chart": {
            "name": "_run_chart",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainPageWidget._update_project_events": {
            "name": "_update_project_events",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainPageWidget._run_projects": {
            "name": "_run_projects",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chart_data": [
                    "PieChartData"
                ]
            }
        },
        "MainPageWidget._format_project_name": {
            "name": "_format_project_name",
            "location": 160,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "project_name": [
                    "str"
                ]
            }
        },
        "MainPageWidget._setup_datetime.state_changed": {
            "name": "state_changed",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "spytrack-master/spytrack/gui/main_window.py": {
        "MainWindow.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_storage": [
                    "ConfigStorage"
                ],
                "stats_runner": [
                    "Runner"
                ]
            }
        },
        "MainWindow.closeEvent": {
            "name": "closeEvent",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "QCloseEvent"
                ]
            }
        },
        "MainWindow._setup_main_widget": {
            "name": "_setup_main_widget",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spytrack-master/spytrack/gui/project_widget.py": {
        "ProjectWidget.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "Project"
                ],
                "on_remove_rule": [
                    "Callable[(['ProjectWidget'], None)]"
                ],
                "on_edit_project_name": [
                    "Callable[([str], None)]"
                ]
            }
        },
        "ProjectWidget._setup_rules": {
            "name": "_setup_rules",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "Project"
                ]
            }
        },
        "ProjectWidget._create_rule_widget": {
            "name": "_create_rule_widget",
            "location": 34,
            "return": [
                "RuleWidget"
            ],
            "arguments": {
                "self": [],
                "layout": [
                    "QVBoxLayout"
                ],
                "rule": [
                    "Rule"
                ]
            }
        },
        "ProjectWidget.remove_from": {
            "name": "remove_from",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layout": [
                    "QVBoxLayout"
                ]
            }
        },
        "ProjectWidget.project": {
            "name": "project",
            "location": 55,
            "return": [
                "Project"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spytrack-master/spytrack/gui/rule_widget.py": {
        "RuleWidget.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "Rule"
                ]
            }
        },
        "RuleWidget.register_callbacks": {
            "name": "register_callbacks",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "add_rule": [
                    "Callable[([], None)]"
                ],
                "remove_rule": [
                    "Callable[([], None)]"
                ]
            }
        },
        "RuleWidget._type_box_changed": {
            "name": "_type_box_changed",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuleWidget.remove_from": {
            "name": "remove_from",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layout": [
                    "QVBoxLayout"
                ]
            }
        },
        "RuleWidget.rule": {
            "name": "rule",
            "location": 55,
            "return": [
                "Rule"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuleWidget._add_value": {
            "name": "_add_value",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[(str, str)]"
                ],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        }
    },
    "spytrack-master/spytrack/gui/settings_window.py": {
        "SettingsWindow.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Config"
                ],
                "config_storage": [
                    "ConfigStorage"
                ],
                "reload_config": [
                    "Callable[([Config], None)]"
                ]
            }
        },
        "SettingsWindow.accept": {
            "name": "accept",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingsWindow._get_projects": {
            "name": "_get_projects",
            "location": 35,
            "return": [
                "List[Project]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingsWindow._setup_server_settings": {
            "name": "_setup_server_settings",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingsWindow._setup_projects_settings": {
            "name": "_setup_projects_settings",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingsWindow._create_project_widget": {
            "name": "_create_project_widget",
            "location": 67,
            "return": [
                "ProjectWidget"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "Project"
                ]
            }
        },
        "SettingsWindow._add_callback": {
            "name": "_add_callback",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingsWindow._remove_callback": {
            "name": "_remove_callback",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widget": [
                    "ProjectWidget"
                ]
            }
        },
        "SettingsWindow._edit_project_name": {
            "name": "_edit_project_name",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "SettingsWindow._modify_config": {
            "name": "_modify_config",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingsWindow._setup_server_settings._state_changed": {
            "name": "_state_changed",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "spytrack-master/spytrack/gui/tray.py": {
        "Tray.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "QtCore.QObject"
                ],
                "main_window": [
                    "Optional[MainWindow]"
                ]
            }
        },
        "Tray._create_main_window": {
            "name": "_create_main_window",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "main_window": [
                    "MainWindow"
                ],
                "tray_menu": [
                    "QMenu"
                ]
            }
        },
        "Tray._left_click": {
            "name": "_left_click",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "int"
                ]
            }
        },
        "Tray._show_hide_main_window": {
            "name": "_show_hide_main_window",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spytrack-master/spytrack/gui/__init__.py": {},
    "spytrack-master/spytrack/runner/afk.py": {
        "afk_watcher_run": {
            "name": "afk_watcher_run",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AfkRunner.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "poll_time": [
                    "int"
                ],
                "timeout": [
                    "int"
                ]
            }
        },
        "AfkRunner.ping": {
            "name": "ping",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "afk": [
                    "bool"
                ],
                "timestamp": [
                    "datetime"
                ],
                "duration": [
                    "float"
                ]
            }
        },
        "AfkRunner.run": {
            "name": "run",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AfkRunner.stop": {
            "name": "stop",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AfkRunner.heartbeat_loop": {
            "name": "heartbeat_loop",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spytrack-master/spytrack/runner/runner.py": {
        "Runner.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Config"
                ]
            }
        },
        "Runner.run_all": {
            "name": "run_all",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Runner.reload": {
            "name": "reload",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Config"
                ]
            }
        },
        "Runner.stop": {
            "name": "stop",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Runner.__enter__": {
            "name": "__enter__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Runner.__exit__": {
            "name": "__exit__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "Optional[TracebackType]"
                ]
            }
        }
    },
    "spytrack-master/spytrack/runner/server.py": {
        "server_run": {
            "name": "server_run",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "spytrack-master/spytrack/runner/windows.py": {
        "windows_watcher_run": {
            "name": "windows_watcher_run",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "spytrack-master/spytrack/runner/__init__.py": {},
    "spytrack-master/tests/__init__.py": {},
    "spytrack-master/tests/integration/test_file_config_storage.py": {
        "TestFileConfigStorage.test_load_non_existing": {
            "name": "test_load_non_existing",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileConfigStorage.test_save_load": {
            "name": "test_save_load",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spytrack-master/tests/integration/__init__.py": {
        "get_current_directory": {
            "name": "get_current_directory",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "spytrack-master/tests/unit/dataset.py": {
        "get_date": {
            "name": "get_date",
            "location": 6,
            "return": [
                "datetime.datetime"
            ],
            "arguments": {
                "seconds": [
                    "int"
                ]
            }
        },
        "get_events": {
            "name": "get_events",
            "location": 12,
            "return": [
                "List[Event]"
            ],
            "arguments": {
                "bucket_id": [
                    "str"
                ]
            }
        }
    },
    "spytrack-master/tests/unit/test_cached_event_repository.py": {
        "TestEventRepository.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventRepository.test_get_cached_events": {
            "name": "test_get_cached_events",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventRepository.check_events": {
            "name": "check_events",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "checked_events": [
                    "List[Tuple[(str, str, int, int)]]"
                ],
                "events": [
                    "List[Event]"
                ]
            }
        }
    },
    "spytrack-master/tests/unit/test_config.py": {
        "TestConfig.test_created": {
            "name": "test_created",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spytrack-master/tests/unit/test_event.py": {
        "TestEvent.test_stringify_data": {
            "name": "test_stringify_data",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEvent.test_wrong_data": {
            "name": "test_wrong_data",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spytrack-master/tests/unit/test_events_analyzer.py": {
        "TestAnalyzer.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnalyzer.test_analyze_events": {
            "name": "test_analyze_events",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spytrack-master/tests/unit/test_event_repository.py": {
        "TestEventRepository.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventRepository.test_get_buckets": {
            "name": "test_get_buckets",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventRepository.test_get_events": {
            "name": "test_get_events",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventRepository.check_events": {
            "name": "check_events",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "checked_events": [
                    "List[Tuple[(str, str, int, int)]]"
                ],
                "events": [
                    "List[Event]"
                ]
            }
        }
    },
    "spytrack-master/tests/unit/test_timeline.py": {
        "TestTimeline.test_intersect_simple": {
            "name": "test_intersect_simple",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_data": [
                    "TimelineData"
                ],
                "afk_data": [
                    "TimelineData"
                ],
                "inclusive_results": [
                    "TimelineResults"
                ],
                "exclusive_results": [
                    "TimelineResults"
                ]
            }
        },
        "TestTimeline.test_intersect": {
            "name": "test_intersect",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeline.assert_timeline": {
            "name": "assert_timeline",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeline": [
                    "Timeline"
                ],
                "check_points": [
                    "TimelineResults"
                ]
            }
        },
        "TestTimeline.test_get_events": {
            "name": "test_get_events",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spytrack-master/tests/unit/__init__.py": {}
}
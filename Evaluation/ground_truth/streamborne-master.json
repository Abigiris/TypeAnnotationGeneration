{
    "streamborne-master/setup.py": {
        "get_readme": {
            "name": "get_readme",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "get_requirements": {
            "name": "get_requirements",
            "location": 8,
            "return": [],
            "arguments": {
                "name": []
            }
        }
    },
    "streamborne-master/streamborne/option.py": {
        "Option.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Optional[T]"
                ]
            }
        },
        "Option.get": {
            "name": "get",
            "location": 14,
            "return": [
                "T@@"
            ],
            "arguments": {
                "self": []
            }
        },
        "Option.is_present": {
            "name": "is_present",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Option.is_empty": {
            "name": "is_empty",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Option.if_present": {
            "name": "if_present",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "Callable[([T], None)]"
                ]
            }
        },
        "Option.filter": {
            "name": "filter",
            "location": 30,
            "return": [
                "'Option[T]'"
            ],
            "arguments": {
                "self": [],
                "predicate": [
                    "Callable[([T], bool)]"
                ]
            }
        },
        "Option.map": {
            "name": "map",
            "location": 36,
            "return": [
                "'Option[U]'"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "Callable[([T], U)]"
                ]
            }
        },
        "Option.flat_map": {
            "name": "flat_map",
            "location": 42,
            "return": [
                "'Option[U]'"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "Callable[([T], 'Option[U]')]"
                ]
            }
        },
        "Option.or_else": {
            "name": "or_else",
            "location": 48,
            "return": [
                "T@@"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T@@"
                ]
            }
        },
        "Option.or_else_get": {
            "name": "or_else_get",
            "location": 54,
            "return": [
                "T@@"
            ],
            "arguments": {
                "self": [],
                "supplier": [
                    "Callable[([], T)]"
                ]
            }
        },
        "Option.or_else_throw": {
            "name": "or_else_throw",
            "location": 60,
            "return": [
                "T@@"
            ],
            "arguments": {
                "self": [],
                "exception_supplier": [
                    "Callable[([], E)]"
                ]
            }
        },
        "Option.or_none": {
            "name": "or_none",
            "location": 66,
            "return": [
                "'Optional[T]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Option.stream": {
            "name": "stream",
            "location": 69,
            "return": [
                "'Stream[T]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Option.of": {
            "name": "of",
            "location": 74,
            "return": [
                "'Option[T]'"
            ],
            "arguments": {
                "value": [
                    "T@@"
                ]
            }
        },
        "Option.of_nullable": {
            "name": "of_nullable",
            "location": 81,
            "return": [
                "'Option[T]'"
            ],
            "arguments": {
                "value": [
                    "Optional[T]"
                ]
            }
        },
        "Option.empty": {
            "name": "empty",
            "location": 88,
            "return": [
                "'Option[T]'"
            ],
            "arguments": {}
        }
    },
    "streamborne-master/streamborne/stream.py": {
        "Stream.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Iterable[T]"
                ]
            }
        },
        "Stream.filter": {
            "name": "filter",
            "location": 30,
            "return": [
                "'Stream[T]'"
            ],
            "arguments": {
                "self": [],
                "predicate": [
                    "Predicate"
                ]
            }
        },
        "Stream.filterfalse": {
            "name": "filterfalse",
            "location": 33,
            "return": [
                "'Stream[T]'"
            ],
            "arguments": {
                "self": [],
                "predicate": [
                    "Predicate"
                ]
            }
        },
        "Stream.map": {
            "name": "map",
            "location": 36,
            "return": [
                "'Stream[U]'"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "Mapper"
                ]
            }
        },
        "Stream.takewhile": {
            "name": "takewhile",
            "location": 39,
            "return": [
                "'Stream[T]'"
            ],
            "arguments": {
                "self": [],
                "predicate": [
                    "Predicate"
                ]
            }
        },
        "Stream.dropwhile": {
            "name": "dropwhile",
            "location": 42,
            "return": [
                "'Stream[T]'"
            ],
            "arguments": {
                "self": [],
                "predicate": [
                    "Predicate"
                ]
            }
        },
        "Stream.reversed": {
            "name": "reversed",
            "location": 45,
            "return": [
                "'Stream[T]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream.sorted": {
            "name": "sorted",
            "location": 51,
            "return": [
                "'Stream[T]'"
            ],
            "arguments": {
                "self": [],
                "key_selector": [
                    "Optional[Mapper]"
                ],
                "reverse": [
                    "bool"
                ]
            }
        },
        "Stream.accumulate": {
            "name": "accumulate",
            "location": 54,
            "return": [
                "'Stream[T]'"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "Callable[([T, T], T)]"
                ]
            }
        },
        "Stream.chain": {
            "name": "chain",
            "location": 58,
            "return": [
                "'Stream[T]'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[T]"
                ]
            }
        },
        "Stream.chain_from_iterable": {
            "name": "chain_from_iterable",
            "location": 61,
            "return": [
                "'Stream[T]'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[Iterable[T]]"
                ]
            }
        },
        "Stream.groupby": {
            "name": "groupby",
            "location": 64,
            "return": [
                "'Stream[Tuple[T, Iterable[T]]]'"
            ],
            "arguments": {
                "self": [],
                "key_selector": [
                    "Callable[([T], T)]"
                ]
            }
        },
        "Stream.cycle": {
            "name": "cycle",
            "location": 68,
            "return": [
                "'Stream[T]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream.zip": {
            "name": "zip",
            "location": 71,
            "return": [
                "'Stream[Tuple[T, U]]'"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "Iterable[U]"
                ]
            }
        },
        "Stream.islice": {
            "name": "islice",
            "location": 75,
            "return": [
                "'Stream[T]'"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int"
                ],
                "stop": [
                    "int"
                ]
            }
        },
        "Stream.all": {
            "name": "all",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream.any": {
            "name": "any",
            "location": 82,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream.apply": {
            "name": "apply",
            "location": 85,
            "return": [
                "U@@"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "Callable[([Iterable[T]], U)]"
                ]
            }
        },
        "Stream.len": {
            "name": "len",
            "location": 88,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream.max": {
            "name": "max",
            "location": 94,
            "return": [
                "T@@"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream.reduce": {
            "name": "reduce",
            "location": 97,
            "return": [
                "U@@"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "Callable[([U, T], U)]"
                ],
                "initial": [
                    "U@@"
                ]
            }
        },
        "Stream.sum": {
            "name": "sum",
            "location": 101,
            "return": [
                "T@@"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "T@@"
                ]
            }
        },
        "Stream.tee": {
            "name": "tee",
            "location": 107,
            "return": [
                "Tuple[('Stream[T]', 'Stream[T]')]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream.dict": {
            "name": "dict",
            "location": 114,
            "return": [
                "Dict[(K, U)]"
            ],
            "arguments": {
                "self": [],
                "key_selector": [
                    "Callable[([T], K)]"
                ],
                "value_selector": [
                    "Mapper"
                ]
            }
        },
        "Stream.list": {
            "name": "list",
            "location": 120,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream.set": {
            "name": "set",
            "location": 123,
            "return": [
                "Set[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream.next": {
            "name": "next",
            "location": 127,
            "return": [
                "'Stream[U]'"
            ],
            "arguments": {
                "self": [],
                "next_function": [
                    "Callable[([Iterable[T]], Iterable[U])]"
                ]
            }
        },
        "Stream.terminate": {
            "name": "terminate",
            "location": 134,
            "return": [
                "U@@"
            ],
            "arguments": {
                "self": [],
                "terminate": [
                    "Callable[([Iterable[T]], U)]"
                ]
            }
        },
        "Stream.from_list": {
            "name": "from_list",
            "location": 143,
            "return": [
                "'Stream[T]'"
            ],
            "arguments": {
                "data": [
                    "Iterable[T]"
                ]
            }
        },
        "Stream.from_option": {
            "name": "from_option",
            "location": 147,
            "return": [
                "'Stream[T]'"
            ],
            "arguments": {
                "option": [
                    "Option[T]"
                ]
            }
        },
        "Stream.tee.f": {
            "name": "f",
            "location": 108,
            "return": [
                "Tuple[('Stream[T]', 'Stream[T]')]"
            ],
            "arguments": {
                "xs": [
                    "Iterable[T]"
                ]
            }
        }
    },
    "streamborne-master/streamborne/__init__.py": {},
    "streamborne-master/test/test_option.py": {
        "OptionTestCase.setUp": {
            "name": "setUp",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptionTestCase.test_of": {
            "name": "test_of",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptionTestCase.test_of_nullable": {
            "name": "test_of_nullable",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptionTestCase.test_empty": {
            "name": "test_empty",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptionTestCase.test_is_present": {
            "name": "test_is_present",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptionTestCase.test_is_empty": {
            "name": "test_is_empty",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptionTestCase.test_get": {
            "name": "test_get",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptionTestCase.test_if_present": {
            "name": "test_if_present",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptionTestCase.test_filter": {
            "name": "test_filter",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptionTestCase.test_map": {
            "name": "test_map",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptionTestCase.test_flat_map": {
            "name": "test_flat_map",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptionTestCase.test_or_else": {
            "name": "test_or_else",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptionTestCase.test_or_else_get": {
            "name": "test_or_else_get",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptionTestCase.test_or_else_throw": {
            "name": "test_or_else_throw",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptionTestCase.test_or_none": {
            "name": "test_or_none",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptionTestCase.test_stream": {
            "name": "test_stream",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "streamborne-master/test/test_stream.py": {
        "StreamTestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StreamTestCase.from_list": {
            "name": "from_list",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StreamTestCase.test_filter": {
            "name": "test_filter",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StreamTestCase.test_map": {
            "name": "test_map",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StreamTestCase.test_from_list": {
            "name": "test_from_list",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StreamTestCase.test_from_option": {
            "name": "test_from_option",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    }
}
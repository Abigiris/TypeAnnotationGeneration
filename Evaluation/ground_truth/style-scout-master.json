{
    "style-scout-master/category.py": {
        "Category.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict"
                ]
            }
        },
        "Category.necessary_tags": {
            "name": "necessary_tags",
            "location": 47,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Category.by_id": {
            "name": "by_id",
            "location": 51,
            "return": [
                "'Category'"
            ],
            "arguments": {
                "cls": [],
                "id": [
                    "int"
                ]
            }
        },
        "Category.search_categories": {
            "name": "search_categories",
            "location": 55,
            "return": [
                "List['Category']"
            ],
            "arguments": {
                "cls": [],
                "api": [
                    "ShoppingApi"
                ],
                "search_term_filter": [
                    "Dict[(int, Tuple[(str, ...)])]"
                ],
                "root_category": [
                    "int"
                ]
            }
        }
    },
    "style-scout-master/ebay_download.py": {
        "parse_command_line": {
            "name": "parse_command_line",
            "location": 16,
            "return": [
                "Namespace"
            ],
            "arguments": {}
        },
        "print_tags": {
            "name": "print_tags",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "tags": [
                    "Dict[(str, int)]"
                ],
                "num_most_popular": [
                    "int"
                ]
            }
        },
        "update_items": {
            "name": "update_items",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "items": [
                    "Items"
                ],
                "categories": [
                    "List[Category]"
                ],
                "page": [
                    "int"
                ],
                "per_page": [
                    "bool"
                ]
            }
        },
        "download_item_page": {
            "name": "download_item_page",
            "location": 90,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "items": [
                    "Items"
                ],
                "categories": [
                    "List[Category]"
                ],
                "io": [
                    "EbayDownloaderIO"
                ]
            }
        },
        "delete_images_not_in_items": {
            "name": "delete_images_not_in_items",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "items": [
                    "Items"
                ],
                "image_base_dir": [
                    "str"
                ]
            }
        }
    },
    "style-scout-master/like_items.py": {
        "parse_command_line": {
            "name": "parse_command_line",
            "location": 18,
            "return": [
                "Namespace"
            ],
            "arguments": {}
        },
        "LikeItemsUI.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "gui"
                ],
                "items": [
                    "Items"
                ],
                "start": [
                    "int"
                ],
                "size": [
                    "int"
                ],
                "liked_only": [
                    "bool"
                ]
            }
        },
        "LikeItemsUI._setup_key_bindings": {
            "name": "_setup_key_bindings",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LikeItemsUI._setup_ui": {
            "name": "_setup_ui",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LikeItemsUI.downscale": {
            "name": "downscale",
            "location": 76,
            "return": [
                "Image"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "Image"
                ]
            }
        },
        "LikeItemsUI.press": {
            "name": "press",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "btn": [
                    "str"
                ]
            }
        },
        "LikeItemsUI.stop": {
            "name": "stop",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "LikeItemsUI.like": {
            "name": "like",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "LikeItemsUI.dislike": {
            "name": "dislike",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "LikeItemsUI.back": {
            "name": "back",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "LikeItemsUI.next": {
            "name": "next",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "LikeItemsUI.next_item": {
            "name": "next_item",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LikeItemsUI.update_content": {
            "name": "update_content",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LikeItemsUI.print_summary": {
            "name": "print_summary",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "style-scout-master/network_types.py": {
        "model": {
            "name": "model",
            "location": 11,
            "return": [
                "Model"
            ],
            "arguments": {
                "network_type": [
                    "Model"
                ],
                "input_shape": [
                    "Tuple[(int, ...)]"
                ],
                "classes": [
                    "int"
                ],
                "connected_layers": [
                    "Tuple[(int, ...)]"
                ]
            }
        },
        "inception": {
            "name": "inception",
            "location": 28,
            "return": [
                "Model"
            ],
            "arguments": {
                "input_shape": [
                    "Tuple[(int, ...)]"
                ],
                "classes": [
                    "int"
                ],
                "connected_layers": [
                    "Tuple[(int, ...)]"
                ]
            }
        },
        "xception": {
            "name": "xception",
            "location": 32,
            "return": [
                "Model"
            ],
            "arguments": {
                "input_shape": [
                    "Tuple[(int, ...)]"
                ],
                "classes": [
                    "int"
                ],
                "connected_layers": [
                    "Tuple[(int, ...)]"
                ]
            }
        },
        "vgg16": {
            "name": "vgg16",
            "location": 36,
            "return": [
                "Model"
            ],
            "arguments": {
                "input_shape": [
                    "Tuple[(int, ...)]"
                ],
                "classes": [
                    "int"
                ],
                "connected_layers": [
                    "Tuple[(int, ...)]"
                ]
            }
        },
        "vgg19": {
            "name": "vgg19",
            "location": 40,
            "return": [
                "Model"
            ],
            "arguments": {
                "input_shape": [
                    "Tuple[(int, ...)]"
                ],
                "classes": [
                    "int"
                ],
                "connected_layers": [
                    "Tuple[(int, ...)]"
                ]
            }
        },
        "resnet50": {
            "name": "resnet50",
            "location": 44,
            "return": [
                "Model"
            ],
            "arguments": {
                "input_shape": [
                    "Tuple[(int, ...)]"
                ],
                "classes": [
                    "int"
                ],
                "connected_layers": [
                    "Tuple[(int, ...)]"
                ]
            }
        },
        "inception_resnet_v2": {
            "name": "inception_resnet_v2",
            "location": 48,
            "return": [
                "Model"
            ],
            "arguments": {
                "input_shape": [
                    "Tuple[(int, ...)]"
                ],
                "classes": [
                    "int"
                ],
                "connected_layers": [
                    "Tuple[(int, ...)]"
                ]
            }
        },
        "densenet121": {
            "name": "densenet121",
            "location": 54,
            "return": [
                "Model"
            ],
            "arguments": {
                "input_shape": [
                    "Tuple[(int, ...)]"
                ],
                "classes": [
                    "int"
                ],
                "connected_layers": [
                    "Tuple[(int, ...)]"
                ]
            }
        },
        "densenet169": {
            "name": "densenet169",
            "location": 60,
            "return": [
                "Model"
            ],
            "arguments": {
                "input_shape": [
                    "Tuple[(int, ...)]"
                ],
                "classes": [
                    "int"
                ],
                "connected_layers": [
                    "Tuple[(int, ...)]"
                ]
            }
        },
        "densenet201": {
            "name": "densenet201",
            "location": 66,
            "return": [
                "Model"
            ],
            "arguments": {
                "input_shape": [
                    "Tuple[(int, ...)]"
                ],
                "classes": [
                    "int"
                ],
                "connected_layers": [
                    "Tuple[(int, ...)]"
                ]
            }
        },
        "nasnet": {
            "name": "nasnet",
            "location": 72,
            "return": [
                "Model"
            ],
            "arguments": {
                "input_shape": [
                    "Tuple[(int, ...)]"
                ],
                "classes": [
                    "int"
                ],
                "connected_layers": [
                    "Tuple[(int, ...)]"
                ]
            }
        }
    },
    "style-scout-master/predict.py": {
        "parse_command_line": {
            "name": "parse_command_line",
            "location": 18,
            "return": [
                "Namespace"
            ],
            "arguments": {}
        },
        "get_items": {
            "name": "get_items",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "item_urls": [
                    "List[str]"
                ]
            }
        },
        "Predictor.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "Namespace"
                ]
            }
        },
        "Predictor.setup_model": {
            "name": "setup_model",
            "location": 74,
            "return": [
                "Model"
            ],
            "arguments": {
                "self": [],
                "loss_function": [
                    "str"
                ],
                "optimizer": [
                    "str"
                ]
            }
        },
        "Predictor.predict": {
            "name": "predict",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_files": [
                    "List[str]"
                ]
            }
        }
    },
    "style-scout-master/run_performance_analysis.py": {
        "read_tuple": {
            "name": "read_tuple",
            "location": 32,
            "return": [
                "Callable[([str], Tuple[(Any, ...)])]"
            ],
            "arguments": {
                "cast": [
                    "Callable[([str], Any)]"
                ],
                "delimiter": [
                    "str"
                ]
            }
        },
        "tuple_string": {
            "name": "tuple_string",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [
                    "Tuple"
                ]
            }
        },
        "layers_string": {
            "name": "layers_string",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "layers": [
                    "Tuple[(Tuple[(int, ...)], ...)]"
                ]
            }
        },
        "parse_command_line": {
            "name": "parse_command_line",
            "location": 53,
            "return": [
                "Namespace"
            ],
            "arguments": {}
        },
        "time_string": {
            "name": "time_string",
            "location": 84,
            "return": [],
            "arguments": {
                "time_line": []
            }
        },
        "training_run": {
            "name": "training_run",
            "location": 92,
            "return": [
                "Tuple[(float, str)]"
            ],
            "arguments": {
                "epochs": [
                    "int"
                ],
                "weights_file": [
                    "str"
                ],
                "size": [
                    "int"
                ],
                "layers": [
                    "Tuple[(int, ...)]"
                ],
                "algo": [
                    "str"
                ],
                "optimizer": [
                    "str"
                ],
                "item_file": [
                    "str"
                ],
                "batch_size": [
                    "int"
                ],
                "likes_only": [
                    "bool"
                ]
            }
        },
        "current_num_epochs": {
            "name": "current_num_epochs",
            "location": 132,
            "return": [
                "int"
            ],
            "arguments": {
                "epochs": [
                    "Tuple[(int, ...)]"
                ],
                "current_epoch": [
                    "int"
                ]
            }
        },
        "evaluate": {
            "name": "evaluate",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {
                "size": [
                    "int"
                ],
                "layers": [
                    "Tuple[(int, ...)]"
                ],
                "algo": [
                    "str"
                ],
                "optimizer": [
                    "str"
                ],
                "epochs": [
                    "Tuple[(int, ...)]"
                ],
                "item_file": [
                    "str"
                ],
                "batch_size": [
                    "int"
                ],
                "likes_only": [
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "Namespace"
                ]
            }
        },
        "header": {
            "name": "header",
            "location": 177,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "epochs": [
                    "Tuple[(int, ...)]"
                ]
            }
        },
        "read_tuple.do_read": {
            "name": "do_read",
            "location": 35,
            "return": [
                "Tuple[(Any, ...)]"
            ],
            "arguments": {
                "args": [
                    "str"
                ]
            }
        }
    },
    "style-scout-master/train.py": {
        "parse_command_line": {
            "name": "parse_command_line",
            "location": 26,
            "return": [
                "Namespace"
            ],
            "arguments": {}
        },
        "TrainingRunner.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "Namespace"
                ]
            }
        },
        "TrainingRunner.run": {
            "name": "run",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainingRunner.callbacks": {
            "name": "callbacks",
            "location": 139,
            "return": [
                "List[Callback]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainingRunner.run_training": {
            "name": "run_training",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainingRunner.run_test": {
            "name": "run_test",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainingRunner.run_demo": {
            "name": "run_demo",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainingRunner._get_image_data": {
            "name": "_get_image_data",
            "location": 189,
            "return": [
                "EbayDataGenerator"
            ],
            "arguments": {
                "self": [],
                "test_set_share": [
                    "float"
                ],
                "random_seed": [
                    "int"
                ]
            }
        },
        "TrainingRunner.setup_model": {
            "name": "setup_model",
            "location": 197,
            "return": [
                "Model"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainingRunner._prepare_items": {
            "name": "_prepare_items",
            "location": 210,
            "return": [
                "Tuple[(Items, Dict[(str, int)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainingRunner._fit_type": {
            "name": "_fit_type",
            "location": 235,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainingRunner.decode_network_name": {
            "name": "decode_network_name",
            "location": 240,
            "return": [
                "Callable"
            ],
            "arguments": {
                "network_type": [
                    "str"
                ]
            }
        }
    },
    "style-scout-master/acquisition/ebay_downloader_io.py": {
        "_add_liked_items": {
            "name": "_add_liked_items",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "EbayShoppingAPI"
                ],
                "items": [
                    "Items"
                ],
                "category": [
                    "Category"
                ],
                "liked_item_ids": [
                    "List[int]"
                ]
            }
        },
        "_filename": {
            "name": "_filename",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {
                "what": [
                    "str"
                ],
                "extension": [
                    "str"
                ]
            }
        },
        "_check_constructor_arguments_valid": {
            "name": "_check_constructor_arguments_valid",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "image_size": [
                    "Optional[int]"
                ],
                "items_file": [
                    "Optional[str]"
                ],
                "weights_file": [
                    "Optional[str]"
                ],
                "likes_file": [
                    "Optional[str]"
                ]
            }
        },
        "EbayDownloaderIO.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_dir": [
                    "str"
                ],
                "image_size": [
                    "int"
                ],
                "items_file": [
                    "str"
                ],
                "weights_file": [
                    "str"
                ],
                "likes_file": [
                    "str"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "EbayDownloaderIO.get_filename": {
            "name": "get_filename",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "Optional[str]"
                ],
                "what": [
                    "str"
                ],
                "extension": [
                    "str"
                ]
            }
        },
        "EbayDownloaderIO.load_items": {
            "name": "load_items",
            "location": 37,
            "return": [
                "Items"
            ],
            "arguments": {
                "self": []
            }
        },
        "EbayDownloaderIO.save_items": {
            "name": "save_items",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "Items"
                ],
                "protocol": [
                    "int"
                ]
            }
        },
        "EbayDownloaderIO.import_likes": {
            "name": "import_likes",
            "location": 66,
            "return": [
                "Items"
            ],
            "arguments": {
                "self": [],
                "api": [
                    "EbayShoppingAPI"
                ],
                "items": [
                    "Items"
                ]
            }
        },
        "EbayDownloaderIO.load_weights": {
            "name": "load_weights",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Model"
                ],
                "fit_type": [
                    "str"
                ],
                "num_items": [
                    "int"
                ]
            }
        },
        "EbayDownloaderIO.save_weights": {
            "name": "save_weights",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Model"
                ],
                "fit_type": [
                    "str"
                ],
                "num_items": [
                    "int"
                ]
            }
        },
        "EbayDownloaderIO.weights_file": {
            "name": "weights_file",
            "location": 115,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "fit_type": [
                    "str"
                ],
                "num_items": [
                    "int"
                ]
            }
        },
        "EbayDownloaderIO._number_to_string": {
            "name": "_number_to_string",
            "location": 124,
            "return": [
                "str"
            ],
            "arguments": {
                "num_items": [
                    "int"
                ]
            }
        },
        "EbayDownloaderIO._weights_file_base": {
            "name": "_weights_file_base",
            "location": 131,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "weights_file": [
                    "Optional[str]"
                ]
            }
        },
        "EbayDownloaderIO._likes_filename": {
            "name": "_likes_filename",
            "location": 138,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "likes_file": [
                    "Optional[str]"
                ]
            }
        }
    },
    "style-scout-master/acquisition/ebay_item.py": {},
    "style-scout-master/acquisition/ebay_shopping_api.py": {
        "EbayShoppingAPI.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "Dict[(str, str)]"
                ],
                "siteid": [
                    "int"
                ],
                "config_file": [
                    "str"
                ],
                "debug": [
                    "bool"
                ],
                "warnings": [
                    "bool"
                ],
                "timeout": [
                    "int"
                ]
            }
        },
        "EbayShoppingAPI.get_site_code": {
            "name": "get_site_code",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "siteid": [
                    "int"
                ]
            }
        },
        "EbayShoppingAPI.categories": {
            "name": "categories",
            "location": 35,
            "return": [
                "List[Category]"
            ],
            "arguments": {
                "self": [],
                "root_id": [
                    "int"
                ]
            }
        },
        "EbayShoppingAPI.get_category_items": {
            "name": "get_category_items",
            "location": 43,
            "return": [
                "Items"
            ],
            "arguments": {
                "self": [],
                "category": [
                    "Category"
                ],
                "limit": [
                    "int"
                ],
                "page": [
                    "int"
                ]
            }
        },
        "EbayShoppingAPI.get_item": {
            "name": "get_item",
            "location": 62,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "int"
                ]
            }
        }
    },
    "style-scout-master/acquisition/item.py": {
        "is_image_file": {
            "name": "is_image_file",
            "location": 205,
            "return": [
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "Item.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api": [
                    "ShoppingApi"
                ],
                "category": [
                    "Category"
                ],
                "item_id": [
                    "int"
                ]
            }
        },
        "Item.like": {
            "name": "like",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item.unlike": {
            "name": "unlike",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item.is_liked": {
            "name": "is_liked",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item.valid": {
            "name": "valid",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item.download_images": {
            "name": "download_images",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item.set_tags": {
            "name": "set_tags",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "all_available_tags": [
                    "Set[str]"
                ]
            }
        },
        "Item.get_possible_tags": {
            "name": "get_possible_tags",
            "location": 94,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "add_undefined": [
                    "bool"
                ]
            }
        },
        "Item.process_tag": {
            "name": "process_tag",
            "location": 108,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "tag_label": [
                    "str"
                ],
                "tag_value": [
                    "str"
                ]
            }
        },
        "Item.url_to_file": {
            "name": "url_to_file",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "url": [
                    "str"
                ]
            }
        },
        "Item._show_image": {
            "name": "_show_image",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "filename": [
                    "str"
                ],
                "show": [
                    "bool"
                ]
            }
        },
        "Item.__str__": {
            "name": "__str__",
            "location": 147,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item._clean_description": {
            "name": "_clean_description",
            "location": 159,
            "return": [
                "str"
            ],
            "arguments": {
                "description": [
                    "str"
                ]
            }
        },
        "Item._get_specifics": {
            "name": "_get_specifics",
            "location": 166,
            "return": [
                "Dict"
            ],
            "arguments": {
                "item_specifics": [
                    "Dict"
                ]
            }
        },
        "Item._tags_for_tag_type": {
            "name": "_tags_for_tag_type",
            "location": 187,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "property": [
                    "str"
                ],
                "add_undefined": [
                    "bool"
                ]
            }
        },
        "Item._tags_for_property": {
            "name": "_tags_for_property",
            "location": 195,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "property": [
                    "str"
                ],
                "tag_label": [
                    "str"
                ]
            }
        }
    },
    "style-scout-master/acquisition/items.py": {
        "Items.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_items": [
                    "List[Item]"
                ],
                "verbose": [
                    "bool"
                ],
                "is_download_complete": [
                    "bool"
                ]
            }
        },
        "Items.__iter__": {
            "name": "__iter__",
            "location": 23,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Items.__len__": {
            "name": "__len__",
            "location": 26,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Items.__getitem__": {
            "name": "__getitem__",
            "location": 37,
            "return": [
                "Union[('Items', Item)]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "Union[(slice, int)]"
                ]
            }
        },
        "Items.append": {
            "name": "append",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Item"
                ]
            }
        },
        "Items.extend": {
            "name": "extend",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "'Items'"
                ]
            }
        },
        "Items.categories": {
            "name": "categories",
            "location": 51,
            "return": [
                "Set[Category]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Items.filter": {
            "name": "filter",
            "location": 54,
            "return": [
                "'Items'"
            ],
            "arguments": {
                "self": [],
                "category": [
                    "Category"
                ]
            }
        },
        "Items.remove_duplicates": {
            "name": "remove_duplicates",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Items.remove_crap": {
            "name": "remove_crap",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Items.download_images": {
            "name": "download_images",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Items.get_valid_tags": {
            "name": "get_valid_tags",
            "location": 102,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "self": [],
                "min_count": [
                    "int"
                ]
            }
        },
        "Items.count_all_tags": {
            "name": "count_all_tags",
            "location": 115,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Items.set_liked": {
            "name": "set_liked",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "int"
                ]
            }
        },
        "Items.filter_items_without_complete_tags": {
            "name": "filter_items_without_complete_tags",
            "location": 138,
            "return": [
                "'Items'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Items.update_tags": {
            "name": "update_tags",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "valid_tags": [
                    "Dict[(str, int)]"
                ]
            }
        },
        "Items.equal_number_of_liked_and_unliked": {
            "name": "equal_number_of_liked_and_unliked",
            "location": 159,
            "return": [
                "'Items'"
            ],
            "arguments": {
                "self": [],
                "random_seed": [
                    "int"
                ]
            }
        },
        "Items.filter_items_without_complete_tags.has_complete_tags": {
            "name": "has_complete_tags",
            "location": 145,
            "return": [
                "bool"
            ],
            "arguments": {
                "item": [
                    "Item"
                ]
            }
        },
        "Items.filter_items_without_complete_tags.has_complete_tags.has_tag_category": {
            "name": "has_tag_category",
            "location": 146,
            "return": [
                "bool"
            ],
            "arguments": {
                "item": [
                    "Item"
                ],
                "tag_category": [
                    "str"
                ]
            }
        }
    },
    "style-scout-master/acquisition/shopping_api.py": {
        "ShoppingApi.categories": {
            "name": "categories",
            "location": 5,
            "return": [
                "List[Any]"
            ],
            "arguments": {
                "self": [],
                "root_id": [
                    "int"
                ]
            }
        },
        "ShoppingApi.get_category_items": {
            "name": "get_category_items",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "category": [
                    "Any"
                ],
                "limit": [
                    "int"
                ],
                "page": [
                    "int"
                ]
            }
        },
        "ShoppingApi.get_item": {
            "name": "get_item",
            "location": 11,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "int"
                ]
            }
        }
    },
    "style-scout-master/acquisition/tag_processor.py": {
        "TagProcessor.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag_list": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "TagProcessor.process_tag": {
            "name": "process_tag",
            "location": 14,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "tag_label": [
                    "str"
                ],
                "tag_value": [
                    "str"
                ]
            }
        },
        "TagProcessor.process_color_tag": {
            "name": "process_color_tag",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "tag_value": [
                    "str"
                ]
            }
        },
        "TagProcessor.process_length_tag": {
            "name": "process_length_tag",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "tag_value": [
                    "str"
                ]
            }
        },
        "TagProcessor.process_style_tag": {
            "name": "process_style_tag",
            "location": 88,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "tag_value": [
                    "str"
                ]
            }
        },
        "TagProcessor.process_occasion_tag": {
            "name": "process_occasion_tag",
            "location": 127,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "tag_value": [
                    "str"
                ]
            }
        },
        "TagProcessor.process_pattern_tag": {
            "name": "process_pattern_tag",
            "location": 146,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "tag_value": [
                    "str"
                ]
            }
        },
        "TagProcessor.process_heel_height_tag": {
            "name": "process_heel_height_tag",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {
                "tag_value": [
                    "str"
                ]
            }
        }
    },
    "style-scout-master/acquisition/__init__.py": {},
    "style-scout-master/data_sets/contains_images.py": {
        "crop_bottom": {
            "name": "crop_bottom",
            "location": 7,
            "return": [
                "Image.Image"
            ],
            "arguments": {
                "image": [
                    "Image.Image"
                ],
                "w": [
                    "int"
                ],
                "h": [
                    "int"
                ]
            }
        },
        "add_border": {
            "name": "add_border",
            "location": 15,
            "return": [
                "Image.Image"
            ],
            "arguments": {
                "image": [
                    "Image.Image"
                ],
                "w": [
                    "int"
                ],
                "h": [
                    "int"
                ]
            }
        },
        "ContainsImages.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x_size": [
                    "int"
                ],
                "y_size": [
                    "int"
                ]
            }
        },
        "ContainsImages.downscale": {
            "name": "downscale",
            "location": 35,
            "return": [
                "numpy.array"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "Image.Image"
                ],
                "method": [
                    "Callable[([Image.Image, int, int], Image.Image)]"
                ]
            }
        },
        "ContainsImages.scale_image": {
            "name": "scale_image",
            "location": 41,
            "return": [
                "numpy.array"
            ],
            "arguments": {
                "cls": [],
                "image": [
                    "Image.Image"
                ],
                "size": [
                    "Tuple[(int, int)]"
                ],
                "method": [
                    "Callable[([Image.Image, int, int], Image.Image)]"
                ]
            }
        },
        "ContainsImages.show_image": {
            "name": "show_image",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "rgb_values": [
                    "numpy.ndarray"
                ],
                "label": [
                    "str"
                ]
            }
        }
    },
    "style-scout-master/data_sets/data_sets.py": {
        "DataSets.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train": [
                    "DataSetBase"
                ],
                "validation": [
                    "DataSetBase"
                ],
                "test": [
                    "DataSetBase"
                ]
            }
        }
    },
    "style-scout-master/data_sets/data_set_base.py": {
        "_check_constructor_arguments_valid": {
            "name": "_check_constructor_arguments_valid",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "input": [
                    "numpy.ndarray"
                ],
                "labels": [
                    "numpy.ndarray"
                ]
            }
        },
        "DataSetBase.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "numpy.ndarray"
                ],
                "labels": [
                    "numpy.ndarray"
                ]
            }
        },
        "DataSetBase.input": {
            "name": "input",
            "location": 19,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSetBase.labels": {
            "name": "labels",
            "location": 23,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSetBase.num_examples": {
            "name": "num_examples",
            "location": 27,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSetBase.next_batch": {
            "name": "next_batch",
            "location": 30,
            "return": [
                "Tuple[(numpy.ndarray, numpy.ndarray)]"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int"
                ]
            }
        },
        "DataSetBase._start_new_epoch": {
            "name": "_start_new_epoch",
            "location": 40,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int"
                ],
                "start": [
                    "int"
                ]
            }
        },
        "DataSetBase._shuffle_data": {
            "name": "_shuffle_data",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "style-scout-master/data_sets/ebay_data_generator.py": {
        "_check_constructor_arguments_valid": {
            "name": "_check_constructor_arguments_valid",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "items": [
                    "Items"
                ],
                "size": [
                    "Tuple[(int, int)]"
                ],
                "depth": [
                    "int"
                ]
            }
        },
        "BatchGenerator.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chunks": [
                    "Batch"
                ],
                "batch_size": [
                    "int"
                ]
            }
        },
        "BatchGenerator.generate_batches": {
            "name": "generate_batches",
            "location": 24,
            "return": [
                "Batches"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatchGenerator.__len__": {
            "name": "__len__",
            "location": 30,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "EbayDataGenerator.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "Items"
                ],
                "valid_labels": [
                    "Dict[(str, int)]"
                ],
                "size": [
                    "Tuple[(int, int)]"
                ],
                "test_share": [
                    "float"
                ],
                "batch_size": [
                    "int"
                ],
                "random_seed": [
                    "int"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "EbayDataGenerator._setup_batches": {
            "name": "_setup_batches",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_share": [
                    "float"
                ],
                "random_seed": [
                    "Optional[int]"
                ]
            }
        },
        "EbayDataGenerator.train_length": {
            "name": "train_length",
            "location": 73,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "EbayDataGenerator.test_length": {
            "name": "test_length",
            "location": 76,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "EbayDataGenerator.train_generator": {
            "name": "train_generator",
            "location": 79,
            "return": [
                "Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "EbayDataGenerator.test_generator": {
            "name": "test_generator",
            "location": 93,
            "return": [
                "Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "EbayDataGenerator.images_for_batch": {
            "name": "images_for_batch",
            "location": 104,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "batches": [
                    "Batches"
                ],
                "batch_index": [
                    "int"
                ]
            }
        },
        "EbayDataGenerator.labels_for_batch": {
            "name": "labels_for_batch",
            "location": 114,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "batches": [
                    "Batches"
                ],
                "batch_index": [
                    "int"
                ]
            }
        },
        "EbayDataGenerator._dense_to_one_hot": {
            "name": "_dense_to_one_hot",
            "location": 126,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "Set[str]"
                ]
            }
        }
    },
    "style-scout-master/data_sets/ebay_data_sets.py": {
        "_check_constructor_arguments_valid": {
            "name": "_check_constructor_arguments_valid",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "size": [
                    "Tuple[(int, int)]"
                ],
                "depth": [
                    "int"
                ],
                "train_images": [
                    "numpy.ndarray"
                ],
                "train_labels": [
                    "numpy.ndarray"
                ],
                "test_images": [
                    "numpy.ndarray"
                ],
                "test_labels": [
                    "numpy.ndarray"
                ],
                "validation_images": [
                    "numpy.ndarray"
                ],
                "validation_labels": [
                    "numpy.ndarray"
                ]
            }
        },
        "EbayDataSets.get_data": {
            "name": "get_data",
            "location": 19,
            "return": [
                "ImageFileDataSets"
            ],
            "arguments": {
                "cls": [],
                "data_file": [
                    "str"
                ],
                "items": [
                    "Items"
                ],
                "valid_labels": [
                    "Dict[(str, int)]"
                ],
                "image_size": [
                    "int"
                ],
                "test_share": [
                    "float"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "EbayDataSets.extract_and_init": {
            "name": "extract_and_init",
            "location": 46,
            "return": [
                "'EbayDataSets'"
            ],
            "arguments": {
                "cls": [],
                "items": [
                    "Items"
                ],
                "valid_labels": [
                    "Dict[(str, int)]"
                ],
                "size": [
                    "Tuple[(int, int)]"
                ],
                "validation_share": [
                    "float"
                ],
                "test_share": [
                    "float"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "EbayDataSets.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "Items"
                ],
                "valid_labels": [
                    "Dict[(str, int)]"
                ],
                "size": [
                    "Tuple[(int, int)]"
                ],
                "train_images": [
                    "numpy.ndarray"
                ],
                "train_labels": [
                    "numpy.ndarray"
                ],
                "test_images": [
                    "numpy.ndarray"
                ],
                "test_labels": [
                    "numpy.ndarray"
                ],
                "validation_images": [
                    "numpy.ndarray"
                ],
                "validation_labels": [
                    "numpy.ndarray"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "EbayDataSets._extract_images": {
            "name": "_extract_images",
            "location": 116,
            "return": [
                "Tuple[(numpy.ndarray, numpy.ndarray)]"
            ],
            "arguments": {
                "cls": [],
                "items": [
                    "Items"
                ],
                "size": [
                    "Tuple[(int, int)]"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "EbayDataSets._dense_to_one_hot": {
            "name": "_dense_to_one_hot",
            "location": 138,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "Set[str]"
                ]
            }
        },
        "EbayDataSets._static_dense_to_one_hot": {
            "name": "_static_dense_to_one_hot",
            "location": 142,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "labels": [
                    "Set[str]"
                ],
                "num_classes": [
                    "int"
                ],
                "labels_to_numbers": [
                    "Dict[(str, int)]"
                ]
            }
        },
        "EbayDataSets._npz_file_name": {
            "name": "_npz_file_name",
            "location": 152,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "data_file": [
                    "str"
                ]
            }
        },
        "EbayDataSets._create_from_file": {
            "name": "_create_from_file",
            "location": 158,
            "return": [
                "'EbayDataSets'"
            ],
            "arguments": {
                "cls": [],
                "data_file": [
                    "str"
                ],
                "image_size": [
                    "int"
                ],
                "items": [
                    "Items"
                ],
                "valid_labels": [
                    "Dict[(str, int)]"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "EbayDataSets._save_to_file": {
            "name": "_save_to_file",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "'EbayDataSets'"
                ],
                "data_file": [
                    "str"
                ],
                "verbose": [
                    "bool"
                ]
            }
        }
    },
    "style-scout-master/data_sets/images_labels_data_set.py": {
        "normalize": {
            "name": "normalize",
            "location": 34,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "ndarray": [
                    "numpy.ndarray"
                ]
            }
        },
        "ImagesLabelsDataSet.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "images": [
                    "numpy.ndarray"
                ],
                "labels": [
                    "numpy.ndarray"
                ],
                "depth": [
                    "int"
                ],
                "reshape": [
                    "bool"
                ]
            }
        },
        "ImagesLabelsDataSet.__len__": {
            "name": "__len__",
            "location": 30,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "style-scout-master/data_sets/image_file_data_sets.py": {
        "_dense_to_one_hot": {
            "name": "_dense_to_one_hot",
            "location": 122,
            "return": [
                "Tuple[(numpy.ndarray, Dict[(str, int)])]"
            ],
            "arguments": {
                "labels_dense": [
                    "numpy.ndarray"
                ]
            }
        },
        "nth_index_and_value": {
            "name": "nth_index_and_value",
            "location": 135,
            "return": [
                "Tuple[(int, Any)]"
            ],
            "arguments": {
                "l": [
                    "List"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "ImageFileDataSets.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_dir": [
                    "str"
                ],
                "x_size": [
                    "int"
                ],
                "y_size": [
                    "int"
                ],
                "validation_share": [
                    "float"
                ],
                "one_hot": [
                    "bool"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "ImageFileDataSets.get_label": {
            "name": "get_label",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "int"
                ]
            }
        },
        "ImageFileDataSets._read_images": {
            "name": "_read_images",
            "location": 75,
            "return": [
                "Tuple[(numpy.ndarray, numpy.ndarray)]"
            ],
            "arguments": {
                "cls": [],
                "size": [
                    "Tuple[(int, int)]"
                ],
                "verbose": [
                    "bool"
                ],
                "base_dir": [
                    "str"
                ]
            }
        },
        "ImageFileDataSets.split_images": {
            "name": "split_images",
            "location": 101,
            "return": [
                "Tuple[(numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray)]"
            ],
            "arguments": {
                "images": [
                    "numpy.ndarray"
                ],
                "labels": [
                    "numpy.ndarray"
                ],
                "train_to_test_ratio": [
                    "float"
                ]
            }
        },
        "ImageFileDataSets.prediction_info": {
            "name": "prediction_info",
            "location": 116,
            "return": [
                "Tuple[(int, str, Any)]"
            ],
            "arguments": {
                "self": [],
                "prediction": [
                    "List[float]"
                ],
                "place": [
                    "int"
                ]
            }
        }
    },
    "style-scout-master/data_sets/input_data.py": {
        "maybe_download": {
            "name": "maybe_download",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "base_url": [
                    "str"
                ],
                "work_directory": [
                    "str"
                ]
            }
        },
        "read_one_image_from_file": {
            "name": "read_one_image_from_file",
            "location": 44,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "rows": [
                    "int"
                ],
                "cols": [
                    "int"
                ],
                "depth": [
                    "int"
                ]
            }
        },
        "read_one_image_from_url": {
            "name": "read_one_image_from_url",
            "location": 58,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "rows": [
                    "int"
                ],
                "cols": [
                    "int"
                ],
                "depth": [
                    "int"
                ]
            }
        },
        "read_images_from_file": {
            "name": "read_images_from_file",
            "location": 72,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "rows": [
                    "int"
                ],
                "cols": [
                    "int"
                ],
                "num_images": [
                    "int"
                ],
                "depth": [
                    "int"
                ]
            }
        },
        "read_images_from_url": {
            "name": "read_images_from_url",
            "location": 89,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "rows": [
                    "int"
                ],
                "cols": [
                    "int"
                ],
                "num_images": [
                    "int"
                ],
                "depth": [
                    "int"
                ]
            }
        },
        "read_images_from_files": {
            "name": "read_images_from_files",
            "location": 104,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "rows": [
                    "int"
                ],
                "cols": [
                    "int"
                ],
                "depth": [
                    "int"
                ]
            }
        },
        "read_images_from_urls": {
            "name": "read_images_from_urls",
            "location": 117,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "rows": [
                    "int"
                ],
                "cols": [
                    "int"
                ],
                "depth": [
                    "int"
                ]
            }
        },
        "images_from_bytestream": {
            "name": "images_from_bytestream",
            "location": 130,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "bytestream": [
                    "Any"
                ],
                "rows": [
                    "int"
                ],
                "cols": [
                    "int"
                ],
                "num_images": [
                    "int"
                ],
                "depth": [
                    "int"
                ]
            }
        },
        "_one_image_from_bytestream": {
            "name": "_one_image_from_bytestream",
            "location": 148,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "bytestream": [
                    "Any"
                ],
                "rows": [
                    "int"
                ],
                "cols": [
                    "int"
                ],
                "depth": [
                    "int"
                ]
            }
        },
        "_concatenate_images_from_input_function": {
            "name": "_concatenate_images_from_input_function",
            "location": 161,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "input_function": [
                    "Callable[([Any, int, int, int], numpy.ndarray)]"
                ],
                "rows": [
                    "int"
                ],
                "cols": [
                    "int"
                ],
                "depth": [
                    "int"
                ],
                "input_resources": [
                    "Iterable"
                ]
            }
        },
        "_check_describes_image_geometry": {
            "name": "_check_describes_image_geometry",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "rows": [
                    "int"
                ],
                "cols": [
                    "int"
                ],
                "depth": [
                    "int"
                ]
            }
        }
    },
    "style-scout-master/data_sets/labeled_items.py": {
        "_check_constructor_arguments": {
            "name": "_check_constructor_arguments",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "items": [
                    "Items"
                ],
                "valid_labels": [
                    "Dict[(str, int)]"
                ]
            }
        },
        "LabeledItems.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "Items"
                ],
                "valid_labels": [
                    "Dict[(str, int)]"
                ]
            }
        },
        "LabeledItems.labels": {
            "name": "labels",
            "location": 28,
            "return": [
                "Dict[(str, float)]"
            ],
            "arguments": {
                "self": [],
                "predictions": [
                    "List[float]"
                ]
            }
        },
        "LabeledItems.labels_sorted_by_probability": {
            "name": "labels_sorted_by_probability",
            "location": 39,
            "return": [
                "Dict[(str, float)]"
            ],
            "arguments": {
                "self": [],
                "predictions": [
                    "List[float]"
                ]
            }
        },
        "LabeledItems._dense_to_one_hot": {
            "name": "_dense_to_one_hot",
            "location": 51,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "Set[str]"
                ]
            }
        }
    },
    "style-scout-master/data_sets/__init__.py": {},
    "style-scout-master/tests/ebay_data_generator_test.py": {
        "EbayDataGeneratorTest.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EbayDataGeneratorTest.test_generator_returns_all_images_and_labels_in_data_set": {
            "name": "test_generator_returns_all_images_and_labels_in_data_set",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EbayDataGeneratorTest.test_generator_returns_batch_of_correct_size": {
            "name": "test_generator_returns_batch_of_correct_size",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EbayDataGeneratorTest.test_generator_repeats_after_returning_full_data_set": {
            "name": "test_generator_repeats_after_returning_full_data_set",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EbayDataGeneratorTest.test_random_seed": {
            "name": "test_random_seed",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EbayDataGeneratorTest.test_test_set_share_is_respected": {
            "name": "test_test_set_share_is_respected",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EbayDataGeneratorTest.test_training_set_share_of_zero_raises": {
            "name": "test_training_set_share_of_zero_raises",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EbayDataGeneratorTest._generate_items_with_labels": {
            "name": "_generate_items_with_labels",
            "location": 80,
            "return": [
                "Tuple[(Items, numpy.ndarray)]"
            ],
            "arguments": {
                "self": [],
                "num_items": [
                    "int"
                ]
            }
        },
        "EbayDataGeneratorTest._generate_items": {
            "name": "_generate_items",
            "location": 86,
            "return": [
                "Items"
            ],
            "arguments": {
                "self": [],
                "num_items": [
                    "int"
                ]
            }
        },
        "EbayDataGeneratorTest._get_from_generator": {
            "name": "_get_from_generator",
            "location": 91,
            "return": [
                "List"
            ],
            "arguments": {
                "num_items": [
                    "int"
                ],
                "generator": [
                    "EbayDataGenerator"
                ]
            }
        }
    },
    "style-scout-master/tests/ebay_data_sets_test.py": {
        "EbayDataSetsTest.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EbayDataSetsTest.test_basic_create": {
            "name": "test_basic_create",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EbayDataSetsTest.test_labels": {
            "name": "test_labels",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EbayDataSetsTest.test_get_data": {
            "name": "test_get_data",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EbayDataSetsTest.test_get_data_creates_npz": {
            "name": "test_get_data_creates_npz",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EbayDataSetsTest.test_labels_correctly_associated": {
            "name": "test_labels_correctly_associated",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EbayDataSetsTest.test_labels_correctly_restored": {
            "name": "test_labels_correctly_restored",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EbayDataSetsTest._create_enough_items": {
            "name": "_create_enough_items",
            "location": 108,
            "return": [
                "Tuple[(Items, Dict[(str, int)])]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "style-scout-master/tests/ebay_downloader_io_test.py": {
        "num_liked_items": {
            "name": "num_liked_items",
            "location": 134,
            "return": [
                "int"
            ],
            "arguments": {
                "items": [
                    "Items"
                ]
            }
        },
        "build_category_structure": {
            "name": "build_category_structure",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EbayDownloaderIOTest.test_init_with_all_none": {
            "name": "test_init_with_all_none",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EbayDownloaderIOTest.test_init_with_items_file": {
            "name": "test_init_with_items_file",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EbayDownloaderIOTest.test_init_with_items_file_and_image_size": {
            "name": "test_init_with_items_file_and_image_size",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EbayDownloaderIOTest.test_init_with_weights_file_also_needs_image_size": {
            "name": "test_init_with_weights_file_also_needs_image_size",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EbayDownloaderIOTest.test_init_with_weights_file_and_image_size": {
            "name": "test_init_with_weights_file_and_image_size",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EbayDownloaderIOTest.test_init_with_additional_info": {
            "name": "test_init_with_additional_info",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EbayDownloaderIOTest.test_thousands_are_replaced_with_k": {
            "name": "test_thousands_are_replaced_with_k",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EbayDownloaderIOTest.test_existing_weight_file_name_is_left_intact": {
            "name": "test_existing_weight_file_name_is_left_intact",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EbayDownloaderIOTest.XXXtest_load_items_from_existing_file": {
            "name": "XXXtest_load_items_from_existing_file",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EbayDownloaderIOTest.test_load_items_without_file": {
            "name": "test_load_items_without_file",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EbayDownloaderIOTest.test_save_items": {
            "name": "test_save_items",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EbayDownloaderIOTest.test_save_items_creates_backup": {
            "name": "test_save_items_creates_backup",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EbayDownloaderIOTest.XXXtest_import_likes": {
            "name": "XXXtest_import_likes",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EbayDownloaderIOTest.test_explicitly_specified_folder_overrides_base_dir": {
            "name": "test_explicitly_specified_folder_overrides_base_dir",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "style-scout-master/tests/ebay_download_test.py": {
        "EbayDownloadTest.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "style-scout-master/tests/images_labels_data_set_test.py": {
        "_create_empty_data_set": {
            "name": "_create_empty_data_set",
            "location": 66,
            "return": [
                "ImagesLabelsDataSet"
            ],
            "arguments": {}
        },
        "create_empty_image_data": {
            "name": "create_empty_image_data",
            "location": 72,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {}
        },
        "create_random_image_data": {
            "name": "create_random_image_data",
            "location": 76,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "min_val": [
                    "int"
                ],
                "max_val": [
                    "int"
                ]
            }
        },
        "image_data_from_list": {
            "name": "image_data_from_list",
            "location": 83,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "buffer": [
                    "Iterable"
                ]
            }
        },
        "create_empty_label_data": {
            "name": "create_empty_label_data",
            "location": 88,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {}
        },
        "create_empty_label_data_of_size": {
            "name": "create_empty_label_data_of_size",
            "location": 92,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "size": [
                    "int"
                ]
            }
        },
        "ImagesLabelsDataSetTest.test_init_without_fake_data_runs": {
            "name": "test_init_without_fake_data_runs",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImagesLabelsDataSetTest.test_init_length": {
            "name": "test_init_length",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImagesLabelsDataSetTest.test_init_with_different_label_size_fails": {
            "name": "test_init_with_different_label_size_fails",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImagesLabelsDataSetTest.test_next_batch_returns_correct_data_format": {
            "name": "test_next_batch_returns_correct_data_format",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImagesLabelsDataSetTest.test_next_batch_runs_repeatedly": {
            "name": "test_next_batch_runs_repeatedly",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImagesLabelsDataSetTest.test_normalize_dtype": {
            "name": "test_normalize_dtype",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImagesLabelsDataSetTest.test_normalize_range": {
            "name": "test_normalize_range",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "style-scout-master/tests/items_test.py": {
        "ItemsTest.test_getitem": {
            "name": "test_getitem",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemsTest.test_getitem_index_error": {
            "name": "test_getitem_index_error",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemsTest.test_len": {
            "name": "test_len",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemsTest.test_append": {
            "name": "test_append",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemsTest.test_extend_list": {
            "name": "test_extend_list",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemsTest.test_extend_items": {
            "name": "test_extend_items",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemsTest.test_set_liked": {
            "name": "test_set_liked",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemsTest.test_set_liked_raises_if_not_found": {
            "name": "test_set_liked_raises_if_not_found",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemsTest.test_remove_duplicates": {
            "name": "test_remove_duplicates",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemsTest.test_remove_duplicates_without_duplicates": {
            "name": "test_remove_duplicates_without_duplicates",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemsTest.test_get_valid_tags_returns_category": {
            "name": "test_get_valid_tags_returns_category",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemsTest.test_get_valid_tags_returns_tags_with_enough_count": {
            "name": "test_get_valid_tags_returns_tags_with_enough_count",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemsTest.test_get_valid_tags_filters_tags_with_not_enough_count": {
            "name": "test_get_valid_tags_filters_tags_with_not_enough_count",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemsTest.test_filter_items_without_complete_tags": {
            "name": "test_filter_items_without_complete_tags",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemsTest.test_split_liked_and_unliked_items_evenly": {
            "name": "test_split_liked_and_unliked_items_evenly",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "style-scout-master/tests/item_test.py": {
        "ItemTest.test_simple_create": {
            "name": "test_simple_create",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemTest.test_html_is_stripped": {
            "name": "test_html_is_stripped",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemTest.test_like": {
            "name": "test_like",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemTest.test_get_possible_tags_without_specifics_with_undefined": {
            "name": "test_get_possible_tags_without_specifics_with_undefined",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemTest.test_get_possible_tags_without_undefined": {
            "name": "test_get_possible_tags_without_undefined",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemTest.test_get_possible_tags_with_one_specific": {
            "name": "test_get_possible_tags_with_one_specific",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemTest.test_get_possible_tags_with_multiple_specifics": {
            "name": "test_get_possible_tags_with_multiple_specifics",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemTest.test_get_possible_tags_with_ignored_specific": {
            "name": "test_get_possible_tags_with_ignored_specific",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemTest.test_download_images_jpg": {
            "name": "test_download_images_jpg",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemTest.test_download_images_nonexistent": {
            "name": "test_download_images_nonexistent",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "style-scout-master/tests/test_base.py": {
        "create_item_dict": {
            "name": "create_item_dict",
            "location": 36,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "item_id": [
                    "int"
                ],
                "specifics": [
                    "str"
                ],
                "picture_url": [
                    "str"
                ]
            }
        },
        "TestBase.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBase.tearDown": {
            "name": "tearDown",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBase.generate_items": {
            "name": "generate_items",
            "location": 31,
            "return": [
                "Items"
            ],
            "arguments": {
                "self": [],
                "num_items": [
                    "int"
                ]
            }
        }
    },
    "style-scout-master/tests/training_runner_test.py": {
        "Args.default_args": {
            "name": "default_args",
            "location": 18,
            "return": [
                "'Args'"
            ],
            "arguments": {}
        },
        "TrainingRunnerTest.test_init_existing_network_types": {
            "name": "test_init_existing_network_types",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainingRunnerTest.test_init_nonexisting_network_type": {
            "name": "test_init_nonexisting_network_type",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "style-scout-master/tests/__init__.py": {},
    "style-scout-master/tests/integration/integration_tests.py": {
        "EbayDownloaderIOTest.test_load_weights_from_saved_weights_equal_original_weights": {
            "name": "test_load_weights_from_saved_weights_equal_original_weights",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainingRunnerTest.test_different_optimizers": {
            "name": "test_different_optimizers",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainingRunnerTest.test_different_fully_connected_layers": {
            "name": "test_different_fully_connected_layers",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "style-scout-master/tests/integration/__init__.py": {},
    "style-scout-master/utils/print_predictions.py": {
        "print_predictions": {
            "name": "print_predictions",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "image_data": [
                    "EbayDataGenerator"
                ],
                "model": [
                    "Model"
                ]
            }
        },
        "print_prediction": {
            "name": "print_prediction",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "images": [
                    "numpy.ndarray"
                ],
                "label": [
                    "str"
                ],
                "image_data": [
                    "EbayDataGenerator"
                ],
                "model": [
                    "Model"
                ]
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 41,
            "return": [
                "Namespace"
            ],
            "arguments": {}
        },
        "load_items": {
            "name": "load_items",
            "location": 61,
            "return": [
                "Items"
            ],
            "arguments": {
                "io": [
                    "EbayDownloaderIO"
                ]
            }
        },
        "load_model": {
            "name": "load_model",
            "location": 69,
            "return": [
                "Model"
            ],
            "arguments": {
                "args": [
                    "Namespace"
                ]
            }
        }
    },
    "style-scout-master/utils/with_verbose.py": {
        "WithVerbose.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbose": [
                    "bool"
                ]
            }
        },
        "WithVerbose.print_status": {
            "name": "print_status",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "verbose": []
            }
        },
        "WithVerbose._print_status": {
            "name": "_print_status",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "style-scout-master/utils/__init__.py": {}
}
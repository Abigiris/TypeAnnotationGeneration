{
    "suggestive2-master/setup.py": {},
    "suggestive2-master/suggestive2/app.py": {
        "announce": {
            "name": "announce",
            "location": 480,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "generate_palette": {
            "name": "generate_palette",
            "location": 484,
            "return": [
                "List[Tuple[(str, str, str, str, str, str)]]"
            ],
            "arguments": {}
        },
        "mpd_func": {
            "name": "mpd_func",
            "location": 643,
            "return": [],
            "arguments": {
                "command": []
            }
        },
        "init_logging": {
            "name": "init_logging",
            "location": 664,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 674,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "LibraryListWalker.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LibraryListWalker.positions": {
            "name": "positions",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "reverse": []
            }
        },
        "LibraryListWalker.get_focus": {
            "name": "get_focus",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LibraryListWalker.set_focus": {
            "name": "set_focus",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "focus": []
            }
        },
        "LibraryListWalker.clear": {
            "name": "clear",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LibraryListWalker.get_next": {
            "name": "get_next",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "current": []
            }
        },
        "LibraryListWalker.get_prev": {
            "name": "get_prev",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "current": []
            }
        },
        "LibraryListWalker._get": {
            "name": "_get",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "position": []
            }
        },
        "SimpleText.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "CommandPrompt.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandPrompt.clear": {
            "name": "clear",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandPrompt.start": {
            "name": "start",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keypress_callback": [
                    "Callable"
                ],
                "complete_callback": [
                    "Callable"
                ],
                "caption": [
                    "str"
                ]
            }
        },
        "CommandPrompt.keypress": {
            "name": "keypress",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "size": [],
                "key": [
                    "str"
                ]
            }
        },
        "VimListBox.__init__": {
            "name": "__init__",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "body": []
            }
        },
        "VimListBox.keypress": {
            "name": "keypress",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "size": [],
                "key": [
                    "str"
                ]
            }
        },
        "VimListBox.get_search_contents": {
            "name": "get_search_contents",
            "location": 185,
            "return": [
                "Iterable[Tuple[(str, int)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VimListBox.search_keypress": {
            "name": "search_keypress",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "VimListBox.search_complete": {
            "name": "search_complete",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "VimListBox.next_search_match": {
            "name": "next_search_match",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VimListBox.prev_search_match": {
            "name": "prev_search_match",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibraryAlbum.__init__": {
            "name": "__init__",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "artist": [
                    "str"
                ],
                "album": [
                    "str"
                ]
            }
        },
        "LibraryAlbum.keypress": {
            "name": "keypress",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "size": [],
                "key": [
                    "str"
                ]
            }
        },
        "Library.__init__": {
            "name": "__init__",
            "location": 289,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Library.clear": {
            "name": "clear",
            "location": 293,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Library.get_search_contents": {
            "name": "get_search_contents",
            "location": 296,
            "return": [
                "Iterable[Tuple[(str, int)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlaylistTrack.__init__": {
            "name": "__init__",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mpd_id": [
                    "Union[(str, int)]"
                ],
                "artist": [
                    "str"
                ],
                "album": [
                    "str"
                ],
                "track": [
                    "str"
                ]
            }
        },
        "PlaylistTrack.from_mpd_info": {
            "name": "from_mpd_info",
            "location": 323,
            "return": [],
            "arguments": {
                "cls": [],
                "info": []
            }
        },
        "Playlist.__init__": {
            "name": "__init__",
            "location": 352,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Playlist.set_contents": {
            "name": "set_contents",
            "location": 356,
            "return": [],
            "arguments": {
                "self": [],
                "contents": []
            }
        },
        "Playlist.get_search_contents": {
            "name": "get_search_contents",
            "location": 401,
            "return": [
                "Iterable[Tuple[(str, int)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Playlist.keypress": {
            "name": "keypress",
            "location": 408,
            "return": [],
            "arguments": {
                "self": [],
                "size": [],
                "key": [
                    "str"
                ]
            }
        },
        "Pane.__init__": {
            "name": "__init__",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "urwid.Widget"
                ],
                "statusline": [
                    "urwid.Widget"
                ]
            }
        },
        "Pane.get_body": {
            "name": "get_body",
            "location": 426,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Window.__init__": {
            "name": "__init__",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "panes": [
                    "List[Pane]"
                ]
            }
        },
        "Window.keypress": {
            "name": "keypress",
            "location": 436,
            "return": [],
            "arguments": {
                "self": [],
                "size": [],
                "key": [
                    "str"
                ]
            }
        },
        "TopLevel.__init__": {
            "name": "__init__",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "urwid.Widget"
                ],
                "header": [],
                "footer": []
            }
        },
        "TopLevel.focus_on": {
            "name": "focus_on",
            "location": 453,
            "return": [],
            "arguments": {
                "self": [],
                "what": [
                    "str"
                ]
            }
        },
        "TopLevel.focus_body": {
            "name": "focus_body",
            "location": 456,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TopLevel.keypress": {
            "name": "keypress",
            "location": 459,
            "return": [],
            "arguments": {
                "self": [],
                "size": [],
                "key": [
                    "str"
                ]
            }
        },
        "Application.__init__": {
            "name": "__init__",
            "location": 518,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.exit": {
            "name": "exit",
            "location": 538,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.register_widget": {
            "name": "register_widget",
            "location": 541,
            "return": [],
            "arguments": {
                "self": [],
                "widget": [
                    "urwid.Widget"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Application.widget_by_name": {
            "name": "widget_by_name",
            "location": 544,
            "return": [
                "urwid.Widget"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Application.unhandled_input": {
            "name": "unhandled_input",
            "location": 547,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Application.build": {
            "name": "build",
            "location": 559,
            "return": [
                "urwid.Widget"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.run_coroutine": {
            "name": "run_coroutine",
            "location": 608,
            "return": [],
            "arguments": {
                "self": [],
                "method": []
            }
        },
        "Application.run": {
            "name": "run",
            "location": 611,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "suggestive2-master/suggestive2/config.py": {
        "get_temp_package": {
            "name": "get_temp_package",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "load_config": {
            "name": "load_config",
            "location": 30,
            "return": [
                "suggestive2.types.Config"
            ],
            "arguments": {
                "path": [
                    "Optional[str]"
                ]
            }
        }
    },
    "suggestive2-master/suggestive2/monkey.py": {
        "_exception_handler": {
            "name": "_exception_handler",
            "location": 4,
            "return": [],
            "arguments": {
                "self": [],
                "loop": [],
                "context": []
            }
        },
        "monkeypatch": {
            "name": "monkeypatch",
            "location": 18,
            "return": [],
            "arguments": {}
        }
    },
    "suggestive2-master/suggestive2/mpd.py": {
        "make_slice": {
            "name": "make_slice",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "start": [
                    "Optional[int]"
                ],
                "end": [
                    "Optional[int]"
                ]
            }
        },
        "MPDClient.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ],
                "port": [
                    "int"
                ]
            }
        },
        "MPDClient.close": {
            "name": "close",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "suggestive2-master/suggestive2/types.py": {},
    "suggestive2-master/suggestive2/util.py": {
        "expand": {
            "name": "expand",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "run_method_coroutine": {
            "name": "run_method_coroutine",
            "location": 19,
            "return": [],
            "arguments": {
                "loop": [],
                "method": []
            }
        },
        "escape": {
            "name": "escape",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "prefix_matches": {
            "name": "prefix_matches",
            "location": 30,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "prefix": [
                    "str"
                ],
                "words": [
                    "List[str]"
                ]
            }
        },
        "_prefix_search": {
            "name": "_prefix_search",
            "location": 34,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "prefix": [
                    "str"
                ],
                "suffix": [
                    "str"
                ],
                "words": [
                    "List[str]"
                ]
            }
        }
    },
    "suggestive2-master/suggestive2/__init__.py": {},
    "suggestive2-master/tests/conftest.py": {
        "config": {
            "name": "config",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "suggestive2-master/tests/test_config.py": {
        "tempdir": {
            "name": "tempdir",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_default_config": {
            "name": "test_default_config",
            "location": 13,
            "return": [],
            "arguments": {
                "tempdir": []
            }
        },
        "test_config_override": {
            "name": "test_config_override",
            "location": 21,
            "return": [],
            "arguments": {
                "tempdir": []
            }
        }
    },
    "suggestive2-master/tests/test_mpd.py": {
        "MockServer.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "host": [],
                "port": [],
                "loop": [],
                "statusline": []
            }
        },
        "MockServer.lines": {
            "name": "lines",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "values": []
            }
        }
    }
}
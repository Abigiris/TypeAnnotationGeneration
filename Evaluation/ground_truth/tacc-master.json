{
    "tacc-master/setup.py": {},
    "tacc-master/src/journals.py": {
        "TJournal.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "TClass": []
            }
        },
        "TJournal.add_t": {
            "name": "add_t",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "account_id": [],
                "t": []
            }
        },
        "TJournal.balance": {
            "name": "balance",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TJournal.is_balanced": {
            "name": "is_balanced",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TJournal.auto_balance": {
            "name": "auto_balance",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "account_id": []
            }
        }
    },
    "tacc-master/src/tacc.py": {
        "MDT.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "drs": [
                    "Tuple[Any]"
                ],
                "crs": [
                    "Tuple[Any]"
                ],
                "balance_type": [
                    "BalanceType"
                ],
                "account_name": [
                    "str"
                ],
                "labels": [
                    "Tuple[str]"
                ]
            }
        },
        "MDT.clone": {
            "name": "clone",
            "location": 48,
            "return": [
                "'MDT'"
            ],
            "arguments": {
                "self": [],
                "drs": [
                    "Tuple[Any]"
                ],
                "crs": [
                    "Tuple[Any]"
                ]
            }
        },
        "MDT.__str__": {
            "name": "__str__",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MDT.__repr__": {
            "name": "__repr__",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MDT.__getitem__": {
            "name": "__getitem__",
            "location": 64,
            "return": [
                "Decimal"
            ],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "MDT.as_tuple": {
            "name": "as_tuple",
            "location": 67,
            "return": [
                "Tuple[(Decimal, Decimal)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MDT.__neg__": {
            "name": "__neg__",
            "location": 70,
            "return": [
                "'MDT'"
            ],
            "arguments": {
                "self": []
            }
        },
        "MDT.__pos__": {
            "name": "__pos__",
            "location": 73,
            "return": [
                "'MDT'"
            ],
            "arguments": {
                "self": []
            }
        },
        "MDT.__add__": {
            "name": "__add__",
            "location": 76,
            "return": [
                "'MDT'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'MDT'"
                ]
            }
        },
        "MDT.__sub__": {
            "name": "__sub__",
            "location": 82,
            "return": [
                "'MDT'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'MDT'"
                ]
            }
        },
        "MDT.__eq__": {
            "name": "__eq__",
            "location": 88,
            "return": [
                "'MDT'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'MDT'"
                ]
            }
        },
        "MDT.__bool__": {
            "name": "__bool__",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MDT.debit_balance": {
            "name": "debit_balance",
            "location": 98,
            "return": [
                "Decimal"
            ],
            "arguments": {
                "self": []
            }
        },
        "MDT.credit_balance": {
            "name": "credit_balance",
            "location": 102,
            "return": [
                "Decimal"
            ],
            "arguments": {
                "self": []
            }
        },
        "MDT.balance": {
            "name": "balance",
            "location": 106,
            "return": [
                "Decimal"
            ],
            "arguments": {
                "self": []
            }
        },
        "MDT.is_disjoint": {
            "name": "is_disjoint",
            "location": 111,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MDT.reduce": {
            "name": "reduce",
            "location": 114,
            "return": [
                "'MDT'"
            ],
            "arguments": {
                "self": []
            }
        },
        "T.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "dr": [],
                "cr": [],
                "balance_type": [
                    "BalanceType"
                ],
                "account_name": [
                    "str"
                ],
                "label": [
                    "str"
                ]
            }
        },
        "T.dr": {
            "name": "dr",
            "location": 146,
            "return": [
                "'T'"
            ],
            "arguments": {
                "self": []
            }
        },
        "T.cr": {
            "name": "cr",
            "location": 150,
            "return": [
                "'T'"
            ],
            "arguments": {
                "self": []
            }
        },
        "T.__str__": {
            "name": "__str__",
            "location": 153,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "T.debit_balance": {
            "name": "debit_balance",
            "location": 157,
            "return": [
                "Decimal"
            ],
            "arguments": {
                "self": []
            }
        },
        "T.credit_balance": {
            "name": "credit_balance",
            "location": 161,
            "return": [
                "Decimal"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tacc-master/tests/test_t_accounts.py": {
        "test_t_initialised_correctly_without_arguments": {
            "name": "test_t_initialised_correctly_without_arguments",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_t_initialised_correctly_with_basic_arguments": {
            "name": "test_t_initialised_correctly_with_basic_arguments",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_t_initialised_correctly_with_extra_arguments": {
            "name": "test_t_initialised_correctly_with_extra_arguments",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_t_balance_for_debit_balance": {
            "name": "test_t_balance_for_debit_balance",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "test_t_balance_for_credit_balance": {
            "name": "test_t_balance_for_credit_balance",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_t_equality": {
            "name": "test_t_equality",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "test_t_addition": {
            "name": "test_t_addition",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "test_t_substraction": {
            "name": "test_t_substraction",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "test_t_bool": {
            "name": "test_t_bool",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_balance_for_debit_balance_t_account": {
            "name": "test_balance_for_debit_balance_t_account",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "test_balance_for_credit_balance_t_account": {
            "name": "test_balance_for_credit_balance_t_account",
            "location": 80,
            "return": [],
            "arguments": {}
        },
        "test_t_account_as_tuple": {
            "name": "test_t_account_as_tuple",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "test_balance_for_debit_balance_t_account.DebitT.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_balance_for_credit_balance_t_account.DebitT.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    }
}
{
    "taggy-master/setup.py": {},
    "taggy-master/taggy/cli.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 29,
            "return": [
                "Namespace"
            ],
            "arguments": {
                "args": []
            }
        },
        "is_git_repo": {
            "name": "is_git_repo",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "sanitize": {
            "name": "sanitize",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "s": []
            }
        },
        "color_diff": {
            "name": "color_diff",
            "location": 90,
            "return": [],
            "arguments": {
                "diff": []
            }
        },
        "get_tag": {
            "name": "get_tag",
            "location": 105,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "default": []
            }
        },
        "create_tag": {
            "name": "create_tag",
            "location": 122,
            "return": [],
            "arguments": {
                "path": [
                    "str"
                ],
                "tag": [],
                "message": []
            }
        },
        "find_and_replace": {
            "name": "find_and_replace",
            "location": 131,
            "return": [],
            "arguments": {
                "target": [],
                "old": [],
                "new": [],
                "preview": []
            }
        },
        "strip_prefix": {
            "name": "strip_prefix",
            "location": 159,
            "return": [
                "Tuple[(Optional[str], str)]"
            ],
            "arguments": {
                "tag": []
            }
        },
        "runchecks": {
            "name": "runchecks",
            "location": 165,
            "return": [],
            "arguments": {
                "cwd": []
            }
        },
        "main": {
            "name": "main",
            "location": 178,
            "return": [],
            "arguments": {}
        }
    },
    "taggy-master/taggy/prompts.py": {
        "build_choices": {
            "name": "build_choices",
            "location": 14,
            "return": [],
            "arguments": {
                "choices": [],
                "allow_prefix": []
            }
        },
        "_prompt_choice": {
            "name": "_prompt_choice",
            "location": 23,
            "return": [],
            "arguments": {
                "question": [],
                "options": [],
                "lower": []
            }
        },
        "choice": {
            "name": "choice",
            "location": 33,
            "return": [],
            "arguments": {
                "question": [],
                "choices": [],
                "allow_prefix": [],
                "lower": []
            }
        },
        "prompt": {
            "name": "prompt",
            "location": 41,
            "return": [],
            "arguments": {
                "question": [],
                "lower": []
            }
        },
        "confirm": {
            "name": "confirm",
            "location": 50,
            "return": [],
            "arguments": {
                "question": []
            }
        },
        "WriteOnceDict.__setitem__": {
            "name": "__setitem__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        }
    },
    "taggy-master/taggy/semver.py": {
        "pad": {
            "name": "pad",
            "location": 9,
            "return": [],
            "arguments": {
                "iterable": [],
                "size": [],
                "padding": []
            }
        },
        "InvalidSemanticVersion.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "version": []
            }
        },
        "InvalidSemanticVersion.__str__": {
            "name": "__str__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Semver.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "version": []
            }
        },
        "Semver.components": {
            "name": "components",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Semver.valstrings": {
            "name": "valstrings",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Semver.bump": {
            "name": "bump",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "part": []
            }
        },
        "Semver.__repr__": {
            "name": "__repr__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Semver.__str__": {
            "name": "__str__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "taggy-master/taggy/__init__.py": {},
    "taggy-master/tests/test_cli.py": {
        "TestArgumentParsing.test_calls_system_exit_on_invalid_args": {
            "name": "test_calls_system_exit_on_invalid_args",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "capsys": []
            }
        },
        "TestArgumentParsing.test_provides_default_message": {
            "name": "test_provides_default_message",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestArgumentParsing.test_parses_files": {
            "name": "test_parses_files",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestArgumentParsing.test_parses_message": {
            "name": "test_parses_message",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestArgumentParsing.test_no_color_flag_disables_crayons": {
            "name": "test_no_color_flag_disables_crayons",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "mock_crayons": []
            }
        },
        "TestArgumentParsing.test_version_flag": {
            "name": "test_version_flag",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "mock_version": [],
                "capsys": []
            }
        },
        "TestUtils.test_is_git_repo": {
            "name": "test_is_git_repo",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "mock_run": []
            }
        },
        "TestUtils.test_sanitize": {
            "name": "test_sanitize",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUtils.test_color_diff": {
            "name": "test_color_diff",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "mock_crayons": []
            }
        },
        "TestUtils.test_get_tag": {
            "name": "test_get_tag",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "mock_run": []
            }
        },
        "TestUtils.test_get_tag_on_error": {
            "name": "test_get_tag_on_error",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "mock_run": []
            }
        },
        "TestUtils.test_create_tag": {
            "name": "test_create_tag",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "mock_run": []
            }
        },
        "TestUtils.test_strip_prefix": {
            "name": "test_strip_prefix",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRunChecks.test_aborts_if_git_executable_not_found": {
            "name": "test_aborts_if_git_executable_not_found",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "mock_which": []
            }
        },
        "TestRunChecks.aborts_if_not_git_repository": {
            "name": "aborts_if_not_git_repository",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "mock_is_git_repo": []
            }
        },
        "TestRunChecks.test_prompts_git_repo_creation": {
            "name": "test_prompts_git_repo_creation",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "_": [],
                "mock_confirm": [],
                "capsys": []
            }
        },
        "TestRunChecks.test_creates_git_repo_on_confirm": {
            "name": "test_creates_git_repo_on_confirm",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "mock_run": [],
                "_": [],
                "__": []
            }
        },
        "TestRunChecks.test_runcheck_returns_none_if_valid": {
            "name": "test_runcheck_returns_none_if_valid",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "mock_is_git_repo": []
            }
        },
        "TestFindAndReplace.test_with_preview": {
            "name": "test_with_preview",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "mock_mkstemp": [],
                "mock_remove": []
            }
        },
        "TestFindAndReplace.test_replaces_content": {
            "name": "test_replaces_content",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "mock_mkstemp": [],
                "mock_copy": []
            }
        },
        "TestInitalTagCreation.test_prompts_for_tag_creation": {
            "name": "test_prompts_for_tag_creation",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "_": [],
                "__": [],
                "___": []
            }
        },
        "TestInitalTagCreation.test_creates_tag_on_confirmation": {
            "name": "test_creates_tag_on_confirmation",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "mock_create": [],
                "_": [],
                "__": [],
                "___": []
            }
        },
        "TestHandlesArgs.test_prompts_for_bump_arg": {
            "name": "test_prompts_for_bump_arg",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "mock_choice": [],
                "__": [],
                "___": []
            }
        },
        "TestHandlesArgs.test_prints_preview": {
            "name": "test_prints_preview",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "_": [],
                "__": [],
                "capsys": []
            }
        },
        "TestWithFilePositionalArgs.setup_class": {
            "name": "setup_class",
            "location": 258,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestWithFilePositionalArgs.test_shows_file_diffs_on_preview": {
            "name": "test_shows_file_diffs_on_preview",
            "location": 272,
            "return": [],
            "arguments": {
                "self": [],
                "mock_args": [],
                "_": [],
                "__": [],
                "___": [],
                "capsys": []
            }
        },
        "TestWithFilePositionalArgs.test_commits_changes": {
            "name": "test_commits_changes",
            "location": 301,
            "return": [],
            "arguments": {
                "self": [],
                "mock_args": [],
                "_": [],
                "__": [],
                "___": [],
                "capsys": []
            }
        },
        "TestWithFilePositionalArgs.test_skip_commit_on_prompt": {
            "name": "test_skip_commit_on_prompt",
            "location": 318,
            "return": [],
            "arguments": {
                "self": [],
                "mock_args": [],
                "mock_run": [],
                "_": [],
                "__": [],
                "capsys": []
            }
        },
        "TestTagCreation.test_handles_prefix": {
            "name": "test_handles_prefix",
            "location": 335,
            "return": [],
            "arguments": {
                "self": [],
                "mock_create_tag": [],
                "_": [],
                "__": []
            }
        },
        "TestTagCreation.test_success_message": {
            "name": "test_success_message",
            "location": 346,
            "return": [],
            "arguments": {
                "self": [],
                "mock_create_tag": [],
                "_": [],
                "__": [],
                "capsys": []
            }
        }
    },
    "taggy-master/tests/test_prompts.py": {
        "test_prompt_lowers_input": {
            "name": "test_prompt_lowers_input",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_prompt_quits_on_interrupt": {
            "name": "test_prompt_quits_on_interrupt",
            "location": 15,
            "return": [],
            "arguments": {
                "mock_input": []
            }
        },
        "test_confirm": {
            "name": "test_confirm",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "test_choice_accepts_prefix": {
            "name": "test_choice_accepts_prefix",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_choice_lowers_case": {
            "name": "test_choice_lowers_case",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "test_choice_case_insensitive_by_default": {
            "name": "test_choice_case_insensitive_by_default",
            "location": 40,
            "return": [],
            "arguments": {
                "mock_input": []
            }
        },
        "test_choice_with_lower_disabled": {
            "name": "test_choice_with_lower_disabled",
            "location": 48,
            "return": [],
            "arguments": {
                "mock_input": []
            }
        },
        "test_choice_retries_on_failure": {
            "name": "test_choice_retries_on_failure",
            "location": 55,
            "return": [],
            "arguments": {
                "mock_input": []
            }
        },
        "test_build_choices_with_prefix": {
            "name": "test_build_choices_with_prefix",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "test_build_choices_with_duplicate_keys": {
            "name": "test_build_choices_with_duplicate_keys",
            "location": 75,
            "return": [],
            "arguments": {}
        }
    },
    "taggy-master/tests/test_semver.py": {
        "test_semver": {
            "name": "test_semver",
            "location": 11,
            "return": [],
            "arguments": {
                "data": [],
                "part": [],
                "expected": []
            }
        },
        "test_repr": {
            "name": "test_repr",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "test_should_parse_zero_prerelease": {
            "name": "test_should_parse_zero_prerelease",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_should_parse_version": {
            "name": "test_should_parse_version",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "check_validity": {
            "name": "check_validity",
            "location": 63,
            "return": [],
            "arguments": {
                "tag": []
            }
        },
        "test_raises_exception_on_invalid_prerelease": {
            "name": "test_raises_exception_on_invalid_prerelease",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "test_raises_exception_on_missing_part": {
            "name": "test_raises_exception_on_missing_part",
            "location": 73,
            "return": [],
            "arguments": {}
        }
    }
}
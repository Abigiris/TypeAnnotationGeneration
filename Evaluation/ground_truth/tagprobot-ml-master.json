{
    "tagprobot-ml-master/python/main.py": {
        "main": {
            "name": "main",
            "location": 15,
            "return": [],
            "arguments": {}
        }
    },
    "tagprobot-ml-master/python/input/input.py": {
        "Keys.from_pygame_pressed": {
            "name": "from_pygame_pressed",
            "location": 16,
            "return": [
                "'Keys'"
            ],
            "arguments": {
                "pyg_keys": []
            }
        },
        "Keys.random_keys": {
            "name": "random_keys",
            "location": 21,
            "return": [
                "'Keys'"
            ],
            "arguments": {}
        }
    },
    "tagprobot-ml-master/python/input/__init__.py": {},
    "tagprobot-ml-master/python/performance/point_update_performance.py": {
        "profile_tuple": {
            "name": "profile_tuple",
            "location": 62,
            "return": [],
            "arguments": {
                "initial": [
                    "Tuple[(int, int)]"
                ],
                "values": [
                    "List[Tuple[(int, int)]]"
                ]
            }
        },
        "profile_point0": {
            "name": "profile_point0",
            "location": 68,
            "return": [],
            "arguments": {
                "initial": [
                    "Tuple[(int, int)]"
                ],
                "values": [
                    "List[Tuple[(int, int)]]"
                ]
            }
        },
        "profile_point1": {
            "name": "profile_point1",
            "location": 75,
            "return": [],
            "arguments": {
                "initial": [
                    "Tuple[(int, int)]"
                ],
                "values": [
                    "List[Tuple[(int, int)]]"
                ]
            }
        },
        "profile_point_dataclass0": {
            "name": "profile_point_dataclass0",
            "location": 81,
            "return": [],
            "arguments": {
                "initial": [
                    "Tuple[(int, int)]"
                ],
                "values": [
                    "List[Tuple[(int, int)]]"
                ]
            }
        },
        "profile_point_dataclass1": {
            "name": "profile_point_dataclass1",
            "location": 87,
            "return": [],
            "arguments": {
                "initial": [
                    "Tuple[(int, int)]"
                ],
                "values": [
                    "List[Tuple[(int, int)]]"
                ]
            }
        },
        "profile_point_dataclass2": {
            "name": "profile_point_dataclass2",
            "location": 93,
            "return": [],
            "arguments": {
                "initial": [
                    "Tuple[(int, int)]"
                ],
                "values": [
                    "List[Tuple[(int, int)]]"
                ]
            }
        },
        "profile_point_deepcopy": {
            "name": "profile_point_deepcopy",
            "location": 100,
            "return": [],
            "arguments": {
                "initial": [
                    "Tuple[(int, int)]"
                ],
                "values": [
                    "List[Tuple[(int, int)]]"
                ]
            }
        },
        "Point.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        }
    },
    "tagprobot-ml-master/python/performance/__init__.py": {},
    "tagprobot-ml-master/python/state/ball.py": {
        "Ball.get_shape": {
            "name": "get_shape",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ball.is_on_team_tile": {
            "name": "is_on_team_tile",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "map": []
            }
        },
        "Ball.handle_input": {
            "name": "handle_input",
            "location": 70,
            "return": [
                "'Ball'"
            ],
            "arguments": {
                "self": [],
                "keypresses": [
                    "Keys"
                ]
            }
        },
        "Ball.accels_from_input": {
            "name": "accels_from_input",
            "location": 74,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": [],
                "keypresses": [
                    "Keys"
                ]
            }
        },
        "Ball._accel_from_input": {
            "name": "_accel_from_input",
            "location": 79,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "negative_dir_pressed": [
                    "bool"
                ],
                "positive_dir_pressed": [
                    "bool"
                ]
            }
        },
        "Ball.update": {
            "name": "update",
            "location": 92,
            "return": [
                "'Ball'"
            ],
            "arguments": {
                "self": [],
                "dt": [
                    "int"
                ]
            }
        },
        "Ball._difference_eq_update": {
            "name": "_difference_eq_update",
            "location": 97,
            "return": [
                "Tuple[(float, float, float, float)]"
            ],
            "arguments": {
                "self": [],
                "dt": [
                    "int"
                ]
            }
        },
        "Ball.handle_pop": {
            "name": "handle_pop",
            "location": 118,
            "return": [
                "'Ball'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ball.on_same_team": {
            "name": "on_same_team",
            "location": 122,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other_ball": [
                    "'Ball'"
                ]
            }
        }
    },
    "tagprobot-ml-master/python/state/flag.py": {
        "Flag.get_shape": {
            "name": "get_shape",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tagprobot-ml-master/python/state/heuristic_scores.py": {
        "naive_ego_to_flag": {
            "name": "naive_ego_to_flag",
            "location": 10,
            "return": [
                "float"
            ],
            "arguments": {
                "state": [
                    "State"
                ]
            }
        },
        "naive_ego_to_ball": {
            "name": "naive_ego_to_ball",
            "location": 18,
            "return": [
                "float"
            ],
            "arguments": {
                "state": [
                    "State"
                ],
                "target_ball_id": [
                    "UUID"
                ]
            }
        }
    },
    "tagprobot-ml-master/python/state/state.py": {
        "State.__post_init__": {
            "name": "__post_init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.draw": {
            "name": "draw",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "screen": []
            }
        },
        "State._handle_input": {
            "name": "_handle_input",
            "location": 35,
            "return": [
                "'State'"
            ],
            "arguments": {
                "self": [],
                "user_input": [
                    "Input"
                ]
            }
        },
        "State._step_time": {
            "name": "_step_time",
            "location": 46,
            "return": [
                "'State'"
            ],
            "arguments": {
                "self": [],
                "dt": [
                    "int"
                ]
            }
        },
        "State.next_state": {
            "name": "next_state",
            "location": 84,
            "return": [
                "'State'"
            ],
            "arguments": {
                "self": [],
                "user_input": [
                    "Input"
                ],
                "dt": [
                    "int"
                ]
            }
        },
        "State.get_ego_ball": {
            "name": "get_ego_ball",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.ball_gets_flag": {
            "name": "ball_gets_flag",
            "location": 97,
            "return": [
                "bool"
            ],
            "arguments": {
                "ball": [
                    "Ball"
                ],
                "flag": [
                    "Flag"
                ]
            }
        },
        "State.ball_gets_tagged": {
            "name": "ball_gets_tagged",
            "location": 106,
            "return": [
                "bool"
            ],
            "arguments": {
                "ball": [
                    "Ball"
                ],
                "balls": [
                    "List[Ball]"
                ]
            }
        },
        "State._handle_input.pass_input_to_ball": {
            "name": "pass_input_to_ball",
            "location": 36,
            "return": [],
            "arguments": {
                "ball": [
                    "Ball"
                ],
                "commands": [
                    "Dict[(UUID, Keys)]"
                ]
            }
        }
    },
    "tagprobot-ml-master/python/state/__init__.py": {},
    "tagprobot-ml-master/python/strategies/myopic.py": {
        "best_keypresses": {
            "name": "best_keypresses",
            "location": 8,
            "return": [
                "Keys"
            ],
            "arguments": {
                "state": [
                    "State"
                ],
                "dt": [
                    "int"
                ]
            }
        },
        "evaluate_keys": {
            "name": "evaluate_keys",
            "location": 26,
            "return": [
                "float"
            ],
            "arguments": {
                "state": [
                    "State"
                ],
                "keypresses": [
                    "Keys"
                ],
                "dt": [
                    "int"
                ]
            }
        }
    },
    "tagprobot-ml-master/python/strategies/__init__.py": {},
    "tagprobot-ml-master/python/test/__init__.py": {},
    "tagprobot-ml-master/python/test/state/test_ball.py": {
        "TestBall.test_draw_is_offset": {
            "name": "test_draw_is_offset",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "ball": [
                    "Ball"
                ]
            }
        }
    },
    "tagprobot-ml-master/python/test/state/__init__.py": {},
    "tagprobot-ml-master/python/utils/math.py": {
        "clamp": {
            "name": "clamp",
            "location": 4,
            "return": [],
            "arguments": {
                "num": [],
                "range_min": [],
                "range_max": []
            }
        },
        "sq_dist": {
            "name": "sq_dist",
            "location": 8,
            "return": [
                "float"
            ],
            "arguments": {
                "x1": [
                    "float"
                ],
                "y1": [
                    "float"
                ],
                "x2": [
                    "float"
                ],
                "y2": [
                    "float"
                ]
            }
        },
        "dist": {
            "name": "dist",
            "location": 12,
            "return": [
                "float"
            ],
            "arguments": {
                "x1": [
                    "float"
                ],
                "y1": [
                    "float"
                ],
                "x2": [
                    "float"
                ],
                "y2": [
                    "float"
                ]
            }
        }
    },
    "tagprobot-ml-master/python/utils/silent_pygame.py": {},
    "tagprobot-ml-master/python/utils/timeit.py": {
        "timeit": {
            "name": "timeit",
            "location": 4,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "timeit_multiple": {
            "name": "timeit_multiple",
            "location": 20,
            "return": [],
            "arguments": {
                "func": [],
                "iters": []
            }
        }
    },
    "tagprobot-ml-master/python/utils/__init__.py": {},
    "tagprobot-ml-master/python/visualization/drawable.py": {
        "Drawable.draw": {
            "name": "draw",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "screen": []
            }
        }
    },
    "tagprobot-ml-master/python/visualization/shape.py": {
        "Shape.get_shape": {
            "name": "get_shape",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Shape.draw": {
            "name": "draw",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "screen": []
            }
        }
    },
    "tagprobot-ml-master/python/visualization/__init__.py": {}
}
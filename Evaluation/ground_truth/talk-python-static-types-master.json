{
    "talk-python-static-types-master/api_definition/client.py": {
        "API.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "API.ping_request": {
            "name": "ping_request",
            "location": 9,
            "return": [
                "response.PingResponse"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "request.PingRequest"
                ]
            }
        },
        "API.data_for_date": {
            "name": "data_for_date",
            "location": 12,
            "return": [
                "response.DataResponse"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "request.DateRequest"
                ]
            }
        },
        "API.data_for_range": {
            "name": "data_for_range",
            "location": 15,
            "return": [
                "response.DataResponse"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "request.RangeRequest"
                ]
            }
        }
    },
    "talk-python-static-types-master/api_definition/server.py": {
        "make_api_endpoint": {
            "name": "make_api_endpoint",
            "location": 9,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "recv_post": {
            "name": "recv_post",
            "location": 21,
            "return": [
                "resp.PingResponse"
            ],
            "arguments": {
                "data": [
                    "req.PingRequest"
                ]
            }
        },
        "recv_get": {
            "name": "recv_get",
            "location": 27,
            "return": [
                "resp.DataResponse"
            ],
            "arguments": {
                "data": [
                    "req.DataRequest"
                ]
            }
        },
        "make_api_endpoint.request_inner": {
            "name": "request_inner",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "talk-python-static-types-master/api_definition/types/request.py": {},
    "talk-python-static-types-master/api_definition/types/response.py": {},
    "talk-python-static-types-master/api_definition/types/__init__.py": {},
    "talk-python-static-types-master/basics/annotated_py2.py": {
        "greeting": {
            "name": "greeting",
            "location": 1,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "Greeter.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Greeter.greet": {
            "name": "greet",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "talk-python-static-types-master/basics/annotated_py36.py": {
        "greeting": {
            "name": "greeting",
            "location": 1,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "Greeter.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Greeter.greet": {
            "name": "greet",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "talk-python-static-types-master/basics/stub.py": {
        "greeting": {
            "name": "greeting",
            "location": 1,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "Greeter.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Greeter.greet": {
            "name": "greet",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "talk-python-static-types-master/basics/unannotated.py": {
        "greeting": {
            "name": "greeting",
            "location": 1,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "Greeter.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Greeter.greet": {
            "name": "greet",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "talk-python-static-types-master/basic_generics/annotated.py": {
        "parse_int": {
            "name": "parse_int",
            "location": 4,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "bytes_to_char_values": {
            "name": "bytes_to_char_values",
            "location": 11,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "data": [
                    "bytes"
                ]
            }
        },
        "add_one": {
            "name": "add_one",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "Union[(int, str)]"
                ]
            }
        },
        "ignore_x": {
            "name": "ignore_x",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "Any"
                ]
            }
        }
    },
    "talk-python-static-types-master/basic_generics/unannotated.py": {
        "parse_int": {
            "name": "parse_int",
            "location": 1,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "bytes_to_char_values": {
            "name": "bytes_to_char_values",
            "location": 8,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "add_one": {
            "name": "add_one",
            "location": 19,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "ignore_x": {
            "name": "ignore_x",
            "location": 26,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "talk-python-static-types-master/callables/annotated.py": {
        "double": {
            "name": "double",
            "location": 9,
            "return": [
                "T"
            ],
            "arguments": {
                "x": [
                    "T"
                ]
            }
        },
        "compose": {
            "name": "compose",
            "location": 13,
            "return": [
                "Callable[([T], R)]"
            ],
            "arguments": {
                "f": [
                    "Callable[([S], R)]"
                ],
                "g": [
                    "Callable[([T], S)]"
                ]
            }
        },
        "map_and_double": {
            "name": "map_and_double",
            "location": 17,
            "return": [
                "Iterable[R]"
            ],
            "arguments": {
                "fn": [
                    "Callable[([T], R)]"
                ],
                "iterable": [
                    "Iterable[T]"
                ]
            }
        }
    },
    "talk-python-static-types-master/callables/unannotated.py": {
        "double": {
            "name": "double",
            "location": 4,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "compose": {
            "name": "compose",
            "location": 8,
            "return": [],
            "arguments": {
                "f": [],
                "g": []
            }
        },
        "map_and_double": {
            "name": "map_and_double",
            "location": 12,
            "return": [],
            "arguments": {
                "fn": [],
                "iterable": []
            }
        }
    },
    "talk-python-static-types-master/coroutines_generators/annotated.py": {
        "fib_seq": {
            "name": "fib_seq",
            "location": 4,
            "return": [
                "Generator[(int, None, None)]"
            ],
            "arguments": {
                "first": [
                    "int"
                ],
                "second": [
                    "int"
                ]
            }
        }
    },
    "talk-python-static-types-master/coroutines_generators/unannotated.py": {
        "fib_seq": {
            "name": "fib_seq",
            "location": 1,
            "return": [],
            "arguments": {
                "first": [],
                "second": []
            }
        }
    },
    "talk-python-static-types-master/defining_generic/annotated.py": {
        "NonEmptyConsList.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T"
                ],
                "rest": []
            }
        },
        "NonEmptyConsList.length": {
            "name": "length",
            "location": 14,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeNode.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T"
                ],
                "left": [],
                "right": []
            }
        },
        "TreeNode.get_height": {
            "name": "get_height",
            "location": 31,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "talk-python-static-types-master/defining_generic/unannotated.py": {
        "NonEmptyConsList.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "rest": []
            }
        },
        "NonEmptyConsList.length": {
            "name": "length",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeNode.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "left": [],
                "right": []
            }
        },
        "TreeNode.get_height": {
            "name": "get_height",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "talk-python-static-types-master/typevars/annotated.py": {
        "identity": {
            "name": "identity",
            "location": 7,
            "return": [
                "T"
            ],
            "arguments": {
                "x": [
                    "T"
                ]
            }
        },
        "make_list": {
            "name": "make_list",
            "location": 11,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "x": [
                    "T"
                ]
            }
        },
        "make_dict": {
            "name": "make_dict",
            "location": 15,
            "return": [
                "Dict[(T, S)]"
            ],
            "arguments": {
                "k": [
                    "T"
                ],
                "v": [
                    "S"
                ]
            }
        },
        "concat_strings_with_inf": {
            "name": "concat_strings_with_inf",
            "location": 19,
            "return": [
                "Tuple[(AnyStr, int)]"
            ],
            "arguments": {
                "str1": [
                    "AnyStr"
                ],
                "str2": [
                    "AnyStr"
                ]
            }
        }
    },
    "talk-python-static-types-master/typevars/unannotated.py": {
        "identity": {
            "name": "identity",
            "location": 1,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "make_list": {
            "name": "make_list",
            "location": 5,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "make_dict": {
            "name": "make_dict",
            "location": 9,
            "return": [],
            "arguments": {
                "k": [],
                "v": []
            }
        },
        "concat_strings_with_inf": {
            "name": "concat_strings_with_inf",
            "location": 13,
            "return": [],
            "arguments": {
                "str1": [],
                "str2": []
            }
        }
    },
    "talk-python-static-types-master/variance/bad.py": {
        "expand_type": {
            "name": "expand_type",
            "location": 4,
            "return": [
                "List[(str, int)]"
            ],
            "arguments": {
                "x": [
                    "List[str]"
                ]
            }
        }
    },
    "talk-python-static-types-master/variance/good.py": {
        "expand_type": {
            "name": "expand_type",
            "location": 4,
            "return": [
                "List[(str, int)]"
            ],
            "arguments": {
                "x": [
                    "List[str]"
                ]
            }
        }
    }
}
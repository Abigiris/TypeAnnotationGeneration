{
    "taxonomy-master/setup.py": {},
    "taxonomy-master/data_import/acomys.py": {
        "extract_names": {
            "name": "extract_names",
            "location": 9,
            "return": [
                "DataT"
            ],
            "arguments": {
                "pages": [
                    "PagesT"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 19,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 32,
            "return": [
                "DataT"
            ],
            "arguments": {}
        }
    },
    "taxonomy-master/data_import/africa.py": {
        "extract_names": {
            "name": "extract_names",
            "location": 10,
            "return": [
                "DataT"
            ],
            "arguments": {
                "pages": [
                    "PagesT"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 34,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "translate_rest": {
            "name": "translate_rest",
            "location": 69,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 81,
            "return": [
                "DataT"
            ],
            "arguments": {}
        }
    },
    "taxonomy-master/data_import/africa8808.py": {
        "extract_names": {
            "name": "extract_names",
            "location": 10,
            "return": [
                "DataT"
            ],
            "arguments": {
                "pages": [
                    "PagesT"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 37,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 53,
            "return": [
                "DataT"
            ],
            "arguments": {}
        }
    },
    "taxonomy-master/data_import/amtypes.py": {
        "extract_names": {
            "name": "extract_names",
            "location": 13,
            "return": [
                "DataT"
            ],
            "arguments": {
                "pages": [
                    "PagesT"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 71,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 166,
            "return": [
                "DataT"
            ],
            "arguments": {}
        },
        "extract_names.start_label": {
            "name": "start_label",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str"
                ],
                "line": [
                    "str"
                ]
            }
        }
    },
    "taxonomy-master/data_import/ansp.py": {
        "extract_names": {
            "name": "extract_names",
            "location": 12,
            "return": [
                "DataT"
            ],
            "arguments": {
                "pages": [
                    "Iterable[Tuple[(int, List[str])]]"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 84,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 132,
            "return": [
                "DataT"
            ],
            "arguments": {}
        },
        "extract_names.start_label": {
            "name": "start_label",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str"
                ],
                "line": [
                    "str"
                ]
            }
        }
    },
    "taxonomy-master/data_import/arctostypes.py": {
        "extract_names": {
            "name": "extract_names",
            "location": 40,
            "return": [
                "DataT"
            ],
            "arguments": {
                "lines": [
                    "Iterable[str]"
                ]
            }
        },
        "types_of_collection": {
            "name": "types_of_collection",
            "location": 45,
            "return": [
                "Dict[(str, models.Name)]"
            ],
            "arguments": {
                "collection_name": [
                    "str"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 58,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "filter_known": {
            "name": "filter_known",
            "location": 70,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "try_manual": {
            "name": "try_manual",
            "location": 89,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "print_names": {
            "name": "print_names",
            "location": 99,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 105,
            "return": [
                "DataT"
            ],
            "arguments": {}
        }
    },
    "taxonomy-master/data_import/australia.py": {
        "can_be_name_header": {
            "name": "can_be_name_header",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "extract_names": {
            "name": "extract_names",
            "location": 72,
            "return": [
                "DataT"
            ],
            "arguments": {
                "pages": [
                    "Iterable[Tuple[(int, List[str])]]"
                ]
            }
        },
        "build_refs_dict": {
            "name": "build_refs_dict",
            "location": 220,
            "return": [
                "RefsDictT"
            ],
            "arguments": {
                "refs": [
                    "DataT"
                ]
            }
        },
        "_translate_single_author": {
            "name": "_translate_single_author",
            "location": 253,
            "return": [
                "str"
            ],
            "arguments": {
                "raw_author": [
                    "str"
                ]
            }
        },
        "split_text": {
            "name": "split_text",
            "location": 284,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "associate_refs": {
            "name": "associate_refs",
            "location": 312,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ],
                "refs_dict": [
                    "RefsDictT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "extract_names.start_label": {
            "name": "start_label",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str"
                ],
                "line": [
                    "str"
                ]
            }
        }
    },
    "taxonomy-master/data_import/chasen1940.py": {
        "extract_names": {
            "name": "extract_names",
            "location": 10,
            "return": [
                "DataT"
            ],
            "arguments": {
                "pages": [
                    "PagesT"
                ]
            }
        },
        "split_names": {
            "name": "split_names",
            "location": 37,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 66,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 83,
            "return": [
                "DataT"
            ],
            "arguments": {}
        }
    },
    "taxonomy-master/data_import/cmntypes.py": {
        "extract_names": {
            "name": "extract_names",
            "location": 20,
            "return": [
                "DataT"
            ],
            "arguments": {
                "pages": [
                    "PagesT"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 67,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 88,
            "return": [
                "DataT"
            ],
            "arguments": {}
        },
        "extract_names.start_label": {
            "name": "start_label",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str"
                ],
                "line": [
                    "str"
                ]
            }
        }
    },
    "taxonomy-master/data_import/cuba.py": {
        "extract_names": {
            "name": "extract_names",
            "location": 23,
            "return": [
                "DataT"
            ],
            "arguments": {
                "pages": [
                    "PagesT"
                ]
            }
        },
        "split_names": {
            "name": "split_names",
            "location": 59,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "translate_spanish_date": {
            "name": "translate_spanish_date",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "date": [
                    "str"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 92,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 122,
            "return": [
                "DataT"
            ],
            "arguments": {}
        }
    },
    "taxonomy-master/data_import/decolumnize.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "taxonomy-master/data_import/ellermanms.py": {
        "extract_pages": {
            "name": "extract_pages",
            "location": 18,
            "return": [
                "Iterable[Tuple[(int, List[str])]]"
            ],
            "arguments": {
                "lines": [
                    "Iterable[str]"
                ]
            }
        },
        "extract_names": {
            "name": "extract_names",
            "location": 35,
            "return": [
                "DataT"
            ],
            "arguments": {
                "pages": [
                    "PagesT"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 54,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "identify_rest": {
            "name": "identify_rest",
            "location": 79,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 92,
            "return": [
                "DataT"
            ],
            "arguments": {}
        }
    },
    "taxonomy-master/data_import/fmnhholotypes.py": {
        "extract_names": {
            "name": "extract_names",
            "location": 32,
            "return": [
                "DataT"
            ],
            "arguments": {
                "lines": [
                    "Iterable[str]"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 59,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "filter_known": {
            "name": "filter_known",
            "location": 68,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "try_manual": {
            "name": "try_manual",
            "location": 86,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 96,
            "return": [
                "DataT"
            ],
            "arguments": {}
        }
    },
    "taxonomy-master/data_import/fmnhtypes.py": {
        "extract_names": {
            "name": "extract_names",
            "location": 12,
            "return": [
                "DataT"
            ],
            "arguments": {
                "pages": [
                    "PagesT"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 64,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 85,
            "return": [
                "DataT"
            ],
            "arguments": {}
        },
        "extract_names.start_label": {
            "name": "start_label",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str"
                ],
                "line": [
                    "str"
                ]
            }
        }
    },
    "taxonomy-master/data_import/gerbils.py": {
        "split_fields": {
            "name": "split_fields",
            "location": 10,
            "return": [
                "DataT"
            ],
            "arguments": {
                "lines": [
                    "Iterable[str]"
                ]
            }
        },
        "translate_to_db": {
            "name": "translate_to_db",
            "location": 38,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ],
                "source": [
                    "lib.Source"
                ]
            }
        },
        "translate_type_localities": {
            "name": "translate_type_localities",
            "location": 42,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 55,
            "return": [
                "DataT"
            ],
            "arguments": {}
        }
    },
    "taxonomy-master/data_import/gymnophiona.py": {
        "extract_names": {
            "name": "extract_names",
            "location": 10,
            "return": [
                "DataT"
            ],
            "arguments": {
                "pages": [
                    "PagesT"
                ]
            }
        },
        "split_names": {
            "name": "split_names",
            "location": 29,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 42,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 57,
            "return": [
                "DataT"
            ],
            "arguments": {}
        }
    },
    "taxonomy-master/data_import/japanese.py": {
        "extract_names": {
            "name": "extract_names",
            "location": 18,
            "return": [
                "DataT"
            ],
            "arguments": {
                "pages": [
                    "PagesT"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 37,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 83,
            "return": [
                "DataT"
            ],
            "arguments": {}
        }
    },
    "taxonomy-master/data_import/kansastypes.py": {
        "extract_names": {
            "name": "extract_names",
            "location": 12,
            "return": [
                "DataT"
            ],
            "arguments": {
                "pages": [
                    "Iterable[Tuple[(int, List[str])]]"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 57,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "associate_names": {
            "name": "associate_names",
            "location": 100,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 114,
            "return": [
                "DataT"
            ],
            "arguments": {}
        },
        "extract_names.start_label": {
            "name": "start_label",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str"
                ],
                "line": [
                    "str"
                ]
            }
        }
    },
    "taxonomy-master/data_import/lauriehill.py": {
        "extract_pages": {
            "name": "extract_pages",
            "location": 33,
            "return": [
                "Iterable[Tuple[(int, List[str])]]"
            ],
            "arguments": {
                "lines": [
                    "Iterable[str]"
                ]
            }
        },
        "extract_names": {
            "name": "extract_names",
            "location": 60,
            "return": [
                "DataT"
            ],
            "arguments": {
                "pages": [
                    "Iterable[Tuple[(int, List[str])]]"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 79,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "translate_type_localities": {
            "name": "translate_type_localities",
            "location": 96,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 126,
            "return": [
                "DataT"
            ],
            "arguments": {}
        }
    },
    "taxonomy-master/data_import/lawrence1993.py": {
        "find_name": {
            "name": "find_name",
            "location": 50,
            "return": [
                "Optional[models.Name]"
            ],
            "arguments": {
                "original_name": [
                    "str"
                ],
                "authority": [
                    "str"
                ]
            }
        },
        "name_variants": {
            "name": "name_variants",
            "location": 85,
            "return": [
                "Iterable[Tuple[(str, str)]]"
            ],
            "arguments": {
                "original_name": [
                    "str"
                ],
                "authority": [
                    "str"
                ]
            }
        },
        "extract_altitude": {
            "name": "extract_altitude",
            "location": 138,
            "return": [
                "Optional[Tuple[(str, constants.AltitudeUnit)]]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "extract_date": {
            "name": "extract_date",
            "location": 152,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "extract_geographical_components": {
            "name": "extract_geographical_components",
            "location": 160,
            "return": [
                "List[Tuple[(str, ...)]]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "get_possible_names": {
            "name": "get_possible_names",
            "location": 184,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "names": [
                    "Iterable[str]"
                ]
            }
        },
        "get_region_from_name": {
            "name": "get_region_from_name",
            "location": 203,
            "return": [
                "Optional[models.Region]"
            ],
            "arguments": {
                "raw_names": [
                    "Iterable[str]"
                ]
            }
        },
        "extract_region": {
            "name": "extract_region",
            "location": 213,
            "return": [
                "Optional[models.Location]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "extract_collector": {
            "name": "extract_collector",
            "location": 236,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "enum_has_member": {
            "name": "enum_has_member",
            "location": 247,
            "return": [
                "bool"
            ],
            "arguments": {
                "enum_cls": [
                    "Type[enum.Enum]"
                ],
                "member": [
                    "str"
                ]
            }
        },
        "extract_type_specimen": {
            "name": "extract_type_specimen",
            "location": 256,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "extract_name_and_author": {
            "name": "extract_name_and_author",
            "location": 313,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "extract_pages": {
            "name": "extract_pages",
            "location": 332,
            "return": [
                "Iterable[Tuple[(int, List[str])]]"
            ],
            "arguments": {}
        },
        "align_columns": {
            "name": "align_columns",
            "location": 360,
            "return": [
                "Iterable[Tuple[(int, List[str])]]"
            ],
            "arguments": {}
        },
        "extract_names": {
            "name": "extract_names",
            "location": 379,
            "return": [
                "Iterable[Dict[(str, Any)]]"
            ],
            "arguments": {}
        },
        "clean_text": {
            "name": "clean_text",
            "location": 438,
            "return": [
                "Iterable[Dict[(str, Any)]]"
            ],
            "arguments": {}
        },
        "extract_data": {
            "name": "extract_data",
            "location": 458,
            "return": [
                "Iterable[Dict[(str, Any)]]"
            ],
            "arguments": {}
        },
        "associate_names": {
            "name": "associate_names",
            "location": 501,
            "return": [
                "Iterable[Dict[(str, Any)]]"
            ],
            "arguments": {}
        },
        "write_to_db": {
            "name": "write_to_db",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {
                "dry_run": [
                    "bool"
                ]
            }
        },
        "extract_names.start_label": {
            "name": "start_label",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str"
                ],
                "line": [
                    "str"
                ]
            }
        }
    },
    "taxonomy-master/data_import/lib.py": {
        "initial_count": {
            "name": "initial_count",
            "location": 263,
            "return": [
                "int"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "char": [
                    "str"
                ]
            }
        },
        "dedent_lines": {
            "name": "dedent_lines",
            "location": 274,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "lines": [
                    "List[str]"
                ]
            }
        },
        "get_text": {
            "name": "get_text",
            "location": 281,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "source": [
                    "Source"
                ],
                "encoding": [
                    "str"
                ]
            }
        },
        "extract_pages": {
            "name": "extract_pages",
            "location": 286,
            "return": [
                "PagesT"
            ],
            "arguments": {
                "lines": [
                    "Iterable[str]"
                ]
            }
        },
        "validate_pages": {
            "name": "validate_pages",
            "location": 315,
            "return": [
                "PagesT"
            ],
            "arguments": {
                "pages": [
                    "PagesT"
                ],
                "verbose": [
                    "bool"
                ],
                "check": [
                    "bool"
                ]
            }
        },
        "split_lines": {
            "name": "split_lines",
            "location": 335,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "lines": [
                    "List[str]"
                ],
                "page": [
                    "int"
                ],
                "single_column_pages": [
                    "Container[int]"
                ],
                "use_first": [
                    "bool"
                ],
                "min_column": [
                    "int"
                ],
                "dedent_right": [
                    "bool"
                ]
            }
        },
        "align_columns": {
            "name": "align_columns",
            "location": 379,
            "return": [
                "PagesT"
            ],
            "arguments": {
                "pages": [
                    "PagesT"
                ],
                "single_column_pages": [
                    "Container[int]"
                ],
                "use_first": [
                    "bool"
                ],
                "min_column": [
                    "int"
                ],
                "dedent_right": [
                    "bool"
                ]
            }
        },
        "clean_text": {
            "name": "clean_text",
            "location": 396,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ],
                "clean_labels": [
                    "bool"
                ]
            }
        },
        "clean_text_dict": {
            "name": "clean_text_dict",
            "location": 402,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "name": [
                    "Dict[(str, Any)]"
                ],
                "clean_labels": [
                    "bool"
                ]
            }
        },
        "clean_line_list": {
            "name": "clean_line_list",
            "location": 421,
            "return": [
                "str"
            ],
            "arguments": {
                "lines": [
                    "Iterable[str]"
                ]
            }
        },
        "clean_string": {
            "name": "clean_string",
            "location": 426,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "clean_text_simple": {
            "name": "clean_text_simple",
            "location": 437,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "split_name_authority": {
            "name": "split_name_authority",
            "location": 450,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "name_authority": [
                    "str"
                ]
            }
        },
        "translate_to_db": {
            "name": "translate_to_db",
            "location": 493,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ],
                "collection_name": [
                    "Optional[str]"
                ],
                "source": [
                    "Optional[Source]"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "translate_type_locality": {
            "name": "translate_type_locality",
            "location": 607,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ],
                "start_at_end": [
                    "bool"
                ],
                "quiet": [
                    "bool"
                ]
            }
        },
        "extract_name_and_author": {
            "name": "extract_name_and_author",
            "location": 640,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "enum_has_member": {
            "name": "enum_has_member",
            "location": 658,
            "return": [
                "bool"
            ],
            "arguments": {
                "enum_cls": [
                    "Type[enum.Enum]"
                ],
                "member": [
                    "str"
                ]
            }
        },
        "extract_species_type_kind": {
            "name": "extract_species_type_kind",
            "location": 667,
            "return": [
                "Optional[constants.SpeciesGroupType]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "extract_gender_age": {
            "name": "extract_gender_age",
            "location": 680,
            "return": [
                "List[TypeTag]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "extract_body_parts": {
            "name": "extract_body_parts",
            "location": 726,
            "return": [
                "List[TypeTag]"
            ],
            "arguments": {
                "organs": [
                    "str"
                ]
            }
        },
        "get_possible_names": {
            "name": "get_possible_names",
            "location": 780,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "names": [
                    "Iterable[str]"
                ]
            }
        },
        "get_region_from_name": {
            "name": "get_region_from_name",
            "location": 802,
            "return": [
                "Optional[models.Region]"
            ],
            "arguments": {
                "raw_names": [
                    "Sequence[str]"
                ]
            }
        },
        "extract_region": {
            "name": "extract_region",
            "location": 812,
            "return": [
                "Optional[models.Location]"
            ],
            "arguments": {
                "components": [
                    "Sequence[Sequence[str]]"
                ]
            }
        },
        "genus_name_of_name": {
            "name": "genus_name_of_name",
            "location": 834,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "models.Name"
                ]
            }
        },
        "genus_of_name": {
            "name": "genus_of_name",
            "location": 841,
            "return": [
                "Optional[models.Taxon]"
            ],
            "arguments": {
                "name": [
                    "models.Name"
                ]
            }
        },
        "find_name": {
            "name": "find_name",
            "location": 848,
            "return": [
                "Optional[models.Name]"
            ],
            "arguments": {
                "original_name": [
                    "str"
                ],
                "authority": [
                    "str"
                ],
                "max_distance": [
                    "int"
                ],
                "year": [
                    "Optional[str]"
                ]
            }
        },
        "build_original_name_map": {
            "name": "build_original_name_map",
            "location": 942,
            "return": [
                "Tuple[(List[Tuple[(models.Name, models.Taxon)]], Dict[(models.Taxon, Set[str])])]"
            ],
            "arguments": {
                "root_name": [
                    "str"
                ],
                "authority": [
                    "str"
                ],
                "year": [
                    "Optional[str]"
                ]
            }
        },
        "get_original_genera_of_genus": {
            "name": "get_original_genera_of_genus",
            "location": 967,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "genus": [
                    "models.Taxon"
                ]
            }
        },
        "unspace_initials": {
            "name": "unspace_initials",
            "location": 975,
            "return": [
                "str"
            ],
            "arguments": {
                "authority": [
                    "str"
                ]
            }
        },
        "name_variants": {
            "name": "name_variants",
            "location": 979,
            "return": [
                "Iterable[Tuple[(str, str)]]"
            ],
            "arguments": {
                "original_name": [
                    "str"
                ],
                "authority": [
                    "str"
                ]
            }
        },
        "get_initials_map": {
            "name": "get_initials_map",
            "location": 1028,
            "return": [
                "Dict[(str, Set[str])]"
            ],
            "arguments": {}
        },
        "associate_types": {
            "name": "associate_types",
            "location": 1038,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ],
                "name_config": [
                    "NameConfig"
                ],
                "quiet": [
                    "bool"
                ]
            }
        },
        "associate_variants": {
            "name": "associate_variants",
            "location": 1055,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ],
                "name_config": [
                    "NameConfig"
                ],
                "quiet": [
                    "bool"
                ]
            }
        },
        "fix_author": {
            "name": "fix_author",
            "location": 1075,
            "return": [
                "str"
            ],
            "arguments": {
                "author": [
                    "str"
                ],
                "name_config": [
                    "NameConfig"
                ]
            }
        },
        "identify_name": {
            "name": "identify_name",
            "location": 1087,
            "return": [
                "Optional[models.Name]"
            ],
            "arguments": {
                "orig_name": [
                    "str"
                ],
                "author": [
                    "str"
                ],
                "name_config": [
                    "NameConfig"
                ]
            }
        },
        "manually_associate_name": {
            "name": "manually_associate_name",
            "location": 1126,
            "return": [
                "Optional[models.Name]"
            ],
            "arguments": {
                "name": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "associate_names": {
            "name": "associate_names",
            "location": 1161,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ],
                "name_config": [
                    "NameConfig"
                ],
                "start_at": [
                    "Optional[str]"
                ],
                "name_field": [
                    "str"
                ],
                "quiet": [
                    "bool"
                ],
                "try_manual": [
                    "bool"
                ],
                "max_distance": [
                    "int"
                ],
                "use_taxon_match": [
                    "bool"
                ],
                "match_year": [
                    "bool"
                ]
            }
        },
        "maybe_add_iss": {
            "name": "maybe_add_iss",
            "location": 1225,
            "return": [
                "Optional[models.Name]"
            ],
            "arguments": {
                "name": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "write_to_db": {
            "name": "write_to_db",
            "location": 1240,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ],
                "source": [
                    "Source"
                ],
                "dry_run": [
                    "bool"
                ],
                "edit_if_no_holotype": [
                    "bool"
                ],
                "edit_if": [
                    "Callable[([Dict[(str, Any)]], bool)]"
                ],
                "always_edit": [
                    "bool"
                ],
                "skip_fields": [
                    "Container[str]"
                ]
            }
        },
        "print_counts": {
            "name": "print_counts",
            "location": 1473,
            "return": [
                "None"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ],
                "field": [
                    "str"
                ]
            }
        },
        "print_counts_if_no_tag": {
            "name": "print_counts_if_no_tag",
            "location": 1479,
            "return": [
                "None"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ],
                "field": [
                    "str"
                ],
                "tag_cls": [
                    "TypeTag"
                ]
            }
        },
        "print_field_counts": {
            "name": "print_field_counts",
            "location": 1491,
            "return": [
                "None"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "print_if_missing_field": {
            "name": "print_if_missing_field",
            "location": 1505,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ],
                "field": [
                    "str"
                ]
            }
        },
        "Source.get_source": {
            "name": "get_source",
            "location": 253,
            "return": [
                "models.Article"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "taxonomy-master/data_import/mastomys.py": {
        "extract_pages": {
            "name": "extract_pages",
            "location": 12,
            "return": [
                "DataT"
            ],
            "arguments": {
                "lines": [
                    "Iterable[str]"
                ]
            }
        },
        "extract_names": {
            "name": "extract_names",
            "location": 19,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 57,
            "return": [
                "DataT"
            ],
            "arguments": {}
        }
    },
    "taxonomy-master/data_import/mcztypes.py": {
        "extract_pages": {
            "name": "extract_pages",
            "location": 32,
            "return": [
                "Iterable[Tuple[(int, List[str])]]"
            ],
            "arguments": {
                "lines": [
                    "Iterable[str]"
                ]
            }
        },
        "extract_names": {
            "name": "extract_names",
            "location": 57,
            "return": [
                "DataT"
            ],
            "arguments": {
                "pages": [
                    "Iterable[Tuple[(int, List[str])]]"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 127,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "translate_type_locality": {
            "name": "translate_type_locality",
            "location": 180,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "associate_names": {
            "name": "associate_names",
            "location": 196,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 208,
            "return": [
                "DataT"
            ],
            "arguments": {}
        },
        "extract_names.start_label": {
            "name": "start_label",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str"
                ],
                "line": [
                    "str"
                ]
            }
        }
    },
    "taxonomy-master/data_import/meesteretal.py": {
        "extract_names": {
            "name": "extract_names",
            "location": 10,
            "return": [
                "DataT"
            ],
            "arguments": {
                "pages": [
                    "PagesT"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 33,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "translate_rest": {
            "name": "translate_rest",
            "location": 84,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 94,
            "return": [
                "DataT"
            ],
            "arguments": {}
        }
    },
    "taxonomy-master/data_import/mexicotypes.py": {
        "get_text": {
            "name": "get_text",
            "location": 15,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {}
        },
        "extract_names": {
            "name": "extract_names",
            "location": 20,
            "return": [
                "Iterable[Dict[(str, Any)]]"
            ],
            "arguments": {
                "pages": [
                    "Iterable[Tuple[(int, List[str])]]"
                ]
            }
        },
        "split_text": {
            "name": "split_text",
            "location": 49,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 78,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "associate_names": {
            "name": "associate_names",
            "location": 94,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "write_to_db": {
            "name": "write_to_db",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ],
                "dry_run": [
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "taxonomy-master/data_import/msw3.py": {
        "translate_to_db": {
            "name": "translate_to_db",
            "location": 12,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 72,
            "return": [
                "DataT"
            ],
            "arguments": {
                "argv": [
                    "List[str]"
                ]
            }
        }
    },
    "taxonomy-master/data_import/neotropicbats.py": {},
    "taxonomy-master/data_import/nmbtypes.py": {
        "extract_names": {
            "name": "extract_names",
            "location": 13,
            "return": [
                "DataT"
            ],
            "arguments": {
                "lines": [
                    "Iterable[str]"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 50,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 86,
            "return": [
                "DataT"
            ],
            "arguments": {}
        },
        "extract_names.start_label": {
            "name": "start_label",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str"
                ],
                "line": [
                    "str"
                ]
            }
        }
    },
    "taxonomy-master/data_import/northamerica.py": {
        "extract_pages": {
            "name": "extract_pages",
            "location": 24,
            "return": [
                "Iterable[Tuple[(int, List[str])]]"
            ],
            "arguments": {
                "lines": [
                    "Iterable[str]"
                ]
            }
        },
        "_make_taxon": {
            "name": "_make_taxon",
            "location": 49,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "heading": [
                    "str"
                ],
                "rank": [
                    "str"
                ],
                "page": [
                    "int"
                ]
            }
        },
        "extract_taxa": {
            "name": "extract_taxa",
            "location": 53,
            "return": [
                "DataT"
            ],
            "arguments": {
                "pages": [
                    "Iterable[Tuple[(int, List[str])]]"
                ]
            }
        },
        "name_of_text": {
            "name": "name_of_text",
            "location": 150,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "is_genus": [
                    "bool"
                ]
            }
        },
        "get_taxon_root_name": {
            "name": "get_taxon_root_name",
            "location": 180,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "heading": [
                    "str"
                ]
            }
        },
        "degender": {
            "name": "degender",
            "location": 191,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "taxa_to_names": {
            "name": "taxa_to_names",
            "location": 195,
            "return": [
                "DataT"
            ],
            "arguments": {
                "taxa": [
                    "DataT"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 230,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 244,
            "return": [
                "DataT"
            ],
            "arguments": {}
        },
        "extract_taxa._assert_no_type_loc": {
            "name": "_assert_no_type_loc",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "extract_taxa.flush_type_loc": {
            "name": "flush_type_loc",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "extract_taxa.flush_name": {
            "name": "flush_name",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "taxonomy-master/data_import/rmca.py": {
        "extract_names": {
            "name": "extract_names",
            "location": 21,
            "return": [
                "DataT"
            ],
            "arguments": {
                "pages": [
                    "PagesT"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 68,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 97,
            "return": [
                "DataT"
            ],
            "arguments": {}
        },
        "extract_names.start_label": {
            "name": "start_label",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str"
                ],
                "line": [
                    "str"
                ]
            }
        }
    },
    "taxonomy-master/data_import/rodentianafrica.py": {
        "extract_names": {
            "name": "extract_names",
            "location": 17,
            "return": [
                "DataT"
            ],
            "arguments": {
                "pages": [
                    "PagesT"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 58,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 86,
            "return": [
                "DataT"
            ],
            "arguments": {}
        },
        "extract_names.start_label": {
            "name": "start_label",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str"
                ],
                "line": [
                    "str"
                ]
            }
        }
    },
    "taxonomy-master/data_import/rodentiasouthamerica.py": {
        "realign_lines": {
            "name": "realign_lines",
            "location": 15,
            "return": [
                "Iterable[Tuple[(int, List[str])]]"
            ],
            "arguments": {
                "pages": [
                    "Iterable[Tuple[(int, List[str])]]"
                ]
            }
        },
        "extract_names": {
            "name": "extract_names",
            "location": 30,
            "return": [
                "DataT"
            ],
            "arguments": {
                "pages": [
                    "Iterable[Tuple[(int, List[str])]]"
                ]
            }
        },
        "build_refs_dict": {
            "name": "build_refs_dict",
            "location": 93,
            "return": [
                "RefsDictT"
            ],
            "arguments": {
                "refs": [
                    "DataT"
                ]
            }
        },
        "split_text": {
            "name": "split_text",
            "location": 161,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "split_name_authority": {
            "name": "split_name_authority",
            "location": 197,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "name_authority": [
                    "str"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 230,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ],
                "refs_dict": [
                    "RefsDictT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "taxonomy-master/data_import/sdnhmtypes.py": {
        "extract_pages": {
            "name": "extract_pages",
            "location": 35,
            "return": [
                "Iterable[Tuple[(int, List[str])]]"
            ],
            "arguments": {
                "lines": [
                    "Iterable[str]"
                ]
            }
        },
        "extract_names": {
            "name": "extract_names",
            "location": 64,
            "return": [
                "DataT"
            ],
            "arguments": {
                "pages": [
                    "Iterable[Tuple[(int, List[str])]]"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 130,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "associate_names": {
            "name": "associate_names",
            "location": 154,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 166,
            "return": [
                "DataT"
            ],
            "arguments": {}
        },
        "extract_names.start_label": {
            "name": "start_label",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str"
                ],
                "line": [
                    "str"
                ]
            }
        }
    },
    "taxonomy-master/data_import/southamerica.py": {
        "extract_names": {
            "name": "extract_names",
            "location": 14,
            "return": [
                "DataT"
            ],
            "arguments": {
                "pages": [
                    "Iterable[Tuple[(int, List[str])]]"
                ]
            }
        },
        "build_refs_dict": {
            "name": "build_refs_dict",
            "location": 77,
            "return": [
                "RefsDictT"
            ],
            "arguments": {
                "refs": [
                    "DataT"
                ]
            }
        },
        "split_text": {
            "name": "split_text",
            "location": 135,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "split_name_authority": {
            "name": "split_name_authority",
            "location": 169,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "name_authority": [
                    "str"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 201,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ],
                "refs_dict": [
                    "RefsDictT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "taxonomy-master/data_import/texastypes.py": {
        "extract_names": {
            "name": "extract_names",
            "location": 19,
            "return": [
                "DataT"
            ],
            "arguments": {
                "pages": [
                    "PagesT"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 61,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 76,
            "return": [
                "DataT"
            ],
            "arguments": {}
        },
        "extract_names.start_label": {
            "name": "start_label",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str"
                ],
                "line": [
                    "str"
                ]
            }
        }
    },
    "taxonomy-master/data_import/tytonis.py": {
        "extract_names": {
            "name": "extract_names",
            "location": 18,
            "return": [
                "DataT"
            ],
            "arguments": {
                "pages": [
                    "PagesT"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 38,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 62,
            "return": [
                "DataT"
            ],
            "arguments": {}
        }
    },
    "taxonomy-master/data_import/ummztypes.py": {
        "extract_names": {
            "name": "extract_names",
            "location": 12,
            "return": [
                "DataT"
            ],
            "arguments": {
                "pages": [
                    "Iterable[Tuple[(int, List[str])]]"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 60,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "translate_to_db": {
            "name": "translate_to_db",
            "location": 99,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "associate_names": {
            "name": "associate_names",
            "location": 143,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 147,
            "return": [
                "DataT"
            ],
            "arguments": {}
        },
        "extract_names.start_label": {
            "name": "start_label",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str"
                ],
                "line": [
                    "str"
                ]
            }
        }
    },
    "taxonomy-master/data_import/usnmtypes.py": {
        "extract_names": {
            "name": "extract_names",
            "location": 26,
            "return": [
                "DataT"
            ],
            "arguments": {
                "pages": [
                    "Iterable[Tuple[(int, List[str])]]"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 147,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "translate_to_db": {
            "name": "translate_to_db",
            "location": 207,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ],
                "source": [
                    "lib.Source"
                ]
            }
        },
        "translate_type_localities": {
            "name": "translate_type_localities",
            "location": 211,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 229,
            "return": [
                "DataT"
            ],
            "arguments": {}
        },
        "extract_names.start_label": {
            "name": "start_label",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str"
                ],
                "line": [
                    "str"
                ]
            }
        }
    },
    "taxonomy-master/data_import/utahtypes.py": {
        "extract_names": {
            "name": "extract_names",
            "location": 12,
            "return": [
                "Iterable[Dict[(str, Any)]]"
            ],
            "arguments": {
                "pages": [
                    "Iterable[Tuple[(int, List[str])]]"
                ]
            }
        },
        "split_text": {
            "name": "split_text",
            "location": 30,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 47,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "taxonomy-master/data_import/zfmktypes.py": {
        "extract_names": {
            "name": "extract_names",
            "location": 26,
            "return": [
                "DataT"
            ],
            "arguments": {
                "pages": [
                    "PagesT"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 70,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 108,
            "return": [
                "DataT"
            ],
            "arguments": {}
        },
        "extract_names.start_label": {
            "name": "start_label",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str"
                ],
                "line": [
                    "str"
                ]
            }
        }
    },
    "taxonomy-master/data_import/zmbchiroptera.py": {
        "extract_names": {
            "name": "extract_names",
            "location": 20,
            "return": [
                "DataT"
            ],
            "arguments": {
                "pages": [
                    "PagesT"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 68,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 93,
            "return": [
                "DataT"
            ],
            "arguments": {}
        },
        "extract_names.start_label": {
            "name": "start_label",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str"
                ],
                "line": [
                    "str"
                ]
            }
        }
    },
    "taxonomy-master/data_import/zmbinsectivora.py": {
        "extract_names": {
            "name": "extract_names",
            "location": 18,
            "return": [
                "DataT"
            ],
            "arguments": {
                "pages": [
                    "PagesT"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 65,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 90,
            "return": [
                "DataT"
            ],
            "arguments": {}
        },
        "extract_names.start_label": {
            "name": "start_label",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str"
                ],
                "line": [
                    "str"
                ]
            }
        }
    },
    "taxonomy-master/data_import/zmmutypes.py": {
        "make_translation_table": {
            "name": "make_translation_table",
            "location": 42,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {}
        },
        "translate_chars": {
            "name": "translate_chars",
            "location": 53,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "lines": [
                    "Iterable[str]"
                ]
            }
        },
        "extract_pages": {
            "name": "extract_pages",
            "location": 59,
            "return": [
                "Iterable[List[str]]"
            ],
            "arguments": {
                "lines": [
                    "Iterable[str]"
                ]
            }
        },
        "label_pages": {
            "name": "label_pages",
            "location": 71,
            "return": [
                "PagesT"
            ],
            "arguments": {
                "pages": [
                    "Iterable[List[str]]"
                ]
            }
        },
        "align_columns": {
            "name": "align_columns",
            "location": 82,
            "return": [
                "PagesT"
            ],
            "arguments": {
                "pages": [
                    "PagesT"
                ]
            }
        },
        "extract_names": {
            "name": "extract_names",
            "location": 100,
            "return": [
                "DataT"
            ],
            "arguments": {
                "pages": [
                    "PagesT"
                ]
            }
        },
        "extract_references": {
            "name": "extract_references",
            "location": 164,
            "return": [
                "Iterable[List[str]]"
            ],
            "arguments": {
                "pages": [
                    "PagesT"
                ]
            }
        },
        "make_references_dict": {
            "name": "make_references_dict",
            "location": 179,
            "return": [
                "Dict[(Tuple[(str, str)], str)]"
            ],
            "arguments": {
                "refs": [
                    "Iterable[List[str]]"
                ]
            }
        },
        "handle_specimen": {
            "name": "handle_specimen",
            "location": 194,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "data": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 237,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ],
                "refs_dict": [
                    "Dict[(Tuple[(str, str)], str)]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 283,
            "return": [
                "DataT"
            ],
            "arguments": {}
        },
        "extract_names.start_label": {
            "name": "start_label",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str"
                ],
                "line": [
                    "str"
                ]
            }
        },
        "extract_names.start_section": {
            "name": "start_section",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str"
                ],
                "line": [
                    "str"
                ]
            }
        }
    },
    "taxonomy-master/data_import/zsitypes.py": {
        "extract_names": {
            "name": "extract_names",
            "location": 12,
            "return": [
                "DataT"
            ],
            "arguments": {
                "pages": [
                    "PagesT"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 50,
            "return": [
                "DataT"
            ],
            "arguments": {
                "names": [
                    "DataT"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 83,
            "return": [
                "DataT"
            ],
            "arguments": {}
        },
        "extract_names.start_label": {
            "name": "start_label",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str"
                ],
                "line": [
                    "str"
                ]
            }
        }
    },
    "taxonomy-master/data_import/__init__.py": {},
    "taxonomy-master/hsweb/index.py": {
        "get_static_file_contents": {
            "name": "get_static_file_contents",
            "location": 13,
            "return": [
                "bytes"
            ],
            "arguments": {
                "hesperomys_dir": [
                    "Path"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "make_static_handler": {
            "name": "make_static_handler",
            "location": 17,
            "return": [
                "Callable[([web.Request], Awaitable[web.Response])]"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "content_type": [
                    "str"
                ],
                "hesperomys_dir": [
                    "Path"
                ]
            }
        },
        "make_app": {
            "name": "make_app",
            "location": 34,
            "return": [
                "web.Application"
            ],
            "arguments": {
                "build_root": [
                    "Optional[str]"
                ]
            }
        }
    },
    "taxonomy-master/hsweb/schema.py": {
        "make_enum": {
            "name": "make_enum",
            "location": 49,
            "return": [
                "Type[Enum]"
            ],
            "arguments": {
                "python_enum": [
                    "Type[enum.Enum]"
                ]
            }
        },
        "build_graphene_field_from_adt_arg": {
            "name": "build_graphene_field_from_adt_arg",
            "location": 53,
            "return": [
                "Field"
            ],
            "arguments": {
                "typ": [
                    "Type[Any]"
                ]
            }
        },
        "build_adt_member": {
            "name": "build_adt_member",
            "location": 69,
            "return": [
                "Type[ObjectType]"
            ],
            "arguments": {
                "adt_cls": [
                    "Type[ADT]"
                ],
                "adt": [
                    "ADT"
                ]
            }
        },
        "build_adt_interface": {
            "name": "build_adt_interface",
            "location": 90,
            "return": [
                "Type[Interface]"
            ],
            "arguments": {
                "adt_cls": [
                    "Type[ADT]"
                ]
            }
        },
        "build_adt": {
            "name": "build_adt",
            "location": 98,
            "return": [
                "Type[Interface]"
            ],
            "arguments": {
                "adt_cls": [
                    "Type[ADT]"
                ]
            }
        },
        "translate_adt_arg": {
            "name": "translate_adt_arg",
            "location": 105,
            "return": [
                "Any"
            ],
            "arguments": {
                "arg": [
                    "Any"
                ]
            }
        },
        "build_graphene_field": {
            "name": "build_graphene_field",
            "location": 112,
            "return": [
                "Field"
            ],
            "arguments": {
                "model_cls": [
                    "Type[BaseModel]"
                ],
                "name": [
                    "str"
                ],
                "peewee_field": [
                    "peewee.Field"
                ]
            }
        },
        "get_model": {
            "name": "get_model",
            "location": 187,
            "return": [
                "BaseModel"
            ],
            "arguments": {
                "model_cls": [
                    "Type[BaseModel]"
                ],
                "parent": [
                    "Any"
                ],
                "info": [
                    "ResolveInfo"
                ]
            }
        },
        "build_connection": {
            "name": "build_connection",
            "location": 196,
            "return": [
                "Type[Connection]"
            ],
            "arguments": {
                "object_type": [
                    "Type[ObjectType]"
                ]
            }
        },
        "build_reverse_rel_count_field": {
            "name": "build_reverse_rel_count_field",
            "location": 203,
            "return": [
                "Field"
            ],
            "arguments": {
                "model_cls": [
                    "Type[BaseModel]"
                ],
                "name": [
                    "str"
                ],
                "peewee_field": [
                    "peewee.ForeignKeyField"
                ]
            }
        },
        "_get_locations": {
            "name": "_get_locations",
            "location": 214,
            "return": [
                "Any"
            ],
            "arguments": {
                "parent": [
                    "ObjectType"
                ],
                "info": [
                    "ResolveInfo"
                ],
                "first": [
                    "int"
                ],
                "after": [
                    "Optional[str]"
                ]
            }
        },
        "locations_resolver": {
            "name": "locations_resolver",
            "location": 231,
            "return": [
                "TList[ObjectType]"
            ],
            "arguments": {
                "parent": [
                    "ObjectType"
                ],
                "info": [
                    "ResolveInfo"
                ],
                "first": [
                    "int"
                ],
                "after": [
                    "Optional[str]"
                ]
            }
        },
        "num_locations_resolver": {
            "name": "num_locations_resolver",
            "location": 244,
            "return": [
                "int"
            ],
            "arguments": {
                "parent": [
                    "ObjectType"
                ],
                "info": [
                    "ResolveInfo"
                ],
                "first": [
                    "int"
                ],
                "after": [
                    "Optional[str]"
                ]
            }
        },
        "build_reverse_rel_field": {
            "name": "build_reverse_rel_field",
            "location": 251,
            "return": [
                "Field"
            ],
            "arguments": {
                "model_cls": [
                    "Type[BaseModel]"
                ],
                "name": [
                    "str"
                ],
                "peewee_field": [
                    "peewee.ForeignKeyField"
                ]
            }
        },
        "_decode_after": {
            "name": "_decode_after",
            "location": 292,
            "return": [
                "int"
            ],
            "arguments": {
                "after": [
                    "Optional[str]"
                ]
            }
        },
        "make_location_connection": {
            "name": "make_location_connection",
            "location": 299,
            "return": [
                "Type[Connection]"
            ],
            "arguments": {}
        },
        "build_derived_field": {
            "name": "build_derived_field",
            "location": 313,
            "return": [
                "Field"
            ],
            "arguments": {
                "model_cls": [
                    "Type[BaseModel]"
                ],
                "derived_field": [
                    "DerivedField[Any]"
                ]
            }
        },
        "build_derived_count_field": {
            "name": "build_derived_count_field",
            "location": 389,
            "return": [
                "Optional[Field]"
            ],
            "arguments": {
                "model_cls": [
                    "Type[BaseModel]"
                ],
                "derived_field": [
                    "DerivedField[Any]"
                ]
            }
        },
        "build_object_type_from_model": {
            "name": "build_object_type_from_model",
            "location": 409,
            "return": [
                "Type[ObjectType]"
            ],
            "arguments": {
                "model_cls": [
                    "Type[BaseModel]"
                ]
            }
        },
        "build_model_field": {
            "name": "build_model_field",
            "location": 453,
            "return": [
                "Tuple[(Field, Optional[Field])]"
            ],
            "arguments": {
                "model_cls": [
                    "Type[BaseModel]"
                ]
            }
        },
        "get_model_resolvers": {
            "name": "get_model_resolvers",
            "location": 474,
            "return": [
                "Dict[(str, Field)]"
            ],
            "arguments": {}
        },
        "resolve_by_call_sign": {
            "name": "resolve_by_call_sign",
            "location": 486,
            "return": [
                "TList[ObjectType]"
            ],
            "arguments": {
                "parent": [
                    "ObjectType"
                ],
                "info": [
                    "ResolveInfo"
                ],
                "call_sign": [
                    "str"
                ],
                "oid": [
                    "str"
                ]
            }
        },
        "resolve_documentation": {
            "name": "resolve_documentation",
            "location": 502,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "parent": [
                    "ObjectType"
                ],
                "info": [
                    "ResolveInfo"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "resolve_autocompletions": {
            "name": "resolve_autocompletions",
            "location": 513,
            "return": [
                "TList[str]"
            ],
            "arguments": {
                "parent": [
                    "'ModelCls'"
                ],
                "info": [
                    "ResolveInfo"
                ],
                "field": [
                    "Optional[str]"
                ]
            }
        },
        "get_schema_string": {
            "name": "get_schema_string",
            "location": 566,
            "return": [
                "str"
            ],
            "arguments": {
                "schema": [
                    "Schema"
                ]
            }
        },
        "build_reverse_rel_count_field.resolver": {
            "name": "resolver",
            "location": 206,
            "return": [
                "TList[ObjectType]"
            ],
            "arguments": {
                "parent": [
                    "ObjectType"
                ],
                "info": [
                    "ResolveInfo"
                ]
            }
        },
        "build_reverse_rel_field.resolver": {
            "name": "resolver",
            "location": 268,
            "return": [
                "TList[ObjectType]"
            ],
            "arguments": {
                "parent": [
                    "ObjectType"
                ],
                "info": [
                    "ResolveInfo"
                ],
                "first": [
                    "int"
                ],
                "after": [
                    "Optional[str]"
                ]
            }
        },
        "build_object_type_from_model.get_node": {
            "name": "get_node",
            "location": 435,
            "return": [
                "ObjectType"
            ],
            "arguments": {
                "cls": [
                    "Type[ObjectType]"
                ],
                "info": [
                    "ResolveInfo"
                ],
                "id": [
                    "int"
                ]
            }
        },
        "build_model_field.resolver": {
            "name": "resolver",
            "location": 456,
            "return": [
                "ObjectType"
            ],
            "arguments": {
                "parent": [
                    "ObjectType"
                ],
                "info": [
                    "ResolveInfo"
                ],
                "oid": [
                    "int"
                ]
            }
        },
        "build_reverse_rel_field.apply_ordering": {
            "name": "apply_ordering",
            "location": 265,
            "return": [
                "Any"
            ],
            "arguments": {
                "query": [
                    "Any"
                ]
            }
        },
        "build_derived_field.fk_resolver": {
            "name": "fk_resolver",
            "location": 320,
            "return": [
                "Optional[ObjectType]"
            ],
            "arguments": {
                "parent": [
                    "ObjectType"
                ],
                "info": [
                    "ResolveInfo"
                ]
            }
        },
        "build_derived_count_field.resolver": {
            "name": "resolver",
            "location": 396,
            "return": [
                "int"
            ],
            "arguments": {
                "parent": [
                    "ObjectType"
                ],
                "info": [
                    "ResolveInfo"
                ]
            }
        },
        "build_model_field.by_label_resolver": {
            "name": "by_label_resolver",
            "location": 463,
            "return": [
                "TList[ObjectType]"
            ],
            "arguments": {
                "parent": [
                    "ObjectType"
                ],
                "info": [
                    "ResolveInfo"
                ],
                "label": [
                    "str"
                ]
            }
        },
        "build_graphene_field.fk_resolver": {
            "name": "fk_resolver",
            "location": 126,
            "return": [
                "Optional[ObjectType]"
            ],
            "arguments": {
                "parent": [
                    "ObjectType"
                ],
                "info": [
                    "ResolveInfo"
                ]
            }
        },
        "build_graphene_field.adt_resolver": {
            "name": "adt_resolver",
            "location": 152,
            "return": [
                "TList[ObjectType]"
            ],
            "arguments": {
                "parent": [
                    "ObjectType"
                ],
                "info": [
                    "ResolveInfo"
                ]
            }
        },
        "build_derived_field.elt_type": {
            "name": "elt_type",
            "location": 354,
            "return": [
                "Type[Connection]"
            ],
            "arguments": {}
        },
        "build_derived_field.list_resolver": {
            "name": "list_resolver",
            "location": 373,
            "return": [
                "Any"
            ],
            "arguments": {
                "parent": [
                    "ObjectType"
                ],
                "info": [
                    "ResolveInfo"
                ],
                "first": [
                    "int"
                ],
                "after": [
                    "Optional[str]"
                ]
            }
        }
    },
    "taxonomy-master/hsweb/__init__.py": {},
    "taxonomy-master/hsweb/__main__.py": {},
    "taxonomy-master/taxonomy/adt.py": {
        "_adt_member_eq": {
            "name": "_adt_member_eq",
            "location": 70,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [
                    "Any"
                ],
                "other": [
                    "Any"
                ]
            }
        },
        "_none_safe_lt": {
            "name": "_none_safe_lt",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "left": [
                    "Any"
                ],
                "right": [
                    "Any"
                ]
            }
        },
        "_adt_member_lt": {
            "name": "_adt_member_lt",
            "location": 90,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [
                    "Any"
                ],
                "other": [
                    "Any"
                ]
            }
        },
        "_adt_member_hash": {
            "name": "_adt_member_hash",
            "location": 104,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [
                    "Any"
                ]
            }
        },
        "_adt_member_replace": {
            "name": "_adt_member_replace",
            "location": 108,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [
                    "Any"
                ]
            }
        },
        "_ADTMember.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "_ADTMember.__call__": {
            "name": "__call__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ADTMember.__repr__": {
            "name": "__repr__",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ADTNamespace.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "globals_dict": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "_ADTNamespace.__getitem__": {
            "name": "__getitem__",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "_ADTNamespace.__contains__": {
            "name": "__contains__",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "object"
                ]
            }
        },
        "_ADTNamespace.__setitem__": {
            "name": "__setitem__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "_ADTNamespace.__delitem__": {
            "name": "__delitem__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "_ADTNamespace.__iter__": {
            "name": "__iter__",
            "location": 63,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ADTNamespace.__len__": {
            "name": "__len__",
            "location": 66,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ADTMeta.__prepare__": {
            "name": "__prepare__",
            "location": 119,
            "return": [
                "_ADTNamespace"
            ],
            "arguments": {
                "mcs": [],
                "name": [
                    "str"
                ],
                "bases": [
                    "Any"
                ]
            }
        },
        "_ADTMeta.__new__": {
            "name": "__new__",
            "location": 122,
            "return": [
                "Any"
            ],
            "arguments": {
                "mcs": [],
                "name": [
                    "str"
                ],
                "bases": [
                    "Any"
                ],
                "ns": [
                    "Any"
                ]
            }
        },
        "ADT._get_attributes": {
            "name": "_get_attributes",
            "location": 223,
            "return": [
                "Iterable[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ADT.serialize": {
            "name": "serialize",
            "location": 227,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ADT.unserialize": {
            "name": "unserialize",
            "location": 242,
            "return": [
                "_ADTT"
            ],
            "arguments": {
                "cls": [
                    "Type[_ADTT]"
                ],
                "value": [
                    "List[Any]"
                ]
            }
        },
        "ADT.__repr__": {
            "name": "__repr__",
            "location": 261,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ADTMeta.__new__.make_init": {
            "name": "make_init",
            "location": 191,
            "return": [
                "Callable[([object], None)]"
            ],
            "arguments": {
                "member_cls": [
                    "object"
                ]
            }
        },
        "_ADTMeta.__new__.make_init.__init__": {
            "name": "__init__",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [
                    "object"
                ]
            }
        }
    },
    "taxonomy-master/taxonomy/config.py": {
        "error": {
            "name": "error",
            "location": 38,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "message": [
                    "str"
                ]
            }
        },
        "parse_path": {
            "name": "parse_path",
            "location": 43,
            "return": [
                "Path"
            ],
            "arguments": {
                "section": [
                    "Mapping[(str, str)]"
                ],
                "key": [
                    "str"
                ],
                "base_path": [
                    "Path"
                ]
            }
        },
        "parse_config_file": {
            "name": "parse_config_file",
            "location": 59,
            "return": [
                "Options"
            ],
            "arguments": {
                "filename": [
                    "Path"
                ]
            }
        },
        "get_options": {
            "name": "get_options",
            "location": 98,
            "return": [
                "Options"
            ],
            "arguments": {}
        },
        "Options.burst_path": {
            "name": "burst_path",
            "location": 34,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "taxonomy-master/taxonomy/events.py": {
        "Event.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.on": {
            "name": "on",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "Callable[([T], object)]"
                ]
            }
        },
        "Event.trigger": {
            "name": "trigger",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "T"
                ]
            }
        }
    },
    "taxonomy-master/taxonomy/getinput.py": {
        "_color": {
            "name": "_color",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "code": [
                    "int"
                ]
            }
        },
        "_colored_text": {
            "name": "_colored_text",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "code": [
                    "int"
                ]
            }
        },
        "red": {
            "name": "red",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "green": {
            "name": "green",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "blue": {
            "name": "blue",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "get_line": {
            "name": "get_line",
            "location": 70,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "prompt": [
                    "str"
                ],
                "validate": [
                    "Optional[Callable[([str], bool)]]"
                ],
                "callbacks": [
                    "CallbackMap"
                ],
                "should_stop": [
                    "Callable[([str], bool)]"
                ],
                "allow_none": [
                    "bool"
                ],
                "mouse_support": [
                    "bool"
                ],
                "default": [
                    "str"
                ],
                "history_key": [
                    "Optional[object]"
                ],
                "validator": [
                    "Optional[prompt_toolkit.validation.Validator]"
                ],
                "completer": [
                    "Optional[prompt_toolkit.completion.Completer]"
                ],
                "allow_clear": [
                    "bool"
                ]
            }
        },
        "yes_no": {
            "name": "yes_no",
            "location": 115,
            "return": [
                "bool"
            ],
            "arguments": {
                "prompt": [
                    "str"
                ],
                "default": [
                    "Optional[bool]"
                ],
                "callbacks": [
                    "CallbackMap"
                ]
            }
        },
        "choose_one": {
            "name": "choose_one",
            "location": 130,
            "return": [
                "Optional[T]"
            ],
            "arguments": {
                "options": [
                    "Sequence[T]"
                ]
            }
        },
        "get_with_lazy_completion": {
            "name": "get_with_lazy_completion",
            "location": 197,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "message": [
                    "str"
                ]
            }
        },
        "get_with_completion": {
            "name": "get_with_completion",
            "location": 228,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "options": [
                    "Iterable[str]"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "get_enum_member": {
            "name": "get_enum_member",
            "location": 286,
            "return": [
                "Optional[EnumT]"
            ],
            "arguments": {
                "enum_cls": [
                    "Type[EnumT]"
                ],
                "prompt": [
                    "str"
                ]
            }
        },
        "get_adt_list": {
            "name": "get_adt_list",
            "location": 316,
            "return": [
                "Tuple[(ADTOrInstance, ...)]"
            ],
            "arguments": {
                "adt_cls": [
                    "Type[adt.ADT]"
                ]
            }
        },
        "display_tags": {
            "name": "display_tags",
            "location": 406,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "spacing": [
                    "str"
                ],
                "tags": [
                    "Optional[Iterable[Union[(adt.ADT, Type[adt.ADT])]]]"
                ],
                "show_indexes": [
                    "bool"
                ]
            }
        },
        "_get_adt_member": {
            "name": "_get_adt_member",
            "location": 435,
            "return": [
                "ADTOrInstance"
            ],
            "arguments": {
                "member_cls": [
                    "Type[adt.ADT]"
                ],
                "existing": [
                    "Optional[ADTOrInstance]"
                ],
                "completers": [
                    "CompleterMap"
                ]
            }
        },
        "add_to_clipboard": {
            "name": "add_to_clipboard",
            "location": 468,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str"
                ]
            }
        },
        "append_history": {
            "name": "append_history",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "object"
                ],
                "history_entry": [
                    "str"
                ]
            }
        },
        "_get_history": {
            "name": "_get_history",
            "location": 477,
            "return": [
                "prompt_toolkit.history.InMemoryHistory"
            ],
            "arguments": {
                "key": [
                    "object"
                ]
            }
        },
        "_append": {
            "name": "_append",
            "location": 483,
            "return": [
                "None"
            ],
            "arguments": {
                "history": [
                    "prompt_toolkit.history.InMemoryHistory"
                ],
                "entry": [
                    "str"
                ]
            }
        },
        "encode_name": {
            "name": "encode_name",
            "location": 517,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "decode_name": {
            "name": "decode_name",
            "location": 521,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "flush": {
            "name": "flush",
            "location": 525,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "show": {
            "name": "show",
            "location": 532,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "object"
                ]
            }
        },
        "print_scores": {
            "name": "print_scores",
            "location": 537,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "Sequence[Tuple[(str, float)]]"
                ]
            }
        },
        "print_header": {
            "name": "print_header",
            "location": 552,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "object"
                ]
            }
        },
        "indent": {
            "name": "indent",
            "location": 560,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "width": [
                    "int"
                ]
            }
        },
        "print_diff": {
            "name": "print_diff",
            "location": 565,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "Sequence[Any]"
                ],
                "b": [
                    "Sequence[Any]"
                ]
            }
        },
        "_Completer.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strings": [
                    "Iterable[str]"
                ]
            }
        },
        "_Completer.get_completions": {
            "name": "get_completions",
            "location": 159,
            "return": [
                "Iterable[prompt_toolkit.completion.Completion]"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "prompt_toolkit.document.Document"
                ],
                "complete_event": [
                    "prompt_toolkit.completion.CompleteEvent"
                ]
            }
        },
        "_CallbackCompleter.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strings": [
                    "Iterable[str]"
                ],
                "lazy_strings": [
                    "Callable[([], Iterable[str])]"
                ]
            }
        },
        "_CallbackCompleter.get_completions": {
            "name": "get_completions",
            "location": 178,
            "return": [
                "Iterable[prompt_toolkit.completion.Completion]"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "prompt_toolkit.document.Document"
                ],
                "complete_event": [
                    "prompt_toolkit.completion.CompleteEvent"
                ]
            }
        },
        "_FixedValidator.__init__": {
            "name": "__init__",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "Iterable[str]"
                ]
            }
        },
        "_FixedValidator.validate": {
            "name": "validate",
            "location": 493,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "prompt_toolkit.document.Document"
                ]
            }
        },
        "_CallbackValidator.__init__": {
            "name": "__init__",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_valid": [
                    "Callable[([str], bool)]"
                ]
            }
        },
        "_CallbackValidator.validate": {
            "name": "validate",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "prompt_toolkit.document.Document"
                ]
            }
        },
        "get_with_lazy_completion.callback": {
            "name": "callback",
            "location": 211,
            "return": [
                "bool"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "taxonomy-master/taxonomy/lib.py": {
        "biggest_citation_groups_no_region": {
            "name": "biggest_citation_groups_no_region",
            "location": 35,
            "return": [
                "List[Tuple[(CitationGroup, int)]]"
            ],
            "arguments": {
                "limit": [
                    "int"
                ]
            }
        },
        "biggest_citation_groups": {
            "name": "biggest_citation_groups",
            "location": 51,
            "return": [
                "List[Tuple[(CitationGroup, int)]]"
            ],
            "arguments": {
                "limit": [
                    "int"
                ]
            }
        },
        "biggest_localities": {
            "name": "biggest_localities",
            "location": 64,
            "return": [
                "List[Tuple[(Location, int)]]"
            ],
            "arguments": {
                "limit": [
                    "int"
                ]
            }
        },
        "most_type_localities": {
            "name": "most_type_localities",
            "location": 77,
            "return": [
                "List[Tuple[(Location, int)]]"
            ],
            "arguments": {
                "limit": [
                    "int"
                ]
            }
        },
        "biggest_ranges": {
            "name": "biggest_ranges",
            "location": 88,
            "return": [
                "List[Tuple[(Taxon, int)]]"
            ],
            "arguments": {
                "limit": [
                    "int"
                ]
            }
        },
        "most_type_specimens": {
            "name": "most_type_specimens",
            "location": 99,
            "return": [
                "List[Tuple[(Collection, int)]]"
            ],
            "arguments": {
                "limit": [
                    "int"
                ]
            }
        },
        "unrecorded_taxa": {
            "name": "unrecorded_taxa",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "root": [
                    "Taxon"
                ]
            }
        },
        "move_localities": {
            "name": "move_localities",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "period": [
                    "Period"
                ]
            }
        },
        "move_to_stratigraphy": {
            "name": "move_to_stratigraphy",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "loc": [
                    "Location"
                ],
                "period": [
                    "Period"
                ]
            }
        },
        "count_field": {
            "name": "count_field",
            "location": 142,
            "return": [
                "List[Tuple[(Any, int)]]"
            ],
            "arguments": {
                "model": [
                    "Type[BaseModel]"
                ],
                "field": [
                    "str"
                ]
            }
        },
        "locless_names": {
            "name": "locless_names",
            "location": 152,
            "return": [
                "List[Name]"
            ],
            "arguments": {
                "genus": [
                    "Taxon"
                ],
                "attribute": [
                    "str"
                ],
                "age": [
                    "Optional[AgeClass]"
                ],
                "min_year": [
                    "Optional[int]"
                ],
                "exclude": [
                    "Container['Taxon']"
                ]
            }
        },
        "names_with_attribute": {
            "name": "names_with_attribute",
            "location": 171,
            "return": [
                "List[Name]"
            ],
            "arguments": {
                "txn": [
                    "Taxon"
                ],
                "attribute": [
                    "str"
                ],
                "age": [
                    "Optional[AgeClass]"
                ],
                "exclude": [
                    "Container['Taxon']"
                ]
            }
        },
        "f": {
            "name": "f",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "nams": [
                    "Union[(Name, Taxon, List[Name], List[Taxon])]"
                ],
                "skip_fields": [
                    "Container[str]"
                ],
                "always_edit": [
                    "bool"
                ]
            }
        },
        "h": {
            "name": "h",
            "location": 212,
            "return": [
                "Tuple[(List[Article], List[Name])]"
            ],
            "arguments": {
                "author": [
                    "str"
                ],
                "year": [
                    "int"
                ],
                "page": [
                    "Optional[int]"
                ],
                "uncited_only": [
                    "bool"
                ]
            }
        },
        "set_page": {
            "name": "set_page",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "nams": [
                    "Iterable[Name]"
                ]
            }
        },
        "edit_at_level": {
            "name": "edit_at_level",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "level": [
                    "FillDataLevel"
                ]
            }
        },
        "edit_by_author": {
            "name": "edit_by_author",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "level": [
                    "FillDataLevel"
                ]
            }
        },
        "edit_names": {
            "name": "edit_names",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "nam_iter": [
                    "Iterable[Name]"
                ],
                "level": [
                    "FillDataLevel"
                ]
            }
        },
        "make_genus": {
            "name": "make_genus",
            "location": 330,
            "return": [],
            "arguments": {}
        },
        "make_species": {
            "name": "make_species",
            "location": 365,
            "return": [],
            "arguments": {}
        },
        "print_prefix": {
            "name": "print_prefix",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "prefix": [
                    "str"
                ]
            }
        },
        "unrecorded_taxa.has_occurrence": {
            "name": "has_occurrence",
            "location": 111,
            "return": [
                "bool"
            ],
            "arguments": {
                "taxon": [
                    "Taxon"
                ]
            }
        },
        "_NamesGetter.__init__": {
            "name": "__init__",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "Group"
                ]
            }
        },
        "_NamesGetter.__getattr__": {
            "name": "__getattr__",
            "location": 260,
            "return": [
                "List[Name]"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str"
                ]
            }
        },
        "_NamesGetter.__dir__": {
            "name": "__dir__",
            "location": 269,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_NamesGetter._fill_cache": {
            "name": "_fill_cache",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_NamesGetter.clear_cache": {
            "name": "clear_cache",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "taxonomy-master/taxonomy/parsing.py": {
        "unicode_range": {
            "name": "unicode_range",
            "location": 7,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "start": [
                    "str"
                ],
                "end": [
                    "str"
                ]
            }
        },
        "matches_grammar": {
            "name": "matches_grammar",
            "location": 402,
            "return": [
                "bool"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "grammar": [
                    "Pattern[str]"
                ]
            }
        },
        "Element.to_regex": {
            "name": "to_regex",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.compile": {
            "name": "compile",
            "location": 15,
            "return": [
                "Pattern[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.__or__": {
            "name": "__or__",
            "location": 18,
            "return": [
                "'OneOf'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'Element'"
                ]
            }
        },
        "Element.__add__": {
            "name": "__add__",
            "location": 21,
            "return": [
                "'And'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'Element'"
                ]
            }
        },
        "Char.to_regex": {
            "name": "to_regex",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Literal.to_regex": {
            "name": "to_regex",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneOf.from_strs": {
            "name": "from_strs",
            "location": 46,
            "return": [
                "'OneOf'"
            ],
            "arguments": {
                "cls": [],
                "strs": [
                    "Iterable[str]"
                ]
            }
        },
        "OneOf.to_regex": {
            "name": "to_regex",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "And.to_regex": {
            "name": "to_regex",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Repetition.to_regex": {
            "name": "to_regex",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "taxonomy-master/taxonomy/shell.py": {
        "_reconnect": {
            "name": "_reconnect",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "command": {
            "name": "command",
            "location": 159,
            "return": [
                "CallableT"
            ],
            "arguments": {
                "fn": [
                    "CallableT"
                ]
            }
        },
        "generator_command": {
            "name": "generator_command",
            "location": 171,
            "return": [
                "Callable[(..., List[T])]"
            ],
            "arguments": {
                "fn": [
                    "Callable[(..., Iterable[T])]"
                ]
            }
        },
        "clear_cache": {
            "name": "clear_cache",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "taxon_of_name": {
            "name": "taxon_of_name",
            "location": 196,
            "return": [
                "Taxon"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "n": {
            "name": "n",
            "location": 206,
            "return": [
                "Iterable[Name]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "_add_missing_data": {
            "name": "_add_missing_data",
            "location": 217,
            "return": [
                "Callable[(..., None)]"
            ],
            "arguments": {
                "fn": [
                    "_MissingDataProducer"
                ]
            }
        },
        "add_original_names": {
            "name": "add_original_names",
            "location": 231,
            "return": [
                "Iterable[Tuple[(Name, str)]]"
            ],
            "arguments": {}
        },
        "add_page_described": {
            "name": "add_page_described",
            "location": 245,
            "return": [
                "Iterable[Tuple[(Name, str)]]"
            ],
            "arguments": {}
        },
        "make_county_regions": {
            "name": "make_county_regions",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "state": [
                    "models.Region"
                ],
                "name": [
                    "Optional[str]"
                ],
                "dry_run": [
                    "bool"
                ]
            }
        },
        "bad_stratigraphy": {
            "name": "bad_stratigraphy",
            "location": 291,
            "return": [
                "Iterable[models.Location]"
            ],
            "arguments": {
                "dry_run": [
                    "bool"
                ]
            }
        },
        "check_period_ranks": {
            "name": "check_period_ranks",
            "location": 304,
            "return": [
                "Iterable[models.Period]"
            ],
            "arguments": {}
        },
        "infer_min_max_age": {
            "name": "infer_min_max_age",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "dry_run": [
                    "bool"
                ]
            }
        },
        "add_types": {
            "name": "add_types",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "find_rank_mismatch": {
            "name": "find_rank_mismatch",
            "location": 383,
            "return": [
                "Iterable[Taxon]"
            ],
            "arguments": {}
        },
        "detect_corrected_original_names": {
            "name": "detect_corrected_original_names",
            "location": 394,
            "return": [
                "Iterable[Name]"
            ],
            "arguments": {
                "dry_run": [
                    "bool"
                ],
                "interactive": [
                    "bool"
                ],
                "ignore_failure": [
                    "bool"
                ],
                "aggressive": [
                    "bool"
                ]
            }
        },
        "check_root_name": {
            "name": "check_root_name",
            "location": 427,
            "return": [
                "Iterator[Tuple[(Name, str)]]"
            ],
            "arguments": {}
        },
        "check_corrected_original_name": {
            "name": "check_corrected_original_name",
            "location": 447,
            "return": [
                "Iterator[Tuple[(Name, str)]]"
            ],
            "arguments": {}
        },
        "detect_types": {
            "name": "detect_types",
            "location": 533,
            "return": [
                "None"
            ],
            "arguments": {
                "max_count": [
                    "Optional[int]"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "detect_types_from_root_names": {
            "name": "detect_types_from_root_names",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "max_count": [
                    "Optional[int]"
                ]
            }
        },
        "endswith": {
            "name": "endswith",
            "location": 598,
            "return": [
                "List[Name]"
            ],
            "arguments": {
                "end": [
                    "str"
                ]
            }
        },
        "detect_complexes": {
            "name": "detect_complexes",
            "location": 607,
            "return": [
                "None"
            ],
            "arguments": {
                "allow_ignoring": [
                    "bool"
                ]
            }
        },
        "detect_species_name_complexes": {
            "name": "detect_species_name_complexes",
            "location": 633,
            "return": [
                "None"
            ],
            "arguments": {
                "dry_run": [
                    "bool"
                ]
            }
        },
        "find_patronyms": {
            "name": "find_patronyms",
            "location": 704,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "dry_run": [
                    "bool"
                ],
                "min_length": [
                    "int"
                ]
            }
        },
        "find_first_declension_adjectives": {
            "name": "find_first_declension_adjectives",
            "location": 753,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "dry_run": [
                    "bool"
                ]
            }
        },
        "get_pages_in_wiki_category": {
            "name": "get_pages_in_wiki_category",
            "location": 785,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "domain": [
                    "str"
                ],
                "category_name": [
                    "str"
                ]
            }
        },
        "find_ending": {
            "name": "find_ending",
            "location": 808,
            "return": [
                "Optional[models.NameComplex]"
            ],
            "arguments": {
                "name": [
                    "Name"
                ],
                "endings": [
                    "Iterable[models.NameEnding]"
                ]
            }
        },
        "generate_word_list": {
            "name": "generate_word_list",
            "location": 818,
            "return": [
                "Set[str]"
            ],
            "arguments": {}
        },
        "stem_mismatch": {
            "name": "stem_mismatch",
            "location": 840,
            "return": [
                "Iterable[Name]"
            ],
            "arguments": {
                "autofix": [
                    "bool"
                ]
            }
        },
        "complexless_stems": {
            "name": "complexless_stems",
            "location": 855,
            "return": [
                "Iterable[Name]"
            ],
            "arguments": {}
        },
        "correct_species_root_names": {
            "name": "correct_species_root_names",
            "location": 864,
            "return": [
                "Iterable[Name]"
            ],
            "arguments": {
                "dry_run": [
                    "bool"
                ]
            }
        },
        "species_root_name_mismatch": {
            "name": "species_root_name_mismatch",
            "location": 873,
            "return": [
                "Iterable[Name]"
            ],
            "arguments": {}
        },
        "root_name_mismatch": {
            "name": "root_name_mismatch",
            "location": 899,
            "return": [
                "Iterable[Name]"
            ],
            "arguments": {
                "interactive": [
                    "bool"
                ]
            }
        },
        "_duplicate_finder": {
            "name": "_duplicate_finder",
            "location": 928,
            "return": [
                "Callable[(..., Optional[List[Sequence[T]]])]"
            ],
            "arguments": {
                "fn": [
                    "Callable[(..., Iterable[Mapping[(Any, Sequence[T])]])]"
                ]
            }
        },
        "dup_citation_groups": {
            "name": "dup_citation_groups",
            "location": 944,
            "return": [
                "List[Dict[(str, List[CitationGroup])]]"
            ],
            "arguments": {}
        },
        "dup_collections": {
            "name": "dup_collections",
            "location": 954,
            "return": [
                "List[Dict[(str, List[Collection])]]"
            ],
            "arguments": {}
        },
        "dup_taxa": {
            "name": "dup_taxa",
            "location": 962,
            "return": [
                "List[Dict[(str, List[Taxon])]]"
            ],
            "arguments": {}
        },
        "dup_genus": {
            "name": "dup_genus",
            "location": 982,
            "return": [
                "List[Dict[(str, List[Name])]]"
            ],
            "arguments": {}
        },
        "dup_names": {
            "name": "dup_names",
            "location": 997,
            "return": [
                "List[Dict[(Tuple[(Optional[str], Optional[str], constants.NomenclatureStatus, Optional[str])], List[Name])]]"
            ],
            "arguments": {}
        },
        "stem_statistics": {
            "name": "stem_statistics",
            "location": 1025,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_scores": {
            "name": "get_scores",
            "location": 1140,
            "return": [
                "ScoreHolder"
            ],
            "arguments": {
                "rank": [
                    "Rank"
                ],
                "within_taxon": [
                    "Optional[Taxon]"
                ],
                "age": [
                    "Optional[AgeClass]"
                ],
                "graphical": [
                    "bool"
                ],
                "focus_field": [
                    "Optional[str]"
                ],
                "min_year": [
                    "Optional[int]"
                ]
            }
        },
        "get_scores_for_period": {
            "name": "get_scores_for_period",
            "location": 1158,
            "return": [
                "ScoreHolder"
            ],
            "arguments": {
                "rank": [
                    "Rank"
                ],
                "period": [
                    "Period"
                ],
                "focus_field": [
                    "Optional[str]"
                ],
                "graphical": [
                    "bool"
                ]
            }
        },
        "name_mismatches": {
            "name": "name_mismatches",
            "location": 1174,
            "return": [
                "Iterable[Taxon]"
            ],
            "arguments": {
                "max_count": [
                    "Optional[int]"
                ],
                "correct": [
                    "bool"
                ],
                "correct_undoubted": [
                    "bool"
                ]
            }
        },
        "authorless_names": {
            "name": "authorless_names",
            "location": 1203,
            "return": [
                "Iterable[Name]"
            ],
            "arguments": {
                "root_taxon": [
                    "Taxon"
                ],
                "attribute": [
                    "str"
                ],
                "predicate": [
                    "Optional[Callable[([Name], bool)]]"
                ]
            }
        },
        "complexless_genera": {
            "name": "complexless_genera",
            "location": 1221,
            "return": [
                "Iterable[Name]"
            ],
            "arguments": {
                "root_taxon": [
                    "Taxon"
                ]
            }
        },
        "is_high_quality": {
            "name": "is_high_quality",
            "location": 1253,
            "return": [
                "bool"
            ],
            "arguments": {
                "taxon": [
                    "Taxon"
                ]
            }
        },
        "label_name": {
            "name": "label_name",
            "location": 1262,
            "return": [
                "LabeledName"
            ],
            "arguments": {
                "name": [
                    "Name"
                ]
            }
        },
        "labeled_authorless_names": {
            "name": "labeled_authorless_names",
            "location": 1277,
            "return": [
                "List[LabeledName]"
            ],
            "arguments": {
                "attribute": [
                    "str"
                ]
            }
        },
        "correct_type_taxon": {
            "name": "correct_type_taxon",
            "location": 1285,
            "return": [
                "List[Name]"
            ],
            "arguments": {
                "max_count": [
                    "Optional[int]"
                ],
                "dry_run": [
                    "bool"
                ],
                "only_if_child": [
                    "bool"
                ]
            }
        },
        "type_locality_tree": {
            "name": "type_locality_tree",
            "location": 1327,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_tl_count": {
            "name": "_tl_count",
            "location": 1334,
            "return": [
                "Tuple[(int, List[str])]"
            ],
            "arguments": {
                "region": [
                    "models.Region"
                ]
            }
        },
        "print_percentages": {
            "name": "print_percentages",
            "location": 1352,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "bad_base_names": {
            "name": "bad_base_names",
            "location": 1410,
            "return": [
                "Iterable[Taxon]"
            ],
            "arguments": {}
        },
        "bad_taxa": {
            "name": "bad_taxa",
            "location": 1434,
            "return": [
                "Iterable[Name]"
            ],
            "arguments": {}
        },
        "bad_parents": {
            "name": "bad_parents",
            "location": 1441,
            "return": [
                "Iterable[Name]"
            ],
            "arguments": {}
        },
        "parentless_taxa": {
            "name": "parentless_taxa",
            "location": 1446,
            "return": [
                "Iterable[Taxon]"
            ],
            "arguments": {}
        },
        "bad_occurrences": {
            "name": "bad_occurrences",
            "location": 1452,
            "return": [
                "Iterable[models.Occurrence]"
            ],
            "arguments": {}
        },
        "bad_types": {
            "name": "bad_types",
            "location": 1459,
            "return": [
                "Iterable[Name]"
            ],
            "arguments": {}
        },
        "disallowed_attribute": {
            "name": "disallowed_attribute",
            "location": 1480,
            "return": [
                "Iterable[Tuple[(Name, str)]]"
            ],
            "arguments": {}
        },
        "autoset_original_name": {
            "name": "autoset_original_name",
            "location": 1489,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "childless_taxa": {
            "name": "childless_taxa",
            "location": 1497,
            "return": [
                "Iterable[Taxon]"
            ],
            "arguments": {}
        },
        "labeled_childless_taxa": {
            "name": "labeled_childless_taxa",
            "location": 1517,
            "return": [
                "Iterable[LabeledName]"
            ],
            "arguments": {}
        },
        "fossilize": {
            "name": "fossilize",
            "location": 1522,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_age_parents": {
            "name": "check_age_parents",
            "location": 1537,
            "return": [
                "Iterable[Taxon]"
            ],
            "arguments": {}
        },
        "sorted_field_values": {
            "name": "sorted_field_values",
            "location": 1548,
            "return": [
                "None"
            ],
            "arguments": {
                "field": [
                    "str"
                ],
                "model_cls": [
                    "Type[models.BaseModel]"
                ]
            }
        },
        "bad_page_described": {
            "name": "bad_page_described",
            "location": 1571,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "field_counts": {
            "name": "field_counts",
            "location": 1581,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "clean_column": {
            "name": "clean_column",
            "location": 1588,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type[models.BaseModel]"
                ],
                "column": [
                    "str"
                ],
                "dry_run": [
                    "bool"
                ]
            }
        },
        "clean_up_gender": {
            "name": "clean_up_gender",
            "location": 1605,
            "return": [
                "Iterable[Name]"
            ],
            "arguments": {
                "dry_run": [
                    "bool"
                ]
            }
        },
        "clean_up_stem": {
            "name": "clean_up_stem",
            "location": 1625,
            "return": [
                "Iterable[Name]"
            ],
            "arguments": {
                "dry_run": [
                    "bool"
                ]
            }
        },
        "clean_up_verbatim": {
            "name": "clean_up_verbatim",
            "location": 1651,
            "return": [
                "None"
            ],
            "arguments": {
                "dry_run": [
                    "bool"
                ],
                "slow": [
                    "bool"
                ]
            }
        },
        "set_name_complex": {
            "name": "set_name_complex",
            "location": 1714,
            "return": [
                "None"
            ],
            "arguments": {
                "suffix": [
                    "str"
                ]
            }
        },
        "set_name_complex_in_taxon": {
            "name": "set_name_complex_in_taxon",
            "location": 1725,
            "return": [
                "None"
            ],
            "arguments": {
                "taxon": [
                    "Taxon"
                ]
            }
        },
        "_set_name_complex_for_names": {
            "name": "_set_name_complex_for_names",
            "location": 1736,
            "return": [
                "None"
            ],
            "arguments": {
                "nams": [
                    "Sequence[Name]"
                ]
            }
        },
        "set_citation_group_for_matching_citation": {
            "name": "set_citation_group_for_matching_citation",
            "location": 1747,
            "return": [
                "None"
            ],
            "arguments": {
                "dry_run": [
                    "bool"
                ],
                "fix": [
                    "bool"
                ]
            }
        },
        "set_empty_to_none": {
            "name": "set_empty_to_none",
            "location": 1777,
            "return": [
                "None"
            ],
            "arguments": {
                "model_cls": [
                    "Type[models.BaseModel]"
                ],
                "field": [
                    "str"
                ],
                "dry_run": [
                    "bool"
                ]
            }
        },
        "fill_data_from_paper": {
            "name": "fill_data_from_paper",
            "location": 1788,
            "return": [
                "None"
            ],
            "arguments": {
                "paper": [
                    "Optional[models.Article]"
                ],
                "level": [
                    "FillDataLevel"
                ],
                "ask_before_opening": [
                    "bool"
                ]
            }
        },
        "fill_data_from_author": {
            "name": "fill_data_from_author",
            "location": 1804,
            "return": [
                "None"
            ],
            "arguments": {
                "author": [
                    "Optional[Person]"
                ],
                "level": [
                    "FillDataLevel"
                ],
                "only_fill_cache": [
                    "bool"
                ],
                "skip_nofile": [
                    "bool"
                ]
            }
        },
        "fill_data_for_children": {
            "name": "fill_data_for_children",
            "location": 1825,
            "return": [
                "None"
            ],
            "arguments": {
                "paper": [
                    "Optional[models.Article]"
                ],
                "level": [
                    "FillDataLevel"
                ],
                "skip_nofile": [
                    "bool"
                ],
                "only_fill_cache": [
                    "bool"
                ]
            }
        },
        "fill_data_random": {
            "name": "fill_data_random",
            "location": 1853,
            "return": [
                "None"
            ],
            "arguments": {
                "batch_size": [
                    "int"
                ],
                "level": [
                    "FillDataLevel"
                ],
                "ask_before_opening": [
                    "bool"
                ]
            }
        },
        "fill_data_reverse_order": {
            "name": "fill_data_reverse_order",
            "location": 1884,
            "return": [
                "None"
            ],
            "arguments": {
                "level": [
                    "FillDataLevel"
                ],
                "ask_before_opening": [
                    "bool"
                ],
                "max_count": [
                    "Optional[int]"
                ]
            }
        },
        "fill_citation_group_for_type": {
            "name": "fill_citation_group_for_type",
            "location": 1912,
            "return": [
                "None"
            ],
            "arguments": {
                "article_type": [
                    "constants.ArticleType"
                ],
                "field": [
                    "str"
                ],
                "dry_run": [
                    "bool"
                ]
            }
        },
        "set_region_for_groups": {
            "name": "set_region_for_groups",
            "location": 1937,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fill_citation_groups": {
            "name": "fill_citation_groups",
            "location": 1948,
            "return": [
                "None"
            ],
            "arguments": {
                "book": [
                    "bool"
                ],
                "interactive": [
                    "bool"
                ],
                "only_with_hints": [
                    "bool"
                ],
                "skip_inference": [
                    "bool"
                ],
                "show_hints": [
                    "bool"
                ]
            }
        },
        "field_by_year": {
            "name": "field_by_year",
            "location": 2005,
            "return": [
                "None"
            ],
            "arguments": {
                "field": [
                    "Optional[str]"
                ]
            }
        },
        "type_localities_like": {
            "name": "type_localities_like",
            "location": 2034,
            "return": [
                "None"
            ],
            "arguments": {
                "substring": [
                    "str"
                ],
                "full": [
                    "bool"
                ]
            }
        },
        "names_with_location_detail_without_type_loc": {
            "name": "names_with_location_detail_without_type_loc",
            "location": 2051,
            "return": [
                "Iterable[Name]"
            ],
            "arguments": {
                "taxon": [
                    "Optional[Taxon]"
                ]
            }
        },
        "fill_type_locality_from_location_detail": {
            "name": "fill_type_locality_from_location_detail",
            "location": 2087,
            "return": [
                "None"
            ],
            "arguments": {
                "taxon": [
                    "Optional[Taxon]"
                ],
                "substring": [
                    "Optional[str]"
                ]
            }
        },
        "fix_general_type_localities": {
            "name": "fix_general_type_localities",
            "location": 2095,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fix_general_type_localities_for_region": {
            "name": "fix_general_type_localities_for_region",
            "location": 2102,
            "return": [
                "None"
            ],
            "arguments": {
                "region": [
                    "models.Region"
                ]
            }
        },
        "more_precise_type_localities": {
            "name": "more_precise_type_localities",
            "location": 2135,
            "return": [
                "None"
            ],
            "arguments": {
                "loc": [
                    "models.Location"
                ]
            }
        },
        "more_precise_periods": {
            "name": "more_precise_periods",
            "location": 2158,
            "return": [
                "None"
            ],
            "arguments": {
                "period": [
                    "models.Period"
                ],
                "region": [
                    "Optional[models.Region]"
                ],
                "include_children": [
                    "bool"
                ],
                "set_stratigraphy": [
                    "bool"
                ]
            }
        },
        "_more_precise": {
            "name": "_more_precise",
            "location": 2181,
            "return": [
                "None"
            ],
            "arguments": {
                "region": [
                    "models.Region"
                ],
                "objects": [
                    "Iterable[Any]"
                ],
                "field": [
                    "str"
                ],
                "filter_func": [
                    "Callable[([Any], bool)]"
                ]
            }
        },
        "_more_precise_by_county": {
            "name": "_more_precise_by_county",
            "location": 2195,
            "return": [
                "None"
            ],
            "arguments": {
                "state": [
                    "models.Region"
                ],
                "counties": [
                    "Sequence[str]"
                ]
            }
        },
        "_make_loc_filterer": {
            "name": "_make_loc_filterer",
            "location": 2214,
            "return": [
                "Callable[([models.Location], bool)]"
            ],
            "arguments": {
                "substring": [
                    "str"
                ]
            }
        },
        "_more_precise_by_subdivision": {
            "name": "_more_precise_by_subdivision",
            "location": 2225,
            "return": [
                "None"
            ],
            "arguments": {
                "region": [
                    "models.Region"
                ]
            }
        },
        "more_precise": {
            "name": "more_precise",
            "location": 2240,
            "return": [
                "None"
            ],
            "arguments": {
                "region": [
                    "models.Region"
                ]
            }
        },
        "type_locality_without_detail": {
            "name": "type_locality_without_detail",
            "location": 2261,
            "return": [
                "Iterable[Name]"
            ],
            "arguments": {}
        },
        "most_common_unchecked_names": {
            "name": "most_common_unchecked_names",
            "location": 2273,
            "return": [
                "Counter[str]"
            ],
            "arguments": {
                "num_to_display": [
                    "int"
                ],
                "max_level": [
                    "Optional[PersonLevel]"
                ],
                "max_num_names": [
                    "Optional[int]"
                ]
            }
        },
        "biggest_names": {
            "name": "biggest_names",
            "location": 2300,
            "return": [
                "Counter[Person]"
            ],
            "arguments": {
                "num_to_display": [
                    "int"
                ],
                "max_level": [
                    "Optional[PersonLevel]"
                ],
                "family_name": [
                    "Optional[str]"
                ]
            }
        },
        "rio_taxon": {
            "name": "rio_taxon",
            "location": 2318,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "reassign_references": {
            "name": "reassign_references",
            "location": 2330,
            "return": [
                "None"
            ],
            "arguments": {
                "family_name": [
                    "Optional[str]"
                ],
                "substring": [
                    "bool"
                ],
                "max_level": [
                    "Optional[PersonLevel]"
                ]
            }
        },
        "_initials": {
            "name": "_initials",
            "location": 2364,
            "return": [
                "PersonParams"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "_parse_suffix": {
            "name": "_parse_suffix",
            "location": 2383,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "suffix": [
                    "Optional[str]"
                ]
            }
        },
        "_full_name": {
            "name": "_full_name",
            "location": 2390,
            "return": [
                "PersonParams"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "_last_name_only": {
            "name": "_last_name_only",
            "location": 2406,
            "return": [
                "PersonParams"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "_cyrillic": {
            "name": "_cyrillic",
            "location": 2413,
            "return": [
                "PersonParams"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "_van": {
            "name": "_van",
            "location": 2428,
            "return": [
                "PersonParams"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "most_common": {
            "name": "most_common",
            "location": 2450,
            "return": [
                "Counter[Any]"
            ],
            "arguments": {
                "model_cls": [
                    "Type[models.BaseModel]"
                ],
                "field": [
                    "str"
                ]
            }
        },
        "most_common_mapped": {
            "name": "most_common_mapped",
            "location": 2461,
            "return": [
                "Counter[Any]"
            ],
            "arguments": {
                "model_cls": [
                    "Type[models.BaseModel]"
                ],
                "field": [
                    "str"
                ],
                "mapper": [
                    "Callable[([Any], Any)]"
                ],
                "num_to_display": [
                    "int"
                ]
            }
        },
        "most_common_citation_groups_after": {
            "name": "most_common_citation_groups_after",
            "location": 2478,
            "return": [
                "Dict[(CitationGroup, int)]"
            ],
            "arguments": {
                "year": [
                    "int"
                ]
            }
        },
        "fill_data_from_folder": {
            "name": "fill_data_from_folder",
            "location": 2484,
            "return": [
                "None"
            ],
            "arguments": {
                "folder": [
                    "Optional[str]"
                ],
                "level": [
                    "FillDataLevel"
                ],
                "only_fill_cache": [
                    "bool"
                ],
                "ask_before_opening": [
                    "bool"
                ],
                "skip_nofile": [
                    "bool"
                ]
            }
        },
        "fill_data_from_citation_group": {
            "name": "fill_data_from_citation_group",
            "location": 2504,
            "return": [
                "None"
            ],
            "arguments": {
                "cg": [
                    "Optional[CitationGroup]"
                ],
                "level": [
                    "FillDataLevel"
                ],
                "only_fill_cache": [
                    "bool"
                ],
                "ask_before_opening": [
                    "bool"
                ],
                "skip_nofile": [
                    "bool"
                ]
            }
        },
        "check_year": {
            "name": "check_year",
            "location": 2536,
            "return": [
                "Iterable[Name]"
            ],
            "arguments": {}
        },
        "check_expected_base_name": {
            "name": "check_expected_base_name",
            "location": 2549,
            "return": [
                "Iterable[Taxon]"
            ],
            "arguments": {}
        },
        "check_justified_emendations": {
            "name": "check_justified_emendations",
            "location": 2556,
            "return": [
                "Iterable[Tuple[(Name, str)]]"
            ],
            "arguments": {}
        },
        "check_tags": {
            "name": "check_tags",
            "location": 2601,
            "return": [
                "Iterable[Tuple[(Name, str)]]"
            ],
            "arguments": {
                "dry_run": [
                    "bool"
                ]
            }
        },
        "check_type_tags_for_name": {
            "name": "check_type_tags_for_name",
            "location": 2696,
            "return": [
                "Iterable[Tuple[(Name, str)]]"
            ],
            "arguments": {
                "nam": [
                    "Name"
                ],
                "dry_run": [
                    "bool"
                ]
            }
        },
        "check_type_tags": {
            "name": "check_type_tags",
            "location": 2776,
            "return": [
                "Iterable[Tuple[(Name, str)]]"
            ],
            "arguments": {
                "dry_run": [
                    "bool"
                ],
                "require_type_designations": [
                    "bool"
                ]
            }
        },
        "move_to_lowest_rank": {
            "name": "move_to_lowest_rank",
            "location": 2822,
            "return": [
                "Iterable[Tuple[(Name, str)]]"
            ],
            "arguments": {
                "dry_run": [
                    "bool"
                ]
            }
        },
        "apply_author_synonyms": {
            "name": "apply_author_synonyms",
            "location": 2992,
            "return": [
                "None"
            ],
            "arguments": {
                "dry_run": [
                    "bool"
                ]
            }
        },
        "resolve_redirects": {
            "name": "resolve_redirects",
            "location": 3003,
            "return": [
                "None"
            ],
            "arguments": {
                "dry_run": [
                    "bool"
                ]
            }
        },
        "run_maintenance": {
            "name": "run_maintenance",
            "location": 3024,
            "return": [
                "Dict[(Any, Any)]"
            ],
            "arguments": {
                "skip_slow": [
                    "bool"
                ]
            }
        },
        "names_of_author": {
            "name": "names_of_author",
            "location": 3090,
            "return": [
                "List[Name]"
            ],
            "arguments": {
                "author": [
                    "str"
                ],
                "include_partial": [
                    "bool"
                ]
            }
        },
        "names_of_authority": {
            "name": "names_of_authority",
            "location": 3102,
            "return": [
                "List[Name]"
            ],
            "arguments": {
                "author": [
                    "str"
                ],
                "year": [
                    "int"
                ],
                "edit": [
                    "bool"
                ]
            }
        },
        "find_multiple_repository_names": {
            "name": "find_multiple_repository_names",
            "location": 3128,
            "return": [
                "List[Name]"
            ],
            "arguments": {
                "filter": [
                    "Optional[str]"
                ],
                "edit": [
                    "bool"
                ]
            }
        },
        "moreau": {
            "name": "moreau",
            "location": 3158,
            "return": [
                "None"
            ],
            "arguments": {
                "nam": [
                    "Name"
                ]
            }
        },
        "fgsyn": {
            "name": "fgsyn",
            "location": 3164,
            "return": [
                "Name"
            ],
            "arguments": {
                "off": [
                    "Optional[Name]"
                ]
            }
        },
        "author_report": {
            "name": "author_report",
            "location": 3183,
            "return": [
                "List[Name]"
            ],
            "arguments": {
                "author": [
                    "str"
                ],
                "partial": [
                    "bool"
                ],
                "missing_attribute": [
                    "Optional[str]"
                ]
            }
        },
        "enforce_must_have": {
            "name": "enforce_must_have",
            "location": 3223,
            "return": [
                "Iterator[Name]"
            ],
            "arguments": {
                "fix": [
                    "bool"
                ]
            }
        },
        "enforce_must_have_series": {
            "name": "enforce_must_have_series",
            "location": 3243,
            "return": [
                "Iterator[Article]"
            ],
            "arguments": {
                "fix": [
                    "bool"
                ]
            }
        },
        "archive_for_must_have": {
            "name": "archive_for_must_have",
            "location": 3261,
            "return": [
                "Iterator[CitationGroup]"
            ],
            "arguments": {
                "fix": [
                    "bool"
                ]
            }
        },
        "_must_have_citation_groups": {
            "name": "_must_have_citation_groups",
            "location": 3270,
            "return": [
                "List[CitationGroup]"
            ],
            "arguments": {}
        },
        "find_potential_citations": {
            "name": "find_potential_citations",
            "location": 3280,
            "return": [
                "int"
            ],
            "arguments": {
                "fix": [
                    "bool"
                ],
                "region": [
                    "Optional[models.Region]"
                ],
                "aggressive": [
                    "bool"
                ]
            }
        },
        "_author_names": {
            "name": "_author_names",
            "location": 3295,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "obj": [
                    "Union[(Article, Name)]"
                ]
            }
        },
        "find_potential_citations_for_group": {
            "name": "find_potential_citations_for_group",
            "location": 3300,
            "return": [
                "int"
            ],
            "arguments": {
                "cg": [
                    "CitationGroup"
                ],
                "fix": [
                    "bool"
                ],
                "aggressive": [
                    "bool"
                ]
            }
        },
        "recent_names_without_verbatim": {
            "name": "recent_names_without_verbatim",
            "location": 3354,
            "return": [
                "Iterator[Name]"
            ],
            "arguments": {
                "threshold": [
                    "int"
                ],
                "fix": [
                    "bool"
                ]
            }
        },
        "fill_verbatim_citation_for_names": {
            "name": "fill_verbatim_citation_for_names",
            "location": 3360,
            "return": [
                "Iterator[Name]"
            ],
            "arguments": {}
        },
        "citation_groups_with_recent_names": {
            "name": "citation_groups_with_recent_names",
            "location": 3387,
            "return": [
                "None"
            ],
            "arguments": {
                "threshold": [
                    "int"
                ]
            }
        },
        "fix_citation_group_redirects": {
            "name": "fix_citation_group_redirects",
            "location": 3410,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "find_dois": {
            "name": "find_dois",
            "location": 3423,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "reset_db": {
            "name": "reset_db",
            "location": 3439,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "print_parent": {
            "name": "print_parent",
            "location": 3446,
            "return": [
                "Optional[Taxon]"
            ],
            "arguments": {}
        },
        "edit_names_interactive": {
            "name": "edit_names_interactive",
            "location": 3454,
            "return": [
                "None"
            ],
            "arguments": {
                "art": [
                    "Optional[Article]"
                ],
                "field": [
                    "str"
                ]
            }
        },
        "occ": {
            "name": "occ",
            "location": 3467,
            "return": [
                "Optional[models.Occurrence]"
            ],
            "arguments": {
                "t": [
                    "Optional[Taxon]"
                ],
                "loc": [
                    "Optional[models.Location]"
                ],
                "source": [
                    "Optional[Article]"
                ],
                "replace_source": [
                    "bool"
                ]
            }
        },
        "mocc": {
            "name": "mocc",
            "location": 3502,
            "return": [
                "None"
            ],
            "arguments": {
                "t": [
                    "Optional[Taxon]"
                ],
                "source": [
                    "Optional[Article]"
                ],
                "replace_source": [
                    "bool"
                ]
            }
        },
        "multi_taxon": {
            "name": "multi_taxon",
            "location": 3524,
            "return": [
                "None"
            ],
            "arguments": {
                "loc": [
                    "Optional[models.Location]"
                ],
                "source": [
                    "Optional[Article]"
                ],
                "replace_source": [
                    "bool"
                ]
            }
        },
        "compute_derived_fields": {
            "name": "compute_derived_fields",
            "location": 3546,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "write_derived_data": {
            "name": "write_derived_data",
            "location": 3554,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "warm_all_caches": {
            "name": "warm_all_caches",
            "location": 3560,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "show_queries": {
            "name": "show_queries",
            "location": 3573,
            "return": [
                "None"
            ],
            "arguments": {
                "on": [
                    "bool"
                ]
            }
        },
        "run_shell": {
            "name": "run_shell",
            "location": 3582,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_ShellNamespace.__missing__": {
            "name": "__missing__",
            "location": 88,
            "return": [
                "object"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "_ShellNamespace.keys": {
            "name": "keys",
            "location": 95,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ShellNamespace.__delitem__": {
            "name": "__delitem__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "_ShellNamespace.clear_cache": {
            "name": "clear_cache",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ShellNamespace.add_name": {
            "name": "add_name",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "taxon": [
                    "Taxon"
                ]
            }
        },
        "command.wrapper": {
            "name": "wrapper",
            "location": 161,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "generator_command.wrapper": {
            "name": "wrapper",
            "location": 173,
            "return": [
                "List[T]"
            ],
            "arguments": {}
        },
        "_add_missing_data.wrapper": {
            "name": "wrapper",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_root_name.make_message": {
            "name": "make_message",
            "location": 430,
            "return": [
                "Tuple[(Name, str)]"
            ],
            "arguments": {
                "nam": [
                    "Name"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "check_corrected_original_name.make_message": {
            "name": "make_message",
            "location": 450,
            "return": [
                "Tuple[(Name, str)]"
            ],
            "arguments": {
                "nam": [
                    "Name"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "detect_types_from_root_names.detect_from_root_name": {
            "name": "detect_from_root_name",
            "location": 553,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "Name"
                ],
                "root_name": [
                    "str"
                ]
            }
        },
        "SuffixTree.__init__": {
            "name": "__init__",
            "location": 671,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SuffixTree.add": {
            "name": "add",
            "location": 675,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "T"
                ]
            }
        },
        "SuffixTree.count": {
            "name": "count",
            "location": 678,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SuffixTree.lookup": {
            "name": "lookup",
            "location": 681,
            "return": [
                "Iterable[T]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "SuffixTree._add": {
            "name": "_add",
            "location": 684,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Iterator[str]"
                ],
                "value": [
                    "T"
                ]
            }
        },
        "SuffixTree._lookup": {
            "name": "_lookup",
            "location": 692,
            "return": [
                "Iterable[T]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Iterator[str]"
                ]
            }
        },
        "_duplicate_finder.wrapper": {
            "name": "wrapper",
            "location": 933,
            "return": [
                "Iterable[Sequence[T]]"
            ],
            "arguments": {}
        },
        "ScoreHolder.__init__": {
            "name": "__init__",
            "location": 1051,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[(Taxon, Dict[(str, Any)])]"
                ]
            }
        },
        "ScoreHolder.by_field": {
            "name": "by_field",
            "location": 1054,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ],
                "min_count": [
                    "int"
                ],
                "max_score": [
                    "float"
                ],
                "graphical": [
                    "bool"
                ]
            }
        },
        "ScoreHolder.by_num_missing": {
            "name": "by_num_missing",
            "location": 1092,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ]
            }
        },
        "ScoreHolder.completion_rate": {
            "name": "completion_rate",
            "location": 1104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScoreHolder.from_taxa": {
            "name": "from_taxa",
            "location": 1120,
            "return": [
                "'ScoreHolder'"
            ],
            "arguments": {
                "cls": [],
                "taxa": [
                    "Iterable[Taxon]"
                ],
                "age": [
                    "Optional[AgeClass]"
                ],
                "graphical": [
                    "bool"
                ],
                "focus_field": [
                    "Optional[str]"
                ],
                "min_year": [
                    "Optional[int]"
                ]
            }
        },
        "print_percentages._find_parent": {
            "name": "_find_parent",
            "location": 1362,
            "return": [
                "int"
            ],
            "arguments": {
                "taxon": [
                    "Taxon"
                ]
            }
        },
        "clean_up_verbatim._maybe_clean_verbatim": {
            "name": "_maybe_clean_verbatim",
            "location": 1652,
            "return": [
                "None"
            ],
            "arguments": {
                "nam": [
                    "Name"
                ]
            }
        },
        "_make_loc_filterer.filterer": {
            "name": "filterer",
            "location": 2215,
            "return": [
                "bool"
            ],
            "arguments": {
                "loc": [
                    "models.Location"
                ]
            }
        },
        "fill_data_from_citation_group.sort_key": {
            "name": "sort_key",
            "location": 2516,
            "return": [
                "Tuple[(int, int, int)]"
            ],
            "arguments": {
                "art": [
                    "Article"
                ]
            }
        },
        "check_tags.maybe_adjust_status": {
            "name": "maybe_adjust_status",
            "location": 2608,
            "return": [
                "None"
            ],
            "arguments": {
                "nam": [
                    "Name"
                ],
                "status": [
                    "NomenclatureStatus"
                ],
                "tag": [
                    "object"
                ]
            }
        },
        "names_of_authority.sort_key": {
            "name": "sort_key",
            "location": 3106,
            "return": [
                "int"
            ],
            "arguments": {
                "nam": [
                    "Name"
                ]
            }
        },
        "find_potential_citations_for_group.is_possible_match": {
            "name": "is_possible_match",
            "location": 3311,
            "return": [
                "bool"
            ],
            "arguments": {
                "art": [
                    "Article"
                ],
                "nam": [
                    "Name"
                ],
                "page": [
                    "int"
                ]
            }
        },
        "ScoreHolder.by_field.sort_key": {
            "name": "sort_key",
            "location": 1068,
            "return": [
                "Tuple[(Any, ...)]"
            ],
            "arguments": {
                "pair": [
                    "Tuple[(Any, Dict[(str, Tuple[(float, int, int)])])]"
                ]
            }
        },
        "resolve_redirects.map_fn": {
            "name": "map_fn",
            "location": 3006,
            "return": [
                "Article"
            ],
            "arguments": {
                "source": [
                    "Article"
                ]
            }
        }
    },
    "taxonomy-master/taxonomy/test_adt.py": {
        "test_repr": {
            "name": "test_repr",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_serialize": {
            "name": "test_serialize",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Tree.__repr__": {
            "name": "__repr__",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "taxonomy-master/taxonomy/__init__.py": {},
    "taxonomy-master/taxonomy/db/analysis.py": {
        "genus_suffix_tree": {
            "name": "genus_suffix_tree",
            "location": 63,
            "return": [
                "_SuffixTree"
            ],
            "arguments": {
                "no_complex_only": [
                    "bool"
                ]
            }
        },
        "count_citation_groups": {
            "name": "count_citation_groups",
            "location": 72,
            "return": [
                "Counter[Optional[CitationGroup]]"
            ],
            "arguments": {
                "taxon": [
                    "Taxon"
                ],
                "age": [
                    "Optional[constants.AgeClass]"
                ]
            }
        },
        "_SuffixTree.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "names": [
                    "Iterable[str]"
                ]
            }
        },
        "_SuffixTree._add": {
            "name": "_add",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Sequence[str]"
                ]
            }
        },
        "_SuffixTree.display": {
            "name": "display",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_depth": [
                    "int"
                ],
                "depth": [
                    "int"
                ],
                "most_common": [
                    "Optional[int]"
                ],
                "min_count": [
                    "Optional[int]"
                ]
            }
        },
        "_SuffixTree.__getattr__": {
            "name": "__getattr__",
            "location": 56,
            "return": [
                "'_SuffixTree'"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str"
                ]
            }
        }
    },
    "taxonomy-master/taxonomy/db/constants.py": {
        "AgeClass.is_ichno": {
            "name": "is_ichno",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgeClass.get_symbol": {
            "name": "get_symbol",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NomenclatureStatus.requires_type": {
            "name": "requires_type",
            "location": 151,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NomenclatureStatus.is_variant": {
            "name": "is_variant",
            "location": 155,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NomenclatureStatus.can_preoccupy": {
            "name": "can_preoccupy",
            "location": 164,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NomenclatureStatus.requires_name_complex": {
            "name": "requires_name_complex",
            "location": 178,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NomenclatureStatus.permissive_corrected_original_name": {
            "name": "permissive_corrected_original_name",
            "location": 196,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NomenclatureStatus.hierarchy": {
            "name": "hierarchy",
            "location": 206,
            "return": [
                "List[List['NomenclatureStatus']]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "SpeciesNameKind.is_patronym": {
            "name": "is_patronym",
            "location": 522,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpeciesNameKind.is_single_complex": {
            "name": "is_single_complex",
            "location": 531,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeSpeciesDesignation.requires_tag": {
            "name": "requires_tag",
            "location": 552,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FillDataLevel.max_level": {
            "name": "max_level",
            "location": 723,
            "return": [
                "'FillDataLevel'"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "taxonomy-master/taxonomy/db/definition.py": {
        "_make_anchor": {
            "name": "_make_anchor",
            "location": 118,
            "return": [
                "'Taxon'"
            ],
            "arguments": {
                "argument": [
                    "_Taxon"
                ]
            }
        },
        "Definition.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "DefinitionType"
                ],
                "arguments": [
                    "Iterable[Union[(str, _Taxon)]]"
                ]
            }
        },
        "Definition.serialize": {
            "name": "serialize",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Definition.unserialize": {
            "name": "unserialize",
            "location": 44,
            "return": [
                "'Definition'"
            ],
            "arguments": {
                "cls": [],
                "serialized_str": [
                    "str"
                ]
            }
        },
        "Definition.__repr__": {
            "name": "__repr__",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__str__": {
            "name": "__str__",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Branch.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "anchor": [
                    "_Taxon"
                ]
            }
        },
        "Branch.__str__": {
            "name": "__str__",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Apomorphy.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "apomorphy": [
                    "str"
                ],
                "anchor": [
                    "_Taxon"
                ]
            }
        },
        "Apomorphy.__str__": {
            "name": "__str__",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Other.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "definition": [
                    "str"
                ]
            }
        },
        "Other.__str__": {
            "name": "__str__",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "taxonomy-master/taxonomy/db/derived_data.py": {
        "load_derived_data": {
            "name": "load_derived_data",
            "location": 149,
            "return": [
                "DerivedData"
            ],
            "arguments": {}
        },
        "write_derived_data": {
            "name": "write_derived_data",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "DerivedData"
                ]
            }
        },
        "load_cached_data": {
            "name": "load_cached_data",
            "location": 163,
            "return": [
                "CachedData"
            ],
            "arguments": {}
        },
        "write_cached_data": {
            "name": "write_cached_data",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "CachedData"
                ]
            }
        },
        "SingleComputeFunc.__call__": {
            "name": "__call__",
            "location": 32,
            "return": [
                "T_co"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "'models.base.BaseModel'"
                ]
            }
        },
        "ComputeAllFunc.__call__": {
            "name": "__call__",
            "location": 37,
            "return": [
                "Dict[(int, T)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_LazyTypeArg.__call__": {
            "name": "__call__",
            "location": 42,
            "return": [
                "Type[T_co]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DerivedField.get_value": {
            "name": "get_value",
            "location": 59,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "'models.base.BaseModel'"
                ],
                "force_recompute": [
                    "bool"
                ]
            }
        },
        "DerivedField.get_raw_value": {
            "name": "get_raw_value",
            "location": 77,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "'models.base.BaseModel'"
                ],
                "force_recompute": [
                    "bool"
                ]
            }
        },
        "DerivedField.set_value": {
            "name": "set_value",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "'models.base.BaseModel'"
                ],
                "value": [
                    "T"
                ]
            }
        },
        "DerivedField.serialize": {
            "name": "serialize",
            "location": 101,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "DerivedField.deserialize": {
            "name": "deserialize",
            "location": 110,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "serialized": [
                    "Any"
                ],
                "typ": [
                    "Any"
                ]
            }
        },
        "DerivedField.get_type": {
            "name": "get_type",
            "location": 126,
            "return": [
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DerivedField.compute_and_store_all": {
            "name": "compute_and_store_all",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_cls": [
                    "Type['models.base.BaseModel']"
                ]
            }
        }
    },
    "taxonomy-master/taxonomy/db/detection.py": {
        "_rep": {
            "name": "_rep",
            "location": 34,
            "return": [
                "Callable[([str], str)]"
            ],
            "arguments": {
                "pattern": [
                    "str"
                ],
                "replacement": [
                    "str"
                ]
            }
        },
        "_remove_ending": {
            "name": "_remove_ending",
            "location": 319,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "end": [
                    "str"
                ]
            }
        },
        "detect_stem_and_gender": {
            "name": "detect_stem_and_gender",
            "location": 324,
            "return": [
                "Optional[detection_result]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "taxonomy-master/taxonomy/db/helpers.py": {
        "group_of_rank": {
            "name": "group_of_rank",
            "location": 133,
            "return": [
                "Group"
            ],
            "arguments": {
                "rank": [
                    "Rank"
                ]
            }
        },
        "name_with_suffixes_removed": {
            "name": "name_with_suffixes_removed",
            "location": 146,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "suffix_of_rank": {
            "name": "suffix_of_rank",
            "location": 153,
            "return": [
                "str"
            ],
            "arguments": {
                "rank": [
                    "Rank"
                ]
            }
        },
        "rank_of_string": {
            "name": "rank_of_string",
            "location": 157,
            "return": [
                "Rank"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "root_name_of_name": {
            "name": "root_name_of_name",
            "location": 164,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "rank": [
                    "Rank"
                ]
            }
        },
        "strip_rank": {
            "name": "strip_rank",
            "location": 173,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "rank": [
                    "Rank"
                ],
                "quiet": [
                    "bool"
                ]
            }
        },
        "spg_of_species": {
            "name": "spg_of_species",
            "location": 197,
            "return": [
                "str"
            ],
            "arguments": {
                "species": [
                    "str"
                ]
            }
        },
        "species_of_subspecies": {
            "name": "species_of_subspecies",
            "location": 202,
            "return": [
                "str"
            ],
            "arguments": {
                "ssp": [
                    "str"
                ]
            }
        },
        "is_nominate_subspecies": {
            "name": "is_nominate_subspecies",
            "location": 206,
            "return": [
                "bool"
            ],
            "arguments": {
                "ssp": [
                    "str"
                ]
            }
        },
        "genus_name_of_name": {
            "name": "genus_name_of_name",
            "location": 214,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "remove_null": {
            "name": "remove_null",
            "location": 224,
            "return": [
                "Dict[(_T1, _T2)]"
            ],
            "arguments": {
                "d": [
                    "Mapping[(_T1, Optional[_T2])]"
                ]
            }
        },
        "fix_data": {
            "name": "fix_data",
            "location": 232,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "data": [
                    "str"
                ]
            }
        },
        "convert_gender": {
            "name": "convert_gender",
            "location": 243,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "gender": [
                    "constants.GrammaticalGender"
                ]
            }
        },
        "_canonicalize_gender": {
            "name": "_canonicalize_gender",
            "location": 267,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "standardize_date": {
            "name": "standardize_date",
            "location": 282,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "date": [
                    "str"
                ]
            }
        },
        "standardize_coordinates": {
            "name": "standardize_coordinates",
            "location": 352,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "extract_coordinates": {
            "name": "extract_coordinates",
            "location": 392,
            "return": [
                "Optional[Tuple[(str, str)]]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "clean_text": {
            "name": "clean_text",
            "location": 413,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "unsplit_authors": {
            "name": "unsplit_authors",
            "location": 428,
            "return": [
                "str"
            ],
            "arguments": {
                "authors": [
                    "Sequence[str]"
                ]
            }
        },
        "timer": {
            "name": "timer",
            "location": 442,
            "return": [
                "Iterator[TimeHolder]"
            ],
            "arguments": {
                "label": [
                    "str"
                ]
            }
        },
        "romanize_russian": {
            "name": "romanize_russian",
            "location": 490,
            "return": [
                "str"
            ],
            "arguments": {
                "cyrillic": [
                    "str"
                ]
            }
        },
        "extract_sources": {
            "name": "extract_sources",
            "location": 518,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "_clean_up_word": {
            "name": "_clean_up_word",
            "location": 523,
            "return": [
                "str"
            ],
            "arguments": {
                "word": [
                    "str"
                ]
            }
        },
        "simplify_string": {
            "name": "simplify_string",
            "location": 529,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "clean_words": [
                    "bool"
                ]
            }
        },
        "is_clean_string": {
            "name": "is_clean_string",
            "location": 546,
            "return": [
                "bool"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "clean_string": {
            "name": "clean_string",
            "location": 550,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "clean_strings_recursively": {
            "name": "clean_strings_recursively",
            "location": 570,
            "return": [
                "T"
            ],
            "arguments": {
                "obj": [
                    "T"
                ]
            }
        },
        "to_int": {
            "name": "to_int",
            "location": 587,
            "return": [
                "int"
            ],
            "arguments": {
                "string": [
                    "Optional[str]"
                ]
            }
        },
        "strip_rank.strip_of_suffix": {
            "name": "strip_of_suffix",
            "location": 174,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "suffix": [
                    "str"
                ]
            }
        },
        "TimeHolder.__init__": {
            "name": "__init__",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str"
                ]
            }
        }
    },
    "taxonomy-master/taxonomy/db/openlibrary.py": {
        "get_json": {
            "name": "get_json",
            "location": 10,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "api": [
                    "str"
                ],
                "identifier": [
                    "str"
                ]
            }
        },
        "get_author": {
            "name": "get_author",
            "location": 22,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "identifier": [
                    "str"
                ]
            }
        },
        "get_from_isbn": {
            "name": "get_from_isbn",
            "location": 30,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "isbn": [
                    "str"
                ]
            }
        }
    },
    "taxonomy-master/taxonomy/db/test_constants.py": {
        "test_hierarchy": {
            "name": "test_hierarchy",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "taxonomy-master/taxonomy/db/test_helpers.py": {
        "assert_romanizes": {
            "name": "assert_romanizes",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "cyrillic": [
                    "str"
                ],
                "latin": [
                    "str"
                ]
            }
        },
        "test_romanize_russian": {
            "name": "test_romanize_russian",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "taxonomy-master/taxonomy/db/__init__.py": {},
    "taxonomy-master/taxonomy/db/models/article.py": {
        "register_cite_function": {
            "name": "register_cite_function",
            "location": 1079,
            "return": [
                "Callable[([Citer], Citer)]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "get_doi_information": {
            "name": "get_doi_information",
            "location": 1112,
            "return": [
                "Optional[BeautifulSoup]"
            ],
            "arguments": {
                "doi": [
                    "str"
                ]
            }
        },
        "expand_doi": {
            "name": "expand_doi",
            "location": 1131,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "doi": [
                    "str"
                ]
            }
        },
        "Article.place_of_publication": {
            "name": "place_of_publication",
            "location": 271,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.institution": {
            "name": "institution",
            "location": 280,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.add_validity_check": {
            "name": "add_validity_check",
            "location": 292,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "query": [
                    "Any"
                ]
            }
        },
        "Article.should_skip": {
            "name": "should_skip",
            "location": 297,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.edit": {
            "name": "edit",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.bfind": {
            "name": "bfind",
            "location": 304,
            "return": [
                "List['Article']"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Article.get_adt_callbacks": {
            "name": "get_adt_callbacks",
            "location": 316,
            "return": [
                "getinput.CallbackMap"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.modernize_in_press": {
            "name": "modernize_in_press",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.get_value_to_show_for_field": {
            "name": "get_value_to_show_for_field",
            "location": 341,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Optional[str]"
                ]
            }
        },
        "Article.get_value_for_field": {
            "name": "get_value_for_field",
            "location": 346,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ],
                "default": [
                    "Optional[str]"
                ]
            }
        },
        "Article.get_required_fields": {
            "name": "get_required_fields",
            "location": 352,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.get_completers_for_adt_field": {
            "name": "get_completers_for_adt_field",
            "location": 363,
            "return": [
                "getinput.CompleterMap"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ]
            }
        },
        "Article.trymanual": {
            "name": "trymanual",
            "location": 383,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.get_path": {
            "name": "get_path",
            "location": 391,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.path_list": {
            "name": "path_list",
            "location": 398,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.relative_path": {
            "name": "relative_path",
            "location": 404,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.openf": {
            "name": "openf",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "place": [
                    "str"
                ]
            }
        },
        "Article.isfile": {
            "name": "isfile",
            "location": 429,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.isnofile": {
            "name": "isnofile",
            "location": 437,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.issupplement": {
            "name": "issupplement",
            "location": 440,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.isredirect": {
            "name": "isredirect",
            "location": 443,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.numeric_year": {
            "name": "numeric_year",
            "location": 446,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.numeric_start_page": {
            "name": "numeric_start_page",
            "location": 449,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.ispdf": {
            "name": "ispdf",
            "location": 452,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.is_page_in_range": {
            "name": "is_page_in_range",
            "location": 455,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "int"
                ]
            }
        },
        "Article.getpdfcontent": {
            "name": "getpdfcontent",
            "location": 473,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.get_jstor_data": {
            "name": "get_jstor_data",
            "location": 481,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.clean_up_author": {
            "name": "clean_up_author",
            "location": 578,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "family_name": [
                    "str"
                ],
                "names": [
                    "Sequence[str]"
                ]
            }
        },
        "Article.unspace_initials": {
            "name": "unspace_initials",
            "location": 586,
            "return": [
                "str"
            ],
            "arguments": {
                "authority": [
                    "str"
                ]
            }
        },
        "Article.get_authors": {
            "name": "get_authors",
            "location": 591,
            "return": [
                "List[Person]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.getAuthors": {
            "name": "getAuthors",
            "location": 598,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "separator": [
                    "str"
                ],
                "lastSeparator": [
                    "Optional[str]"
                ],
                "separatorWithTwoAuthors": [
                    "Optional[str]"
                ],
                "capitalizeNames": [
                    "bool"
                ],
                "spaceInitials": [
                    "bool"
                ],
                "initialsBeforeName": [
                    "bool"
                ],
                "firstInitialsBeforeName": [
                    "bool"
                ],
                "includeInitials": [
                    "bool"
                ]
            }
        },
        "Article.explode_authors": {
            "name": "explode_authors",
            "location": 651,
            "return": [
                "List[Sequence[str]]"
            ],
            "arguments": {
                "input": [
                    "str"
                ]
            }
        },
        "Article.reverse_authors": {
            "name": "reverse_authors",
            "location": 663,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.countAuthors": {
            "name": "countAuthors",
            "location": 670,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.getPaleoBioDBAuthors": {
            "name": "getPaleoBioDBAuthors",
            "location": 673,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.taxonomicAuthority": {
            "name": "taxonomicAuthority",
            "location": 702,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.author_set": {
            "name": "author_set",
            "location": 705,
            "return": [
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.add_comment": {
            "name": "add_comment",
            "location": 708,
            "return": [
                "Optional['ArticleComment']"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "Optional[ArticleCommentKind]"
                ],
                "text": [
                    "Optional[str]"
                ]
            }
        },
        "Article.add_tag": {
            "name": "add_tag",
            "location": 713,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "adt.ADT"
                ]
            }
        },
        "Article.has_tag": {
            "name": "has_tag",
            "location": 719,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tag_cls": [
                    "Type[adt.ADT]"
                ]
            }
        },
        "Article.geturl": {
            "name": "geturl",
            "location": 726,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.openurl": {
            "name": "openurl",
            "location": 744,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.getIdentifier": {
            "name": "getIdentifier",
            "location": 754,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "Type[adt.ADT]"
                ]
            }
        },
        "Article.getEnclosing": {
            "name": "getEnclosing",
            "location": 759,
            "return": [
                "Optional[T]"
            ],
            "arguments": {
                "self": [
                    "T"
                ]
            }
        },
        "Article.concise_markdown_link": {
            "name": "concise_markdown_link",
            "location": 765,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.markdown_link": {
            "name": "markdown_link",
            "location": 774,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.cite": {
            "name": "cite",
            "location": 778,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "citetype": [
                    "str"
                ]
            }
        },
        "Article.finddoi": {
            "name": "finddoi",
            "location": 786,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.print_doi_information": {
            "name": "print_doi_information",
            "location": 821,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.expand_doi": {
            "name": "expand_doi",
            "location": 828,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "overwrite": [
                    "bool"
                ],
                "verbose": [
                    "bool"
                ],
                "set_fields": [
                    "bool"
                ]
            }
        },
        "Article.set_multi": {
            "name": "set_multi",
            "location": 858,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Article.set_from_raw": {
            "name": "set_from_raw",
            "location": 862,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "Article.set_author_tags_from_raw": {
            "name": "set_author_tags_from_raw",
            "location": 870,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "confirm_creation": [
                    "bool"
                ],
                "confirm_replacement": [
                    "bool"
                ]
            }
        },
        "Article.specify_authors": {
            "name": "specify_authors",
            "location": 903,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "Optional[PersonLevel]"
                ],
                "should_open": [
                    "bool"
                ]
            }
        },
        "Article.recompute_authors_from_jstor": {
            "name": "recompute_authors_from_jstor",
            "location": 931,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "confirm": [
                    "bool"
                ],
                "force": [
                    "bool"
                ]
            }
        },
        "Article.recompute_authors_from_doi": {
            "name": "recompute_authors_from_doi",
            "location": 944,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "confirm": [
                    "bool"
                ],
                "force": [
                    "bool"
                ]
            }
        },
        "Article._recompute_authors_from_data": {
            "name": "_recompute_authors_from_data",
            "location": 957,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[(str, Any)]"
                ],
                "confirm": [
                    "bool"
                ]
            }
        },
        "Article.recompute_all_incomplete_authors": {
            "name": "recompute_all_incomplete_authors",
            "location": 971,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "limit": [
                    "Optional[int]"
                ]
            }
        },
        "Article.display": {
            "name": "display",
            "location": 986,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "full": [
                    "bool"
                ]
            }
        },
        "Article.display_names": {
            "name": "display_names",
            "location": 989,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "full": [
                    "bool"
                ],
                "organized": [
                    "bool"
                ]
            }
        },
        "Article.display_type_localities": {
            "name": "display_type_localities",
            "location": 1004,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.__str__": {
            "name": "__str__",
            "location": 1019,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.__repr__": {
            "name": "__repr__",
            "location": 1022,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArticleComment.make": {
            "name": "make",
            "location": 1038,
            "return": [
                "'ArticleComment'"
            ],
            "arguments": {
                "cls": [],
                "article": [
                    "Article"
                ],
                "kind": [
                    "ArticleCommentKind"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "ArticleComment.create_interactively": {
            "name": "create_interactively",
            "location": 1046,
            "return": [
                "'ArticleComment'"
            ],
            "arguments": {
                "cls": [],
                "article": [
                    "Optional[Article]"
                ],
                "kind": [
                    "Optional[ArticleCommentKind]"
                ],
                "text": [
                    "Optional[str]"
                ]
            }
        },
        "ArticleComment.get_description": {
            "name": "get_description",
            "location": 1067,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "register_cite_function.decorator": {
            "name": "decorator",
            "location": 1080,
            "return": [
                "Citer"
            ],
            "arguments": {
                "citer": [
                    "Citer"
                ]
            }
        },
        "Article.explode_authors.map_fn": {
            "name": "map_fn",
            "location": 654,
            "return": [
                "Sequence[str]"
            ],
            "arguments": {
                "author": [
                    "str"
                ]
            }
        },
        "Article.getPaleoBioDBAuthors.author_fn": {
            "name": "author_fn",
            "location": 676,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "author": [
                    "Person"
                ]
            }
        }
    },
    "taxonomy-master/taxonomy/db/models/base.py": {
        "_descriptor_set": {
            "name": "_descriptor_set",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [
                    "FieldAccessor"
                ],
                "instance": [
                    "Model"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "get_completer": {
            "name": "get_completer",
            "location": 1057,
            "return": [
                "Callable[([str, Optional[str]], Optional[ModelT])]"
            ],
            "arguments": {
                "cls": [
                    "Type[ModelT]"
                ],
                "field": [
                    "Optional[str]"
                ]
            }
        },
        "get_str_completer": {
            "name": "get_str_completer",
            "location": 1072,
            "return": [
                "Callable[([str, Optional[str]], Optional[str])]"
            ],
            "arguments": {
                "cls": [
                    "Type[Model]"
                ],
                "field": [
                    "Optional[str]"
                ]
            }
        },
        "get_tag_based_derived_field": {
            "name": "get_tag_based_derived_field",
            "location": 1081,
            "return": [
                "derived_data.DerivedField[List[Any]]"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "lazy_model_cls": [
                    "Callable[([], Type[BaseModel])]"
                ],
                "tag_field": [
                    "str"
                ],
                "lazy_tag_cls": [
                    "Callable[([], Type[adt.ADT])]"
                ],
                "field_index": [
                    "int"
                ],
                "skip_filter": [
                    "bool"
                ]
            }
        },
        "_FieldEditor.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ]
            }
        },
        "_FieldEditor.__get__": {
            "name": "__get__",
            "location": 67,
            "return": [
                "'_FieldEditor'"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "instance_type": [
                    "Any"
                ]
            }
        },
        "_FieldEditor.__getattr__": {
            "name": "__getattr__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ]
            }
        },
        "_FieldEditor.__dir__": {
            "name": "__dir__",
            "location": 77,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseModel.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.create": {
            "name": "create",
            "location": 131,
            "return": [
                "ModelT"
            ],
            "arguments": {
                "cls": [
                    "Type[ModelT]"
                ]
            }
        },
        "BaseModel.lint_all": {
            "name": "lint_all",
            "location": 142,
            "return": [
                "List[ModelT]"
            ],
            "arguments": {
                "cls": [
                    "Type[ModelT]"
                ]
            }
        },
        "BaseModel.lint": {
            "name": "lint",
            "location": 149,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.prepared": {
            "name": "prepared",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.save": {
            "name": "save",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.dump_data": {
            "name": "dump_data",
            "location": 163,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.full_data": {
            "name": "full_data",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.display": {
            "name": "display",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.get_derived_field": {
            "name": "get_derived_field",
            "location": 186,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "force_recompute": [
                    "bool"
                ]
            }
        },
        "BaseModel.get_raw_derived_field": {
            "name": "get_raw_derived_field",
            "location": 191,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "force_recompute": [
                    "bool"
                ]
            }
        },
        "BaseModel.set_derived_field": {
            "name": "set_derived_field",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "BaseModel.get_raw_tags_field": {
            "name": "get_raw_tags_field",
            "location": 199,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "BaseModel.compute_all_derived_fields": {
            "name": "compute_all_derived_fields",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseModel.sort_key": {
            "name": "sort_key",
            "location": 230,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.get_url": {
            "name": "get_url",
            "location": 236,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.select_for_field": {
            "name": "select_for_field",
            "location": 240,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "field": [
                    "Optional[str]"
                ]
            }
        },
        "BaseModel.get_value_to_show_for_field": {
            "name": "get_value_to_show_for_field",
            "location": 247,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Optional[str]"
                ]
            }
        },
        "BaseModel.s": {
            "name": "s",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.__hash__": {
            "name": "__hash__",
            "location": 266,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.__lt__": {
            "name": "__lt__",
            "location": 269,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "BaseModel.__del__": {
            "name": "__del__",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.fields": {
            "name": "fields",
            "location": 282,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseModel.short_description": {
            "name": "short_description",
            "location": 285,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.__str__": {
            "name": "__str__",
            "location": 288,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.__repr__": {
            "name": "__repr__",
            "location": 294,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel._merge_fields": {
            "name": "_merge_fields",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [
                    "ModelT"
                ],
                "into": [
                    "ModelT"
                ],
                "exclude": [
                    "Container[peewee.Field]"
                ]
            }
        },
        "BaseModel.mlist": {
            "name": "mlist",
            "location": 322,
            "return": [
                "Dict[(Any, int)]"
            ],
            "arguments": {
                "cls": [],
                "attribute": [
                    "str"
                ]
            }
        },
        "BaseModel.bfind": {
            "name": "bfind",
            "location": 331,
            "return": [
                "List[ModelT]"
            ],
            "arguments": {
                "cls": [
                    "Type[ModelT]"
                ]
            }
        },
        "BaseModel.select_one": {
            "name": "select_one",
            "location": 366,
            "return": [
                "Optional[ModelT]"
            ],
            "arguments": {
                "cls": [
                    "Type[ModelT]"
                ]
            }
        },
        "BaseModel.reload": {
            "name": "reload",
            "location": 378,
            "return": [
                "ModelT"
            ],
            "arguments": {
                "self": [
                    "ModelT"
                ]
            }
        },
        "BaseModel.serialize": {
            "name": "serialize",
            "location": 381,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.unserialize": {
            "name": "unserialize",
            "location": 385,
            "return": [
                "ModelT"
            ],
            "arguments": {
                "cls": [
                    "Type[ModelT]"
                ],
                "data": [
                    "int"
                ]
            }
        },
        "BaseModel.select_valid": {
            "name": "select_valid",
            "location": 389,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseModel.add_validity_check": {
            "name": "add_validity_check",
            "location": 394,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "query": [
                    "Any"
                ]
            }
        },
        "BaseModel.should_skip": {
            "name": "should_skip",
            "location": 398,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.getter": {
            "name": "getter",
            "location": 402,
            "return": [
                "'_NameGetter[ModelT]'"
            ],
            "arguments": {
                "cls": [
                    "Type[ModelT]"
                ],
                "attr": [
                    "Optional[str]"
                ]
            }
        },
        "BaseModel.get_one_by": {
            "name": "get_one_by",
            "location": 412,
            "return": [
                "Optional[ModelT]"
            ],
            "arguments": {
                "cls": [
                    "Type[ModelT]"
                ],
                "field": [
                    "Optional[str]"
                ]
            }
        },
        "BaseModel.get_value_for_field": {
            "name": "get_value_for_field",
            "location": 421,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ],
                "default": [
                    "Optional[str]"
                ]
            }
        },
        "BaseModel.get_interactive_creators": {
            "name": "get_interactive_creators",
            "location": 484,
            "return": [
                "Dict[(str, Callable[([], Any)])]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseModel.get_adt_callbacks": {
            "name": "get_adt_callbacks",
            "location": 487,
            "return": [
                "getinput.CallbackMap"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.call": {
            "name": "call",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel._fill_param": {
            "name": "_fill_param",
            "location": 525,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "param": [
                    "inspect.Parameter"
                ]
            }
        },
        "BaseModel._get_possible_callable": {
            "name": "_get_possible_callable",
            "location": 562,
            "return": [
                "Optional[Tuple[(Callable[(..., Any)], inspect.Signature)]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "BaseModel.edit_sibling": {
            "name": "edit_sibling",
            "location": 579,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.edit_sibling_by_field": {
            "name": "edit_sibling_by_field",
            "location": 586,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.edit_foreign": {
            "name": "edit_foreign",
            "location": 601,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.empty": {
            "name": "empty",
            "location": 622,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.edit": {
            "name": "edit",
            "location": 639,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.get_completers_for_adt_field": {
            "name": "get_completers_for_adt_field",
            "location": 647,
            "return": [
                "getinput.CompleterMap"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ]
            }
        },
        "BaseModel.get_value_for_foreign_key_field": {
            "name": "get_value_for_foreign_key_field",
            "location": 650,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ]
            }
        },
        "BaseModel.get_value_for_foreign_key_field_on_class": {
            "name": "get_value_for_foreign_key_field_on_class",
            "location": 664,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "field": [
                    "str"
                ]
            }
        },
        "BaseModel.get_value_for_foreign_class": {
            "name": "get_value_for_foreign_class",
            "location": 682,
            "return": [
                "Any"
            ],
            "arguments": {
                "label": [
                    "str"
                ],
                "foreign_cls": [
                    "Type['BaseModel']"
                ]
            }
        },
        "BaseModel.fill_field": {
            "name": "fill_field",
            "location": 727,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ]
            }
        },
        "BaseModel.get_field_names": {
            "name": "get_field_names",
            "location": 732,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseModel.get_required_fields": {
            "name": "get_required_fields",
            "location": 735,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.get_empty_required_fields": {
            "name": "get_empty_required_fields",
            "location": 738,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.get_deprecated_fields": {
            "name": "get_deprecated_fields",
            "location": 748,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.get_nonempty_deprecated_fields": {
            "name": "get_nonempty_deprecated_fields",
            "location": 751,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.fill_required_fields": {
            "name": "fill_required_fields",
            "location": 758,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "skip_fields": [
                    "Container[str]"
                ]
            }
        },
        "BaseModel.get_tags": {
            "name": "get_tags",
            "location": 767,
            "return": [
                "Iterable[adt.ADT]"
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "Optional[Sequence[adt.ADT]]"
                ],
                "tag_cls": [
                    "Type[adt.ADT]"
                ]
            }
        },
        "BaseModel.add_to_history": {
            "name": "add_to_history",
            "location": 776,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Optional[str]"
                ]
            }
        },
        "BaseModel.create_interactively": {
            "name": "create_interactively",
            "location": 782,
            "return": [
                "Optional[ModelT]"
            ],
            "arguments": {
                "cls": [
                    "Type[ModelT]"
                ]
            }
        },
        "_EnumFieldDescriptor.__init__": {
            "name": "__init__",
            "location": 792,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Type[BaseModel]"
                ],
                "field": [
                    "peewee.Field"
                ],
                "name": [
                    "str"
                ],
                "enum_cls": [
                    "Type[EnumT]"
                ]
            }
        },
        "_EnumFieldDescriptor.__get__": {
            "name": "__get__",
            "location": 802,
            "return": [
                "EnumT"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "instance_type": [
                    "Any"
                ]
            }
        },
        "_EnumFieldDescriptor.__set__": {
            "name": "__set__",
            "location": 808,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "value": [
                    "Union[(int, EnumT)]"
                ]
            }
        },
        "EnumField.__init__": {
            "name": "__init__",
            "location": 815,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "enum_cls": [
                    "Type[enum.Enum]"
                ]
            }
        },
        "_ADTDescriptor.__init__": {
            "name": "__init__",
            "location": 822,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Type[BaseModel]"
                ],
                "field": [
                    "peewee.Field"
                ],
                "name": [
                    "str"
                ],
                "adt_cls": [
                    "Any"
                ]
            }
        },
        "_ADTDescriptor.__get__": {
            "name": "__get__",
            "location": 828,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "instance_type": [
                    "Any"
                ]
            }
        },
        "_ADTDescriptor.__set__": {
            "name": "__set__",
            "location": 837,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "ADTField.__init__": {
            "name": "__init__",
            "location": 849,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "adt_cls": [
                    "Callable[([], Type[Any])]"
                ]
            }
        },
        "ADTField.add_to_class": {
            "name": "add_to_class",
            "location": 854,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_class": [
                    "Type[BaseModel]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "ADTField.get_adt": {
            "name": "get_adt",
            "location": 861,
            "return": [
                "Type[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_NameGetter.__init__": {
            "name": "__init__",
            "location": 866,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type[ModelT]"
                ],
                "field": [
                    "Optional[str]"
                ]
            }
        },
        "_NameGetter.__repr__": {
            "name": "__repr__",
            "location": 877,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_NameGetter.__dir__": {
            "name": "__dir__",
            "location": 880,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_NameGetter.__getattr__": {
            "name": "__getattr__",
            "location": 886,
            "return": [
                "Optional[ModelT]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "_NameGetter.__call__": {
            "name": "__call__",
            "location": 889,
            "return": [
                "Optional[ModelT]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]"
                ]
            }
        },
        "_NameGetter.__contains__": {
            "name": "__contains__",
            "location": 895,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "_NameGetter.get_or_choose": {
            "name": "get_or_choose",
            "location": 900,
            "return": [
                "ModelT"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "_NameGetter.clear_cache": {
            "name": "clear_cache",
            "location": 917,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_NameGetter.rewarm_cache": {
            "name": "rewarm_cache",
            "location": 924,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_NameGetter.add_name": {
            "name": "add_name",
            "location": 928,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nam": [
                    "ModelT"
                ]
            }
        },
        "_NameGetter._cache_key": {
            "name": "_cache_key",
            "location": 932,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_NameGetter._add_obj": {
            "name": "_add_obj",
            "location": 935,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "ModelT"
                ]
            }
        },
        "_NameGetter.get_one_key": {
            "name": "get_one_key",
            "location": 947,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "prompt": [
                    "str"
                ]
            }
        },
        "_NameGetter.get_one": {
            "name": "get_one",
            "location": 970,
            "return": [
                "Optional[ModelT]"
            ],
            "arguments": {
                "self": [],
                "prompt": [
                    "str"
                ]
            }
        },
        "_NameGetter._get_data": {
            "name": "_get_data",
            "location": 1012,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_NameGetter._get_from_key": {
            "name": "_get_from_key",
            "location": 1017,
            "return": [
                "Optional[ModelT]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "_NameGetter.get_and_edit": {
            "name": "get_and_edit",
            "location": 1028,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_NameGetter.get_all": {
            "name": "get_all",
            "location": 1036,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_NameGetter._warm_cache": {
            "name": "_warm_cache",
            "location": 1041,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "get_completer.completer": {
            "name": "completer",
            "location": 1060,
            "return": [
                "Any"
            ],
            "arguments": {
                "prompt": [
                    "str"
                ],
                "default": [
                    "Any"
                ]
            }
        },
        "get_str_completer.completer": {
            "name": "completer",
            "location": 1075,
            "return": [
                "Any"
            ],
            "arguments": {
                "prompt": [
                    "str"
                ],
                "default": [
                    "Optional[str]"
                ]
            }
        },
        "get_tag_based_derived_field.compute_all": {
            "name": "compute_all",
            "location": 1089,
            "return": [
                "Dict[(int, List[BaseModel])]"
            ],
            "arguments": {}
        },
        "BaseModel.get_adt_callbacks.callback": {
            "name": "callback",
            "location": 488,
            "return": [
                "Callable[([], None)]"
            ],
            "arguments": {
                "field": [
                    "str"
                ]
            }
        },
        "BaseModel.get_value_for_field.get_existing": {
            "name": "get_existing",
            "location": 430,
            "return": [
                "List[getinput.ADTOrInstance]"
            ],
            "arguments": {}
        },
        "BaseModel.get_value_for_field.set_existing": {
            "name": "set_existing",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "adts": [
                    "Tuple[(getinput.ADTOrInstance, ...)]"
                ]
            }
        }
    },
    "taxonomy-master/taxonomy/db/models/book.py": {
        "sort_key": {
            "name": "sort_key",
            "location": 201,
            "return": [
                "Tuple[(str, ...)]"
            ],
            "arguments": {
                "book": [
                    "Book"
                ]
            }
        },
        "print_prefix": {
            "name": "print_prefix",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "prefix": [
                    "str"
                ]
            }
        },
        "Book.create_interactively": {
            "name": "create_interactively",
            "location": 51,
            "return": [
                "Optional['Book']"
            ],
            "arguments": {
                "cls": [],
                "title": [
                    "Optional[str]"
                ]
            }
        },
        "Book.create_many": {
            "name": "create_many",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Book.fix_all": {
            "name": "fix_all",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Book.create_from_isbn": {
            "name": "create_from_isbn",
            "location": 94,
            "return": [
                "Optional['Book']"
            ],
            "arguments": {
                "cls": [],
                "isbn": [
                    "Optional[str]"
                ]
            }
        },
        "Book.expand_open_library_data": {
            "name": "expand_open_library_data",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Book.edit": {
            "name": "edit",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Book.get_authors": {
            "name": "get_authors",
            "location": 145,
            "return": [
                "List[Person]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Book.get_value_for_field": {
            "name": "get_value_for_field",
            "location": 150,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ],
                "default": [
                    "Optional[str]"
                ]
            }
        },
        "Book.get_required_fields": {
            "name": "get_required_fields",
            "location": 156,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Book.numeric_year": {
            "name": "numeric_year",
            "location": 163,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Book.add_tag": {
            "name": "add_tag",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "adt.ADT"
                ]
            }
        },
        "Book.has_tag": {
            "name": "has_tag",
            "location": 172,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tag_cls": [
                    "Type[adt.ADT]"
                ]
            }
        },
        "Book.__repr__": {
            "name": "__repr__",
            "location": 179,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "taxonomy-master/taxonomy/db/models/citations.py": {
        "wikify": {
            "name": "wikify",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "page_range": {
            "name": "page_range",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "article": [
                    "Article"
                ]
            }
        },
        "citepaper": {
            "name": "citepaper",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "article": [
                    "Article"
                ]
            }
        },
        "citenormal": {
            "name": "citenormal",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "article": [
                    "Article"
                ]
            }
        },
        "_citenormal": {
            "name": "_citenormal",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "article": [
                    "Article"
                ]
            }
        },
        "citelemurnews": {
            "name": "citelemurnews",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "article": [
                    "Article"
                ]
            }
        },
        "citebzn": {
            "name": "citebzn",
            "location": 146,
            "return": [
                "str"
            ],
            "arguments": {
                "article": [
                    "Article"
                ]
            }
        },
        "citejhe": {
            "name": "citejhe",
            "location": 187,
            "return": [
                "str"
            ],
            "arguments": {
                "article": [
                    "Article"
                ]
            }
        },
        "citepalaeontology": {
            "name": "citepalaeontology",
            "location": 229,
            "return": [
                "str"
            ],
            "arguments": {
                "article": [
                    "Article"
                ]
            }
        },
        "citejpal": {
            "name": "citejpal",
            "location": 278,
            "return": [
                "str"
            ],
            "arguments": {
                "article": [
                    "Article"
                ]
            }
        },
        "citepalevol": {
            "name": "citepalevol",
            "location": 332,
            "return": [
                "str"
            ],
            "arguments": {
                "article": [
                    "Article"
                ]
            }
        },
        "citejvp": {
            "name": "citejvp",
            "location": 378,
            "return": [
                "str"
            ],
            "arguments": {
                "article": [
                    "Article"
                ]
            }
        },
        "citebibtex": {
            "name": "citebibtex",
            "location": 431,
            "return": [
                "str"
            ],
            "arguments": {
                "article": [
                    "Article"
                ]
            }
        },
        "citezootaxa": {
            "name": "citezootaxa",
            "location": 484,
            "return": [
                "str"
            ],
            "arguments": {
                "article": [
                    "Article"
                ]
            }
        },
        "citewp": {
            "name": "citewp",
            "location": 517,
            "return": [
                "str"
            ],
            "arguments": {
                "article": [
                    "Article"
                ]
            }
        },
        "citebibtex.add": {
            "name": "add",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "value": [
                    "Optional[str]"
                ],
                "mandatory": [
                    "bool"
                ]
            }
        }
    },
    "taxonomy-master/taxonomy/db/models/citation_group.py": {
        "CitationGroup.add_validity_check": {
            "name": "add_validity_check",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "query": [
                    "Any"
                ]
            }
        },
        "CitationGroup.should_skip": {
            "name": "should_skip",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CitationGroup.create_interactively": {
            "name": "create_interactively",
            "location": 39,
            "return": [
                "'CitationGroup'"
            ],
            "arguments": {
                "cls": [],
                "name": [
                    "Optional[str]"
                ]
            }
        },
        "CitationGroup.get_or_create": {
            "name": "get_or_create",
            "location": 49,
            "return": [
                "Optional['CitationGroup']"
            ],
            "arguments": {
                "cls": [],
                "name": [
                    "str"
                ]
            }
        },
        "CitationGroup.get_or_create_city": {
            "name": "get_or_create_city",
            "location": 57,
            "return": [
                "Optional['CitationGroup']"
            ],
            "arguments": {
                "cls": [],
                "name": [
                    "str"
                ]
            }
        },
        "CitationGroup.get_required_fields": {
            "name": "get_required_fields",
            "location": 64,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CitationGroup.has_tag": {
            "name": "has_tag",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "adt.ADT"
                ]
            }
        },
        "CitationGroup.get_tag": {
            "name": "get_tag",
            "location": 78,
            "return": [
                "Optional[adt.ADT]"
            ],
            "arguments": {
                "self": [],
                "tag_cls": [
                    "Type[adt.ADT]"
                ]
            }
        },
        "CitationGroup.apply_to_patterns": {
            "name": "apply_to_patterns",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CitationGroup.add_for_pattern": {
            "name": "add_for_pattern",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str"
                ]
            }
        },
        "CitationGroup.for_years": {
            "name": "for_years",
            "location": 105,
            "return": [
                "List['models.Name']"
            ],
            "arguments": {
                "self": [],
                "start_year": [
                    "int"
                ],
                "end_year": [
                    "Optional[int]"
                ],
                "author": [
                    "Optional[str]"
                ],
                "include_articles": [
                    "bool"
                ]
            }
        },
        "CitationGroup.display": {
            "name": "display",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "depth": [
                    "int"
                ],
                "full": [
                    "bool"
                ],
                "include_articles": [
                    "bool"
                ]
            }
        },
        "CitationGroup.count_and_range": {
            "name": "count_and_range",
            "location": 160,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "objs": [
                    "List[Any]"
                ]
            }
        },
        "CitationGroup.delete": {
            "name": "delete",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CitationGroup.merge": {
            "name": "merge",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'CitationGroup'"
                ],
                "series": [
                    "Optional[str]"
                ]
            }
        },
        "CitationGroup.get_books": {
            "name": "get_books",
            "location": 203,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CitationGroup.get_articles": {
            "name": "get_articles",
            "location": 206,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CitationGroup.get_names": {
            "name": "get_names",
            "location": 211,
            "return": [
                "List['models.Name']"
            ],
            "arguments": {
                "self": []
            }
        },
        "CitationGroup.display_organized": {
            "name": "display_organized",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "depth": [
                    "int"
                ]
            }
        },
        "CitationGroup._display_nams": {
            "name": "_display_nams",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nams": [
                    "Iterable['models.Name']"
                ],
                "depth": [
                    "int"
                ]
            }
        },
        "CitationGroup.__repr__": {
            "name": "__repr__",
            "location": 226,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CitationGroupPattern.make": {
            "name": "make",
            "location": 241,
            "return": [
                "'CitationGroupPattern'"
            ],
            "arguments": {
                "cls": [],
                "pattern": [
                    "str"
                ],
                "citation_group": [
                    "CitationGroup"
                ]
            }
        },
        "CitationGroup.for_years.condition": {
            "name": "condition",
            "location": 112,
            "return": [
                "bool"
            ],
            "arguments": {
                "year": [
                    "int"
                ]
            }
        }
    },
    "taxonomy-master/taxonomy/db/models/collection.py": {
        "Collection.__repr__": {
            "name": "__repr__",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.by_label": {
            "name": "by_label",
            "location": 57,
            "return": [
                "'Collection'"
            ],
            "arguments": {
                "cls": [],
                "label": [
                    "str"
                ]
            }
        },
        "Collection.get_or_create": {
            "name": "get_or_create",
            "location": 65,
            "return": [
                "'Collection'"
            ],
            "arguments": {
                "cls": [],
                "label": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "location": [
                    "Region"
                ],
                "comment": [
                    "Optional[str]"
                ]
            }
        },
        "Collection.get_required_fields": {
            "name": "get_required_fields",
            "location": 75,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.create_interactively": {
            "name": "create_interactively",
            "location": 79,
            "return": [
                "ModelT"
            ],
            "arguments": {
                "cls": [
                    "Type[ModelT]"
                ],
                "label": [
                    "Optional[str]"
                ],
                "name": [
                    "Optional[str]"
                ],
                "location": [
                    "Optional[Region]"
                ]
            }
        },
        "Collection.display": {
            "name": "display",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "full": [
                    "bool"
                ],
                "depth": [
                    "int"
                ],
                "organized": [
                    "bool"
                ]
            }
        },
        "Collection.get_partial": {
            "name": "get_partial",
            "location": 123,
            "return": [
                "Tuple[(List['models.name.Name'], List['models.name.Name'])]"
            ],
            "arguments": {
                "self": [],
                "display": [
                    "bool"
                ]
            }
        },
        "Collection.merge": {
            "name": "merge",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'Collection'"
                ]
            }
        }
    },
    "taxonomy-master/taxonomy/db/models/location.py": {
        "Location.add_validity_check": {
            "name": "add_validity_check",
            "location": 57,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "query": [
                    "Any"
                ]
            }
        },
        "Location.should_skip": {
            "name": "should_skip",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Location.make": {
            "name": "make",
            "location": 64,
            "return": [
                "'Location'"
            ],
            "arguments": {
                "cls": [],
                "name": [
                    "str"
                ],
                "region": [
                    "Region"
                ],
                "period": [
                    "Period"
                ],
                "comment": [
                    "Optional[str]"
                ],
                "stratigraphic_unit": [
                    "Optional[StratigraphicUnit]"
                ]
            }
        },
        "Location.create_interactively": {
            "name": "create_interactively",
            "location": 82,
            "return": [
                "'Location'"
            ],
            "arguments": {
                "cls": [],
                "name": [
                    "Optional[str]"
                ],
                "region": [
                    "Optional[Region]"
                ],
                "period": [
                    "Optional[Period]"
                ],
                "comment": [
                    "Optional[str]"
                ]
            }
        },
        "Location.__repr__": {
            "name": "__repr__",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Location.sort_key": {
            "name": "sort_key",
            "location": 124,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Location.display": {
            "name": "display",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "full": [
                    "bool"
                ],
                "organized": [
                    "bool"
                ]
            }
        },
        "Location.merge": {
            "name": "merge",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional['Location']"
                ]
            }
        },
        "Location.add_alias": {
            "name": "add_alias",
            "location": 170,
            "return": [
                "Optional['Location']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Location.get_adt_callbacks": {
            "name": "get_adt_callbacks",
            "location": 178,
            "return": [
                "getinput.CallbackMap"
            ],
            "arguments": {
                "self": []
            }
        },
        "Location.edit": {
            "name": "edit",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Location.reassign_references": {
            "name": "reassign_references",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'Location'"
                ]
            }
        },
        "Location.set_period": {
            "name": "set_period",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "period": [
                    "Optional[Period]"
                ]
            }
        },
        "Location.fill_field": {
            "name": "fill_field",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ]
            }
        },
        "Location.get_required_fields": {
            "name": "get_required_fields",
            "location": 207,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Location.has_tag": {
            "name": "has_tag",
            "location": 214,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tag_cls": [
                    "Union[(adt.ADT, Type[adt.ADT])]"
                ]
            }
        },
        "Location.add_tag": {
            "name": "add_tag",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "adt.ADT"
                ]
            }
        },
        "Location.is_in_region": {
            "name": "is_in_region",
            "location": 227,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Region"
                ]
            }
        },
        "Location.is_empty": {
            "name": "is_empty",
            "location": 235,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Location.lint": {
            "name": "lint",
            "location": 242,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Location.fix_references": {
            "name": "fix_references",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Location.get_or_create_general": {
            "name": "get_or_create_general",
            "location": 258,
            "return": [
                "'Location'"
            ],
            "arguments": {
                "cls": [],
                "region": [
                    "Region"
                ],
                "period": [
                    "Period"
                ]
            }
        },
        "Location.autodelete": {
            "name": "autodelete",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "dry_run": [
                    "bool"
                ]
            }
        },
        "Location.maybe_autodelete": {
            "name": "maybe_autodelete",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dry_run": [
                    "bool"
                ]
            }
        },
        "Location.get_interactive_creators": {
            "name": "get_interactive_creators",
            "location": 301,
            "return": [
                "Dict[(str, Callable[([], Any)])]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Location.most_common_words": {
            "name": "most_common_words",
            "location": 313,
            "return": [
                "Counter[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Location.get_interactive_creators.callback": {
            "name": "callback",
            "location": 302,
            "return": [
                "Optional[Location]"
            ],
            "arguments": {}
        }
    },
    "taxonomy-master/taxonomy/db/models/name.py": {
        "has_data_from_original": {
            "name": "has_data_from_original",
            "location": 1802,
            "return": [
                "bool"
            ],
            "arguments": {
                "nam": [
                    "Name"
                ]
            }
        },
        "is_valid_page_described": {
            "name": "is_valid_page_described",
            "location": 1817,
            "return": [
                "bool"
            ],
            "arguments": {
                "page_described": [
                    "str"
                ]
            }
        },
        "is_valid_page_described_single": {
            "name": "is_valid_page_described_single",
            "location": 1822,
            "return": [
                "bool"
            ],
            "arguments": {
                "page_described": [
                    "str"
                ]
            }
        },
        "clean_original_name": {
            "name": "clean_original_name",
            "location": 1837,
            "return": [
                "str"
            ],
            "arguments": {
                "original_name": [
                    "str"
                ]
            }
        },
        "write_names": {
            "name": "write_names",
            "location": 1977,
            "return": [
                "None"
            ],
            "arguments": {
                "nams": [
                    "Sequence[Name]"
                ]
            }
        },
        "Name.with_tag_of_type": {
            "name": "with_tag_of_type",
            "location": 241,
            "return": [
                "List['Name']"
            ],
            "arguments": {
                "cls": [],
                "tag_cls": [
                    "Type[adt.ADT]"
                ]
            }
        },
        "Name.add_validity_check": {
            "name": "add_validity_check",
            "location": 252,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "query": [
                    "Any"
                ]
            }
        },
        "Name.should_skip": {
            "name": "should_skip",
            "location": 255,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.get_stem": {
            "name": "get_stem",
            "location": 258,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.definition": {
            "name": "definition",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "defn": [
                    "Definition"
                ]
            }
        },
        "Name.infer_corrected_original_name": {
            "name": "infer_corrected_original_name",
            "location": 278,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "aggressive": [
                    "bool"
                ]
            }
        },
        "Name.get_value_for_field": {
            "name": "get_value_for_field",
            "location": 338,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ],
                "default": [
                    "Optional[str]"
                ]
            }
        },
        "Name.get_adt_callbacks": {
            "name": "get_adt_callbacks",
            "location": 399,
            "return": [
                "getinput.CallbackMap"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.print_fill_data_level": {
            "name": "print_fill_data_level",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.edit": {
            "name": "edit",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name._add_type_identical_callback": {
            "name": "_add_type_identical_callback",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name._from_paper_callback": {
            "name": "_from_paper_callback",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name._add_child_callback": {
            "name": "_add_child_callback",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name._syn_from_paper_callback": {
            "name": "_syn_from_paper_callback",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name._add_syn_callback": {
            "name": "_add_syn_callback",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.add_type_identical": {
            "name": "add_type_identical",
            "location": 452,
            "return": [
                "'Taxon'"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "page_described": [
                    "Union[(None, int, str)]"
                ],
                "locality": [
                    "Optional[Location]"
                ]
            }
        },
        "Name.get_completers_for_adt_field": {
            "name": "get_completers_for_adt_field",
            "location": 485,
            "return": [
                "getinput.CompleterMap"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ]
            }
        },
        "Name.get_empty_required_fields": {
            "name": "get_empty_required_fields",
            "location": 515,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.fill_field_if_empty": {
            "name": "fill_field_if_empty",
            "location": 529,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ]
            }
        },
        "Name.add_additional_data": {
            "name": "add_additional_data",
            "location": 537,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_data": [
                    "str"
                ]
            }
        },
        "Name.add_data": {
            "name": "add_data",
            "location": 546,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ],
                "value": [
                    "Any"
                ],
                "concat_duplicate": [
                    "bool"
                ]
            }
        },
        "Name.get_data": {
            "name": "get_data",
            "location": 560,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ]
            }
        },
        "Name._load_data": {
            "name": "_load_data",
            "location": 564,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.get_tag_target": {
            "name": "get_tag_target",
            "location": 570,
            "return": [
                "Optional['Name']"
            ],
            "arguments": {
                "self": [],
                "tag_cls": [
                    "Type[adt.ADT]"
                ]
            }
        },
        "Name.add_tag": {
            "name": "add_tag",
            "location": 578,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "adt.ADT"
                ]
            }
        },
        "Name.add_type_tag": {
            "name": "add_type_tag",
            "location": 585,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "adt.ADT"
                ]
            }
        },
        "Name.has_type_tag": {
            "name": "has_type_tag",
            "location": 592,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tag_cls": [
                    "Type[adt.ADT]"
                ]
            }
        },
        "Name.map_type_tags": {
            "name": "map_type_tags",
            "location": 599,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "Callable[(['TypeTag'], Optional['TypeTag'])]"
                ]
            }
        },
        "Name.map_type_tags_by_type": {
            "name": "map_type_tags_by_type",
            "location": 610,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "Type[Any]"
                ],
                "fn": [
                    "Callable[([Any], Any)]"
                ]
            }
        },
        "Name.replace_original_citation": {
            "name": "replace_original_citation",
            "location": 624,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_citation": [
                    "Optional[Article]"
                ]
            }
        },
        "Name.add_included": {
            "name": "add_included",
            "location": 641,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "species": [
                    "'Name'"
                ],
                "comment": [
                    "str"
                ]
            }
        },
        "Name.add_static_comment": {
            "name": "add_static_comment",
            "location": 645,
            "return": [
                "'NameComment'"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "constants.CommentKind"
                ],
                "text": [
                    "str"
                ],
                "source": [
                    "Optional[Article]"
                ],
                "page": [
                    "Optional[str]"
                ]
            }
        },
        "Name.add_comment": {
            "name": "add_comment",
            "location": 656,
            "return": [
                "Optional['NameComment']"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "Optional[constants.CommentKind]"
                ],
                "text": [
                    "Optional[str]"
                ],
                "source": [
                    "Optional[Article]"
                ],
                "page": [
                    "Optional[str]"
                ],
                "interactive": [
                    "bool"
                ]
            }
        },
        "Name.add_child_taxon": {
            "name": "add_child_taxon",
            "location": 668,
            "return": [
                "'Taxon'"
            ],
            "arguments": {
                "self": [],
                "rank": [
                    "Rank"
                ],
                "name": [
                    "str"
                ],
                "age": [
                    "Optional[AgeClass]"
                ]
            }
        },
        "Name.add_nomen_nudum": {
            "name": "add_nomen_nudum",
            "location": 673,
            "return": [
                "'Name'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.description": {
            "name": "description",
            "location": 682,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.is_unavailable": {
            "name": "is_unavailable",
            "location": 704,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.numeric_page_described": {
            "name": "numeric_page_described",
            "location": 707,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.extract_page_described": {
            "name": "extract_page_described",
            "location": 710,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.numeric_year": {
            "name": "numeric_year",
            "location": 723,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.sort_key": {
            "name": "sort_key",
            "location": 737,
            "return": [
                "Tuple[(Any, ...)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.make_variant": {
            "name": "make_variant",
            "location": 745,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "Optional[NomenclatureStatus]"
                ],
                "of_name": [
                    "Optional['Name']"
                ],
                "comment": [
                    "Optional[str]"
                ]
            }
        },
        "Name.add_variant": {
            "name": "add_variant",
            "location": 767,
            "return": [
                "Optional['Name']"
            ],
            "arguments": {
                "self": [],
                "root_name": [
                    "Optional[str]"
                ],
                "status": [
                    "Optional[NomenclatureStatus]"
                ],
                "paper": [
                    "Optional[str]"
                ],
                "page_described": [
                    "Optional[str]"
                ],
                "original_name": [
                    "Optional[str]"
                ]
            }
        },
        "Name.preoccupied_by": {
            "name": "preoccupied_by",
            "location": 806,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional['Name']"
                ],
                "comment": [
                    "Optional[str]"
                ]
            }
        },
        "Name.conserve": {
            "name": "conserve",
            "location": 820,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "opinion": [
                    "str"
                ],
                "comment": [
                    "Optional[str]"
                ]
            }
        },
        "Name.infer_author_tags": {
            "name": "infer_author_tags",
            "location": 824,
            "return": [
                "Optional[List[AuthorTag]]"
            ],
            "arguments": {
                "cls": [],
                "authority": [
                    "str"
                ]
            }
        },
        "Name._author_to_person": {
            "name": "_author_to_person",
            "location": 845,
            "return": [
                "Optional[Dict[(str, str)]]"
            ],
            "arguments": {
                "author": [
                    "str"
                ]
            }
        },
        "Name.author_set": {
            "name": "author_set",
            "location": 854,
            "return": [
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.get_authors": {
            "name": "get_authors",
            "location": 857,
            "return": [
                "List[Person]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.taxonomic_authority": {
            "name": "taxonomic_authority",
            "location": 862,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.copy_authors": {
            "name": "copy_authors",
            "location": 865,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.check_all_authors": {
            "name": "check_all_authors",
            "location": 881,
            "return": [
                "List['Name']"
            ],
            "arguments": {
                "cls": [],
                "autofix": [
                    "bool"
                ],
                "quiet": [
                    "bool"
                ]
            }
        },
        "Name.check_authors": {
            "name": "check_authors",
            "location": 891,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "autofix": [
                    "bool"
                ],
                "quiet": [
                    "bool"
                ]
            }
        },
        "Name.effective_year": {
            "name": "effective_year",
            "location": 938,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.get_description": {
            "name": "get_description",
            "location": 956,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "full": [
                    "bool"
                ],
                "depth": [
                    "int"
                ],
                "include_data": [
                    "bool"
                ],
                "include_taxon": [
                    "bool"
                ]
            }
        },
        "Name.display": {
            "name": "display",
            "location": 1062,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "full": [
                    "bool"
                ],
                "include_data": [
                    "bool"
                ]
            }
        },
        "Name.knowledge_level": {
            "name": "knowledge_level",
            "location": 1070,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "verbose": [
                    "bool"
                ]
            }
        },
        "Name.is_patronym": {
            "name": "is_patronym",
            "location": 1093,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.is_fossil": {
            "name": "is_fossil",
            "location": 1099,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.is_ichno": {
            "name": "is_ichno",
            "location": 1102,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.set_nos": {
            "name": "set_nos",
            "location": 1105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.fill_data_level": {
            "name": "fill_data_level",
            "location": 1113,
            "return": [
                "Tuple[(FillDataLevel, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.has_tag_from_source": {
            "name": "has_tag_from_source",
            "location": 1180,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tag_cls": [
                    "'TypeTag'"
                ],
                "source": [
                    "'Article'"
                ]
            }
        },
        "Name.requires_etymology": {
            "name": "requires_etymology",
            "location": 1187,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.get_required_details_tags": {
            "name": "get_required_details_tags",
            "location": 1202,
            "return": [
                "Iterable[Tuple[('TypeTag', 'TypeTag')]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.get_required_derived_tags": {
            "name": "get_required_derived_tags",
            "location": 1213,
            "return": [
                "Iterable[Tuple[('TypeTag', ...)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.get_missing_tags": {
            "name": "get_missing_tags",
            "location": 1241,
            "return": [
                "Iterable[Tuple[('TypeTag', ...)]]"
            ],
            "arguments": {
                "self": [],
                "required_tags": [
                    "Iterable[Tuple[('TypeTag', ...)]]"
                ]
            }
        },
        "Name.get_required_fields": {
            "name": "get_required_fields",
            "location": 1248,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.get_deprecated_fields": {
            "name": "get_deprecated_fields",
            "location": 1320,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.validate_as_child": {
            "name": "validate_as_child",
            "location": 1324,
            "return": [
                "Taxon"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "Status"
                ]
            }
        },
        "Name.validate": {
            "name": "validate",
            "location": 1339,
            "return": [
                "Taxon"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "Status"
                ],
                "parent": [
                    "Optional[Taxon]"
                ],
                "rank": [
                    "Optional[Rank]"
                ]
            }
        },
        "Name.merge": {
            "name": "merge",
            "location": 1383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "into": [
                    "'Name'"
                ],
                "allow_valid": [
                    "bool"
                ]
            }
        },
        "Name.open_description": {
            "name": "open_description",
            "location": 1394,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.remove": {
            "name": "remove",
            "location": 1401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "Optional[str]"
                ]
            }
        },
        "Name.original_valid": {
            "name": "original_valid",
            "location": 1408,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.compute_gender": {
            "name": "compute_gender",
            "location": 1413,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "dry_run": [
                    "bool"
                ]
            }
        },
        "Name.short_description": {
            "name": "short_description",
            "location": 1441,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.__str__": {
            "name": "__str__",
            "location": 1444,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.__repr__": {
            "name": "__repr__",
            "location": 1447,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.set_paper": {
            "name": "set_paper",
            "location": 1450,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "paper": [
                    "Optional[Article]"
                ],
                "page_described": [
                    "Union[(None, int, str)]"
                ],
                "original_name": [
                    "Optional[int]"
                ],
                "force": [
                    "bool"
                ]
            }
        },
        "Name.detect_and_set_type": {
            "name": "detect_and_set_type",
            "location": 1489,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "verbatim_type": [
                    "Optional[str]"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "Name.detect_type": {
            "name": "detect_type",
            "location": 1516,
            "return": [
                "List['Name']"
            ],
            "arguments": {
                "self": [],
                "verbatim_type": [
                    "Optional[str]"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "Name._split_authority": {
            "name": "_split_authority",
            "location": 1560,
            "return": [
                "Tuple[(str, Optional[str])]"
            ],
            "arguments": {
                "verbatim_type": [
                    "str"
                ]
            }
        },
        "Name.detect_type_from_verbatim_type": {
            "name": "detect_type_from_verbatim_type",
            "location": 1569,
            "return": [
                "List['Name']"
            ],
            "arguments": {
                "self": [],
                "verbatim_type": [
                    "str"
                ]
            }
        },
        "Name.possible_citation_groups": {
            "name": "possible_citation_groups",
            "location": 1641,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.get_similar_names_and_papers_for_author": {
            "name": "get_similar_names_and_papers_for_author",
            "location": 1693,
            "return": [
                "Tuple[(Set[Article], Set['Name'])]"
            ],
            "arguments": {
                "self": [],
                "author_name": [
                    "str"
                ]
            }
        },
        "NameComment.add_validity_check": {
            "name": "add_validity_check",
            "location": 1731,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "query": [
                    "Any"
                ]
            }
        },
        "NameComment.should_skip": {
            "name": "should_skip",
            "location": 1734,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NameComment.make": {
            "name": "make",
            "location": 1741,
            "return": [
                "'NameComment'"
            ],
            "arguments": {
                "cls": [],
                "name": [
                    "Name"
                ],
                "kind": [
                    "constants.CommentKind"
                ],
                "text": [
                    "str"
                ],
                "source": [
                    "Optional[Article]"
                ],
                "page": [
                    "Optional[str]"
                ]
            }
        },
        "NameComment.create_interactively": {
            "name": "create_interactively",
            "location": 1759,
            "return": [
                "Optional['NameComment']"
            ],
            "arguments": {
                "cls": [],
                "name": [
                    "Optional[Name]"
                ],
                "kind": [
                    "Optional[constants.CommentKind]"
                ],
                "text": [
                    "Optional[str]"
                ],
                "source": [
                    "Optional[Article]"
                ],
                "page": [
                    "Optional[str]"
                ]
            }
        },
        "NameComment.get_description": {
            "name": "get_description",
            "location": 1788,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "write_names.write_nam": {
            "name": "write_nam",
            "location": 1989,
            "return": [
                "str"
            ],
            "arguments": {
                "nam": [
                    "Name"
                ]
            }
        },
        "Name.map_type_tags_by_type.map_fn": {
            "name": "map_fn",
            "location": 611,
            "return": [
                "TypeTag"
            ],
            "arguments": {
                "tag": [
                    "TypeTag"
                ]
            }
        },
        "Name.replace_original_citation.map_fn": {
            "name": "map_fn",
            "location": 629,
            "return": [
                "TypeTag"
            ],
            "arguments": {
                "tag": [
                    "TypeTag"
                ]
            }
        },
        "Name.fill_data_level.tag_list": {
            "name": "tag_list",
            "location": 1131,
            "return": [
                "str"
            ],
            "arguments": {
                "tags": [
                    "Iterable[Tuple[(TypeTag, ...)]]"
                ]
            }
        },
        "Name.detect_type.cleanup": {
            "name": "cleanup",
            "location": 1519,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "Name.detect_type_from_verbatim_type._filter_by_authority": {
            "name": "_filter_by_authority",
            "location": 1570,
            "return": [
                "List['Name']"
            ],
            "arguments": {
                "candidates": [
                    "List['Name']"
                ],
                "authority": [
                    "Optional[str]"
                ]
            }
        }
    },
    "taxonomy-master/taxonomy/db/models/name_complex.py": {
        "SpeciesNameComplex.__repr__": {
            "name": "__repr__",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpeciesNameComplex.display": {
            "name": "display",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "full": [
                    "bool"
                ],
                "organized": [
                    "bool"
                ]
            }
        },
        "SpeciesNameComplex.self_apply": {
            "name": "self_apply",
            "location": 80,
            "return": [
                "List['models.Name']"
            ],
            "arguments": {
                "self": [],
                "dry_run": [
                    "bool"
                ]
            }
        },
        "SpeciesNameComplex.apply_to_ending": {
            "name": "apply_to_ending",
            "location": 83,
            "return": [
                "List['models.Name']"
            ],
            "arguments": {
                "self": [],
                "ending": [
                    "str"
                ],
                "dry_run": [
                    "bool"
                ],
                "interactive": [
                    "bool"
                ],
                "full_name_only": [
                    "bool"
                ]
            }
        },
        "SpeciesNameComplex.get_stem_from_name": {
            "name": "get_stem_from_name",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "SpeciesNameComplex.get_form": {
            "name": "get_form",
            "location": 133,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "gender": [
                    "GrammaticalGender"
                ]
            }
        },
        "SpeciesNameComplex.get_forms": {
            "name": "get_forms",
            "location": 144,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "SpeciesNameComplex.get_names": {
            "name": "get_names",
            "location": 156,
            "return": [
                "List['models.Name']"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpeciesNameComplex.make_ending": {
            "name": "make_ending",
            "location": 159,
            "return": [
                "'SpeciesNameEnding'"
            ],
            "arguments": {
                "self": [],
                "ending": [
                    "str"
                ],
                "comment": [
                    "Optional[str]"
                ],
                "full_name_only": [
                    "bool"
                ]
            }
        },
        "SpeciesNameComplex.remove": {
            "name": "remove",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpeciesNameComplex.make": {
            "name": "make",
            "location": 181,
            "return": [
                "'SpeciesNameComplex'"
            ],
            "arguments": {
                "cls": [],
                "label": [
                    "str"
                ]
            }
        },
        "SpeciesNameComplex._get_or_create": {
            "name": "_get_or_create",
            "location": 203,
            "return": [
                "'SpeciesNameComplex'"
            ],
            "arguments": {
                "cls": [],
                "label": [
                    "str"
                ]
            }
        },
        "SpeciesNameComplex.by_label": {
            "name": "by_label",
            "location": 229,
            "return": [
                "'SpeciesNameComplex'"
            ],
            "arguments": {
                "cls": [],
                "label": [
                    "str"
                ]
            }
        },
        "SpeciesNameComplex.of_kind": {
            "name": "of_kind",
            "location": 237,
            "return": [
                "'SpeciesNameComplex'"
            ],
            "arguments": {
                "cls": [],
                "kind": [
                    "SpeciesNameKind"
                ]
            }
        },
        "SpeciesNameComplex.ambiguous": {
            "name": "ambiguous",
            "location": 242,
            "return": [
                "'SpeciesNameComplex'"
            ],
            "arguments": {
                "cls": [],
                "stem": [
                    "str"
                ],
                "comment": [
                    "Optional[str]"
                ]
            }
        },
        "SpeciesNameComplex.adjective": {
            "name": "adjective",
            "location": 251,
            "return": [
                "'SpeciesNameComplex'"
            ],
            "arguments": {
                "cls": [],
                "stem": [
                    "str"
                ],
                "comment": [
                    "Optional[str]"
                ],
                "masculine_ending": [
                    "str"
                ],
                "feminine_ending": [
                    "str"
                ],
                "neuter_ending": [
                    "str"
                ],
                "auto_apply": [
                    "bool"
                ]
            }
        },
        "SpeciesNameComplex.first_declension": {
            "name": "first_declension",
            "location": 275,
            "return": [
                "'SpeciesNameComplex'"
            ],
            "arguments": {
                "cls": [],
                "stem": [
                    "str"
                ],
                "auto_apply": [
                    "bool"
                ],
                "comment": [
                    "Optional[str]"
                ]
            }
        },
        "SpeciesNameComplex.third_declension": {
            "name": "third_declension",
            "location": 281,
            "return": [
                "'SpeciesNameComplex'"
            ],
            "arguments": {
                "cls": [],
                "stem": [
                    "str"
                ],
                "auto_apply": [
                    "bool"
                ],
                "comment": [
                    "Optional[str]"
                ]
            }
        },
        "SpeciesNameComplex.invariant": {
            "name": "invariant",
            "location": 287,
            "return": [
                "'SpeciesNameComplex'"
            ],
            "arguments": {
                "cls": [],
                "stem": [
                    "str"
                ],
                "auto_apply": [
                    "bool"
                ],
                "comment": [
                    "Optional[str]"
                ]
            }
        },
        "SpeciesNameComplex.create_interactively": {
            "name": "create_interactively",
            "location": 293,
            "return": [
                "Optional['SpeciesNameComplex']"
            ],
            "arguments": {
                "cls": []
            }
        },
        "SpeciesNameComplex.fill_data": {
            "name": "fill_data",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "FillDataLevel"
                ],
                "ask_before_opening": [
                    "bool"
                ],
                "only_fill_cache": [
                    "bool"
                ],
                "skip_nofile": [
                    "bool"
                ]
            }
        },
        "NameComplex.__repr__": {
            "name": "__repr__",
            "location": 365,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NameComplex.display": {
            "name": "display",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "full": [
                    "bool"
                ],
                "organized": [
                    "bool"
                ]
            }
        },
        "NameComplex.self_apply": {
            "name": "self_apply",
            "location": 390,
            "return": [
                "List['models.Name']"
            ],
            "arguments": {
                "self": [],
                "dry_run": [
                    "bool"
                ]
            }
        },
        "NameComplex.apply_to_ending": {
            "name": "apply_to_ending",
            "location": 393,
            "return": [
                "List['models.Name']"
            ],
            "arguments": {
                "self": [],
                "ending": [
                    "str"
                ],
                "dry_run": [
                    "bool"
                ]
            }
        },
        "NameComplex.get_stem_from_name": {
            "name": "get_stem_from_name",
            "location": 424,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "NameComplex.make_ending": {
            "name": "make_ending",
            "location": 432,
            "return": [
                "'NameEnding'"
            ],
            "arguments": {
                "self": [],
                "ending": [
                    "str"
                ],
                "comment": [
                    "Optional[str]"
                ]
            }
        },
        "NameComplex.get_names": {
            "name": "get_names",
            "location": 435,
            "return": [
                "List['models.Name']"
            ],
            "arguments": {
                "self": []
            }
        },
        "NameComplex.make": {
            "name": "make",
            "location": 439,
            "return": [
                "'NameComplex'"
            ],
            "arguments": {
                "cls": [],
                "label": [
                    "str"
                ]
            }
        },
        "NameComplex._get_or_create": {
            "name": "_get_or_create",
            "location": 463,
            "return": [
                "'NameComplex'"
            ],
            "arguments": {
                "cls": [],
                "label": [
                    "str"
                ]
            }
        },
        "NameComplex.by_label": {
            "name": "by_label",
            "location": 496,
            "return": [
                "'NameComplex'"
            ],
            "arguments": {
                "cls": [],
                "label": [
                    "str"
                ]
            }
        },
        "NameComplex.latin_stem": {
            "name": "latin_stem",
            "location": 504,
            "return": [
                "'NameComplex'"
            ],
            "arguments": {
                "cls": [],
                "stem": [
                    "str"
                ],
                "gender": [
                    "GrammaticalGender"
                ],
                "comment": [
                    "Optional[str]"
                ],
                "stem_remove": [
                    "str"
                ],
                "stem_add": [
                    "str"
                ]
            }
        },
        "NameComplex.unknown_obvious_stem": {
            "name": "unknown_obvious_stem",
            "location": 525,
            "return": [
                "'NameComplex'"
            ],
            "arguments": {
                "cls": [],
                "stem": [
                    "str"
                ],
                "gender": [
                    "GrammaticalGender"
                ],
                "comment": [
                    "Optional[str]"
                ],
                "stem_remove": [
                    "str"
                ],
                "stem_add": [
                    "str"
                ]
            }
        },
        "NameComplex.greek_stem": {
            "name": "greek_stem",
            "location": 546,
            "return": [
                "'NameComplex'"
            ],
            "arguments": {
                "cls": [],
                "stem": [
                    "str"
                ],
                "gender": [
                    "GrammaticalGender"
                ],
                "comment": [
                    "Optional[str]"
                ],
                "stem_remove": [
                    "str"
                ],
                "stem_add": [
                    "str"
                ]
            }
        },
        "NameComplex.latinized_greek": {
            "name": "latinized_greek",
            "location": 567,
            "return": [
                "'NameComplex'"
            ],
            "arguments": {
                "cls": [],
                "stem": [
                    "str"
                ],
                "gender": [
                    "GrammaticalGender"
                ],
                "comment": [
                    "Optional[str]"
                ],
                "stem_remove": [
                    "str"
                ],
                "stem_add": [
                    "str"
                ]
            }
        },
        "NameComplex.bad_transliteration": {
            "name": "bad_transliteration",
            "location": 588,
            "return": [
                "'NameComplex'"
            ],
            "arguments": {
                "cls": [],
                "stem": [
                    "str"
                ],
                "gender": [
                    "GrammaticalGender"
                ],
                "comment": [
                    "Optional[str]"
                ],
                "stem_remove": [
                    "str"
                ],
                "stem_add": [
                    "str"
                ]
            }
        },
        "NameComplex.common_gender": {
            "name": "common_gender",
            "location": 609,
            "return": [
                "'NameComplex'"
            ],
            "arguments": {
                "cls": [],
                "stem": [
                    "str"
                ],
                "gender": [
                    "GrammaticalGender"
                ],
                "comment": [
                    "Optional[str]"
                ],
                "stem_remove": [
                    "str"
                ],
                "stem_add": [
                    "str"
                ]
            }
        },
        "NameComplex.oides_name": {
            "name": "oides_name",
            "location": 630,
            "return": [
                "'NameComplex'"
            ],
            "arguments": {
                "cls": [],
                "stem": [
                    "str"
                ],
                "gender": [
                    "GrammaticalGender"
                ],
                "comment": [
                    "Optional[str]"
                ]
            }
        },
        "NameComplex.latin_changed_ending": {
            "name": "latin_changed_ending",
            "location": 655,
            "return": [
                "'NameComplex'"
            ],
            "arguments": {
                "cls": [],
                "stem": [
                    "str"
                ],
                "gender": [
                    "GrammaticalGender"
                ],
                "comment": [
                    "Optional[str]"
                ],
                "stem_remove": [
                    "str"
                ],
                "stem_add": [
                    "str"
                ]
            }
        },
        "NameComplex.stem_expressly_set": {
            "name": "stem_expressly_set",
            "location": 676,
            "return": [
                "'NameComplex'"
            ],
            "arguments": {
                "cls": [],
                "gender": [
                    "GrammaticalGender"
                ],
                "stem_remove": [
                    "str"
                ],
                "stem_add": [
                    "str"
                ]
            }
        },
        "NameComplex.expressly_specified": {
            "name": "expressly_specified",
            "location": 693,
            "return": [
                "'NameComplex'"
            ],
            "arguments": {
                "cls": [],
                "gender": [
                    "GrammaticalGender"
                ],
                "stem_remove": [
                    "str"
                ],
                "stem_add": [
                    "str"
                ]
            }
        },
        "NameComplex.indicated": {
            "name": "indicated",
            "location": 710,
            "return": [
                "'NameComplex'"
            ],
            "arguments": {
                "cls": [],
                "gender": [
                    "GrammaticalGender"
                ],
                "stem_remove": [
                    "str"
                ],
                "stem_add": [
                    "str"
                ]
            }
        },
        "NameComplex.assumed": {
            "name": "assumed",
            "location": 725,
            "return": [
                "'NameComplex'"
            ],
            "arguments": {
                "cls": [],
                "gender": [
                    "GrammaticalGender"
                ],
                "stem_remove": [
                    "str"
                ],
                "stem_add": [
                    "str"
                ]
            }
        },
        "NameComplex.defaulted_masculine": {
            "name": "defaulted_masculine",
            "location": 740,
            "return": [
                "'NameComplex'"
            ],
            "arguments": {
                "cls": [],
                "stem_remove": [
                    "str"
                ],
                "stem_add": [
                    "str"
                ]
            }
        },
        "NameComplex.defaulted": {
            "name": "defaulted",
            "location": 755,
            "return": [
                "'NameComplex'"
            ],
            "arguments": {
                "cls": [],
                "gender": [
                    "GrammaticalGender"
                ],
                "ending": [
                    "str"
                ],
                "stem_remove": [
                    "str"
                ],
                "stem_add": [
                    "str"
                ]
            }
        },
        "NameComplex._make_label": {
            "name": "_make_label",
            "location": 786,
            "return": [
                "str"
            ],
            "arguments": {
                "base_label": [
                    "str"
                ],
                "stem_remove": [
                    "str"
                ],
                "stem_add": [
                    "str"
                ]
            }
        },
        "NameComplex.create_interactively": {
            "name": "create_interactively",
            "location": 796,
            "return": [
                "'NameComplex'"
            ],
            "arguments": {
                "cls": []
            }
        },
        "SpeciesNameEnding.get_or_create": {
            "name": "get_or_create",
            "location": 908,
            "return": [
                "'SpeciesNameEnding'"
            ],
            "arguments": {
                "cls": [],
                "name_complex": [
                    "SpeciesNameComplex"
                ],
                "ending": [
                    "str"
                ],
                "comment": [
                    "Optional[str]"
                ],
                "full_name_only": [
                    "bool"
                ]
            }
        }
    },
    "taxonomy-master/taxonomy/db/models/occurrence.py": {
        "Occurrence.add_comment": {
            "name": "add_comment",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_comment": [
                    "str"
                ]
            }
        },
        "Occurrence.__repr__": {
            "name": "__repr__",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "taxonomy-master/taxonomy/db/models/period.py": {
        "display_age": {
            "name": "display_age",
            "location": 312,
            "return": [
                "str"
            ],
            "arguments": {
                "age": [
                    "int"
                ]
            }
        },
        "period_sort_key": {
            "name": "period_sort_key",
            "location": 322,
            "return": [
                "Tuple[(int, int, int, str)]"
            ],
            "arguments": {
                "period": [
                    "Period"
                ]
            }
        },
        "_get_from_parent": {
            "name": "_get_from_parent",
            "location": 349,
            "return": [
                "Tuple[(int, int, int, str)]"
            ],
            "arguments": {
                "period": [
                    "Period"
                ],
                "parent": [
                    "Period"
                ]
            }
        },
        "_apply_next_correction": {
            "name": "_apply_next_correction",
            "location": 354,
            "return": [
                "Tuple[(int, int, int, str)]"
            ],
            "arguments": {
                "period": [
                    "Period"
                ],
                "age": [
                    "int"
                ],
                "parents": [
                    "int"
                ]
            }
        },
        "display_period_tree": {
            "name": "display_period_tree",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "min_count": [
                    "int"
                ],
                "system": [
                    "Optional[PeriodSystem]"
                ],
                "full": [
                    "bool"
                ],
                "include_taxa": [
                    "bool"
                ]
            }
        },
        "Period.has_locations": {
            "name": "has_locations",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Period.__repr__": {
            "name": "__repr__",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Period.add_validity_check": {
            "name": "add_validity_check",
            "location": 89,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "query": [
                    "Any"
                ]
            }
        },
        "Period.should_skip": {
            "name": "should_skip",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Period.merge": {
            "name": "merge",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'Period'"
                ]
            }
        },
        "Period._filter_none": {
            "name": "_filter_none",
            "location": 109,
            "return": [
                "Iterable[T]"
            ],
            "arguments": {
                "seq": [
                    "Iterable[Optional[T]]"
                ]
            }
        },
        "Period.sort_key": {
            "name": "sort_key",
            "location": 112,
            "return": [
                "Tuple[(int, int, int, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Period.get_min_age": {
            "name": "get_min_age",
            "location": 115,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Period.get_max_age": {
            "name": "get_max_age",
            "location": 123,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Period.make": {
            "name": "make",
            "location": 132,
            "return": [
                "'Period'"
            ],
            "arguments": {
                "cls": [],
                "name": [
                    "str"
                ],
                "system": [
                    "PeriodSystem"
                ],
                "rank": [
                    "PeriodRank"
                ]
            }
        },
        "Period.display": {
            "name": "display",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "full": [
                    "bool"
                ],
                "depth": [
                    "int"
                ],
                "file": [
                    "IO[str]"
                ],
                "locations": [
                    "bool"
                ],
                "children": [
                    "bool"
                ]
            }
        },
        "Period.max_only_localities": {
            "name": "max_only_localities",
            "location": 192,
            "return": [
                "Iterable['models.Location']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Period.period_localities": {
            "name": "period_localities",
            "location": 197,
            "return": [
                "Iterable['models.Location']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Period.make_locality": {
            "name": "make_locality",
            "location": 202,
            "return": [
                "'models.Location'"
            ],
            "arguments": {
                "self": [],
                "region": [
                    "'Region'"
                ]
            }
        },
        "Period.all_localities": {
            "name": "all_localities",
            "location": 205,
            "return": [
                "Set['models.Location']"
            ],
            "arguments": {
                "self": [],
                "include_children": [
                    "bool"
                ],
                "include_partial": [
                    "bool"
                ]
            }
        },
        "Period.all_type_localities": {
            "name": "all_type_localities",
            "location": 228,
            "return": [
                "List['models.Name']"
            ],
            "arguments": {
                "self": [],
                "include_children": [
                    "bool"
                ],
                "include_partial": [
                    "bool"
                ]
            }
        },
        "Period.display_type_localities": {
            "name": "display_type_localities",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "include_children": [
                    "bool"
                ],
                "include_partial": [
                    "bool"
                ]
            }
        },
        "Period.all_regions": {
            "name": "all_regions",
            "location": 249,
            "return": [
                "Set[Region]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Period.autoset_region": {
            "name": "autoset_region",
            "location": 252,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Period.set_period": {
            "name": "set_period",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "period": [
                    "Optional['Period']"
                ]
            }
        },
        "Period.fill_field": {
            "name": "fill_field",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ]
            }
        },
        "Period.get_required_fields": {
            "name": "get_required_fields",
            "location": 279,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Period.requires_parent": {
            "name": "requires_parent",
            "location": 284,
            "return": [
                "RequirednessLevel"
            ],
            "arguments": {
                "self": []
            }
        },
        "display_period_tree.add_period": {
            "name": "add_period",
            "location": 374,
            "return": [
                "Period"
            ],
            "arguments": {
                "period": [
                    "Period"
                ]
            }
        },
        "display_period_tree.display_period": {
            "name": "display_period",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "period": [
                    "Period"
                ],
                "depth": [
                    "int"
                ]
            }
        }
    },
    "taxonomy-master/taxonomy/db/models/person.py": {
        "get_new_authors_list": {
            "name": "get_new_authors_list",
            "location": 947,
            "return": [
                "List[AuthorTag]"
            ],
            "arguments": {}
        },
        "_display_year": {
            "name": "_display_year",
            "location": 957,
            "return": [
                "str"
            ],
            "arguments": {
                "year": [
                    "Optional[str]"
                ]
            }
        },
        "_display_sort_key": {
            "name": "_display_sort_key",
            "location": 968,
            "return": [
                "Any"
            ],
            "arguments": {
                "obj": [
                    "BaseModel"
                ]
            }
        },
        "Person.__str__": {
            "name": "__str__",
            "location": 143,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.get_description": {
            "name": "get_description",
            "location": 146,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "family_first": [
                    "bool"
                ],
                "url": [
                    "bool"
                ]
            }
        },
        "Person.get_full_name": {
            "name": "get_full_name",
            "location": 162,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "family_first": [
                    "bool"
                ]
            }
        },
        "Person.get_initials": {
            "name": "get_initials",
            "location": 193,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.join_authors": {
            "name": "join_authors",
            "location": 215,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "authors": [
                    "Sequence['Person']"
                ]
            }
        },
        "Person.taxonomic_authority": {
            "name": "taxonomic_authority",
            "location": 224,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.get_value_to_show_for_field": {
            "name": "get_value_to_show_for_field",
            "location": 233,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Optional[str]"
                ]
            }
        },
        "Person.add_validity_check": {
            "name": "add_validity_check",
            "location": 239,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "query": [
                    "Any"
                ]
            }
        },
        "Person.should_skip": {
            "name": "should_skip",
            "location": 242,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.display": {
            "name": "display",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "full": [
                    "bool"
                ],
                "depth": [
                    "int"
                ],
                "file": [
                    "IO[str]"
                ],
                "include_detail": [
                    "bool"
                ]
            }
        },
        "Person.find_tag": {
            "name": "find_tag",
            "location": 270,
            "return": [
                "Tuple[(int, Optional[adt.ADT])]"
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "Optional[Sequence[adt.ADT]]"
                ],
                "tag_cls": [
                    "Type[adt.ADT]"
                ]
            }
        },
        "Person.add_to_derived_field": {
            "name": "add_to_derived_field",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "str"
                ],
                "obj": [
                    "BaseModel"
                ]
            }
        },
        "Person.remove_from_derived_field": {
            "name": "remove_from_derived_field",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "str"
                ],
                "obj": [
                    "BaseModel"
                ]
            }
        },
        "Person.edit_tag_sequence": {
            "name": "edit_tag_sequence",
            "location": 288,
            "return": [
                "Tuple[(Optional[Sequence[adt.ADT]], Optional['Person'])]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "BaseModel"
                ],
                "tags": [
                    "Optional[Sequence[adt.ADT]]"
                ],
                "tag_cls": [
                    "Type[adt.ADT]"
                ],
                "target": [
                    "Optional['Person']"
                ]
            }
        },
        "Person.edit_tag_sequence_on_object": {
            "name": "edit_tag_sequence_on_object",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "BaseModel"
                ],
                "field_name": [
                    "str"
                ],
                "tag_cls": [
                    "Type[adt.ADT]"
                ],
                "derived_field_name": [
                    "str"
                ],
                "target": [
                    "Optional['Person']"
                ]
            }
        },
        "Person.move_reference": {
            "name": "move_reference",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_person": [
                    "'Person'"
                ],
                "derived_field_name": [
                    "str"
                ],
                "obj": [
                    "BaseModel"
                ]
            }
        },
        "Person.edit": {
            "name": "edit",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.sort_key": {
            "name": "sort_key",
            "location": 352,
            "return": [
                "Tuple[(str, ...)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.lint": {
            "name": "lint",
            "location": 363,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.fix_bad_suffixes": {
            "name": "fix_bad_suffixes",
            "location": 476,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Person.find_duplicates": {
            "name": "find_duplicates",
            "location": 486,
            "return": [
                "List[List['Person']]"
            ],
            "arguments": {
                "cls": [],
                "autofix": [
                    "bool"
                ]
            }
        },
        "Person.find_near_duplicates": {
            "name": "find_near_duplicates",
            "location": 500,
            "return": [
                "List[List['Person']]"
            ],
            "arguments": {
                "cls": [],
                "min_count": [
                    "int"
                ]
            }
        },
        "Person.display_duplicates": {
            "name": "display_duplicates",
            "location": 515,
            "return": [
                "List[List['Person']]"
            ],
            "arguments": {
                "cls": [],
                "by_key": [
                    "Mapping[(Any, List['Person'])]"
                ],
                "autofix": [
                    "bool"
                ],
                "min_count": [
                    "int"
                ]
            }
        },
        "Person.maybe_merge_group": {
            "name": "maybe_merge_group",
            "location": 541,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "group": [
                    "List['Person']"
                ]
            }
        },
        "Person.num_references": {
            "name": "num_references",
            "location": 578,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.total_references": {
            "name": "total_references",
            "location": 586,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.reassign_initials_only": {
            "name": "reassign_initials_only",
            "location": 589,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.reassign_references": {
            "name": "reassign_references",
            "location": 595,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Optional['Person']"
                ]
            }
        },
        "Person.get_sorted_derived_field": {
            "name": "get_sorted_derived_field",
            "location": 611,
            "return": [
                "List[Any]"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "str"
                ]
            }
        },
        "Person.get_adt_callbacks": {
            "name": "get_adt_callbacks",
            "location": 617,
            "return": [
                "getinput.CallbackMap"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.maybe_reassign_references": {
            "name": "maybe_reassign_references",
            "location": 632,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.reassign_names_with_verbatim": {
            "name": "reassign_names_with_verbatim",
            "location": 658,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filter_for_name": [
                    "bool"
                ]
            }
        },
        "Person.make_soft_redirect": {
            "name": "make_soft_redirect",
            "location": 672,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Optional['Person']"
                ]
            }
        },
        "Person.make_hard_redirect": {
            "name": "make_hard_redirect",
            "location": 684,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Optional['Person']"
                ]
            }
        },
        "Person.maybe_autodelete": {
            "name": "maybe_autodelete",
            "location": 696,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dry_run": [
                    "bool"
                ]
            }
        },
        "Person.is_more_specific_than": {
            "name": "is_more_specific_than",
            "location": 707,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'Person'"
                ]
            }
        },
        "Person._has_more_specific_initials": {
            "name": "_has_more_specific_initials",
            "location": 728,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'Person'"
                ]
            }
        },
        "Person.resolve_redirects": {
            "name": "resolve_redirects",
            "location": 740,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Person.autodelete": {
            "name": "autodelete",
            "location": 758,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "dry_run": [
                    "bool"
                ]
            }
        },
        "Person.create_interactively": {
            "name": "create_interactively",
            "location": 764,
            "return": [
                "Optional['Person']"
            ],
            "arguments": {
                "cls": [],
                "family_name": [
                    "Optional[str]"
                ]
            }
        },
        "Person.get_interactive_creators": {
            "name": "get_interactive_creators",
            "location": 782,
            "return": [
                "Dict[(str, Callable[([], Any)])]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Person.make_unchecked": {
            "name": "make_unchecked",
            "location": 790,
            "return": [
                "Optional['Person']"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Person.make_family_name": {
            "name": "make_family_name",
            "location": 803,
            "return": [
                "Optional['Person']"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Person.get_or_create_from_ol_id": {
            "name": "get_or_create_from_ol_id",
            "location": 813,
            "return": [
                "'Person'"
            ],
            "arguments": {
                "cls": [],
                "ol_id": [
                    "str"
                ]
            }
        },
        "Person.get_or_create_unchecked": {
            "name": "get_or_create_unchecked",
            "location": 839,
            "return": [
                "'Person'"
            ],
            "arguments": {
                "cls": [],
                "family_name": [
                    "str"
                ]
            }
        },
        "Person.get_completers_for_adt_field": {
            "name": "get_completers_for_adt_field",
            "location": 899,
            "return": [
                "getinput.CompleterMap"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ]
            }
        },
        "Person.get_level": {
            "name": "get_level",
            "location": 921,
            "return": [
                "PersonLevel"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.get_initials.name_to_initial": {
            "name": "name_to_initial",
            "location": 200,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "Person.maybe_merge_group.all_the_same": {
            "name": "all_the_same",
            "location": 544,
            "return": [
                "bool"
            ],
            "arguments": {
                "group": [
                    "Iterable[Person]"
                ],
                "field": [
                    "str"
                ]
            }
        },
        "Person.edit_tag_sequence.who": {
            "name": "who",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "taxonomy-master/taxonomy/db/models/region.py": {
        "Region.make": {
            "name": "make",
            "location": 49,
            "return": [
                "'Region'"
            ],
            "arguments": {
                "cls": [],
                "name": [
                    "str"
                ],
                "kind": [
                    "constants.RegionKind"
                ],
                "parent": [
                    "Optional['Region']"
                ]
            }
        },
        "Region.__repr__": {
            "name": "__repr__",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Region.get_general_localities": {
            "name": "get_general_localities",
            "location": 67,
            "return": [
                "List['models.Location']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Region.rename": {
            "name": "rename",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_name": [
                    "Optional[str]"
                ]
            }
        },
        "Region.display": {
            "name": "display",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "full": [
                    "bool"
                ],
                "depth": [
                    "int"
                ],
                "file": [
                    "IO[str]"
                ],
                "children": [
                    "bool"
                ],
                "skip_empty": [
                    "bool"
                ],
                "locations": [
                    "bool"
                ]
            }
        },
        "Region.display_without_stratigraphy": {
            "name": "display_without_stratigraphy",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "full": [
                    "bool"
                ],
                "depth": [
                    "int"
                ],
                "file": [
                    "IO[str]"
                ],
                "skip_empty": [
                    "bool"
                ]
            }
        },
        "Region.is_empty": {
            "name": "is_empty",
            "location": 148,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Region.sorted_children": {
            "name": "sorted_children",
            "location": 157,
            "return": [
                "List['Region']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Region.sorted_locations": {
            "name": "sorted_locations",
            "location": 160,
            "return": [
                "List['models.Location']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Region.get_location": {
            "name": "get_location",
            "location": 166,
            "return": [
                "'models.Location'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Region.all_parents": {
            "name": "all_parents",
            "location": 170,
            "return": [
                "Iterable['Region']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Region.all_citation_groups": {
            "name": "all_citation_groups",
            "location": 176,
            "return": [
                "Iterable['models.CitationGroup']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Region.has_citation_groups": {
            "name": "has_citation_groups",
            "location": 181,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Optional[constants.ArticleType]"
                ]
            }
        },
        "Region.display_citation_groups": {
            "name": "display_citation_groups",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "full": [
                    "bool"
                ],
                "only_nonempty": [
                    "bool"
                ],
                "depth": [
                    "int"
                ],
                "type": [
                    "Optional[constants.ArticleType]"
                ]
            }
        },
        "Region.has_collections": {
            "name": "has_collections",
            "location": 215,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Region.display_collections": {
            "name": "display_collections",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "full": [
                    "bool"
                ],
                "only_nonempty": [
                    "bool"
                ],
                "depth": [
                    "int"
                ]
            }
        },
        "Region.has_locations": {
            "name": "has_locations",
            "location": 244,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Region.has_associated_people": {
            "name": "has_associated_people",
            "location": 249,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Region.has_periods": {
            "name": "has_periods",
            "location": 254,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Region.display_periods": {
            "name": "display_periods",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "full": [
                    "bool"
                ],
                "depth": [
                    "int"
                ]
            }
        },
        "Region.add_cities": {
            "name": "add_cities",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Region.has_parent": {
            "name": "has_parent",
            "location": 279,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "'Region'"
                ]
            }
        }
    },
    "taxonomy-master/taxonomy/db/models/stratigraphic_unit.py": {
        "unit_sort_key": {
            "name": "unit_sort_key",
            "location": 233,
            "return": [
                "Tuple[(int, int, str)]"
            ],
            "arguments": {
                "unit": [
                    "StratigraphicUnit"
                ]
            }
        },
        "StratigraphicUnit.has_locations": {
            "name": "has_locations",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StratigraphicUnit.__repr__": {
            "name": "__repr__",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StratigraphicUnit.add_validity_check": {
            "name": "add_validity_check",
            "location": 76,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "query": [
                    "Any"
                ]
            }
        },
        "StratigraphicUnit.should_skip": {
            "name": "should_skip",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StratigraphicUnit.merge": {
            "name": "merge",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'StratigraphicUnit'"
                ]
            }
        },
        "StratigraphicUnit._filter_none": {
            "name": "_filter_none",
            "location": 94,
            "return": [
                "Iterable[T]"
            ],
            "arguments": {
                "seq": [
                    "Iterable[Optional[T]]"
                ]
            }
        },
        "StratigraphicUnit.sort_key": {
            "name": "sort_key",
            "location": 97,
            "return": [
                "Tuple[(int, int, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StratigraphicUnit.get_min_age": {
            "name": "get_min_age",
            "location": 100,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StratigraphicUnit.get_max_age": {
            "name": "get_max_age",
            "location": 108,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StratigraphicUnit.create_interactively": {
            "name": "create_interactively",
            "location": 117,
            "return": [
                "'StratigraphicUnit'"
            ],
            "arguments": {
                "cls": [],
                "name": [
                    "Optional[str]"
                ],
                "rank": [
                    "Optional[StratigraphicUnitRank]"
                ]
            }
        },
        "StratigraphicUnit.make": {
            "name": "make",
            "location": 135,
            "return": [
                "'StratigraphicUnit'"
            ],
            "arguments": {
                "cls": [],
                "name": [
                    "str"
                ],
                "rank": [
                    "StratigraphicUnitRank"
                ],
                "period": [
                    "Optional['models.Period']"
                ],
                "parent": [
                    "Optional['StratigraphicUnit']"
                ]
            }
        },
        "StratigraphicUnit.display": {
            "name": "display",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "full": [
                    "bool"
                ],
                "depth": [
                    "int"
                ],
                "file": [
                    "IO[str]"
                ],
                "locations": [
                    "bool"
                ],
                "children": [
                    "bool"
                ]
            }
        },
        "StratigraphicUnit.all_localities": {
            "name": "all_localities",
            "location": 172,
            "return": [
                "Iterable['models.Location']"
            ],
            "arguments": {
                "self": []
            }
        },
        "StratigraphicUnit.all_type_localities": {
            "name": "all_type_localities",
            "location": 177,
            "return": [
                "List['models.Name']"
            ],
            "arguments": {
                "self": [],
                "include_children": [
                    "bool"
                ]
            }
        },
        "StratigraphicUnit.display_type_localities": {
            "name": "display_type_localities",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "include_children": [
                    "bool"
                ]
            }
        },
        "StratigraphicUnit.all_regions": {
            "name": "all_regions",
            "location": 189,
            "return": [
                "Set[Region]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StratigraphicUnit.autoset_region": {
            "name": "autoset_region",
            "location": 192,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StratigraphicUnit.set_period": {
            "name": "set_period",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "period": [
                    "Optional['models.Period']"
                ]
            }
        },
        "StratigraphicUnit.fill_field": {
            "name": "fill_field",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ]
            }
        },
        "StratigraphicUnit.get_required_fields": {
            "name": "get_required_fields",
            "location": 219,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StratigraphicUnit.requires_parent": {
            "name": "requires_parent",
            "location": 225,
            "return": [
                "RequirednessLevel"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "taxonomy-master/taxonomy/db/models/tags.py": {},
    "taxonomy-master/taxonomy/db/models/taxon.py": {
        "_make_parent_getter": {
            "name": "_make_parent_getter",
            "location": 75,
            "return": [
                "Any"
            ],
            "arguments": {
                "index": [
                    "int"
                ]
            }
        },
        "_name_sort_key": {
            "name": "_name_sort_key",
            "location": 1245,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "nam": [
                    "'models.Name'"
                ]
            }
        },
        "_get_names": {
            "name": "_get_names",
            "location": 1252,
            "return": [
                "List['models.Name']"
            ],
            "arguments": {
                "paper": [
                    "Article"
                ]
            }
        },
        "fill_data_from_paper": {
            "name": "fill_data_from_paper",
            "location": 1261,
            "return": [
                "bool"
            ],
            "arguments": {
                "paper": [
                    "Article"
                ],
                "level": [
                    "FillDataLevel"
                ],
                "only_fill_cache": [
                    "bool"
                ],
                "ask_before_opening": [
                    "bool"
                ],
                "finish_what_you_start": [
                    "bool"
                ]
            }
        },
        "fill_data_from_articles": {
            "name": "fill_data_from_articles",
            "location": 1323,
            "return": [
                "None"
            ],
            "arguments": {
                "arts": [
                    "Sequence[Article]"
                ],
                "level": [
                    "FillDataLevel"
                ],
                "only_fill_cache": [
                    "bool"
                ],
                "ask_before_opening": [
                    "bool"
                ],
                "skip_nofile": [
                    "bool"
                ],
                "specify_authors": [
                    "bool"
                ]
            }
        },
        "fill_data_for_names": {
            "name": "fill_data_for_names",
            "location": 1363,
            "return": [
                "None"
            ],
            "arguments": {
                "nams": [
                    "Iterable['models.Name']"
                ]
            }
        },
        "display_names": {
            "name": "display_names",
            "location": 1410,
            "return": [
                "None"
            ],
            "arguments": {
                "art": [
                    "Article"
                ]
            }
        },
        "edit_names_interactive": {
            "name": "edit_names_interactive",
            "location": 1432,
            "return": [
                "None"
            ],
            "arguments": {
                "art": [
                    "Article"
                ],
                "field": [
                    "str"
                ]
            }
        },
        "_fill_data_level_for_name": {
            "name": "_fill_data_level_for_name",
            "location": 1457,
            "return": [
                "FillDataLevel"
            ],
            "arguments": {
                "nam": [
                    "'models.Name'"
                ],
                "desired_level": [
                    "Optional[FillDataLevel]"
                ]
            }
        },
        "ranked_parents": {
            "name": "ranked_parents",
            "location": 1469,
            "return": [
                "Tuple[(Optional[Taxon], Optional[Taxon], Optional[Taxon])]"
            ],
            "arguments": {
                "txn": [
                    "Optional[Taxon]"
                ]
            }
        },
        "display_organized": {
            "name": "display_organized",
            "location": 1511,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "Sequence[Tuple[(str, Taxon)]]"
                ],
                "depth": [
                    "int"
                ],
                "file": [
                    "IO[str]"
                ]
            }
        },
        "_OccurrenceGetter.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ]
            }
        },
        "_OccurrenceGetter.__get__": {
            "name": "__get__",
            "location": 57,
            "return": [
                "'_OccurrenceGetter'"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "instance_type": [
                    "Any"
                ]
            }
        },
        "_OccurrenceGetter.__getattr__": {
            "name": "__getattr__",
            "location": 60,
            "return": [
                "'models.Occurrence'"
            ],
            "arguments": {
                "self": [],
                "loc_name": [
                    "str"
                ]
            }
        },
        "_OccurrenceGetter.__call__": {
            "name": "__call__",
            "location": 68,
            "return": [
                "'models.Occurrence'"
            ],
            "arguments": {
                "self": [],
                "loc": [
                    "'models.Location'"
                ]
            }
        },
        "_OccurrenceGetter.__dir__": {
            "name": "__dir__",
            "location": 71,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_make_parent_getter._get_ranked_parent": {
            "name": "_get_ranked_parent",
            "location": 76,
            "return": [
                "Optional['Taxon']"
            ],
            "arguments": {
                "taxon": [
                    "'Taxon'"
                ]
            }
        },
        "Taxon.add_validity_check": {
            "name": "add_validity_check",
            "location": 111,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "query": [
                    "Any"
                ]
            }
        },
        "Taxon.should_skip": {
            "name": "should_skip",
            "location": 114,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taxon.group": {
            "name": "group",
            "location": 117,
            "return": [
                "Group"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taxon.get_names": {
            "name": "get_names",
            "location": 120,
            "return": [
                "Iterable['models.Name']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taxon.sorted_names": {
            "name": "sorted_names",
            "location": 123,
            "return": [
                "List['models.Name']"
            ],
            "arguments": {
                "self": [],
                "exclude_valid": [
                    "bool"
                ]
            }
        },
        "Taxon.get_children": {
            "name": "get_children",
            "location": 137,
            "return": [
                "Iterable['Taxon']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taxon.sorted_children": {
            "name": "sorted_children",
            "location": 140,
            "return": [
                "List['Taxon']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taxon.sorted_occurrences": {
            "name": "sorted_occurrences",
            "location": 145,
            "return": [
                "List['models.Occurrence']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taxon.root_name": {
            "name": "root_name",
            "location": 148,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taxon.all_data": {
            "name": "all_data",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taxon.full_name": {
            "name": "full_name",
            "location": 158,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taxon.needs_is": {
            "name": "needs_is",
            "location": 176,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taxon.parent_of_rank": {
            "name": "parent_of_rank",
            "location": 200,
            "return": [
                "'Taxon'"
            ],
            "arguments": {
                "self": [],
                "rank": [
                    "Rank"
                ],
                "original_taxon": [
                    "Optional['Taxon']"
                ]
            }
        },
        "Taxon.has_parent_of_rank": {
            "name": "has_parent_of_rank",
            "location": 215,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "rank": [
                    "Rank"
                ]
            }
        },
        "Taxon.is_child_of": {
            "name": "is_child_of",
            "location": 223,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "taxon": [
                    "'Taxon'"
                ]
            }
        },
        "Taxon.children_of_rank": {
            "name": "children_of_rank",
            "location": 231,
            "return": [
                "List['Taxon']"
            ],
            "arguments": {
                "self": [],
                "rank": [
                    "Rank"
                ],
                "age": [
                    "Optional[AgeClass]"
                ]
            }
        },
        "Taxon.names_like": {
            "name": "names_like",
            "location": 247,
            "return": [
                "List['models.Name']"
            ],
            "arguments": {
                "self": [],
                "root_name": [
                    "str"
                ]
            }
        },
        "Taxon.find_names": {
            "name": "find_names",
            "location": 253,
            "return": [
                "List['models.Name']"
            ],
            "arguments": {
                "self": [],
                "root_name": [
                    "str"
                ],
                "group": [
                    "Optional[Group]"
                ],
                "fuzzy": [
                    "bool"
                ]
            }
        },
        "Taxon.display_extant": {
            "name": "display_extant",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taxon.display": {
            "name": "display",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "full": [
                    "bool"
                ],
                "max_depth": [
                    "Optional[int]"
                ],
                "file": [
                    "IO[str]"
                ],
                "depth": [
                    "int"
                ],
                "exclude": [
                    "Container['Taxon']"
                ],
                "exclude_fn": [
                    "Optional[Callable[(['Taxon'], bool)]]"
                ],
                "name_exclude_fn": [
                    "Optional[Callable[(['models.Name'], bool)]]"
                ],
                "show_occurrences": [
                    "Optional[bool]"
                ]
            }
        },
        "Taxon._display_children": {
            "name": "_display_children",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "List['Taxon']"
                ],
                "full": [
                    "bool"
                ],
                "max_depth": [
                    "Optional[int]"
                ],
                "file": [
                    "IO[str]"
                ],
                "depth": [
                    "int"
                ],
                "exclude": [
                    "Container['Taxon']"
                ],
                "exclude_fn": [
                    "Optional[Callable[(['Taxon'], bool)]]"
                ],
                "name_exclude_fn": [
                    "Optional[Callable[(['models.Name'], bool)]]"
                ],
                "show_occurrences": [
                    "bool"
                ]
            }
        },
        "Taxon.display_parents": {
            "name": "display_parents",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_depth": [
                    "Optional[int]"
                ],
                "file": [
                    "IO[str]"
                ]
            }
        },
        "Taxon.get_citation_groups": {
            "name": "get_citation_groups",
            "location": 404,
            "return": [
                "Dict[('models.CitationGroup', List['models.Name'])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taxon.display_citation_groups": {
            "name": "display_citation_groups",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taxon.display_type_localities": {
            "name": "display_type_localities",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "full": [
                    "bool"
                ],
                "geographically": [
                    "bool"
                ],
                "region": [
                    "Optional['models.Region']"
                ],
                "exclude": [
                    "Container['Taxon']"
                ],
                "file": [
                    "IO[str]"
                ]
            }
        },
        "Taxon.add_static": {
            "name": "add_static",
            "location": 507,
            "return": [
                "'Taxon'"
            ],
            "arguments": {
                "self": [],
                "rank": [
                    "Rank"
                ],
                "name": [
                    "str"
                ],
                "year": [
                    "Union[(None, str, int)]"
                ],
                "age": [
                    "Optional[AgeClass]"
                ]
            }
        },
        "Taxon.get_adt_callbacks": {
            "name": "get_adt_callbacks",
            "location": 528,
            "return": [
                "getinput.CallbackMap"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taxon.add": {
            "name": "add",
            "location": 550,
            "return": [
                "Optional['Taxon']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taxon.add_syn": {
            "name": "add_syn",
            "location": 579,
            "return": [
                "Optional['models.Name']"
            ],
            "arguments": {
                "self": [],
                "root_name": [
                    "Optional[str]"
                ],
                "year": [
                    "Union[(None, int, str)]"
                ],
                "original_name": [
                    "Optional[str]"
                ],
                "original_citation": [
                    "Optional[Article]"
                ],
                "page_described": [
                    "Union[(None, int, str)]"
                ],
                "status": [
                    "Status"
                ],
                "nomenclature_status": [
                    "NomenclatureStatus"
                ],
                "interactive": [
                    "bool"
                ]
            }
        },
        "Taxon.add_type_identical": {
            "name": "add_type_identical",
            "location": 611,
            "return": [
                "'Taxon'"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "page_described": [
                    "Union[(None, int, str)]"
                ],
                "locality": [
                    "Optional['models.Location']"
                ]
            }
        },
        "Taxon.switch_basename": {
            "name": "switch_basename",
            "location": 623,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional['models.Name']"
                ]
            }
        },
        "Taxon.add_occurrence": {
            "name": "add_occurrence",
            "location": 637,
            "return": [
                "'models.Occurrence'"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "Optional['models.Location']"
                ],
                "paper": [
                    "Optional[Article]"
                ],
                "comment": [
                    "Optional[str]"
                ],
                "status": [
                    "OccurrenceStatus"
                ]
            }
        },
        "Taxon.edit_occurrence": {
            "name": "edit_occurrence",
            "location": 660,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taxon.syn_from_paper": {
            "name": "syn_from_paper",
            "location": 669,
            "return": [
                "Optional['models.Name']"
            ],
            "arguments": {
                "self": [],
                "root_name": [
                    "Optional[str]"
                ],
                "paper": [
                    "Optional[Article]"
                ],
                "page_described": [
                    "Union[(None, int, str)]"
                ],
                "status": [
                    "Status"
                ],
                "group": [
                    "Optional[Group]"
                ],
                "age": [
                    "Optional[AgeClass]"
                ],
                "interactive": [
                    "bool"
                ]
            }
        },
        "Taxon.from_paper": {
            "name": "from_paper",
            "location": 708,
            "return": [
                "Optional['Taxon']"
            ],
            "arguments": {
                "self": [],
                "rank": [
                    "Optional[Rank]"
                ],
                "name": [
                    "Optional[str]"
                ],
                "paper": [
                    "Optional[Article]"
                ],
                "page_described": [
                    "Union[(None, int, str)]"
                ],
                "status": [
                    "Status"
                ]
            }
        },
        "Taxon.add_nominate": {
            "name": "add_nominate",
            "location": 756,
            "return": [
                "'Taxon'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taxon.syn": {
            "name": "syn",
            "location": 780,
            "return": [
                "Optional['models.Name']"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]"
                ]
            }
        },
        "Taxon.open_description": {
            "name": "open_description",
            "location": 792,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taxon.compute_valid_name": {
            "name": "compute_valid_name",
            "location": 795,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taxon.expected_base_name": {
            "name": "expected_base_name",
            "location": 837,
            "return": [
                "Optional['models.Name']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taxon.check_expected_base_name": {
            "name": "check_expected_base_name",
            "location": 868,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taxon.check_base_names": {
            "name": "check_base_names",
            "location": 876,
            "return": [
                "Iterable['Taxon']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taxon.recompute_name": {
            "name": "recompute_name",
            "location": 882,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taxon.merge": {
            "name": "merge",
            "location": 889,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "into": [
                    "'Taxon'"
                ]
            }
        },
        "Taxon.synonymize": {
            "name": "synonymize",
            "location": 902,
            "return": [
                "'models.Name'"
            ],
            "arguments": {
                "self": [],
                "to_taxon": [
                    "Optional['Taxon']"
                ]
            }
        },
        "Taxon.make_species_group": {
            "name": "make_species_group",
            "location": 945,
            "return": [
                "'Taxon'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taxon.make_parent_of_rank": {
            "name": "make_parent_of_rank",
            "location": 948,
            "return": [
                "'Taxon'"
            ],
            "arguments": {
                "self": [],
                "rank": [
                    "Rank"
                ]
            }
        },
        "Taxon.run_on_self_and_children": {
            "name": "run_on_self_and_children",
            "location": 960,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "Callable[(['Taxon'], object)]"
                ]
            }
        },
        "Taxon.remove": {
            "name": "remove",
            "location": 965,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "Optional[str]"
                ]
            }
        },
        "Taxon.all_names": {
            "name": "all_names",
            "location": 980,
            "return": [
                "Set['models.Name']"
            ],
            "arguments": {
                "self": [],
                "age": [
                    "Optional[AgeClass]"
                ],
                "exclude": [
                    "Container['Taxon']"
                ],
                "min_year": [
                    "Optional[int]"
                ]
            }
        },
        "Taxon.all_authors": {
            "name": "all_authors",
            "location": 1004,
            "return": [
                "Set['models.Person']"
            ],
            "arguments": {
                "self": [],
                "age": [
                    "Optional[AgeClass]"
                ],
                "exclude": [
                    "Container['Taxon']"
                ],
                "min_year": [
                    "Optional[int]"
                ]
            }
        },
        "Taxon.reassign_family_name_authors": {
            "name": "reassign_family_name_authors",
            "location": 1013,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taxon.names_missing_field": {
            "name": "names_missing_field",
            "location": 1020,
            "return": [
                "Set['models.Name']"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ],
                "age": [
                    "Optional[AgeClass]"
                ],
                "min_year": [
                    "Optional[int]"
                ],
                "exclude": [
                    "Container['Taxon']"
                ]
            }
        },
        "Taxon.stats": {
            "name": "stats",
            "location": 1033,
            "return": [
                "Dict[(str, float)]"
            ],
            "arguments": {
                "self": [],
                "age": [
                    "Optional[AgeClass]"
                ],
                "graphical": [
                    "bool"
                ],
                "focus_field": [
                    "Optional[str]"
                ],
                "exclude": [
                    "Container['Taxon']"
                ],
                "min_year": [
                    "Optional[int]"
                ]
            }
        },
        "Taxon.edit_names_at_level": {
            "name": "edit_names_at_level",
            "location": 1110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "FillDataLevel"
                ],
                "age": [
                    "Optional[AgeClass]"
                ],
                "reverse": [
                    "bool"
                ]
            }
        },
        "Taxon.fill_data_for_names": {
            "name": "fill_data_for_names",
            "location": 1133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "only_with_original": [
                    "bool"
                ],
                "min_year": [
                    "Optional[int]"
                ],
                "age": [
                    "Optional[AgeClass]"
                ],
                "field": [
                    "Optional[str]"
                ],
                "level": [
                    "FillDataLevel"
                ],
                "ask_before_opening": [
                    "bool"
                ],
                "only_fill_cache": [
                    "bool"
                ],
                "filter_by_name_level": [
                    "bool"
                ],
                "skip_nofile": [
                    "bool"
                ]
            }
        },
        "Taxon.fill_field_for_names": {
            "name": "fill_field_for_names",
            "location": 1166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ],
                "exclude": [
                    "Container['Taxon']"
                ],
                "min_year": [
                    "Optional[int]"
                ]
            }
        },
        "Taxon.fill_citation_group": {
            "name": "fill_citation_group",
            "location": 1179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "age": [
                    "Optional[AgeClass]"
                ]
            }
        },
        "Taxon.count_attribute": {
            "name": "count_attribute",
            "location": 1195,
            "return": [
                "Counter[Any]"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ],
                "age": [
                    "Optional[AgeClass]"
                ]
            }
        },
        "Taxon.__str__": {
            "name": "__str__",
            "location": 1203,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taxon.__repr__": {
            "name": "__repr__",
            "location": 1206,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taxon.__getattr__": {
            "name": "__getattr__",
            "location": 1209,
            "return": [
                "'models.Name'"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str"
                ]
            }
        },
        "Taxon.__dir__": {
            "name": "__dir__",
            "location": 1232,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "fill_data_for_names.should_include": {
            "name": "should_include",
            "location": 1377,
            "return": [
                "bool"
            ],
            "arguments": {
                "nam": [
                    "models.Name"
                ]
            }
        },
        "Taxon.sorted_names.sort_key": {
            "name": "sort_key",
            "location": 128,
            "return": [
                "Tuple[(bool, str, str)]"
            ],
            "arguments": {
                "nam": [
                    "'models.Name'"
                ]
            }
        },
        "Taxon.display_type_localities.display_locs": {
            "name": "display_locs",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "by_locality": [
                    "Dict[(models.Location, List[models.Name])]"
                ],
                "depth": [
                    "int"
                ]
            }
        },
        "Taxon.stats.print_percentage": {
            "name": "print_percentage",
            "location": 1067,
            "return": [
                "float"
            ],
            "arguments": {
                "num": [
                    "int"
                ],
                "total": [
                    "int"
                ],
                "label": [
                    "str"
                ]
            }
        },
        "Taxon.stats.sort_key": {
            "name": "sort_key",
            "location": 1072,
            "return": [
                "Tuple[(float, int)]"
            ],
            "arguments": {
                "pair": [
                    "Tuple[(str, int)]"
                ]
            }
        },
        "Taxon.display_type_localities.add_region": {
            "name": "add_region",
            "location": 476,
            "return": [
                "None"
            ],
            "arguments": {
                "region": [
                    "models.Region"
                ]
            }
        },
        "Taxon.display_type_localities.display_region": {
            "name": "display_region",
            "location": 483,
            "return": [
                "None"
            ],
            "arguments": {
                "region": [
                    "models.Region"
                ],
                "depth": [
                    "int"
                ]
            }
        }
    },
    "taxonomy-master/taxonomy/db/models/test_citations.py": {
        "test_citepaper": {
            "name": "test_citepaper",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_citenormal": {
            "name": "test_citenormal",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_citelemurnews": {
            "name": "test_citelemurnews",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_citebzn": {
            "name": "test_citebzn",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_citejhe": {
            "name": "test_citejhe",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_citepalaeontology": {
            "name": "test_citepalaeontology",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_citejpal": {
            "name": "test_citejpal",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_citepalevol": {
            "name": "test_citepalevol",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_citejvp": {
            "name": "test_citejvp",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_citebibtex": {
            "name": "test_citebibtex",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_citezootaxa": {
            "name": "test_citezootaxa",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_citewp": {
            "name": "test_citewp",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "taxonomy-master/taxonomy/db/models/utils.py": {
        "make_journal_article": {
            "name": "make_journal_article",
            "location": 7,
            "return": [
                "Article"
            ],
            "arguments": {}
        }
    },
    "taxonomy-master/taxonomy/db/models/__init__.py": {}
}
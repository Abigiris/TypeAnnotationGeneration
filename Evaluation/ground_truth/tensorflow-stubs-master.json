{
    "tensorflow-stubs-master/setup.py": {
        "find_stubs": {
            "name": "find_stubs",
            "location": 5,
            "return": [],
            "arguments": {
                "package": []
            }
        }
    },
    "tensorflow-stubs-master/tensorflow-stubs/__init__.py": {
        "edit_distance": {
            "name": "edit_distance",
            "location": 161,
            "return": [
                "Any"
            ],
            "arguments": {
                "hypothesis": [
                    "Any"
                ],
                "truth": [
                    "Any"
                ],
                "normalize": [
                    "Optional[bool]"
                ],
                "name": [
                    "Optional[str]"
                ]
            }
        },
        "global_variables_initializer": {
            "name": "global_variables_initializer",
            "location": 171,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "reset_default_graph": {
            "name": "reset_default_graph",
            "location": 177,
            "return": [
                "Graph"
            ],
            "arguments": {}
        },
        "placeholder": {
            "name": "placeholder",
            "location": 183,
            "return": [
                "Any"
            ],
            "arguments": {
                "dtype": [
                    "Any"
                ],
                "shape": [
                    "Any"
                ],
                "name": [
                    "Optional[str]"
                ]
            }
        },
        "sparse_placeholder": {
            "name": "sparse_placeholder",
            "location": 193,
            "return": [
                "Any"
            ],
            "arguments": {
                "dtype": [
                    "Any"
                ],
                "shape": [
                    "Any"
                ],
                "name": [
                    "Optional[str]"
                ]
            }
        },
        "sparse_tensor_to_dense": {
            "name": "sparse_tensor_to_dense",
            "location": 204,
            "return": [
                "Any"
            ],
            "arguments": {
                "sp_input": [
                    "Any"
                ],
                "default_value": [
                    "Any"
                ],
                "validate_indices": [
                    "bool"
                ],
                "name": [
                    "Optional[str]"
                ]
            }
        },
        "shape": {
            "name": "shape",
            "location": 218,
            "return": [
                "Any"
            ],
            "arguments": {
                "input": [
                    "Any"
                ],
                "name": [
                    "Optional[str]"
                ],
                "out_type": [
                    "Any"
                ]
            }
        },
        "truncated_normal": {
            "name": "truncated_normal",
            "location": 227,
            "return": [
                "Any"
            ],
            "arguments": {
                "shape": [
                    "Any"
                ],
                "mean": [
                    "Any"
                ],
                "stddev": [
                    "Any"
                ],
                "dtype": [
                    "Any"
                ],
                "seed": [
                    "Any"
                ],
                "name": [
                    "Optional[str]"
                ]
            }
        },
        "reduce_mean": {
            "name": "reduce_mean",
            "location": 240,
            "return": [
                "Any"
            ],
            "arguments": {
                "input_tensor": [
                    "Any"
                ],
                "axis": [
                    "Any"
                ],
                "keepdims": [
                    "Any"
                ],
                "name": [
                    "Optional[str]"
                ],
                "reduction_indices": [
                    "Any"
                ],
                "keep_dims": [
                    "Any"
                ]
            }
        },
        "SparseTensor.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "indices": [
                    "Any"
                ],
                "values": [
                    "Any"
                ],
                "dense_shape": [
                    "Any"
                ]
            }
        },
        "gpu_options.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigProto.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_device_placement": [
                    "bool"
                ]
            }
        },
        "BaseSession.run": {
            "name": "run",
            "location": 114,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "fetches": [
                    "Any"
                ],
                "feed_dict": [
                    "Optional[Dict[(Any, Any)]]"
                ],
                "run_options": [
                    "Any"
                ],
                "run_metadata": [
                    "Any"
                ]
            }
        },
        "BaseSession.close": {
            "name": "close",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Session.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "Graph"
                ],
                "config": [
                    "ConfigProto"
                ]
            }
        },
        "Session.__enter__": {
            "name": "__enter__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.__exit__": {
            "name": "__exit__",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "value": [],
                "traceback": []
            }
        },
        "Session.close": {
            "name": "close",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial_value": [
                    "Any"
                ],
                "trainable": [
                    "Optional[bool]"
                ],
                "collections": [
                    "Optional[Any]"
                ],
                "validate_shape": [
                    "Optional[bool]"
                ],
                "caching_device": [
                    "Optional[Any]"
                ],
                "name": [
                    "Optional[str]"
                ],
                "variable_def": [
                    "Optional[Any]"
                ],
                "dtype": [
                    "Optional[Any]"
                ],
                "expected_shape": [
                    "Optional[Any]"
                ],
                "import_scope": [
                    "Optional[str]"
                ],
                "constraint": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "tensorflow-stubs-master/tensorflow-stubs/errors/__init__.py": {
        "OpError.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "node_def": [],
                "op": [],
                "message": [],
                "error_code": []
            }
        }
    },
    "tensorflow-stubs-master/tensorflow-stubs/nn/__init__.py": {
        "ctc_beam_search_decoder": {
            "name": "ctc_beam_search_decoder",
            "location": 4,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "inputs": [
                    "Any"
                ],
                "sequence_length": [
                    "[int]"
                ],
                "beam_width": [
                    "int"
                ],
                "top_paths": [
                    "int"
                ],
                "merge_repeated": [
                    "bool"
                ]
            }
        },
        "bidirectional_dynamic_rnn": {
            "name": "bidirectional_dynamic_rnn",
            "location": 15,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "cell_fw": [
                    "'RNNCell'"
                ],
                "cell_bw": [
                    "'RNNCell'"
                ],
                "inputs": [
                    "Any"
                ],
                "sequence_length": [
                    "Any"
                ],
                "initial_state_fw": [
                    "Any"
                ],
                "initial_state_bw": [
                    "Any"
                ],
                "dtype": [
                    "Any"
                ],
                "parallel_iterations": [
                    "Optional[int]"
                ],
                "swap_memory": [
                    "Optional[bool]"
                ],
                "time_major": [
                    "Optional[bool]"
                ],
                "scope": [
                    "Any"
                ]
            }
        },
        "ctc_loss": {
            "name": "ctc_loss",
            "location": 34,
            "return": [
                "Any"
            ],
            "arguments": {
                "labels": [
                    "'SparseTensor'"
                ],
                "inputs": [
                    "Any"
                ],
                "sequence_length": [
                    "Any"
                ],
                "preprocess_collapse_repeated": [
                    "bool"
                ],
                "ctc_merge_repeated": [
                    "bool"
                ],
                "ignore_longer_outputs_than_inputs": [
                    "bool"
                ],
                "time_major": [
                    "bool"
                ]
            }
        },
        "log_softmax": {
            "name": "log_softmax",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "logits": [
                    "Any"
                ],
                "axis": [
                    "Optional[int]"
                ],
                "name": [
                    "Optional[str]"
                ],
                "dim": [
                    "Optional[int]"
                ]
            }
        }
    },
    "tensorflow-stubs-master/tensorflow-stubs/train/__init__.py": {
        "import_meta_graph": {
            "name": "import_meta_graph",
            "location": 4,
            "return": [
                "Any"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "Saver.restore": {
            "name": "restore",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "Any"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "Saver.save": {
            "name": "save",
            "location": 18,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "sess": [
                    "Any"
                ],
                "save_path": [
                    "str"
                ],
                "global_step": [
                    "Any"
                ],
                "latest_filename": [
                    "Optional[str]"
                ],
                "meta_graph_suffix": [
                    "str"
                ],
                "write_meta_graph": [
                    "bool"
                ],
                "write_state": [
                    "bool"
                ],
                "strip_default_attrs": [
                    "bool"
                ]
            }
        }
    },
    "tensorflow-stubs-master/tests/test_stubs.py": {
        "get_test_cases": {
            "name": "get_test_cases",
            "location": 13,
            "return": [],
            "arguments": {
                "directory": [
                    "str"
                ]
            }
        },
        "test_success": {
            "name": "test_success",
            "location": 36,
            "return": [],
            "arguments": {
                "path": [],
                "py2_arg": []
            }
        },
        "test_fail": {
            "name": "test_fail",
            "location": 43,
            "return": [],
            "arguments": {
                "path": [],
                "py2_arg": []
            }
        },
        "test_reveal": {
            "name": "test_reveal",
            "location": 75,
            "return": [],
            "arguments": {
                "path": [],
                "py2_arg": []
            }
        }
    },
    "tensorflow-stubs-master/tests/fail/fail_example.py": {},
    "tensorflow-stubs-master/tests/fail/nn.py": {},
    "tensorflow-stubs-master/tests/fail/train.py": {},
    "tensorflow-stubs-master/tests/pass/errors.py": {},
    "tensorflow-stubs-master/tests/pass/nn.py": {},
    "tensorflow-stubs-master/tests/pass/train.py": {},
    "tensorflow-stubs-master/tests/reveal/reveal_example.py": {}
}
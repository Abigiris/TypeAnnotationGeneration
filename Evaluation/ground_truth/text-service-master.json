{
    "text-service-master/python/flask/run.py": {},
    "text-service-master/python/flask/app/controller.py": {
        "get_text_by_key": {
            "name": "get_text_by_key",
            "location": 22,
            "return": [
                "flask.Response"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        },
        "get_text_group": {
            "name": "get_text_group",
            "location": 28,
            "return": [
                "flask.Response"
            ],
            "arguments": {
                "group_id": [
                    "str"
                ]
            }
        },
        "check_health": {
            "name": "check_health",
            "location": 34,
            "return": [
                "flask.Response"
            ],
            "arguments": {}
        },
        "_get_language": {
            "name": "_get_language",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "text-service-master/python/flask/app/routes.py": {
        "get_text": {
            "name": "get_text",
            "location": 11,
            "return": [
                "flask.Response"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        },
        "get_text_group": {
            "name": "get_text_group",
            "location": 16,
            "return": [
                "flask.Response"
            ],
            "arguments": {
                "group_id": [
                    "str"
                ]
            }
        },
        "check_health": {
            "name": "check_health",
            "location": 21,
            "return": [
                "flask.Response"
            ],
            "arguments": {}
        }
    },
    "text-service-master/python/flask/app/__init__.py": {
        "handle_request_error": {
            "name": "handle_request_error",
            "location": 44,
            "return": [
                "flask.Response"
            ],
            "arguments": {
                "error": [
                    "RequestError"
                ]
            }
        },
        "handle_not_found": {
            "name": "handle_not_found",
            "location": 59,
            "return": [
                "flask.Response"
            ],
            "arguments": {
                "err": [
                    "werkzeug.exceptions.NotFound"
                ]
            }
        },
        "handle_method_not_allowed": {
            "name": "handle_method_not_allowed",
            "location": 69,
            "return": [
                "flask.Response"
            ],
            "arguments": {
                "err": [
                    "werkzeug.exceptions.MethodNotAllowed"
                ]
            }
        },
        "handle_internal_error": {
            "name": "handle_internal_error",
            "location": 81,
            "return": [
                "flask.Response"
            ],
            "arguments": {
                "err": [
                    "Exception"
                ]
            }
        }
    },
    "text-service-master/python/flask/app/config/logging.py": {},
    "text-service-master/python/flask/app/config/util.py": {
        "get_dsn": {
            "name": "get_dsn",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "storage_type": [
                    "str"
                ]
            }
        },
        "_get_postgres_dsn": {
            "name": "_get_postgres_dsn",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "_get_sqlite_dsn": {
            "name": "_get_sqlite_dsn",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "text-service-master/python/flask/app/config/__init__.py": {},
    "text-service-master/python/flask/app/httputil/error.py": {
        "RequestError.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "RequestError.__str__": {
            "name": "__str__",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestError.asdict": {
            "name": "asdict",
            "location": 29,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestError.status": {
            "name": "status",
            "location": 38,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BadRequestError.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "BadRequestError.status": {
            "name": "status",
            "location": 48,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnauthorizedError.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "UnauthorizedError.status": {
            "name": "status",
            "location": 58,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForbiddenError.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "ForbiddenError.status": {
            "name": "status",
            "location": 68,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotFoundError.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "NotFoundError.status": {
            "name": "status",
            "location": 78,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MethodNotAllowedError.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "MethodNotAllowedError.status": {
            "name": "status",
            "location": 88,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConflictError.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "ConflictError.status": {
            "name": "status",
            "location": 98,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreconditionRequiredError.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "PreconditionRequiredError.status": {
            "name": "status",
            "location": 108,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "InternalServerError.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "ServiceUnavilableError.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "ServiceUnavilableError.status": {
            "name": "status",
            "location": 125,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotImplementedError.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotImplementedError.status": {
            "name": "status",
            "location": 135,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseError.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cause_message": [
                    "str"
                ]
            }
        },
        "DatabaseError.full_message": {
            "name": "full_message",
            "location": 146,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "text-service-master/python/flask/app/httputil/instrumentation.py": {
        "add_request_id": {
            "name": "add_request_id",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "add_request_id_to_response": {
            "name": "add_request_id_to_response",
            "location": 56,
            "return": [
                "flask.Response"
            ],
            "arguments": {
                "response": [
                    "flask.Response"
                ]
            }
        },
        "get_request_id": {
            "name": "get_request_id",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "fail_if_missing": [
                    "bool"
                ]
            }
        },
        "trace": {
            "name": "trace",
            "location": 76,
            "return": [
                "Callable"
            ],
            "arguments": {
                "namespace": [
                    "str"
                ]
            }
        },
        "start_timer": {
            "name": "start_timer",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "stop_timer": {
            "name": "stop_timer",
            "location": 94,
            "return": [
                "flask.Response"
            ],
            "arguments": {
                "response": [
                    "flask.Response"
                ]
            }
        },
        "record_request_data": {
            "name": "record_request_data",
            "location": 101,
            "return": [
                "flask.Response"
            ],
            "arguments": {
                "response": [
                    "flask.Response"
                ]
            }
        },
        "_calculate_latency": {
            "name": "_calculate_latency",
            "location": 108,
            "return": [
                "float"
            ],
            "arguments": {
                "start_time": [
                    "float"
                ]
            }
        },
        "_parse_endpoint": {
            "name": "_parse_endpoint",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "setup_instrumentation": {
            "name": "setup_instrumentation",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ],
                "name": [
                    "str"
                ],
                "version": [
                    "str"
                ]
            }
        },
        "trace.trace_with_namespace": {
            "name": "trace_with_namespace",
            "location": 77,
            "return": [
                "Callable"
            ],
            "arguments": {
                "f": [
                    "Callable"
                ]
            }
        },
        "setup_instrumentation.metrics": {
            "name": "metrics",
            "location": 132,
            "return": [],
            "arguments": {}
        },
        "trace.trace_with_namespace.decorated": {
            "name": "decorated",
            "location": 79,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "text-service-master/python/flask/app/httputil/status.py": {},
    "text-service-master/python/flask/app/httputil/__init__.py": {
        "get_request_body": {
            "name": "get_request_body",
            "location": 13,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        },
        "get_param": {
            "name": "get_param",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "default": [
                    "Optional[str]"
                ]
            }
        },
        "get_header": {
            "name": "get_header",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "default": [
                    "Optional[str]"
                ]
            }
        },
        "create_response": {
            "name": "create_response",
            "location": 54,
            "return": [
                "flask.Response"
            ],
            "arguments": {
                "result": [
                    "Dict[(str, Any)]"
                ],
                "status": [
                    "int"
                ]
            }
        },
        "create_ok_response": {
            "name": "create_ok_response",
            "location": 62,
            "return": [
                "flask.Response"
            ],
            "arguments": {}
        }
    },
    "text-service-master/python/flask/app/models/__init__.py": {
        "Language.__repr__": {
            "name": "__repr__",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TranslatedText.__repr__": {
            "name": "__repr__",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextGroupMembership.__repr__": {
            "name": "__repr__",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextGroup.__repr__": {
            "name": "__repr__",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "text-service-master/python/flask/app/repository/language_repo.py": {
        "find_language": {
            "name": "find_language",
            "location": 12,
            "return": [
                "Optional[Language]"
            ],
            "arguments": {
                "id": [
                    "str"
                ]
            }
        }
    },
    "text-service-master/python/flask/app/repository/text_repo.py": {
        "find_by_key": {
            "name": "find_by_key",
            "location": 12,
            "return": [
                "Optional[TranslatedText]"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "language": [
                    "str"
                ]
            }
        },
        "find_by_keys": {
            "name": "find_by_keys",
            "location": 19,
            "return": [
                "List[TranslatedText]"
            ],
            "arguments": {
                "keys": [
                    "List[str]"
                ],
                "language": [
                    "str"
                ]
            }
        },
        "find_group": {
            "name": "find_group",
            "location": 27,
            "return": [
                "Optional[TextGroup]"
            ],
            "arguments": {
                "group_id": []
            }
        }
    },
    "text-service-master/python/flask/app/service/health.py": {
        "check": {
            "name": "check",
            "location": 17,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {}
        },
        "_db_connected": {
            "name": "_db_connected",
            "location": 26,
            "return": [
                "Tuple[(str, bool)]"
            ],
            "arguments": {}
        }
    },
    "text-service-master/python/flask/app/service/text_service.py": {
        "get_text_by_key": {
            "name": "get_text_by_key",
            "location": 14,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "language": [
                    "str"
                ]
            }
        },
        "get_text_by_group": {
            "name": "get_text_by_group",
            "location": 23,
            "return": [
                "Dict[(str, Optional[str])]"
            ],
            "arguments": {
                "group_id": [
                    "str"
                ],
                "language": [
                    "str"
                ]
            }
        },
        "_assert_group": {
            "name": "_assert_group",
            "location": 32,
            "return": [
                "TextGroup"
            ],
            "arguments": {
                "group_id": [
                    "str"
                ]
            }
        },
        "_assert_language_support": {
            "name": "_assert_language_support",
            "location": 40,
            "return": [
                "Language"
            ],
            "arguments": {
                "language_id": [
                    "str"
                ]
            }
        }
    },
    "text-service-master/python/flask/migrations/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "run_migrations_online.process_revision_directives": {
            "name": "process_revision_directives",
            "location": 61,
            "return": [],
            "arguments": {
                "context": [],
                "revision": [],
                "directives": []
            }
        }
    },
    "text-service-master/python/flask/migrations/versions/4993cfc3f4b6_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 58,
            "return": [],
            "arguments": {}
        }
    },
    "text-service-master/python/flask/tests/test_health.py": {
        "test_get_health_success": {
            "name": "test_get_health_success",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_get_health_fail": {
            "name": "test_get_health_fail",
            "location": 19,
            "return": [],
            "arguments": {}
        }
    },
    "text-service-master/python/flask/tests/test_texts_crud.py": {
        "test_get_text": {
            "name": "test_get_text",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_get_text_by_group": {
            "name": "test_get_text_by_group",
            "location": 50,
            "return": [],
            "arguments": {}
        }
    },
    "text-service-master/python/flask/tests/test_version.py": {
        "test_version": {
            "name": "test_version",
            "location": 8,
            "return": [],
            "arguments": {}
        }
    },
    "text-service-master/python/flask/tests/__init__.py": {
        "new_id": {
            "name": "new_id",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "insert_items": {
            "name": "insert_items",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "items": [
                    "List[db.Model]"
                ]
            }
        },
        "headers": {
            "name": "headers",
            "location": 27,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "language": [
                    "Optional[str]"
                ]
            }
        },
        "TestEnvironment.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "List[db.Model]"
                ]
            }
        },
        "TestEnvironment.__enter__": {
            "name": "__enter__",
            "location": 39,
            "return": [
                "FlaskClient"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnvironment.__exit__": {
            "name": "__exit__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [],
                "value": [],
                "traceback": []
            }
        }
    }
}
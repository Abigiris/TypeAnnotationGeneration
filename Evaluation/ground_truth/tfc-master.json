{
    "tfc-master/dd.py": {
        "draw_frame": {
            "name": "draw_frame",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "str"
                ],
                "message": [
                    "str"
                ],
                "high": [
                    "bool"
                ]
            }
        },
        "animate": {
            "name": "animate",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "str"
                ]
            }
        },
        "rx_loop": {
            "name": "rx_loop",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "io_queue": [
                    "'Queue[Any]'"
                ],
                "input_socket": [
                    "int"
                ]
            }
        },
        "tx_loop": {
            "name": "tx_loop",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "io_queue": [
                    "'Queue[Any]'"
                ],
                "output_socket": [
                    "int"
                ],
                "argv": [
                    "str"
                ],
                "unit_test": [
                    "bool"
                ]
            }
        },
        "process_arguments": {
            "name": "process_arguments",
            "location": 118,
            "return": [
                "Tuple[(str, int, int)]"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "queues": [
                    "Dict[(bytes, 'Queue[Any]')]"
                ]
            }
        },
        "draw_frame.c_print": {
            "name": "c_print",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        }
    },
    "tfc-master/relay.py": {
        "main": {
            "name": "main",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tfc-master/tfc.py": {
        "main": {
            "name": "main",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tfc-master/qubes/writer.py": {
        "ensure_dir": {
            "name": "ensure_dir",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "directory": [
                    "str"
                ]
            }
        },
        "store_unique": {
            "name": "store_unique",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "file_data": [
                    "bytes"
                ],
                "file_dir": [
                    "str"
                ],
                "file_name": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tfc-master/src/__init__.py": {},
    "tfc-master/src/common/crypto.py": {
        "blake2b": {
            "name": "blake2b",
            "location": 59,
            "return": [
                "bytes"
            ],
            "arguments": {
                "message": [
                    "bytes"
                ],
                "key": [
                    "bytes"
                ],
                "salt": [
                    "bytes"
                ],
                "person": [
                    "bytes"
                ],
                "digest_size": [
                    "int"
                ]
            }
        },
        "argon2_kdf": {
            "name": "argon2_kdf",
            "location": 141,
            "return": [
                "bytes"
            ],
            "arguments": {
                "password": [
                    "str"
                ],
                "salt": [
                    "bytes"
                ],
                "time_cost": [
                    "int"
                ],
                "memory_cost": [
                    "int"
                ],
                "parallelism": [
                    "int"
                ]
            }
        },
        "encrypt_and_sign": {
            "name": "encrypt_and_sign",
            "location": 503,
            "return": [
                "bytes"
            ],
            "arguments": {
                "plaintext": [
                    "bytes"
                ],
                "key": [
                    "bytes"
                ],
                "ad": [
                    "bytes"
                ]
            }
        },
        "auth_and_decrypt": {
            "name": "auth_and_decrypt",
            "location": 592,
            "return": [
                "bytes"
            ],
            "arguments": {
                "nonce_ct_tag": [
                    "bytes"
                ],
                "key": [
                    "bytes"
                ],
                "database": [
                    "str"
                ],
                "ad": [
                    "bytes"
                ]
            }
        },
        "byte_padding": {
            "name": "byte_padding",
            "location": 629,
            "return": [
                "bytes"
            ],
            "arguments": {
                "bytestring": [
                    "bytes"
                ]
            }
        },
        "rm_padding_bytes": {
            "name": "rm_padding_bytes",
            "location": 665,
            "return": [
                "bytes"
            ],
            "arguments": {
                "bytestring": [
                    "bytes"
                ]
            }
        },
        "csprng": {
            "name": "csprng",
            "location": 679,
            "return": [
                "bytes"
            ],
            "arguments": {
                "key_length": [
                    "int"
                ]
            }
        },
        "check_kernel_version": {
            "name": "check_kernel_version",
            "location": 1122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "X448.generate_private_key": {
            "name": "generate_private_key",
            "location": 321,
            "return": [
                "'X448PrivateKey'"
            ],
            "arguments": {}
        },
        "X448.derive_public_key": {
            "name": "derive_public_key",
            "location": 412,
            "return": [
                "bytes"
            ],
            "arguments": {
                "private_key": [
                    "'X448PrivateKey'"
                ]
            }
        },
        "X448.shared_key": {
            "name": "shared_key",
            "location": 426,
            "return": [
                "bytes"
            ],
            "arguments": {
                "private_key": [
                    "'X448PrivateKey'"
                ],
                "public_key": [
                    "bytes"
                ]
            }
        },
        "X448.derive_subkeys": {
            "name": "derive_subkeys",
            "location": 464,
            "return": [
                "Tuple[(bytes, bytes, bytes, bytes, bytes, bytes)]"
            ],
            "arguments": {
                "dh_shared_key": [
                    "bytes"
                ],
                "tfc_public_key_user": [
                    "bytes"
                ],
                "tfc_public_key_contact": [
                    "bytes"
                ]
            }
        }
    },
    "tfc-master/src/common/database.py": {
        "TFCDatabase.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database_name": [
                    "str"
                ],
                "master_key": [
                    "'MasterKey'"
                ]
            }
        },
        "TFCDatabase.write_to_file": {
            "name": "write_to_file",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ],
                "data": [
                    "bytes"
                ]
            }
        },
        "TFCDatabase.verify_file": {
            "name": "verify_file",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "database_name": [
                    "str"
                ]
            }
        },
        "TFCDatabase.ensure_temp_write": {
            "name": "ensure_temp_write",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ct_bytes": [
                    "bytes"
                ]
            }
        },
        "TFCDatabase.store_database": {
            "name": "store_database",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pt_bytes": [
                    "bytes"
                ],
                "replace": [
                    "bool"
                ]
            }
        },
        "TFCDatabase.replace_database": {
            "name": "replace_database",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TFCDatabase.load_database": {
            "name": "load_database",
            "location": 106,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "TFCUnencryptedDatabase.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database_name": [
                    "str"
                ]
            }
        },
        "TFCUnencryptedDatabase.write_to_file": {
            "name": "write_to_file",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ],
                "data": [
                    "bytes"
                ]
            }
        },
        "TFCUnencryptedDatabase.verify_file": {
            "name": "verify_file",
            "location": 150,
            "return": [
                "bool"
            ],
            "arguments": {
                "database_name": [
                    "str"
                ]
            }
        },
        "TFCUnencryptedDatabase.ensure_temp_write": {
            "name": "ensure_temp_write",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "TFCUnencryptedDatabase.store_unencrypted_database": {
            "name": "store_unencrypted_database",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "TFCUnencryptedDatabase.replace_database": {
            "name": "replace_database",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TFCUnencryptedDatabase.load_database": {
            "name": "load_database",
            "location": 193,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageLog.__init__": {
            "name": "__init__",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database_name": [
                    "str"
                ],
                "database_key": [
                    "bytes"
                ]
            }
        },
        "MessageLog.__iter__": {
            "name": "__iter__",
            "location": 239,
            "return": [
                "Iterator[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageLog.replace_database": {
            "name": "replace_database",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageLog.verify_file": {
            "name": "verify_file",
            "location": 254,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "database_name": [
                    "str"
                ]
            }
        },
        "MessageLog.check_for_temp_database": {
            "name": "check_for_temp_database",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageLog.create_table": {
            "name": "create_table",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageLog.insert_log_entry": {
            "name": "insert_log_entry",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pt_log_entry": [
                    "bytes"
                ]
            }
        },
        "MessageLog.close_database": {
            "name": "close_database",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tfc-master/src/common/db_contacts.py": {
        "Contact.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "onion_pub_key": [
                    "bytes"
                ],
                "nick": [
                    "str"
                ],
                "tx_fingerprint": [
                    "bytes"
                ],
                "rx_fingerprint": [
                    "bytes"
                ],
                "kex_status": [
                    "bytes"
                ],
                "log_messages": [
                    "bool"
                ],
                "file_reception": [
                    "bool"
                ],
                "notifications": [
                    "bool"
                ]
            }
        },
        "Contact.serialize_c": {
            "name": "serialize_c",
            "location": 157,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Contact.uses_psk": {
            "name": "uses_psk",
            "location": 177,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContactList.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "master_key": [
                    "'MasterKey'"
                ],
                "settings": [
                    "'Settings'"
                ]
            }
        },
        "ContactList.__iter__": {
            "name": "__iter__",
            "location": 226,
            "return": [
                "Iterator[Contact]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContactList.__len__": {
            "name": "__len__",
            "location": 230,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContactList.store_contacts": {
            "name": "store_contacts",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "replace": [
                    "bool"
                ]
            }
        },
        "ContactList._load_contacts": {
            "name": "_load_contacts",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContactList.generate_dummy_contact": {
            "name": "generate_dummy_contact",
            "location": 294,
            "return": [
                "Contact"
            ],
            "arguments": {}
        },
        "ContactList._dummy_contacts": {
            "name": "_dummy_contacts",
            "location": 310,
            "return": [
                "List[Contact]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContactList.add_contact": {
            "name": "add_contact",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "onion_pub_key": [
                    "bytes"
                ],
                "nick": [
                    "str"
                ],
                "tx_fingerprint": [
                    "bytes"
                ],
                "rx_fingerprint": [
                    "bytes"
                ],
                "kex_status": [
                    "bytes"
                ],
                "log_messages": [
                    "bool"
                ],
                "file_reception": [
                    "bool"
                ],
                "notifications": [
                    "bool"
                ]
            }
        },
        "ContactList.remove_contact_by_pub_key": {
            "name": "remove_contact_by_pub_key",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "onion_pub_key": [
                    "bytes"
                ]
            }
        },
        "ContactList.remove_contact_by_address_or_nick": {
            "name": "remove_contact_by_address_or_nick",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selector": [
                    "str"
                ]
            }
        },
        "ContactList.get_contact_by_pub_key": {
            "name": "get_contact_by_pub_key",
            "location": 389,
            "return": [
                "Contact"
            ],
            "arguments": {
                "self": [],
                "onion_pub_key": [
                    "bytes"
                ]
            }
        },
        "ContactList.get_contact_by_address_or_nick": {
            "name": "get_contact_by_address_or_nick",
            "location": 396,
            "return": [
                "Contact"
            ],
            "arguments": {
                "self": [],
                "selector": [
                    "str"
                ]
            }
        },
        "ContactList.get_nick_by_pub_key": {
            "name": "get_nick_by_pub_key",
            "location": 403,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "onion_pub_key": [
                    "bytes"
                ]
            }
        },
        "ContactList.get_list_of_contacts": {
            "name": "get_list_of_contacts",
            "location": 407,
            "return": [
                "List[Contact]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContactList.get_list_of_addresses": {
            "name": "get_list_of_addresses",
            "location": 411,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContactList.get_list_of_nicks": {
            "name": "get_list_of_nicks",
            "location": 415,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContactList.get_list_of_pub_keys": {
            "name": "get_list_of_pub_keys",
            "location": 419,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContactList.get_list_of_pending_pub_keys": {
            "name": "get_list_of_pending_pub_keys",
            "location": 423,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContactList.get_list_of_existing_pub_keys": {
            "name": "get_list_of_existing_pub_keys",
            "location": 427,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContactList.contact_selectors": {
            "name": "contact_selectors",
            "location": 433,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContactList.has_contacts": {
            "name": "has_contacts",
            "location": 437,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContactList.has_only_pending_contacts": {
            "name": "has_only_pending_contacts",
            "location": 441,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContactList.has_pub_key": {
            "name": "has_pub_key",
            "location": 445,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "onion_pub_key": [
                    "bytes"
                ]
            }
        },
        "ContactList.has_local_contact": {
            "name": "has_local_contact",
            "location": 449,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContactList.print_contacts": {
            "name": "print_contacts",
            "location": 453,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tfc-master/src/common/db_groups.py": {
        "Group.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "group_id": [
                    "bytes"
                ],
                "log_messages": [
                    "bool"
                ],
                "notifications": [
                    "bool"
                ],
                "members": [
                    "List['Contact']"
                ],
                "settings": [
                    "'Settings'"
                ],
                "store_groups": [
                    "Callable[(..., None)]"
                ]
            }
        },
        "Group.__iter__": {
            "name": "__iter__",
            "location": 121,
            "return": [
                "Iterator[Contact]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.__len__": {
            "name": "__len__",
            "location": 125,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.serialize_g": {
            "name": "serialize_g",
            "location": 129,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.add_members": {
            "name": "add_members",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contacts": [
                    "List['Contact']"
                ]
            }
        },
        "Group.remove_members": {
            "name": "remove_members",
            "location": 159,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pub_keys": [
                    "List[bytes]"
                ]
            }
        },
        "Group.get_list_of_member_pub_keys": {
            "name": "get_list_of_member_pub_keys",
            "location": 170,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.has_member": {
            "name": "has_member",
            "location": 174,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "onion_pub_key": [
                    "bytes"
                ]
            }
        },
        "Group.empty": {
            "name": "empty",
            "location": 178,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupList.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "master_key": [
                    "'MasterKey'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "contact_list": [
                    "'ContactList'"
                ]
            }
        },
        "GroupList.__iter__": {
            "name": "__iter__",
            "location": 228,
            "return": [
                "Iterator[Group]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupList.__len__": {
            "name": "__len__",
            "location": 232,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupList.store_groups": {
            "name": "store_groups",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "replace": [
                    "bool"
                ]
            }
        },
        "GroupList._load_groups": {
            "name": "_load_groups",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupList._check_db_settings": {
            "name": "_check_db_settings",
            "location": 317,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "number_of_actual_groups": [
                    "int"
                ],
                "members_in_largest_group": [
                    "int"
                ]
            }
        },
        "GroupList._generate_group_db_header": {
            "name": "_generate_group_db_header",
            "location": 343,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupList._generate_dummy_group": {
            "name": "_generate_dummy_group",
            "location": 378,
            "return": [
                "'Group'"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupList._dummy_groups": {
            "name": "_dummy_groups",
            "location": 395,
            "return": [
                "List[Group]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupList.add_group": {
            "name": "add_group",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "group_id": [
                    "bytes"
                ],
                "log_messages": [
                    "bool"
                ],
                "notifications": [
                    "bool"
                ],
                "members": [
                    "List['Contact']"
                ]
            }
        },
        "GroupList.remove_group_by_name": {
            "name": "remove_group_by_name",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "GroupList.remove_group_by_id": {
            "name": "remove_group_by_id",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group_id": [
                    "bytes"
                ]
            }
        },
        "GroupList.get_group": {
            "name": "get_group",
            "location": 444,
            "return": [
                "Group"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "GroupList.get_group_by_id": {
            "name": "get_group_by_id",
            "location": 448,
            "return": [
                "Group"
            ],
            "arguments": {
                "self": [],
                "group_id": [
                    "bytes"
                ]
            }
        },
        "GroupList.get_list_of_group_names": {
            "name": "get_list_of_group_names",
            "location": 452,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupList.get_list_of_group_ids": {
            "name": "get_list_of_group_ids",
            "location": 456,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupList.get_list_of_hr_group_ids": {
            "name": "get_list_of_hr_group_ids",
            "location": 460,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupList.get_group_members": {
            "name": "get_group_members",
            "location": 464,
            "return": [
                "List['Contact']"
            ],
            "arguments": {
                "self": [],
                "group_id": [
                    "bytes"
                ]
            }
        },
        "GroupList.has_group": {
            "name": "has_group",
            "location": 468,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "GroupList.has_group_id": {
            "name": "has_group_id",
            "location": 472,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "group_id": [
                    "bytes"
                ]
            }
        },
        "GroupList.largest_group": {
            "name": "largest_group",
            "location": 476,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupList.print_groups": {
            "name": "print_groups",
            "location": 480,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tfc-master/src/common/db_keys.py": {
        "KeySet.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "onion_pub_key": [
                    "bytes"
                ],
                "tx_mk": [
                    "bytes"
                ],
                "rx_mk": [
                    "bytes"
                ],
                "tx_hk": [
                    "bytes"
                ],
                "rx_hk": [
                    "bytes"
                ],
                "tx_harac": [
                    "int"
                ],
                "rx_harac": [
                    "int"
                ],
                "store_keys": [
                    "Callable[(..., None)]"
                ]
            }
        },
        "KeySet.serialize_k": {
            "name": "serialize_k",
            "location": 98,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeySet.rotate_tx_mk": {
            "name": "rotate_tx_mk",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeySet.update_mk": {
            "name": "update_mk",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "str"
                ],
                "key": [
                    "bytes"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "KeyList.__init__": {
            "name": "__init__",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "master_key": [
                    "'MasterKey'"
                ],
                "settings": [
                    "'Settings'"
                ]
            }
        },
        "KeyList.store_keys": {
            "name": "store_keys",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "replace": [
                    "bool"
                ]
            }
        },
        "KeyList._load_keys": {
            "name": "_load_keys",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyList.generate_dummy_keyset": {
            "name": "generate_dummy_keyset",
            "location": 247,
            "return": [
                "'KeySet'"
            ],
            "arguments": {}
        },
        "KeyList._dummy_keysets": {
            "name": "_dummy_keysets",
            "location": 266,
            "return": [
                "List[KeySet]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyList.add_keyset": {
            "name": "add_keyset",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "onion_pub_key": [
                    "bytes"
                ],
                "tx_mk": [
                    "bytes"
                ],
                "rx_mk": [
                    "bytes"
                ],
                "tx_hk": [
                    "bytes"
                ],
                "rx_hk": [
                    "bytes"
                ]
            }
        },
        "KeyList.remove_keyset": {
            "name": "remove_keyset",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "onion_pub_key": [
                    "bytes"
                ]
            }
        },
        "KeyList.change_master_key": {
            "name": "change_master_key",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "queues": [
                    "'QueueDict'"
                ]
            }
        },
        "KeyList.update_database": {
            "name": "update_database",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "'Settings'"
                ]
            }
        },
        "KeyList.get_keyset": {
            "name": "get_keyset",
            "location": 336,
            "return": [
                "KeySet"
            ],
            "arguments": {
                "self": [],
                "onion_pub_key": [
                    "bytes"
                ]
            }
        },
        "KeyList.get_list_of_pub_keys": {
            "name": "get_list_of_pub_keys",
            "location": 343,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyList.has_keyset": {
            "name": "has_keyset",
            "location": 347,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "onion_pub_key": [
                    "bytes"
                ]
            }
        },
        "KeyList.has_rx_mk": {
            "name": "has_rx_mk",
            "location": 351,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "onion_pub_key": [
                    "bytes"
                ]
            }
        },
        "KeyList.has_local_keyset": {
            "name": "has_local_keyset",
            "location": 363,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyList.manage": {
            "name": "manage",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "queues": [
                    "'QueueDict'"
                ],
                "command": [
                    "str"
                ]
            }
        }
    },
    "tfc-master/src/common/db_logs.py": {
        "log_writer_loop": {
            "name": "log_writer_loop",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "queues": [
                    "Dict[(bytes, 'Queue[Any]')]"
                ],
                "settings": [
                    "'Settings'"
                ],
                "message_log": [
                    "'MessageLog'"
                ],
                "unit_test": [
                    "bool"
                ]
            }
        },
        "check_setting_queues": {
            "name": "check_setting_queues",
            "location": 138,
            "return": [
                "Tuple[(bool, bool)]"
            ],
            "arguments": {
                "traffic_masking": [
                    "bool"
                ],
                "traffic_masking_queue": [
                    "'Queue[Any]'"
                ],
                "logfile_masking": [
                    "bool"
                ],
                "logfile_masking_queue": [
                    "'Queue[Any]'"
                ]
            }
        },
        "update_logging_state": {
            "name": "update_logging_state",
            "location": 153,
            "return": [
                "bool"
            ],
            "arguments": {
                "assembly_packet": [
                    "bytes"
                ],
                "logging_state": [
                    "bool"
                ],
                "log_messages": [
                    "bool"
                ],
                "log_setting_queue": [
                    "'Queue[Any]'"
                ]
            }
        },
        "write_log_entry": {
            "name": "write_log_entry",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "assembly_packet": [
                    "bytes"
                ],
                "onion_pub_key": [
                    "bytes"
                ],
                "message_log": [
                    "MessageLog"
                ],
                "origin": [
                    "bytes"
                ]
            }
        },
        "check_log_file_exists": {
            "name": "check_log_file_exists",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ]
            }
        },
        "access_logs": {
            "name": "access_logs",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "window": [
                    "Union[('TxWindow', 'RxWindow')]"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "master_key": [
                    "'MasterKey'"
                ],
                "msg_to_load": [
                    "int"
                ],
                "export": [
                    "bool"
                ]
            }
        },
        "add_complete_message_to_message_list": {
            "name": "add_complete_message_to_message_list",
            "location": 264,
            "return": [
                "bytes"
            ],
            "arguments": {
                "timestamp": [
                    "bytes"
                ],
                "onion_pub_key": [
                    "bytes"
                ],
                "group_msg_id": [
                    "bytes"
                ],
                "packet": [
                    "'Packet'"
                ],
                "message_list": [
                    "List[MsgTuple]"
                ],
                "window": [
                    "Union[('TxWindow', 'RxWindow')]"
                ]
            }
        },
        "print_logs": {
            "name": "print_logs",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "message_list": [
                    "List[MsgTuple]"
                ],
                "export": [
                    "bool"
                ],
                "msg_to_load": [
                    "int"
                ],
                "window": [
                    "Union[('TxWindow', 'RxWindow')]"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "settings": [
                    "'Settings'"
                ]
            }
        },
        "change_log_db_key": {
            "name": "change_log_db_key",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "old_key": [
                    "bytes"
                ],
                "new_key": [
                    "bytes"
                ],
                "settings": [
                    "'Settings'"
                ]
            }
        },
        "replace_log_db": {
            "name": "replace_log_db",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "'Settings'"
                ]
            }
        },
        "remove_logs": {
            "name": "remove_logs",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "master_key": [
                    "'MasterKey'"
                ],
                "selector": [
                    "bytes"
                ]
            }
        },
        "check_packet_fate": {
            "name": "check_packet_fate",
            "location": 437,
            "return": [
                "bool"
            ],
            "arguments": {
                "entries_to_keep": [
                    "List[bytes]"
                ],
                "packet": [
                    "'Packet'"
                ],
                "removed": [
                    "bool"
                ],
                "selector": [
                    "bytes"
                ]
            }
        }
    },
    "tfc-master/src/common/db_masterkey.py": {
        "MasterKey.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "operation": [
                    "str"
                ],
                "local_test": [
                    "bool"
                ]
            }
        },
        "MasterKey.timed_key_derivation": {
            "name": "timed_key_derivation",
            "location": 68,
            "return": [
                "Tuple[(bytes, float)]"
            ],
            "arguments": {
                "password": [
                    "str"
                ],
                "salt": [
                    "bytes"
                ],
                "time_cost": [
                    "int"
                ],
                "memory_cost": [
                    "int"
                ],
                "parallelism": [
                    "int"
                ]
            }
        },
        "MasterKey.get_available_memory": {
            "name": "get_available_memory",
            "location": 81,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MasterKey.generate_master_password": {
            "name": "generate_master_password",
            "location": 93,
            "return": [
                "Tuple[(int, str)]"
            ],
            "arguments": {}
        },
        "MasterKey.new_master_key": {
            "name": "new_master_key",
            "location": 105,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "replace": [
                    "bool"
                ]
            }
        },
        "MasterKey.determine_time_cost": {
            "name": "determine_time_cost",
            "location": 206,
            "return": [
                "Tuple[(int, float, bytes)]"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ],
                "salt": [
                    "bytes"
                ],
                "memory_cost": [
                    "int"
                ],
                "parallelism": [
                    "int"
                ]
            }
        },
        "MasterKey.determine_memory_cost": {
            "name": "determine_memory_cost",
            "location": 302,
            "return": [
                "Tuple[(int, bytes)]"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ],
                "salt": [
                    "bytes"
                ],
                "time_cost": [
                    "int"
                ],
                "memory_cost": [
                    "int"
                ],
                "parallelism": [
                    "int"
                ]
            }
        },
        "MasterKey.replace_database_data": {
            "name": "replace_database_data",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MasterKey.load_master_key": {
            "name": "load_master_key",
            "location": 356,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "MasterKey.new_password": {
            "name": "new_password",
            "location": 392,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "purpose": [
                    "str"
                ]
            }
        },
        "MasterKey.get_password": {
            "name": "get_password",
            "location": 417,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "purpose": [
                    "str"
                ]
            }
        },
        "MasterKey.authenticate_action": {
            "name": "authenticate_action",
            "location": 421,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tfc-master/src/common/db_onion.py": {
        "OnionService.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "master_key": [
                    "'MasterKey'"
                ]
            }
        },
        "OnionService.new_onion_service_private_key": {
            "name": "new_onion_service_private_key",
            "location": 77,
            "return": [
                "bytes"
            ],
            "arguments": {}
        },
        "OnionService.store_onion_service_private_key": {
            "name": "store_onion_service_private_key",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "replace": [
                    "bool"
                ]
            }
        },
        "OnionService.load_onion_service_private_key": {
            "name": "load_onion_service_private_key",
            "location": 88,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "OnionService.new_confirmation_code": {
            "name": "new_confirmation_code",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tfc-master/src/common/db_settings.py": {
        "Settings.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "master_key": [
                    "'MasterKey'"
                ],
                "operation": [
                    "str"
                ],
                "local_test": [
                    "bool"
                ],
                "qubes": [
                    "bool"
                ]
            }
        },
        "Settings.store_settings": {
            "name": "store_settings",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "replace": [
                    "bool"
                ]
            }
        },
        "Settings.load_settings": {
            "name": "load_settings",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.change_setting": {
            "name": "change_setting",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value_str": [
                    "str"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ]
            }
        },
        "Settings.validate_key_value_pair": {
            "name": "validate_key_value_pair",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "value": [
                    "'SettingType'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ]
            }
        },
        "Settings.validate_database_limit": {
            "name": "validate_database_limit",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "value": [
                    "'SettingType'"
                ]
            }
        },
        "Settings.validate_max_number_of_group_members": {
            "name": "validate_max_number_of_group_members",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "value": [
                    "'SettingType'"
                ],
                "group_list": [
                    "'GroupList'"
                ]
            }
        },
        "Settings.validate_max_number_of_groups": {
            "name": "validate_max_number_of_groups",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "value": [
                    "'SettingType'"
                ],
                "group_list": [
                    "'GroupList'"
                ]
            }
        },
        "Settings.validate_max_number_of_contacts": {
            "name": "validate_max_number_of_contacts",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "value": [
                    "'SettingType'"
                ],
                "contact_list": [
                    "'ContactList'"
                ]
            }
        },
        "Settings.validate_new_message_notify_duration": {
            "name": "validate_new_message_notify_duration",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "value": [
                    "'SettingType'"
                ]
            }
        },
        "Settings.validate_traffic_masking_delay": {
            "name": "validate_traffic_masking_delay",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "value": [
                    "'SettingType'"
                ],
                "contact_list": [
                    "'ContactList'"
                ]
            }
        },
        "Settings.print_settings": {
            "name": "print_settings",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tfc-master/src/common/encoding.py": {
        "sha256d": {
            "name": "sha256d",
            "location": 34,
            "return": [
                "bytes"
            ],
            "arguments": {
                "message": [
                    "bytes"
                ]
            }
        },
        "b58encode": {
            "name": "b58encode",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "byte_string": [
                    "bytes"
                ],
                "public_key": [
                    "bool"
                ]
            }
        },
        "b58decode": {
            "name": "b58decode",
            "location": 69,
            "return": [
                "bytes"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "public_key": [
                    "bool"
                ]
            }
        },
        "b85encode": {
            "name": "b85encode",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "bytes"
                ]
            }
        },
        "b10encode": {
            "name": "b10encode",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "fingerprint": [
                    "bytes"
                ]
            }
        },
        "unicode_padding": {
            "name": "unicode_padding",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "rm_padding_str": {
            "name": "rm_padding_str",
            "location": 156,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "onion_address_to_pub_key": {
            "name": "onion_address_to_pub_key",
            "location": 163,
            "return": [
                "bytes"
            ],
            "arguments": {
                "account": [
                    "str"
                ]
            }
        },
        "bool_to_bytes": {
            "name": "bool_to_bytes",
            "location": 172,
            "return": [
                "bytes"
            ],
            "arguments": {
                "boolean": [
                    "bool"
                ]
            }
        },
        "int_to_bytes": {
            "name": "int_to_bytes",
            "location": 177,
            "return": [
                "bytes"
            ],
            "arguments": {
                "integer": [
                    "int"
                ]
            }
        },
        "double_to_bytes": {
            "name": "double_to_bytes",
            "location": 182,
            "return": [
                "bytes"
            ],
            "arguments": {
                "double_": [
                    "float"
                ]
            }
        },
        "str_to_bytes": {
            "name": "str_to_bytes",
            "location": 187,
            "return": [
                "bytes"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "pub_key_to_onion_address": {
            "name": "pub_key_to_onion_address",
            "location": 197,
            "return": [
                "str"
            ],
            "arguments": {
                "public_key": [
                    "bytes"
                ]
            }
        },
        "pub_key_to_short_address": {
            "name": "pub_key_to_short_address",
            "location": 212,
            "return": [
                "str"
            ],
            "arguments": {
                "public_key": [
                    "bytes"
                ]
            }
        },
        "bytes_to_bool": {
            "name": "bytes_to_bool",
            "location": 217,
            "return": [
                "bool"
            ],
            "arguments": {
                "byte_string": [
                    "Union[(bytes, int)]"
                ]
            }
        },
        "bytes_to_int": {
            "name": "bytes_to_int",
            "location": 224,
            "return": [
                "int"
            ],
            "arguments": {
                "byte_string": [
                    "bytes"
                ]
            }
        },
        "bytes_to_double": {
            "name": "bytes_to_double",
            "location": 230,
            "return": [
                "float"
            ],
            "arguments": {
                "byte_string": [
                    "bytes"
                ]
            }
        },
        "bytes_to_str": {
            "name": "bytes_to_str",
            "location": 236,
            "return": [
                "str"
            ],
            "arguments": {
                "byte_string": [
                    "bytes"
                ]
            }
        },
        "bytes_to_timestamp": {
            "name": "bytes_to_timestamp",
            "location": 244,
            "return": [
                "datetime"
            ],
            "arguments": {
                "byte_string": [
                    "bytes"
                ]
            }
        }
    },
    "tfc-master/src/common/exceptions.py": {
        "graceful_exit": {
            "name": "graceful_exit",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "clear": [
                    "bool"
                ],
                "exit_code": [
                    "int"
                ]
            }
        },
        "CriticalError.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error_message": [
                    "str"
                ],
                "exit_code": [
                    "int"
                ]
            }
        },
        "SoftError.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "window": [
                    "Optional['RxWindow']"
                ],
                "output": [
                    "bool"
                ],
                "bold": [
                    "bool"
                ],
                "head_clear": [
                    "bool"
                ],
                "tail_clear": [
                    "bool"
                ],
                "delay": [
                    "float"
                ],
                "head": [
                    "int"
                ],
                "tail": [
                    "int"
                ],
                "ts": [
                    "Optional['datetime']"
                ]
            }
        }
    },
    "tfc-master/src/common/gateway.py": {
        "gateway_loop": {
            "name": "gateway_loop",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "queues": [
                    "Dict[(bytes, 'Queue[Tuple[datetime, bytes]]')]"
                ],
                "gateway": [
                    "'Gateway'"
                ],
                "unit_test": [
                    "bool"
                ]
            }
        },
        "Gateway.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "operation": [
                    "str"
                ],
                "local_test": [
                    "bool"
                ],
                "dd_sockets": [
                    "bool"
                ],
                "qubes": [
                    "bool"
                ]
            }
        },
        "Gateway.establish_serial": {
            "name": "establish_serial",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gateway.send_over_qrexec": {
            "name": "send_over_qrexec",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "packet": [
                    "bytes"
                ]
            }
        },
        "Gateway.write": {
            "name": "write",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "orig_packet": [
                    "bytes"
                ]
            }
        },
        "Gateway.read_socket": {
            "name": "read_socket",
            "location": 196,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gateway.read_qubes_buffer_file": {
            "name": "read_qubes_buffer_file",
            "location": 211,
            "return": [
                "bytes"
            ],
            "arguments": {}
        },
        "Gateway.read_serial": {
            "name": "read_serial",
            "location": 241,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gateway.read": {
            "name": "read",
            "location": 274,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gateway.add_error_correction": {
            "name": "add_error_correction",
            "location": 282,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "packet": [
                    "bytes"
                ]
            }
        },
        "Gateway.detect_errors": {
            "name": "detect_errors",
            "location": 303,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "packet": [
                    "bytes"
                ]
            }
        },
        "Gateway.search_serial_interface": {
            "name": "search_serial_interface",
            "location": 324,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gateway.server_establish_socket": {
            "name": "server_establish_socket",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gateway.client_establish_socket": {
            "name": "client_establish_socket",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GatewaySettings.__init__": {
            "name": "__init__",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "operation": [
                    "str"
                ],
                "local_test": [
                    "bool"
                ],
                "dd_sockets": [
                    "bool"
                ],
                "qubes": [
                    "bool"
                ]
            }
        },
        "GatewaySettings.calculate_serial_delays": {
            "name": "calculate_serial_delays",
            "location": 482,
            "return": [
                "Tuple[(float, float)]"
            ],
            "arguments": {
                "cls": [],
                "baud_rate": [
                    "int"
                ]
            }
        },
        "GatewaySettings.setup": {
            "name": "setup",
            "location": 498,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GatewaySettings.store_settings": {
            "name": "store_settings",
            "location": 519,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GatewaySettings.invalid_setting": {
            "name": "invalid_setting",
            "location": 528,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "json_dict": [
                    "Dict[(str, Union[(bool, int, str)])]"
                ]
            }
        },
        "GatewaySettings.load_settings": {
            "name": "load_settings",
            "location": 537,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GatewaySettings.check_missing_settings": {
            "name": "check_missing_settings",
            "location": 556,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json_dict": [
                    "Any"
                ]
            }
        },
        "GatewaySettings.check_key_in_key_list": {
            "name": "check_key_in_key_list",
            "location": 579,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "json_dict": [
                    "Any"
                ]
            }
        },
        "GatewaySettings.validate_serial_usb_adapter_value": {
            "name": "validate_serial_usb_adapter_value",
            "location": 587,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "json_dict": [
                    "Any"
                ]
            }
        },
        "GatewaySettings.validate_serial_baudrate": {
            "name": "validate_serial_baudrate",
            "location": 593,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "json_dict": [
                    "Any"
                ]
            }
        },
        "GatewaySettings.validate_serial_error_correction": {
            "name": "validate_serial_error_correction",
            "location": 599,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "json_dict": [
                    "Any"
                ]
            }
        },
        "GatewaySettings.validate_serial_interface_value": {
            "name": "validate_serial_interface_value",
            "location": 605,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "json_dict": [
                    "Any"
                ]
            }
        },
        "GatewaySettings.change_setting": {
            "name": "change_setting",
            "location": 615,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value_str": [
                    "str"
                ]
            }
        },
        "GatewaySettings.validate_key_value_pair": {
            "name": "validate_key_value_pair",
            "location": 639,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "value": [
                    "Union[(int, bool)]"
                ]
            }
        },
        "GatewaySettings.print_settings": {
            "name": "print_settings",
            "location": 656,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tfc-master/src/common/input.py": {
        "ask_confirmation_code": {
            "name": "ask_confirmation_code",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "source": [
                    "str"
                ]
            }
        },
        "box_input": {
            "name": "box_input",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "default": [
                    "str"
                ],
                "head": [
                    "int"
                ],
                "tail": [
                    "int"
                ],
                "expected_len": [
                    "int"
                ],
                "key_type": [
                    "str"
                ],
                "guide": [
                    "bool"
                ],
                "validator": [
                    "Optional[Validator]"
                ],
                "validator_args": [
                    "Optional[Any]"
                ]
            }
        },
        "get_b58_key": {
            "name": "get_b58_key",
            "location": 135,
            "return": [
                "bytes"
            ],
            "arguments": {
                "key_type": [
                    "str"
                ],
                "settings": [
                    "'Settings'"
                ],
                "short_address": [
                    "str"
                ]
            }
        },
        "nc_bypass_msg": {
            "name": "nc_bypass_msg",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "settings": [
                    "'Settings'"
                ]
            }
        },
        "pwd_prompt": {
            "name": "pwd_prompt",
            "location": 185,
            "return": [
                "str"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "repeat": [
                    "bool"
                ]
            }
        },
        "yes": {
            "name": "yes",
            "location": 215,
            "return": [
                "bool"
            ],
            "arguments": {
                "prompt": [
                    "str"
                ],
                "abort": [
                    "Optional[bool]"
                ],
                "head": [
                    "int"
                ],
                "tail": [
                    "int"
                ]
            }
        }
    },
    "tfc-master/src/common/misc.py": {
        "calculate_race_condition_delay": {
            "name": "calculate_race_condition_delay",
            "location": 58,
            "return": [
                "float"
            ],
            "arguments": {
                "serial_error_correction": [
                    "int"
                ],
                "serial_baudrate": [
                    "int"
                ]
            }
        },
        "decompress": {
            "name": "decompress",
            "location": 82,
            "return": [
                "bytes"
            ],
            "arguments": {
                "data": [
                    "bytes"
                ],
                "max_size": [
                    "int"
                ]
            }
        },
        "ensure_dir": {
            "name": "ensure_dir",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "directory": [
                    "str"
                ]
            }
        },
        "get_tab_complete_list": {
            "name": "get_tab_complete_list",
            "location": 115,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "gateway": [
                    "'Gateway'"
                ]
            }
        },
        "get_tab_completer": {
            "name": "get_tab_completer",
            "location": 162,
            "return": [
                "Optional[Callable[([str, Any], Any)]]"
            ],
            "arguments": {
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "gateway": [
                    "'Gateway'"
                ]
            }
        },
        "get_terminal_height": {
            "name": "get_terminal_height",
            "location": 180,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "get_terminal_width": {
            "name": "get_terminal_width",
            "location": 185,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "ignored": {
            "name": "ignored",
            "location": 228,
            "return": [
                "Iterator[Any]"
            ],
            "arguments": {}
        },
        "monitor_processes": {
            "name": "monitor_processes",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "process_list": [
                    "List[Process]"
                ],
                "software_operation": [
                    "str"
                ],
                "queues": [
                    "Dict[(bytes, 'Queue[str]')]"
                ],
                "error_exit_code": [
                    "int"
                ]
            }
        },
        "platform_is_tails": {
            "name": "platform_is_tails",
            "location": 276,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "power_off_system": {
            "name": "power_off_system",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "process_arguments": {
            "name": "process_arguments",
            "location": 288,
            "return": [
                "Tuple[(str, bool, bool, bool)]"
            ],
            "arguments": {}
        },
        "readable_size": {
            "name": "readable_size",
            "location": 329,
            "return": [
                "str"
            ],
            "arguments": {
                "size": [
                    "int"
                ]
            }
        },
        "reset_terminal": {
            "name": "reset_terminal",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "round_up": {
            "name": "round_up",
            "location": 344,
            "return": [
                "int"
            ],
            "arguments": {
                "value": [
                    "Union[(int, float)]"
                ]
            }
        },
        "shred_databases": {
            "name": "shred_databases",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "software_operation": [
                    "str"
                ]
            }
        },
        "split_byte_string": {
            "name": "split_byte_string",
            "location": 362,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "bytestring": [
                    "bytes"
                ],
                "item_len": [
                    "int"
                ]
            }
        },
        "split_string": {
            "name": "split_string",
            "location": 369,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "item_len": [
                    "int"
                ]
            }
        },
        "separate_header": {
            "name": "separate_header",
            "location": 376,
            "return": [
                "Tuple[(bytes, bytes)]"
            ],
            "arguments": {
                "bytestring": [
                    "bytes"
                ],
                "header_length": [
                    "int"
                ]
            }
        },
        "separate_headers": {
            "name": "separate_headers",
            "location": 383,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "bytestring": [
                    "bytes"
                ],
                "header_length_list": [
                    "List[int]"
                ]
            }
        },
        "separate_trailer": {
            "name": "separate_trailer",
            "location": 399,
            "return": [
                "Tuple[(bytes, bytes)]"
            ],
            "arguments": {
                "bytestring": [
                    "bytes"
                ],
                "trailer_length": [
                    "int"
                ]
            }
        },
        "split_to_substrings": {
            "name": "split_to_substrings",
            "location": 409,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "bytestring": [
                    "bytes"
                ],
                "length": [
                    "int"
                ]
            }
        },
        "terminal_width_check": {
            "name": "terminal_width_check",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "minimum_width": [
                    "int"
                ]
            }
        },
        "validate_onion_addr": {
            "name": "validate_onion_addr",
            "location": 428,
            "return": [
                "str"
            ],
            "arguments": {
                "onion_address_contact": [
                    "str"
                ],
                "onion_address_user": [
                    "str"
                ]
            }
        },
        "validate_group_name": {
            "name": "validate_group_name",
            "location": 465,
            "return": [
                "str"
            ],
            "arguments": {
                "group_name": [
                    "str"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ]
            }
        },
        "validate_ip_address": {
            "name": "validate_ip_address",
            "location": 495,
            "return": [
                "str"
            ],
            "arguments": {
                "ip_address": [
                    "str"
                ]
            }
        },
        "validate_key_exchange": {
            "name": "validate_key_exchange",
            "location": 504,
            "return": [
                "str"
            ],
            "arguments": {
                "key_ex": [
                    "str"
                ]
            }
        },
        "validate_nick": {
            "name": "validate_nick",
            "location": 516,
            "return": [
                "str"
            ],
            "arguments": {
                "nick": [
                    "str"
                ],
                "args": [
                    "Tuple[('ContactList', 'GroupList', bytes)]"
                ]
            }
        },
        "same_contact_check": {
            "name": "same_contact_check",
            "location": 559,
            "return": [
                "str"
            ],
            "arguments": {
                "onion_pub_key": [
                    "bytes"
                ],
                "nick": [
                    "str"
                ],
                "contact_list": [
                    "'ContactList'"
                ]
            }
        },
        "store_unique": {
            "name": "store_unique",
            "location": 573,
            "return": [
                "str"
            ],
            "arguments": {
                "file_data": [
                    "bytes"
                ],
                "file_dir": [
                    "str"
                ],
                "file_name": [
                    "str"
                ]
            }
        },
        "get_tab_completer.tab_complete": {
            "name": "tab_complete",
            "location": 169,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "state": [
                    "Any"
                ]
            }
        },
        "HideRunTime.__init__": {
            "name": "__init__",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "Optional['Settings']"
                ],
                "delay_type": [
                    "str"
                ],
                "duration": [
                    "float"
                ]
            }
        },
        "HideRunTime.__enter__": {
            "name": "__enter__",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HideRunTime.__exit__": {
            "name": "__exit__",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Any"
                ],
                "exc_value": [
                    "Any"
                ],
                "traceback": [
                    "Any"
                ]
            }
        }
    },
    "tfc-master/src/common/output.py": {
        "clear_screen": {
            "name": "clear_screen",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "delay": [
                    "float"
                ]
            }
        },
        "group_management_print": {
            "name": "group_management_print",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "members": [
                    "List[bytes]"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_name": [
                    "str"
                ]
            }
        },
        "m_print": {
            "name": "m_print",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "msg_list": [
                    "Union[(str, List[str])]"
                ],
                "manual_proceed": [
                    "bool"
                ],
                "bold": [
                    "bool"
                ],
                "center": [
                    "bool"
                ],
                "box": [
                    "bool"
                ],
                "head_clear": [
                    "bool"
                ],
                "tail_clear": [
                    "bool"
                ],
                "delay": [
                    "float"
                ],
                "max_width": [
                    "int"
                ],
                "head": [
                    "int"
                ],
                "tail": [
                    "int"
                ]
            }
        },
        "split_too_wide_messages": {
            "name": "split_too_wide_messages",
            "location": 130,
            "return": [
                "Tuple[(int, 'MsgListType')]"
            ],
            "arguments": {
                "box": [
                    "bool"
                ],
                "max_width": [
                    "int"
                ],
                "msg_list": [
                    "'MsgListType'"
                ],
                "terminal_width": [
                    "int"
                ]
            }
        },
        "phase": {
            "name": "phase",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "done": [
                    "bool"
                ],
                "head": [
                    "int"
                ],
                "tail": [
                    "int"
                ],
                "offset": [
                    "int"
                ],
                "delay": [
                    "float"
                ]
            }
        },
        "print_fingerprint": {
            "name": "print_fingerprint",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "fp": [
                    "bytes"
                ],
                "msg": [
                    "str"
                ]
            }
        },
        "print_key": {
            "name": "print_key",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "key_bytes": [
                    "bytes"
                ],
                "settings": [
                    "Union[('Settings', 'GWSettings')]"
                ],
                "public_key": [
                    "bool"
                ]
            }
        },
        "print_title": {
            "name": "print_title",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "operation": [
                    "str"
                ]
            }
        },
        "print_on_previous_line": {
            "name": "print_on_previous_line",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "reps": [
                    "int"
                ],
                "delay": [
                    "float"
                ],
                "flush": [
                    "bool"
                ]
            }
        },
        "print_spacing": {
            "name": "print_spacing",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "count": [
                    "int"
                ]
            }
        },
        "rp_print": {
            "name": "rp_print",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "ts": [
                    "Optional['datetime']"
                ],
                "bold": [
                    "bool"
                ]
            }
        }
    },
    "tfc-master/src/common/path.py": {
        "ask_path_gui": {
            "name": "ask_path_gui",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "prompt_msg": [
                    "str"
                ],
                "settings": [
                    "'Settings'"
                ],
                "get_file": [
                    "bool"
                ]
            }
        },
        "ask_path_cli": {
            "name": "ask_path_cli",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "prompt_msg": [
                    "str"
                ],
                "get_file": [
                    "bool"
                ]
            }
        },
        "cli_get_file": {
            "name": "cli_get_file",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {
                "prompt_msg": [
                    "str"
                ]
            }
        },
        "cli_get_path": {
            "name": "cli_get_path",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {
                "prompt_msg": [
                    "str"
                ]
            }
        },
        "Completer.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_file": [
                    "bool"
                ]
            }
        },
        "Completer.listdir": {
            "name": "listdir",
            "location": 74,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "str"
                ]
            }
        },
        "Completer.complete_path": {
            "name": "complete_path",
            "location": 87,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Optional[str]"
                ]
            }
        },
        "Completer.path_complete": {
            "name": "path_complete",
            "location": 107,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "Optional[List[str]]"
                ]
            }
        },
        "Completer.complete": {
            "name": "complete",
            "location": 115,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ],
                "state": [
                    "int"
                ]
            }
        }
    },
    "tfc-master/src/common/reed_solomon.py": {
        "rwh_primes1": {
            "name": "rwh_primes1",
            "location": 215,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "find_prime_polys": {
            "name": "find_prime_polys",
            "location": 226,
            "return": [
                "Any"
            ],
            "arguments": {
                "generator": [
                    "int"
                ],
                "c_exp": [
                    "int"
                ],
                "fast_primes": [
                    "bool"
                ],
                "single": [
                    "bool"
                ]
            }
        },
        "init_tables": {
            "name": "init_tables",
            "location": 350,
            "return": [
                "List[Union[(Any, Any, int)]]"
            ],
            "arguments": {
                "prim": [
                    "int"
                ],
                "generator": [
                    "int"
                ],
                "c_exp": [
                    "int"
                ]
            }
        },
        "gf_add": {
            "name": "gf_add",
            "location": 465,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "gf_sub": {
            "name": "gf_sub",
            "location": 470,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "gf_neg": {
            "name": "gf_neg",
            "location": 479,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ]
            }
        },
        "gf_inverse": {
            "name": "gf_inverse",
            "location": 484,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ]
            }
        },
        "gf_mul": {
            "name": "gf_mul",
            "location": 491,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "gf_div": {
            "name": "gf_div",
            "location": 499,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "gf_pow": {
            "name": "gf_pow",
            "location": 509,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "power": [
                    "int"
                ]
            }
        },
        "cl_mult": {
            "name": "cl_mult",
            "location": 515,
            "return": [
                "int"
            ],
            "arguments": {
                "x_": [
                    "int"
                ],
                "y_": [
                    "int"
                ]
            }
        },
        "bit_length": {
            "name": "bit_length",
            "location": 526,
            "return": [
                "int"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "cl_div": {
            "name": "cl_div",
            "location": 537,
            "return": [
                "int"
            ],
            "arguments": {
                "dividend": [
                    "int"
                ],
                "divisor": [
                    "int"
                ]
            }
        },
        "gf_mult_nolut_slow": {
            "name": "gf_mult_nolut_slow",
            "location": 563,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "prim": [
                    "int"
                ]
            }
        },
        "gf_mult_nolut": {
            "name": "gf_mult_nolut",
            "location": 584,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "prim": [
                    "int"
                ],
                "field_charac_full": [
                    "int"
                ],
                "carryless": [
                    "bool"
                ]
            }
        },
        "gf_poly_scale": {
            "name": "gf_poly_scale",
            "location": 619,
            "return": [
                "bytearray"
            ],
            "arguments": {
                "p": [
                    "bytes"
                ],
                "x": [
                    "int"
                ]
            }
        },
        "gf_poly_add": {
            "name": "gf_poly_add",
            "location": 625,
            "return": [
                "Any"
            ],
            "arguments": {
                "p": [
                    "bytes"
                ],
                "q": [
                    "Union[(bytearray, List[int])]"
                ]
            }
        },
        "gf_poly_mul": {
            "name": "gf_poly_mul",
            "location": 638,
            "return": [
                "Any"
            ],
            "arguments": {
                "p": [
                    "Any"
                ],
                "q": [
                    "List[Any]"
                ]
            }
        },
        "gf_poly_mul_simple": {
            "name": "gf_poly_mul_simple",
            "location": 671,
            "return": [
                "bytearray"
            ],
            "arguments": {
                "p": [
                    "List[int]"
                ],
                "q": [
                    "List[int]"
                ]
            }
        },
        "gf_poly_neg": {
            "name": "gf_poly_neg",
            "location": 693,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "poly": [
                    "List[int]"
                ]
            }
        },
        "gf_poly_div": {
            "name": "gf_poly_div",
            "location": 702,
            "return": [
                "Tuple[(bytearray, bytearray)]"
            ],
            "arguments": {
                "dividend": [
                    "bytearray"
                ],
                "divisor": [
                    "Union[(bytearray, List[int])]"
                ]
            }
        },
        "gf_poly_eval": {
            "name": "gf_poly_eval",
            "location": 759,
            "return": [
                "int"
            ],
            "arguments": {
                "poly": [
                    "Union[(bytearray, List[int])]"
                ],
                "x": [
                    "int"
                ]
            }
        },
        "rs_generator_poly": {
            "name": "rs_generator_poly",
            "location": 772,
            "return": [
                "bytearray"
            ],
            "arguments": {
                "nsym": [
                    "int"
                ],
                "fcr": [
                    "int"
                ],
                "generator": [
                    "int"
                ]
            }
        },
        "rs_generator_poly_all": {
            "name": "rs_generator_poly_all",
            "location": 786,
            "return": [
                "Dict[(int, bytearray)]"
            ],
            "arguments": {
                "max_nsym": [
                    "int"
                ],
                "fcr": [
                    "int"
                ],
                "generator": [
                    "int"
                ]
            }
        },
        "rs_simple_encode_msg": {
            "name": "rs_simple_encode_msg",
            "location": 802,
            "return": [
                "bytearray"
            ],
            "arguments": {
                "msg_in": [
                    "bytearray"
                ],
                "nsym": [
                    "int"
                ],
                "fcr": [
                    "int"
                ],
                "generator": [
                    "int"
                ]
            }
        },
        "rs_encode_msg": {
            "name": "rs_encode_msg",
            "location": 833,
            "return": [
                "bytearray"
            ],
            "arguments": {
                "msg_in": [
                    "bytes"
                ],
                "nsym": [
                    "int"
                ],
                "fcr": [
                    "int"
                ],
                "generator": [
                    "int"
                ],
                "gen": [
                    "Optional[bytearray]"
                ]
            }
        },
        "rs_calc_syndromes": {
            "name": "rs_calc_syndromes",
            "location": 911,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "msg": [
                    "bytearray"
                ],
                "nsym": [
                    "int"
                ],
                "fcr": [
                    "int"
                ],
                "generator": [
                    "int"
                ]
            }
        },
        "rs_correct_errata": {
            "name": "rs_correct_errata",
            "location": 938,
            "return": [
                "bytearray"
            ],
            "arguments": {
                "msg_in": [
                    "bytearray"
                ],
                "synd": [
                    "List[int]"
                ],
                "err_pos": [
                    "List[int]"
                ],
                "fcr": [
                    "int"
                ],
                "generator": [
                    "int"
                ]
            }
        },
        "rs_find_error_locator": {
            "name": "rs_find_error_locator",
            "location": 1049,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "synd": [
                    "List[int]"
                ],
                "nsym": [
                    "int"
                ],
                "erase_loc": [
                    "Optional[bytearray]"
                ],
                "erase_count": [
                    "int"
                ]
            }
        },
        "rs_find_errata_locator": {
            "name": "rs_find_errata_locator",
            "location": 1195,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "e_pos": [
                    "List[int]"
                ],
                "generator": [
                    "int"
                ]
            }
        },
        "rs_find_error_evaluator": {
            "name": "rs_find_error_evaluator",
            "location": 1251,
            "return": [
                "bytearray"
            ],
            "arguments": {
                "synd": [
                    "List[int]"
                ],
                "err_loc": [
                    "List[int]"
                ],
                "nsym": [
                    "int"
                ]
            }
        },
        "rs_find_errors": {
            "name": "rs_find_errors",
            "location": 1278,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "err_loc": [
                    "Union[(bytearray, List[int])]"
                ],
                "nmess": [
                    "int"
                ],
                "generator": [
                    "int"
                ]
            }
        },
        "rs_forney_syndromes": {
            "name": "rs_forney_syndromes",
            "location": 1319,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "synd": [
                    "List[int]"
                ],
                "pos": [
                    "List[int]"
                ],
                "nmess": [
                    "int"
                ],
                "generator": [
                    "int"
                ]
            }
        },
        "rs_correct_msg": {
            "name": "rs_correct_msg",
            "location": 1370,
            "return": [
                "Tuple[(bytearray, bytearray)]"
            ],
            "arguments": {
                "msg_in": [
                    "Union[(bytes, bytearray)]"
                ],
                "nsym": [
                    "int"
                ],
                "fcr": [
                    "int"
                ],
                "generator": [
                    "int"
                ],
                "erase_pos": [
                    "Optional[List[int]]"
                ],
                "only_erasures": [
                    "bool"
                ]
            }
        },
        "rs_correct_msg_nofsynd": {
            "name": "rs_correct_msg_nofsynd",
            "location": 1460,
            "return": [
                "Tuple[(bytearray, bytearray)]"
            ],
            "arguments": {
                "msg_in": [
                    "bytearray"
                ],
                "nsym": [
                    "int"
                ],
                "fcr": [
                    "int"
                ],
                "generator": [
                    "int"
                ],
                "erase_pos": [
                    "Optional[List[int]]"
                ],
                "only_erasures": [
                    "bool"
                ]
            }
        },
        "rs_check": {
            "name": "rs_check",
            "location": 1542,
            "return": [
                "bool"
            ],
            "arguments": {
                "msg": [
                    "bytearray"
                ],
                "nsym": [
                    "int"
                ],
                "fcr": [
                    "int"
                ],
                "generator": [
                    "int"
                ]
            }
        },
        "chunk": {
            "name": "chunk",
            "location": 1566,
            "return": [
                "Iterator[Union[(bytearray, bytes)]]"
            ],
            "arguments": {
                "data": [
                    "Union[(bytearray, bytes)]"
                ],
                "chunk_size": [
                    "int"
                ]
            }
        },
        "rs_find_errata_locator.c_print": {
            "name": "c_print",
            "location": 1225,
            "return": [
                "None"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "RSCodec.__init__": {
            "name": "__init__",
            "location": 1594,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nsym": [
                    "int"
                ],
                "nsize": [
                    "int"
                ],
                "fcr": [
                    "int"
                ],
                "prim": [
                    "int"
                ],
                "generator": [
                    "int"
                ],
                "c_exp": [
                    "int"
                ],
                "single_gen": [
                    "bool"
                ]
            }
        },
        "RSCodec.encode": {
            "name": "encode",
            "location": 1674,
            "return": [
                "bytearray"
            ],
            "arguments": {
                "self": [],
                "data_": [
                    "Union[(bytes, str)]"
                ],
                "nsym": [
                    "Optional[int]"
                ]
            }
        },
        "RSCodec.decode": {
            "name": "decode",
            "location": 1699,
            "return": [
                "Tuple[(bytearray, bytearray)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ],
                "nsym": [
                    "Optional[int]"
                ],
                "erase_pos": [
                    "Optional[List[int]]"
                ],
                "only_erasures": [
                    "bool"
                ]
            }
        },
        "RSCodec.check": {
            "name": "check",
            "location": 1753,
            "return": [
                "List[bool]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytearray"
                ],
                "nsym": [
                    "Optional[int]"
                ]
            }
        },
        "init_tables._bytearray": {
            "name": "_bytearray",
            "location": 404,
            "return": [
                "Any"
            ],
            "arguments": {
                "obj": [
                    "Union[(str, bytes, int, List[int])]"
                ],
                "encoding": [
                    "str"
                ]
            }
        }
    },
    "tfc-master/src/common/statics.py": {},
    "tfc-master/src/common/word_list.py": {},
    "tfc-master/src/common/__init__.py": {},
    "tfc-master/src/receiver/commands.py": {
        "process_command": {
            "name": "process_command",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "ts": [
                    "'datetime'"
                ],
                "assembly_ct": [
                    "bytes"
                ],
                "window_list": [
                    "'WindowList'"
                ],
                "packet_list": [
                    "'PacketList'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "key_list": [
                    "'KeyList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "master_key": [
                    "'MasterKey'"
                ],
                "gateway": [
                    "'Gateway'"
                ],
                "exit_queue": [
                    "'Queue[bytes]'"
                ]
            }
        },
        "win_activity": {
            "name": "win_activity",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "window_list": [
                    "'WindowList'"
                ]
            }
        },
        "win_select": {
            "name": "win_select",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "window_uid": [
                    "bytes"
                ],
                "window_list": [
                    "'WindowList'"
                ]
            }
        },
        "reset_screen": {
            "name": "reset_screen",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "win_uid": [
                    "bytes"
                ],
                "window_list": [
                    "'WindowList'"
                ]
            }
        },
        "exit_tfc": {
            "name": "exit_tfc",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "exit_queue": [
                    "'Queue[str]'"
                ]
            }
        },
        "log_command": {
            "name": "log_command",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd_data": [
                    "bytes"
                ],
                "ts": [
                    "'datetime'"
                ],
                "window_list": [
                    "'WindowList'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "master_key": [
                    "'MasterKey'"
                ]
            }
        },
        "remove_log": {
            "name": "remove_log",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd_data": [
                    "bytes"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "master_key": [
                    "'MasterKey'"
                ]
            }
        },
        "ch_master_key": {
            "name": "ch_master_key",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "ts": [
                    "'datetime'"
                ],
                "window_list": [
                    "'WindowList'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "key_list": [
                    "'KeyList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "master_key": [
                    "'MasterKey'"
                ]
            }
        },
        "ch_nick": {
            "name": "ch_nick",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd_data": [
                    "bytes"
                ],
                "ts": [
                    "'datetime'"
                ],
                "window_list": [
                    "'WindowList'"
                ],
                "contact_list": [
                    "'ContactList'"
                ]
            }
        },
        "ch_setting": {
            "name": "ch_setting",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd_data": [
                    "bytes"
                ],
                "ts": [
                    "'datetime'"
                ],
                "window_list": [
                    "'WindowList'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "key_list": [
                    "'KeyList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "gateway": [
                    "'Gateway'"
                ]
            }
        },
        "ch_contact_s": {
            "name": "ch_contact_s",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd_data": [
                    "bytes"
                ],
                "ts": [
                    "'datetime'"
                ],
                "window_list": [
                    "'WindowList'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "header": [
                    "bytes"
                ]
            }
        },
        "change_setting_for_one_contact": {
            "name": "change_setting_for_one_contact",
            "location": 336,
            "return": [
                "Tuple[(str, str, str, str)]"
            ],
            "arguments": {
                "attr": [
                    "str"
                ],
                "file_cmd": [
                    "bool"
                ],
                "b_value": [
                    "bool"
                ],
                "win_uid": [
                    "bytes"
                ],
                "window_list": [
                    "'WindowList'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ]
            }
        },
        "change_setting_for_all_contacts": {
            "name": "change_setting_for_all_contacts",
            "location": 381,
            "return": [
                "Tuple[(str, str, str, str)]"
            ],
            "arguments": {
                "attr": [
                    "str"
                ],
                "file_cmd": [
                    "bool"
                ],
                "b_value": [
                    "bool"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ]
            }
        },
        "contact_rem": {
            "name": "contact_rem",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {
                "onion_pub_key": [
                    "bytes"
                ],
                "ts": [
                    "'datetime'"
                ],
                "window_list": [
                    "'WindowList'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "key_list": [
                    "'KeyList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "master_key": [
                    "'MasterKey'"
                ]
            }
        },
        "wipe": {
            "name": "wipe",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "exit_queue": [
                    "'Queue[str]'"
                ]
            }
        }
    },
    "tfc-master/src/receiver/commands_g.py": {
        "group_create": {
            "name": "group_create",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd_data": [
                    "bytes"
                ],
                "ts": [
                    "'datetime'"
                ],
                "window_list": [
                    "'WindowList'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "settings": [
                    "'Settings'"
                ]
            }
        },
        "group_add": {
            "name": "group_add",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd_data": [
                    "bytes"
                ],
                "ts": [
                    "'datetime'"
                ],
                "window_list": [
                    "'WindowList'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "settings": [
                    "'Settings'"
                ]
            }
        },
        "group_remove": {
            "name": "group_remove",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd_data": [
                    "bytes"
                ],
                "ts": [
                    "'datetime'"
                ],
                "window_list": [
                    "'WindowList'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ]
            }
        },
        "group_delete": {
            "name": "group_delete",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "group_id": [
                    "bytes"
                ],
                "ts": [
                    "'datetime'"
                ],
                "window_list": [
                    "'WindowList'"
                ],
                "group_list": [
                    "'GroupList'"
                ]
            }
        },
        "group_rename": {
            "name": "group_rename",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd_data": [
                    "bytes"
                ],
                "ts": [
                    "'datetime'"
                ],
                "window_list": [
                    "'WindowList'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ]
            }
        }
    },
    "tfc-master/src/receiver/files.py": {
        "process_assembled_file": {
            "name": "process_assembled_file",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "ts": [
                    "'datetime'"
                ],
                "payload": [
                    "bytes"
                ],
                "onion_pub_key": [
                    "bytes"
                ],
                "nick": [
                    "str"
                ],
                "settings": [
                    "'Settings'"
                ],
                "window_list": [
                    "'WindowList'"
                ]
            }
        },
        "decrypt_and_store_file": {
            "name": "decrypt_and_store_file",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "ts": [
                    "'datetime'"
                ],
                "file_ct": [
                    "bytes"
                ],
                "file_key": [
                    "bytes"
                ],
                "file_name": [
                    "str"
                ],
                "onion_pub_key": [
                    "bytes"
                ],
                "nick": [
                    "str"
                ],
                "window_list": [
                    "'WindowList'"
                ],
                "settings": [
                    "'Settings'"
                ]
            }
        },
        "new_file": {
            "name": "new_file",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "ts": [
                    "'datetime'"
                ],
                "packet": [
                    "bytes"
                ],
                "file_keys": [
                    "Dict[(bytes, bytes)]"
                ],
                "file_buf": [
                    "Dict[(bytes, Tuple[('datetime', bytes)])]"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "window_list": [
                    "'WindowList'"
                ],
                "settings": [
                    "'Settings'"
                ]
            }
        },
        "process_file": {
            "name": "process_file",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "ts": [
                    "'datetime'"
                ],
                "onion_pub_key": [
                    "bytes"
                ],
                "file_ct": [
                    "bytes"
                ],
                "file_key": [
                    "bytes"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "window_list": [
                    "'WindowList'"
                ],
                "settings": [
                    "'Settings'"
                ]
            }
        }
    },
    "tfc-master/src/receiver/key_exchanges.py": {
        "protect_kdk": {
            "name": "protect_kdk",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "kdk": [
                    "bytes"
                ]
            }
        },
        "process_local_key_buffer": {
            "name": "process_local_key_buffer",
            "location": 77,
            "return": [
                "Tuple[(datetime, bytes)]"
            ],
            "arguments": {
                "kdk": [
                    "bytes"
                ],
                "l_queue": [
                    "'local_key_queue'"
                ]
            }
        },
        "decrypt_local_key": {
            "name": "decrypt_local_key",
            "location": 107,
            "return": [
                "Tuple[('datetime', bytes)]"
            ],
            "arguments": {
                "ts": [
                    "'datetime'"
                ],
                "packet": [
                    "bytes"
                ],
                "kdk_hashes": [
                    "List[bytes]"
                ],
                "packet_hashes": [
                    "List[bytes]"
                ],
                "settings": [
                    "'Settings'"
                ],
                "l_queue": [
                    "'local_key_queue'"
                ]
            }
        },
        "process_local_key": {
            "name": "process_local_key",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "ts": [
                    "'datetime'"
                ],
                "packet": [
                    "bytes"
                ],
                "window_list": [
                    "'WindowList'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "key_list": [
                    "'KeyList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "kdk_hashes": [
                    "List[bytes]"
                ],
                "packet_hashes": [
                    "List[bytes]"
                ],
                "l_queue": [
                    "'Queue[Tuple[datetime, bytes]]'"
                ]
            }
        },
        "local_key_rdy": {
            "name": "local_key_rdy",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "ts": [
                    "'datetime'"
                ],
                "window_list": [
                    "'WindowList'"
                ],
                "contact_list": [
                    "'ContactList'"
                ]
            }
        },
        "key_ex_ecdhe": {
            "name": "key_ex_ecdhe",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "packet": [
                    "bytes"
                ],
                "ts": [
                    "'datetime'"
                ],
                "window_list": [
                    "'WindowList'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "key_list": [
                    "'KeyList'"
                ],
                "settings": [
                    "'Settings'"
                ]
            }
        },
        "key_ex_psk_tx": {
            "name": "key_ex_psk_tx",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "packet": [
                    "bytes"
                ],
                "ts": [
                    "'datetime'"
                ],
                "window_list": [
                    "'WindowList'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "key_list": [
                    "'KeyList'"
                ],
                "settings": [
                    "'Settings'"
                ]
            }
        },
        "decrypt_rx_psk": {
            "name": "decrypt_rx_psk",
            "location": 294,
            "return": [
                "bytes"
            ],
            "arguments": {
                "ct_tag": [
                    "bytes"
                ],
                "salt": [
                    "bytes"
                ]
            }
        },
        "key_ex_psk_rx": {
            "name": "key_ex_psk_rx",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "packet": [
                    "bytes"
                ],
                "ts": [
                    "'datetime'"
                ],
                "window_list": [
                    "'WindowList'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "key_list": [
                    "'KeyList'"
                ],
                "settings": [
                    "'Settings'"
                ]
            }
        }
    },
    "tfc-master/src/receiver/messages.py": {
        "log_masking_packets": {
            "name": "log_masking_packets",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "onion_pub_key": [
                    "bytes"
                ],
                "origin": [
                    "bytes"
                ],
                "logging": [
                    "bool"
                ],
                "settings": [
                    "'Settings'"
                ],
                "packet": [
                    "'Packet'"
                ],
                "message_log": [
                    "'MessageLog'"
                ],
                "completed": [
                    "bool"
                ]
            }
        },
        "process_message_packet": {
            "name": "process_message_packet",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "ts": [
                    "'datetime'"
                ],
                "assembly_packet_ct": [
                    "bytes"
                ],
                "window_list": [
                    "'WindowList'"
                ],
                "packet_list": [
                    "'PacketList'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "key_list": [
                    "'KeyList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "file_keys": [
                    "Dict[(bytes, bytes)]"
                ],
                "message_log": [
                    "'MessageLog'"
                ]
            }
        },
        "process_complete_message_packet": {
            "name": "process_complete_message_packet",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "ts": [
                    "'datetime'"
                ],
                "onion_pub_key": [
                    "bytes"
                ],
                "p_type": [
                    "str"
                ],
                "origin": [
                    "bytes"
                ],
                "logging": [
                    "bool"
                ],
                "packet": [
                    "'Packet'"
                ],
                "window_list": [
                    "'WindowList'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "message_log": [
                    "'MessageLog'"
                ],
                "file_keys": [
                    "Dict[(bytes, bytes)]"
                ]
            }
        },
        "process_message": {
            "name": "process_message",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "ts": [
                    "'datetime'"
                ],
                "onion_pub_key": [
                    "bytes"
                ],
                "origin": [
                    "bytes"
                ],
                "logging": [
                    "bool"
                ],
                "packet": [
                    "'Packet'"
                ],
                "window_list": [
                    "'WindowList'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "message_log": [
                    "'MessageLog'"
                ],
                "file_keys": [
                    "Dict[(bytes, bytes)]"
                ]
            }
        },
        "process_group_message": {
            "name": "process_group_message",
            "location": 201,
            "return": [
                "bool"
            ],
            "arguments": {
                "ts": [
                    "'datetime'"
                ],
                "assembled": [
                    "bytes"
                ],
                "onion_pub_key": [
                    "bytes"
                ],
                "origin": [
                    "bytes"
                ],
                "whisper": [
                    "bool"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "window_list": [
                    "'WindowList'"
                ]
            }
        },
        "process_file_key_message": {
            "name": "process_file_key_message",
            "location": 243,
            "return": [
                "str"
            ],
            "arguments": {
                "assembled": [
                    "bytes"
                ],
                "onion_pub_key": [
                    "bytes"
                ],
                "origin": [
                    "bytes"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "file_keys": [
                    "Dict[(bytes, bytes)]"
                ]
            }
        }
    },
    "tfc-master/src/receiver/output_loop.py": {
        "output_loop": {
            "name": "output_loop",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "queues": [
                    "Dict[(bytes, 'Queue[Any]')]"
                ],
                "gateway": [
                    "'Gateway'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "key_list": [
                    "'KeyList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "master_key": [
                    "'MasterKey'"
                ],
                "message_log": [
                    "'MessageLog'"
                ],
                "stdin_fd": [
                    "int"
                ],
                "unit_test": [
                    "bool"
                ]
            }
        },
        "process_local_key_queue": {
            "name": "process_local_key_queue",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "queues": [
                    "'queue_dict'"
                ],
                "window_list": [
                    "'WindowList'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "key_list": [
                    "'KeyList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "kdk_hashes": [
                    "List[bytes]"
                ],
                "packet_hashes": [
                    "List[bytes]"
                ]
            }
        },
        "process_command_queue": {
            "name": "process_command_queue",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "queues": [
                    "'queue_dict'"
                ],
                "window_list": [
                    "'WindowList'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "key_list": [
                    "'KeyList'"
                ],
                "packet_list": [
                    "'PacketList'"
                ],
                "master_key": [
                    "'MasterKey'"
                ],
                "gateway": [
                    "'Gateway'"
                ]
            }
        },
        "process_cached_messages": {
            "name": "process_cached_messages",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "window_list": [
                    "'WindowList'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "key_list": [
                    "'KeyList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "packet_list": [
                    "'PacketList'"
                ],
                "message_log": [
                    "'MessageLog'"
                ],
                "file_keys": [
                    "'file_keys_type'"
                ],
                "packet_buffer": [
                    "'packet_buffer_type'"
                ]
            }
        },
        "process_message_queue": {
            "name": "process_message_queue",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "queues": [
                    "'queue_dict'"
                ],
                "window_list": [
                    "'WindowList'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "key_list": [
                    "'KeyList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "packet_list": [
                    "'PacketList'"
                ],
                "message_log": [
                    "'MessageLog'"
                ],
                "file_keys": [
                    "'file_keys_type'"
                ],
                "packet_buffer": [
                    "'packet_buffer_type'"
                ]
            }
        },
        "process_cached_files": {
            "name": "process_cached_files",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "window_list": [
                    "'WindowList'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "file_keys": [
                    "'file_keys_type'"
                ],
                "file_buffer": [
                    "'file_buffer_type'"
                ]
            }
        },
        "process_file_queue": {
            "name": "process_file_queue",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "queues": [
                    "'queue_dict'"
                ],
                "window_list": [
                    "'WindowList'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "file_keys": [
                    "'file_keys_type'"
                ],
                "file_buffer": [
                    "'file_buffer_type'"
                ]
            }
        }
    },
    "tfc-master/src/receiver/packet.py": {
        "process_offset": {
            "name": "process_offset",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "offset": [
                    "int"
                ],
                "origin": [
                    "bytes"
                ],
                "direction": [
                    "str"
                ],
                "nick": [
                    "str"
                ],
                "window": [
                    "'RxWindow'"
                ]
            }
        },
        "decrypt_assembly_packet": {
            "name": "decrypt_assembly_packet",
            "location": 78,
            "return": [
                "bytes"
            ],
            "arguments": {
                "packet": [
                    "bytes"
                ],
                "onion_pub_key": [
                    "bytes"
                ],
                "origin": [
                    "bytes"
                ],
                "window_list": [
                    "'WindowList'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "key_list": [
                    "'KeyList'"
                ]
            }
        },
        "Packet.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "onion_pub_key": [
                    "bytes"
                ],
                "origin": [
                    "bytes"
                ],
                "p_type": [
                    "str"
                ],
                "contact": [
                    "'Contact'"
                ],
                "settings": [
                    "'Settings'"
                ]
            }
        },
        "Packet.add_masking_packet_to_log_file": {
            "name": "add_masking_packet_to_log_file",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "increase": [
                    "int"
                ]
            }
        },
        "Packet.clear_file_metadata": {
            "name": "clear_file_metadata",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Packet.clear_assembly_packets": {
            "name": "clear_assembly_packets",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Packet.new_file_packet": {
            "name": "new_file_packet",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Packet.check_long_packet": {
            "name": "check_long_packet",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Packet.process_short_header": {
            "name": "process_short_header",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "packet": [
                    "bytes"
                ],
                "packet_ct": [
                    "Optional[bytes]"
                ]
            }
        },
        "Packet.process_long_header": {
            "name": "process_long_header",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "packet": [
                    "bytes"
                ],
                "packet_ct": [
                    "Optional[bytes]"
                ]
            }
        },
        "Packet.process_append_header": {
            "name": "process_append_header",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "packet": [
                    "bytes"
                ],
                "packet_ct": [
                    "Optional[bytes]"
                ]
            }
        },
        "Packet.process_end_header": {
            "name": "process_end_header",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "packet": [
                    "bytes"
                ],
                "packet_ct": [
                    "Optional[bytes]"
                ]
            }
        },
        "Packet.abort_packet": {
            "name": "abort_packet",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cancel": [
                    "bool"
                ]
            }
        },
        "Packet.process_cancel_header": {
            "name": "process_cancel_header",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Packet.process_noise_header": {
            "name": "process_noise_header",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Packet.add_packet": {
            "name": "add_packet",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "packet": [
                    "bytes"
                ],
                "packet_ct": [
                    "Optional[bytes]"
                ]
            }
        },
        "Packet.assemble_message_packet": {
            "name": "assemble_message_packet",
            "location": 357,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Packet.assemble_and_store_file": {
            "name": "assemble_and_store_file",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ts": [
                    "'datetime'"
                ],
                "onion_pub_key": [
                    "bytes"
                ],
                "window_list": [
                    "'WindowList'"
                ]
            }
        },
        "Packet.assemble_command_packet": {
            "name": "assemble_command_packet",
            "location": 388,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "PacketList.__init__": {
            "name": "__init__",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "'Settings'"
                ],
                "contact_list": [
                    "'ContactList'"
                ]
            }
        },
        "PacketList.__iter__": {
            "name": "__iter__",
            "location": 416,
            "return": [
                "Iterator[Packet]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PacketList.__len__": {
            "name": "__len__",
            "location": 420,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PacketList.has_packet": {
            "name": "has_packet",
            "location": 424,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "onion_pub_key": [
                    "bytes"
                ],
                "origin": [
                    "bytes"
                ],
                "p_type": [
                    "str"
                ]
            }
        },
        "PacketList.get_packet": {
            "name": "get_packet",
            "location": 434,
            "return": [
                "Packet"
            ],
            "arguments": {
                "self": [],
                "onion_pub_key": [
                    "bytes"
                ],
                "origin": [
                    "bytes"
                ],
                "p_type": [
                    "str"
                ],
                "log_access": [
                    "bool"
                ]
            }
        }
    },
    "tfc-master/src/receiver/receiver_loop.py": {
        "receiver_loop": {
            "name": "receiver_loop",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "queues": [
                    "Dict[(bytes, 'Queue[Any]')]"
                ],
                "gateway": [
                    "'Gateway'"
                ],
                "unit_test": [
                    "bool"
                ]
            }
        }
    },
    "tfc-master/src/receiver/windows.py": {
        "RxWindow.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "bytes"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "packet_list": [
                    "'PacketList'"
                ]
            }
        },
        "RxWindow.__iter__": {
            "name": "__iter__",
            "location": 111,
            "return": [
                "Iterator[MsgTuple]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RxWindow.__len__": {
            "name": "__len__",
            "location": 115,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RxWindow.add_contacts": {
            "name": "add_contacts",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pub_keys": [
                    "List[bytes]"
                ]
            }
        },
        "RxWindow.remove_contacts": {
            "name": "remove_contacts",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pub_keys": [
                    "List[bytes]"
                ]
            }
        },
        "RxWindow.reset_window": {
            "name": "reset_window",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RxWindow.has_contact": {
            "name": "has_contact",
            "location": 134,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "onion_pub_key": [
                    "bytes"
                ]
            }
        },
        "RxWindow.update_handle_dict": {
            "name": "update_handle_dict",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pub_key": [
                    "bytes"
                ]
            }
        },
        "RxWindow.create_handle_dict": {
            "name": "create_handle_dict",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message_log": [
                    "Optional[List[MsgTuple]]"
                ]
            }
        },
        "RxWindow.get_handle": {
            "name": "get_handle",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "time_stamp": [
                    "'datetime'"
                ],
                "onion_pub_key": [
                    "bytes"
                ],
                "origin": [
                    "bytes"
                ],
                "whisper": [
                    "bool"
                ],
                "event_msg": [
                    "bool"
                ]
            }
        },
        "RxWindow.print": {
            "name": "print",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg_tuple": [
                    "MsgTuple"
                ],
                "file": [
                    "Any"
                ]
            }
        },
        "RxWindow.add_new": {
            "name": "add_new",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "'datetime'"
                ],
                "message": [
                    "str"
                ],
                "onion_pub_key": [
                    "bytes"
                ],
                "origin": [
                    "bytes"
                ],
                "output": [
                    "bool"
                ],
                "whisper": [
                    "bool"
                ],
                "event_msg": [
                    "bool"
                ]
            }
        },
        "RxWindow.redraw": {
            "name": "redraw",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "Any"
                ]
            }
        },
        "RxWindow.redraw_file_win": {
            "name": "redraw_file_win",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowList.__init__": {
            "name": "__init__",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "'Settings'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "packet_list": [
                    "'PacketList'"
                ]
            }
        },
        "WindowList.__iter__": {
            "name": "__iter__",
            "location": 340,
            "return": [
                "Iterator[RxWindow]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowList.__len__": {
            "name": "__len__",
            "location": 344,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowList.has_window": {
            "name": "has_window",
            "location": 348,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "bytes"
                ]
            }
        },
        "WindowList.remove_window": {
            "name": "remove_window",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "bytes"
                ]
            }
        },
        "WindowList.get_group_windows": {
            "name": "get_group_windows",
            "location": 359,
            "return": [
                "List[RxWindow]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowList.get_window": {
            "name": "get_window",
            "location": 363,
            "return": [
                "'RxWindow'"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "bytes"
                ]
            }
        },
        "WindowList.refresh_file_window_check": {
            "name": "refresh_file_window_check",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowList.get_command_window": {
            "name": "get_command_window",
            "location": 378,
            "return": [
                "'RxWindow'"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowList.set_active_rx_window": {
            "name": "set_active_rx_window",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "bytes"
                ]
            }
        }
    },
    "tfc-master/src/receiver/__init__.py": {},
    "tfc-master/src/relay/client.py": {
        "client_scheduler": {
            "name": "client_scheduler",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "queues": [
                    "'QueueDict'"
                ],
                "gateway": [
                    "'Gateway'"
                ],
                "url_token_private_key": [
                    "'X448PrivateKey'"
                ],
                "unit_test": [
                    "bool"
                ]
            }
        },
        "add_new_client_process": {
            "name": "add_new_client_process",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "gateway": [
                    "'Gateway'"
                ],
                "is_existing_contact": [
                    "bool"
                ],
                "onion_addr_user": [
                    "str"
                ],
                "onion_pub_keys": [
                    "List[bytes]"
                ],
                "proc_dict": [
                    "Dict[(bytes, Process)]"
                ],
                "queues": [
                    "'QueueDict'"
                ],
                "tor_port": [
                    "int"
                ],
                "url_token_private_key": [
                    "'X448PrivateKey'"
                ]
            }
        },
        "remove_client_process": {
            "name": "remove_client_process",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "onion_pub_keys": [
                    "List[bytes]"
                ],
                "proc_dict": [
                    "Dict[(bytes, Process)]"
                ]
            }
        },
        "client": {
            "name": "client",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "onion_pub_key": [
                    "bytes"
                ],
                "queues": [
                    "'QueueDict'"
                ],
                "url_token_private_key": [
                    "'X448PrivateKey'"
                ],
                "tor_port": [
                    "str"
                ],
                "gateway": [
                    "'Gateway'"
                ],
                "onion_addr_user": [
                    "str"
                ],
                "unit_test": [
                    "bool"
                ]
            }
        },
        "update_url_token": {
            "name": "update_url_token",
            "location": 168,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "url_token_private_key": [
                    "'X448PrivateKey'"
                ],
                "ut_pubkey_hex": [
                    "str"
                ],
                "cached_pk": [
                    "str"
                ],
                "onion_pub_key": [
                    "bytes"
                ],
                "queues": [
                    "'QueueDict'"
                ]
            }
        },
        "manage_contact_status": {
            "name": "manage_contact_status",
            "location": 197,
            "return": [
                "Tuple[(bool, float)]"
            ],
            "arguments": {
                "ut_pubkey_hex": [
                    "str"
                ],
                "check_delay": [
                    "float"
                ],
                "is_online": [
                    "bool"
                ],
                "short_addr": [
                    "str"
                ]
            }
        },
        "load_url_token": {
            "name": "load_url_token",
            "location": 219,
            "return": [
                "str"
            ],
            "arguments": {
                "onion_addr": [
                    "str"
                ],
                "session": [
                    "'Session'"
                ]
            }
        },
        "send_contact_request": {
            "name": "send_contact_request",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "onion_addr": [
                    "str"
                ],
                "onion_addr_user": [
                    "str"
                ],
                "session": [
                    "'Session'"
                ]
            }
        },
        "get_data_loop": {
            "name": "get_data_loop",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "onion_addr": [
                    "str"
                ],
                "url_token": [
                    "str"
                ],
                "short_addr": [
                    "str"
                ],
                "onion_pub_key": [
                    "bytes"
                ],
                "queues": [
                    "'QueueDict'"
                ],
                "session": [
                    "'Session'"
                ],
                "gateway": [
                    "'Gateway'"
                ]
            }
        },
        "check_for_files": {
            "name": "check_for_files",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "url_token": [
                    "str"
                ],
                "onion_pub_key": [
                    "bytes"
                ],
                "onion_addr": [
                    "str"
                ],
                "short_addr": [
                    "str"
                ],
                "session": [
                    "'Session'"
                ],
                "queues": [
                    "'QueueDict'"
                ]
            }
        },
        "process_received_packet": {
            "name": "process_received_packet",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "ts": [
                    "'datetime'"
                ],
                "ts_bytes": [
                    "bytes"
                ],
                "header": [
                    "bytes"
                ],
                "payload_bytes": [
                    "bytes"
                ],
                "onion_pub_key": [
                    "bytes"
                ],
                "short_addr": [
                    "str"
                ],
                "queues": [
                    "'QueueDict'"
                ],
                "gateway": [
                    "'Gateway'"
                ]
            }
        },
        "g_msg_manager": {
            "name": "g_msg_manager",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "queues": [
                    "'QueueDict'"
                ],
                "unit_test": [
                    "bool"
                ]
            }
        },
        "process_group_management_message": {
            "name": "process_group_management_message",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes"
                ],
                "existing_contacts": [
                    "List[bytes]"
                ],
                "group_id_hr": [
                    "str"
                ],
                "header": [
                    "bytes"
                ],
                "trunc_addr": [
                    "str"
                ]
            }
        },
        "c_req_manager": {
            "name": "c_req_manager",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "queues": [
                    "'QueueDict'"
                ],
                "unit_test": [
                    "bool"
                ]
            }
        },
        "update_list_of_existing_contacts": {
            "name": "update_list_of_existing_contacts",
            "location": 444,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "contact_queue": [
                    "'Queue[Any]'"
                ],
                "existing_contacts": [
                    "List[bytes]"
                ]
            }
        }
    },
    "tfc-master/src/relay/commands.py": {
        "relay_command": {
            "name": "relay_command",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "queues": [
                    "'QueueDict'"
                ],
                "gateway": [
                    "'Gateway'"
                ],
                "unit_test": [
                    "bool"
                ]
            }
        },
        "process_command": {
            "name": "process_command",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "command": [
                    "bytes"
                ],
                "gateway": [
                    "'Gateway'"
                ],
                "queues": [
                    "'QueueDict'"
                ]
            }
        },
        "race_condition_delay": {
            "name": "race_condition_delay",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "gateway": [
                    "'Gateway'"
                ]
            }
        },
        "clear_windows": {
            "name": "clear_windows",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "gateway": [
                    "'Gateway'"
                ]
            }
        },
        "reset_windows": {
            "name": "reset_windows",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "gateway": [
                    "'Gateway'"
                ]
            }
        },
        "exit_tfc": {
            "name": "exit_tfc",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "gateway": [
                    "'Gateway'"
                ],
                "queues": [
                    "'QueueDict'"
                ]
            }
        },
        "wipe": {
            "name": "wipe",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "gateway": [
                    "'Gateway'"
                ],
                "queues": [
                    "'QueueDict'"
                ]
            }
        },
        "change_ec_ratio": {
            "name": "change_ec_ratio",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "command": [
                    "bytes"
                ],
                "gateway": [
                    "'Gateway'"
                ]
            }
        },
        "change_baudrate": {
            "name": "change_baudrate",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "command": [
                    "bytes"
                ],
                "gateway": [
                    "'Gateway'"
                ]
            }
        },
        "manage_contact_req": {
            "name": "manage_contact_req",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "command": [
                    "bytes"
                ],
                "queues": [
                    "'QueueDict'"
                ],
                "notify": [
                    "bool"
                ]
            }
        },
        "add_contact": {
            "name": "add_contact",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "command": [
                    "bytes"
                ],
                "queues": [
                    "'QueueDict'"
                ],
                "existing": [
                    "bool"
                ]
            }
        },
        "remove_contact": {
            "name": "remove_contact",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "command": [
                    "bytes"
                ],
                "queues": [
                    "'QueueDict'"
                ]
            }
        },
        "add_onion_data": {
            "name": "add_onion_data",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "command": [
                    "bytes"
                ],
                "queues": [
                    "'QueueDict'"
                ]
            }
        },
        "compare_accounts": {
            "name": "compare_accounts",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "command": [
                    "bytes"
                ],
                "queues": [
                    "'QueueDict'"
                ]
            }
        },
        "compare_pub_keys": {
            "name": "compare_pub_keys",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "command": [
                    "bytes"
                ],
                "queues": [
                    "'QueueDict'"
                ]
            }
        }
    },
    "tfc-master/src/relay/diffs.py": {
        "account_checker": {
            "name": "account_checker",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "queues": [
                    "'QueueDict'"
                ],
                "stdin_fd": [
                    "int"
                ],
                "unit_test": [
                    "bool"
                ]
            }
        },
        "get_account_from_user": {
            "name": "get_account_from_user",
            "location": 145,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "account_list": [
                    "List[str]"
                ],
                "onion_address_user": [
                    "str"
                ],
                "account_input_queue": [
                    "'AccountQueue'"
                ]
            }
        },
        "pub_key_checker": {
            "name": "pub_key_checker",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "queues": [
                    "'QueueDict'"
                ],
                "local_test": [
                    "bool"
                ],
                "unit_test": [
                    "bool"
                ]
            }
        },
        "show_value_diffs": {
            "name": "show_value_diffs",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "value_type": [
                    "str"
                ],
                "true_value": [
                    "str"
                ],
                "purp_value": [
                    "str"
                ],
                "local_test": [
                    "bool"
                ]
            }
        },
        "GetAccountFromUser.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "queue": [
                    "'AccountQueue'"
                ],
                "onion_address_user": [
                    "str"
                ]
            }
        },
        "GetAccountFromUser.evaluate_account": {
            "name": "evaluate_account",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetAccountFromUser.dismiss_window": {
            "name": "dismiss_window",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tfc-master/src/relay/onion.py": {
        "get_available_port": {
            "name": "get_available_port",
            "location": 55,
            "return": [
                "int"
            ],
            "arguments": {
                "min_port": [
                    "int"
                ],
                "max_port": [
                    "int"
                ]
            }
        },
        "stem_compatible_ed25519_key_from_private_key": {
            "name": "stem_compatible_ed25519_key_from_private_key",
            "location": 156,
            "return": [
                "str"
            ],
            "arguments": {
                "private_key": [
                    "bytes"
                ]
            }
        },
        "onion_service": {
            "name": "onion_service",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "queues": [
                    "Dict[(bytes, 'Queue[Any]')]"
                ]
            }
        },
        "monitor_queues": {
            "name": "monitor_queues",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "tor": [
                    "Tor"
                ],
                "response": [
                    "Any"
                ],
                "queues": [
                    "'QueueDict'"
                ]
            }
        },
        "Tor.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tor.connect": {
            "name": "connect",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int"
                ]
            }
        },
        "Tor.launch_tor_process": {
            "name": "launch_tor_process",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int"
                ],
                "tor_control_socket": [
                    "Union[(bytes, str)]"
                ],
                "tor_data_directory": [
                    "Any"
                ]
            }
        },
        "Tor.stop": {
            "name": "stop",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "stem_compatible_ed25519_key_from_private_key.bit": {
            "name": "bit",
            "location": 164,
            "return": [
                "int"
            ],
            "arguments": {
                "h": [
                    "bytes"
                ],
                "i": [
                    "int"
                ]
            }
        },
        "stem_compatible_ed25519_key_from_private_key.encode_int": {
            "name": "encode_int",
            "location": 171,
            "return": [
                "bytes"
            ],
            "arguments": {
                "y": [
                    "int"
                ]
            }
        },
        "stem_compatible_ed25519_key_from_private_key.expand_private_key": {
            "name": "expand_private_key",
            "location": 176,
            "return": [
                "bytes"
            ],
            "arguments": {
                "sk": [
                    "bytes"
                ]
            }
        }
    },
    "tfc-master/src/relay/server.py": {
        "validate_url_token": {
            "name": "validate_url_token",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "purp_url_token": [
                    "str"
                ],
                "queues": [
                    "'QueueDict'"
                ],
                "pub_key_dict": [
                    "'PubKeyDict'"
                ]
            }
        },
        "read_buffer_file": {
            "name": "read_buffer_file",
            "location": 84,
            "return": [
                "Tuple[(bytes, str)]"
            ],
            "arguments": {
                "buffer_file_dir": [
                    "str"
                ],
                "buffer_file_name": [
                    "str"
                ]
            }
        },
        "flask_server": {
            "name": "flask_server",
            "location": 101,
            "return": [
                "Optional[Flask]"
            ],
            "arguments": {
                "queues": [
                    "'QueueDict'"
                ],
                "url_token_public_key": [
                    "str"
                ],
                "unit_test": [
                    "bool"
                ]
            }
        },
        "get_message": {
            "name": "get_message",
            "location": 168,
            "return": [
                "str"
            ],
            "arguments": {
                "purp_url_token": [
                    "str"
                ],
                "queues": [
                    "'QueueDict'"
                ],
                "pub_key_dict": [
                    "'PubKeyDict'"
                ],
                "buf_key": [
                    "bytes"
                ]
            }
        },
        "get_file": {
            "name": "get_file",
            "location": 199,
            "return": [
                "Any"
            ],
            "arguments": {
                "purp_url_token": [
                    "str"
                ],
                "queues": [
                    "'QueueDict'"
                ],
                "pub_key_dict": [
                    "'PubKeyDict'"
                ],
                "buf_key": [
                    "bytes"
                ]
            }
        },
        "flask_server.index": {
            "name": "index",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "flask_server.contact_request": {
            "name": "contact_request",
            "location": 141,
            "return": [
                "str"
            ],
            "arguments": {
                "purp_onion_address": [
                    "str"
                ]
            }
        },
        "flask_server.file_get": {
            "name": "file_get",
            "location": 147,
            "return": [
                "Any"
            ],
            "arguments": {
                "purp_url_token": [
                    "str"
                ]
            }
        },
        "flask_server.message_get": {
            "name": "message_get",
            "location": 152,
            "return": [
                "str"
            ],
            "arguments": {
                "purp_url_token": [
                    "str"
                ]
            }
        }
    },
    "tfc-master/src/relay/tcb.py": {
        "src_incoming": {
            "name": "src_incoming",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "queues": [
                    "'QueueDict'"
                ],
                "gateway": [
                    "'Gateway'"
                ],
                "unit_test": [
                    "bool"
                ]
            }
        },
        "load_packet_from_queue": {
            "name": "load_packet_from_queue",
            "location": 96,
            "return": [
                "Tuple[('datetime', bytes)]"
            ],
            "arguments": {
                "queues": [
                    "'QueueDict'"
                ],
                "gateway": [
                    "'Gateway'"
                ]
            }
        },
        "process_command_datagram": {
            "name": "process_command_datagram",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "ts": [
                    "'datetime'"
                ],
                "packet": [
                    "bytes"
                ],
                "header": [
                    "bytes"
                ],
                "queues": [
                    "'QueueDict'"
                ]
            }
        },
        "process_message_datagram": {
            "name": "process_message_datagram",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "ts": [
                    "'datetime'"
                ],
                "packet": [
                    "bytes"
                ],
                "header": [
                    "bytes"
                ],
                "buf_key": [
                    "bytes"
                ],
                "queues": [
                    "'QueueDict'"
                ]
            }
        },
        "process_file_datagram": {
            "name": "process_file_datagram",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "ts": [
                    "'datetime'"
                ],
                "packet": [
                    "bytes"
                ],
                "header": [
                    "bytes"
                ],
                "buf_key": [
                    "bytes"
                ]
            }
        },
        "process_group_management_message": {
            "name": "process_group_management_message",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "ts": [
                    "'datetime'"
                ],
                "packet": [
                    "bytes"
                ],
                "header": [
                    "bytes"
                ],
                "buf_key": [
                    "bytes"
                ]
            }
        },
        "process_add_or_group_remove_member": {
            "name": "process_add_or_group_remove_member",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "ts": [
                    "'datetime'"
                ],
                "header": [
                    "bytes"
                ],
                "buf_key": [
                    "bytes"
                ],
                "header_str": [
                    "str"
                ],
                "group_id": [
                    "bytes"
                ],
                "remaining": [
                    "List[bytes]"
                ],
                "removable": [
                    "List[bytes]"
                ]
            }
        },
        "process_group_exit_header": {
            "name": "process_group_exit_header",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "ts": [
                    "'datetime'"
                ],
                "packet": [
                    "bytes"
                ],
                "header": [
                    "bytes"
                ],
                "buf_key": [
                    "bytes"
                ],
                "header_str": [
                    "str"
                ],
                "group_id": [
                    "bytes"
                ]
            }
        },
        "buffer_to_flask": {
            "name": "buffer_to_flask",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "packet": [
                    "Union[(bytes, str)]"
                ],
                "onion_pub_key": [
                    "bytes"
                ],
                "ts": [
                    "'datetime'"
                ],
                "header": [
                    "bytes"
                ],
                "buf_key": [
                    "bytes"
                ],
                "file": [
                    "bool"
                ]
            }
        },
        "store_unique": {
            "name": "store_unique",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "file_data": [
                    "bytes"
                ],
                "file_dir": [
                    "str"
                ],
                "file_name": [
                    "str"
                ]
            }
        },
        "dst_outgoing": {
            "name": "dst_outgoing",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "queues": [
                    "'QueueDict'"
                ],
                "gateway": [
                    "'Gateway'"
                ],
                "unit_test": [
                    "bool"
                ]
            }
        }
    },
    "tfc-master/src/relay/__init__.py": {},
    "tfc-master/src/transmitter/commands.py": {
        "process_command": {
            "name": "process_command",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "user_input": [
                    "'UserInput'"
                ],
                "window": [
                    "'TxWindow'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "queues": [
                    "'QueueDict'"
                ],
                "master_key": [
                    "'MasterKey'"
                ],
                "onion_service": [
                    "'OnionService'"
                ],
                "gateway": [
                    "'Gateway'"
                ]
            }
        },
        "print_about": {
            "name": "print_about",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "clear_screens": {
            "name": "clear_screens",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "user_input": [
                    "'UserInput'"
                ],
                "window": [
                    "'TxWindow'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "queues": [
                    "'QueueDict'"
                ]
            }
        },
        "rxp_show_sys_win": {
            "name": "rxp_show_sys_win",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "user_input": [
                    "'UserInput'"
                ],
                "window": [
                    "'TxWindow'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "queues": [
                    "'QueueDict'"
                ]
            }
        },
        "exit_tfc": {
            "name": "exit_tfc",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "'Settings'"
                ],
                "queues": [
                    "'QueueDict'"
                ],
                "gateway": [
                    "'Gateway'"
                ]
            }
        },
        "log_command": {
            "name": "log_command",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "user_input": [
                    "'UserInput'"
                ],
                "window": [
                    "'TxWindow'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "queues": [
                    "'QueueDict'"
                ],
                "master_key": [
                    "'MasterKey'"
                ]
            }
        },
        "send_onion_service_key": {
            "name": "send_onion_service_key",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "contact_list": [
                    "'ContactList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "onion_service": [
                    "'OnionService'"
                ],
                "gateway": [
                    "'Gateway'"
                ]
            }
        },
        "print_help": {
            "name": "print_help",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "'Settings'"
                ]
            }
        },
        "print_recipients": {
            "name": "print_recipients",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ]
            }
        },
        "change_master_key": {
            "name": "change_master_key",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "user_input": [
                    "'UserInput'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "queues": [
                    "'QueueDict'"
                ],
                "master_key": [
                    "'MasterKey'"
                ],
                "onion_service": [
                    "'OnionService'"
                ]
            }
        },
        "wait_for_key_db_halt": {
            "name": "wait_for_key_db_halt",
            "location": 500,
            "return": [
                "None"
            ],
            "arguments": {
                "queues": [
                    "'QueueDict'"
                ]
            }
        },
        "wait_for_key_db_ack": {
            "name": "wait_for_key_db_ack",
            "location": 508,
            "return": [
                "None"
            ],
            "arguments": {
                "new_master_key": [
                    "bytes"
                ],
                "queues": [
                    "'QueueDict'"
                ]
            }
        },
        "remove_log": {
            "name": "remove_log",
            "location": 516,
            "return": [
                "None"
            ],
            "arguments": {
                "user_input": [
                    "'UserInput'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "queues": [
                    "'QueueDict'"
                ],
                "master_key": [
                    "'MasterKey'"
                ]
            }
        },
        "determine_selector": {
            "name": "determine_selector",
            "location": 541,
            "return": [
                "bytes"
            ],
            "arguments": {
                "selection": [
                    "str"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ]
            }
        },
        "change_setting": {
            "name": "change_setting",
            "location": 569,
            "return": [
                "None"
            ],
            "arguments": {
                "user_input": [
                    "'UserInput'"
                ],
                "window": [
                    "'TxWindow'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "queues": [
                    "'QueueDict'"
                ],
                "master_key": [
                    "'MasterKey'"
                ],
                "gateway": [
                    "'Gateway'"
                ]
            }
        },
        "check_setting_change_conditions": {
            "name": "check_setting_change_conditions",
            "location": 604,
            "return": [
                "None"
            ],
            "arguments": {
                "setting": [
                    "str"
                ],
                "settings": [
                    "'Settings'"
                ],
                "relay_settings": [
                    "Dict[(str, bytes)]"
                ],
                "master_key": [
                    "'MasterKey'"
                ]
            }
        },
        "change_setting_value": {
            "name": "change_setting_value",
            "location": 621,
            "return": [
                "None"
            ],
            "arguments": {
                "setting": [
                    "str"
                ],
                "value": [
                    "str"
                ],
                "relay_settings": [
                    "Dict[(str, bytes)]"
                ],
                "queues": [
                    "'QueueDict'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "gateway": [
                    "'Gateway'"
                ]
            }
        },
        "propagate_setting_effects": {
            "name": "propagate_setting_effects",
            "location": 647,
            "return": [
                "None"
            ],
            "arguments": {
                "setting": [
                    "str"
                ],
                "queues": [
                    "'QueueDict'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "window": [
                    "'TxWindow'"
                ]
            }
        },
        "print_settings": {
            "name": "print_settings",
            "location": 671,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "'Settings'"
                ],
                "gateway": [
                    "'Gateway'"
                ]
            }
        },
        "rxp_display_unread": {
            "name": "rxp_display_unread",
            "location": 677,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "'Settings'"
                ],
                "queues": [
                    "'QueueDict'"
                ]
            }
        },
        "verify": {
            "name": "verify",
            "location": 685,
            "return": [
                "None"
            ],
            "arguments": {
                "window": [
                    "'TxWindow'"
                ],
                "contact_list": [
                    "'ContactList'"
                ]
            }
        },
        "whisper": {
            "name": "whisper",
            "location": 707,
            "return": [
                "None"
            ],
            "arguments": {
                "user_input": [
                    "'UserInput'"
                ],
                "window": [
                    "'TxWindow'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "queues": [
                    "'QueueDict'"
                ]
            }
        },
        "whois": {
            "name": "whois",
            "location": 733,
            "return": [
                "None"
            ],
            "arguments": {
                "user_input": [
                    "'UserInput'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ]
            }
        },
        "wipe": {
            "name": "wipe",
            "location": 765,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "'Settings'"
                ],
                "queues": [
                    "'QueueDict'"
                ],
                "gateway": [
                    "'Gateway'"
                ]
            }
        },
        "print_help.help_printer": {
            "name": "help_printer",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "tuple_list": [
                    "List[Union[Tuple[(str, str, bool)]]]"
                ]
            }
        }
    },
    "tfc-master/src/transmitter/commands_g.py": {
        "process_group_command": {
            "name": "process_group_command",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "user_input": [
                    "'UserInput'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "queues": [
                    "'QueueDict'"
                ],
                "master_key": [
                    "'MasterKey'"
                ]
            }
        },
        "parse_group_command_parameters": {
            "name": "parse_group_command_parameters",
            "location": 86,
            "return": [
                "Tuple[(str, Optional[bytes], str, List[str])]"
            ],
            "arguments": {
                "input_parameters": [
                    "List[str]"
                ],
                "group_list": [
                    "'GroupList'"
                ]
            }
        },
        "validate_group_id": {
            "name": "validate_group_id",
            "location": 112,
            "return": [
                "Optional[bytes]"
            ],
            "arguments": {
                "input_parameters": [
                    "List[str]"
                ],
                "command_type": [
                    "str"
                ],
                "group_list": [
                    "'GroupList'"
                ]
            }
        },
        "group_create": {
            "name": "group_create",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "group_name": [
                    "str"
                ],
                "purp_members": [
                    "List[bytes]"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "queues": [
                    "'QueueDict'"
                ],
                "_": [
                    "'MasterKey'"
                ],
                "group_id": [
                    "Optional[bytes]"
                ]
            }
        },
        "group_add_member": {
            "name": "group_add_member",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "group_name": [
                    "str"
                ],
                "purp_members": [
                    "List['bytes']"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "queues": [
                    "'QueueDict'"
                ],
                "master_key": [
                    "'MasterKey'"
                ],
                "_": [
                    "Optional[bytes]"
                ]
            }
        },
        "group_rm_member": {
            "name": "group_rm_member",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "group_name": [
                    "str"
                ],
                "purp_members": [
                    "List[bytes]"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "queues": [
                    "'QueueDict'"
                ],
                "master_key": [
                    "'MasterKey'"
                ],
                "_": [
                    "Optional[bytes]"
                ]
            }
        },
        "group_rm_group": {
            "name": "group_rm_group",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "group_name": [
                    "str"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "queues": [
                    "'QueueDict'"
                ],
                "master_key": [
                    "'MasterKey'"
                ],
                "_": [
                    "Optional[bytes]"
                ]
            }
        },
        "group_rename": {
            "name": "group_rename",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "new_name": [
                    "str"
                ],
                "window": [
                    "'TxWindow'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "queues": [
                    "'QueueDict'"
                ]
            }
        }
    },
    "tfc-master/src/transmitter/contact.py": {
        "add_new_contact": {
            "name": "add_new_contact",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "queues": [
                    "'QueueDict'"
                ],
                "onion_service": [
                    "'OnionService'"
                ]
            }
        },
        "get_onion_address_from_user": {
            "name": "get_onion_address_from_user",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "onion_address_user": [
                    "str"
                ],
                "queues": [
                    "'QueueDict'"
                ]
            }
        },
        "remove_contact": {
            "name": "remove_contact",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "user_input": [
                    "'UserInput'"
                ],
                "window": [
                    "'TxWindow'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "queues": [
                    "'QueueDict'"
                ],
                "master_key": [
                    "'MasterKey'"
                ]
            }
        },
        "determine_target": {
            "name": "determine_target",
            "location": 186,
            "return": [
                "str"
            ],
            "arguments": {
                "selection": [
                    "str"
                ],
                "onion_pub_key": [
                    "bytes"
                ],
                "contact_list": [
                    "'ContactList'"
                ]
            }
        },
        "check_for_window_deselection": {
            "name": "check_for_window_deselection",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "onion_pub_key": [
                    "bytes"
                ],
                "window": [
                    "'TxWindow'"
                ],
                "group_list": [
                    "'GroupList'"
                ]
            }
        },
        "change_nick": {
            "name": "change_nick",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "user_input": [
                    "'UserInput'"
                ],
                "window": [
                    "'TxWindow'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "queues": [
                    "'QueueDict'"
                ]
            }
        },
        "contact_setting": {
            "name": "contact_setting",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "user_input": [
                    "'UserInput'"
                ],
                "window": [
                    "'TxWindow'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "queues": [
                    "'QueueDict'"
                ]
            }
        },
        "change_setting_for_selected_contact": {
            "name": "change_setting_for_selected_contact",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd_key": [
                    "str"
                ],
                "b_value": [
                    "bool"
                ],
                "window": [
                    "'TxWindow'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ]
            }
        },
        "change_setting_for_all_contacts": {
            "name": "change_setting_for_all_contacts",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd_key": [
                    "str"
                ],
                "b_value": [
                    "bool"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ]
            }
        }
    },
    "tfc-master/src/transmitter/files.py": {
        "File.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "window": [
                    "'TxWindow'"
                ],
                "settings": [
                    "'Settings'"
                ]
            }
        },
        "File.get_name": {
            "name": "get_name",
            "location": 64,
            "return": [
                "bytes"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "File.name_length_check": {
            "name": "name_length_check",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "bytes"
                ]
            }
        },
        "File.load_file_data": {
            "name": "load_file_data",
            "location": 82,
            "return": [
                "bytes"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "File.get_size": {
            "name": "get_size",
            "location": 91,
            "return": [
                "Tuple[(bytes, str)]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "File.process_file_data": {
            "name": "process_file_data",
            "location": 102,
            "return": [
                "bytes"
            ],
            "arguments": {
                "data": [
                    "bytes"
                ]
            }
        },
        "File.finalize": {
            "name": "finalize",
            "location": 115,
            "return": [
                "Tuple[(str, bytes)]"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "bytes"
                ],
                "processed": [
                    "bytes"
                ]
            }
        },
        "File.update_delivery_time": {
            "name": "update_delivery_time",
            "location": 122,
            "return": [
                "Tuple[(bytes, str)]"
            ],
            "arguments": {
                "name": [
                    "bytes"
                ],
                "size": [
                    "bytes"
                ],
                "processed": [
                    "bytes"
                ],
                "settings": [
                    "'Settings'"
                ],
                "window": [
                    "'TxWindow'"
                ]
            }
        },
        "File.count_number_of_packets": {
            "name": "count_number_of_packets",
            "location": 148,
            "return": [
                "int"
            ],
            "arguments": {
                "name": [
                    "bytes"
                ],
                "size": [
                    "bytes"
                ],
                "processed": [
                    "bytes"
                ],
                "time_bytes": [
                    "bytes"
                ]
            }
        }
    },
    "tfc-master/src/transmitter/input_loop.py": {
        "input_loop": {
            "name": "input_loop",
            "location": 50,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "queues": [
                    "Dict[(bytes, 'Queue[bytes]')]"
                ],
                "settings": [
                    "'Settings'"
                ],
                "gateway": [
                    "'Gateway'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ],
                "master_key": [
                    "'MasterKey'"
                ],
                "onion_service": [
                    "'OnionService'"
                ],
                "stdin_fd": [
                    "int"
                ]
            }
        }
    },
    "tfc-master/src/transmitter/key_exchanges.py": {
        "export_onion_service_data": {
            "name": "export_onion_service_data",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "contact_list": [
                    "'ContactList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "onion_service": [
                    "'OnionService'"
                ],
                "gateway": [
                    "'Gateway'"
                ]
            }
        },
        "deliver_onion_service_data": {
            "name": "deliver_onion_service_data",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "relay_command": [
                    "bytes"
                ],
                "onion_service": [
                    "'OnionService'"
                ],
                "gateway": [
                    "'Gateway'"
                ]
            }
        },
        "new_local_key": {
            "name": "new_local_key",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "contact_list": [
                    "'ContactList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "queues": [
                    "'QueueDict'"
                ]
            }
        },
        "deliver_local_key": {
            "name": "deliver_local_key",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "local_key_packet": [
                    "bytes"
                ],
                "kek": [
                    "bytes"
                ],
                "c_code": [
                    "bytes"
                ],
                "settings": [
                    "'Settings'"
                ],
                "queues": [
                    "'QueueDict'"
                ]
            }
        },
        "start_key_exchange": {
            "name": "start_key_exchange",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "onion_pub_key": [
                    "bytes"
                ],
                "nick": [
                    "str"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "queues": [
                    "'QueueDict'"
                ]
            }
        },
        "exchange_public_keys": {
            "name": "exchange_public_keys",
            "location": 347,
            "return": [
                "bytes"
            ],
            "arguments": {
                "onion_pub_key": [
                    "bytes"
                ],
                "tfc_public_key_user": [
                    "bytes"
                ],
                "kdk_hash": [
                    "bytes"
                ],
                "contact": [
                    "'Contact'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "queues": [
                    "'QueueDict'"
                ]
            }
        },
        "validate_contact_public_key": {
            "name": "validate_contact_public_key",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "tfc_public_key_contact": [
                    "bytes"
                ]
            }
        },
        "validate_contact_fingerprint": {
            "name": "validate_contact_fingerprint",
            "location": 413,
            "return": [
                "bytes"
            ],
            "arguments": {
                "tx_fp": [
                    "bytes"
                ],
                "rx_fp": [
                    "bytes"
                ]
            }
        },
        "verify_fingerprints": {
            "name": "verify_fingerprints",
            "location": 441,
            "return": [
                "bool"
            ],
            "arguments": {
                "tx_fp": [
                    "bytes"
                ],
                "rx_fp": [
                    "bytes"
                ]
            }
        },
        "deliver_contact_data": {
            "name": "deliver_contact_data",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "header": [
                    "bytes"
                ],
                "nick": [
                    "str"
                ],
                "onion_pub_key": [
                    "bytes"
                ],
                "tx_mk": [
                    "bytes"
                ],
                "rx_mk": [
                    "bytes"
                ],
                "tx_hk": [
                    "bytes"
                ],
                "rx_hk": [
                    "bytes"
                ],
                "queues": [
                    "'QueueDict'"
                ],
                "settings": [
                    "'Settings'"
                ]
            }
        },
        "create_pre_shared_key": {
            "name": "create_pre_shared_key",
            "location": 506,
            "return": [
                "None"
            ],
            "arguments": {
                "onion_pub_key": [
                    "bytes"
                ],
                "nick": [
                    "str"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "onion_service": [
                    "'OnionService'"
                ],
                "queues": [
                    "'QueueDict'"
                ]
            }
        },
        "store_keys_on_removable_drive": {
            "name": "store_keys_on_removable_drive",
            "location": 572,
            "return": [
                "None"
            ],
            "arguments": {
                "ct_tag": [
                    "bytes"
                ],
                "salt": [
                    "bytes"
                ],
                "nick": [
                    "str"
                ],
                "onion_pub_key": [
                    "bytes"
                ],
                "onion_service": [
                    "'OnionService'"
                ],
                "settings": [
                    "'Settings'"
                ]
            }
        },
        "rxp_load_psk": {
            "name": "rxp_load_psk",
            "location": 596,
            "return": [
                "None"
            ],
            "arguments": {
                "window": [
                    "'TxWindow'"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "queues": [
                    "'QueueDict'"
                ]
            }
        }
    },
    "tfc-master/src/transmitter/packet.py": {
        "queue_to_nc": {
            "name": "queue_to_nc",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "packet": [
                    "bytes"
                ],
                "nc_queue": [
                    "'Queue[bytes]'"
                ]
            }
        },
        "queue_command": {
            "name": "queue_command",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "command": [
                    "bytes"
                ],
                "settings": [
                    "'Settings'"
                ],
                "queues": [
                    "'QueueDict'"
                ]
            }
        },
        "queue_message": {
            "name": "queue_message",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "user_input": [
                    "'UserInput'"
                ],
                "window": [
                    "Union[('MockWindow', 'TxWindow')]"
                ],
                "settings": [
                    "'Settings'"
                ],
                "queues": [
                    "'QueueDict'"
                ],
                "header": [
                    "bytes"
                ],
                "whisper": [
                    "bool"
                ],
                "log_as_ph": [
                    "bool"
                ]
            }
        },
        "queue_file": {
            "name": "queue_file",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "window": [
                    "'TxWindow'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "queues": [
                    "'QueueDict'"
                ]
            }
        },
        "send_file": {
            "name": "send_file",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "settings": [
                    "'Settings'"
                ],
                "queues": [
                    "'QueueDict'"
                ],
                "window": [
                    "'TxWindow'"
                ]
            }
        },
        "split_to_assembly_packets": {
            "name": "split_to_assembly_packets",
            "location": 304,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "payload": [
                    "bytes"
                ],
                "p_type": [
                    "str"
                ]
            }
        },
        "queue_assembly_packets": {
            "name": "queue_assembly_packets",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "assembly_packet_list": [
                    "List[bytes]"
                ],
                "p_type": [
                    "str"
                ],
                "settings": [
                    "'Settings'"
                ],
                "queues": [
                    "'QueueDict'"
                ],
                "window": [
                    "Optional[Union[('TxWindow', 'MockWindow')]]"
                ],
                "log_as_ph": [
                    "bool"
                ]
            }
        },
        "send_packet": {
            "name": "send_packet",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "key_list": [
                    "'KeyList'"
                ],
                "gateway": [
                    "'Gateway'"
                ],
                "log_queue": [
                    "'Queue[log_queue_data]'"
                ],
                "assembly_packet": [
                    "bytes"
                ],
                "onion_pub_key": [
                    "Optional[bytes]"
                ],
                "log_messages": [
                    "Optional[bool]"
                ],
                "log_as_ph": [
                    "Optional[bool]"
                ]
            }
        },
        "cancel_packet": {
            "name": "cancel_packet",
            "location": 456,
            "return": [
                "None"
            ],
            "arguments": {
                "user_input": [
                    "'UserInput'"
                ],
                "window": [
                    "'TxWindow'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "queues": [
                    "'QueueDict'"
                ]
            }
        },
        "cancel_standard_packet": {
            "name": "cancel_standard_packet",
            "location": 497,
            "return": [
                "None"
            ],
            "arguments": {
                "cancel": [
                    "bool"
                ],
                "cancel_pt": [
                    "bytes"
                ],
                "log_as_ph": [
                    "bool"
                ],
                "p_type": [
                    "str"
                ],
                "queue": [
                    "'Queue[Any]'"
                ],
                "window": [
                    "'TxWindow'"
                ]
            }
        },
        "cancel_traffic_masking_packet": {
            "name": "cancel_traffic_masking_packet",
            "location": 531,
            "return": [
                "None"
            ],
            "arguments": {
                "cancel": [
                    "bool"
                ],
                "cancel_pt": [
                    "bytes"
                ],
                "log_as_ph": [
                    "bool"
                ],
                "p_type": [
                    "str"
                ],
                "queue": [
                    "'Queue[Any]'"
                ]
            }
        }
    },
    "tfc-master/src/transmitter/sender_loop.py": {
        "sender_loop": {
            "name": "sender_loop",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "queues": [
                    "'QueueDict'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "gateway": [
                    "'Gateway'"
                ],
                "key_list": [
                    "'KeyList'"
                ],
                "unit_test": [
                    "bool"
                ]
            }
        },
        "traffic_masking_loop": {
            "name": "traffic_masking_loop",
            "location": 69,
            "return": [
                "'Settings'"
            ],
            "arguments": {
                "queues": [
                    "'QueueDict'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "gateway": [
                    "'Gateway'"
                ],
                "key_list": [
                    "'KeyList'"
                ]
            }
        },
        "exit_packet_check": {
            "name": "exit_packet_check",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "queues": [
                    "'QueueDict'"
                ],
                "gateway": [
                    "'Gateway'"
                ]
            }
        },
        "standard_sender_loop": {
            "name": "standard_sender_loop",
            "location": 191,
            "return": [
                "Tuple[('Settings', 'MessageBuffer')]"
            ],
            "arguments": {
                "queues": [
                    "'QueueDict'"
                ],
                "gateway": [
                    "'Gateway'"
                ],
                "key_list": [
                    "'KeyList'"
                ],
                "m_buffer": [
                    "Optional['MessageBuffer']"
                ]
            }
        },
        "process_key_management_command": {
            "name": "process_key_management_command",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "queues": [
                    "'QueueDict'"
                ],
                "key_list": [
                    "'KeyList'"
                ]
            }
        },
        "process_command": {
            "name": "process_command",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "queues": [
                    "'QueueDict'"
                ],
                "key_list": [
                    "'KeyList'"
                ],
                "gateway": [
                    "'Gateway'"
                ]
            }
        },
        "process_relay_packets": {
            "name": "process_relay_packets",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "queues": [
                    "'QueueDict'"
                ],
                "gateway": [
                    "'Gateway'"
                ]
            }
        },
        "process_buffered_messages": {
            "name": "process_buffered_messages",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "m_buffer": [
                    "'MessageBuffer'"
                ],
                "queues": [
                    "'QueueDict'"
                ],
                "key_list": [
                    "'KeyList'"
                ],
                "gateway": [
                    "'Gateway'"
                ]
            }
        },
        "process_new_message": {
            "name": "process_new_message",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "m_buffer": [
                    "'MessageBuffer'"
                ],
                "queues": [
                    "'QueueDict'"
                ],
                "key_list": [
                    "'KeyList'"
                ],
                "gateway": [
                    "'Gateway'"
                ]
            }
        }
    },
    "tfc-master/src/transmitter/traffic_masking.py": {
        "noise_loop": {
            "name": "noise_loop",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "queues": [
                    "'QueueDict'"
                ],
                "contact_list": [
                    "Optional['ContactList']"
                ],
                "unit_test": [
                    "bool"
                ]
            }
        }
    },
    "tfc-master/src/transmitter/user_input.py": {
        "process_aliases": {
            "name": "process_aliases",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "plaintext": [
                    "str"
                ],
                "settings": [
                    "'Settings'"
                ],
                "window": [
                    "'TxWindow'"
                ]
            }
        },
        "get_input": {
            "name": "get_input",
            "location": 53,
            "return": [
                "'UserInput'"
            ],
            "arguments": {
                "window": [
                    "'TxWindow'"
                ],
                "settings": [
                    "'Settings'"
                ]
            }
        },
        "UserInput.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "plaintext": [
                    "str"
                ],
                "type_": [
                    "str"
                ]
            }
        }
    },
    "tfc-master/src/transmitter/windows.py": {
        "select_window": {
            "name": "select_window",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "user_input": [
                    "'UserInput'"
                ],
                "window": [
                    "'TxWindow'"
                ],
                "settings": [
                    "'Settings'"
                ],
                "queues": [
                    "'QueueDict'"
                ],
                "onion_service": [
                    "'OnionService'"
                ],
                "gateway": [
                    "'Gateway'"
                ]
            }
        },
        "TxWindow.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ]
            }
        },
        "TxWindow.__iter__": {
            "name": "__iter__",
            "location": 70,
            "return": [
                "Iterator[Contact]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TxWindow.__len__": {
            "name": "__len__",
            "location": 74,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TxWindow.select_tx_window": {
            "name": "select_tx_window",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "'Settings'"
                ],
                "queues": [
                    "'QueueDict'"
                ],
                "onion_service": [
                    "'OnionService'"
                ],
                "gateway": [
                    "'Gateway'"
                ],
                "selection": [
                    "Optional[str]"
                ],
                "cmd": [
                    "bool"
                ]
            }
        },
        "TxWindow.select_recipient": {
            "name": "select_recipient",
            "location": 110,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TxWindow.select_contact": {
            "name": "select_contact",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selection": [
                    "str"
                ],
                "cmd": [
                    "bool"
                ],
                "queues": [
                    "'QueueDict'"
                ],
                "settings": [
                    "'Settings'"
                ]
            }
        },
        "TxWindow.select_group": {
            "name": "select_group",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selection": [
                    "str"
                ],
                "cmd": [
                    "bool"
                ],
                "settings": [
                    "'Settings'"
                ]
            }
        },
        "TxWindow.window_selection_command": {
            "name": "window_selection_command",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selection": [
                    "str"
                ],
                "settings": [
                    "'Settings'"
                ],
                "queues": [
                    "'QueueDict'"
                ],
                "onion_service": [
                    "'OnionService'"
                ],
                "gateway": [
                    "'Gateway'"
                ]
            }
        },
        "TxWindow.deselect": {
            "name": "deselect",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TxWindow.is_selected": {
            "name": "is_selected",
            "location": 225,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TxWindow.update_log_messages": {
            "name": "update_log_messages",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TxWindow.update_window": {
            "name": "update_window",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group_list": [
                    "'GroupList'"
                ]
            }
        }
    },
    "tfc-master/src/transmitter/window_mock.py": {
        "MockWindow.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "bytes"
                ],
                "contacts": [
                    "List['Contact']"
                ]
            }
        },
        "MockWindow.__iter__": {
            "name": "__iter__",
            "location": 48,
            "return": [
                "Iterator[Contact]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tfc-master/src/transmitter/__init__.py": {},
    "tfc-master/tests/mock_classes.py": {
        "create_contact": {
            "name": "create_contact",
            "location": 57,
            "return": [
                "Contact"
            ],
            "arguments": {
                "nick": [
                    "str"
                ],
                "tx_fingerprint": [
                    "bytes"
                ],
                "rx_fingerprint": [
                    "bytes"
                ],
                "kex_status": [
                    "bytes"
                ],
                "log_messages": [
                    "bool"
                ],
                "file_reception": [
                    "bool"
                ],
                "notifications": [
                    "bool"
                ]
            }
        },
        "create_group": {
            "name": "create_group",
            "location": 77,
            "return": [
                "Group"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "nick_list": [
                    "List[str]"
                ]
            }
        },
        "create_keyset": {
            "name": "create_keyset",
            "location": 86,
            "return": [
                "KeySet"
            ],
            "arguments": {
                "nick": [
                    "str"
                ],
                "tx_key": [
                    "bytes"
                ],
                "tx_hek": [
                    "bytes"
                ],
                "rx_key": [
                    "bytes"
                ],
                "rx_hek": [
                    "bytes"
                ],
                "tx_harac": [
                    "int"
                ],
                "rx_harac": [
                    "int"
                ],
                "store_f": [
                    "Callable[(..., None)]"
                ]
            }
        },
        "create_rx_window": {
            "name": "create_rx_window",
            "location": 100,
            "return": [
                "OrigRxWindow"
            ],
            "arguments": {
                "nick": [
                    "str"
                ]
            }
        },
        "ContactList.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nicks": []
            }
        },
        "ContactList.__iter__": {
            "name": "__iter__",
            "location": 118,
            "return": [
                "Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContactList.store_contacts": {
            "name": "store_contacts",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "replace": [
                    "bool"
                ]
            }
        },
        "ContactList.load_contacts": {
            "name": "load_contacts",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContactList.print_contacts": {
            "name": "print_contacts",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gateway.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gateway.write": {
            "name": "write",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "str"
                ]
            }
        },
        "GroupList.__init__": {
            "name": "__init__",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "groups": [
                    "List[str]"
                ]
            }
        },
        "GroupList.__iter__": {
            "name": "__iter__",
            "location": 157,
            "return": [
                "Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupList.__len__": {
            "name": "__len__",
            "location": 161,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupList.store_groups": {
            "name": "store_groups",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "replace": [
                    "bool"
                ]
            }
        },
        "GroupList.load_groups": {
            "name": "load_groups",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupList.print_groups": {
            "name": "print_groups",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyList.__init__": {
            "name": "__init__",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nicks": [
                    "List[str]"
                ]
            }
        },
        "KeyList.store_keys": {
            "name": "store_keys",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "replace": [
                    "bool"
                ]
            }
        },
        "KeyList.load_keys": {
            "name": "load_keys",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MasterKey.__init__": {
            "name": "__init__",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MasterKey.load_master_key": {
            "name": "load_master_key",
            "location": 210,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "OnionService.__init__": {
            "name": "__init__",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.__init__": {
            "name": "__init__",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.store_settings": {
            "name": "store_settings",
            "location": 278,
            "return": [],
            "arguments": {
                "self": [],
                "replace": [
                    "bool"
                ]
            }
        },
        "Settings.load_settings": {
            "name": "load_settings",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.validate_key_value_pair": {
            "name": "validate_key_value_pair",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ],
                "contact_list": [
                    "'ContactList'"
                ],
                "group_list": [
                    "'GroupList'"
                ]
            }
        },
        "GatewaySettings.__init__": {
            "name": "__init__",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GatewaySettings.store_settings": {
            "name": "store_settings",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GatewaySettings.load_settings": {
            "name": "load_settings",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TxWindow.__init__": {
            "name": "__init__",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserInput.__init__": {
            "name": "__init__",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "plaintext": [
                    "str"
                ]
            }
        },
        "Packet.__init__": {
            "name": "__init__",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Packet.add_packet": {
            "name": "add_packet",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "packet": [
                    "bytes"
                ]
            }
        },
        "Packet.assemble_message_packet": {
            "name": "assemble_message_packet",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Packet.assemble_and_store_file": {
            "name": "assemble_and_store_file",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Packet.assemble_command_packet": {
            "name": "assemble_command_packet",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PacketList.__init__": {
            "name": "__init__",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RxWindow.__init__": {
            "name": "__init__",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowList.__init__": {
            "name": "__init__",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nicks": [
                    "List[str]"
                ]
            }
        },
        "WindowList.__len__": {
            "name": "__len__",
            "location": 458,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowList.__iter__": {
            "name": "__iter__",
            "location": 461,
            "return": [
                "RxWindow"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowList.group_windows": {
            "name": "group_windows",
            "location": 464,
            "return": [
                "List[RxWindow]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowList.set_active_rx_window": {
            "name": "set_active_rx_window",
            "location": 468,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "bytes"
                ]
            }
        },
        "WindowList.has_window": {
            "name": "has_window",
            "location": 475,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "bytes"
                ]
            }
        },
        "WindowList.get_list_of_window_names": {
            "name": "get_list_of_window_names",
            "location": 479,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowList.get_command_window": {
            "name": "get_command_window",
            "location": 483,
            "return": [
                "RxWindow"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowList.remove_window": {
            "name": "remove_window",
            "location": 487,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "bytes"
                ]
            }
        },
        "WindowList.get_window": {
            "name": "get_window",
            "location": 494,
            "return": [
                "RxWindow"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "bytes"
                ]
            }
        }
    },
    "tfc-master/tests/test_dd.py": {
        "TestDrawFrame.test_left_to_right_oriented_data_diode_frames": {
            "name": "test_left_to_right_oriented_data_diode_frames",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDrawFrame.test_right_to_left_oriented_data_diode_frames": {
            "name": "test_right_to_left_oriented_data_diode_frames",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnimate.test_animate": {
            "name": "test_animate",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestRxLoop.setUp": {
            "name": "setUp",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRxLoop.tearDown": {
            "name": "tearDown",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRxLoop.test_rx_loop": {
            "name": "test_rx_loop",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestTxLoop.setUp": {
            "name": "setUp",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTxLoop.tearDown": {
            "name": "tearDown",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTxLoop.test_tx_loop": {
            "name": "test_tx_loop",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessArguments.test_invalid_arguments_exit": {
            "name": "test_invalid_arguments_exit",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessArguments.test_valid_arguments": {
            "name": "test_valid_arguments",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMain.setUp": {
            "name": "setUp",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMain.tearDown": {
            "name": "tearDown",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMain.test_main": {
            "name": "test_main",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTxLoop.test_tx_loop.queue_delayer": {
            "name": "queue_delayer",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestMain.test_main.queue_delayer": {
            "name": "queue_delayer",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tfc-master/tests/utils.py": {
        "nick_to_pub_key": {
            "name": "nick_to_pub_key",
            "location": 61,
            "return": [
                "bytes"
            ],
            "arguments": {
                "nick": [
                    "str"
                ]
            }
        },
        "nick_to_onion_address": {
            "name": "nick_to_onion_address",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "nick": [
                    "str"
                ]
            }
        },
        "nick_to_short_address": {
            "name": "nick_to_short_address",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "nick": [
                    "str"
                ]
            }
        },
        "group_name_to_group_id": {
            "name": "group_name_to_group_id",
            "location": 76,
            "return": [
                "bytes"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "ignored": {
            "name": "ignored",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "cd_unit_test": {
            "name": "cd_unit_test",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "cleanup": {
            "name": "cleanup",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "name": []
            }
        },
        "func_that_raises": {
            "name": "func_that_raises",
            "location": 135,
            "return": [
                "Callable"
            ],
            "arguments": {
                "exception": [
                    "Any"
                ]
            }
        },
        "tamper_file": {
            "name": "tamper_file",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ],
                "tamper_size": [
                    "int"
                ]
            }
        },
        "tear_queue": {
            "name": "tear_queue",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "queue": [
                    "'Queue'"
                ]
            }
        },
        "tear_queues": {
            "name": "tear_queues",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "queues": [
                    "Dict[(bytes, 'Queue')]"
                ]
            }
        },
        "tamper_last_byte": {
            "name": "tamper_last_byte",
            "location": 169,
            "return": [
                "bytes"
            ],
            "arguments": {
                "byte_string": [
                    "bytes"
                ]
            }
        },
        "assembly_packet_creator": {
            "name": "assembly_packet_creator",
            "location": 174,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "packet_type": [
                    "str"
                ],
                "payload": [
                    "Union[(bytes, str)]"
                ],
                "inner_key": [
                    "bytes"
                ],
                "tamper_ciphertext": [
                    "bool"
                ],
                "message_header": [
                    "bytes"
                ],
                "tamper_plaintext": [
                    "bool"
                ],
                "group_id": [
                    "bytes"
                ],
                "group_msg_id": [
                    "bytes"
                ],
                "whisper_header": [
                    "bytes"
                ],
                "create_zip_bomb": [
                    "bool"
                ],
                "tamper_compression": [
                    "bool"
                ],
                "packet_time": [
                    "bytes"
                ],
                "packet_size": [
                    "bytes"
                ],
                "file_name": [
                    "bytes"
                ],
                "omit_header_delim": [
                    "bool"
                ],
                "s_header_override": [
                    "bytes"
                ],
                "l_header_override": [
                    "bytes"
                ],
                "a_header_override": [
                    "bytes"
                ],
                "e_header_override": [
                    "bytes"
                ],
                "tamper_cmd_hash": [
                    "bool"
                ],
                "no_padding": [
                    "bool"
                ],
                "split_length": [
                    "int"
                ],
                "encrypt_packet": [
                    "bool"
                ],
                "message_number": [
                    "int"
                ],
                "harac": [
                    "int"
                ],
                "message_key": [
                    "bytes"
                ],
                "header_key": [
                    "bytes"
                ],
                "tamper_harac": [
                    "bool"
                ],
                "tamper_message": [
                    "bool"
                ],
                "onion_pub_key": [
                    "bytes"
                ],
                "origin_header": [
                    "bytes"
                ]
            }
        },
        "gen_queue_dict": {
            "name": "gen_queue_dict",
            "location": 350,
            "return": [
                "Dict[(bytes, Queue)]"
            ],
            "arguments": {}
        },
        "TFCTestCase.assert_se": {
            "name": "assert_se",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ],
                "func": [
                    "Callable[(..., Any)]"
                ]
            }
        },
        "TFCTestCase.assert_prints": {
            "name": "assert_prints",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ],
                "func": [
                    "Callable[(..., Any)]"
                ]
            }
        }
    },
    "tfc-master/tests/__init__.py": {},
    "tfc-master/tests/common/test_crypto.py": {
        "TestBLAKE2b.setUp": {
            "name": "setUp",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBLAKE2b.tearDown": {
            "name": "tearDown",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBLAKE2b.test_blake2b_using_the_official_known_answer_tests": {
            "name": "test_blake2b_using_the_official_known_answer_tests",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBLAKE2bWrapper.setUp": {
            "name": "setUp",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBLAKE2bWrapper.test_invalid_size_key_raises_critical_error": {
            "name": "test_invalid_size_key_raises_critical_error",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBLAKE2bWrapper.test_invalid_size_salt_raises_critical_error": {
            "name": "test_invalid_size_salt_raises_critical_error",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBLAKE2bWrapper.test_invalid_size_personalization_string_raises_critical_error": {
            "name": "test_invalid_size_personalization_string_raises_critical_error",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBLAKE2bWrapper.test_invalid_digest_size_raises_critical_error": {
            "name": "test_invalid_digest_size_raises_critical_error",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBLAKE2bWrapper.test_invalid_blake2b_digest_type_raises_critical_error": {
            "name": "test_invalid_blake2b_digest_type_raises_critical_error",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_blake2b": [
                    "MagicMock"
                ]
            }
        },
        "TestBLAKE2bWrapper.test_invalid_size_blake2b_digest_raises_critical_error": {
            "name": "test_invalid_size_blake2b_digest_raises_critical_error",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_blake2b": [
                    "MagicMock"
                ]
            }
        },
        "TestArgon2KDF.setUp": {
            "name": "setUp",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArgon2KDF.tearDown": {
            "name": "tearDown",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArgon2KDF.test_argon2_cffi_using_the_official_command_line_utility": {
            "name": "test_argon2_cffi_using_the_official_command_line_utility",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArgon2Wrapper.setUp": {
            "name": "setUp",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArgon2Wrapper.test_invalid_length_salt_raises_critical_error": {
            "name": "test_invalid_length_salt_raises_critical_error",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArgon2Wrapper.test_invalid_type_key_from_argon2_raises_critical_error": {
            "name": "test_invalid_type_key_from_argon2_raises_critical_error",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArgon2Wrapper.test_invalid_size_key_from_argon2_raises_critical_error": {
            "name": "test_invalid_size_key_from_argon2_raises_critical_error",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArgon2Wrapper.test_too_small_time_cost_raises_critical_error": {
            "name": "test_too_small_time_cost_raises_critical_error",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArgon2Wrapper.test_too_small_memory_cost_raises_critical_error": {
            "name": "test_too_small_memory_cost_raises_critical_error",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArgon2Wrapper.test_too_small_parallelism_raises_critical_error": {
            "name": "test_too_small_parallelism_raises_critical_error",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArgon2Wrapper.test_argon2_kdf_key_type_and_length": {
            "name": "test_argon2_kdf_key_type_and_length",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestX448.test_generate_private_key_function_returns_private_key_object": {
            "name": "test_generate_private_key_function_returns_private_key_object",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestX448.test_x448_private_key_size": {
            "name": "test_x448_private_key_size",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestX448.test_derive_public_key_returns_public_key_with_correct_type_and_size": {
            "name": "test_derive_public_key_returns_public_key_with_correct_type_and_size",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestX448.test_deriving_invalid_type_public_key_raises_critical_error": {
            "name": "test_deriving_invalid_type_public_key_raises_critical_error",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestX448.test_deriving_invalid_size_public_key_raises_critical_error": {
            "name": "test_deriving_invalid_size_public_key_raises_critical_error",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestX448.test_deriving_shared_secret_with_an_invalid_size_public_key_raises_critical_error": {
            "name": "test_deriving_shared_secret_with_an_invalid_size_public_key_raises_critical_error",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestX448.test_deriving_zero_shared_secret_raises_critical_error": {
            "name": "test_deriving_zero_shared_secret_raises_critical_error",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestX448.test_x448_with_the_official_test_vectors": {
            "name": "test_x448_with_the_official_test_vectors",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestX448.test_non_unique_subkeys_raise_critical_error": {
            "name": "test_non_unique_subkeys_raise_critical_error",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestX448.test_x448_subkey_derivation": {
            "name": "test_x448_subkey_derivation",
            "location": 458,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestXChaCha20Poly1305.setUp": {
            "name": "setUp",
            "location": 568,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestXChaCha20Poly1305.test_encrypt_and_sign_with_the_official_test_vectors": {
            "name": "test_encrypt_and_sign_with_the_official_test_vectors",
            "location": 582,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_csprng": [
                    "MagicMock"
                ]
            }
        },
        "TestXChaCha20Poly1305.test_auth_and_decrypt_with_the_official_test_vectors": {
            "name": "test_auth_and_decrypt_with_the_official_test_vectors",
            "location": 587,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestXChaCha20Poly1305.test_invalid_size_key_raises_critical_error": {
            "name": "test_invalid_size_key_raises_critical_error",
            "location": 591,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestXChaCha20Poly1305.test_invalid_nonce_when_encrypting_raises_critical_error": {
            "name": "test_invalid_nonce_when_encrypting_raises_critical_error",
            "location": 601,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_csprng": [
                    "MagicMock"
                ]
            }
        },
        "TestXChaCha20Poly1305.test_invalid_tag_in_data_from_database_raises_critical_error": {
            "name": "test_invalid_tag_in_data_from_database_raises_critical_error",
            "location": 606,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestXChaCha20Poly1305.test_invalid_tag_in_data_from_contact_raises_nacl_crypto_error": {
            "name": "test_invalid_tag_in_data_from_contact_raises_nacl_crypto_error",
            "location": 610,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBytePadding.test_length_of_the_padded_message_is_divisible_by_padding_size": {
            "name": "test_length_of_the_padded_message_is_divisible_by_padding_size",
            "location": 629,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBytePadding.test_invalid_padding_type_raises_critical_error": {
            "name": "test_invalid_padding_type_raises_critical_error",
            "location": 651,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_padder": [
                    "MagicMock"
                ]
            }
        },
        "TestBytePadding.test_invalid_padding_size_raises_critical_error": {
            "name": "test_invalid_padding_size_raises_critical_error",
            "location": 661,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_padder": [
                    "MagicMock"
                ]
            }
        },
        "TestBytePadding.test_message_length_one_less_than_padding_size_does_not_add_a_dummy_block": {
            "name": "test_message_length_one_less_than_padding_size_does_not_add_a_dummy_block",
            "location": 672,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBytePadding.test_message_length_equal_to_padding_size_adds_a_dummy_block": {
            "name": "test_message_length_equal_to_padding_size_adds_a_dummy_block",
            "location": 677,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBytePadding.test_removal_of_padding_does_not_alter_the_original_message": {
            "name": "test_removal_of_padding_does_not_alter_the_original_message",
            "location": 682,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCSPRNG.test_default_key_type_and_size": {
            "name": "test_default_key_type_and_size",
            "location": 714,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCSPRNG.test_getrandom_called_with_correct_parameters_and_hashes_with_blake2b": {
            "name": "test_getrandom_called_with_correct_parameters_and_hashes_with_blake2b",
            "location": 720,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_getrandom": [
                    "MagicMock"
                ]
            }
        },
        "TestCSPRNG.test_function_returns_key_of_specified_size": {
            "name": "test_function_returns_key_of_specified_size",
            "location": 725,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCSPRNG.test_invalid_entropy_type_from_getrandom_raises_critical_error": {
            "name": "test_invalid_entropy_type_from_getrandom_raises_critical_error",
            "location": 731,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Callable[(..., None)]"
                ]
            }
        },
        "TestCSPRNG.test_subceding_hash_function_min_digest_size_raises_critical_error": {
            "name": "test_subceding_hash_function_min_digest_size_raises_critical_error",
            "location": 735,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCSPRNG.test_exceeding_hash_function_max_digest_size_raises_critical_error": {
            "name": "test_exceeding_hash_function_max_digest_size_raises_critical_error",
            "location": 739,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCSPRNG.test_invalid_size_entropy_from_getrandom_raises_critical_error": {
            "name": "test_invalid_size_entropy_from_getrandom_raises_critical_error",
            "location": 746,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_getrandom": [
                    "MagicMock"
                ],
                "mock_blake2b": [
                    "MagicMock"
                ]
            }
        },
        "TestCheckKernelVersion.test_invalid_kernel_versions_raise_critical_error": {
            "name": "test_invalid_kernel_versions_raise_critical_error",
            "location": 765,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_uname": [
                    "MagicMock"
                ]
            }
        },
        "TestCheckKernelVersion.test_valid_kernel_versions_return_none": {
            "name": "test_valid_kernel_versions_return_none",
            "location": 772,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_uname": [
                    "MagicMock"
                ]
            }
        }
    },
    "tfc-master/tests/common/test_database.py": {
        "TestTFCDatabase.setUp": {
            "name": "setUp",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTFCDatabase.tearDown": {
            "name": "tearDown",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTFCDatabase.test_write_to_file": {
            "name": "test_write_to_file",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_os_fsync": []
            }
        },
        "TestTFCDatabase.test_verify_file": {
            "name": "test_verify_file",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTFCDatabase.test_ensure_temp_write_raises_critical_error_after_exceeding_retry_limit": {
            "name": "test_ensure_temp_write_raises_critical_error_after_exceeding_retry_limit",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTFCDatabase.test_ensure_temp_write_succeeds_just_before_limit": {
            "name": "test_ensure_temp_write_succeeds_just_before_limit",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTFCDatabase.test_store_database_encrypts_data_with_master_key_and_replaces_temp_file_and_original_file": {
            "name": "test_store_database_encrypts_data_with_master_key_and_replaces_temp_file_and_original_file",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTFCDatabase.test_replace_database": {
            "name": "test_replace_database",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTFCDatabase.test_load_database_ignores_invalid_temp_database": {
            "name": "test_load_database_ignores_invalid_temp_database",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTFCDatabase.test_load_database_prefers_valid_temp_database": {
            "name": "test_load_database_prefers_valid_temp_database",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTFCUnencryptedDatabase.setUp": {
            "name": "setUp",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTFCUnencryptedDatabase.tearDown": {
            "name": "tearDown",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTFCUnencryptedDatabase.test_write_to_file": {
            "name": "test_write_to_file",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_os_fsync": []
            }
        },
        "TestTFCUnencryptedDatabase.test_verify_file": {
            "name": "test_verify_file",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTFCUnencryptedDatabase.test_ensure_temp_write_raises_critical_error_after_exceeding_retry_limit": {
            "name": "test_ensure_temp_write_raises_critical_error_after_exceeding_retry_limit",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTFCUnencryptedDatabase.test_ensure_temp_write_succeeds_just_before_limit": {
            "name": "test_ensure_temp_write_succeeds_just_before_limit",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTFCUnencryptedDatabase.test_store_unencrypted_database_replaces_temp_file_and_original_file": {
            "name": "test_store_unencrypted_database_replaces_temp_file_and_original_file",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTFCUnencryptedDatabase.test_replace_database": {
            "name": "test_replace_database",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTFCUnencryptedDatabase.test_loading_invalid_database_data_raises_critical_error": {
            "name": "test_loading_invalid_database_data_raises_critical_error",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTFCUnencryptedDatabase.test_load_database_ignores_invalid_temp_database": {
            "name": "test_load_database_ignores_invalid_temp_database",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTFCUnencryptedDatabase.test_load_database_prioritizes_valid_temp_database": {
            "name": "test_load_database_prioritizes_valid_temp_database",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessageLog.setUp": {
            "name": "setUp",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessageLog.tearDown": {
            "name": "tearDown",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessageLog.test_empty_log_database_is_verified": {
            "name": "test_empty_log_database_is_verified",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessageLog.test_database_with_one_entry_is_verified": {
            "name": "test_database_with_one_entry_is_verified",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessageLog.test_invalid_database_returns_false": {
            "name": "test_invalid_database_returns_false",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessageLog.test_invalid_entry_returns_false": {
            "name": "test_invalid_entry_returns_false",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessageLog.test_table_creation": {
            "name": "test_table_creation",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessageLog.test_writing_to_log_database": {
            "name": "test_writing_to_log_database",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessageLog.test_iterating_over_log_database": {
            "name": "test_iterating_over_log_database",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessageLog.test_invalid_temp_database_is_not_loaded": {
            "name": "test_invalid_temp_database_is_not_loaded",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessageLog.test_valid_temp_database_is_loaded": {
            "name": "test_valid_temp_database_is_loaded",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessageLog.test_database_closing": {
            "name": "test_database_closing",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tfc-master/tests/common/test_db_contacts.py": {
        "TestContact.setUp": {
            "name": "setUp",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContact.test_contact_serialization_length_and_type": {
            "name": "test_contact_serialization_length_and_type",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContact.test_uses_psk": {
            "name": "test_uses_psk",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactList.setUp": {
            "name": "setUp",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactList.tearDown": {
            "name": "tearDown",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactList.test_contact_list_iterates_over_contact_objects": {
            "name": "test_contact_list_iterates_over_contact_objects",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactList.test_len_returns_the_number_of_contacts_and_excludes_the_local_key": {
            "name": "test_len_returns_the_number_of_contacts_and_excludes_the_local_key",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactList.test_storing_and_loading_of_contacts": {
            "name": "test_storing_and_loading_of_contacts",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactList.test_invalid_content_raises_critical_error": {
            "name": "test_invalid_content_raises_critical_error",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactList.test_load_of_modified_database_raises_critical_error": {
            "name": "test_load_of_modified_database_raises_critical_error",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactList.test_generate_dummy_contact": {
            "name": "test_generate_dummy_contact",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactList.test_dummy_contacts": {
            "name": "test_dummy_contacts",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactList.test_add_contact": {
            "name": "test_add_contact",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactList.test_add_contact_that_replaces_an_existing_contact": {
            "name": "test_add_contact_that_replaces_an_existing_contact",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactList.test_remove_contact_by_pub_key": {
            "name": "test_remove_contact_by_pub_key",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactList.test_remove_contact_by_address_or_nick": {
            "name": "test_remove_contact_by_address_or_nick",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactList.test_get_contact_by_pub_key": {
            "name": "test_get_contact_by_pub_key",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactList.test_get_contact_by_address_or_nick_returns_the_same_contact_object_with_address_and_nick": {
            "name": "test_get_contact_by_address_or_nick_returns_the_same_contact_object_with_address_and_nick",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactList.test_get_nick_by_pub_key": {
            "name": "test_get_nick_by_pub_key",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactList.test_get_list_of_contacts": {
            "name": "test_get_list_of_contacts",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactList.test_get_list_of_addresses": {
            "name": "test_get_list_of_addresses",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactList.test_get_list_of_nicks": {
            "name": "test_get_list_of_nicks",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactList.test_get_list_of_pub_keys": {
            "name": "test_get_list_of_pub_keys",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactList.test_get_list_of_pending_pub_keys": {
            "name": "test_get_list_of_pending_pub_keys",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactList.test_get_list_of_existing_pub_keys": {
            "name": "test_get_list_of_existing_pub_keys",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactList.test_contact_selectors": {
            "name": "test_contact_selectors",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactList.test_has_contacts": {
            "name": "test_has_contacts",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactList.test_has_only_pending_contacts": {
            "name": "test_has_only_pending_contacts",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactList.test_has_pub_key": {
            "name": "test_has_pub_key",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactList.test_has_local_contact": {
            "name": "test_has_local_contact",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactList.test_print_contacts": {
            "name": "test_print_contacts",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tfc-master/tests/common/test_db_groups.py": {
        "TestGroup.setUp": {
            "name": "setUp",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroup.tearDown": {
            "name": "tearDown",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroup.test_group_iterates_over_contact_objects": {
            "name": "test_group_iterates_over_contact_objects",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroup.test_len_returns_the_number_of_members": {
            "name": "test_len_returns_the_number_of_members",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroup.test_group_serialization_length_and_type": {
            "name": "test_group_serialization_length_and_type",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroup.test_add_members": {
            "name": "test_add_members",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroup.test_remove_members": {
            "name": "test_remove_members",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroup.test_get_list_of_member_pub_keys": {
            "name": "test_get_list_of_member_pub_keys",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroup.test_has_member": {
            "name": "test_has_member",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroup.test_has_members": {
            "name": "test_has_members",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupList.setUp": {
            "name": "setUp",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupList.tearDown": {
            "name": "tearDown",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupList.test_group_list_iterates_over_group_objects": {
            "name": "test_group_list_iterates_over_group_objects",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupList.test_len_returns_the_number_of_groups": {
            "name": "test_len_returns_the_number_of_groups",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupList.test_storing_and_loading_of_groups": {
            "name": "test_storing_and_loading_of_groups",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupList.test_invalid_content_raises_critical_error": {
            "name": "test_invalid_content_raises_critical_error",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupList.test_load_of_modified_database_raises_critical_error": {
            "name": "test_load_of_modified_database_raises_critical_error",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupList.test_check_db_settings": {
            "name": "test_check_db_settings",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupList.test_generate_group_db_header": {
            "name": "test_generate_group_db_header",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupList.test_generate_dummy_group": {
            "name": "test_generate_dummy_group",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupList.test_dummy_groups": {
            "name": "test_dummy_groups",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupList.test_add_group": {
            "name": "test_add_group",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupList.test_remove_group_by_name": {
            "name": "test_remove_group_by_name",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupList.test_remove_group_by_id": {
            "name": "test_remove_group_by_id",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupList.test_get_group": {
            "name": "test_get_group",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupList.test_get_group_by_id": {
            "name": "test_get_group_by_id",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupList.test_get_list_of_group_names": {
            "name": "test_get_list_of_group_names",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupList.test_get_list_of_group_ids": {
            "name": "test_get_list_of_group_ids",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupList.test_get_list_of_hr_group_ids": {
            "name": "test_get_list_of_hr_group_ids",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupList.test_get_group_members": {
            "name": "test_get_group_members",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupList.test_has_group": {
            "name": "test_has_group",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupList.test_has_group_id": {
            "name": "test_has_group_id",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupList.test_largest_group": {
            "name": "test_largest_group",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupList.test_print_group": {
            "name": "test_print_group",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tfc-master/tests/common/test_db_keys.py": {
        "TestKeySet.setUp": {
            "name": "setUp",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeySet.test_keyset_serialization_length_and_type": {
            "name": "test_keyset_serialization_length_and_type",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeySet.test_rotate_tx_mk": {
            "name": "test_rotate_tx_mk",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeySet.test_update_tx_mk": {
            "name": "test_update_tx_mk",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeySet.test_update_rx_mk": {
            "name": "test_update_rx_mk",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeySet.test_invalid_direction_raises_critical_error": {
            "name": "test_invalid_direction_raises_critical_error",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyList.setUp": {
            "name": "setUp",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyList.tearDown": {
            "name": "tearDown",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyList.test_storing_and_loading_of_keysets": {
            "name": "test_storing_and_loading_of_keysets",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyList.test_load_of_modified_database_raises_critical_error": {
            "name": "test_load_of_modified_database_raises_critical_error",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyList.test_invalid_content_raises_critical_error": {
            "name": "test_invalid_content_raises_critical_error",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyList.test_generate_dummy_keyset": {
            "name": "test_generate_dummy_keyset",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyList.test_dummy_keysets": {
            "name": "test_dummy_keysets",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyList.test_add_keyset": {
            "name": "test_add_keyset",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyList.test_remove_keyset": {
            "name": "test_remove_keyset",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyList.test_change_master_key": {
            "name": "test_change_master_key",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestKeyList.test_update_database": {
            "name": "test_update_database",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyList.test_get_keyset": {
            "name": "test_get_keyset",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyList.test_get_list_of_pub_keys": {
            "name": "test_get_list_of_pub_keys",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyList.test_has_keyset": {
            "name": "test_has_keyset",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyList.test_has_rx_mk": {
            "name": "test_has_rx_mk",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyList.test_has_local_keyset": {
            "name": "test_has_local_keyset",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyList.test_manage": {
            "name": "test_manage",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyList.test_change_master_key.queue_delayer": {
            "name": "queue_delayer",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tfc-master/tests/common/test_db_logs.py": {
        "TestLogWriterLoop.setUp": {
            "name": "setUp",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogWriterLoop.tearDown": {
            "name": "tearDown",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogWriterLoop.test_function_logs_normal_data": {
            "name": "test_function_logs_normal_data",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogWriterLoop.test_function_logs_traffic_masking_data": {
            "name": "test_function_logs_traffic_masking_data",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogWriterLoop.test_function_log_file_masking_queue_controls_log_file_masking": {
            "name": "test_function_log_file_masking_queue_controls_log_file_masking",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogWriterLoop.test_function_allows_control_of_noise_packets_based_on_log_setting_queue": {
            "name": "test_function_allows_control_of_noise_packets_based_on_log_setting_queue",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWriteLogEntry.setUp": {
            "name": "setUp",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWriteLogEntry.tearDown": {
            "name": "tearDown",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWriteLogEntry.test_oversize_packet_raises_critical_error": {
            "name": "test_oversize_packet_raises_critical_error",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWriteLogEntry.test_log_entry_is_concatenated": {
            "name": "test_log_entry_is_concatenated",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccessHistoryAndPrintLogs.setUp": {
            "name": "setUp",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccessHistoryAndPrintLogs.tearDown": {
            "name": "tearDown",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccessHistoryAndPrintLogs.test_missing_log_file_raises_soft_error": {
            "name": "test_missing_log_file_raises_soft_error",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccessHistoryAndPrintLogs.test_empty_log_file": {
            "name": "test_empty_log_file",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccessHistoryAndPrintLogs.test_display_short_private_message": {
            "name": "test_display_short_private_message",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestAccessHistoryAndPrintLogs.test_export_short_private_message": {
            "name": "test_export_short_private_message",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestAccessHistoryAndPrintLogs.test_long_private_message": {
            "name": "test_long_private_message",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestAccessHistoryAndPrintLogs.test_short_group_message": {
            "name": "test_short_group_message",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestAccessHistoryAndPrintLogs.test_long_group_message": {
            "name": "test_long_group_message",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestReEncrypt.setUp": {
            "name": "setUp",
            "location": 534,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReEncrypt.tearDown": {
            "name": "tearDown",
            "location": 545,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReEncrypt.test_missing_log_database_raises_soft_error": {
            "name": "test_missing_log_database_raises_soft_error",
            "location": 549,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReEncrypt.test_database_encryption_with_another_key": {
            "name": "test_database_encryption_with_another_key",
            "location": 558,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestRemoveLog.setUp": {
            "name": "setUp",
            "location": 607,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoveLog.tearDown": {
            "name": "tearDown",
            "location": 631,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoveLog.test_missing_log_file_raises_soft_error": {
            "name": "test_missing_log_file_raises_soft_error",
            "location": 635,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoveLog.test_removal_of_group_logs": {
            "name": "test_removal_of_group_logs",
            "location": 642,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoveLog.test_removal_of_contact_logs": {
            "name": "test_removal_of_contact_logs",
            "location": 689,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogWriterLoop.test_function_logs_normal_data.queue_delayer": {
            "name": "queue_delayer",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestLogWriterLoop.test_function_logs_traffic_masking_data.queue_delayer": {
            "name": "queue_delayer",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestLogWriterLoop.test_function_log_file_masking_queue_controls_log_file_masking.queue_delayer": {
            "name": "queue_delayer",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestLogWriterLoop.test_function_allows_control_of_noise_packets_based_on_log_setting_queue.queue_delayer": {
            "name": "queue_delayer",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tfc-master/tests/common/test_db_masterkey.py": {
        "TestMasterKey.setUp": {
            "name": "setUp",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMasterKey.tearDown": {
            "name": "tearDown",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMasterKey.test_password_generation": {
            "name": "test_password_generation",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMasterKey.test_invalid_data_in_db_raises_critical_error": {
            "name": "test_invalid_data_in_db_raises_critical_error",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestMasterKey.test_load_master_key_with_invalid_data_raises_critical_error": {
            "name": "test_load_master_key_with_invalid_data_raises_critical_error",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestMasterKey.test_master_key_generation_and_load": {
            "name": "test_master_key_generation_and_load",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMasterKey.test_database_data_caching_and_storage_on_command": {
            "name": "test_database_data_caching_and_storage_on_command",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMasterKey.test_determine_time_cost": {
            "name": "test_determine_time_cost",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMasterKey.test_determine_memory_cost": {
            "name": "test_determine_memory_cost",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMasterKey.test_authenticate_action": {
            "name": "test_authenticate_action",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tfc-master/tests/common/test_db_onion.py": {
        "TestOnionService.setUp": {
            "name": "setUp",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOnionService.tearDown": {
            "name": "tearDown",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOnionService.test_onion_service_key_generation_and_load": {
            "name": "test_onion_service_key_generation_and_load",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestOnionService.test_loading_invalid_onion_key_raises_critical_error": {
            "name": "test_loading_invalid_onion_key_raises_critical_error",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestOnionService.test_load_of_modified_database_raises_critical_error": {
            "name": "test_load_of_modified_database_raises_critical_error",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestOnionService.test_confirmation_code_generation": {
            "name": "test_confirmation_code_generation",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tfc-master/tests/common/test_db_settings.py": {
        "TestSettings.setUp": {
            "name": "setUp",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSettings.tearDown": {
            "name": "tearDown",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSettings.test_invalid_type_raises_critical_error_on_store": {
            "name": "test_invalid_type_raises_critical_error_on_store",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSettings.test_invalid_type_raises_critical_error_on_load": {
            "name": "test_invalid_type_raises_critical_error_on_load",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSettings.test_store_and_load_tx_settings": {
            "name": "test_store_and_load_tx_settings",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSettings.test_store_and_load_rx_settings": {
            "name": "test_store_and_load_rx_settings",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSettings.test_load_of_modified_database_raises_critical_error": {
            "name": "test_load_of_modified_database_raises_critical_error",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSettings.test_invalid_type_raises_critical_error_when_changing_settings": {
            "name": "test_invalid_type_raises_critical_error_when_changing_settings",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSettings.test_change_settings": {
            "name": "test_change_settings",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSettings.test_validate_key_value_pair": {
            "name": "test_validate_key_value_pair",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestSettings.test_too_narrow_terminal_raises_fr_when_printing_settings": {
            "name": "test_too_narrow_terminal_raises_fr_when_printing_settings",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestSettings.test_print_settings": {
            "name": "test_print_settings",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tfc-master/tests/common/test_encoding.py": {
        "TestBase58EncodeAndDecode.setUp": {
            "name": "setUp",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBase58EncodeAndDecode.test_encoding_and_decoding_of_random_local_keys": {
            "name": "test_encoding_and_decoding_of_random_local_keys",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBase58EncodeAndDecode.test_encoding_and_decoding_of_random_public_keys": {
            "name": "test_encoding_and_decoding_of_random_public_keys",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBase58EncodeAndDecode.test_invalid_decoding": {
            "name": "test_invalid_decoding",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBase58EncodeAndDecode.test_public_keys_raise_value_error_when_expecting_local_key": {
            "name": "test_public_keys_raise_value_error_when_expecting_local_key",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBase58EncodeAndDecode.test_local_keys_raise_value_error_when_expecting_public_key": {
            "name": "test_local_keys_raise_value_error_when_expecting_public_key",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBase58EncodeAndDecode.test_bitcoin_wif_test_vectors": {
            "name": "test_bitcoin_wif_test_vectors",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBase85Encode.test_b85encode": {
            "name": "test_b85encode",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBase10Encode.test_b10encode": {
            "name": "test_b10encode",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodePadding.test_padding": {
            "name": "test_padding",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodePadding.test_oversize_msg_raises_critical_error": {
            "name": "test_oversize_msg_raises_critical_error",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRmPaddingStr.test_padding_removal": {
            "name": "test_padding_removal",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConversions.test_conversion_back_and_forth": {
            "name": "test_conversion_back_and_forth",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConversions.test_pub_key_to_short_addr": {
            "name": "test_pub_key_to_short_addr",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConversions.test_bool_to_bytes": {
            "name": "test_bool_to_bytes",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConversions.test_bytes_to_bool": {
            "name": "test_bytes_to_bool",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConversions.test_int_to_bytes": {
            "name": "test_int_to_bytes",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConversions.test_bytes_to_int": {
            "name": "test_bytes_to_int",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConversions.test_double_to_bytes": {
            "name": "test_double_to_bytes",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConversions.test_bytes_to_double": {
            "name": "test_bytes_to_double",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConversions.test_str_to_bytes": {
            "name": "test_str_to_bytes",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConversions.test_bytes_to_str": {
            "name": "test_bytes_to_str",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConversions.test_bytes_to_timestamp": {
            "name": "test_bytes_to_timestamp",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tfc-master/tests/common/test_exceptions.py": {
        "TestCriticalError.test_critical_error": {
            "name": "test_critical_error",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSoftError.test_function_return": {
            "name": "test_function_return",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGracefulExit.test_graceful_exit": {
            "name": "test_graceful_exit",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tfc-master/tests/common/test_gateway.py": {
        "TestGatewayLoop.setUp": {
            "name": "setUp",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewayLoop.tearDown": {
            "name": "tearDown",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewayLoop.test_loop": {
            "name": "test_loop",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestGatewaySerial.setUp": {
            "name": "setUp",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewaySerial.tearDown": {
            "name": "tearDown",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewaySerial.test_search_and_establish_serial": {
            "name": "test_search_and_establish_serial",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewaySerial.test_serial_exception_during_establish_exists": {
            "name": "test_serial_exception_during_establish_exists",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewaySerial.test_write_serial_": {
            "name": "test_write_serial_",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewaySerial.test_serial_uninitialized_serial_interface_for_read_raises_critical_error": {
            "name": "test_serial_uninitialized_serial_interface_for_read_raises_critical_error",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewaySerial.test_serial_uninitialized_socket_interface_for_read_raises_critical_error": {
            "name": "test_serial_uninitialized_socket_interface_for_read_raises_critical_error",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewaySerial.test_read_socket": {
            "name": "test_read_socket",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewaySerial.test_read_serial": {
            "name": "test_read_serial",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewaySerial.test_add_error_correction": {
            "name": "test_add_error_correction",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewaySerial.test_detect_errors": {
            "name": "test_detect_errors",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewaySerial.test_search_serial_interfaces": {
            "name": "test_search_serial_interfaces",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewaySerial.test_establish_local_testing_gateway": {
            "name": "test_establish_local_testing_gateway",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewaySerial.test_keyboard_interrupt_exits": {
            "name": "test_keyboard_interrupt_exits",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewaySerial.test_socket_client": {
            "name": "test_socket_client",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewaySerial.test_socket_server": {
            "name": "test_socket_server",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewaySerial.test_local_testing_read": {
            "name": "test_local_testing_read",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewaySerial.test_local_testing_write": {
            "name": "test_local_testing_write",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewaySerial.test_qubes_read_file": {
            "name": "test_qubes_read_file",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewaySerial.test_qubes_send_to_networkerVM": {
            "name": "test_qubes_send_to_networkerVM",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_popen": []
            }
        },
        "TestGatewaySerial.test_qubes_send_to_destinationVM": {
            "name": "test_qubes_send_to_destinationVM",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_popen": []
            }
        },
        "TestGatewaySettings.setUp": {
            "name": "setUp",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewaySettings.tearDown": {
            "name": "tearDown",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewaySettings.test_gateway_setup": {
            "name": "test_gateway_setup",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewaySettings.test_store_and_load_of_settings": {
            "name": "test_store_and_load_of_settings",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewaySettings.test_manually_edited_settings_are_loaded": {
            "name": "test_manually_edited_settings_are_loaded",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewaySettings.test_missing_values_are_set_to_default_and_database_is_overwritten": {
            "name": "test_missing_values_are_set_to_default_and_database_is_overwritten",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewaySettings.test_invalid_format_is_replaced_with_defaults": {
            "name": "test_invalid_format_is_replaced_with_defaults",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewaySettings.test_invalid_serial_baudrate_is_replaced_with_default": {
            "name": "test_invalid_serial_baudrate_is_replaced_with_default",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewaySettings.test_invalid_serial_error_correction_is_replaced_with_default": {
            "name": "test_invalid_serial_error_correction_is_replaced_with_default",
            "location": 451,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewaySettings.test_invalid_serial_interface_is_replaced_with_default": {
            "name": "test_invalid_serial_interface_is_replaced_with_default",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewaySettings.test_invalid_type_is_replaced_with_default": {
            "name": "test_invalid_type_is_replaced_with_default",
            "location": 497,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewaySettings.test_unknown_kv_pair_is_removed": {
            "name": "test_unknown_kv_pair_is_removed",
            "location": 520,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewaySettings.test_setup": {
            "name": "test_setup",
            "location": 546,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewaySettings.test_change_setting": {
            "name": "test_change_setting",
            "location": 559,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestGatewaySettings.test_validate_key_value_pair": {
            "name": "test_validate_key_value_pair",
            "location": 577,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewaySettings.test_too_narrow_terminal_raises_fr_when_printing_settings": {
            "name": "test_too_narrow_terminal_raises_fr_when_printing_settings",
            "location": 593,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestGatewaySettings.test_print_settings": {
            "name": "test_print_settings",
            "location": 597,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGatewaySerial.test_qubes_read_file.packet_delayer": {
            "name": "packet_delayer",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tfc-master/tests/common/test_input.py": {
        "TestAskConfirmationCode.test_ask_confirmation_code": {
            "name": "test_ask_confirmation_code",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestBoxInput.test_box_input": {
            "name": "test_box_input",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetB58Key.setUp": {
            "name": "setUp",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetB58Key.test_invalid_key_type_raises_critical_error": {
            "name": "test_invalid_key_type_raises_critical_error",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetB58Key.test_get_b58_local_key": {
            "name": "test_get_b58_local_key",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetB58Key.test_get_b58_pub_key": {
            "name": "test_get_b58_pub_key",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetB58Key.test_empty_pub_key_returns_empty_bytes": {
            "name": "test_empty_pub_key_returns_empty_bytes",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNCBypassMsg.test_nc_bypass_msg": {
            "name": "test_nc_bypass_msg",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestPwdPrompt.test_pwd_prompt": {
            "name": "test_pwd_prompt",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestYes.test_yes": {
            "name": "test_yes",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        }
    },
    "tfc-master/tests/common/test_misc.py": {
        "TestCalculateRaceConditionDelay.setUp": {
            "name": "setUp",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCalculateRaceConditionDelay.test_race_condition_delay_calculation": {
            "name": "test_race_condition_delay_calculation",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecompress.setUp": {
            "name": "setUp",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecompress.test_successful_decompression": {
            "name": "test_successful_decompression",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecompress.test_oversize_decompression_raises_soft_error": {
            "name": "test_oversize_decompression_raises_soft_error",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnsureDir.tearDown": {
            "name": "tearDown",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnsureDir.test_ensure_dir": {
            "name": "test_ensure_dir",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTabCompleteList.setUp": {
            "name": "setUp",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTabCompleteList.test_get_tab_complete_list": {
            "name": "test_get_tab_complete_list",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetTerminalHeight.test_get_terminal_height": {
            "name": "test_get_terminal_height",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetTerminalWidth.test_get_terminal_width": {
            "name": "test_get_terminal_width",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIgnored.func": {
            "name": "func",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestIgnored.test_ignored_contextmanager": {
            "name": "test_ignored_contextmanager",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMonitorProcesses.setUp": {
            "name": "setUp",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMonitorProcesses.tearDown": {
            "name": "tearDown",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMonitorProcesses.mock_process": {
            "name": "mock_process",
            "location": 166,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "TestMonitorProcesses.test_exit": {
            "name": "test_exit",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMonitorProcesses.test_dying_process": {
            "name": "test_dying_process",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMonitorProcesses.test_wipe": {
            "name": "test_wipe",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_os_system": []
            }
        },
        "TestMonitorProcesses.test_wipe_tails": {
            "name": "test_wipe_tails",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_os_system": []
            }
        },
        "TestProcessArguments.setUp": {
            "name": "setUp",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessArguments.tearDown": {
            "name": "tearDown",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessArguments.test_process_arguments": {
            "name": "test_process_arguments",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadableSize.test_readable_size": {
            "name": "test_readable_size",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResetTerminal.test_reset_terminal": {
            "name": "test_reset_terminal",
            "location": 317,
            "return": [],
            "arguments": {
                "self": [],
                "oss": []
            }
        },
        "TestRoundUp.test_round_up": {
            "name": "test_round_up",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSplitString.test_split_string": {
            "name": "test_split_string",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSplitByteString.test_split_byte_string": {
            "name": "test_split_byte_string",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSeparateHeader.test_separate_header": {
            "name": "test_separate_header",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSeparateHeaders.test_separate_headers": {
            "name": "test_separate_headers",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSeparateHeaders.test_too_small_string": {
            "name": "test_too_small_string",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSeparateTrailer.test_separate_header": {
            "name": "test_separate_header",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSplitToSubStrings.test_splitting": {
            "name": "test_splitting",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTerminalWidthCheck.test_width_check": {
            "name": "test_width_check",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidateOnionAddr.test_validate_account": {
            "name": "test_validate_account",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidateGroupName.setUp": {
            "name": "setUp",
            "location": 481,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidateGroupName.test_validate_group_name": {
            "name": "test_validate_group_name",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidateIpAddress.test_validate_ip_address": {
            "name": "test_validate_ip_address",
            "location": 505,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidateKeyExchange.test_validate_key_exchange": {
            "name": "test_validate_key_exchange",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidateNick.setUp": {
            "name": "setUp",
            "location": 530,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidateNick.test_validate_nick": {
            "name": "test_validate_nick",
            "location": 535,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHideRunTime.setUp": {
            "name": "setUp",
            "location": 564,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHideRunTime.test_traffic_masking_delay": {
            "name": "test_traffic_masking_delay",
            "location": 570,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHideRunTime.test_static_time": {
            "name": "test_static_time",
            "location": 577,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMonitorProcesses.test_exit.queue_delayer": {
            "name": "queue_delayer",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestMonitorProcesses.test_dying_process.mock_process": {
            "name": "mock_process",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestMonitorProcesses.test_wipe.queue_delayer": {
            "name": "queue_delayer",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestMonitorProcesses.test_wipe_tails.queue_delayer": {
            "name": "queue_delayer",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestProcessArguments.setUp.Args.__init__": {
            "name": "__init__",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessArguments.setUp.MockParser.__init__": {
            "name": "__init__",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessArguments.setUp.MockParser.parse_args": {
            "name": "parse_args",
            "location": 286,
            "return": [
                "Args"
            ],
            "arguments": {}
        },
        "TestProcessArguments.setUp.MockParser.add_argument": {
            "name": "add_argument",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tfc-master/tests/common/test_output.py": {
        "TestClearScreen.test_clear_screen": {
            "name": "test_clear_screen",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupManagementPrint.setUp": {
            "name": "setUp",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupManagementPrint.test_group_management_print": {
            "name": "test_group_management_print",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMPrint.test_m_print": {
            "name": "test_m_print",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestMPrint.test_long_message": {
            "name": "test_long_message",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMPrint.test_multi_line": {
            "name": "test_multi_line",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMPrint.test_head_and_tail": {
            "name": "test_head_and_tail",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMPrint.test_wrapping": {
            "name": "test_wrapping",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMPrint.test_manual_proceed": {
            "name": "test_manual_proceed",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestPhase.test_phase": {
            "name": "test_phase",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestPrintFingerprint.test_print_fingerprints": {
            "name": "test_print_fingerprints",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrintKey.setUp": {
            "name": "setUp",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrintKey.test_print_kdk": {
            "name": "test_print_kdk",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrintKey.test_print_kdk_local_testing": {
            "name": "test_print_kdk_local_testing",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrintTitle.test_print_tx_title": {
            "name": "test_print_tx_title",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrintTitle.test_print_rx_title": {
            "name": "test_print_rx_title",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrintOnPreviousLine.test_print_on_previous_line": {
            "name": "test_print_on_previous_line",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrintSpacing.test_print_spacing": {
            "name": "test_print_spacing",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPPrint.setUp": {
            "name": "setUp",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPPrint.test_bold_print": {
            "name": "test_bold_print",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPPrint.test_normal_print": {
            "name": "test_normal_print",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPPrint.test_works_without_timestamp": {
            "name": "test_works_without_timestamp",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tfc-master/tests/common/test_path.py": {
        "TestAskPathGui.setUp": {
            "name": "setUp",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAskPathGui.test_disabled_gui_uses_cli": {
            "name": "test_disabled_gui_uses_cli",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAskPathGui.test_tcl_error_falls_back_to_cli": {
            "name": "test_tcl_error_falls_back_to_cli",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAskPathGui.test_get_path_to_file_gui": {
            "name": "test_get_path_to_file_gui",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAskPathGui.test_no_path_to_file_raises_soft_error": {
            "name": "test_no_path_to_file_raises_soft_error",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAskPathGui.test_get_path_gui": {
            "name": "test_get_path_gui",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAskPathGui.test_no_path_raises_soft_error": {
            "name": "test_no_path_raises_soft_error",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompleter.setUp": {
            "name": "setUp",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompleter.tearDown": {
            "name": "tearDown",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompleter.test_completer": {
            "name": "test_completer",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPath.setUp": {
            "name": "setUp",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPath.tearDown": {
            "name": "tearDown",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPath.test_ask_path_cli": {
            "name": "test_ask_path_cli",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tfc-master/tests/common/test_reed_solomon.py": {
        "TestReedSolomon.test_simple": {
            "name": "test_simple",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReedSolomon.test_correction": {
            "name": "test_correction",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReedSolomon.test_check": {
            "name": "test_check",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReedSolomon.test_long": {
            "name": "test_long",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReedSolomon.test_prim_fcr_basic": {
            "name": "test_prim_fcr_basic",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReedSolomon.test_prim_fcr_long": {
            "name": "test_prim_fcr_long",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReedSolomon.test_generator_poly": {
            "name": "test_generator_poly",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReedSolomon.test_prime_poly_build": {
            "name": "test_prime_poly_build",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReedSolomon.test_init_tables": {
            "name": "test_init_tables",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBigReedSolomon.test_find_prime_polys": {
            "name": "test_find_prime_polys",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBigReedSolomon.test_c_exp_9": {
            "name": "test_c_exp_9",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBigReedSolomon.test_c_exp_12": {
            "name": "test_c_exp_12",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBigReedSolomon.test_multiple_rs_codec": {
            "name": "test_multiple_rs_codec",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGFArithmetics.test_multiply_nolut": {
            "name": "test_multiply_nolut",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGFArithmetics.test_gf_operations": {
            "name": "test_gf_operations",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSimpleFuncs.test_gf_poly_mul_simple": {
            "name": "test_gf_poly_mul_simple",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSimpleFuncs.test_gf_poly_neg": {
            "name": "test_gf_poly_neg",
            "location": 479,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSimpleFuncs.test_rs_simple_encode_msg": {
            "name": "test_rs_simple_encode_msg",
            "location": 483,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRSCodecUniversalCrossValidation.test_main": {
            "name": "test_main",
            "location": 498,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRSCodecUniversalCrossValidation.test_main.cartesian_product_dict_items": {
            "name": "cartesian_product_dict_items",
            "location": 500,
            "return": [],
            "arguments": {
                "dicts": [
                    "Dict[(str, Union[(List[int], List[List[Union[(int, bool)]]])])]"
                ]
            }
        }
    },
    "tfc-master/tests/common/test_statics.py": {
        "TestStatics.test_uniqueness": {
            "name": "test_uniqueness",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatics.test_group_id_length_is_not_same_as_onion_service_pub_key_length": {
            "name": "test_group_id_length_is_not_same_as_onion_service_pub_key_length",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatics.test_reserved_accounts_are_valid": {
            "name": "test_reserved_accounts_are_valid",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatics.test_local_pubkey": {
            "name": "test_local_pubkey",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatics.test_group_management_header_length_matches_datagram_header_length": {
            "name": "test_group_management_header_length_matches_datagram_header_length",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatics.test_key_exchanges_start_with_different_letter": {
            "name": "test_key_exchanges_start_with_different_letter",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tfc-master/tests/common/test_word_list.py": {
        "TestWordList.test_each_word_is_unique": {
            "name": "test_each_word_is_unique",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWordList.test_word_list_length": {
            "name": "test_word_list_length",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tfc-master/tests/common/__init__.py": {},
    "tfc-master/tests/receiver/test_commands.py": {
        "TestProcessCommand.setUp": {
            "name": "setUp",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessCommand.tearDown": {
            "name": "tearDown",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessCommand.test_incomplete_command_raises_soft_error": {
            "name": "test_incomplete_command_raises_soft_error",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessCommand.test_invalid_command_header": {
            "name": "test_invalid_command_header",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessCommand.test_process_command": {
            "name": "test_process_command",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWinActivity.setUp": {
            "name": "setUp",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWinActivity.test_function": {
            "name": "test_function",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": []
            }
        },
        "TestWinSelect.setUp": {
            "name": "setUp",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWinSelect.test_window_selection": {
            "name": "test_window_selection",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResetScreen.setUp": {
            "name": "setUp",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResetScreen.test_screen_reset": {
            "name": "test_screen_reset",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reset": []
            }
        },
        "TestExitTFC.setUp": {
            "name": "setUp",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExitTFC.tearDown": {
            "name": "tearDown",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExitTFC.test_function": {
            "name": "test_function",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogCommand.setUp": {
            "name": "setUp",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogCommand.tearDown": {
            "name": "tearDown",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogCommand.test_print": {
            "name": "test_print",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogCommand.test_export": {
            "name": "test_export",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": []
            }
        },
        "TestRemoveLog.setUp": {
            "name": "setUp",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoveLog.tearDown": {
            "name": "tearDown",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoveLog.test_remove_log_file": {
            "name": "test_remove_log_file",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChMasterKey.setUp": {
            "name": "setUp",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChMasterKey.tearDown": {
            "name": "tearDown",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChMasterKey.test_master_key_change": {
            "name": "test_master_key_change",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChMasterKey.test_invalid_password_raises_function_return": {
            "name": "test_invalid_password_raises_function_return",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChMasterKey.test_keyboard_interrupt_raises_soft_error": {
            "name": "test_keyboard_interrupt_raises_soft_error",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChNick.setUp": {
            "name": "setUp",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChNick.test_unknown_account_raises_soft_error": {
            "name": "test_unknown_account_raises_soft_error",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChNick.test_nick_change": {
            "name": "test_nick_change",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChSetting.setUp": {
            "name": "setUp",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChSetting.test_invalid_data_raises_soft_error": {
            "name": "test_invalid_data_raises_soft_error",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChSetting.test_invalid_setting_raises_soft_error": {
            "name": "test_invalid_setting_raises_soft_error",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChSetting.test_databases": {
            "name": "test_databases",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChSetting.test_change_gateway_setting": {
            "name": "test_change_gateway_setting",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChContactSetting.setUp": {
            "name": "setUp",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChContactSetting.test_invalid_window_raises_soft_error": {
            "name": "test_invalid_window_raises_soft_error",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChContactSetting.test_setting_change_contact": {
            "name": "test_setting_change_contact",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChContactSetting.test_setting_change_group": {
            "name": "test_setting_change_group",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChContactSetting.test_setting_change_all": {
            "name": "test_setting_change_all",
            "location": 464,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactRemove.setUp": {
            "name": "setUp",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactRemove.tearDown": {
            "name": "tearDown",
            "location": 502,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactRemove.test_no_contact_raises_soft_error": {
            "name": "test_no_contact_raises_soft_error",
            "location": 506,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactRemove.test_successful_removal": {
            "name": "test_successful_removal",
            "location": 516,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWipe.setUp": {
            "name": "setUp",
            "location": 535,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWipe.tearDown": {
            "name": "tearDown",
            "location": 539,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWipe.test_wipe_command": {
            "name": "test_wipe_command",
            "location": 544,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": []
            }
        }
    },
    "tfc-master/tests/receiver/test_commands_g.py": {
        "TestGroupCreate.setUp": {
            "name": "setUp",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupCreate.test_too_many_purp_accounts_raises_soft_error": {
            "name": "test_too_many_purp_accounts_raises_soft_error",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupCreate.test_full_group_list_raises_soft_error": {
            "name": "test_full_group_list_raises_soft_error",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupCreate.test_successful_group_creation": {
            "name": "test_successful_group_creation",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupAdd.setUp": {
            "name": "setUp",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupAdd.test_too_large_final_member_list_raises_soft_error": {
            "name": "test_too_large_final_member_list_raises_soft_error",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupAdd.test_unknown_group_id_raises_soft_error": {
            "name": "test_unknown_group_id_raises_soft_error",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupAdd.test_successful_group_add": {
            "name": "test_successful_group_add",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupRemove.setUp": {
            "name": "setUp",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupRemove.test_unknown_group_id_raises_soft_error": {
            "name": "test_unknown_group_id_raises_soft_error",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupRemove.test_successful_member_removal": {
            "name": "test_successful_member_removal",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupDelete.setUp": {
            "name": "setUp",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupDelete.test_missing_group_raises_soft_error": {
            "name": "test_missing_group_raises_soft_error",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupDelete.test_unknown_group_id_raises_soft_error": {
            "name": "test_unknown_group_id_raises_soft_error",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupDelete.test_successful_remove": {
            "name": "test_successful_remove",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupRename.setUp": {
            "name": "setUp",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupRename.test_missing_group_id_raises_soft_error": {
            "name": "test_missing_group_id_raises_soft_error",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupRename.test_invalid_group_name_encoding_raises_soft_error": {
            "name": "test_invalid_group_name_encoding_raises_soft_error",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupRename.test_invalid_group_name_raises_soft_error": {
            "name": "test_invalid_group_name_raises_soft_error",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupRename.test_valid_group_name_change": {
            "name": "test_valid_group_name_change",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tfc-master/tests/receiver/test_files.py": {
        "TestStoreUnique.setUp": {
            "name": "setUp",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStoreUnique.tearDown": {
            "name": "tearDown",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStoreUnique.test_each_file_is_store_with_unique_name": {
            "name": "test_each_file_is_store_with_unique_name",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessAssembledFile.setUp": {
            "name": "setUp",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessAssembledFile.tearDown": {
            "name": "tearDown",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessAssembledFile.test_invalid_structure_raises_soft_error": {
            "name": "test_invalid_structure_raises_soft_error",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessAssembledFile.test_invalid_encoding_raises_soft_error": {
            "name": "test_invalid_encoding_raises_soft_error",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessAssembledFile.test_invalid_name_raises_soft_error": {
            "name": "test_invalid_name_raises_soft_error",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessAssembledFile.test_slash_in_file_name_raises_soft_error": {
            "name": "test_slash_in_file_name_raises_soft_error",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessAssembledFile.test_invalid_key_raises_soft_error": {
            "name": "test_invalid_key_raises_soft_error",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessAssembledFile.test_decryption_fail_raises_soft_error": {
            "name": "test_decryption_fail_raises_soft_error",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessAssembledFile.test_invalid_compression_raises_soft_error": {
            "name": "test_invalid_compression_raises_soft_error",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessAssembledFile.test_successful_reception": {
            "name": "test_successful_reception",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessAssembledFile.test_successful_reception_during_traffic_masking": {
            "name": "test_successful_reception_during_traffic_masking",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNewFile.setUp": {
            "name": "setUp",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNewFile.tearDown": {
            "name": "tearDown",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNewFile.test_unknown_account_raises_soft_error": {
            "name": "test_unknown_account_raises_soft_error",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNewFile.test_disabled_file_reception_raises_soft_error": {
            "name": "test_disabled_file_reception_raises_soft_error",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNewFile.test_valid_file_without_key_is_cached": {
            "name": "test_valid_file_without_key_is_cached",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNewFile.test_valid_file_with_key_is_processed": {
            "name": "test_valid_file_with_key_is_processed",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestProcessFile.setUp": {
            "name": "setUp",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessFile.tearDown": {
            "name": "tearDown",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessFile.test_invalid_key_raises_soft_error": {
            "name": "test_invalid_key_raises_soft_error",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessFile.test_invalid_compression_raises_soft_error": {
            "name": "test_invalid_compression_raises_soft_error",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessFile.test_invalid_file_name_raises_soft_error": {
            "name": "test_invalid_file_name_raises_soft_error",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestProcessFile.test_non_printable_name_raises_soft_error": {
            "name": "test_non_printable_name_raises_soft_error",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestProcessFile.test_slash_in_name_raises_soft_error": {
            "name": "test_slash_in_name_raises_soft_error",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestProcessFile.test_successful_storage_of_file": {
            "name": "test_successful_storage_of_file",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestProcessFile.test_successful_storage_during_traffic_masking": {
            "name": "test_successful_storage_during_traffic_masking",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        }
    },
    "tfc-master/tests/receiver/test_key_exchanges.py": {
        "TestProcessLocalKey.setUp": {
            "name": "setUp",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessLocalKey.tearDown": {
            "name": "tearDown",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessLocalKey.test_invalid_decryption_key_raises_soft_error": {
            "name": "test_invalid_decryption_key_raises_soft_error",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessLocalKey.test_successful_local_key_processing_with_existing_local_key": {
            "name": "test_successful_local_key_processing_with_existing_local_key",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessLocalKey.test_successful_local_key_processing_existing_bootstrap": {
            "name": "test_successful_local_key_processing_existing_bootstrap",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessLocalKey.test_keyboard_interrupt_raises_soft_error": {
            "name": "test_keyboard_interrupt_raises_soft_error",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessLocalKey.test_old_local_key_packet_raises_soft_error": {
            "name": "test_old_local_key_packet_raises_soft_error",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessLocalKey.test_loading_local_key_from_queue": {
            "name": "test_loading_local_key_from_queue",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalKeyRdy.setUp": {
            "name": "setUp",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalKeyRdy.test_local_key_installed_no_contacts": {
            "name": "test_local_key_installed_no_contacts",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestLocalKeyRdy.test_local_key_installed_existing_contact": {
            "name": "test_local_key_installed_existing_contact",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestKeyExECDHE.setUp": {
            "name": "setUp",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyExECDHE.test_invalid_nick_raises_soft_error": {
            "name": "test_invalid_nick_raises_soft_error",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestKeyExECDHE.test_add_ecdhe_keys": {
            "name": "test_add_ecdhe_keys",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestKeyExPSKTx.setUp": {
            "name": "setUp",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyExPSKTx.test_invalid_nick_raises_soft_error": {
            "name": "test_invalid_nick_raises_soft_error",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestKeyExPSKTx.test_add_psk_tx_keys": {
            "name": "test_add_psk_tx_keys",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestKeyExPSKRx.setUp": {
            "name": "setUp",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyExPSKRx.tearDown": {
            "name": "tearDown",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyExPSKRx.test_unknown_account_raises_soft_error": {
            "name": "test_unknown_account_raises_soft_error",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyExPSKRx.test_invalid_psk_data_raises_soft_error": {
            "name": "test_invalid_psk_data_raises_soft_error",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestKeyExPSKRx.test_permission_error_raises_soft_error": {
            "name": "test_permission_error_raises_soft_error",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyExPSKRx.test_invalid_keys_raise_se": {
            "name": "test_invalid_keys_raise_se",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyExPSKRx.test_valid_psk": {
            "name": "test_valid_psk",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyExPSKRx.test_valid_psk_overwrite_failure": {
            "name": "test_valid_psk_overwrite_failure",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyExPSKRx.test_valid_psk_keyboard_interrupt_raises_soft_error": {
            "name": "test_valid_psk_keyboard_interrupt_raises_soft_error",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tfc-master/tests/receiver/test_messages.py": {
        "TestProcessMessagePacket.setUp": {
            "name": "setUp",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessMessagePacket.tearDown": {
            "name": "tearDown",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessMessagePacket.test_invalid_origin_header_raises_soft_error": {
            "name": "test_invalid_origin_header_raises_soft_error",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestProcessMessagePacket.test_masqueraded_command_raises_soft_error": {
            "name": "test_masqueraded_command_raises_soft_error",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestProcessMessagePacket.test_private_msg_from_contact": {
            "name": "test_private_msg_from_contact",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestProcessMessagePacket.test_private_msg_from_user": {
            "name": "test_private_msg_from_user",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestProcessMessagePacket.test_whisper_msg_from_contact": {
            "name": "test_whisper_msg_from_contact",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestProcessMessagePacket.test_whisper_msg_from_user": {
            "name": "test_whisper_msg_from_user",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestProcessMessagePacket.test_empty_whisper_msg_from_user": {
            "name": "test_empty_whisper_msg_from_user",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestProcessMessagePacket.test_user_origin_raises_soft_error": {
            "name": "test_user_origin_raises_soft_error",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestProcessMessagePacket.test_invalid_file_key_data_raises_soft_error": {
            "name": "test_invalid_file_key_data_raises_soft_error",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestProcessMessagePacket.test_too_large_file_key_data_raises_soft_error": {
            "name": "test_too_large_file_key_data_raises_soft_error",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestProcessMessagePacket.test_valid_file_key_message": {
            "name": "test_valid_file_key_message",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestProcessMessagePacket.test_invalid_message_header_raises_soft_error": {
            "name": "test_invalid_message_header_raises_soft_error",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestProcessMessagePacket.test_invalid_window_raises_soft_error": {
            "name": "test_invalid_window_raises_soft_error",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestProcessMessagePacket.test_invalid_message_raises_soft_error": {
            "name": "test_invalid_message_raises_soft_error",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestProcessMessagePacket.test_invalid_whisper_header_raises_soft_error": {
            "name": "test_invalid_whisper_header_raises_soft_error",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestProcessMessagePacket.test_contact_not_in_group_raises_soft_error": {
            "name": "test_contact_not_in_group_raises_soft_error",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestProcessMessagePacket.test_normal_group_msg_from_contact": {
            "name": "test_normal_group_msg_from_contact",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestProcessMessagePacket.test_normal_group_msg_from_user": {
            "name": "test_normal_group_msg_from_user",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestProcessMessagePacket.test_file": {
            "name": "test_file",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestProcessMessagePacket.test_file_when_reception_is_disabled": {
            "name": "test_file_when_reception_is_disabled",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        }
    },
    "tfc-master/tests/receiver/test_output_loop.py": {
        "rotate_key": {
            "name": "rotate_key",
            "location": 49,
            "return": [
                "Tuple[(bytes, int)]"
            ],
            "arguments": {
                "key": [
                    "bytes"
                ],
                "harac": [
                    "int"
                ]
            }
        },
        "TestOutputLoop.setUp": {
            "name": "setUp",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutputLoop.tearDown": {
            "name": "tearDown",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutputLoop.test_loop": {
            "name": "test_loop",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutputLoop.test_loop.queue_packet": {
            "name": "queue_packet",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "mk": [],
                "hk": [],
                "tx_harac": [],
                "packet": [],
                "onion_pub_key": []
            }
        },
        "TestOutputLoop.test_loop.queue_delayer": {
            "name": "queue_delayer",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tfc-master/tests/receiver/test_packet.py": {
        "TestDecryptAssemblyPacket.setUp": {
            "name": "setUp",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecryptAssemblyPacket.test_decryption_with_zero_rx_key_raises_soft_error": {
            "name": "test_decryption_with_zero_rx_key_raises_soft_error",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecryptAssemblyPacket.test_invalid_harac_ct_raises_soft_error": {
            "name": "test_invalid_harac_ct_raises_soft_error",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecryptAssemblyPacket.test_decryption_with_zero_rx_hek_raises_soft_error": {
            "name": "test_decryption_with_zero_rx_hek_raises_soft_error",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecryptAssemblyPacket.test_expired_harac_raises_soft_error": {
            "name": "test_expired_harac_raises_soft_error",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecryptAssemblyPacket.test_harac_dos_can_be_interrupted": {
            "name": "test_harac_dos_can_be_interrupted",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestDecryptAssemblyPacket.test_invalid_packet_ct_raises_soft_error": {
            "name": "test_invalid_packet_ct_raises_soft_error",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecryptAssemblyPacket.test_successful_packet_decryption": {
            "name": "test_successful_packet_decryption",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecryptAssemblyPacket.test_successful_packet_decryption_with_offset": {
            "name": "test_successful_packet_decryption_with_offset",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecryptAssemblyPacket.test_successful_command_decryption": {
            "name": "test_successful_command_decryption",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPacket.setUp": {
            "name": "setUp",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPacket.tearDown": {
            "name": "tearDown",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPacket.test_invalid_assembly_packet_header_raises_soft_error": {
            "name": "test_invalid_assembly_packet_header_raises_soft_error",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPacket.test_missing_start_packet_raises_soft_error": {
            "name": "test_missing_start_packet_raises_soft_error",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPacket.test_short_message": {
            "name": "test_short_message",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPacket.test_compression_error_raises_soft_error": {
            "name": "test_compression_error_raises_soft_error",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPacket.test_long_message": {
            "name": "test_long_message",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPacket.test_decryption_error_raises_soft_error": {
            "name": "test_decryption_error_raises_soft_error",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPacket.test_short_file": {
            "name": "test_short_file",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPacket.test_short_file_from_user_raises_soft_error": {
            "name": "test_short_file_from_user_raises_soft_error",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPacket.test_unauthorized_file_from_contact_raises_soft_error": {
            "name": "test_unauthorized_file_from_contact_raises_soft_error",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPacket.test_long_file": {
            "name": "test_long_file",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPacket.test_disabled_file_reception_raises_fr_with_append_packet": {
            "name": "test_disabled_file_reception_raises_fr_with_append_packet",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPacket.test_disabled_file_reception_raises_fr_with_end_packet": {
            "name": "test_disabled_file_reception_raises_fr_with_end_packet",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPacket.test_long_file_from_user_raises_soft_error": {
            "name": "test_long_file_from_user_raises_soft_error",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPacket.test_unauthorized_long_file_raises_soft_error": {
            "name": "test_unauthorized_long_file_raises_soft_error",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPacket.test_invalid_long_file_header_raises_soft_error": {
            "name": "test_invalid_long_file_header_raises_soft_error",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPacket.test_contact_canceled_file": {
            "name": "test_contact_canceled_file",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPacket.test_noise_packet_interrupts_file": {
            "name": "test_noise_packet_interrupts_file",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPacket.test_short_command": {
            "name": "test_short_command",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPacket.test_long_command": {
            "name": "test_long_command",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPacket.test_long_command_hash_mismatch_raises_soft_error": {
            "name": "test_long_command_hash_mismatch_raises_soft_error",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPacket.test_long_command_compression_error_raises_soft_error": {
            "name": "test_long_command_compression_error_raises_soft_error",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPacketList.setUp": {
            "name": "setUp",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPacketList.test_packet_list_iterates_over_contact_objects": {
            "name": "test_packet_list_iterates_over_contact_objects",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPacketList.test_len_returns_number_of_contacts": {
            "name": "test_len_returns_number_of_contacts",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPacketList.test_has_packet": {
            "name": "test_has_packet",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPacketList.test_get_packet": {
            "name": "test_get_packet",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tfc-master/tests/receiver/test_receiver_loop.py": {
        "TestReceiverLoop.test_receiver_loop": {
            "name": "test_receiver_loop",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReceiverLoop.test_receiver_loop.queue_delayer": {
            "name": "queue_delayer",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tfc-master/tests/receiver/test_windows.py": {
        "TestRxWindow.setUp": {
            "name": "setUp",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRxWindow.create_window": {
            "name": "create_window",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "uid": [
                    "bytes"
                ]
            }
        },
        "TestRxWindow.test_command_window_creation": {
            "name": "test_command_window_creation",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRxWindow.test_file_window_creation": {
            "name": "test_file_window_creation",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRxWindow.test_contact_window_creation": {
            "name": "test_contact_window_creation",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRxWindow.test_group_window_creation": {
            "name": "test_group_window_creation",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRxWindow.test_invalid_uid_raises_soft_error": {
            "name": "test_invalid_uid_raises_soft_error",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRxWindow.test_window_iterates_over_message_tuples": {
            "name": "test_window_iterates_over_message_tuples",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRxWindow.test_len_returns_number_of_messages_in_window": {
            "name": "test_len_returns_number_of_messages_in_window",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRxWindow.test_remove_contacts": {
            "name": "test_remove_contacts",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRxWindow.test_add_contacts": {
            "name": "test_add_contacts",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRxWindow.test_reset_window": {
            "name": "test_reset_window",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRxWindow.test_has_contact": {
            "name": "test_has_contact",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRxWindow.test_create_handle_dict": {
            "name": "test_create_handle_dict",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRxWindow.test_get_command_handle": {
            "name": "test_get_command_handle",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRxWindow.test_get_contact_handle": {
            "name": "test_get_contact_handle",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRxWindow.test_get_group_contact_handle": {
            "name": "test_get_group_contact_handle",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRxWindow.test_print_to_inactive_window_preview_on_short_message": {
            "name": "test_print_to_inactive_window_preview_on_short_message",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestRxWindow.test_print_to_inactive_window_preview_on_long_message": {
            "name": "test_print_to_inactive_window_preview_on_long_message",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestRxWindow.test_print_to_inactive_window_preview_off": {
            "name": "test_print_to_inactive_window_preview_off",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestRxWindow.test_print_to_active_window_no_date_change": {
            "name": "test_print_to_active_window_no_date_change",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRxWindow.test_print_to_active_window_with_date_change_and_whisper": {
            "name": "test_print_to_active_window_with_date_change_and_whisper",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRxWindow.test_print_to_active_window_with_date_change_and_whisper_empty_message": {
            "name": "test_print_to_active_window_with_date_change_and_whisper_empty_message",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRxWindow.test_print_new": {
            "name": "test_print_new",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestRxWindow.test_redraw_message_window": {
            "name": "test_redraw_message_window",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRxWindow.test_redraw_empty_window": {
            "name": "test_redraw_empty_window",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRxWindow.test_redraw_file_win": {
            "name": "test_redraw_file_win",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestRxWindow.test_redraw_empty_file_win": {
            "name": "test_redraw_empty_file_win",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestWindowList.setUp": {
            "name": "setUp",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWindowList.create_window": {
            "name": "create_window",
            "location": 400,
            "return": [
                "RxWindow"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "bytes"
                ]
            }
        },
        "TestWindowList.test_active_win_is_none_if_local_key_is_not_present": {
            "name": "test_active_win_is_none_if_local_key_is_not_present",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWindowList.test_active_win_is_command_win_if_local_key_is_present": {
            "name": "test_active_win_is_command_win_if_local_key_is_present",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWindowList.test_window_list_iterates_over_windows": {
            "name": "test_window_list_iterates_over_windows",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWindowList.test_len_returns_number_of_windows": {
            "name": "test_len_returns_number_of_windows",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWindowList.test_group_windows": {
            "name": "test_group_windows",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWindowList.test_has_window": {
            "name": "test_has_window",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWindowList.test_remove_window": {
            "name": "test_remove_window",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWindowList.test_select_rx_window": {
            "name": "test_select_rx_window",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWindowList.test_select_rx_file_window": {
            "name": "test_select_rx_file_window",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestWindowList.test_refresh_file_window_check": {
            "name": "test_refresh_file_window_check",
            "location": 502,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWindowList.test_get_command_window": {
            "name": "test_get_command_window",
            "location": 509,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWindowList.test_get_non_existing_window": {
            "name": "test_get_non_existing_window",
            "location": 519,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tfc-master/tests/receiver/__init__.py": {},
    "tfc-master/tests/relay/test_client.py": {
        "TestClient.mock_session": {
            "name": "mock_session",
            "location": 111,
            "return": [
                "MockSession"
            ],
            "arguments": {}
        },
        "TestClient.setUp": {
            "name": "setUp",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClient.tearDown": {
            "name": "tearDown",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClient.test_client": {
            "name": "test_client",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": []
            }
        },
        "TestGetDataLoop.mock_session": {
            "name": "mock_session",
            "location": 249,
            "return": [
                "Session"
            ],
            "arguments": {}
        },
        "TestGetDataLoop.setUp": {
            "name": "setUp",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetDataLoop.tearDown": {
            "name": "tearDown",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetDataLoop.test_get_data_loop": {
            "name": "test_get_data_loop",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupManager.test_group_manager": {
            "name": "test_group_manager",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClientScheduler.test_client_scheduler": {
            "name": "test_client_scheduler",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactRequestManager.test_contact_request_manager": {
            "name": "test_contact_request_manager",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClient.MockResponse.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "TestClient.MockSession.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClient.MockSession.get": {
            "name": "get",
            "location": 71,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "timeout": [],
                "stream": []
            }
        },
        "TestGetDataLoop.MockResponse.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetDataLoop.MockResponse.iter_lines": {
            "name": "iter_lines",
            "location": 149,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetDataLoop.MockFileResponse.__init__": {
            "name": "__init__",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "TestGetDataLoop.Session.__init__": {
            "name": "__init__",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetDataLoop.Session.get": {
            "name": "get",
            "location": 220,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "timeout": [
                    "int"
                ],
                "stream": [
                    "bool"
                ]
            }
        },
        "TestGroupManager.test_group_manager.queue_delayer": {
            "name": "queue_delayer",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestClientScheduler.test_client_scheduler.queue_delayer": {
            "name": "queue_delayer",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestContactRequestManager.test_contact_request_manager.queue_delayer": {
            "name": "queue_delayer",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tfc-master/tests/relay/test_commands.py": {
        "TestRelayCommand.setUp": {
            "name": "setUp",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRelayCommand.tearDown": {
            "name": "tearDown",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRelayCommand.test_packet_reading": {
            "name": "test_packet_reading",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessCommand.setUp": {
            "name": "setUp",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessCommand.tearDown": {
            "name": "tearDown",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessCommand.test_invalid_key": {
            "name": "test_invalid_key",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRaceConditionDelay.setUp": {
            "name": "setUp",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRaceConditionDelay.test_delay": {
            "name": "test_delay",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sleep": []
            }
        },
        "TestClearWindows.setUp": {
            "name": "setUp",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClearWindows.test_clear_display": {
            "name": "test_clear_display",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResetWindows.test_reset_display": {
            "name": "test_reset_display",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": []
            }
        },
        "TestExitTFC.setUp": {
            "name": "setUp",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExitTFC.tearDown": {
            "name": "tearDown",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExitTFC.test_exit_tfc": {
            "name": "test_exit_tfc",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeECRatio.setUp": {
            "name": "setUp",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeECRatio.test_non_digit_value_raises_soft_error": {
            "name": "test_non_digit_value_raises_soft_error",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeECRatio.test_invalid_digit_value_raises_soft_error": {
            "name": "test_invalid_digit_value_raises_soft_error",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeECRatio.test_change_value": {
            "name": "test_change_value",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeBaudrate.setUp": {
            "name": "setUp",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeBaudrate.test_non_digit_value_raises_soft_error": {
            "name": "test_non_digit_value_raises_soft_error",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeBaudrate.test_invalid_digit_value_raises_soft_error": {
            "name": "test_invalid_digit_value_raises_soft_error",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeBaudrate.test_change_value": {
            "name": "test_change_value",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWipe.setUp": {
            "name": "setUp",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWipe.tearDown": {
            "name": "tearDown",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWipe.test_wipe_command": {
            "name": "test_wipe_command",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": []
            }
        },
        "TestManageContactReq.setUp": {
            "name": "setUp",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestManageContactReq.tearDown": {
            "name": "tearDown",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestManageContactReq.test_setting_management": {
            "name": "test_setting_management",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddContact.setUp": {
            "name": "setUp",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddContact.tearDown": {
            "name": "tearDown",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddContact.test_add_contact": {
            "name": "test_add_contact",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemContact.setUp": {
            "name": "setUp",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemContact.tearDown": {
            "name": "tearDown",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemContact.test_add_contact": {
            "name": "test_add_contact",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddOnionKey.setUp": {
            "name": "setUp",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddOnionKey.tearDown": {
            "name": "tearDown",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddOnionKey.test_add_contact": {
            "name": "test_add_contact",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompareAccounts.setUp": {
            "name": "setUp",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompareAccounts.tearDown": {
            "name": "tearDown",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompareAccounts.test_compare_accounts": {
            "name": "test_compare_accounts",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestComparePubKeys.setUp": {
            "name": "setUp",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComparePubKeys.tearDown": {
            "name": "tearDown",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComparePubKeys.test_compare_pub_keys": {
            "name": "test_compare_pub_keys",
            "location": 304,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRelayCommand.test_packet_reading.queue_delayer": {
            "name": "queue_delayer",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tfc-master/tests/relay/test_diffs.py": {
        "TestGetAccountFromUser.setUp": {
            "name": "setUp",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetAccountFromUser.tearDown": {
            "name": "tearDown",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetAccountFromUser.test_input": {
            "name": "test_input",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountChecker.setUp": {
            "name": "setUp",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountChecker.tearDown": {
            "name": "tearDown",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountChecker.test_account_checker": {
            "name": "test_account_checker",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPubKeyChecker.setUp": {
            "name": "setUp",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPubKeyChecker.tearDown": {
            "name": "tearDown",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPubKeyChecker.test_pub_key_checker": {
            "name": "test_pub_key_checker",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestShowValueDiffs.test_show_public_key_diffs": {
            "name": "test_show_public_key_diffs",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestShowValueDiffs.test_show_account_diffs": {
            "name": "test_show_account_diffs",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestAccountChecker.test_account_checker.queue_delayer": {
            "name": "queue_delayer",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tfc-master/tests/relay/test_onion.py": {
        "TestGetAvailablePort.test_get_available_port": {
            "name": "test_get_available_port",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": []
            }
        },
        "TestGetAvailablePort.test_port_is_tor_socket_port_when_running_on_tails": {
            "name": "test_port_is_tor_socket_port_when_running_on_tails",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTor.test_missing_binary_raises_critical_error": {
            "name": "test_missing_binary_raises_critical_error",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTor.test_closed_socket_raises_critical_error": {
            "name": "test_closed_socket_raises_critical_error",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTor.test_timeout_restarts_tor": {
            "name": "test_timeout_restarts_tor",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTorKeyExpansion.test_invalid_key_size_raises_critical_error": {
            "name": "test_invalid_key_size_raises_critical_error",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTorKeyExpansion.test_valid_key_size": {
            "name": "test_valid_key_size",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOnionService.test_returns_with_keyboard_interrupt": {
            "name": "test_returns_with_keyboard_interrupt",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOnionService.test_onion_service": {
            "name": "test_onion_service",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOnionService.test_exception_during_onion_service_setup_returns": {
            "name": "test_exception_during_onion_service_setup_returns",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOnionService.test_socket_closed_returns": {
            "name": "test_socket_closed_returns",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOnionService.test_no_tor_process_is_created_when_tails_is_used": {
            "name": "test_no_tor_process_is_created_when_tails_is_used",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOnionService.test_missing_tor_controller_raises_critical_error": {
            "name": "test_missing_tor_controller_raises_critical_error",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOnionService.test_onion_service.queue_delayer": {
            "name": "queue_delayer",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tfc-master/tests/relay/test_server.py": {
        "TestFlaskServer.setUp": {
            "name": "setUp",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlaskServer.tearDown": {
            "name": "tearDown",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlaskServer.store_test_packet": {
            "name": "store_test_packet",
            "location": 47,
            "return": [],
            "arguments": {
                "plaintext": [
                    "bytes"
                ],
                "file_dir": [
                    "str"
                ],
                "file_name": [
                    "str"
                ],
                "key": [
                    "bytes"
                ]
            }
        },
        "TestFlaskServer.test_flask_server": {
            "name": "test_flask_server",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlaskServer.test_flask_server.queue_delayer": {
            "name": "queue_delayer",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tfc-master/tests/relay/test_tcb.py": {
        "TestSRCIncoming.setUp": {
            "name": "setUp",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSRCIncoming.tearDown": {
            "name": "tearDown",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSRCIncoming.create_packet": {
            "name": "create_packet",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "packet": [
                    "bytes"
                ]
            }
        },
        "TestSRCIncoming.test_unencrypted_datagram": {
            "name": "test_unencrypted_datagram",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSRCIncoming.test_local_key_datagram": {
            "name": "test_local_key_datagram",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSRCIncoming.test_command_datagram": {
            "name": "test_command_datagram",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSRCIncoming.test_message_datagram": {
            "name": "test_message_datagram",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSRCIncoming.test_public_key_datagram": {
            "name": "test_public_key_datagram",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSRCIncoming.test_file_datagram": {
            "name": "test_file_datagram",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSRCIncoming.test_group_invitation_datagram": {
            "name": "test_group_invitation_datagram",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSRCIncoming.test_group_join_datagram": {
            "name": "test_group_join_datagram",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSRCIncoming.test_group_add_datagram": {
            "name": "test_group_add_datagram",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSRCIncoming.test_group_remove_datagram": {
            "name": "test_group_remove_datagram",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSRCIncoming.test_group_exit_datagram": {
            "name": "test_group_exit_datagram",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBufferToFlask.setUp": {
            "name": "setUp",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBufferToFlask.tearDown": {
            "name": "tearDown",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBufferToFlask.test_missing_buf_key_raises_soft_error": {
            "name": "test_missing_buf_key_raises_soft_error",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBufferToFlask.test_buffering_of_unique_messages": {
            "name": "test_buffering_of_unique_messages",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBufferToFlask.test_buffering_of_unique_files": {
            "name": "test_buffering_of_unique_files",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDSTOutGoing.test_loop": {
            "name": "test_loop",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSRCIncoming.test_local_key_datagram.queue_delayer": {
            "name": "queue_delayer",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestDSTOutGoing.test_loop.queue_delayer": {
            "name": "queue_delayer",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tfc-master/tests/relay/__init__.py": {},
    "tfc-master/tests/transmitter/test_commands.py": {
        "TestProcessCommand.setUp": {
            "name": "setUp",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessCommand.tearDown": {
            "name": "tearDown",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessCommand.test_valid_command": {
            "name": "test_valid_command",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessCommand.test_invalid_command": {
            "name": "test_invalid_command",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessCommand.test_empty_command": {
            "name": "test_empty_command",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrintAbout.test_print_about": {
            "name": "test_print_about",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClearScreens.setUp": {
            "name": "setUp",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClearScreens.tearDown": {
            "name": "tearDown",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClearScreens.test_clear_screens": {
            "name": "test_clear_screens",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": []
            }
        },
        "TestClearScreens.test_no_relay_clear_cmd_when_traffic_masking_is_enabled": {
            "name": "test_no_relay_clear_cmd_when_traffic_masking_is_enabled",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": []
            }
        },
        "TestClearScreens.test_reset_screens": {
            "name": "test_reset_screens",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_os_system": []
            }
        },
        "TestClearScreens.test_no_relay_reset_cmd_when_traffic_masking_is_enabled": {
            "name": "test_no_relay_reset_cmd_when_traffic_masking_is_enabled",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_os_system": [
                    "MagicMock"
                ]
            }
        },
        "TestRXPShowSysWin.setUp": {
            "name": "setUp",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRXPShowSysWin.tearDown": {
            "name": "tearDown",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRXPShowSysWin.test_cmd_window": {
            "name": "test_cmd_window",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestRXPShowSysWin.test_file_window": {
            "name": "test_file_window",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestExitTFC.setUp": {
            "name": "setUp",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExitTFC.tearDown": {
            "name": "tearDown",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExitTFC.test_exit_tfc_local_test": {
            "name": "test_exit_tfc_local_test",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestExitTFC.test_exit_tfc": {
            "name": "test_exit_tfc",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestLogCommand.setUp": {
            "name": "setUp",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestLogCommand.tearDown": {
            "name": "tearDown",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogCommand.test_invalid_export": {
            "name": "test_invalid_export",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogCommand.test_log_printing": {
            "name": "test_log_printing",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestLogCommand.test_log_printing_when_no_password_is_asked": {
            "name": "test_log_printing_when_no_password_is_asked",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogCommand.test_log_printing_all": {
            "name": "test_log_printing_all",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestLogCommand.test_invalid_number_raises_soft_error": {
            "name": "test_invalid_number_raises_soft_error",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogCommand.test_too_high_number_raises_soft_error": {
            "name": "test_too_high_number_raises_soft_error",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogCommand.test_user_abort_raises_soft_error": {
            "name": "test_user_abort_raises_soft_error",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogCommand.test_keyboard_interrupt_raises_soft_error": {
            "name": "test_keyboard_interrupt_raises_soft_error",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogCommand.test_successful_export_command": {
            "name": "test_successful_export_command",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSendOnionServiceKey.setUp": {
            "name": "setUp",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSendOnionServiceKey.test_onion_service_key_delivery_traffic_masking": {
            "name": "test_onion_service_key_delivery_traffic_masking",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSendOnionServiceKey.test_onion_service_key_delivery_traffic_masking_abort": {
            "name": "test_onion_service_key_delivery_traffic_masking_abort",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSendOnionServiceKey.test_onion_service_key_delivery": {
            "name": "test_onion_service_key_delivery",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSendOnionServiceKey.test_onion_service_key_delivery_cancel": {
            "name": "test_onion_service_key_delivery_cancel",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrintHelp.setUp": {
            "name": "setUp",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrintHelp.test_print_normal": {
            "name": "test_print_normal",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestPrintHelp.test_print_during_traffic_masking": {
            "name": "test_print_during_traffic_masking",
            "location": 465,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestPrintRecipients.setUp": {
            "name": "setUp",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrintRecipients.test_printing": {
            "name": "test_printing",
            "location": 510,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeMasterKey.setUp": {
            "name": "setUp",
            "location": 516,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeMasterKey.tearDown": {
            "name": "tearDown",
            "location": 533,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeMasterKey.test_raises_fr_during_traffic_masking": {
            "name": "test_raises_fr_during_traffic_masking",
            "location": 538,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeMasterKey.test_missing_target_sys_raises_soft_error": {
            "name": "test_missing_target_sys_raises_soft_error",
            "location": 546,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeMasterKey.test_invalid_target_sys_raises_soft_error": {
            "name": "test_invalid_target_sys_raises_soft_error",
            "location": 551,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestChangeMasterKey.test_invalid_response_from_key_db_raises_soft_error": {
            "name": "test_invalid_response_from_key_db_raises_soft_error",
            "location": 560,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeMasterKey.test_transmitter_command_raises_critical_error_if_key_database_returns_invalid_master_key": {
            "name": "test_transmitter_command_raises_critical_error_if_key_database_returns_invalid_master_key",
            "location": 584,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeMasterKey.test_transmitter_command": {
            "name": "test_transmitter_command",
            "location": 640,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeMasterKey.test_receiver_command": {
            "name": "test_receiver_command",
            "location": 689,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeMasterKey.test_keyboard_interrupt_raises_soft_error": {
            "name": "test_keyboard_interrupt_raises_soft_error",
            "location": 696,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoveLog.setUp": {
            "name": "setUp",
            "location": 702,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoveLog.tearDown": {
            "name": "tearDown",
            "location": 715,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoveLog.test_missing_contact_raises_soft_error": {
            "name": "test_missing_contact_raises_soft_error",
            "location": 720,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoveLog.test_no_aborts_removal": {
            "name": "test_no_aborts_removal",
            "location": 726,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoveLog.test_removal_with_invalid_account_raises_soft_error": {
            "name": "test_removal_with_invalid_account_raises_soft_error",
            "location": 737,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoveLog.test_invalid_group_id_raises_soft_error": {
            "name": "test_invalid_group_id_raises_soft_error",
            "location": 742,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestRemoveLog.test_log_remove_with_nick": {
            "name": "test_log_remove_with_nick",
            "location": 747,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestRemoveLog.test_log_remove_with_onion_address": {
            "name": "test_log_remove_with_onion_address",
            "location": 758,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoveLog.test_log_remove_with_unknown_onion_address": {
            "name": "test_log_remove_with_unknown_onion_address",
            "location": 769,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoveLog.test_log_remove_with_group_name": {
            "name": "test_log_remove_with_group_name",
            "location": 779,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestRemoveLog.test_unknown_selector_raises_soft_error": {
            "name": "test_unknown_selector_raises_soft_error",
            "location": 791,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestChangeSetting.setUp": {
            "name": "setUp",
            "location": 801,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeSetting.tearDown": {
            "name": "tearDown",
            "location": 813,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeSetting.test_missing_setting_raises_soft_error": {
            "name": "test_missing_setting_raises_soft_error",
            "location": 817,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeSetting.test_invalid_setting_raises_soft_error": {
            "name": "test_invalid_setting_raises_soft_error",
            "location": 821,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeSetting.test_missing_value_raises_soft_error": {
            "name": "test_missing_value_raises_soft_error",
            "location": 825,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeSetting.test_serial_settings_raise_se": {
            "name": "test_serial_settings_raise_se",
            "location": 829,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeSetting.test_changing_ask_password_for_log_access_asks_for_password": {
            "name": "test_changing_ask_password_for_log_access_asks_for_password",
            "location": 838,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeSetting.test_invalid_password_raises_function_return": {
            "name": "test_invalid_password_raises_function_return",
            "location": 844,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeSetting.test_relay_commands_raise_fr_when_traffic_masking_is_enabled": {
            "name": "test_relay_commands_raise_fr_when_traffic_masking_is_enabled",
            "location": 848,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeSetting.test_individual_settings": {
            "name": "test_individual_settings",
            "location": 858,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrintSettings.test_print_settings": {
            "name": "test_print_settings",
            "location": 891,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRxPDisplayUnread.setUp": {
            "name": "setUp",
            "location": 1003,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRxPDisplayUnread.tearDown": {
            "name": "tearDown",
            "location": 1007,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRxPDisplayUnread.test_command": {
            "name": "test_command",
            "location": 1011,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVerify.setUp": {
            "name": "setUp",
            "location": 1018,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVerify.test_active_group_raises_soft_error": {
            "name": "test_active_group_raises_soft_error",
            "location": 1030,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVerify.test_psk_raises_soft_error": {
            "name": "test_psk_raises_soft_error",
            "location": 1034,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVerify.test_fingerprint_check": {
            "name": "test_fingerprint_check",
            "location": 1040,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVerify.test_keyboard_interrupt_raises_soft_error": {
            "name": "test_keyboard_interrupt_raises_soft_error",
            "location": 1051,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWhisper.setUp": {
            "name": "setUp",
            "location": 1059,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWhisper.test_empty_input_raises_soft_error": {
            "name": "test_empty_input_raises_soft_error",
            "location": 1069,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWhisper.test_whisper": {
            "name": "test_whisper",
            "location": 1073,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWhois.setUp": {
            "name": "setUp",
            "location": 1084,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWhois.test_missing_selector_raises_soft_error": {
            "name": "test_missing_selector_raises_soft_error",
            "location": 1090,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWhois.test_unknown_account_raises_soft_error": {
            "name": "test_unknown_account_raises_soft_error",
            "location": 1093,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWhois.test_nick_from_account": {
            "name": "test_nick_from_account",
            "location": 1096,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWhois.test_account_from_nick": {
            "name": "test_account_from_nick",
            "location": 1103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWhois.test_group_id_from_group_name": {
            "name": "test_group_id_from_group_name",
            "location": 1110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWhois.test_group_name_from_group_id": {
            "name": "test_group_name_from_group_id",
            "location": 1117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWipe.setUp": {
            "name": "setUp",
            "location": 1127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWipe.test_no_raises_soft_error": {
            "name": "test_no_raises_soft_error",
            "location": 1135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestWipe.test_wipe_local_testing": {
            "name": "test_wipe_local_testing",
            "location": 1141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWipe.test_wipe": {
            "name": "test_wipe",
            "location": 1157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeMasterKey.test_invalid_response_from_key_db_raises_soft_error.mock_sender_loop": {
            "name": "mock_sender_loop",
            "location": 562,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestChangeMasterKey.test_transmitter_command_raises_critical_error_if_key_database_returns_invalid_master_key.mock_sender_loop": {
            "name": "mock_sender_loop",
            "location": 586,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestChangeMasterKey.test_transmitter_command.mock_sender_loop": {
            "name": "mock_sender_loop",
            "location": 642,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tfc-master/tests/transmitter/test_commands_g.py": {
        "TestProcessGroupCommand.setUp": {
            "name": "setUp",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessGroupCommand.tearDown": {
            "name": "tearDown",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessGroupCommand.test_raises_fr_when_traffic_masking_is_enabled": {
            "name": "test_raises_fr_when_traffic_masking_is_enabled",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessGroupCommand.test_invalid_command_raises_soft_error": {
            "name": "test_invalid_command_raises_soft_error",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessGroupCommand.test_invalid_command_parameters_raises_soft_error": {
            "name": "test_invalid_command_parameters_raises_soft_error",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessGroupCommand.test_missing_group_id_raises_soft_error": {
            "name": "test_missing_group_id_raises_soft_error",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessGroupCommand.test_invalid_group_id_raises_soft_error": {
            "name": "test_invalid_group_id_raises_soft_error",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessGroupCommand.test_missing_name_raises_soft_error": {
            "name": "test_missing_name_raises_soft_error",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessGroupCommand.test_successful_command": {
            "name": "test_successful_command",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupCreate.setUp": {
            "name": "setUp",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupCreate.tearDown": {
            "name": "tearDown",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupCreate.configure_groups": {
            "name": "configure_groups",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "no_contacts": [
                    "int"
                ]
            }
        },
        "TestGroupCreate.test_invalid_group_name_raises_soft_error": {
            "name": "test_invalid_group_name_raises_soft_error",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupCreate.test_too_many_purp_accounts_raises_soft_error": {
            "name": "test_too_many_purp_accounts_raises_soft_error",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupCreate.test_full_group_list_raises_soft_error": {
            "name": "test_full_group_list_raises_soft_error",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupCreate.test_successful_group_creation": {
            "name": "test_successful_group_creation",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestGroupCreate.test_successful_empty_group_creation": {
            "name": "test_successful_empty_group_creation",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupAddMember.setUp": {
            "name": "setUp",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupAddMember.tearDown": {
            "name": "tearDown",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupAddMember.configure_groups": {
            "name": "configure_groups",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "no_contacts": [
                    "int"
                ]
            }
        },
        "TestGroupAddMember.test_new_group_is_created_if_specified_group_does_not_exist_and_user_chooses_yes": {
            "name": "test_new_group_is_created_if_specified_group_does_not_exist_and_user_chooses_yes",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestGroupAddMember.test_raises_fr_if_specified_group_does_not_exist_and_user_chooses_no": {
            "name": "test_raises_fr_if_specified_group_does_not_exist_and_user_chooses_no",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupAddMember.test_too_large_final_member_list_raises_soft_error": {
            "name": "test_too_large_final_member_list_raises_soft_error",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupAddMember.test_successful_group_add": {
            "name": "test_successful_group_add",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestGroupRmMember.setUp": {
            "name": "setUp",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupRmMember.tearDown": {
            "name": "tearDown",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupRmMember.test_no_accounts_removes_group": {
            "name": "test_no_accounts_removes_group",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupRmMember.test_remove_members_from_unknown_group": {
            "name": "test_remove_members_from_unknown_group",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestGroupRmMember.test_successful_group_remove": {
            "name": "test_successful_group_remove",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestGroupRmGroup.setUp": {
            "name": "setUp",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupRmGroup.tearDown": {
            "name": "tearDown",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupRmGroup.test_cancel_of_remove_raises_soft_error": {
            "name": "test_cancel_of_remove_raises_soft_error",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupRmGroup.test_remove_group_not_on_transmitter_raises_soft_error": {
            "name": "test_remove_group_not_on_transmitter_raises_soft_error",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestGroupRmGroup.test_invalid_group_id_raises_soft_error": {
            "name": "test_invalid_group_id_raises_soft_error",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestGroupRmGroup.test_remove_group_and_notify": {
            "name": "test_remove_group_and_notify",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupRename.setUp": {
            "name": "setUp",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupRename.tearDown": {
            "name": "tearDown",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupRename.test_contact_window_raises_soft_error": {
            "name": "test_contact_window_raises_soft_error",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupRename.test_invalid_group_name_raises_soft_error": {
            "name": "test_invalid_group_name_raises_soft_error",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupRename.test_successful_group_change": {
            "name": "test_successful_group_change",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        }
    },
    "tfc-master/tests/transmitter/test_contact.py": {
        "TestAddNewContact.setUp": {
            "name": "setUp",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddNewContact.tearDown": {
            "name": "tearDown",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddNewContact.test_adding_new_contact_during_traffic_masking_raises_soft_error": {
            "name": "test_adding_new_contact_during_traffic_masking_raises_soft_error",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddNewContact.test_contact_list_full_raises_soft_error": {
            "name": "test_contact_list_full_raises_soft_error",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddNewContact.test_default_nick_ecdhe": {
            "name": "test_default_nick_ecdhe",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddNewContact.test_standard_nick_psk_kex": {
            "name": "test_standard_nick_psk_kex",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddNewContact.test_keyboard_interrupt_raises_soft_error": {
            "name": "test_keyboard_interrupt_raises_soft_error",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetOnionAddressFromUser.setUp": {
            "name": "setUp",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetOnionAddressFromUser.tearDown": {
            "name": "tearDown",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetOnionAddressFromUser.test_invalid_onion_address_from_user_gets_sent_to_relay_program": {
            "name": "test_invalid_onion_address_from_user_gets_sent_to_relay_program",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestGetOnionAddressFromUser.test_user_or_valid_onion_address_from_user_does_not_get_sent_to_relay_program": {
            "name": "test_user_or_valid_onion_address_from_user_does_not_get_sent_to_relay_program",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestRemoveContact.setUp": {
            "name": "setUp",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoveContact.tearDown": {
            "name": "tearDown",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoveContact.test_contact_removal_during_traffic_masking_raises_soft_error": {
            "name": "test_contact_removal_during_traffic_masking_raises_soft_error",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoveContact.test_missing_account_raises_soft_error": {
            "name": "test_missing_account_raises_soft_error",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoveContact.test_invalid_account_raises_soft_error": {
            "name": "test_invalid_account_raises_soft_error",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoveContact.test_user_abort_raises_soft_error": {
            "name": "test_user_abort_raises_soft_error",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoveContact.test_successful_removal_of_contact": {
            "name": "test_successful_removal_of_contact",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestRemoveContact.test_successful_removal_of_last_member_of_active_group": {
            "name": "test_successful_removal_of_last_member_of_active_group",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestRemoveContact.test_no_contact_found_on_transmitter": {
            "name": "test_no_contact_found_on_transmitter",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeNick.setUp": {
            "name": "setUp",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeNick.tearDown": {
            "name": "tearDown",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeNick.test_missing_nick_raises_soft_error": {
            "name": "test_missing_nick_raises_soft_error",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeNick.test_invalid_nick_raises_soft_error": {
            "name": "test_invalid_nick_raises_soft_error",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeNick.test_no_contact_raises_soft_error": {
            "name": "test_no_contact_raises_soft_error",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeNick.test_successful_nick_change": {
            "name": "test_successful_nick_change",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeNick.test_successful_group_nick_change": {
            "name": "test_successful_group_nick_change",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestContactSetting.setUp": {
            "name": "setUp",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactSetting.tearDown": {
            "name": "tearDown",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactSetting.test_invalid_command_raises_soft_error": {
            "name": "test_invalid_command_raises_soft_error",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactSetting.test_missing_parameter_raises_soft_error": {
            "name": "test_missing_parameter_raises_soft_error",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactSetting.test_invalid_extra_parameter_raises_soft_error": {
            "name": "test_invalid_extra_parameter_raises_soft_error",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactSetting.test_enable_logging_for_user": {
            "name": "test_enable_logging_for_user",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactSetting.test_enable_logging_for_user_during_traffic_masking": {
            "name": "test_enable_logging_for_user_during_traffic_masking",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactSetting.test_enable_logging_for_group": {
            "name": "test_enable_logging_for_group",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactSetting.test_enable_logging_for_all_users": {
            "name": "test_enable_logging_for_all_users",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactSetting.test_disable_logging_for_user": {
            "name": "test_disable_logging_for_user",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactSetting.test_disable_logging_for_group": {
            "name": "test_disable_logging_for_group",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactSetting.test_disable_logging_for_all_users": {
            "name": "test_disable_logging_for_all_users",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactSetting.test_enable_file_reception_for_user": {
            "name": "test_enable_file_reception_for_user",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactSetting.test_enable_file_reception_for_group": {
            "name": "test_enable_file_reception_for_group",
            "location": 483,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactSetting.test_enable_file_reception_for_all_users": {
            "name": "test_enable_file_reception_for_all_users",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactSetting.test_disable_file_reception_for_user": {
            "name": "test_disable_file_reception_for_user",
            "location": 520,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactSetting.test_disable_file_reception_for_group": {
            "name": "test_disable_file_reception_for_group",
            "location": 534,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactSetting.test_disable_file_reception_for_all_users": {
            "name": "test_disable_file_reception_for_all_users",
            "location": 553,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactSetting.test_enable_notifications_for_user": {
            "name": "test_enable_notifications_for_user",
            "location": 571,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactSetting.test_enable_notifications_for_group": {
            "name": "test_enable_notifications_for_group",
            "location": 584,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactSetting.test_enable_notifications_for_all_users": {
            "name": "test_enable_notifications_for_all_users",
            "location": 599,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactSetting.test_disable_notifications_for_user": {
            "name": "test_disable_notifications_for_user",
            "location": 625,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactSetting.test_disable_notifications_for_group": {
            "name": "test_disable_notifications_for_group",
            "location": 639,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactSetting.test_disable_notifications_for_all_users": {
            "name": "test_disable_notifications_for_all_users",
            "location": 653,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tfc-master/tests/transmitter/test_files.py": {
        "TestFile.setUp": {
            "name": "setUp",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFile.tearDown": {
            "name": "tearDown",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFile.test_missing_file_raises_soft_error": {
            "name": "test_missing_file_raises_soft_error",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFile.test_empty_file_raises_soft_error": {
            "name": "test_empty_file_raises_soft_error",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFile.test_oversize_filename_raises_soft_error": {
            "name": "test_oversize_filename_raises_soft_error",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFile.test_small_file": {
            "name": "test_small_file",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFile.test_large_file_and_local_testing": {
            "name": "test_large_file_and_local_testing",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tfc-master/tests/transmitter/test_input_loop.py": {
        "TestInputLoop.setUp": {
            "name": "setUp",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInputLoop.tearDown": {
            "name": "tearDown",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInputLoop.test_input_loop_functions": {
            "name": "test_input_loop_functions",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tfc-master/tests/transmitter/test_key_exchanges.py": {
        "TestOnionService.setUp": {
            "name": "setUp",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOnionService.test_onion_service_delivery": {
            "name": "test_onion_service_delivery",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalKey.setUp": {
            "name": "setUp",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalKey.tearDown": {
            "name": "tearDown",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalKey.test_new_local_key_when_traffic_masking_is_enabled_raises_soft_error": {
            "name": "test_new_local_key_when_traffic_masking_is_enabled_raises_soft_error",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalKey.test_new_local_key": {
            "name": "test_new_local_key",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalKey.test_keyboard_interrupt_raises_soft_error": {
            "name": "test_keyboard_interrupt_raises_soft_error",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVerifyFingerprints.test_correct_fingerprint": {
            "name": "test_correct_fingerprint",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestVerifyFingerprints.test_incorrect_fingerprint": {
            "name": "test_incorrect_fingerprint",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestKeyExchange.setUp": {
            "name": "setUp",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyExchange.tearDown": {
            "name": "tearDown",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyExchange.test_zero_public_key_raises_soft_error": {
            "name": "test_zero_public_key_raises_soft_error",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyExchange.test_invalid_public_key_length_raises_soft_error": {
            "name": "test_invalid_public_key_length_raises_soft_error",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyExchange.test_fingerprint_mismatch_raises_soft_error": {
            "name": "test_fingerprint_mismatch_raises_soft_error",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyExchange.test_successful_exchange": {
            "name": "test_successful_exchange",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyExchange.test_successful_exchange_skip_fingerprint_verification": {
            "name": "test_successful_exchange_skip_fingerprint_verification",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyExchange.test_successful_exchange_with_previous_key": {
            "name": "test_successful_exchange_with_previous_key",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPSK.setUp": {
            "name": "setUp",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPSK.tearDown": {
            "name": "tearDown",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPSK.test_psk_creation": {
            "name": "test_psk_creation",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPSK.test_keyboard_interrupt_raises_soft_error": {
            "name": "test_keyboard_interrupt_raises_soft_error",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReceiverLoadPSK.setUp": {
            "name": "setUp",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReceiverLoadPSK.tearDown": {
            "name": "tearDown",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReceiverLoadPSK.test_raises_fr_when_traffic_masking_is_enabled": {
            "name": "test_raises_fr_when_traffic_masking_is_enabled",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReceiverLoadPSK.test_active_group_raises_soft_error": {
            "name": "test_active_group_raises_soft_error",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReceiverLoadPSK.test_ecdhe_key_raises_soft_error": {
            "name": "test_ecdhe_key_raises_soft_error",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReceiverLoadPSK.test_successful_command": {
            "name": "test_successful_command",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReceiverLoadPSK.test_keyboard_interrupt_raises_soft_error": {
            "name": "test_keyboard_interrupt_raises_soft_error",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tfc-master/tests/transmitter/test_packet.py": {
        "TestQueueMessage.setUp": {
            "name": "setUp",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueueMessage.tearDown": {
            "name": "tearDown",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueueMessage.test_private_message_header": {
            "name": "test_private_message_header",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueueMessage.test_group_message_header": {
            "name": "test_group_message_header",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueueMessage.test_group_management_message_header": {
            "name": "test_group_management_message_header",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSendFile.setUp": {
            "name": "setUp",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSendFile.tearDown": {
            "name": "tearDown",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSendFile.test_traffic_masking_raises_soft_error": {
            "name": "test_traffic_masking_raises_soft_error",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSendFile.test_missing_file_raises_soft_error": {
            "name": "test_missing_file_raises_soft_error",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSendFile.test_empty_file_raises_soft_error": {
            "name": "test_empty_file_raises_soft_error",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSendFile.test_file_transmission_to_contact": {
            "name": "test_file_transmission_to_contact",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestSendFile.test_file_transmission_to_group": {
            "name": "test_file_transmission_to_group",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Any"
                ]
            }
        },
        "TestQueueFile.setUp": {
            "name": "setUp",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueueFile.tearDown": {
            "name": "tearDown",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueueFile.test_tfc_database_raises_soft_error": {
            "name": "test_tfc_database_raises_soft_error",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueueFile.test_aborted_file": {
            "name": "test_aborted_file",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueueFile.test_file_queue_short_traffic_masking": {
            "name": "test_file_queue_short_traffic_masking",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueueFile.test_file_queue_long_normal": {
            "name": "test_file_queue_long_normal",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueueFile.test_keyboard_interrupt_raises_soft_error": {
            "name": "test_keyboard_interrupt_raises_soft_error",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueueCommand.setUp": {
            "name": "setUp",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueueCommand.tearDown": {
            "name": "tearDown",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueueCommand.test_queue_command": {
            "name": "test_queue_command",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSplitToAssemblyPackets.test_short_message": {
            "name": "test_short_message",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSplitToAssemblyPackets.test_long_message": {
            "name": "test_long_message",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSplitToAssemblyPackets.test_short_file": {
            "name": "test_short_file",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSplitToAssemblyPackets.test_long_file": {
            "name": "test_long_file",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSplitToAssemblyPackets.test_short_command": {
            "name": "test_short_command",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSplitToAssemblyPackets.test_long_command": {
            "name": "test_long_command",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueueAssemblyPackets.setUp": {
            "name": "setUp",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueueAssemblyPackets.tearDown": {
            "name": "tearDown",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueueAssemblyPackets.test_queue_message_traffic_masking": {
            "name": "test_queue_message_traffic_masking",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueueAssemblyPackets.test_queue_message_normal": {
            "name": "test_queue_message_normal",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueueAssemblyPackets.test_queue_file_traffic_masking": {
            "name": "test_queue_file_traffic_masking",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueueAssemblyPackets.test_queue_command_traffic_masking": {
            "name": "test_queue_command_traffic_masking",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueueAssemblyPackets.test_queue_command_traffic_masking_no_window": {
            "name": "test_queue_command_traffic_masking_no_window",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueueAssemblyPackets.test_queue_command_normal": {
            "name": "test_queue_command_normal",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSendPacket.setUp": {
            "name": "setUp",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSendPacket.tearDown": {
            "name": "tearDown",
            "location": 451,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSendPacket.test_message_length": {
            "name": "test_message_length",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSendPacket.test_invalid_harac_raises_raises_struct_error": {
            "name": "test_invalid_harac_raises_raises_struct_error",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSendPacket.test_valid_message_packet": {
            "name": "test_valid_message_packet",
            "location": 480,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSendPacket.test_valid_command_packet": {
            "name": "test_valid_command_packet",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCancelPacket.setUp": {
            "name": "setUp",
            "location": 517,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCancelPacket.tearDown": {
            "name": "tearDown",
            "location": 521,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCancelPacket.test_cancel_message_during_normal": {
            "name": "test_cancel_message_during_normal",
            "location": 525,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCancelPacket.test_cancel_group_message_during_normal": {
            "name": "test_cancel_group_message_during_normal",
            "location": 547,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCancelPacket.test_cancel_message_during_traffic_masking": {
            "name": "test_cancel_message_during_traffic_masking",
            "location": 565,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCancelPacket.test_cancel_file_during_traffic_masking": {
            "name": "test_cancel_file_during_traffic_masking",
            "location": 579,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCancelPacket.test_cancel_file_during_normal": {
            "name": "test_cancel_file_during_normal",
            "location": 593,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCancelPacket.test_cancel_file_when_nothing_to_cancel": {
            "name": "test_cancel_file_when_nothing_to_cancel",
            "location": 607,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCancelPacket.test_cancel_message_when_nothing_to_cancel": {
            "name": "test_cancel_message_when_nothing_to_cancel",
            "location": 621,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tfc-master/tests/transmitter/test_sender_loop.py": {
        "TestSenderLoop.test_loops": {
            "name": "test_loops",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTrafficMaskingLoop.test_loop": {
            "name": "test_loop",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStandardSenderLoop.test_loop": {
            "name": "test_loop",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTrafficMaskingLoop.test_loop.queue_delayer": {
            "name": "queue_delayer",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestStandardSenderLoop.test_loop.queue_delayer": {
            "name": "queue_delayer",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tfc-master/tests/transmitter/test_traffic_masking.py": {
        "TestNoiseLoop.setUp": {
            "name": "setUp",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNoiseLoop.tearDown": {
            "name": "tearDown",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNoiseLoop.test_noise_commands": {
            "name": "test_noise_commands",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNoiseLoop.test_noise_packets": {
            "name": "test_noise_packets",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tfc-master/tests/transmitter/test_user_input.py": {
        "TestProcessAliases.setUp": {
            "name": "setUp",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessAliases.test_unread_shortcut": {
            "name": "test_unread_shortcut",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessAliases.test_clear_shortcut": {
            "name": "test_clear_shortcut",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessAliases.test_exit_shortcut": {
            "name": "test_exit_shortcut",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessAliases.test_cmd_shortcut": {
            "name": "test_cmd_shortcut",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetInput.setUp": {
            "name": "setUp",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetInput.test_message": {
            "name": "test_message",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetInput.test_message_and_command_to_empty_group": {
            "name": "test_message_and_command_to_empty_group",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetInput.test_file": {
            "name": "test_file",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetInput.test_command": {
            "name": "test_command",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserInput.test_user_input": {
            "name": "test_user_input",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tfc-master/tests/transmitter/test_windows.py": {
        "TestTxWindow.setUp": {
            "name": "setUp",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTxWindow.tearDown": {
            "name": "tearDown",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTxWindow.test_window_iterates_over_contacts": {
            "name": "test_window_iterates_over_contacts",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTxWindow.test_len_returns_number_of_contacts_in_window": {
            "name": "test_len_returns_number_of_contacts_in_window",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTxWindow.test_group_window_change_during_traffic_masking_raises_soft_error": {
            "name": "test_group_window_change_during_traffic_masking_raises_soft_error",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTxWindow.test_contact_window_change_during_traffic_masking_raises_soft_error": {
            "name": "test_contact_window_change_during_traffic_masking_raises_soft_error",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTxWindow.test_contact_window_reload_during_traffic_masking": {
            "name": "test_contact_window_reload_during_traffic_masking",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTxWindow.test_group_window_reload_during_traffic_masking": {
            "name": "test_group_window_reload_during_traffic_masking",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTxWindow.test_invalid_selection_raises_soft_error": {
            "name": "test_invalid_selection_raises_soft_error",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTxWindow.test_window_selection_during_traffic_masking": {
            "name": "test_window_selection_during_traffic_masking",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTxWindow.test_contact_window_selection_from_input": {
            "name": "test_contact_window_selection_from_input",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTxWindow.test_group_window_selection_from_command": {
            "name": "test_group_window_selection_from_command",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTxWindow.test_deselect_window": {
            "name": "test_deselect_window",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTxWindow.test_is_selected": {
            "name": "test_is_selected",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTxWindow.test_update_log_messages_for_contact": {
            "name": "test_update_log_messages_for_contact",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTxWindow.test_update_log_messages_for_group": {
            "name": "test_update_log_messages_for_group",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTxWindow.test_update_group_win_members_if_group_is_available": {
            "name": "test_update_group_win_members_if_group_is_available",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTxWindow.test_window_contact_is_reloaded_when_contact_is_active": {
            "name": "test_window_contact_is_reloaded_when_contact_is_active",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTxWindow.test_deactivate_window_if_group_is_not_available": {
            "name": "test_deactivate_window_if_group_is_not_available",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTxWindow.test_selecting_pending_contact_starts_key_exchange": {
            "name": "test_selecting_pending_contact_starts_key_exchange",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTxWindow.test_adding_new_contact_from_contact_selection": {
            "name": "test_adding_new_contact_from_contact_selection",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTxWindow.test_missing_account_when_removing_raises_soft_error": {
            "name": "test_missing_account_when_removing_raises_soft_error",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTxWindow.test_unknown_account_when_removing_raises_soft_error": {
            "name": "test_unknown_account_when_removing_raises_soft_error",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTxWindow.test_abort_removal_of_contact_form_contact_selection": {
            "name": "test_abort_removal_of_contact_form_contact_selection",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTxWindow.test_removing_pending_contact_from_contact_selection": {
            "name": "test_removing_pending_contact_from_contact_selection",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTxWindow.test_sending_onion_service_data_from_contact_selection": {
            "name": "test_sending_onion_service_data_from_contact_selection",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTxWindow.test_invalid_command_raises_soft_error": {
            "name": "test_invalid_command_raises_soft_error",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelectWindow.setUp": {
            "name": "setUp",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelectWindow.tearDown": {
            "name": "tearDown",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelectWindow.test_invalid_selection_raises_soft_error": {
            "name": "test_invalid_selection_raises_soft_error",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelectWindow.test_window_selection": {
            "name": "test_window_selection",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tfc-master/tests/transmitter/test_window_mock.py": {
        "TestMockWindow.setUp": {
            "name": "setUp",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMockWindow.test_window_iterates_over_contacts": {
            "name": "test_window_iterates_over_contacts",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tfc-master/tests/transmitter/__init__.py": {}
}
{
    "traktpy-master/docs/__init__.py": {},
    "traktpy-master/tests/test_executor.py": {
        "test_executor": {
            "name": "test_executor",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_refresh_token_off": {
            "name": "test_refresh_token_off",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "test_refresh_token_on": {
            "name": "test_refresh_token_on",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "test_pagination": {
            "name": "test_pagination",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "test_prefetch_off": {
            "name": "test_prefetch_off",
            "location": 89,
            "return": [],
            "arguments": {}
        },
        "test_prefetch_on": {
            "name": "test_prefetch_on",
            "location": 102,
            "return": [],
            "arguments": {}
        },
        "test_take": {
            "name": "test_take",
            "location": 124,
            "return": [],
            "arguments": {}
        },
        "test_chaining": {
            "name": "test_chaining",
            "location": 155,
            "return": [],
            "arguments": {}
        },
        "test_use_cached": {
            "name": "test_use_cached",
            "location": 165,
            "return": [],
            "arguments": {}
        },
        "test_cache_timeout": {
            "name": "test_cache_timeout",
            "location": 174,
            "return": [],
            "arguments": {}
        },
        "test_cache_get": {
            "name": "test_cache_get",
            "location": 183,
            "return": [],
            "arguments": {}
        }
    },
    "traktpy-master/tests/test_http_component.py": {
        "test_get_url": {
            "name": "test_get_url",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_bad_request_exception": {
            "name": "test_bad_request_exception",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_extra_info_return": {
            "name": "test_extra_info_return",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "test_add_quargs": {
            "name": "test_add_quargs",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "test_unexpected_code": {
            "name": "test_unexpected_code",
            "location": 66,
            "return": [],
            "arguments": {}
        }
    },
    "traktpy-master/tests/test_json_parser.py": {
        "test_basic_list_dict": {
            "name": "test_basic_list_dict",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_dataclass": {
            "name": "test_dataclass",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_mixed_structure": {
            "name": "test_mixed_structure",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_defaults": {
            "name": "test_defaults",
            "location": 84,
            "return": [],
            "arguments": {}
        },
        "test_wildcards": {
            "name": "test_wildcards",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "test_parser_nofail": {
            "name": "test_parser_nofail",
            "location": 109,
            "return": [],
            "arguments": {}
        },
        "test_parser_datetime": {
            "name": "test_parser_datetime",
            "location": 122,
            "return": [],
            "arguments": {}
        },
        "test_parser_default_none": {
            "name": "test_parser_default_none",
            "location": 131,
            "return": [],
            "arguments": {}
        },
        "test_parser_invalid_structure": {
            "name": "test_parser_invalid_structure",
            "location": 138,
            "return": [],
            "arguments": {}
        },
        "test_empty_resp": {
            "name": "test_empty_resp",
            "location": 143,
            "return": [],
            "arguments": {}
        }
    },
    "traktpy-master/tests/test_oauth.py": {
        "test_redirect_url": {
            "name": "test_redirect_url",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_get_token": {
            "name": "test_get_token",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_revoke_token": {
            "name": "test_revoke_token",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "test_get_verification_code": {
            "name": "test_get_verification_code",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "test_wait_for_response_success": {
            "name": "test_wait_for_response_success",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "test_wait_for_response_timeout": {
            "name": "test_wait_for_response_timeout",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "test_wait_for_response_success.pool_endpoint_responses": {
            "name": "pool_endpoint_responses",
            "location": 55,
            "return": [],
            "arguments": {}
        }
    },
    "traktpy-master/tests/test_paths.py": {
        "test_aliases": {
            "name": "test_aliases",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_optional_args": {
            "name": "test_optional_args",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_required_args": {
            "name": "test_required_args",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_extended": {
            "name": "test_extended",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_filters": {
            "name": "test_filters",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "test_get_quargs": {
            "name": "test_get_quargs",
            "location": 104,
            "return": [],
            "arguments": {}
        },
        "test_multiple_validators_for_field": {
            "name": "test_multiple_validators_for_field",
            "location": 117,
            "return": [],
            "arguments": {}
        }
    },
    "traktpy-master/tests/test_validators.py": {
        "test_auth_validator": {
            "name": "test_auth_validator",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_required_args_validator": {
            "name": "test_required_args_validator",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "test_optional_args_validator": {
            "name": "test_optional_args_validator",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "test_per_arg_validator": {
            "name": "test_per_arg_validator",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "test_extended_validator": {
            "name": "test_extended_validator",
            "location": 76,
            "return": [],
            "arguments": {}
        },
        "test_filters_validator": {
            "name": "test_filters_validator",
            "location": 91,
            "return": [],
            "arguments": {}
        },
        "test_is_date": {
            "name": "test_is_date",
            "location": 117,
            "return": [],
            "arguments": {}
        }
    },
    "traktpy-master/tests/utils.py": {
        "get_mock_http_component": {
            "name": "get_mock_http_component",
            "location": 117,
            "return": [],
            "arguments": {
                "map_of_responses": [
                    "Dict[(str, Iterable[Any])]"
                ],
                "paginated": [
                    "Optional[List[str]]"
                ]
            }
        },
        "mk_mock_client": {
            "name": "mk_mock_client",
            "location": 133,
            "return": [],
            "arguments": {
                "endpoints": [],
                "client_id": [],
                "client_secret": [],
                "user": [],
                "paginated": []
            }
        },
        "get_last_req": {
            "name": "get_last_req",
            "location": 145,
            "return": [],
            "arguments": {
                "http": []
            }
        },
        "MockResponse.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "json_response": [],
                "code": [],
                "headers": []
            }
        },
        "MockResponse.json": {
            "name": "json",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockResponse.set_headers": {
            "name": "set_headers",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "headers": []
            }
        },
        "MockRequests.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "map_of_responses": [],
                "paginated": []
            }
        },
        "MockRequests.make_infinite_response_generator": {
            "name": "make_infinite_response_generator",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "json_response": [],
                "code": [],
                "headers": []
            }
        },
        "MockRequests.request": {
            "name": "request",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "method": [],
                "path": [],
                "params": []
            }
        },
        "MockRequests.find_path": {
            "name": "find_path",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "MockRequests.return_page": {
            "name": "return_page",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "response": [],
                "params": []
            }
        },
        "get_mock_http_component.wrapper": {
            "name": "wrapper",
            "location": 122,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "MockRequests.make_infinite_response_generator.response_generator": {
            "name": "response_generator",
            "location": 59,
            "return": [],
            "arguments": {}
        }
    },
    "traktpy-master/tests/__init__.py": {},
    "traktpy-master/tests/inferfaces_tests/test_calendars.py": {
        "test_shows": {
            "name": "test_shows",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_new_shows": {
            "name": "test_new_shows",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_season_premieres": {
            "name": "test_season_premieres",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "test_movies": {
            "name": "test_movies",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "test_dvd": {
            "name": "test_dvd",
            "location": 67,
            "return": [],
            "arguments": {}
        }
    },
    "traktpy-master/tests/inferfaces_tests/test_checkin.py": {
        "test_movie_arg_validation": {
            "name": "test_movie_arg_validation",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_episode_arg_validation": {
            "name": "test_episode_arg_validation",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_dispatch": {
            "name": "test_dispatch",
            "location": 73,
            "return": [],
            "arguments": {}
        },
        "test_delete_checkins": {
            "name": "test_delete_checkins",
            "location": 88,
            "return": [],
            "arguments": {}
        }
    },
    "traktpy-master/tests/inferfaces_tests/test_comments.py": {
        "comments_client": {
            "name": "comments_client",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_post_comment": {
            "name": "test_post_comment",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "test_get_comment": {
            "name": "test_get_comment",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_update_comment": {
            "name": "test_update_comment",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_delete_comment": {
            "name": "test_delete_comment",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_get_replies": {
            "name": "test_get_replies",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "test_post_reply": {
            "name": "test_post_reply",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "test_get_item": {
            "name": "test_get_item",
            "location": 80,
            "return": [],
            "arguments": {
                "comments_client": []
            }
        },
        "test_get_users": {
            "name": "test_get_users",
            "location": 87,
            "return": [],
            "arguments": {
                "comments_client": []
            }
        },
        "test_like_comment": {
            "name": "test_like_comment",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "test_remove_like": {
            "name": "test_remove_like",
            "location": 99,
            "return": [],
            "arguments": {}
        },
        "test_trending": {
            "name": "test_trending",
            "location": 106,
            "return": [],
            "arguments": {
                "comments_client": []
            }
        },
        "test_recently_created": {
            "name": "test_recently_created",
            "location": 111,
            "return": [],
            "arguments": {
                "comments_client": []
            }
        },
        "test_recently_updated": {
            "name": "test_recently_updated",
            "location": 116,
            "return": [],
            "arguments": {
                "comments_client": []
            }
        }
    },
    "traktpy-master/tests/inferfaces_tests/test_episodes.py": {
        "episodes_client": {
            "name": "episodes_client",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_summary": {
            "name": "test_summary",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_translations": {
            "name": "test_translations",
            "location": 33,
            "return": [],
            "arguments": {
                "episodes_client": []
            }
        },
        "test_comments": {
            "name": "test_comments",
            "location": 40,
            "return": [],
            "arguments": {
                "episodes_client": []
            }
        },
        "test_lists": {
            "name": "test_lists",
            "location": 45,
            "return": [],
            "arguments": {
                "episodes_client": []
            }
        },
        "test_ratings": {
            "name": "test_ratings",
            "location": 50,
            "return": [],
            "arguments": {
                "episodes_client": []
            }
        },
        "test_stats": {
            "name": "test_stats",
            "location": 55,
            "return": [],
            "arguments": {
                "episodes_client": []
            }
        },
        "test_watching": {
            "name": "test_watching",
            "location": 60,
            "return": [],
            "arguments": {
                "episodes_client": []
            }
        }
    },
    "traktpy-master/tests/inferfaces_tests/test_misc.py": {
        "test_countries": {
            "name": "test_countries",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_certifications": {
            "name": "test_certifications",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "test_genres": {
            "name": "test_genres",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "test_languages": {
            "name": "test_languages",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "test_lists": {
            "name": "test_lists",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "test_networks": {
            "name": "test_networks",
            "location": 55,
            "return": [],
            "arguments": {}
        }
    },
    "traktpy-master/tests/inferfaces_tests/test_movies.py": {
        "movies_client": {
            "name": "movies_client",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_trending": {
            "name": "test_trending",
            "location": 52,
            "return": [],
            "arguments": {
                "movies_client": []
            }
        },
        "test_popular": {
            "name": "test_popular",
            "location": 59,
            "return": [],
            "arguments": {
                "movies_client": []
            }
        },
        "test_played": {
            "name": "test_played",
            "location": 66,
            "return": [],
            "arguments": {
                "movies_client": []
            }
        },
        "test_watched": {
            "name": "test_watched",
            "location": 79,
            "return": [],
            "arguments": {
                "movies_client": []
            }
        },
        "test_collected": {
            "name": "test_collected",
            "location": 84,
            "return": [],
            "arguments": {
                "movies_client": []
            }
        },
        "test_anticipated": {
            "name": "test_anticipated",
            "location": 89,
            "return": [],
            "arguments": {
                "movies_client": []
            }
        },
        "test_box_office": {
            "name": "test_box_office",
            "location": 94,
            "return": [],
            "arguments": {
                "movies_client": []
            }
        },
        "test_updated": {
            "name": "test_updated",
            "location": 99,
            "return": [],
            "arguments": {
                "movies_client": []
            }
        },
        "test_summary": {
            "name": "test_summary",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "test_aliases": {
            "name": "test_aliases",
            "location": 115,
            "return": [],
            "arguments": {
                "movies_client": []
            }
        },
        "test_releases": {
            "name": "test_releases",
            "location": 120,
            "return": [],
            "arguments": {
                "movies_client": []
            }
        },
        "test_translations": {
            "name": "test_translations",
            "location": 125,
            "return": [],
            "arguments": {
                "movies_client": []
            }
        },
        "test_comments": {
            "name": "test_comments",
            "location": 130,
            "return": [],
            "arguments": {
                "movies_client": []
            }
        },
        "test_lists": {
            "name": "test_lists",
            "location": 138,
            "return": [],
            "arguments": {
                "movies_client": []
            }
        },
        "test_get_people": {
            "name": "test_get_people",
            "location": 143,
            "return": [],
            "arguments": {
                "movies_client": []
            }
        },
        "test_ratings": {
            "name": "test_ratings",
            "location": 148,
            "return": [],
            "arguments": {
                "movies_client": []
            }
        },
        "test_related": {
            "name": "test_related",
            "location": 153,
            "return": [],
            "arguments": {
                "movies_client": []
            }
        },
        "test_stats": {
            "name": "test_stats",
            "location": 158,
            "return": [],
            "arguments": {
                "movies_client": []
            }
        },
        "test_watching": {
            "name": "test_watching",
            "location": 163,
            "return": [],
            "arguments": {
                "movies_client": []
            }
        }
    },
    "traktpy-master/tests/inferfaces_tests/test_people.py": {
        "test_get_person": {
            "name": "test_get_person",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_get_movie_credits": {
            "name": "test_get_movie_credits",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_get_show_credits": {
            "name": "test_get_show_credits",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_get_lists": {
            "name": "test_get_lists",
            "location": 36,
            "return": [],
            "arguments": {}
        }
    },
    "traktpy-master/tests/inferfaces_tests/test_recommendations.py": {
        "test_recommendations_movies": {
            "name": "test_recommendations_movies",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_hide_movie": {
            "name": "test_hide_movie",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_recommendations_shows": {
            "name": "test_recommendations_shows",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "test_hide_show": {
            "name": "test_hide_show",
            "location": 59,
            "return": [],
            "arguments": {}
        }
    },
    "traktpy-master/tests/inferfaces_tests/test_scrobble.py": {
        "test_start_scrobble_movie": {
            "name": "test_start_scrobble_movie",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_start_scrobble_episode": {
            "name": "test_start_scrobble_episode",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_pause_scrobble_movie": {
            "name": "test_pause_scrobble_movie",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "test_pause_scrobble_episode": {
            "name": "test_pause_scrobble_episode",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "test_stop_scrobble_movie": {
            "name": "test_stop_scrobble_movie",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "test_stop_scrobble_episode": {
            "name": "test_stop_scrobble_episode",
            "location": 72,
            "return": [],
            "arguments": {}
        }
    },
    "traktpy-master/tests/inferfaces_tests/test_search.py": {
        "test_text_query": {
            "name": "test_text_query",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_id_lookup": {
            "name": "test_id_lookup",
            "location": 19,
            "return": [],
            "arguments": {}
        }
    },
    "traktpy-master/tests/inferfaces_tests/test_seasons.py": {
        "seasons_client": {
            "name": "seasons_client",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_summary": {
            "name": "test_summary",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_detail": {
            "name": "test_detail",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "test_comments": {
            "name": "test_comments",
            "location": 40,
            "return": [],
            "arguments": {
                "seasons_client": []
            }
        },
        "test_lists": {
            "name": "test_lists",
            "location": 45,
            "return": [],
            "arguments": {
                "seasons_client": []
            }
        },
        "test_ratings": {
            "name": "test_ratings",
            "location": 50,
            "return": [],
            "arguments": {
                "seasons_client": []
            }
        },
        "test_stats": {
            "name": "test_stats",
            "location": 55,
            "return": [],
            "arguments": {
                "seasons_client": []
            }
        },
        "test_watching": {
            "name": "test_watching",
            "location": 60,
            "return": [],
            "arguments": {
                "seasons_client": []
            }
        }
    },
    "traktpy-master/tests/inferfaces_tests/test_shows.py": {
        "shows_client": {
            "name": "shows_client",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_trending": {
            "name": "test_trending",
            "location": 52,
            "return": [],
            "arguments": {
                "shows_client": []
            }
        },
        "test_popular": {
            "name": "test_popular",
            "location": 59,
            "return": [],
            "arguments": {
                "shows_client": []
            }
        },
        "test_played": {
            "name": "test_played",
            "location": 64,
            "return": [],
            "arguments": {
                "shows_client": []
            }
        },
        "test_watched": {
            "name": "test_watched",
            "location": 69,
            "return": [],
            "arguments": {
                "shows_client": []
            }
        },
        "test_collected": {
            "name": "test_collected",
            "location": 74,
            "return": [],
            "arguments": {
                "shows_client": []
            }
        },
        "test_anticipated": {
            "name": "test_anticipated",
            "location": 79,
            "return": [],
            "arguments": {
                "shows_client": []
            }
        },
        "test_updated": {
            "name": "test_updated",
            "location": 84,
            "return": [],
            "arguments": {
                "shows_client": []
            }
        },
        "test_summary": {
            "name": "test_summary",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "test_aliases": {
            "name": "test_aliases",
            "location": 99,
            "return": [],
            "arguments": {
                "shows_client": []
            }
        },
        "test_translations": {
            "name": "test_translations",
            "location": 104,
            "return": [],
            "arguments": {
                "shows_client": []
            }
        },
        "test_comments": {
            "name": "test_comments",
            "location": 109,
            "return": [],
            "arguments": {
                "shows_client": []
            }
        },
        "test_lists": {
            "name": "test_lists",
            "location": 117,
            "return": [],
            "arguments": {
                "shows_client": []
            }
        },
        "test_progress_collection": {
            "name": "test_progress_collection",
            "location": 122,
            "return": [],
            "arguments": {
                "shows_client": []
            }
        },
        "test_progress_watched": {
            "name": "test_progress_watched",
            "location": 127,
            "return": [],
            "arguments": {
                "shows_client": []
            }
        },
        "test_get_people": {
            "name": "test_get_people",
            "location": 132,
            "return": [],
            "arguments": {
                "shows_client": []
            }
        },
        "test_ratings": {
            "name": "test_ratings",
            "location": 137,
            "return": [],
            "arguments": {
                "shows_client": []
            }
        },
        "test_related": {
            "name": "test_related",
            "location": 142,
            "return": [],
            "arguments": {
                "shows_client": []
            }
        },
        "test_stats": {
            "name": "test_stats",
            "location": 147,
            "return": [],
            "arguments": {
                "shows_client": []
            }
        },
        "test_watching": {
            "name": "test_watching",
            "location": 152,
            "return": [],
            "arguments": {
                "shows_client": []
            }
        },
        "next_last_ep_responses": {
            "name": "next_last_ep_responses",
            "location": 157,
            "return": [],
            "arguments": {}
        },
        "test_next_episode": {
            "name": "test_next_episode",
            "location": 162,
            "return": [],
            "arguments": {}
        },
        "test_last_episode": {
            "name": "test_last_episode",
            "location": 172,
            "return": [],
            "arguments": {}
        }
    },
    "traktpy-master/tests/inferfaces_tests/__init__.py": {},
    "traktpy-master/tests/test_data/calendars.py": {},
    "traktpy-master/tests/test_data/certifications.py": {},
    "traktpy-master/tests/test_data/checkin.py": {},
    "traktpy-master/tests/test_data/comments.py": {},
    "traktpy-master/tests/test_data/countries.py": {},
    "traktpy-master/tests/test_data/episodes.py": {},
    "traktpy-master/tests/test_data/genres.py": {},
    "traktpy-master/tests/test_data/languages.py": {},
    "traktpy-master/tests/test_data/lists.py": {},
    "traktpy-master/tests/test_data/movies.py": {},
    "traktpy-master/tests/test_data/networks.py": {},
    "traktpy-master/tests/test_data/oauth.py": {},
    "traktpy-master/tests/test_data/people.py": {},
    "traktpy-master/tests/test_data/scrobble.py": {},
    "traktpy-master/tests/test_data/search.py": {},
    "traktpy-master/tests/test_data/seasons.py": {},
    "traktpy-master/tests/test_data/shows.py": {},
    "traktpy-master/tests/test_data/user.py": {},
    "traktpy-master/tests/test_data/__init__.py": {},
    "traktpy-master/trakt/api.py": {
        "TraktApi.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "str"
                ],
                "client_secret": [
                    "str"
                ]
            }
        },
        "TraktApi.request": {
            "name": "request",
            "location": 104,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "Union[(str, List[str])]"
                ]
            }
        },
        "TraktApi.set_user": {
            "name": "set_user",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "TraktCredentials"
                ]
            }
        },
        "TraktApi._get_executor_paths": {
            "name": "_get_executor_paths",
            "location": 116,
            "return": [
                "List[SuiteInterface]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "traktpy-master/trakt/hooks.py": {
        "write_version": {
            "name": "write_version",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "command": [
                    "Any"
                ]
            }
        }
    },
    "traktpy-master/trakt/version.py": {},
    "traktpy-master/trakt/__init__.py": {},
    "traktpy-master/trakt/core/config.py": {
        "_update_dict_recursive": {
            "name": "_update_dict_recursive",
            "location": 12,
            "return": [],
            "arguments": {
                "org": [],
                "new": []
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "InternalConfigType"
                ]
            }
        },
        "Config.__getitem__": {
            "name": "__getitem__",
            "location": 29,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Config.__setitem__": {
            "name": "__setitem__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "DefaultConfig.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "traktpy-master/trakt/core/decorators.py": {
        "auth_required": {
            "name": "auth_required",
            "location": 6,
            "return": [
                "Callable[(..., Any)]"
            ],
            "arguments": {
                "f": [
                    "Callable[(..., Any)]"
                ]
            }
        },
        "auth_required.wrapper": {
            "name": "wrapper",
            "location": 7,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [
                    "Any"
                ]
            }
        }
    },
    "traktpy-master/trakt/core/exceptions.py": {
        "TraktError.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Optional[str]"
                ],
                "errors": [
                    "Optional[List[Exception]]"
                ]
            }
        },
        "RequestRelatedError.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int"
                ],
                "response": []
            }
        }
    },
    "traktpy-master/trakt/core/executors.py": {
        "Executor.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "TraktApi"
                ],
                "params": [
                    "Union[(List[str], None)]"
                ]
            }
        },
        "Executor.__repr__": {
            "name": "__repr__",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Executor.install": {
            "name": "install",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "suites": [
                    "List[SuiteInterface]"
                ]
            }
        },
        "Executor.run": {
            "name": "run",
            "location": 56,
            "return": [
                "Union[(ApiResponse, PaginationIterator[T])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Executor._delegate_to_interface": {
            "name": "_delegate_to_interface",
            "location": 69,
            "return": [
                "Union[(ApiResponse, PaginationIterator[T])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Executor.exec_path_call": {
            "name": "exec_path_call",
            "location": 81,
            "return": [
                "ApiResponse"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Path"
                ],
                "extra_quargs": [
                    "Optional[Dict[(str, str)]]"
                ]
            }
        },
        "Executor._should_use_cache": {
            "name": "_should_use_cache",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Path"
                ],
                "no_cache": [
                    "bool"
                ]
            }
        },
        "Executor._make_generator": {
            "name": "_make_generator",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Path"
                ]
            }
        },
        "Executor.find_matching_path": {
            "name": "find_matching_path",
            "location": 119,
            "return": [
                "List[Tuple[(Path, Callable)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PaginationIterator.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "executor": [
                    "Executor"
                ],
                "path": [
                    "Path"
                ],
                "start_page": [
                    "int"
                ],
                "per_page": [
                    "int"
                ],
                "max_pages": [
                    "int"
                ]
            }
        },
        "PaginationIterator.__iter__": {
            "name": "__iter__",
            "location": 144,
            "return": [
                "PaginationIterator[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PaginationIterator.__next__": {
            "name": "__next__",
            "location": 157,
            "return": [
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "PaginationIterator._fetch_next_page": {
            "name": "_fetch_next_page",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "skip_first": [
                    "int"
                ]
            }
        },
        "PaginationIterator.prefetch_all": {
            "name": "prefetch_all",
            "location": 181,
            "return": [
                "PaginationIterator[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PaginationIterator._has_next_page": {
            "name": "_has_next_page",
            "location": 204,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PaginationIterator.take": {
            "name": "take",
            "location": 207,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "PaginationIterator.take_all": {
            "name": "take_all",
            "location": 220,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PaginationIterator.has_next": {
            "name": "has_next",
            "location": 225,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "traktpy-master/trakt/core/json_parser.py": {
        "parse_tree": {
            "name": "parse_tree",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "data": [
                    "Any"
                ],
                "tree_structure": [
                    "Any"
                ]
            }
        },
        "_apply_name_mapping": {
            "name": "_apply_name_mapping",
            "location": 21,
            "return": [],
            "arguments": {
                "data": [
                    "Any"
                ]
            }
        },
        "_substitute_none_val": {
            "name": "_substitute_none_val",
            "location": 33,
            "return": [],
            "arguments": {
                "data": [
                    "Any"
                ]
            }
        },
        "_parse_tree": {
            "name": "_parse_tree",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "data": [
                    "Any"
                ],
                "tree_structure": [
                    "Any"
                ]
            }
        },
        "_is_arbitrary_value": {
            "name": "_is_arbitrary_value",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "Any"
                ]
            }
        },
        "_parse_list": {
            "name": "_parse_list",
            "location": 63,
            "return": [
                "List[Any]"
            ],
            "arguments": {
                "data": [
                    "List[Any]"
                ],
                "tree_structure": [
                    "List[Any]"
                ]
            }
        },
        "_parse_dict": {
            "name": "_parse_dict",
            "location": 76,
            "return": [
                "Dict[(Any, Any)]"
            ],
            "arguments": {
                "data": [
                    "Dict[(Any, Any)]"
                ],
                "tree_structure": [
                    "Dict[(Any, Any)]"
                ]
            }
        },
        "__parse_dict_items": {
            "name": "__parse_dict_items",
            "location": 100,
            "return": [],
            "arguments": {
                "data": [
                    "Dict[(Any, Any)]"
                ],
                "tree_structure": [
                    "Dict[(Any, Any)]"
                ],
                "wildcards": [
                    "Dict[(type, Any)]"
                ]
            }
        }
    },
    "traktpy-master/trakt/core/models.py": {
        "any_deserializer": {
            "name": "any_deserializer",
            "location": 11,
            "return": [
                "Any"
            ],
            "arguments": {
                "obj": [
                    "Any"
                ]
            }
        },
        "date_deserializer": {
            "name": "date_deserializer",
            "location": 15,
            "return": [
                "Any"
            ],
            "arguments": {
                "obj": [
                    "str"
                ]
            }
        },
        "AbstractBaseModel.set_client": {
            "name": "set_client",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "client": [
                    "'TraktApi'"
                ]
            }
        },
        "AbstractBaseModel.client": {
            "name": "client",
            "location": 31,
            "return": [
                "'TraktApi'"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractBaseModel.to_dict": {
            "name": "to_dict",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "traktpy-master/trakt/core/__init__.py": {},
    "traktpy-master/trakt/core/components/cache.py": {
        "CacheManager.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "TraktApi"
                ]
            }
        },
        "CacheManager.accepted_level": {
            "name": "accepted_level",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "CacheLevel"
                ]
            }
        },
        "CacheManager.get": {
            "name": "get",
            "location": 37,
            "return": [
                "FrozenRequest"
            ],
            "arguments": {
                "self": [],
                "wanted": [
                    "FrozenRequest"
                ]
            }
        },
        "CacheManager.set": {
            "name": "set",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "FrozenRequest"
                ]
            }
        },
        "CacheManager.has": {
            "name": "has",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "FrozenRequest"
                ]
            }
        },
        "FrozenRequest.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "query_args": [
                    "Dict[(str, str)]"
                ],
                "headers": [
                    "Dict[(str, str)]"
                ],
                "response": [
                    "Any"
                ]
            }
        },
        "FrozenRequest._unique_id": {
            "name": "_unique_id",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenRequest.__hash__": {
            "name": "__hash__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FrozenRequest.__eq__": {
            "name": "__eq__",
            "location": 82,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        }
    },
    "traktpy-master/trakt/core/components/http_component.py": {
        "DefaultHttpComponent.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "TraktApi"
                ],
                "requests_dependency": [
                    "Any"
                ]
            }
        },
        "DefaultHttpComponent.request": {
            "name": "request",
            "location": 58,
            "return": [
                "ApiResponse"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "DefaultHttpComponent._get_raw_response": {
            "name": "_get_raw_response",
            "location": 96,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "query_args": [
                    "Dict[(str, str)]"
                ],
                "headers": [
                    "Dict[(str, str)]"
                ],
                "method": [
                    "str"
                ],
                "data": [
                    "Any"
                ],
                "use_cache": [
                    "bool"
                ]
            }
        },
        "DefaultHttpComponent._get_json": {
            "name": "_get_json",
            "location": 116,
            "return": [
                "Any"
            ],
            "arguments": {
                "response": [
                    "Any"
                ],
                "no_raise": [
                    "bool"
                ]
            }
        },
        "DefaultHttpComponent._get_headers": {
            "name": "_get_headers",
            "location": 125,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultHttpComponent._handle_code": {
            "name": "_handle_code",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "Any"
                ]
            }
        },
        "DefaultHttpComponent.get_url": {
            "name": "get_url",
            "location": 149,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "query_args": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "DefaultHttpComponent._get_pagination_headers": {
            "name": "_get_pagination_headers",
            "location": 159,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "response": [
                    "Any"
                ]
            }
        },
        "DefaultHttpComponent.last_request": {
            "name": "last_request",
            "location": 170,
            "return": [
                "Optional[FrozenRequest]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiResponse.__post_init__": {
            "name": "__post_init__",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "traktpy-master/trakt/core/components/oauth.py": {
        "DefaultOauthComponent.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "TraktApi"
                ]
            }
        },
        "DefaultOauthComponent.get_redirect_url": {
            "name": "get_redirect_url",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultOauthComponent.get_token": {
            "name": "get_token",
            "location": 44,
            "return": [
                "TraktCredentials"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultOauthComponent.refresh_token": {
            "name": "refresh_token",
            "location": 68,
            "return": [
                "TraktCredentials"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultOauthComponent.revoke_token": {
            "name": "revoke_token",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultOauthComponent.get_verification_code": {
            "name": "get_verification_code",
            "location": 102,
            "return": [
                "CodeResponse"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultOauthComponent.wait_for_verification": {
            "name": "wait_for_verification",
            "location": 111,
            "return": [
                "TraktCredentials"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultOauthComponent.sleep": {
            "name": "sleep",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "t": [
                    "float"
                ]
            }
        }
    },
    "traktpy-master/trakt/core/components/__init__.py": {},
    "traktpy-master/trakt/core/paths/path.py": {
        "Path.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "output_structure": [
                    "Any"
                ]
            }
        },
        "Path.does_match": {
            "name": "does_match",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Path.is_valid": {
            "name": "is_valid",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "TraktApi"
                ]
            }
        },
        "Path._get_param_value": {
            "name": "_get_param_value",
            "location": 99,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "str"
                ]
            }
        },
        "Path.get_path_and_qargs": {
            "name": "get_path_and_qargs",
            "location": 111,
            "return": [
                "Tuple[(str, Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path._stringify_param": {
            "name": "_stringify_param",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {
                "v": [
                    "Any"
                ]
            }
        },
        "Path._get_parsed_filters": {
            "name": "_get_parsed_filters",
            "location": 142,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.is_bound": {
            "name": "is_bound",
            "location": 156,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.response_structure": {
            "name": "response_structure",
            "location": 160,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.method": {
            "name": "method",
            "location": 164,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path._determine_cache_level": {
            "name": "_determine_cache_level",
            "location": 167,
            "return": [
                "CacheLevel"
            ],
            "arguments": {
                "self": [],
                "cache_level": [
                    "Union[(str, CacheLevel, None)]"
                ]
            }
        }
    },
    "traktpy-master/trakt/core/paths/suite_interface.py": {
        "SuiteInterface.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "TraktApi"
                ],
                "executor": [
                    "Type[Executor]"
                ]
            }
        },
        "SuiteInterface.find_matching": {
            "name": "find_matching",
            "location": 26,
            "return": [
                "List[Tuple[(Path, Callable)]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(List[str], str)]"
                ]
            }
        },
        "SuiteInterface.run": {
            "name": "run",
            "location": 36,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str"
                ]
            }
        },
        "SuiteInterface.run_path": {
            "name": "run_path",
            "location": 39,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Path"
                ],
                "return_extras": [
                    "bool"
                ]
            }
        },
        "SuiteInterface._get_path": {
            "name": "_get_path",
            "location": 49,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str"
                ]
            }
        },
        "SuiteInterface._generic_get_id": {
            "name": "_generic_get_id",
            "location": 53,
            "return": [
                "Union[(int, str)]"
            ],
            "arguments": {
                "item": [
                    "Union[(Movie, Episode, Show, Season, Comment, Person, str, int)]"
                ]
            }
        }
    },
    "traktpy-master/trakt/core/paths/validators.py": {
        "is_date": {
            "name": "is_date",
            "location": 183,
            "return": [
                "bool"
            ],
            "arguments": {
                "d": [
                    "str"
                ],
                "format": [
                    "str"
                ]
            }
        },
        "Validator.validate": {
            "name": "validate",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthRequiredValidator.validate": {
            "name": "validate",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequiredArgsValidator.validate": {
            "name": "validate",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptionalArgsValidator.validate": {
            "name": "validate",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PerArgValidator.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg_name": [
                    "str"
                ],
                "f": [
                    "Callable[([Any], Any)]"
                ]
            }
        },
        "PerArgValidator.validate": {
            "name": "validate",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtendedValidator.validate": {
            "name": "validate",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FiltersValidator.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FiltersValidator.validate": {
            "name": "validate",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FiltersValidator._validate_filter_arg": {
            "name": "_validate_filter_arg",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "allowed_filters": [
                    "List[str]"
                ],
                "filter": [
                    "str"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "FiltersValidator._validate_multi_filter": {
            "name": "_validate_multi_filter",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "filter": [
                    "str"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "FiltersValidator._validate_filter_value": {
            "name": "_validate_filter_value",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "filter": [
                    "str"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "FiltersValidator.years_filter_validator": {
            "name": "years_filter_validator",
            "location": 163,
            "return": [],
            "arguments": {
                "years": [
                    "Any"
                ]
            }
        },
        "FiltersValidator.ratings_filter_validator": {
            "name": "ratings_filter_validator",
            "location": 179,
            "return": [],
            "arguments": {
                "ratings": [
                    "Any"
                ]
            }
        }
    },
    "traktpy-master/trakt/core/paths/__init__.py": {},
    "traktpy-master/trakt/core/paths/endpoint_mappings/calendars.py": {
        "CalendarsI.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CalendarsI._make_path": {
            "name": "_make_path",
            "location": 47,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": [],
                "resource_path": [
                    "str"
                ],
                "return_type": [
                    "Any"
                ]
            }
        },
        "CalendarsI.get_shows": {
            "name": "get_shows",
            "location": 58,
            "return": [
                "List[EpisodePremiere]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CalendarsI.get_my_shows": {
            "name": "get_my_shows",
            "location": 61,
            "return": [
                "List[EpisodePremiere]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CalendarsI.get_new_shows": {
            "name": "get_new_shows",
            "location": 64,
            "return": [
                "List[EpisodePremiere]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CalendarsI.get_my_new_shows": {
            "name": "get_my_new_shows",
            "location": 67,
            "return": [
                "List[EpisodePremiere]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CalendarsI.get_season_premieres": {
            "name": "get_season_premieres",
            "location": 70,
            "return": [
                "List[EpisodePremiere]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CalendarsI.get_my_season_premieres": {
            "name": "get_my_season_premieres",
            "location": 73,
            "return": [
                "List[EpisodePremiere]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CalendarsI.get_movies": {
            "name": "get_movies",
            "location": 76,
            "return": [
                "List[MoviePremiere]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CalendarsI.get_my_movies": {
            "name": "get_my_movies",
            "location": 79,
            "return": [
                "List[MoviePremiere]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CalendarsI.get_dvd_releases": {
            "name": "get_dvd_releases",
            "location": 82,
            "return": [
                "List[MoviePremiere]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CalendarsI.get_my_dvd_releases": {
            "name": "get_my_dvd_releases",
            "location": 85,
            "return": [
                "List[MoviePremiere]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "traktpy-master/trakt/core/paths/endpoint_mappings/checkin.py": {
        "CheckinI.check_into": {
            "name": "check_into",
            "location": 42,
            "return": [
                "Union[(EpisodeCheckin, MovieCheckin)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckinI.check_into_episode": {
            "name": "check_into_episode",
            "location": 59,
            "return": [
                "EpisodeCheckin"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckinI.check_into_movie": {
            "name": "check_into_movie",
            "location": 86,
            "return": [
                "MovieCheckin"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckinI._prepare_common_data": {
            "name": "_prepare_common_data",
            "location": 102,
            "return": [
                "Dict[(str, Union[(str, Dict[(str, str)])])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckinI.delete_active_checkins": {
            "name": "delete_active_checkins",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "traktpy-master/trakt/core/paths/endpoint_mappings/comments.py": {
        "CommentsI.post_comment": {
            "name": "post_comment",
            "location": 123,
            "return": [
                "CommentResponse"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommentsI.get_comment": {
            "name": "get_comment",
            "location": 144,
            "return": [
                "Comment"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommentsI.update_comment": {
            "name": "update_comment",
            "location": 148,
            "return": [
                "Comment"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommentsI.delete_comment": {
            "name": "delete_comment",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommentsI.get_replies": {
            "name": "get_replies",
            "location": 163,
            "return": [
                "PaginationIterator[Comment]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommentsI.post_reply": {
            "name": "post_reply",
            "location": 169,
            "return": [
                "PaginationIterator[Comment]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommentsI.get_item": {
            "name": "get_item",
            "location": 183,
            "return": [
                "CommentItemOnly"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommentsI.get_likes": {
            "name": "get_likes",
            "location": 187,
            "return": [
                "List[CommentLiker]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommentsI.like_comment": {
            "name": "like_comment",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommentsI.remove_like": {
            "name": "remove_like",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommentsI.get_trending": {
            "name": "get_trending",
            "location": 201,
            "return": [
                "List[CommentAndItem]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommentsI.get_recently_created": {
            "name": "get_recently_created",
            "location": 217,
            "return": [
                "List[CommentAndItem]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommentsI.get_recently_updated": {
            "name": "get_recently_updated",
            "location": 233,
            "return": [
                "List[CommentAndItem]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "traktpy-master/trakt/core/paths/endpoint_mappings/episodes.py": {
        "EpisodesI.get_episode": {
            "name": "get_episode",
            "location": 92,
            "return": [
                "Season"
            ],
            "arguments": {
                "self": []
            }
        },
        "EpisodesI.get_comments": {
            "name": "get_comments",
            "location": 105,
            "return": [
                "PaginationIterator[Comment]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EpisodesI.get_translations": {
            "name": "get_translations",
            "location": 121,
            "return": [
                "List[Comment]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EpisodesI.get_lists": {
            "name": "get_lists",
            "location": 142,
            "return": [
                "PaginationIterator[TraktList]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EpisodesI.get_ratings": {
            "name": "get_ratings",
            "location": 165,
            "return": [
                "RatingsSummary"
            ],
            "arguments": {
                "self": []
            }
        },
        "EpisodesI.get_stats": {
            "name": "get_stats",
            "location": 178,
            "return": [
                "SeasonEpisodeStats"
            ],
            "arguments": {
                "self": []
            }
        },
        "EpisodesI.get_users_watching": {
            "name": "get_users_watching",
            "location": 191,
            "return": [
                "List[User]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "traktpy-master/trakt/core/paths/endpoint_mappings/misc_mappings.py": {
        "CountriesI.get_countries": {
            "name": "get_countries",
            "location": 36,
            "return": [
                "List[Country]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CertificationsI.get_certifications": {
            "name": "get_certifications",
            "location": 52,
            "return": [
                "List[Certification]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenresI.get_genres": {
            "name": "get_genres",
            "location": 66,
            "return": [
                "List[Genre]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanguagesI.get_languages": {
            "name": "get_languages",
            "location": 82,
            "return": [
                "List[Language]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListsI.get_trending": {
            "name": "get_trending",
            "location": 98,
            "return": [
                "PaginationIterator[ListResponse]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListsI.get_popular": {
            "name": "get_popular",
            "location": 101,
            "return": [
                "PaginationIterator[ListResponse]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworksI.get_networks": {
            "name": "get_networks",
            "location": 110,
            "return": [
                "List[Network]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "traktpy-master/trakt/core/paths/endpoint_mappings/movies.py": {
        "MoviesI.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MoviesI._make_path": {
            "name": "_make_path",
            "location": 121,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": [],
                "resource_path": [
                    "str"
                ],
                "return_type": [
                    "Any"
                ]
            }
        },
        "MoviesI.get_trending": {
            "name": "get_trending",
            "location": 137,
            "return": [
                "PaginationIterator[TrendingMovie]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoviesI.get_popular": {
            "name": "get_popular",
            "location": 140,
            "return": [
                "PaginationIterator[Movie]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoviesI.get_most_played": {
            "name": "get_most_played",
            "location": 143,
            "return": [
                "PaginationIterator[MovieWithStats]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoviesI.get_most_watched": {
            "name": "get_most_watched",
            "location": 148,
            "return": [
                "PaginationIterator[MovieWithStats]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoviesI.get_most_collected": {
            "name": "get_most_collected",
            "location": 153,
            "return": [
                "PaginationIterator[MovieWithStats]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoviesI.get_most_anticipated": {
            "name": "get_most_anticipated",
            "location": 158,
            "return": [
                "PaginationIterator[AnticipatedMovie]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoviesI.get_box_office": {
            "name": "get_box_office",
            "location": 161,
            "return": [
                "List[BoxOffice]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoviesI.get_recently_updated": {
            "name": "get_recently_updated",
            "location": 164,
            "return": [
                "PaginationIterator[UpdatedMovie]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoviesI.get_summary": {
            "name": "get_summary",
            "location": 169,
            "return": [
                "Movie"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoviesI.get_aliases": {
            "name": "get_aliases",
            "location": 173,
            "return": [
                "List[Alias]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoviesI.get_releases": {
            "name": "get_releases",
            "location": 177,
            "return": [
                "List[MovieRelease]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoviesI.get_translations": {
            "name": "get_translations",
            "location": 186,
            "return": [
                "List[MovieTranslation]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoviesI.get_comments": {
            "name": "get_comments",
            "location": 195,
            "return": [
                "PaginationIterator[Comment]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoviesI.get_lists": {
            "name": "get_lists",
            "location": 201,
            "return": [
                "PaginationIterator[TraktList]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoviesI.get_people": {
            "name": "get_people",
            "location": 212,
            "return": [
                "CastCrewList"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoviesI.get_ratings": {
            "name": "get_ratings",
            "location": 215,
            "return": [
                "RatingsSummary"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoviesI.get_related": {
            "name": "get_related",
            "location": 218,
            "return": [
                "PaginationIterator[Movie]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoviesI.get_stats": {
            "name": "get_stats",
            "location": 223,
            "return": [
                "MovieStats"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoviesI.get_users_watching": {
            "name": "get_users_watching",
            "location": 226,
            "return": [
                "List[User]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoviesI._get_movie_id": {
            "name": "_get_movie_id",
            "location": 231,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "movie": [
                    "Union[(Movie, str, int)]"
                ]
            }
        }
    },
    "traktpy-master/trakt/core/paths/endpoint_mappings/people.py": {
        "PeopleI.get_person": {
            "name": "get_person",
            "location": 51,
            "return": [
                "Person"
            ],
            "arguments": {
                "self": [],
                "person": [
                    "Union[(Person, str, int)]"
                ]
            }
        },
        "PeopleI.get_movie_credits": {
            "name": "get_movie_credits",
            "location": 55,
            "return": [
                "MovieCredits"
            ],
            "arguments": {
                "self": [],
                "person": [
                    "Union[(Person, str, int)]"
                ]
            }
        },
        "PeopleI.get_show_credits": {
            "name": "get_show_credits",
            "location": 61,
            "return": [
                "ShowCredits"
            ],
            "arguments": {
                "self": [],
                "person": [
                    "Union[(Person, str, int)]"
                ]
            }
        },
        "PeopleI.get_lists": {
            "name": "get_lists",
            "location": 67,
            "return": [
                "List[TraktList]"
            ],
            "arguments": {
                "self": [],
                "person": [
                    "Union[(Person, str, int)]"
                ]
            }
        },
        "PeopleI._get_person_id": {
            "name": "_get_person_id",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "Union[(Person, int, str)]"
                ]
            }
        }
    },
    "traktpy-master/trakt/core/paths/endpoint_mappings/recommendations.py": {
        "RecommendationsI.get_movie_recommendations": {
            "name": "get_movie_recommendations",
            "location": 47,
            "return": [
                "List[Movie]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecommendationsI.hide_movie": {
            "name": "hide_movie",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecommendationsI.get_show_recommendations": {
            "name": "get_show_recommendations",
            "location": 58,
            "return": [
                "List[Show]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecommendationsI.hide_show": {
            "name": "hide_show",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "traktpy-master/trakt/core/paths/endpoint_mappings/scrobble.py": {
        "ScrobbleI.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScrobbleI._make_path": {
            "name": "_make_path",
            "location": 33,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": [],
                "resource_path": [
                    "str"
                ],
                "return_type": [
                    "Any"
                ]
            }
        },
        "ScrobbleI.start_scrobble": {
            "name": "start_scrobble",
            "location": 40,
            "return": [
                "Union[(MovieScrobble, EpisodeScrobble)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrobbleI.start_scrobble_movie": {
            "name": "start_scrobble_movie",
            "location": 61,
            "return": [
                "MovieScrobble"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrobbleI.start_scrobble_episode": {
            "name": "start_scrobble_episode",
            "location": 67,
            "return": [
                "EpisodeScrobble"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrobbleI.pause_scrobble": {
            "name": "pause_scrobble",
            "location": 75,
            "return": [
                "Union[(MovieScrobble, EpisodeScrobble)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrobbleI.pause_scrobble_movie": {
            "name": "pause_scrobble_movie",
            "location": 93,
            "return": [
                "MovieScrobble"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrobbleI.pause_scrobble_episode": {
            "name": "pause_scrobble_episode",
            "location": 99,
            "return": [
                "EpisodeScrobble"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrobbleI.stop_scrobble": {
            "name": "stop_scrobble",
            "location": 107,
            "return": [
                "Union[(MovieScrobble, EpisodeScrobble)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrobbleI.stop_scrobble_movie": {
            "name": "stop_scrobble_movie",
            "location": 125,
            "return": [
                "MovieScrobble"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrobbleI.stop_scrobble_episode": {
            "name": "stop_scrobble_episode",
            "location": 131,
            "return": [
                "EpisodeScrobble"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrobbleI._prepare_episode_data": {
            "name": "_prepare_episode_data",
            "location": 137,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "episode": [
                    "Union[(Episode, Dict[(str, Any)])]"
                ],
                "progress": [
                    "float"
                ],
                "show": [
                    "Optional[Union[(Show, int, str)]]"
                ]
            }
        },
        "ScrobbleI._prepare_movie_data": {
            "name": "_prepare_movie_data",
            "location": 157,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "progress": [
                    "float"
                ],
                "movie": [
                    "Union[(Movie, Dict[(str, Any)])]"
                ]
            }
        }
    },
    "traktpy-master/trakt/core/paths/endpoint_mappings/search.py": {
        "SearchI.text_query": {
            "name": "text_query",
            "location": 68,
            "return": [
                "PaginationIterator[SearchResult]"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Union[(str, List[str])]"
                ],
                "query": [
                    "str"
                ],
                "fields": [
                    "Optional[Union[(str, List[str])]]"
                ]
            }
        },
        "SearchI.id_lookup": {
            "name": "id_lookup",
            "location": 85,
            "return": [
                "PaginationIterator[SearchResult]"
            ],
            "arguments": {
                "self": [],
                "id_type": [
                    "str"
                ],
                "id": [
                    "Union[(str, int)]"
                ],
                "type": [
                    "Optional[Union[(str, List[str])]]"
                ]
            }
        }
    },
    "traktpy-master/trakt/core/paths/endpoint_mappings/seasons.py": {
        "SeasonsI.get_all_seasons": {
            "name": "get_all_seasons",
            "location": 93,
            "return": [
                "List[Season]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeasonsI.get_season": {
            "name": "get_season",
            "location": 100,
            "return": [
                "List[Episode]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeasonsI.get_comments": {
            "name": "get_comments",
            "location": 107,
            "return": [
                "PaginationIterator[Comment]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeasonsI.get_lists": {
            "name": "get_lists",
            "location": 119,
            "return": [
                "PaginationIterator[TraktList]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeasonsI.get_ratings": {
            "name": "get_ratings",
            "location": 134,
            "return": [
                "RatingsSummary"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeasonsI.get_stats": {
            "name": "get_stats",
            "location": 141,
            "return": [
                "SeasonEpisodeStats"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeasonsI.get_users_watching": {
            "name": "get_users_watching",
            "location": 148,
            "return": [
                "List[User]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "traktpy-master/trakt/core/paths/endpoint_mappings/shows.py": {
        "ShowsI.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ShowsI._make_path": {
            "name": "_make_path",
            "location": 169,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": [],
                "resource_path": [
                    "str"
                ],
                "return_type": [
                    "Any"
                ]
            }
        },
        "ShowsI.get_trending": {
            "name": "get_trending",
            "location": 185,
            "return": [
                "PaginationIterator[TrendingShow]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShowsI.get_popular": {
            "name": "get_popular",
            "location": 188,
            "return": [
                "PaginationIterator[Show]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShowsI.get_most_played": {
            "name": "get_most_played",
            "location": 191,
            "return": [
                "PaginationIterator[ShowWithStats]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShowsI.get_most_watched": {
            "name": "get_most_watched",
            "location": 196,
            "return": [
                "PaginationIterator[ShowWithStats]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShowsI.get_most_collected": {
            "name": "get_most_collected",
            "location": 201,
            "return": [
                "PaginationIterator[ShowWithStats]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShowsI.get_most_anticipated": {
            "name": "get_most_anticipated",
            "location": 206,
            "return": [
                "PaginationIterator[AnticipatedShow]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShowsI.get_recently_updated": {
            "name": "get_recently_updated",
            "location": 209,
            "return": [
                "PaginationIterator[UpdatedShow]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShowsI.get_summary": {
            "name": "get_summary",
            "location": 214,
            "return": [
                "PaginationIterator[Show]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShowsI.get_aliases": {
            "name": "get_aliases",
            "location": 220,
            "return": [
                "List[Alias]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShowsI.get_translations": {
            "name": "get_translations",
            "location": 224,
            "return": [
                "List[ShowTranslation]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShowsI.get_comments": {
            "name": "get_comments",
            "location": 233,
            "return": [
                "PaginationIterator[Comment]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShowsI.get_lists": {
            "name": "get_lists",
            "location": 239,
            "return": [
                "PaginationIterator[TraktList]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShowsI.get_collection_progress": {
            "name": "get_collection_progress",
            "location": 250,
            "return": [
                "ShowCollectionProgress"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShowsI.get_watched_progress": {
            "name": "get_watched_progress",
            "location": 268,
            "return": [
                "ShowCollectionProgress"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShowsI.get_people": {
            "name": "get_people",
            "location": 286,
            "return": [
                "CastCrewList"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShowsI.get_ratings": {
            "name": "get_ratings",
            "location": 289,
            "return": [
                "RatingsSummary"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShowsI.get_related": {
            "name": "get_related",
            "location": 292,
            "return": [
                "PaginationIterator[Show]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShowsI.get_stats": {
            "name": "get_stats",
            "location": 297,
            "return": [
                "ShowStats"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShowsI.get_users_watching": {
            "name": "get_users_watching",
            "location": 300,
            "return": [
                "List[User]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShowsI.get_next_episode": {
            "name": "get_next_episode",
            "location": 305,
            "return": [
                "Optional[Episode]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShowsI.get_last_episode": {
            "name": "get_last_episode",
            "location": 317,
            "return": [
                "Optional[Episode]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "traktpy-master/trakt/core/paths/endpoint_mappings/__init__.py": {},
    "traktpy-master/trakt/core/paths/response_structs/common.py": {},
    "traktpy-master/trakt/core/paths/response_structs/movie_structs.py": {},
    "traktpy-master/trakt/core/paths/response_structs/show_structs.py": {},
    "traktpy-master/trakt/core/paths/response_structs/__init__.py": {}
}
{
    "trio-typing-master/conftest.py": {},
    "trio-typing-master/setup.py": {},
    "trio-typing-master/async_generator-stubs/__init__.py": {
        "async_generator": {
            "name": "async_generator",
            "location": 24,
            "return": [
                "Callable[(..., CompatAsyncGenerator[(Any, Any, _T)])]"
            ],
            "arguments": {
                "__fn": [
                    "Callable[(..., Awaitable[_T])]"
                ]
            }
        },
        "isasyncgen": {
            "name": "isasyncgen",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "object"
                ]
            }
        },
        "isasyncgenfunction": {
            "name": "isasyncgenfunction",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "object"
                ]
            }
        },
        "asynccontextmanager": {
            "name": "asynccontextmanager",
            "location": 46,
            "return": [
                "Callable[(..., AsyncContextManager[_T])]"
            ],
            "arguments": {
                "fn": [
                    "Callable[(..., AsyncIterator[_T])]"
                ]
            }
        },
        "aclosing": {
            "name": "aclosing",
            "location": 55,
            "return": [
                "AsyncContextManager[_T_closeable]"
            ],
            "arguments": {
                "obj": [
                    "_T_closeable"
                ]
            }
        },
        "get_asyncgen_hooks": {
            "name": "get_asyncgen_hooks",
            "location": 65,
            "return": [
                "_AsyncGenHooks"
            ],
            "arguments": {}
        },
        "set_asyncgen_hooks": {
            "name": "set_asyncgen_hooks",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "firstiter": [
                    "Optional[Callable[([AsyncGenerator[(Any, Any)]], Any)]]"
                ],
                "finalizer": [
                    "Optional[Callable[([AsyncGenerator[(Any, Any)]], Any)]]"
                ]
            }
        },
        "_AsyncCloseable.aclose": {
            "name": "aclose",
            "location": 51,
            "return": [
                "Awaitable[None]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "trio-typing-master/outcome-stubs/__init__.py": {
        "capture": {
            "name": "capture",
            "location": 50,
            "return": [
                "Outcome[T]"
            ],
            "arguments": {
                "sync_fn": [
                    "Callable[(..., T)]"
                ]
            }
        },
        "_ASendable.asend": {
            "name": "asend",
            "location": 24,
            "return": [
                "Awaitable[T_co]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T_contra"
                ]
            }
        },
        "_ASendable.athrow": {
            "name": "athrow",
            "location": 25,
            "return": [
                "Awaitable[T_co]"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Type[BaseException]"
                ],
                "exc_value": [
                    "Optional[BaseException]"
                ],
                "exc_traceback": [
                    "Optional[TracebackType]"
                ]
            }
        },
        "Value.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "T"
                ]
            }
        },
        "Value.unwrap": {
            "name": "unwrap",
            "location": 35,
            "return": [
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "Value.send": {
            "name": "send",
            "location": 36,
            "return": [
                "U"
            ],
            "arguments": {
                "self": [],
                "gen": [
                    "Generator[(U, T, Any)]"
                ]
            }
        },
        "Error.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "error": [
                    "BaseException"
                ]
            }
        },
        "Error.unwrap": {
            "name": "unwrap",
            "location": 42,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Error.send": {
            "name": "send",
            "location": 43,
            "return": [
                "U"
            ],
            "arguments": {
                "self": [],
                "gen": [
                    "Generator[(U, Any, Any)]"
                ]
            }
        }
    },
    "trio-typing-master/trio-stubs/abc.py": {
        "Clock.start_clock": {
            "name": "start_clock",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Clock.current_time": {
            "name": "current_time",
            "location": 11,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Clock.deadline_to_sleep_time": {
            "name": "deadline_to_sleep_time",
            "location": 13,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "deadline": [
                    "float"
                ]
            }
        },
        "Instrument.before_run": {
            "name": "before_run",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instrument.after_run": {
            "name": "after_run",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instrument.task_spawned": {
            "name": "task_spawned",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "trio.lowlevel.Task"
                ]
            }
        },
        "Instrument.task_scheduled": {
            "name": "task_scheduled",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "trio.lowlevel.Task"
                ]
            }
        },
        "Instrument.before_task_step": {
            "name": "before_task_step",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "trio.lowlevel.Task"
                ]
            }
        },
        "Instrument.after_task_step": {
            "name": "after_task_step",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "trio.lowlevel.Task"
                ]
            }
        },
        "Instrument.task_exited": {
            "name": "task_exited",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "trio.lowlevel.Task"
                ]
            }
        },
        "Instrument.before_io_wait": {
            "name": "before_io_wait",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "float"
                ]
            }
        },
        "Instrument.after_io_wait": {
            "name": "after_io_wait",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "float"
                ]
            }
        },
        "SocketFactory.socket": {
            "name": "socket",
            "location": 44,
            "return": [
                "trio.socket.SocketType"
            ],
            "arguments": {
                "self": [],
                "family": [
                    "Optional[int]"
                ],
                "type": [
                    "Optional[int]"
                ],
                "proto": [
                    "Optional[int]"
                ]
            }
        },
        "ReceiveStream.__aiter__": {
            "name": "__aiter__",
            "location": 66,
            "return": [
                "AsyncIterator[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReceiveChannel.__aiter__": {
            "name": "__aiter__",
            "location": 94,
            "return": [
                "AsyncIterator[T_co]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "trio-typing-master/trio-stubs/from_thread.py": {
        "run": {
            "name": "run",
            "location": 9,
            "return": [
                "T"
            ],
            "arguments": {
                "afn": [
                    "Union[(Callable[(..., Awaitable[T])], Callable[([VarArg()], Awaitable[T])])]"
                ]
            }
        },
        "run_sync": {
            "name": "run_sync",
            "location": 15,
            "return": [
                "T"
            ],
            "arguments": {
                "fn": [
                    "Union[(Callable[(..., T)], Callable[([VarArg()], T)])]"
                ]
            }
        }
    },
    "trio-typing-master/trio-stubs/lowlevel.py": {
        "enable_ki_protection": {
            "name": "enable_ki_protection",
            "location": 34,
            "return": [
                "F"
            ],
            "arguments": {
                "fn": [
                    "F"
                ]
            }
        },
        "disable_ki_protection": {
            "name": "disable_ki_protection",
            "location": 35,
            "return": [
                "F"
            ],
            "arguments": {
                "fn": [
                    "F"
                ]
            }
        },
        "currently_ki_protected": {
            "name": "currently_ki_protected",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "current_task": {
            "name": "current_task",
            "location": 71,
            "return": [
                "Task"
            ],
            "arguments": {}
        },
        "current_root_task": {
            "name": "current_root_task",
            "location": 72,
            "return": [
                "Task"
            ],
            "arguments": {}
        },
        "current_statistics": {
            "name": "current_statistics",
            "location": 73,
            "return": [
                "_Statistics"
            ],
            "arguments": {}
        },
        "current_clock": {
            "name": "current_clock",
            "location": 74,
            "return": [
                "trio.abc.Clock"
            ],
            "arguments": {}
        },
        "current_trio_token": {
            "name": "current_trio_token",
            "location": 75,
            "return": [
                "TrioToken"
            ],
            "arguments": {}
        },
        "reschedule": {
            "name": "reschedule",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "Task"
                ],
                "next_send": [
                    "outcome.Outcome[Any]"
                ]
            }
        },
        "spawn_system_task": {
            "name": "spawn_system_task",
            "location": 78,
            "return": [
                "Task"
            ],
            "arguments": {
                "async_fn": [
                    "Union[(Callable[(..., Awaitable[Any])], Callable[([VarArg()], Awaitable[Any])])]"
                ]
            }
        },
        "add_instrument": {
            "name": "add_instrument",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "instrument": [
                    "trio.abc.Instrument"
                ]
            }
        },
        "remove_instrument": {
            "name": "remove_instrument",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "instrument": [
                    "trio.abc.Instrument"
                ]
            }
        },
        "notify_closing": {
            "name": "notify_closing",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [
                    "int"
                ]
            }
        },
        "start_guest_run": {
            "name": "start_guest_run",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "afn": [
                    "Union[(Callable[(..., Awaitable[T])], Callable[([VarArg()], Awaitable[T])])]"
                ]
            }
        },
        "start_thread_soon": {
            "name": "start_thread_soon",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "fn": [
                    "Callable[([], T)]"
                ],
                "deliver": [
                    "Callable[([outcome.Outcome[T]], None)]"
                ]
            }
        },
        "_Statistics.__getattr__": {
            "name": "__getattr__",
            "location": 31,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "TrioToken.run_sync_soon": {
            "name": "run_sync_soon",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sync_fn": [
                    "Union[(Callable[(..., Any)], Callable[([VarArg()], Any)])]"
                ]
            }
        },
        "UnboundedQueue.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnboundedQueue.qsize": {
            "name": "qsize",
            "location": 51,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnboundedQueue.empty": {
            "name": "empty",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnboundedQueue.put_nowait": {
            "name": "put_nowait",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "T"
                ]
            }
        },
        "UnboundedQueue.get_batch_nowait": {
            "name": "get_batch_nowait",
            "location": 54,
            "return": [
                "Sequence[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnboundedQueue.statistics": {
            "name": "statistics",
            "location": 56,
            "return": [
                "_Statistics"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnboundedQueue.__aiter__": {
            "name": "__aiter__",
            "location": 57,
            "return": [
                "AsyncIterator[Sequence[T]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "current_kqueue": {
            "name": "current_kqueue",
            "location": 105,
            "return": [
                "select.kqueue"
            ],
            "arguments": {}
        },
        "monitor_kevent": {
            "name": "monitor_kevent",
            "location": 106,
            "return": [
                "ContextManager[UnboundedQueue[select.kevent]]"
            ],
            "arguments": {
                "ident": [
                    "int"
                ],
                "filter": [
                    "int"
                ]
            }
        },
        "current_iocp": {
            "name": "current_iocp",
            "location": 118,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "register_with_iocp": {
            "name": "register_with_iocp",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "handle": [
                    "int"
                ]
            }
        },
        "monitor_completion_key": {
            "name": "monitor_completion_key",
            "location": 121,
            "return": [
                "ContextManager[Tuple[(int, UnboundedQueue[_CompletionKeyEventInfo])]]"
            ],
            "arguments": {}
        },
        "ParkingLot.__len__": {
            "name": "__len__",
            "location": 144,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParkingLot.__bool__": {
            "name": "__bool__",
            "location": 145,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParkingLot.unpark": {
            "name": "unpark",
            "location": 147,
            "return": [
                "Sequence[Task]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParkingLot.unpark_all": {
            "name": "unpark_all",
            "location": 148,
            "return": [
                "Sequence[Task]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParkingLot.repark": {
            "name": "repark",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_lot": [
                    "ParkingLot"
                ]
            }
        },
        "ParkingLot.repark_all": {
            "name": "repark_all",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_lot": [
                    "ParkingLot"
                ]
            }
        },
        "ParkingLot.statistics": {
            "name": "statistics",
            "location": 151,
            "return": [
                "_Statistics"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunVar.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "default": [
                    "T"
                ]
            }
        },
        "RunVar.get": {
            "name": "get",
            "location": 159,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "T"
                ]
            }
        },
        "RunVar.set": {
            "name": "set",
            "location": 160,
            "return": [
                "_RunVarToken"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T"
                ]
            }
        },
        "RunVar.reset": {
            "name": "reset",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "_RunVarToken"
                ]
            }
        },
        "FdStream.__init__": {
            "name": "__init__",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "fd": [
                    "int"
                ]
            }
        },
        "FdStream.fileno": {
            "name": "fileno",
            "location": 175,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "trio-typing-master/trio-stubs/socket.py": {
        "set_custom_hostname_resolver": {
            "name": "set_custom_hostname_resolver",
            "location": 377,
            "return": [
                "Optional[trio.abc.HostnameResolver]"
            ],
            "arguments": {
                "hostname_resolver": [
                    "Optional[trio.abc.HostnameResolver]"
                ]
            }
        },
        "set_custom_socket_factory": {
            "name": "set_custom_socket_factory",
            "location": 380,
            "return": [
                "Optional[trio.abc.SocketFactory]"
            ],
            "arguments": {
                "socket_factory": [
                    "Optional[trio.abc.SocketFactory]"
                ]
            }
        },
        "fromfd": {
            "name": "fromfd",
            "location": 458,
            "return": [
                "SocketType"
            ],
            "arguments": {
                "fd": [
                    "int"
                ],
                "family": [
                    "int"
                ],
                "type": [
                    "int"
                ],
                "proto": [
                    "int"
                ]
            }
        },
        "fromshare": {
            "name": "fromshare",
            "location": 459,
            "return": [
                "SocketType"
            ],
            "arguments": {
                "data": [
                    "bytes"
                ]
            }
        },
        "from_stdlib_socket": {
            "name": "from_stdlib_socket",
            "location": 460,
            "return": [
                "SocketType"
            ],
            "arguments": {
                "sock": [
                    "_stdlib_socket.socket"
                ]
            }
        },
        "socketpair": {
            "name": "socketpair",
            "location": 461,
            "return": [
                "Tuple[(SocketType, SocketType)]"
            ],
            "arguments": {
                "family": [
                    "int"
                ],
                "type": [
                    "int"
                ],
                "proto": [
                    "int"
                ]
            }
        },
        "socket": {
            "name": "socket",
            "location": 464,
            "return": [
                "SocketType"
            ],
            "arguments": {
                "family": [
                    "int"
                ],
                "type": [
                    "int"
                ],
                "proto": [
                    "int"
                ],
                "fileno": [
                    "Optional[int]"
                ]
            }
        },
        "SocketType.__enter__": {
            "name": "__enter__",
            "location": 399,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [
                    "T"
                ]
            }
        },
        "SocketType.__exit__": {
            "name": "__exit__",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketType.dup": {
            "name": "dup",
            "location": 401,
            "return": [
                "SocketType"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketType.close": {
            "name": "close",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketType.shutdown": {
            "name": "shutdown",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flag": [
                    "int"
                ]
            }
        },
        "SocketType.is_readable": {
            "name": "is_readable",
            "location": 405,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketType.detach": {
            "name": "detach",
            "location": 442,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketType.get_inheritable": {
            "name": "get_inheritable",
            "location": 443,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketType.set_inheritable": {
            "name": "set_inheritable",
            "location": 444,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inheritable": [
                    "bool"
                ]
            }
        },
        "SocketType.fileno": {
            "name": "fileno",
            "location": 445,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketType.getpeername": {
            "name": "getpeername",
            "location": 446,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketType.getsockname": {
            "name": "getsockname",
            "location": 447,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketType.getsockopt": {
            "name": "getsockopt",
            "location": 451,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int"
                ],
                "optname": [
                    "int"
                ],
                "buflen": [
                    "int"
                ]
            }
        },
        "SocketType.setsockopt": {
            "name": "setsockopt",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int"
                ],
                "optname": [
                    "int"
                ],
                "value": [
                    "Union[(int, bytes)]"
                ]
            }
        },
        "SocketType.listen": {
            "name": "listen",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "backlog": [
                    "int"
                ]
            }
        },
        "SocketType.share": {
            "name": "share",
            "location": 456,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "process_id": [
                    "int"
                ]
            }
        }
    },
    "trio-typing-master/trio-stubs/testing.py": {
        "trio_test": {
            "name": "trio_test",
            "location": 18,
            "return": [
                "F"
            ],
            "arguments": {
                "fn": [
                    "F"
                ]
            }
        },
        "assert_checkpoints": {
            "name": "assert_checkpoints",
            "location": 29,
            "return": [
                "ContextManager[None]"
            ],
            "arguments": {}
        },
        "assert_no_checkpoints": {
            "name": "assert_no_checkpoints",
            "location": 30,
            "return": [
                "ContextManager[None]"
            ],
            "arguments": {}
        },
        "memory_stream_pump": {
            "name": "memory_stream_pump",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "memory_send_stream": [
                    "MemorySendStream"
                ],
                "memory_receive_stream": [
                    "MemoryReceiveStream"
                ]
            }
        },
        "memory_stream_one_way_pair": {
            "name": "memory_stream_one_way_pair",
            "location": 80,
            "return": [
                "Tuple[(MemorySendStream, MemoryReceiveStream)]"
            ],
            "arguments": {}
        },
        "memory_stream_pair": {
            "name": "memory_stream_pair",
            "location": 81,
            "return": [
                "Tuple[(trio.StapledStream, trio.StapledStream)]"
            ],
            "arguments": {}
        },
        "lockstep_stream_one_way_pair": {
            "name": "lockstep_stream_one_way_pair",
            "location": 82,
            "return": [
                "Tuple[(MemorySendStream, MemoryReceiveStream)]"
            ],
            "arguments": {}
        },
        "lockstep_stream_pair": {
            "name": "lockstep_stream_pair",
            "location": 83,
            "return": [
                "Tuple[(trio.StapledStream, trio.StapledStream)]"
            ],
            "arguments": {}
        },
        "MockClock.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "rate": [
                    "float"
                ],
                "autojump_threshold": [
                    "float"
                ]
            }
        },
        "MockClock.start_clock": {
            "name": "start_clock",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockClock.current_time": {
            "name": "current_time",
            "location": 25,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockClock.deadline_to_sleep_time": {
            "name": "deadline_to_sleep_time",
            "location": 26,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "deadline": [
                    "float"
                ]
            }
        },
        "MockClock.jump": {
            "name": "jump",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seconds": [
                    "float"
                ]
            }
        },
        "Sequencer.__call__": {
            "name": "__call__",
            "location": 33,
            "return": [
                "AsyncContextManager[None]"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "int"
                ]
            }
        },
        "MemorySendStream.close": {
            "name": "close",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemorySendStream.get_data_nowait": {
            "name": "get_data_nowait",
            "location": 62,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "max_bytes": [
                    "Optional[int]"
                ]
            }
        },
        "MemoryReceiveStream.close": {
            "name": "close",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryReceiveStream.put_data": {
            "name": "put_data",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "MemoryReceiveStream.put_eof": {
            "name": "put_eof",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "trio-typing-master/trio-stubs/to_thread.py": {
        "current_default_thread_limiter": {
            "name": "current_default_thread_limiter",
            "location": 8,
            "return": [
                "trio.CapacityLimiter"
            ],
            "arguments": {}
        }
    },
    "trio-typing-master/trio-stubs/__init__.py": {
        "open_nursery": {
            "name": "open_nursery",
            "location": 163,
            "return": [
                "AsyncContextManager[Nursery]"
            ],
            "arguments": {}
        },
        "current_effective_deadline": {
            "name": "current_effective_deadline",
            "location": 164,
            "return": [
                "float"
            ],
            "arguments": {}
        },
        "current_time": {
            "name": "current_time",
            "location": 165,
            "return": [
                "float"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 167,
            "return": [
                "T"
            ],
            "arguments": {
                "afn": [
                    "Union[(Callable[(..., Awaitable[T])], Callable[([VarArg()], Awaitable[T])])]"
                ]
            }
        },
        "move_on_at": {
            "name": "move_on_at",
            "location": 176,
            "return": [
                "CancelScope"
            ],
            "arguments": {
                "deadline": [
                    "float"
                ]
            }
        },
        "move_on_after": {
            "name": "move_on_after",
            "location": 177,
            "return": [
                "CancelScope"
            ],
            "arguments": {
                "seconds": [
                    "float"
                ]
            }
        },
        "fail_at": {
            "name": "fail_at",
            "location": 181,
            "return": [
                "ContextManager[CancelScope]"
            ],
            "arguments": {
                "deadline": [
                    "float"
                ]
            }
        },
        "fail_after": {
            "name": "fail_after",
            "location": 182,
            "return": [
                "ContextManager[CancelScope]"
            ],
            "arguments": {
                "seconds": [
                    "float"
                ]
            }
        },
        "open_signal_receiver": {
            "name": "open_signal_receiver",
            "location": 291,
            "return": [
                "ContextManager[AsyncIterator[signal.Signals]]"
            ],
            "arguments": {}
        },
        "wrap_file": {
            "name": "wrap_file",
            "location": 456,
            "return": [
                "AsyncIO[Any]"
            ],
            "arguments": {
                "obj": [
                    "Union[(IO[Any], io.IOBase)]"
                ]
            }
        },
        "_Statistics.__getattr__": {
            "name": "__getattr__",
            "location": 49,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "MultiError.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "exceptions": [
                    "Sequence[BaseException]"
                ]
            }
        },
        "MultiError.filter": {
            "name": "filter",
            "location": 89,
            "return": [
                "BaseException"
            ],
            "arguments": {
                "cls": [],
                "handler": [
                    "Callable[([BaseException], Optional[BaseException])]"
                ],
                "root_exc": [
                    "BaseException"
                ]
            }
        },
        "MultiError.catch": {
            "name": "catch",
            "location": 95,
            "return": [
                "ContextManager[None]"
            ],
            "arguments": {
                "cls": [],
                "handler": [
                    "Callable[([BaseException], Optional[BaseException])]"
                ]
            }
        },
        "CancelScope.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CancelScope.__enter__": {
            "name": "__enter__",
            "location": 108,
            "return": [
                "CancelScope"
            ],
            "arguments": {
                "self": []
            }
        },
        "CancelScope.__exit__": {
            "name": "__exit__",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CancelScope.cancel": {
            "name": "cancel",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nursery.child_tasks": {
            "name": "child_tasks",
            "location": 115,
            "return": [
                "FrozenSet[trio.lowlevel.Task]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nursery.parent_task": {
            "name": "parent_task",
            "location": 117,
            "return": [
                "trio.lowlevel.Task"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nursery.start_soon": {
            "name": "start_soon",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "async_fn": [
                    "Union[(Callable[([], Awaitable[Any])], Callable[([Any], Awaitable[Any])], Callable[([Any, Any], Awaitable[Any])], Callable[([Any, Any, Any], Awaitable[Any])], Callable[([Any, Any, Any, Any], Awaitable[Any])], Callable[([VarArg()], Awaitable[Any])])]"
                ]
            }
        },
        "Event.is_set": {
            "name": "is_set",
            "location": 189,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.set": {
            "name": "set",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.statistics": {
            "name": "statistics",
            "location": 192,
            "return": [
                "_Statistics"
            ],
            "arguments": {
                "self": []
            }
        },
        "CapacityLimiter.__init__": {
            "name": "__init__",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "total_tokens": [
                    "float"
                ]
            }
        },
        "CapacityLimiter.acquire_nowait": {
            "name": "acquire_nowait",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CapacityLimiter.acquire_on_behalf_of_nowait": {
            "name": "acquire_on_behalf_of_nowait",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "borrower": [
                    "object"
                ]
            }
        },
        "CapacityLimiter.release": {
            "name": "release",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CapacityLimiter.release_on_behalf_of": {
            "name": "release_on_behalf_of",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "borrower": [
                    "object"
                ]
            }
        },
        "CapacityLimiter.statistics": {
            "name": "statistics",
            "location": 207,
            "return": [
                "_Statistics"
            ],
            "arguments": {
                "self": []
            }
        },
        "Semaphore.__init__": {
            "name": "__init__",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "initial_value": [
                    "int"
                ]
            }
        },
        "Semaphore.acquire_nowait": {
            "name": "acquire_nowait",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Semaphore.release": {
            "name": "release",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Semaphore.statistics": {
            "name": "statistics",
            "location": 218,
            "return": [
                "_Statistics"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lock.locked": {
            "name": "locked",
            "location": 223,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lock.acquire_nowait": {
            "name": "acquire_nowait",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lock.release": {
            "name": "release",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lock.statistics": {
            "name": "statistics",
            "location": 227,
            "return": [
                "_Statistics"
            ],
            "arguments": {
                "self": []
            }
        },
        "Condition.__init__": {
            "name": "__init__",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lock": [
                    "Optional[Lock]"
                ]
            }
        },
        "Condition.locked": {
            "name": "locked",
            "location": 236,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Condition.acquire_nowait": {
            "name": "acquire_nowait",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Condition.release": {
            "name": "release",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Condition.notify": {
            "name": "notify",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "Condition.notify_all": {
            "name": "notify_all",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Condition.statistics": {
            "name": "statistics",
            "location": 243,
            "return": [
                "_Statistics"
            ],
            "arguments": {
                "self": []
            }
        },
        "StapledStream.__init__": {
            "name": "__init__",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "send_stream": [
                    "trio.abc.SendStream"
                ],
                "receive_stream": [
                    "trio.abc.ReceiveStream"
                ]
            }
        },
        "MemorySendChannel.send_nowait": {
            "name": "send_nowait",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T_contra"
                ]
            }
        },
        "MemorySendChannel.clone": {
            "name": "clone",
            "location": 266,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [
                    "T"
                ]
            }
        },
        "MemorySendChannel.statistics": {
            "name": "statistics",
            "location": 268,
            "return": [
                "_Statistics"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemorySendChannel.close": {
            "name": "close",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemorySendChannel.__enter__": {
            "name": "__enter__",
            "location": 270,
            "return": [
                "MemorySendChannel[T_contra]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemorySendChannel.__exit__": {
            "name": "__exit__",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryReceiveChannel.receive_nowait": {
            "name": "receive_nowait",
            "location": 274,
            "return": [
                "T_co"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryReceiveChannel.clone": {
            "name": "clone",
            "location": 276,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [
                    "T"
                ]
            }
        },
        "MemoryReceiveChannel.statistics": {
            "name": "statistics",
            "location": 278,
            "return": [
                "_Statistics"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryReceiveChannel.close": {
            "name": "close",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryReceiveChannel.__enter__": {
            "name": "__enter__",
            "location": 280,
            "return": [
                "MemoryReceiveChannel[T_co]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryReceiveChannel.__exit__": {
            "name": "__exit__",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "open_memory_channel.__new__": {
            "name": "__new__",
            "location": 285,
            "return": [
                "Tuple[(MemorySendChannel[T], MemoryReceiveChannel[T])]"
            ],
            "arguments": {
                "cls": [],
                "max_buffer_size": [
                    "float"
                ]
            }
        },
        "open_memory_channel.__init__": {
            "name": "__init__",
            "location": 288,
            "return": [],
            "arguments": {
                "self": [],
                "max_buffer_size": [
                    "float"
                ]
            }
        },
        "SocketStream.__init__": {
            "name": "__init__",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "socket": [
                    "trio.socket.SocketType"
                ]
            }
        },
        "SocketStream.setsockopt": {
            "name": "setsockopt",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int"
                ],
                "option": [
                    "int"
                ],
                "value": [
                    "Union[(int, bytes)]"
                ]
            }
        },
        "SocketStream.getsockopt": {
            "name": "getsockopt",
            "location": 303,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int"
                ],
                "optname": [
                    "int"
                ],
                "buflen": [
                    "int"
                ]
            }
        },
        "SocketListener.__init__": {
            "name": "__init__",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "socket": [
                    "trio.socket.SocketType"
                ]
            }
        },
        "AsyncIO.fileno": {
            "name": "fileno",
            "location": 329,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncIO.isatty": {
            "name": "isatty",
            "location": 331,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncIO.readable": {
            "name": "readable",
            "location": 333,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncIO.seekable": {
            "name": "seekable",
            "location": 337,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncIO.writable": {
            "name": "writable",
            "location": 340,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncIO.__aiter__": {
            "name": "__aiter__",
            "location": 344,
            "return": [
                "AsyncIterator[AnyStr]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncBufferedFileIO.peek": {
            "name": "peek",
            "location": 368,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "__size": [
                    "int"
                ]
            }
        },
        "SSLStream.__init__": {
            "name": "__init__",
            "location": 634,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport_stream": [
                    "trio.abc.Stream"
                ],
                "ssl_context": [
                    "ssl.SSLContext"
                ]
            }
        },
        "SSLStream.getpeercert": {
            "name": "getpeercert",
            "location": 643,
            "return": [
                "ssl._PeerCertRetType"
            ],
            "arguments": {
                "self": [],
                "binary_form": [
                    "bool"
                ]
            }
        },
        "SSLStream.selected_npn_protocol": {
            "name": "selected_npn_protocol",
            "location": 644,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSLStream.selected_alpn_protocol": {
            "name": "selected_alpn_protocol",
            "location": 645,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSLStream.cipher": {
            "name": "cipher",
            "location": 646,
            "return": [
                "Tuple[(str, int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSLStream.shared_ciphers": {
            "name": "shared_ciphers",
            "location": 647,
            "return": [
                "Optional[List[Tuple[(str, int, int)]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSLStream.compression": {
            "name": "compression",
            "location": 648,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSLStream.pending": {
            "name": "pending",
            "location": 649,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSLStream.get_channel_binding": {
            "name": "get_channel_binding",
            "location": 650,
            "return": [
                "Optional[bytes]"
            ],
            "arguments": {
                "self": [],
                "cb_type": [
                    "str"
                ]
            }
        },
        "SSLListener.__init__": {
            "name": "__init__",
            "location": 660,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport_listener": [
                    "trio.abc.Listener[trio.abc.Stream]"
                ],
                "ssl_context": [
                    "ssl.SSLContext"
                ]
            }
        },
        "_HasFileno.fileno": {
            "name": "fileno",
            "location": 673,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Process.returncode": {
            "name": "returncode",
            "location": 685,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Process.poll": {
            "name": "poll",
            "location": 688,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Process.send_signal": {
            "name": "send_signal",
            "location": 689,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sig": [
                    "signal.Signals"
                ]
            }
        },
        "Process.terminate": {
            "name": "terminate",
            "location": 690,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Process.kill": {
            "name": "kill",
            "location": 691,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSLStream.session": {
            "name": "session",
            "location": 630,
            "return": [
                "Optional[ssl.SSLSession]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSLStream.session_reused": {
            "name": "session_reused",
            "location": 632,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "trio-typing-master/trio_typing/plugin.py": {
        "args_invariant_decorator_callback": {
            "name": "args_invariant_decorator_callback",
            "location": 62,
            "return": [
                "Type"
            ],
            "arguments": {
                "ctx": [
                    "FunctionContext"
                ]
            }
        },
        "decode_agen_types_from_return_type": {
            "name": "decode_agen_types_from_return_type",
            "location": 82,
            "return": [
                "Tuple[(Type, Type, Type)]"
            ],
            "arguments": {
                "ctx": [
                    "FunctionContext"
                ],
                "original_async_return_type": [
                    "Type"
                ]
            }
        },
        "async_generator_callback": {
            "name": "async_generator_callback",
            "location": 168,
            "return": [
                "Type"
            ],
            "arguments": {
                "ctx": [
                    "FunctionContext"
                ]
            }
        },
        "decode_enclosing_agen_types": {
            "name": "decode_enclosing_agen_types",
            "location": 207,
            "return": [
                "Tuple[(Type, Type)]"
            ],
            "arguments": {
                "ctx": [
                    "FunctionContext"
                ]
            }
        },
        "yield_callback": {
            "name": "yield_callback",
            "location": 249,
            "return": [
                "Type"
            ],
            "arguments": {
                "ctx": [
                    "FunctionContext"
                ]
            }
        },
        "yield_from_callback": {
            "name": "yield_from_callback",
            "location": 275,
            "return": [
                "Type"
            ],
            "arguments": {
                "ctx": [
                    "FunctionContext"
                ]
            }
        },
        "started_callback": {
            "name": "started_callback",
            "location": 326,
            "return": [
                "Type"
            ],
            "arguments": {
                "ctx": [
                    "MethodContext"
                ]
            }
        },
        "takes_callable_and_args_callback": {
            "name": "takes_callable_and_args_callback",
            "location": 345,
            "return": [
                "Type"
            ],
            "arguments": {
                "ctx": [
                    "FunctionContext"
                ]
            }
        },
        "plugin": {
            "name": "plugin",
            "location": 514,
            "return": [
                "typing_Type[Plugin]"
            ],
            "arguments": {
                "version": [
                    "str"
                ]
            }
        },
        "TrioPlugin.get_function_hook": {
            "name": "get_function_hook",
            "location": 36,
            "return": [
                "Optional[Callable[([FunctionContext], Type)]]"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ]
            }
        },
        "TrioPlugin.get_method_hook": {
            "name": "get_method_hook",
            "location": 54,
            "return": [
                "Optional[Callable[([MethodContext], Type)]]"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ]
            }
        }
    },
    "trio-typing-master/trio_typing/_version.py": {},
    "trio-typing-master/trio_typing/__init__.py": {
        "takes_callable_and_args": {
            "name": "takes_callable_and_args",
            "location": 26,
            "return": [],
            "arguments": {
                "fn": []
            }
        }
    },
    "trio-typing-master/trio_typing/_tests/datadriven.py": {
        "ConfigModule.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PatchedNodeMeta.__call__": {
            "name": "__call__",
            "location": 30,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "trio-typing-master/trio_typing/_tests/test_runtime.py": {
        "test_runtime": {
            "name": "test_runtime",
            "location": 19,
            "return": [],
            "arguments": {}
        }
    },
    "trio-typing-master/trio_typing/_tests/test_typecheck.py": {
        "test_typecheck_dummy": {
            "name": "test_typecheck_dummy",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "TrioTestSuite.run_case": {
            "name": "run_case",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "testcase": [
                    "DataDrivenTestCase"
                ]
            }
        }
    },
    "trio-typing-master/trio_typing/_tests/__init__.py": {}
}
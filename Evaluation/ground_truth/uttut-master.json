{
    "conftest.py": {
        "data_folder": {
            "name": "data_folder",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "get_data_path": {
            "name": "get_data_path",
            "location": 13,
            "return": [],
            "arguments": {
                "data_folder": []
            }
        },
        "get_data_path.foo": {
            "name": "foo",
            "location": 14,
            "return": [],
            "arguments": {
                "file_name": []
            }
        }
    },
    "setup.py": {},
    "uttut/entity_overlapping_ratio.py": {
        "check_utter_index_in_entity": {
            "name": "check_utter_index_in_entity",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "utter_ind": [
                    "int"
                ],
                "entity": [
                    "Entity"
                ],
                "ent_list": [
                    "list"
                ]
            }
        },
        "expand_entity_to_list": {
            "name": "expand_entity_to_list",
            "location": 22,
            "return": [
                "list"
            ],
            "arguments": {
                "datum": [
                    "Datum"
                ]
            }
        },
        "penalty_on_same_entity_or_not": {
            "name": "penalty_on_same_entity_or_not",
            "location": 45,
            "return": [
                "float"
            ],
            "arguments": {
                "ent1": [
                    "int"
                ],
                "ent2": [
                    "int"
                ],
                "wrong_penalty_rate": [
                    "float"
                ]
            }
        },
        "entity_overlapping_ratio": {
            "name": "entity_overlapping_ratio",
            "location": 59,
            "return": [
                "float"
            ],
            "arguments": {
                "datum1": [
                    "Datum"
                ],
                "datum2": [
                    "Datum"
                ],
                "wrong_penalty_rate": [
                    "float"
                ]
            }
        }
    },
    "uttut/exceptions.py": {},
    "uttut/get_unique_entities.py": {
        "get_unique_entities": {
            "name": "get_unique_entities",
            "location": 6,
            "return": [
                "List"
            ],
            "arguments": {
                "data": [
                    "List[Datum]"
                ]
            }
        }
    },
    "uttut/utils.py": {
        "entity_position_correct": {
            "name": "entity_position_correct",
            "location": 1,
            "return": [
                "bool"
            ],
            "arguments": {
                "utterance": [
                    "str"
                ],
                "entity": []
            }
        },
        "overlap": {
            "name": "overlap",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "entity": [],
                "next_entity": []
            }
        },
        "msg_entity_wrong_position": {
            "name": "msg_entity_wrong_position",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "utterance": [
                    "str"
                ],
                "entity": []
            }
        },
        "msg_entity_overlapping": {
            "name": "msg_entity_overlapping",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "utterance": [
                    "str"
                ],
                "entity": [],
                "next_entity": []
            }
        }
    },
    "uttut/__init__.py": {},
    "uttut/__version__.py": {},
    "uttut/pipeline/intermediate.py": {
        "Intermediate.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "checkpoints": [
                    "Dict[(str, int)]"
                ]
            }
        },
        "Intermediate.add": {
            "name": "add",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "intermediate": []
            }
        },
        "Intermediate.get_from_checkpoint": {
            "name": "get_from_checkpoint",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Intermediate.__getitem__": {
            "name": "__getitem__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        }
    },
    "uttut/pipeline/pipe.py": {
        "Pipe.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pipe.add": {
            "name": "add",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "op_name": [
                    "str"
                ],
                "op_kwargs": [
                    "Dict"
                ],
                "checkpoint": [
                    "str"
                ]
            }
        },
        "Pipe.add_op": {
            "name": "add_op",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "op": [
                    "Operator"
                ],
                "checkpoint": [
                    "str"
                ]
            }
        },
        "Pipe.__eq__": {
            "name": "__eq__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Pipe.__add__": {
            "name": "__add__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Pipe.__iadd__": {
            "name": "__iadd__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Pipe.__copy__": {
            "name": "__copy__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pipe.__getitem__": {
            "name": "__getitem__",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Pipe.__len__": {
            "name": "__len__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pipe.steps": {
            "name": "steps",
            "location": 126,
            "return": [
                "List[Operator]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipe.checkpoints": {
            "name": "checkpoints",
            "location": 130,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipe.input_type": {
            "name": "input_type",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pipe.output_type": {
            "name": "output_type",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pipe.summary": {
            "name": "summary",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pipe.transform": {
            "name": "transform",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "datum": [
                    "Datum"
                ]
            }
        },
        "Pipe.transform_sequence": {
            "name": "transform_sequence",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "input_sequence": []
            }
        },
        "Pipe.serialize": {
            "name": "serialize",
            "location": 226,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipe.deserialize": {
            "name": "deserialize",
            "location": 237,
            "return": [
                "'Pipe'"
            ],
            "arguments": {
                "cls": [],
                "serialized_str": [
                    "str"
                ]
            }
        },
        "LabelAlignerSequence.__init__": {
            "name": "__init__",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LabelAlignerSequence.add": {
            "name": "add",
            "location": 261,
            "return": [],
            "arguments": {
                "self": [],
                "label_aligner": [
                    "LabelAligner"
                ]
            }
        },
        "LabelAlignerSequence.transform": {
            "name": "transform",
            "location": 270,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ]
            }
        },
        "LabelAlignerSequence.inverse_transform": {
            "name": "inverse_transform",
            "location": 285,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ]
            }
        }
    },
    "uttut/pipeline/utils.py": {
        "unpack_datum": {
            "name": "unpack_datum",
            "location": 7,
            "return": [
                "Tuple[(str, List[int], List[int])]"
            ],
            "arguments": {
                "datum": [
                    "Datum"
                ]
            }
        },
        "pack_to_datum": {
            "name": "pack_to_datum",
            "location": 25,
            "return": [
                "Datum"
            ],
            "arguments": {
                "utterance": [
                    "str"
                ],
                "intent_labels": [
                    "List[int]"
                ],
                "entity_labels": [
                    "List[int]"
                ]
            }
        },
        "_get_meaningful_start_indices": {
            "name": "_get_meaningful_start_indices",
            "location": 51,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "labels": [
                    "List[int]"
                ]
            }
        },
        "_get_start_indices": {
            "name": "_get_start_indices",
            "location": 61,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "labels": [
                    "List[int]"
                ]
            }
        }
    },
    "uttut/pipeline/__init__.py": {},
    "uttut/pipeline/bert/basic.py": {},
    "uttut/pipeline/bert/full.py": {},
    "uttut/pipeline/bert/word_piece.py": {},
    "uttut/pipeline/bert/__init__.py": {},
    "uttut/pipeline/bert/tests/test_basic.py": {
        "tokenizer": {
            "name": "tokenizer",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "test_all": {
            "name": "test_all",
            "location": 35,
            "return": [],
            "arguments": {
                "input_str": [],
                "tokenizer": []
            }
        }
    },
    "uttut/pipeline/bert/tests/test_full.py": {
        "tokenizer": {
            "name": "tokenizer",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_all": {
            "name": "test_all",
            "location": 37,
            "return": [],
            "arguments": {
                "input_str": [],
                "tokenizer": []
            }
        }
    },
    "uttut/pipeline/bert/tests/test_word_piece.py": {
        "tokenizer": {
            "name": "tokenizer",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_all": {
            "name": "test_all",
            "location": 27,
            "return": [],
            "arguments": {
                "input_str": [],
                "tokenizer": []
            }
        }
    },
    "uttut/pipeline/bert/tests/tokenization.py": {
        "validate_case_matches_checkpoint": {
            "name": "validate_case_matches_checkpoint",
            "location": 28,
            "return": [],
            "arguments": {
                "do_lower_case": [],
                "init_checkpoint": []
            }
        },
        "convert_to_unicode": {
            "name": "convert_to_unicode",
            "location": 78,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "printable_text": {
            "name": "printable_text",
            "location": 98,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "load_vocab": {
            "name": "load_vocab",
            "location": 121,
            "return": [],
            "arguments": {
                "vocab_file": []
            }
        },
        "convert_by_vocab": {
            "name": "convert_by_vocab",
            "location": 137,
            "return": [],
            "arguments": {
                "vocab": [],
                "items": []
            }
        },
        "convert_tokens_to_ids": {
            "name": "convert_tokens_to_ids",
            "location": 145,
            "return": [],
            "arguments": {
                "vocab": [],
                "tokens": []
            }
        },
        "convert_ids_to_tokens": {
            "name": "convert_ids_to_tokens",
            "location": 149,
            "return": [],
            "arguments": {
                "inv_vocab": [],
                "ids": []
            }
        },
        "whitespace_tokenize": {
            "name": "whitespace_tokenize",
            "location": 153,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "_is_whitespace": {
            "name": "_is_whitespace",
            "location": 363,
            "return": [],
            "arguments": {
                "char": []
            }
        },
        "_is_control": {
            "name": "_is_control",
            "location": 375,
            "return": [],
            "arguments": {
                "char": []
            }
        },
        "_is_punctuation": {
            "name": "_is_punctuation",
            "location": 387,
            "return": [],
            "arguments": {
                "char": []
            }
        },
        "FullTokenizer.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "vocab_file": [],
                "do_lower_case": []
            }
        },
        "FullTokenizer.tokenize": {
            "name": "tokenize",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "FullTokenizer.convert_tokens_to_ids": {
            "name": "convert_tokens_to_ids",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": []
            }
        },
        "FullTokenizer.convert_ids_to_tokens": {
            "name": "convert_ids_to_tokens",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "ids": []
            }
        },
        "BasicTokenizer.__init__": {
            "name": "__init__",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "do_lower_case": []
            }
        },
        "BasicTokenizer.tokenize": {
            "name": "tokenize",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "BasicTokenizer._run_strip_accents": {
            "name": "_run_strip_accents",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "BasicTokenizer._run_split_on_punc": {
            "name": "_run_split_on_punc",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "BasicTokenizer._tokenize_chinese_chars": {
            "name": "_tokenize_chinese_chars",
            "location": 252,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "BasicTokenizer._is_chinese_char": {
            "name": "_is_chinese_char",
            "location": 265,
            "return": [],
            "arguments": {
                "self": [],
                "cp": []
            }
        },
        "BasicTokenizer._clean_text": {
            "name": "_clean_text",
            "location": 287,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "WordpieceTokenizer.__init__": {
            "name": "__init__",
            "location": 304,
            "return": [],
            "arguments": {
                "self": [],
                "vocab": [],
                "unk_token": [],
                "max_input_chars_per_word": []
            }
        },
        "WordpieceTokenizer.tokenize": {
            "name": "tokenize",
            "location": 309,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        }
    },
    "uttut/pipeline/bert/tests/__init__.py": {},
    "uttut/pipeline/edit/lst2lst.py": {
        "apply": {
            "name": "apply",
            "location": 8,
            "return": [
                "list"
            ],
            "arguments": {
                "input_lst": [
                    "list"
                ],
                "replacement_group": [
                    "ReplacementGroup"
                ]
            }
        },
        "inverse": {
            "name": "inverse",
            "location": 20,
            "return": [
                "ReplacementGroup"
            ],
            "arguments": {
                "input_lst": [
                    "list"
                ],
                "replacement_group": [
                    "ReplacementGroup"
                ]
            }
        }
    },
    "uttut/pipeline/edit/lst2str.py": {
        "apply": {
            "name": "apply",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "input_lst": [
                    "List[str]"
                ],
                "span_group": [
                    "SpanGroup"
                ]
            }
        },
        "_validate_compatibility": {
            "name": "_validate_compatibility",
            "location": 16,
            "return": [],
            "arguments": {
                "input_lst": [
                    "List[str]"
                ],
                "span_group": [
                    "SpanGroup"
                ]
            }
        }
    },
    "uttut/pipeline/edit/str2lst.py": {
        "apply": {
            "name": "apply",
            "location": 7,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "input_str": [
                    "str"
                ],
                "span_group": [
                    "SpanGroup"
                ]
            }
        },
        "_validate_compatibility": {
            "name": "_validate_compatibility",
            "location": 18,
            "return": [],
            "arguments": {
                "input_str": [
                    "str"
                ],
                "span_group": [
                    "SpanGroup"
                ]
            }
        },
        "gen_span_group": {
            "name": "gen_span_group",
            "location": 23,
            "return": [
                "SpanGroup"
            ],
            "arguments": {
                "input_str": [
                    "str"
                ],
                "tokens": [
                    "List[str]"
                ]
            }
        },
        "gen_replacement_group": {
            "name": "gen_replacement_group",
            "location": 41,
            "return": [
                "ReplacementGroup"
            ],
            "arguments": {
                "input_str": [
                    "str"
                ],
                "tokens": [
                    "List[str]"
                ]
            }
        }
    },
    "uttut/pipeline/edit/str2str.py": {
        "apply": {
            "name": "apply",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "input_str": [
                    "str"
                ],
                "replacement_group": [
                    "ReplacementGroup"
                ]
            }
        },
        "inverse": {
            "name": "inverse",
            "location": 20,
            "return": [
                "ReplacementGroup"
            ],
            "arguments": {
                "input_str": [
                    "str"
                ],
                "replacement_group": [
                    "ReplacementGroup"
                ]
            }
        }
    },
    "uttut/pipeline/edit/__init__.py": {},
    "uttut/pipeline/edit/tests/test_label_propagation.py": {
        "test_forward_propagate_by_replacement_group": {
            "name": "test_forward_propagate_by_replacement_group",
            "location": 68,
            "return": [],
            "arguments": {
                "input_label": [],
                "forward_replacements": [],
                "output_label": [],
                "inverse_replacements": []
            }
        },
        "test_backward_propagate_by_replacement_group": {
            "name": "test_backward_propagate_by_replacement_group",
            "location": 78,
            "return": [],
            "arguments": {
                "input_label": [],
                "forward_replacements": [],
                "output_label": [],
                "inverse_replacements": []
            }
        },
        "test_not_invertible": {
            "name": "test_not_invertible",
            "location": 88,
            "return": [],
            "arguments": {
                "input_label": [],
                "forward_replacements": [],
                "output_label": [],
                "inverse_replacements": []
            }
        },
        "test_propagate_by_span_group": {
            "name": "test_propagate_by_span_group",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "test_span_group_not_competible": {
            "name": "test_span_group_not_competible",
            "location": 118,
            "return": [],
            "arguments": {
                "labels": [],
                "func": [],
                "spans": []
            }
        },
        "test_different_transduce_func": {
            "name": "test_different_transduce_func",
            "location": 138,
            "return": [],
            "arguments": {
                "by": [],
                "group": []
            }
        },
        "test_intersection_case_of_span_propagation": {
            "name": "test_intersection_case_of_span_propagation",
            "location": 144,
            "return": [],
            "arguments": {}
        },
        "test_different_transduce_func.zero_transduce": {
            "name": "zero_transduce",
            "location": 139,
            "return": [],
            "arguments": {
                "x": [],
                "output_size": []
            }
        }
    },
    "uttut/pipeline/edit/tests/test_lst2lst.py": {
        "test_forward_apply": {
            "name": "test_forward_apply",
            "location": 45,
            "return": [],
            "arguments": {
                "input_lst": [],
                "forward_replacements": [],
                "output_lst": [],
                "inverse_replacements": []
            }
        },
        "test_backward_apply": {
            "name": "test_backward_apply",
            "location": 54,
            "return": [],
            "arguments": {
                "input_lst": [],
                "forward_replacements": [],
                "output_lst": [],
                "inverse_replacements": []
            }
        },
        "test_forward_inverse": {
            "name": "test_forward_inverse",
            "location": 63,
            "return": [],
            "arguments": {
                "input_lst": [],
                "forward_replacements": [],
                "output_lst": [],
                "inverse_replacements": []
            }
        },
        "test_backward_inverse": {
            "name": "test_backward_inverse",
            "location": 72,
            "return": [],
            "arguments": {
                "input_lst": [],
                "forward_replacements": [],
                "output_lst": [],
                "inverse_replacements": []
            }
        }
    },
    "uttut/pipeline/edit/tests/test_replacement.py": {
        "test_correctly_init": {
            "name": "test_correctly_init",
            "location": 15,
            "return": [],
            "arguments": {
                "input_tuple": []
            }
        },
        "test_equal": {
            "name": "test_equal",
            "location": 40,
            "return": [],
            "arguments": {
                "obj1": [],
                "obj2": []
            }
        },
        "test_not_equal": {
            "name": "test_not_equal",
            "location": 53,
            "return": [],
            "arguments": {
                "obj1": [],
                "obj2": []
            }
        },
        "test_str": {
            "name": "test_str",
            "location": 67,
            "return": [],
            "arguments": {
                "input_tuple": [],
                "expected": []
            }
        },
        "test_representation": {
            "name": "test_representation",
            "location": 95,
            "return": [],
            "arguments": {
                "input_tuple": [],
                "expected": []
            }
        }
    },
    "uttut/pipeline/edit/tests/test_replacement_group.py": {
        "test_correctly_init": {
            "name": "test_correctly_init",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_add_all": {
            "name": "test_add_all",
            "location": 24,
            "return": [],
            "arguments": {
                "objs": []
            }
        },
        "test_add_all_empty": {
            "name": "test_add_all_empty",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "test_not_done_warning": {
            "name": "test_not_done_warning",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "test_not_done_error": {
            "name": "test_not_done_error",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_add_fails": {
            "name": "test_add_fails",
            "location": 57,
            "return": [],
            "arguments": {
                "obj": [],
                "error_type": []
            }
        },
        "test_equal": {
            "name": "test_equal",
            "location": 72,
            "return": [],
            "arguments": {
                "input1": [],
                "input2": []
            }
        },
        "test_not_equal": {
            "name": "test_not_equal",
            "location": 89,
            "return": [],
            "arguments": {
                "input1": [],
                "input2": []
            }
        },
        "test_different_type": {
            "name": "test_different_type",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "test_need_sorted": {
            "name": "test_need_sorted",
            "location": 106,
            "return": [],
            "arguments": {
                "objs": [],
                "expected_objs": []
            }
        },
        "test_validate_disjoint": {
            "name": "test_validate_disjoint",
            "location": 118,
            "return": [],
            "arguments": {
                "objs": []
            }
        },
        "test_representation": {
            "name": "test_representation",
            "location": 130,
            "return": [],
            "arguments": {
                "representation": [],
                "input_lst": []
            }
        }
    },
    "uttut/pipeline/edit/tests/test_span.py": {
        "test_normal": {
            "name": "test_normal",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test_all_equal": {
            "name": "test_all_equal",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_different_type": {
            "name": "test_different_type",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "test_different_start": {
            "name": "test_different_start",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_different_end": {
            "name": "test_different_end",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "test_str": {
            "name": "test_str",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 33,
            "return": [],
            "arguments": {}
        }
    },
    "uttut/pipeline/edit/tests/test_span_group.py": {
        "test_correctly_init": {
            "name": "test_correctly_init",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_span_group_should_be_contiguous": {
            "name": "test_span_group_should_be_contiguous",
            "location": 20,
            "return": [],
            "arguments": {
                "spans": []
            }
        },
        "test_add_all": {
            "name": "test_add_all",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "test_add_all_empty": {
            "name": "test_add_all_empty",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "test_not_done_warning": {
            "name": "test_not_done_warning",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "test_not_done_error": {
            "name": "test_not_done_error",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "test_add_fails": {
            "name": "test_add_fails",
            "location": 57,
            "return": [],
            "arguments": {
                "obj": [],
                "error_type": []
            }
        },
        "test_equal": {
            "name": "test_equal",
            "location": 70,
            "return": [],
            "arguments": {
                "group1": [],
                "group2": []
            }
        },
        "test_not_equal": {
            "name": "test_not_equal",
            "location": 84,
            "return": [],
            "arguments": {
                "group1": [],
                "group2": []
            }
        },
        "test_need_sorted": {
            "name": "test_need_sorted",
            "location": 94,
            "return": [],
            "arguments": {
                "objs": [],
                "expected_objs": []
            }
        },
        "test_validate_disjoint": {
            "name": "test_validate_disjoint",
            "location": 106,
            "return": [],
            "arguments": {
                "objs": []
            }
        },
        "test_representation": {
            "name": "test_representation",
            "location": 117,
            "return": [],
            "arguments": {
                "name": [],
                "group": []
            }
        }
    },
    "uttut/pipeline/edit/tests/test_str2lst.py": {
        "test_forward_apply": {
            "name": "test_forward_apply",
            "location": 42,
            "return": [],
            "arguments": {
                "input_str": [],
                "tokens": [],
                "span_group": []
            }
        },
        "test_backward_apply": {
            "name": "test_backward_apply",
            "location": 48,
            "return": [],
            "arguments": {
                "input_str": [],
                "tokens": [],
                "span_group": []
            }
        },
        "test_incompatible_str2lst": {
            "name": "test_incompatible_str2lst",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "test_incompatible_lst2str": {
            "name": "test_incompatible_lst2str",
            "location": 66,
            "return": [],
            "arguments": {
                "input_lst": [],
                "span_group": []
            }
        },
        "test_gen_span_group": {
            "name": "test_gen_span_group",
            "location": 72,
            "return": [],
            "arguments": {
                "input_str": [],
                "tokens": [],
                "span_group": []
            }
        },
        "test_gen_span_group_fail": {
            "name": "test_gen_span_group_fail",
            "location": 85,
            "return": [],
            "arguments": {
                "input_str": [],
                "tokens": []
            }
        },
        "test_gen_replacement_group": {
            "name": "test_gen_replacement_group",
            "location": 119,
            "return": [],
            "arguments": {
                "input_str": [],
                "tokens": [],
                "replacement_group": []
            }
        },
        "test_gen_replacement_group_fail": {
            "name": "test_gen_replacement_group_fail",
            "location": 132,
            "return": [],
            "arguments": {
                "input_str": [],
                "tokens": []
            }
        }
    },
    "uttut/pipeline/edit/tests/test_str2str.py": {
        "test_forward_apply": {
            "name": "test_forward_apply",
            "location": 45,
            "return": [],
            "arguments": {
                "input_str": [],
                "forward_replacements": [],
                "output_str": [],
                "inverse_replacements": []
            }
        },
        "test_backward_apply": {
            "name": "test_backward_apply",
            "location": 54,
            "return": [],
            "arguments": {
                "input_str": [],
                "forward_replacements": [],
                "output_str": [],
                "inverse_replacements": []
            }
        },
        "test_forward_inverse": {
            "name": "test_forward_inverse",
            "location": 63,
            "return": [],
            "arguments": {
                "input_str": [],
                "forward_replacements": [],
                "output_str": [],
                "inverse_replacements": []
            }
        },
        "test_backward_inverse": {
            "name": "test_backward_inverse",
            "location": 72,
            "return": [],
            "arguments": {
                "input_str": [],
                "forward_replacements": [],
                "output_str": [],
                "inverse_replacements": []
            }
        }
    },
    "uttut/pipeline/edit/tests/test_validate_start_end.py": {
        "test_normal": {
            "name": "test_normal",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_end_smaller_than_start": {
            "name": "test_end_smaller_than_start",
            "location": 10,
            "return": [],
            "arguments": {}
        }
    },
    "uttut/pipeline/edit/tests/__init__.py": {},
    "uttut/pipeline/ops/add_end_token.py": {
        "AddEndToken.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "end_token": [
                    "str"
                ]
            }
        },
        "AddEndToken._validate_end_token": {
            "name": "_validate_end_token",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "end_token": [
                    "str"
                ]
            }
        },
        "AddEndToken._transform": {
            "name": "_transform",
            "location": 48,
            "return": [
                "Tuple[(List[str], 'LabelAligner')]"
            ],
            "arguments": {
                "self": [],
                "input_sequence": [
                    "List[str]"
                ]
            }
        },
        "AddEndToken._gen_forward_replacement_group": {
            "name": "_gen_forward_replacement_group",
            "location": 59,
            "return": [
                "ReplacementGroup"
            ],
            "arguments": {
                "self": [],
                "input_lst": [
                    "List[str]"
                ]
            }
        }
    },
    "uttut/pipeline/ops/add_sos_eos.py": {
        "AddSosEos.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "start_token": [
                    "str"
                ],
                "end_token": [
                    "str"
                ]
            }
        },
        "AddSosEos._transform": {
            "name": "_transform",
            "location": 42,
            "return": [
                "Tuple[(List[str], 'LabelAligner')]"
            ],
            "arguments": {
                "self": [],
                "input_sequence": [
                    "List[str]"
                ]
            }
        },
        "AddSosEos._gen_forward_replacement_group": {
            "name": "_gen_forward_replacement_group",
            "location": 53,
            "return": [
                "ReplacementGroup"
            ],
            "arguments": {
                "self": [],
                "input_lst": [
                    "List[str]"
                ],
                "annotation": [
                    "str"
                ]
            }
        },
        "AddSosEosAligner._transform": {
            "name": "_transform",
            "location": 71,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ]
            }
        },
        "AddSosEosAligner._forward_transduce_func": {
            "name": "_forward_transduce_func",
            "location": 78,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        },
        "AddSosEosAligner._inverse_transform": {
            "name": "_inverse_transform",
            "location": 81,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ]
            }
        },
        "AddSosEosAligner._backward_transduce_func": {
            "name": "_backward_transduce_func",
            "location": 89,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        }
    },
    "uttut/pipeline/ops/add_whitespace_around_character.py": {
        "AddWhitespaceAroundCharacter._transform": {
            "name": "_transform",
            "location": 21,
            "return": [
                "Tuple[(str, 'LabelAligner')]"
            ],
            "arguments": {
                "self": [],
                "input_sequence": [
                    "str"
                ]
            }
        },
        "AddWhitespaceAroundCharacter._gen_forward_replacement_group": {
            "name": "_gen_forward_replacement_group",
            "location": 32,
            "return": [
                "ReplacementGroup"
            ],
            "arguments": {
                "self": [],
                "input_str": [
                    "str"
                ]
            }
        },
        "AddWhitespaceAroundCharacter._is_valid_char": {
            "name": "_is_valid_char",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "char": [
                    "str"
                ]
            }
        },
        "AddWhitespaceAroundCharAligner._transform": {
            "name": "_transform",
            "location": 53,
            "return": [
                "ReplacementGroup"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ]
            }
        },
        "AddWhitespaceAroundCharAligner._forward_transduce_func": {
            "name": "_forward_transduce_func",
            "location": 60,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        },
        "AddWhitespaceAroundCharAligner._inverse_transform": {
            "name": "_inverse_transform",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "labels": []
            }
        },
        "AddWhitespaceAroundCharAligner._backward_transduce_func": {
            "name": "_backward_transduce_func",
            "location": 72,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        }
    },
    "uttut/pipeline/ops/add_whitespace_around_cjk.py": {
        "AddWhitespaceAroundCJK._is_valid_char": {
            "name": "_is_valid_char",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "char": [
                    "str"
                ]
            }
        }
    },
    "uttut/pipeline/ops/add_whitespace_around_punctuation.py": {
        "is_punctuation": {
            "name": "is_punctuation",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "char": [
                    "str"
                ]
            }
        },
        "AddWhitespaceAroundPunctuation._is_valid_char": {
            "name": "_is_valid_char",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "char": [
                    "str"
                ]
            }
        }
    },
    "uttut/pipeline/ops/add_whitespace_around_word_n_zhchar.py": {
        "AddWhitespaceAroundWordnZhChar.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "user_words": [
                    "List[str]"
                ],
                "shortest": [
                    "bool"
                ]
            }
        },
        "AddWhitespaceAroundWordnZhChar.validate_user_words": {
            "name": "validate_user_words",
            "location": 56,
            "return": [],
            "arguments": {
                "user_words": []
            }
        },
        "AddWhitespaceAroundWordnZhChar._transform": {
            "name": "_transform",
            "location": 60,
            "return": [
                "Tuple[(str, 'LabelAligner')]"
            ],
            "arguments": {
                "self": [],
                "input_sequence": [
                    "str"
                ]
            }
        },
        "AddWhitespaceAroundWordnZhChar._gen_forward_replacement_group": {
            "name": "_gen_forward_replacement_group",
            "location": 71,
            "return": [
                "ReplacementGroup"
            ],
            "arguments": {
                "self": [],
                "input_str": [
                    "str"
                ]
            }
        },
        "AddWhitespaceAroundWordnZhChar._is_valid_char": {
            "name": "_is_valid_char",
            "location": 103,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "char": [
                    "str"
                ]
            }
        },
        "AddWhitespaceAroundWordAligner._transform": {
            "name": "_transform",
            "location": 136,
            "return": [
                "ReplacementGroup"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ]
            }
        },
        "AddWhitespaceAroundWordAligner._forward_transduce_func": {
            "name": "_forward_transduce_func",
            "location": 143,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        },
        "AddWhitespaceAroundWordAligner._inverse_transform": {
            "name": "_inverse_transform",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "labels": []
            }
        },
        "AddWhitespaceAroundWordAligner._backward_transduce_func": {
            "name": "_backward_transduce_func",
            "location": 157,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        }
    },
    "uttut/pipeline/ops/base.py": {
        "Serializable.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 16,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Serializable.is_abstract": {
            "name": "is_abstract",
            "location": 48,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Serializable.deserialize": {
            "name": "deserialize",
            "location": 52,
            "return": [],
            "arguments": {
                "cls": [],
                "serialized_str": [
                    "str"
                ]
            }
        },
        "Serializable.from_dict": {
            "name": "from_dict",
            "location": 57,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        },
        "Serializable.serialize": {
            "name": "serialize",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serializable.configs": {
            "name": "configs",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Operator.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 93,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Operator.assert_has_class_attributes": {
            "name": "assert_has_class_attributes",
            "location": 101,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Operator.input_type": {
            "name": "input_type",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Operator.output_type": {
            "name": "output_type",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Operator.transform": {
            "name": "transform",
            "location": 114,
            "return": [
                "Tuple[(Any, 'LabelAligner')]"
            ],
            "arguments": {
                "self": [],
                "input_sequence": []
            }
        },
        "Operator._transform": {
            "name": "_transform",
            "location": 140,
            "return": [
                "Tuple[(Any, 'LabelAligner')]"
            ],
            "arguments": {
                "self": [],
                "input_sequence": []
            }
        },
        "Operator.__eq__": {
            "name": "__eq__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Operator.__str__": {
            "name": "__str__",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LabelAligner.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "input_sequence": [],
                "edit": [],
                "output_length": [
                    "int"
                ]
            }
        },
        "LabelAligner.transform": {
            "name": "transform",
            "location": 184,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ]
            }
        },
        "LabelAligner.inverse_transform": {
            "name": "inverse_transform",
            "location": 202,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ]
            }
        },
        "LabelAligner._validate_input": {
            "name": "_validate_input",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ]
            }
        },
        "LabelAligner._validate_output": {
            "name": "_validate_output",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ]
            }
        },
        "LabelAligner._transform": {
            "name": "_transform",
            "location": 229,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ]
            }
        },
        "LabelAligner._inverse_transform": {
            "name": "_inverse_transform",
            "location": 233,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ]
            }
        },
        "NullLabelAligner._transform": {
            "name": "_transform",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ]
            }
        },
        "NullLabelAligner._inverse_transform": {
            "name": "_inverse_transform",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "labels": []
            }
        },
        "Serializable.__init_subclass__.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Operator.__str__.custom_repr": {
            "name": "custom_repr",
            "location": 148,
            "return": [],
            "arguments": {
                "x": [],
                "maxdict": [
                    "int"
                ]
            }
        }
    },
    "uttut/pipeline/ops/factory.py": {
        "OperatorFactory.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OperatorFactory.register": {
            "name": "register",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "op_class": []
            }
        },
        "OperatorFactory.__getitem__": {
            "name": "__getitem__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "op_name": []
            }
        },
        "OperatorFactory.__eq__": {
            "name": "__eq__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "uttut/pipeline/ops/label_transducer.py": {
        "get_most_common": {
            "name": "get_most_common",
            "location": 8,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        },
        "get_most_common_except_not_entity": {
            "name": "get_most_common_except_not_entity",
            "location": 14,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        },
        "get_not_entity": {
            "name": "get_not_entity",
            "location": 21,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        }
    },
    "uttut/pipeline/ops/lowercase.py": {
        "Lowercase._transform": {
            "name": "_transform",
            "location": 34,
            "return": [
                "Tuple[(str, 'LabelAligner')]"
            ],
            "arguments": {
                "self": [],
                "input_sequence": [
                    "str"
                ]
            }
        },
        "Lowercase._gen_forward_replacement_group": {
            "name": "_gen_forward_replacement_group",
            "location": 46,
            "return": [
                "ReplacementGroup"
            ],
            "arguments": {
                "self": [],
                "input_str": [
                    "str"
                ]
            }
        }
    },
    "uttut/pipeline/ops/pad.py": {
        "Pad.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "maxlen": [
                    "int"
                ],
                "pad_token": [
                    "str"
                ]
            }
        },
        "Pad._transform": {
            "name": "_transform",
            "location": 38,
            "return": [
                "Tuple[(List[str], 'LabelAligner')]"
            ],
            "arguments": {
                "self": [],
                "input_sequence": [
                    "List[str]"
                ]
            }
        },
        "Pad._gen_forward_replacement_group": {
            "name": "_gen_forward_replacement_group",
            "location": 51,
            "return": [
                "ReplacementGroup"
            ],
            "arguments": {
                "self": [],
                "input_lst": [
                    "List[str]"
                ]
            }
        },
        "PadAligner._transform": {
            "name": "_transform",
            "location": 71,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ]
            }
        },
        "PadAligner._forward_transduce_func": {
            "name": "_forward_transduce_func",
            "location": 78,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        },
        "PadAligner._inverse_transform": {
            "name": "_inverse_transform",
            "location": 81,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ]
            }
        },
        "PadAligner._backward_transduce_func": {
            "name": "_backward_transduce_func",
            "location": 89,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        }
    },
    "uttut/pipeline/ops/punctuation_except_endpoint_to_whitespace.py": {
        "PunctuationExceptEndpointToWhitespace._transform": {
            "name": "_transform",
            "location": 35,
            "return": [
                "Tuple[(str, 'LabelAligner')]"
            ],
            "arguments": {
                "self": [],
                "input_sequence": [
                    "str"
                ]
            }
        },
        "PunctuationExceptEndpointToWhitespace._gen_forward_replacement_group": {
            "name": "_gen_forward_replacement_group",
            "location": 46,
            "return": [
                "ReplacementGroup"
            ],
            "arguments": {
                "self": [],
                "input_str": [
                    "str"
                ]
            }
        },
        "PunctuationExceptEndpointToWhitespace._is_endpoint": {
            "name": "_is_endpoint",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "char": [
                    "str"
                ]
            }
        },
        "PunctuationExceptEndpointToWhitespaceAligner._transform": {
            "name": "_transform",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ]
            }
        },
        "PunctuationExceptEndpointToWhitespaceAligner._forward_transduce_func": {
            "name": "_forward_transduce_func",
            "location": 75,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        },
        "PunctuationExceptEndpointToWhitespaceAligner._inverse_transform": {
            "name": "_inverse_transform",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "labels": []
            }
        },
        "PunctuationExceptEndpointToWhitespaceAligner._backward_transduce_func": {
            "name": "_backward_transduce_func",
            "location": 86,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        }
    },
    "uttut/pipeline/ops/pure_num_to_token.py": {
        "PureNum2Token.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "token": [
                    "str"
                ]
            }
        },
        "PureNum2Token._transform": {
            "name": "_transform",
            "location": 42,
            "return": [
                "Tuple[(List[str], 'LabelAligner')]"
            ],
            "arguments": {
                "self": [],
                "input_sequence": [
                    "List[str]"
                ]
            }
        },
        "PureNum2Token._gen_forward_replacement_group": {
            "name": "_gen_forward_replacement_group",
            "location": 53,
            "return": [
                "ReplacementGroup"
            ],
            "arguments": {
                "self": [],
                "input_lst": [
                    "List[str]"
                ]
            }
        }
    },
    "uttut/pipeline/ops/span_subwords.py": {
        "span_subwords": {
            "name": "span_subwords",
            "location": 112,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "word": [
                    "str"
                ],
                "unk_token": [
                    "str"
                ],
                "vocab": [
                    "Dict[(str, int)]"
                ],
                "max_input_chars_per_word": [
                    "int"
                ]
            }
        },
        "SpanSubwords.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "vocab": [
                    "Dict[(str, int)]"
                ],
                "unk_token": [
                    "str"
                ],
                "maxlen_per_token": [
                    "int"
                ]
            }
        },
        "SpanSubwords._transform": {
            "name": "_transform",
            "location": 52,
            "return": [
                "Tuple[(List[str], 'LabelAligner')]"
            ],
            "arguments": {
                "self": [],
                "input_sequence": [
                    "List[str]"
                ]
            }
        },
        "SpanSubwords._gen_forward_replacement_group": {
            "name": "_gen_forward_replacement_group",
            "location": 67,
            "return": [
                "ReplacementGroup"
            ],
            "arguments": {
                "self": [],
                "input_lst": [
                    "List[str]"
                ]
            }
        },
        "SpanSubwordsAligner._transform": {
            "name": "_transform",
            "location": 90,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ]
            }
        },
        "SpanSubwordsAligner._forward_transduce_func": {
            "name": "_forward_transduce_func",
            "location": 97,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        },
        "SpanSubwordsAligner._inverse_transform": {
            "name": "_inverse_transform",
            "location": 100,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ]
            }
        },
        "SpanSubwordsAligner._backward_transduce_func": {
            "name": "_backward_transduce_func",
            "location": 108,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        }
    },
    "uttut/pipeline/ops/strip_accent_token.py": {
        "_strip_accents": {
            "name": "_strip_accents",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "StripAccentToken._transform": {
            "name": "_transform",
            "location": 33,
            "return": [
                "Tuple[(str, 'LabelAligner')]"
            ],
            "arguments": {
                "self": [],
                "input_sequence": [
                    "str"
                ]
            }
        },
        "StripAccentToken._gen_forward_replacement_group": {
            "name": "_gen_forward_replacement_group",
            "location": 44,
            "return": [
                "ReplacementGroup"
            ],
            "arguments": {
                "self": [],
                "input_str": [
                    "str"
                ]
            }
        },
        "StripAccentTokenAligner._transform": {
            "name": "_transform",
            "location": 63,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ]
            }
        },
        "StripAccentTokenAligner._forward_transduce_func": {
            "name": "_forward_transduce_func",
            "location": 70,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        },
        "StripAccentTokenAligner._inverse_transform": {
            "name": "_inverse_transform",
            "location": 73,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ]
            }
        },
        "StripAccentTokenAligner._backward_transduce_func": {
            "name": "_backward_transduce_func",
            "location": 81,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        }
    },
    "uttut/pipeline/ops/tokens.py": {},
    "uttut/pipeline/ops/token_to_index.py": {
        "validate_continuity": {
            "name": "validate_continuity",
            "location": 10,
            "return": [],
            "arguments": {
                "token2index": [
                    "Dict[(str, int)]"
                ]
            }
        },
        "Token2Index.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "token2index": [
                    "Dict[(str, int)]"
                ],
                "unk_token": [
                    "str"
                ]
            }
        },
        "Token2Index._validate_token2index": {
            "name": "_validate_token2index",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "token2index": [
                    "Dict[(str, int)]"
                ],
                "unk_token": [
                    "str"
                ]
            }
        },
        "Token2Index._transform": {
            "name": "_transform",
            "location": 55,
            "return": [
                "Tuple[(List[int], 'LabelAligner')]"
            ],
            "arguments": {
                "self": [],
                "input_sequence": [
                    "List[str]"
                ]
            }
        },
        "Token2Index._gen_forward_replacement_group": {
            "name": "_gen_forward_replacement_group",
            "location": 66,
            "return": [
                "ReplacementGroup"
            ],
            "arguments": {
                "self": [],
                "input_lst": [
                    "List[str]"
                ]
            }
        }
    },
    "uttut/pipeline/ops/token_to_index_with_hash.py": {
        "Token2IndexwithHash.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "token2index": [
                    "Dict[(str, int)]"
                ]
            }
        },
        "Token2IndexwithHash._validate_token2index": {
            "name": "_validate_token2index",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "token2index": [
                    "Dict[(str, int)]"
                ]
            }
        },
        "Token2IndexwithHash._transform": {
            "name": "_transform",
            "location": 44,
            "return": [
                "Tuple[(List[int], 'LabelAligner')]"
            ],
            "arguments": {
                "self": [],
                "input_sequence": [
                    "List[str]"
                ]
            }
        },
        "Token2IndexwithHash._gen_forward_replacement_group": {
            "name": "_gen_forward_replacement_group",
            "location": 55,
            "return": [
                "ReplacementGroup"
            ],
            "arguments": {
                "self": [],
                "input_lst": [
                    "List[str]"
                ]
            }
        }
    },
    "uttut/pipeline/ops/__init__.py": {},
    "uttut/pipeline/ops/pattern_recognizers/base.py": {
        "PatternRecognizer.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 23,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "PatternRecognizer._transform": {
            "name": "_transform",
            "location": 29,
            "return": [
                "Tuple[(str, 'LabelAligner')]"
            ],
            "arguments": {
                "self": [],
                "input_sequence": [
                    "str"
                ]
            }
        },
        "PatternRecognizer._gen_forward_replacement_group": {
            "name": "_gen_forward_replacement_group",
            "location": 40,
            "return": [
                "ReplacementGroup"
            ],
            "arguments": {
                "self": [],
                "input_str": [
                    "str"
                ],
                "annotation": [
                    "str"
                ]
            }
        },
        "PatternRecognizerAligner._transform": {
            "name": "_transform",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ]
            }
        },
        "PatternRecognizerAligner._forward_transduce_func": {
            "name": "_forward_transduce_func",
            "location": 72,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        },
        "PatternRecognizerAligner._inverse_transform": {
            "name": "_inverse_transform",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "labels": []
            }
        },
        "PatternRecognizerAligner._backward_transduce_func": {
            "name": "_backward_transduce_func",
            "location": 83,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        }
    },
    "uttut/pipeline/ops/pattern_recognizers/float_token.py": {
        "FloatToken._gen_forward_replacement_group": {
            "name": "_gen_forward_replacement_group",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "input_str": [
                    "str"
                ]
            }
        }
    },
    "uttut/pipeline/ops/pattern_recognizers/float_token_with_space.py": {
        "FloatTokenWithSpaceAligner._forward_transduce_func": {
            "name": "_forward_transduce_func",
            "location": 13,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        },
        "FloatTokenWithSpaceAligner._backward_transduce_func": {
            "name": "_backward_transduce_func",
            "location": 22,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        },
        "FloatTokenWithSpace._gen_forward_replacement_group": {
            "name": "_gen_forward_replacement_group",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "input_str": [
                    "str"
                ]
            }
        }
    },
    "uttut/pipeline/ops/pattern_recognizers/int_token.py": {
        "IntTokenAligner._forward_transduce_func": {
            "name": "_forward_transduce_func",
            "location": 12,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        },
        "IntTokenAligner._backward_transduce_func": {
            "name": "_backward_transduce_func",
            "location": 15,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        },
        "IntToken._gen_forward_replacement_group": {
            "name": "_gen_forward_replacement_group",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "input_str": [
                    "str"
                ]
            }
        }
    },
    "uttut/pipeline/ops/pattern_recognizers/int_token_with_space.py": {
        "IntTokenWithSpaceAligner._forward_transduce_func": {
            "name": "_forward_transduce_func",
            "location": 14,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        },
        "IntTokenWithSpaceAligner._backward_transduce_func": {
            "name": "_backward_transduce_func",
            "location": 23,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        },
        "IntTokenWithSpace._gen_forward_replacement_group": {
            "name": "_gen_forward_replacement_group",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "input_str": [
                    "str"
                ]
            }
        }
    },
    "uttut/pipeline/ops/pattern_recognizers/merge_whitespace_characters.py": {
        "MergeWhiteSpaceCharactersAligner._forward_transduce_func": {
            "name": "_forward_transduce_func",
            "location": 11,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        },
        "MergeWhiteSpaceCharactersAligner._backward_transduce_func": {
            "name": "_backward_transduce_func",
            "location": 14,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        }
    },
    "uttut/pipeline/ops/pattern_recognizers/num_token_with_space.py": {
        "NumTokenWithSpaceAligner._forward_transduce_func": {
            "name": "_forward_transduce_func",
            "location": 14,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        },
        "NumTokenWithSpaceAligner._backward_transduce_func": {
            "name": "_backward_transduce_func",
            "location": 23,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        },
        "NumTokenWithSpace._gen_forward_replacement_group": {
            "name": "_gen_forward_replacement_group",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "input_str": [
                    "str"
                ]
            }
        }
    },
    "uttut/pipeline/ops/pattern_recognizers/replace_a_with_b.py": {
        "ReplaceAwithBAligner._forward_transduce_func": {
            "name": "_forward_transduce_func",
            "location": 9,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        },
        "ReplaceAwithBAligner._backward_transduce_func": {
            "name": "_backward_transduce_func",
            "location": 12,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        },
        "ReplaceAwithB.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": []
            }
        },
        "ReplaceAwithB._gen_forward_replacement_group": {
            "name": "_gen_forward_replacement_group",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "input_str": [
                    "str"
                ]
            }
        }
    },
    "uttut/pipeline/ops/pattern_recognizers/stopwords_to_whitespace.py": {
        "StopwordsToWhitespaceAligner._forward_transduce_func": {
            "name": "_forward_transduce_func",
            "location": 14,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        },
        "StopwordsToWhitespaceAligner._backward_transduce_func": {
            "name": "_backward_transduce_func",
            "location": 17,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        }
    },
    "uttut/pipeline/ops/pattern_recognizers/strip_whitespace_characters.py": {
        "StripWhiteSpaceCharactersAligner._forward_transduce_func": {
            "name": "_forward_transduce_func",
            "location": 11,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        },
        "StripWhiteSpaceCharactersAligner._backward_transduce_func": {
            "name": "_backward_transduce_func",
            "location": 14,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        },
        "StripWhiteSpaceCharacters._gen_forward_replacement_group": {
            "name": "_gen_forward_replacement_group",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "input_str": [
                    "str"
                ]
            }
        }
    },
    "uttut/pipeline/ops/pattern_recognizers/__init__.py": {},
    "uttut/pipeline/ops/pattern_recognizers/tests/test_float_token.py": {
        "TestFloatToken.op": {
            "name": "op",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFloatToken.test_equal": {
            "name": "test_equal",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        }
    },
    "uttut/pipeline/ops/pattern_recognizers/tests/test_float_token_with_space.py": {
        "TestFloatTokenWithSpace.op": {
            "name": "op",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFloatTokenWithSpace.test_equal": {
            "name": "test_equal",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        }
    },
    "uttut/pipeline/ops/pattern_recognizers/tests/test_int_token.py": {
        "TestIntToken.op": {
            "name": "op",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIntToken.test_equal": {
            "name": "test_equal",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        }
    },
    "uttut/pipeline/ops/pattern_recognizers/tests/test_int_token_with_space.py": {
        "TestIntTokenWithSpace.op": {
            "name": "op",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIntTokenWithSpace.test_equal": {
            "name": "test_equal",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        }
    },
    "uttut/pipeline/ops/pattern_recognizers/tests/test_merge_whitespace_characters.py": {
        "TestMergeWhiteSpaceCharacters.op": {
            "name": "op",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeWhiteSpaceCharacters.test_equal": {
            "name": "test_equal",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        }
    },
    "uttut/pipeline/ops/pattern_recognizers/tests/test_num_token_with_space.py": {
        "TestNumTokenWithSpace.op": {
            "name": "op",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNumTokenWithSpace.test_equal": {
            "name": "test_equal",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        }
    },
    "uttut/pipeline/ops/pattern_recognizers/tests/test_replace_a_with_b.py": {
        "TestFloatToken.op": {
            "name": "op",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFloatToken.test_not_invertiable": {
            "name": "test_not_invertiable",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        }
    },
    "uttut/pipeline/ops/pattern_recognizers/tests/test_stopwords_to_whitespace.py": {
        "TestStopwordsToWhitespace.op": {
            "name": "op",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStopwordsToWhitespace.test_not_invertiable": {
            "name": "test_not_invertiable",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        },
        "TestStopwordsToWhitespace.test_equal": {
            "name": "test_equal",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        }
    },
    "uttut/pipeline/ops/pattern_recognizers/tests/test_strip_whitespace_characters.py": {
        "TestStripWhiteSpaceCharacters.op": {
            "name": "op",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStripWhiteSpaceCharacters.test_all_whitespaces": {
            "name": "test_all_whitespaces",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        },
        "TestStripWhiteSpaceCharacters.test_equal": {
            "name": "test_equal",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        }
    },
    "uttut/pipeline/ops/pattern_recognizers/tests/__init__.py": {},
    "uttut/pipeline/ops/tests/common_tests.py": {
        "OperatorTestTemplate.params": {
            "name": "params",
            "location": 18,
            "return": [
                "List[ParamTuple]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OperatorTestTemplate.pytest_generate_tests": {
            "name": "pytest_generate_tests",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "metafunc": []
            }
        },
        "OperatorTestTemplate.op": {
            "name": "op",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OperatorTestTemplate.test_data": {
            "name": "test_data",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "input_sequence": [],
                "input_labels": [],
                "output_sequence": [],
                "output_labels": []
            }
        },
        "OperatorTestTemplate.test_transform": {
            "name": "test_transform",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "input_sequence": [],
                "output_sequence": [],
                "op": []
            }
        },
        "OperatorTestTemplate.test_transform_labels": {
            "name": "test_transform_labels",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "input_sequence": [],
                "input_labels": [],
                "output_labels": [],
                "op": []
            }
        },
        "OperatorTestTemplate.test_inverse_transform_labels": {
            "name": "test_inverse_transform_labels",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "input_sequence": [],
                "input_labels": [],
                "output_labels": [],
                "op": []
            }
        },
        "OperatorTestTemplate.test_str": {
            "name": "test_str",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        },
        "OperatorTestTemplate.pytest_generate_tests.choose_needed_param": {
            "name": "choose_needed_param",
            "location": 28,
            "return": [],
            "arguments": {
                "param": []
            }
        }
    },
    "uttut/pipeline/ops/tests/test_add_end_token.py": {
        "test_correct_configs": {
            "name": "test_correct_configs",
            "location": 45,
            "return": [],
            "arguments": {
                "op": [],
                "expected_configs": []
            }
        },
        "test_invalid_end_token": {
            "name": "test_invalid_end_token",
            "location": 69,
            "return": [],
            "arguments": {
                "end_token": [],
                "error": []
            }
        },
        "TestAddEndToken.op": {
            "name": "op",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAddEndToken.test_not_equal": {
            "name": "test_not_equal",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        }
    },
    "uttut/pipeline/ops/tests/test_add_sos_eos.py": {
        "test_correct_configs": {
            "name": "test_correct_configs",
            "location": 54,
            "return": [],
            "arguments": {
                "op": [],
                "expected_configs": []
            }
        },
        "TestAddSosEos.op": {
            "name": "op",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAddSosEos.test_not_equal": {
            "name": "test_not_equal",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        }
    },
    "uttut/pipeline/ops/tests/test_add_whitespace_around_cjk.py": {
        "TestAddWhitespaceAroundCJK.op": {
            "name": "op",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAddWhitespaceAroundCJK.test_equal": {
            "name": "test_equal",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        }
    },
    "uttut/pipeline/ops/tests/test_add_whitespace_around_punctuation.py": {
        "TestAddWhitespaceAroundPunctuation.op": {
            "name": "op",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAddWhitespaceAroundPunctuation.test_equal": {
            "name": "test_equal",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        }
    },
    "uttut/pipeline/ops/tests/test_add_whitespace_around_word_n_zhchar.py": {
        "TestAddWhitespaceAroundWord.op": {
            "name": "op",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAddWhitespaceAroundWord.test_equal": {
            "name": "test_equal",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        },
        "TestAddWhitespaceAroundWord.test_invalid_op": {
            "name": "test_invalid_op",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "uttut/pipeline/ops/tests/test_factory.py": {
        "op_factory": {
            "name": "op_factory",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_register": {
            "name": "test_register",
            "location": 12,
            "return": [],
            "arguments": {
                "op_factory": []
            }
        },
        "test_fails_to_register": {
            "name": "test_fails_to_register",
            "location": 18,
            "return": [],
            "arguments": {
                "op_factory": []
            }
        },
        "test_operator_not_found": {
            "name": "test_operator_not_found",
            "location": 26,
            "return": [],
            "arguments": {
                "op_factory": []
            }
        }
    },
    "uttut/pipeline/ops/tests/test_lowercase.py": {
        "TestLowercase.op": {
            "name": "op",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLowercase.test_equal": {
            "name": "test_equal",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        }
    },
    "uttut/pipeline/ops/tests/test_pad.py": {
        "test_correct_configs": {
            "name": "test_correct_configs",
            "location": 82,
            "return": [],
            "arguments": {
                "op": [],
                "expected_configs": []
            }
        },
        "TestPad.op": {
            "name": "op",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPad.test_longer_case": {
            "name": "test_longer_case",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        },
        "TestPad.test_equal": {
            "name": "test_equal",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        },
        "TestPad.test_not_equal": {
            "name": "test_not_equal",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "uttut/pipeline/ops/tests/test_punctuations_except_endpoint_to_whitespace.py": {
        "op": {
            "name": "op",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_invertible_cases": {
            "name": "test_invertible_cases",
            "location": 74,
            "return": [],
            "arguments": {
                "input_str": [],
                "input_labels": [],
                "expected_output_seq": [],
                "expected_output_labels": [],
                "expected_realigned_labels": [],
                "op": []
            }
        },
        "TestPunctuationExceptEndpointToWhitespace.op": {
            "name": "op",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPunctuationExceptEndpointToWhitespace.test_equal": {
            "name": "test_equal",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        }
    },
    "uttut/pipeline/ops/tests/test_pure_num_to_token.py": {
        "TestPureNum2TokenDefault.op": {
            "name": "op",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPureNum2TokenCustom.op": {
            "name": "op",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "uttut/pipeline/ops/tests/test_span_subwords.py": {
        "to_dict": {
            "name": "to_dict",
            "location": 7,
            "return": [],
            "arguments": {
                "input_list": []
            }
        },
        "test_not_equal": {
            "name": "test_not_equal",
            "location": 122,
            "return": [],
            "arguments": {
                "obj1": [],
                "obj2": []
            }
        },
        "TestSpanSubwordsNoSubwords.op": {
            "name": "op",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpanSubwordsHasSubwords.op": {
            "name": "op",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "uttut/pipeline/ops/tests/test_strip_accent_token.py": {
        "TestStripAccentToken.op": {
            "name": "op",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStripAccentToken.test_equal": {
            "name": "test_equal",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        }
    },
    "uttut/pipeline/ops/tests/test_token_to_index.py": {
        "test_correct_configs": {
            "name": "test_correct_configs",
            "location": 85,
            "return": [],
            "arguments": {
                "op": [],
                "expected_configs": []
            }
        },
        "TestToken2Index.op": {
            "name": "op",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestToken2Index.test_invalid_token2index": {
            "name": "test_invalid_token2index",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "error": [],
                "token2index": [],
                "unk_token": []
            }
        },
        "TestToken2Index.test_equal": {
            "name": "test_equal",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        },
        "TestToken2Index.test_not_equal": {
            "name": "test_not_equal",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "uttut/pipeline/ops/tests/test_token_to_index_with_hash.py": {
        "hash_unknown": {
            "name": "hash_unknown",
            "location": 8,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "TestToken2IndexwithHash.token2index": {
            "name": "token2index",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestToken2IndexwithHash.op": {
            "name": "op",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "token2index": []
            }
        },
        "TestToken2IndexwithHash.test_invalid_token2index": {
            "name": "test_invalid_token2index",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "token2index": []
            }
        },
        "TestToken2IndexwithHash.test_equal": {
            "name": "test_equal",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "op": [],
                "token2index": []
            }
        },
        "TestToken2IndexwithHash.test_not_equal": {
            "name": "test_not_equal",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        }
    },
    "uttut/pipeline/ops/tests/__init__.py": {},
    "uttut/pipeline/ops/tokenizers/base.py": {
        "Tokenizer.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 23,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Tokenizer._transform": {
            "name": "_transform",
            "location": 29,
            "return": [
                "Tuple[(List[str], 'LabelAligner')]"
            ],
            "arguments": {
                "self": [],
                "input_sequence": [
                    "str"
                ]
            }
        },
        "Tokenizer._tokenize": {
            "name": "_tokenize",
            "location": 48,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "input_str": [
                    "str"
                ]
            }
        },
        "TokenizerAligner._transform": {
            "name": "_transform",
            "location": 54,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ]
            }
        },
        "TokenizerAligner._forward_transduce_func": {
            "name": "_forward_transduce_func",
            "location": 63,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        },
        "TokenizerAligner._inverse_transform": {
            "name": "_inverse_transform",
            "location": 66,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ]
            }
        },
        "TokenizerAligner._backward_transduce_func": {
            "name": "_backward_transduce_func",
            "location": 80,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        }
    },
    "uttut/pipeline/ops/tokenizers/char_tokenizer.py": {
        "CharTokenizerAligner._forward_transduce_func": {
            "name": "_forward_transduce_func",
            "location": 8,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        },
        "CharTokenizerAligner._backward_transduce_func": {
            "name": "_backward_transduce_func",
            "location": 11,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        },
        "CharTokenizer._tokenize": {
            "name": "_tokenize",
            "location": 35,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "input_str": [
                    "str"
                ]
            }
        }
    },
    "uttut/pipeline/ops/tokenizers/custom_word_tokenizer.py": {
        "CustomWordTokenizerAligner._forward_transduce_func": {
            "name": "_forward_transduce_func",
            "location": 10,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        },
        "CustomWordTokenizerAligner._backward_transduce_func": {
            "name": "_backward_transduce_func",
            "location": 13,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        },
        "CustomWordTokenizer.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "user_words": [
                    "List[str]"
                ],
                "shortest": [
                    "bool"
                ]
            }
        },
        "CustomWordTokenizer.validate_user_words": {
            "name": "validate_user_words",
            "location": 47,
            "return": [],
            "arguments": {
                "user_words": []
            }
        },
        "CustomWordTokenizer._tokenize": {
            "name": "_tokenize",
            "location": 51,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "input_str": [
                    "str"
                ]
            }
        }
    },
    "uttut/pipeline/ops/tokenizers/eng_tokenizer.py": {
        "whitespace_tokenize": {
            "name": "whitespace_tokenize",
            "location": 76,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "_is_punctuation": {
            "name": "_is_punctuation",
            "location": 89,
            "return": [],
            "arguments": {
                "char": []
            }
        },
        "EngTokenizerAligner._forward_transduce_func": {
            "name": "_forward_transduce_func",
            "location": 11,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        },
        "EngTokenizerAligner._backward_transduce_func": {
            "name": "_backward_transduce_func",
            "location": 14,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        },
        "EngTokenizer._tokenize": {
            "name": "_tokenize",
            "location": 41,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "input_str": [
                    "str"
                ]
            }
        },
        "EngTokenizer._run_split_on_punc": {
            "name": "_run_split_on_punc",
            "location": 49,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        }
    },
    "uttut/pipeline/ops/tokenizers/whitespace_tokenizer.py": {
        "WhiteSpaceTokenizerAligner._forward_transduce_func": {
            "name": "_forward_transduce_func",
            "location": 9,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        },
        "WhiteSpaceTokenizerAligner._backward_transduce_func": {
            "name": "_backward_transduce_func",
            "location": 12,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[int]"
                ],
                "output_size": [
                    "int"
                ]
            }
        },
        "WhiteSpaceTokenizer._tokenize": {
            "name": "_tokenize",
            "location": 39,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "input_str": [
                    "str"
                ]
            }
        }
    },
    "uttut/pipeline/ops/tokenizers/zh_char_tokenizer.py": {
        "ZhCharTokenizer._tokenize": {
            "name": "_tokenize",
            "location": 27,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "input_str": [
                    "str"
                ]
            }
        },
        "ZhCharTokenizer._tokenize_chinese_chars": {
            "name": "_tokenize_chinese_chars",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "ZhCharTokenizer._is_chinese_char": {
            "name": "_is_chinese_char",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "code_position": []
            }
        }
    },
    "uttut/pipeline/ops/tokenizers/__init__.py": {},
    "uttut/pipeline/ops/tokenizers/tests/test_char_tokenizer.py": {
        "TestCharTokenizer.op": {
            "name": "op",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCharTokenizer.test_equal": {
            "name": "test_equal",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        }
    },
    "uttut/pipeline/ops/tokenizers/tests/test_custom_word_tokenizer.py": {
        "user_words": {
            "name": "user_words",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "op": {
            "name": "op",
            "location": 13,
            "return": [],
            "arguments": {
                "user_words": []
            }
        },
        "test_invertible_cases": {
            "name": "test_invertible_cases",
            "location": 82,
            "return": [],
            "arguments": {
                "input_str": [],
                "input_labels": [],
                "expected_output_seq": [],
                "expected_output_labels": [],
                "expected_realigned_labels": [],
                "op": []
            }
        },
        "TestCustomWordTokenizer.op": {
            "name": "op",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCustomWordTokenizer.test_equal": {
            "name": "test_equal",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "op": [],
                "user_words": []
            }
        },
        "TestCustomWordTokenizer.test_invalid_init": {
            "name": "test_invalid_init",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "user_words": []
            }
        }
    },
    "uttut/pipeline/ops/tokenizers/tests/test_eng_tokenizer.py": {
        "op": {
            "name": "op",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_invertible_cases": {
            "name": "test_invertible_cases",
            "location": 71,
            "return": [],
            "arguments": {
                "input_str": [],
                "input_labels": [],
                "expected_output_seq": [],
                "expected_output_labels": [],
                "expected_realigned_labels": [],
                "op": []
            }
        },
        "TestEngTokenizer.op": {
            "name": "op",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEngTokenizer.test_equal": {
            "name": "test_equal",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        }
    },
    "uttut/pipeline/ops/tokenizers/tests/test_whitespace_tokenizer.py": {
        "TestWhiteSpaceTokenizer.op": {
            "name": "op",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWhiteSpaceTokenizer.test_equal": {
            "name": "test_equal",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        }
    },
    "uttut/pipeline/ops/tokenizers/tests/test_zh_char_tokenizer.py": {
        "TestZhCharTokenizer.op": {
            "name": "op",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestZhCharTokenizer.test_equal": {
            "name": "test_equal",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        }
    },
    "uttut/pipeline/ops/tokenizers/tests/__init__.py": {},
    "uttut/pipeline/ops/utils/trie.py": {
        "TrieNode.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrieNode.has_child": {
            "name": "has_child",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "TrieNode.get_child": {
            "name": "get_child",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "TrieNode.insert_child": {
            "name": "insert_child",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "TrieNode.word": {
            "name": "word",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "Trie.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Trie.__contains__": {
            "name": "__contains__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Trie.exactly_search": {
            "name": "exactly_search",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "word": [
                    "str"
                ]
            }
        },
        "Trie.insert": {
            "name": "insert",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "word": [
                    "str"
                ]
            }
        },
        "Trie.match_prefix": {
            "name": "match_prefix",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "word": [
                    "str"
                ],
                "shortest": [
                    "bool"
                ]
            }
        }
    },
    "uttut/pipeline/ops/utils/__init__.py": {},
    "uttut/pipeline/ops/utils/tests/test_consistent_hash.py": {
        "test_consistent_hash": {
            "name": "test_consistent_hash",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "uttut/pipeline/ops/utils/tests/test_trie.py": {
        "test_exist": {
            "name": "test_exist",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test_match_prefix": {
            "name": "test_match_prefix",
            "location": 13,
            "return": [],
            "arguments": {}
        }
    },
    "uttut/pipeline/ops/utils/tests/__init__.py": {},
    "uttut/pipeline/tests/mock_factory.py": {
        "MockLabelAligner._transform": {
            "name": "_transform",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "labels": []
            }
        },
        "MockLabelAligner._inverse_transform": {
            "name": "_inverse_transform",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "labels": []
            }
        },
        "Str2Str.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Str2Str._transform": {
            "name": "_transform",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "input_sequence": [
                    "str"
                ]
            }
        },
        "Lst2Lst.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lst2Lst._transform": {
            "name": "_transform",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "input_sequence": [
                    "List[str]"
                ]
            }
        },
        "Str2Lst.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Str2Lst._transform": {
            "name": "_transform",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "input_sequence": [
                    "str"
                ]
            }
        },
        "Lst2Str.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lst2Str._transform": {
            "name": "_transform",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "input_sequence": [
                    "List[str]"
                ]
            }
        }
    },
    "uttut/pipeline/tests/test_intermediate.py": {
        "_transform": {
            "name": "_transform",
            "location": 4,
            "return": [],
            "arguments": {
                "input_lst": [],
                "index": []
            }
        },
        "test_all": {
            "name": "test_all",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "uttut/pipeline/tests/test_pipe.py": {
        "fake_pipe": {
            "name": "fake_pipe",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "dummy_datum": {
            "name": "dummy_datum",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_pipe_raise_invalid_io_type": {
            "name": "test_pipe_raise_invalid_io_type",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "test_pipe_raise_duplicated_checkpoints": {
            "name": "test_pipe_raise_duplicated_checkpoints",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "test_pipe_can_have_duplicated_ops": {
            "name": "test_pipe_can_have_duplicated_ops",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "test_transform": {
            "name": "test_transform",
            "location": 49,
            "return": [],
            "arguments": {
                "fake_pipe": [],
                "dummy_datum": []
            }
        },
        "test_serialize": {
            "name": "test_serialize",
            "location": 70,
            "return": [],
            "arguments": {
                "fake_pipe": []
            }
        },
        "test_deserialize_from_old_format": {
            "name": "test_deserialize_from_old_format",
            "location": 76,
            "return": [],
            "arguments": {
                "get_data_path": []
            }
        },
        "test_add": {
            "name": "test_add",
            "location": 82,
            "return": [],
            "arguments": {
                "fake_pipe": []
            }
        },
        "test_raise_invalid_add": {
            "name": "test_raise_invalid_add",
            "location": 92,
            "return": [],
            "arguments": {
                "fake_pipe": []
            }
        },
        "test_len": {
            "name": "test_len",
            "location": 104,
            "return": [],
            "arguments": {
                "fake_pipe": []
            }
        },
        "test_getitem": {
            "name": "test_getitem",
            "location": 108,
            "return": [],
            "arguments": {
                "fake_pipe": []
            }
        },
        "test_summary": {
            "name": "test_summary",
            "location": 114,
            "return": [],
            "arguments": {
                "fake_pipe": []
            }
        }
    },
    "uttut/pipeline/tests/test_utils.py": {
        "test_unpack_datum": {
            "name": "test_unpack_datum",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_pack_to_datum": {
            "name": "test_pack_to_datum",
            "location": 91,
            "return": [],
            "arguments": {
                "input_tuple": [],
                "expected_datum": []
            }
        },
        "test_pack_to_datum_fail": {
            "name": "test_pack_to_datum_fail",
            "location": 96,
            "return": [],
            "arguments": {}
        }
    },
    "uttut/pipeline/tests/__init__.py": {},
    "uttut/tests/test_elements.py": {
        "ElementIntentTestCase.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElementIntentTestCase.test_init": {
            "name": "test_init",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElementIntentTestCase.test_representation": {
            "name": "test_representation",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElementEntityTestCase.test_no_replacements": {
            "name": "test_no_replacements",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElementEntityTestCase.test_has_replacements": {
            "name": "test_has_replacements",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElementEntityTestCase.test_from_dict": {
            "name": "test_from_dict",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElementEntityTestCase.test_from_dict_no_replacements": {
            "name": "test_from_dict_no_replacements",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElementEntityTestCase.test_to_dict": {
            "name": "test_to_dict",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElementEntityTestCase.test_to_dict_no_replacement": {
            "name": "test_to_dict_no_replacement",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElementEntityTestCase.test_equal": {
            "name": "test_equal",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElementEntityTestCase.test_not_equal": {
            "name": "test_not_equal",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElementEntityTestCase.test_raise_error_if_compare_different_type": {
            "name": "test_raise_error_if_compare_different_type",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElementDatumTestCase.test_raise_entity_position_error_if_entity_position_wrong": {
            "name": "test_raise_entity_position_error_if_entity_position_wrong",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElementDatumTestCase.test_raise_entity_overlap_if_entity_overlaps": {
            "name": "test_raise_entity_overlap_if_entity_overlaps",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElementDatumTestCase.test_entities_correct_order_in_datum": {
            "name": "test_entities_correct_order_in_datum",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElementDatumTestCase.test_has_entities": {
            "name": "test_has_entities",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElementDatumTestCase.test_has_no_entities": {
            "name": "test_has_no_entities",
            "location": 304,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElementDatumTestCase.test_has_intents": {
            "name": "test_has_intents",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElementDatumTestCase.test_has_no_intents": {
            "name": "test_has_no_intents",
            "location": 322,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElementDatumTestCase.test_same_utterance": {
            "name": "test_same_utterance",
            "location": 332,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElementDatumTestCase.test_same_intents": {
            "name": "test_same_intents",
            "location": 354,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElementDatumTestCase.test_same_entities": {
            "name": "test_same_entities",
            "location": 381,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "uttut/tests/test_entity_overlapping_ratio.py": {
        "EntityOverlappingRatioTestCase.test_check_utter_index_in_entity": {
            "name": "test_check_utter_index_in_entity",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EntityOverlappingRatioTestCase.test_expand_entity_to_list": {
            "name": "test_expand_entity_to_list",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EntityOverlappingRatioTestCase.test_penalty_on_same_entity_or_not": {
            "name": "test_penalty_on_same_entity_or_not",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EntityOverlappingRatioTestCase.test_raise_if_diff_utt": {
            "name": "test_raise_if_diff_utt",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EntityOverlappingRatioTestCase.test_score_1": {
            "name": "test_score_1",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EntityOverlappingRatioTestCase.test_score_0": {
            "name": "test_score_0",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EntityOverlappingRatioTestCase.test_score_between_0_1": {
            "name": "test_score_between_0_1",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "uttut/tests/test_expand_by_entities.py": {
        "ExpandByEntitiesTestCase.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpandByEntitiesTestCase.test_include_original_value": {
            "name": "test_include_original_value",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpandByEntitiesTestCase.test_exclude_original_value": {
            "name": "test_exclude_original_value",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpandByEntitiesTestCase.test_datum_without_entities": {
            "name": "test_datum_without_entities",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpandByEntitiesTestCase.test_expand_by_entities_call_partition_correctly": {
            "name": "test_expand_by_entities_call_partition_correctly",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "patch_partition": []
            }
        },
        "ExpandByEntitiesTestCase.test_expand_by_entities_call_partition_correctly_false": {
            "name": "test_expand_by_entities_call_partition_correctly_false",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "patch_partition": []
            }
        },
        "ExpandByEntitiesTestCase.test_expand_by_entities_correctly_use_sampling_method": {
            "name": "test_expand_by_entities_correctly_use_sampling_method",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "patch_get_k": [],
                "_": []
            }
        },
        "ExpandByEntitiesTestCase.test__aggregate_entities": {
            "name": "test__aggregate_entities",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "uttut/tests/test_get_unique_entities.py": {
        "GetUniqueEntitiesTestCase.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetUniqueEntitiesTestCase.test_get_unique_entities": {
            "name": "test_get_unique_entities",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "uttut/tests/__init__.py": {},
    "uttut/toolkits/__init__.py": {},
    "uttut/toolkits/tests/test_get_kth_combination.py": {
        "GetKthCombinationTestCase.test_get_kth_combination": {
            "name": "test_get_kth_combination",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "uttut/toolkits/tests/test_partition_by_entities.py": {
        "PartitionByEntitiesTestCase.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PartitionByEntitiesTestCase.test_partition_by_entities": {
            "name": "test_partition_by_entities",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PartitionByEntitiesTestCase.test_partition_by_entities_include_orig": {
            "name": "test_partition_by_entities_include_orig",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PartitionByEntitiesTestCase.test_datum_wo_entity": {
            "name": "test_datum_wo_entity",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "uttut/toolkits/tests/__init__.py": {},
    "uttut/transformers/base.py": {
        "BaseTransformer.humanize": {
            "name": "humanize",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "datum": []
            }
        },
        "BaseTransformer.machanize": {
            "name": "machanize",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "raw_dict": []
            }
        },
        "BaseTransformer.serialize": {
            "name": "serialize",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseTransformer.deserialize": {
            "name": "deserialize",
            "location": 20,
            "return": [],
            "arguments": {
                "cls": [],
                "serialized": []
            }
        }
    },
    "uttut/transformers/ordinal_label.py": {
        "OrdinalLabel.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "intent2index": [
                    "Mapping[(str, int)]"
                ],
                "entity2index": [
                    "Mapping[(str, int)]"
                ],
                "not_entity_index": [
                    "int"
                ]
            }
        },
        "OrdinalLabel.is_valid_mapping": {
            "name": "is_valid_mapping",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "str2idx": [
                    "Mapping[(str, int)]"
                ]
            }
        },
        "OrdinalLabel.not_entity_index": {
            "name": "not_entity_index",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrdinalLabel.index2entity": {
            "name": "index2entity",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "OrdinalLabel.index2intent": {
            "name": "index2intent",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "OrdinalLabel.humanize": {
            "name": "humanize",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "datum": []
            }
        },
        "OrdinalLabel.machanize": {
            "name": "machanize",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "raw_dict": []
            }
        },
        "OrdinalLabel.serialize": {
            "name": "serialize",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrdinalLabel.deserialize": {
            "name": "deserialize",
            "location": 103,
            "return": [],
            "arguments": {
                "cls": [],
                "serialized": []
            }
        },
        "OrdinalLabel.from_raw_dictionary": {
            "name": "from_raw_dictionary",
            "location": 111,
            "return": [],
            "arguments": {
                "cls": [],
                "raw_dict": [],
                "not_entity_index": []
            }
        }
    },
    "uttut/transformers/__init__.py": {},
    "uttut/transformers/tests/test_ordinal_label.py": {
        "tx": {
            "name": "tx",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "mocked_OrdinalLabel": {
            "name": "mocked_OrdinalLabel",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_ordinal_label_init": {
            "name": "test_ordinal_label_init",
            "location": 68,
            "return": [],
            "arguments": {
                "mocked_OrdinalLabel": []
            }
        },
        "test_ordinal_label_init_raise_if_intent2index_not_valid": {
            "name": "test_ordinal_label_init_raise_if_intent2index_not_valid",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "test_ordinal_label_init_raise_if_entity2index_not_valid": {
            "name": "test_ordinal_label_init_raise_if_entity2index_not_valid",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "test_ordinal_label_is_valid_mapping": {
            "name": "test_ordinal_label_is_valid_mapping",
            "location": 115,
            "return": [],
            "arguments": {}
        },
        "test_ordinal_label_humanize": {
            "name": "test_ordinal_label_humanize",
            "location": 127,
            "return": [],
            "arguments": {
                "expected": [],
                "datum": [],
                "tx": []
            }
        },
        "test_ordinal_label_machanize": {
            "name": "test_ordinal_label_machanize",
            "location": 145,
            "return": [],
            "arguments": {
                "raw_dict": [],
                "datum": [],
                "tx": []
            }
        },
        "test_ordinal_label_serialization": {
            "name": "test_ordinal_label_serialization",
            "location": 149,
            "return": [],
            "arguments": {}
        },
        "raw_data": {
            "name": "raw_data",
            "location": 162,
            "return": [],
            "arguments": {}
        },
        "test_ordinal_from_raw_dictionary": {
            "name": "test_ordinal_from_raw_dictionary",
            "location": 195,
            "return": [],
            "arguments": {
                "raw_data": []
            }
        },
        "test_ordinal_from_raw_dictionary_with_custom_not_entity_index": {
            "name": "test_ordinal_from_raw_dictionary_with_custom_not_entity_index",
            "location": 202,
            "return": [],
            "arguments": {
                "raw_data": []
            }
        },
        "test_ordinal_from_raw_dictionary_with_custom_not_entity_index_2": {
            "name": "test_ordinal_from_raw_dictionary_with_custom_not_entity_index_2",
            "location": 209,
            "return": [],
            "arguments": {
                "raw_data": []
            }
        },
        "test_ordinal_from_raw_dictionary_raise_with_wrong_type": {
            "name": "test_ordinal_from_raw_dictionary_raise_with_wrong_type",
            "location": 217,
            "return": [],
            "arguments": {
                "wrong_entity_index": []
            }
        }
    },
    "uttut/transformers/tests/__init__.py": {}
}
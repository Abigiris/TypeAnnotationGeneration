{
    "video_reuse_detector-master/middleware/config.py": {
        "create_directory": {
            "name": "create_directory",
            "location": 7,
            "return": [],
            "arguments": {
                "path": [
                    "Path"
                ]
            }
        }
    },
    "video_reuse_detector-master/middleware/manage.py": {
        "get_videos_in_directory": {
            "name": "get_videos_in_directory",
            "location": 21,
            "return": [
                "List[Path]"
            ],
            "arguments": {
                "video_directory": [
                    "Path"
                ]
            }
        },
        "insert_videos_from_directory": {
            "name": "insert_videos_from_directory",
            "location": 31,
            "return": [],
            "arguments": {
                "file_path": [
                    "Path"
                ],
                "video_file_instantiator": []
            }
        },
        "insert_video": {
            "name": "insert_video",
            "location": 38,
            "return": [],
            "arguments": {
                "file_path": [
                    "Path"
                ],
                "video_file_instantiator": []
            }
        },
        "insert_videos_from_file": {
            "name": "insert_videos_from_file",
            "location": 54,
            "return": [],
            "arguments": {
                "file_with_filepaths": [
                    "Path"
                ],
                "video_file_instantiator": []
            }
        },
        "recreate_db": {
            "name": "recreate_db",
            "location": 65,
            "return": [],
            "arguments": {}
        },
        "run_extractor": {
            "name": "run_extractor",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "run_comparator": {
            "name": "run_comparator",
            "location": 79,
            "return": [],
            "arguments": {}
        },
        "seed_query_videos": {
            "name": "seed_query_videos",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "seed_archive_videos": {
            "name": "seed_archive_videos",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "seed_videos": {
            "name": "seed_videos",
            "location": 121,
            "return": [],
            "arguments": {
                "csv_file": []
            }
        }
    },
    "video_reuse_detector-master/middleware/__init__.py": {
        "create_app": {
            "name": "create_app",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "create_app.ctx": {
            "name": "ctx",
            "location": 47,
            "return": [],
            "arguments": {}
        }
    },
    "video_reuse_detector-master/middleware/models/fingerprint_collection.py": {
        "FingerprintCollectionModel.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "video_name": [],
                "segment_id": [],
                "thumbnail": [],
                "color_correlation": [],
                "orb": []
            }
        },
        "FingerprintCollectionModel.__repr__": {
            "name": "__repr__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FingerprintCollectionModel.serialize": {
            "name": "serialize",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FingerprintCollectionModel.to_fingerprint_collection": {
            "name": "to_fingerprint_collection",
            "location": 63,
            "return": [
                "FingerprintCollection"
            ],
            "arguments": {
                "self": []
            }
        },
        "FingerprintCollectionModel.from_fingerprint_collection": {
            "name": "from_fingerprint_collection",
            "location": 95,
            "return": [],
            "arguments": {
                "fpc": [
                    "FingerprintCollection"
                ]
            }
        }
    },
    "video_reuse_detector-master/middleware/models/fingerprint_collection_computation.py": {},
    "video_reuse_detector-master/middleware/models/fingerprint_comparison.py": {
        "FingerprintComparisonModel.to_fingerprint_comparison": {
            "name": "to_fingerprint_comparison",
            "location": 36,
            "return": [
                "FingerprintComparison"
            ],
            "arguments": {
                "self": []
            }
        },
        "FingerprintComparisonModel.from_fingerprint_comparison": {
            "name": "from_fingerprint_comparison",
            "location": 52,
            "return": [],
            "arguments": {
                "fc": [
                    "FingerprintComparison"
                ]
            }
        }
    },
    "video_reuse_detector-master/middleware/models/fingerprint_comparison_computation.py": {
        "after_insert": {
            "name": "after_insert",
            "location": 25,
            "return": [],
            "arguments": {
                "fpcc": []
            }
        }
    },
    "video_reuse_detector-master/middleware/models/video_file.py": {
        "after_insert": {
            "name": "after_insert",
            "location": 98,
            "return": [],
            "arguments": {
                "video_file": []
            }
        },
        "__mark_as_done__": {
            "name": "__mark_as_done__",
            "location": 118,
            "return": [],
            "arguments": {
                "file_path": [
                    "Path"
                ]
            }
        },
        "mark_as_done": {
            "name": "mark_as_done",
            "location": 129,
            "return": [],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "emit_event": {
            "name": "emit_event",
            "location": 133,
            "return": [],
            "arguments": {
                "video_file": [
                    "VideoFile"
                ],
                "event_name": [
                    "str"
                ]
            }
        },
        "VideoFileType.from_str": {
            "name": "from_str",
            "location": 24,
            "return": [],
            "arguments": {
                "label": [
                    "str"
                ]
            }
        },
        "VideoFile.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": [
                    "Path"
                ],
                "file_type": [
                    "VideoFileType"
                ],
                "display_name": [
                    "str"
                ]
            }
        },
        "VideoFile.mark_as_fingerprinted": {
            "name": "mark_as_fingerprinted",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VideoFile.is_fingerprinted": {
            "name": "is_fingerprinted",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VideoFile.from_upload": {
            "name": "from_upload",
            "location": 84,
            "return": [
                "'VideoFile'"
            ],
            "arguments": {
                "file_path": [
                    "Path"
                ],
                "display_name": [
                    "str"
                ]
            }
        },
        "VideoFile.from_archival_footage": {
            "name": "from_archival_footage",
            "location": 91,
            "return": [
                "'VideoFile'"
            ],
            "arguments": {
                "file_path": [
                    "Path"
                ],
                "display_name": [
                    "str"
                ]
            }
        },
        "VideoFile.__repr__": {
            "name": "__repr__",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "video_reuse_detector-master/middleware/models/__init__.py": {
        "init_app": {
            "name": "init_app",
            "location": 9,
            "return": [],
            "arguments": {
                "app": []
            }
        }
    },
    "video_reuse_detector-master/middleware/routes/files.py": {
        "uploadfiles": {
            "name": "uploadfiles",
            "location": 26,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "archivefiles": {
            "name": "archivefiles",
            "location": 31,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "info": {
            "name": "info",
            "location": 36,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "list_files": {
            "name": "list_files",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "generate_random_filename": {
            "name": "generate_random_filename",
            "location": 50,
            "return": [],
            "arguments": {
                "extension": []
            }
        },
        "upload_file": {
            "name": "upload_file",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "register_as_plugin": {
            "name": "register_as_plugin",
            "location": 168,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "upload_file.get_target_directory": {
            "name": "get_target_directory",
            "location": 63,
            "return": [],
            "arguments": {
                "file_type": []
            }
        },
        "upload_file.create_video_file": {
            "name": "create_video_file",
            "location": 138,
            "return": [
                "VideoFile"
            ],
            "arguments": {
                "display_name": [
                    "str"
                ],
                "upload_destination": [
                    "Path"
                ],
                "file_type": [
                    "VideoFileType"
                ]
            }
        }
    },
    "video_reuse_detector-master/middleware/routes/fingerprint.py": {
        "groupby_to_dict": {
            "name": "groupby_to_dict",
            "location": 23,
            "return": [],
            "arguments": {
                "iterable": [],
                "grouper": []
            }
        },
        "group_by_name_pairing": {
            "name": "group_by_name_pairing",
            "location": 27,
            "return": [],
            "arguments": {
                "fpcms": []
            }
        },
        "group_by_match_level": {
            "name": "group_by_match_level",
            "location": 34,
            "return": [],
            "arguments": {
                "fpcms": []
            }
        },
        "fetch_number_of_segments_for_video": {
            "name": "fetch_number_of_segments_for_video",
            "location": 43,
            "return": [
                "int"
            ],
            "arguments": {
                "video_name": [
                    "str"
                ]
            }
        },
        "structure_fingerprint_comparison_information": {
            "name": "structure_fingerprint_comparison_information",
            "location": 51,
            "return": [],
            "arguments": {
                "fpcms": [],
                "query_video_name": [],
                "reference_video_name": []
            }
        },
        "get_comparisons": {
            "name": "get_comparisons",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "comparisons_between": {
            "name": "comparisons_between",
            "location": 123,
            "return": [],
            "arguments": {
                "query_video_name": [],
                "reference_video_name": []
            }
        },
        "has_comparison": {
            "name": "has_comparison",
            "location": 135,
            "return": [],
            "arguments": {
                "query_video_name": [],
                "reference_video_name": []
            }
        },
        "names_of_fingerprinted_videos": {
            "name": "names_of_fingerprinted_videos",
            "location": 141,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "names": []
            }
        },
        "compute_comparisons": {
            "name": "compute_comparisons",
            "location": 162,
            "return": [],
            "arguments": {}
        },
        "register_as_plugin": {
            "name": "register_as_plugin",
            "location": 221,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "group_by_name_pairing.__group_by_name_pairing__": {
            "name": "__group_by_name_pairing__",
            "location": 28,
            "return": [],
            "arguments": {
                "fpcm": []
            }
        },
        "compute_comparisons.videos_with_fingerprints": {
            "name": "videos_with_fingerprints",
            "location": 163,
            "return": [
                "Tuple[(Set[str], Set[str])]"
            ],
            "arguments": {
                "query_video_names": [],
                "reference_video_names": []
            }
        }
    },
    "video_reuse_detector-master/middleware/routes/ping.py": {
        "register_as_plugin": {
            "name": "register_as_plugin",
            "location": 18,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "Ping.get": {
            "name": "get",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "video_reuse_detector-master/middleware/routes/__init__.py": {
        "init_app": {
            "name": "init_app",
            "location": 1,
            "return": [],
            "arguments": {
                "app": []
            }
        }
    },
    "video_reuse_detector-master/middleware/services/files.py": {
        "list_files": {
            "name": "list_files",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "info": {
            "name": "info",
            "location": 14,
            "return": [],
            "arguments": {
                "filename": []
            }
        }
    },
    "video_reuse_detector-master/middleware/services/fingerprint.py": {
        "__extract_fingerprint_collection__": {
            "name": "__extract_fingerprint_collection__",
            "location": 25,
            "return": [
                "List[FingerprintCollection]"
            ],
            "arguments": {
                "file_path": [
                    "Path"
                ]
            }
        },
        "__extract_fingerprints__": {
            "name": "__extract_fingerprints__",
            "location": 29,
            "return": [
                "Path"
            ],
            "arguments": {
                "file_path": [
                    "Path"
                ]
            }
        },
        "extract_fingerprints": {
            "name": "extract_fingerprints",
            "location": 78,
            "return": [
                "Path"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "__compare_fingerprints__": {
            "name": "__compare_fingerprints__",
            "location": 83,
            "return": [
                "List[FingerprintComparison]"
            ],
            "arguments": {
                "query_video_name": [],
                "reference_video_name": []
            }
        },
        "get_video_duration": {
            "name": "get_video_duration",
            "location": 98,
            "return": [
                "float"
            ],
            "arguments": {
                "video_name": [
                    "str"
                ]
            }
        },
        "model_from_comparison": {
            "name": "model_from_comparison",
            "location": 104,
            "return": [
                "FingerprintComparisonModel"
            ],
            "arguments": {
                "fpc": [
                    "FingerprintComparison"
                ]
            }
        },
        "compare_fingerprints": {
            "name": "compare_fingerprints",
            "location": 108,
            "return": [],
            "arguments": {
                "query_video_name": [],
                "reference_video_name": []
            }
        },
        "fingerprint_collections_for_video_with_name": {
            "name": "fingerprint_collections_for_video_with_name",
            "location": 135,
            "return": [],
            "arguments": {
                "video_name": []
            }
        }
    },
    "video_reuse_detector-master/middleware/services/__init__.py": {
        "init_app": {
            "name": "init_app",
            "location": 1,
            "return": [],
            "arguments": {
                "app": []
            }
        }
    },
    "video_reuse_detector-master/middleware/tests/__init__.py": {},
    "video_reuse_detector-master/middleware/tests/functional/test_files_api.py": {
        "get_json_objs": {
            "name": "get_json_objs",
            "location": 15,
            "return": [],
            "arguments": {
                "data_dict": []
            }
        },
        "FilesRoutesTest.create_app": {
            "name": "create_app",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilesRoutesTest.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilesRoutesTest.tearDown": {
            "name": "tearDown",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilesRoutesTest.test_list_files_empty": {
            "name": "test_list_files_empty",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilesRoutesTest.test_list_files_with_one_video": {
            "name": "test_list_files_with_one_video",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilesRoutesTest.test_file_info_route_for_file_that_does_not_exist": {
            "name": "test_file_info_route_for_file_that_does_not_exist",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilesRoutesTest.test_file_info_route": {
            "name": "test_file_info_route",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilesRoutesTest.test_GET_on_upload_should_fail": {
            "name": "test_GET_on_upload_should_fail",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilesRoutesTest.test_post_of_query_type_file": {
            "name": "test_post_of_query_type_file",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilesRoutesTest.test_post_of_reference_type_file": {
            "name": "test_post_of_reference_type_file",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilesRoutesTest.test_post_unknown_file_type": {
            "name": "test_post_unknown_file_type",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilesRoutesTest.test_post_without_a_file": {
            "name": "test_post_without_a_file",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilesRoutesTest.test_reupload_not_allowed": {
            "name": "test_reupload_not_allowed",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "video_reuse_detector-master/middleware/tests/functional/test_fingerprints_api.py": {
        "FingerprintComparisonTest.create_app": {
            "name": "create_app",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FingerprintComparisonTest.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FingerprintComparisonTest.tearDown": {
            "name": "tearDown",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FingerprintComparisonTest.test_empty_post": {
            "name": "test_empty_post",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FingerprintComparisonTest.test_comparing_non_existing_video_against_nothing": {
            "name": "test_comparing_non_existing_video_against_nothing",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FingerprintComparisonTest.test_comparing_non_existing_video_against_other_non_existing_videos": {
            "name": "test_comparing_non_existing_video_against_other_non_existing_videos",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FingerprintComparisonTest.test_comparing_video_against_others_that_do_not_exist": {
            "name": "test_comparing_video_against_others_that_do_not_exist",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FingerprintComparisonTest.test_comparing_video_against_another_for_which_there_is_a_comparison": {
            "name": "test_comparing_video_against_another_for_which_there_is_a_comparison",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FingerprintComparisonTest.test_comparing_video_against_multiple_others": {
            "name": "test_comparing_video_against_multiple_others",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FingerprintComparisonTest.test_comparing_video_against_multiple_others_bidirectional": {
            "name": "test_comparing_video_against_multiple_others_bidirectional",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FingerprintComparisonTest.test_unique_constraint": {
            "name": "test_unique_constraint",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "video_reuse_detector-master/middleware/tests/functional/test_ping.py": {
        "ConfigTest.create_app": {
            "name": "create_app",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigTest.test_ping": {
            "name": "test_ping",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "video_reuse_detector-master/middleware/tests/functional/test_video_file.py": {
        "VideoFileTest.create_app": {
            "name": "create_app",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VideoFileTest.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VideoFileTest.tearDown": {
            "name": "tearDown",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VideoFileTest.test_unique_constraint": {
            "name": "test_unique_constraint",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "video_reuse_detector-master/middleware/tests/functional/__init__.py": {},
    "video_reuse_detector-master/middleware/tests/unit/test_config.py": {
        "ConfigTest.create_app": {
            "name": "create_app",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigTest.test_development_config": {
            "name": "test_development_config",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigTest.test_testing_config": {
            "name": "test_testing_config",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "video_reuse_detector-master/middleware/tests/unit/test_fingerprint_collection_model.py": {
        "FingerprintCollectionModelTest.test_model_conversion": {
            "name": "test_model_conversion",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "video_reuse_detector-master/middleware/tests/unit/__init__.py": {},
    "video_reuse_detector-master/notebooks/1.0-fingerprinting-overview.py": {
        "fc": {
            "name": "fc",
            "location": 249,
            "return": [],
            "arguments": {
                "bgr_tuple": []
            }
        }
    },
    "video_reuse_detector-master/notebooks/2.0-fingerprint-comparison.py": {
        "best_match": {
            "name": "best_match",
            "location": 93,
            "return": [],
            "arguments": {
                "sorted_comparisons": [],
                "query_segment_id": []
            }
        },
        "filter_comparisons_by_level": {
            "name": "filter_comparisons_by_level",
            "location": 158,
            "return": [],
            "arguments": {
                "matches": [],
                "level": []
            }
        }
    },
    "video_reuse_detector-master/notebooks/3.0-benchmark-segment.py": {
        "__segment__": {
            "name": "__segment__",
            "location": 80,
            "return": [],
            "arguments": {
                "input_video": [],
                "output_directory": []
            }
        },
        "benchmark_segmentation": {
            "name": "benchmark_segmentation",
            "location": 97,
            "return": [],
            "arguments": {
                "videos": [],
                "segment_length": []
            }
        },
        "save_to_csv": {
            "name": "save_to_csv",
            "location": 114,
            "return": [],
            "arguments": {
                "benchmarks": [],
                "segment_length": []
            }
        }
    },
    "video_reuse_detector-master/notebooks/4.0-benchmark-fingerprinting-single-file.py": {
        "upload_query_file": {
            "name": "upload_query_file",
            "location": 79,
            "return": [],
            "arguments": {
                "file_path": [],
                "file_type": []
            }
        },
        "convert_backend_timestamp": {
            "name": "convert_backend_timestamp",
            "location": 113,
            "return": [],
            "arguments": {
                "time_str": []
            }
        },
        "on_fingerprinted": {
            "name": "on_fingerprinted",
            "location": 119,
            "return": [],
            "arguments": {
                "video_file_info": []
            }
        },
        "on_connect": {
            "name": "on_connect",
            "location": 153,
            "return": [],
            "arguments": {}
        },
        "fetch_file_info": {
            "name": "fetch_file_info",
            "location": 164,
            "return": [],
            "arguments": {
                "filename": []
            }
        }
    },
    "video_reuse_detector-master/notebooks/4.1-fetch-fingerprint-computation-comparison-times.py": {},
    "video_reuse_detector-master/notebooks/4.2-compare-fingerprint-computation-comparison-times-copy-codec.py": {},
    "video_reuse_detector-master/notebooks/5.0-replace-segment-with-downsample.py": {
        "get_frame_rate": {
            "name": "get_frame_rate",
            "location": 74,
            "return": [
                "float"
            ],
            "arguments": {
                "file_path": [
                    "Path"
                ]
            }
        },
        "chunks": {
            "name": "chunks",
            "location": 278,
            "return": [],
            "arguments": {
                "lst": [],
                "n": []
            }
        },
        "__downsample__": {
            "name": "__downsample__",
            "location": 183,
            "return": [
                "List[List[Path]]"
            ],
            "arguments": {
                "file_path": [
                    "Path"
                ],
                "output_directory": [
                    "Path"
                ]
            }
        },
        "extract_fingerprint_collection_with_keyframes_w_segmentation": {
            "name": "extract_fingerprint_collection_with_keyframes_w_segmentation",
            "location": 241,
            "return": [
                "Dict[(int, Tuple[(Keyframe, FingerprintCollection)])]"
            ],
            "arguments": {
                "file_path": [
                    "Path"
                ],
                "root_output_directory": [
                    "Path"
                ],
                "segment_length_in_seconds": []
            }
        },
        "extract_fingerprint_collection_with_keyframes": {
            "name": "extract_fingerprint_collection_with_keyframes",
            "location": 284,
            "return": [
                "Dict[(int, Tuple[(Keyframe, FingerprintCollection)])]"
            ],
            "arguments": {
                "file_path": [
                    "Path"
                ],
                "root_output_directory": [
                    "Path"
                ]
            }
        },
        "benchmark_fingerprint_extraction": {
            "name": "benchmark_fingerprint_extraction",
            "location": 333,
            "return": [],
            "arguments": {
                "videos": [],
                "extract": []
            }
        },
        "save_to_csv": {
            "name": "save_to_csv",
            "location": 345,
            "return": [],
            "arguments": {
                "benchmarks": [],
                "csv_label": []
            }
        }
    },
    "video_reuse_detector-master/notebooks/apply-video-filter.py": {},
    "video_reuse_detector-master/notebooks/notebook_util.py": {
        "rgb": {
            "name": "rgb",
            "location": 1,
            "return": [],
            "arguments": {
                "image": []
            }
        },
        "get_all_videos_in_directory": {
            "name": "get_all_videos_in_directory",
            "location": 17,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "directory": [
                    "Path"
                ]
            }
        },
        "get_all_videos": {
            "name": "get_all_videos",
            "location": 32,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "video_selector": {
            "name": "video_selector",
            "location": 48,
            "return": [],
            "arguments": {
                "select_multiple": [],
                "default": []
            }
        },
        "plot_keyframe": {
            "name": "plot_keyframe",
            "location": 75,
            "return": [],
            "arguments": {
                "ax": [],
                "keyframe": [
                    "Keyframe"
                ]
            }
        },
        "plot_stacked_color_correlation": {
            "name": "plot_stacked_color_correlation",
            "location": 82,
            "return": [],
            "arguments": {
                "axs": [],
                "query_fingerprint": [],
                "reference_fingerprint": []
            }
        },
        "plot_color_correlation": {
            "name": "plot_color_correlation",
            "location": 106,
            "return": [],
            "arguments": {
                "axs": [],
                "color_correlation": []
            }
        },
        "plot_color_correlation_from_keyframe": {
            "name": "plot_color_correlation_from_keyframe",
            "location": 123,
            "return": [],
            "arguments": {
                "axs": [],
                "keyframe": []
            }
        },
        "display_video": {
            "name": "display_video",
            "location": 132,
            "return": [],
            "arguments": {
                "selection": []
            }
        }
    },
    "video_reuse_detector-master/notebooks/recipe-video-selector.py": {},
    "video_reuse_detector-master/notebooks/sanity-check-compare-video-to-hflip.py": {
        "plot_keyframes": {
            "name": "plot_keyframes",
            "location": 80,
            "return": [],
            "arguments": {
                "id_to_keyframe_fingerprint_collection_map": []
            }
        },
        "best_match": {
            "name": "best_match",
            "location": 111,
            "return": [],
            "arguments": {
                "sorted_comparisons": [],
                "query_segment_id": []
            }
        },
        "filter_comparisons_by_level": {
            "name": "filter_comparisons_by_level",
            "location": 137,
            "return": [],
            "arguments": {
                "matches": [],
                "level": []
            }
        }
    },
    "video_reuse_detector-master/notebooks/sanity-check-compare-video-to-self-color-tint.py": {
        "plot_keyframes": {
            "name": "plot_keyframes",
            "location": 79,
            "return": [],
            "arguments": {
                "id_to_keyframe_fingerprint_collection_map": []
            }
        },
        "best_match": {
            "name": "best_match",
            "location": 110,
            "return": [],
            "arguments": {
                "sorted_comparisons": [],
                "query_segment_id": []
            }
        },
        "filter_comparisons_by_level": {
            "name": "filter_comparisons_by_level",
            "location": 131,
            "return": [],
            "arguments": {
                "matches": [],
                "level": []
            }
        }
    },
    "video_reuse_detector-master/notebooks/sanity-check-compare-video-to-self.py": {
        "plot_keyframes": {
            "name": "plot_keyframes",
            "location": 78,
            "return": [],
            "arguments": {
                "id_to_keyframe_fingerprint_collection_map": []
            }
        },
        "best_match": {
            "name": "best_match",
            "location": 109,
            "return": [],
            "arguments": {
                "sorted_comparisons": [],
                "query_segment_id": []
            }
        },
        "filter_comparisons_by_level": {
            "name": "filter_comparisons_by_level",
            "location": 135,
            "return": [],
            "arguments": {
                "matches": [],
                "level": []
            }
        }
    },
    "video_reuse_detector-master/notebooks/tool-csv-cleaner.py": {},
    "video_reuse_detector-master/notebooks/tool-fingerprint-compartor.py": {
        "sorted_comparisons_to_iterable": {
            "name": "sorted_comparisons_to_iterable",
            "location": 107,
            "return": [],
            "arguments": {
                "sorted_comparisons": []
            }
        },
        "model_from_fingerprint_comparison": {
            "name": "model_from_fingerprint_comparison",
            "location": 112,
            "return": [],
            "arguments": {
                "fpc": []
            }
        },
        "get_filename_without_extension": {
            "name": "get_filename_without_extension",
            "location": 117,
            "return": [],
            "arguments": {
                "str_path": []
            }
        },
        "get_csv_filename": {
            "name": "get_csv_filename",
            "location": 120,
            "return": [],
            "arguments": {
                "query_video_selection": [],
                "reference_video_selection": []
            }
        },
        "plot_fingerprints": {
            "name": "plot_fingerprints",
            "location": 158,
            "return": [],
            "arguments": {
                "query_fps_w_keyframes": [],
                "reference_fps_w_keyframes": [],
                "comparisons_sorted_by_segment_id": [],
                "query_input_offset": [],
                "reference_input_offset": [],
                "no_of_fps_on_display": []
            }
        }
    },
    "video_reuse_detector-master/notebooks/tool-fingerprint-extractor.py": {
        "plot_fingerprints": {
            "name": "plot_fingerprints",
            "location": 71,
            "return": [],
            "arguments": {
                "fps_w_keyframes": [],
                "input_offset": [],
                "no_of_fps_on_display": []
            }
        }
    },
    "video_reuse_detector-master/notebooks/tool-video-slicer.py": {},
    "video_reuse_detector-master/scripts/generate_access_token.py": {},
    "video_reuse_detector-master/tests/integration_test.py": {},
    "video_reuse_detector-master/tests/smoke_test.py": {},
    "video_reuse_detector-master/tests/test_color_correlation.py": {
        "rgb": {
            "name": "rgb",
            "location": 21,
            "return": [],
            "arguments": {
                "bgr": []
            }
        },
        "bgr": {
            "name": "bgr",
            "location": 25,
            "return": [],
            "arguments": {
                "rgb": []
            }
        },
        "single_colored_image": {
            "name": "single_colored_image",
            "location": 29,
            "return": [],
            "arguments": {
                "width": [],
                "height": [],
                "rgb_color": []
            }
        },
        "number_of_decimals": {
            "name": "number_of_decimals",
            "location": 46,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "load_image": {
            "name": "load_image",
            "location": 53,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "file_path": [
                    "Path"
                ],
                "flag": []
            }
        },
        "load_panorama1": {
            "name": "load_panorama1",
            "location": 69,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "flag": []
            }
        },
        "load_panorama2": {
            "name": "load_panorama2",
            "location": 76,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "flag": []
            }
        },
        "TestColorCorrelation.test_color_correlation_histogram_black_image": {
            "name": "test_color_correlation_histogram_black_image",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestColorCorrelation.test_color_correlation_histogram_red": {
            "name": "test_color_correlation_histogram_red",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestColorCorrelation.test_avg_intensity_per_color_channel_single_colored_image": {
            "name": "test_avg_intensity_per_color_channel_single_colored_image",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestColorCorrelation.test_avg_intensity_per_color_channel_two_colors": {
            "name": "test_avg_intensity_per_color_channel_two_colors",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestColorCorrelation.test_color_correlation_histogram_idempotency": {
            "name": "test_color_correlation_histogram_idempotency",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestColorCorrelation.test_color_correlation_histogram_values_sum_to_100": {
            "name": "test_color_correlation_histogram_values_sum_to_100",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestColorCorrelation.test_that_an_image_cc_histogram_is_always_similar_to_itself": {
            "name": "test_that_an_image_cc_histogram_is_always_similar_to_itself",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestColorCorrelation.test_color_correlation_histogram_can_be_recreated_from_encoding": {
            "name": "test_color_correlation_histogram_can_be_recreated_from_encoding",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestColorCorrelation.test_two_similar_images_have_histograms_that_are_very_similar": {
            "name": "test_two_similar_images_have_histograms_that_are_very_similar",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestColorCorrelation.test_color_correlation_histogram_grayscale": {
            "name": "test_color_correlation_histogram_grayscale",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestColorCorrelation.test_color_correlation_histogram_fixed_number_of_cases": {
            "name": "test_color_correlation_histogram_fixed_number_of_cases",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "image": []
            }
        },
        "TestColorCorrelation.test_trunc_yields_two_decimals_for_number_with_three_decimals": {
            "name": "test_trunc_yields_two_decimals_for_number_with_three_decimals",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestColorCorrelation.test_trunc_yields_two_decimals_for_number_with_two_decimals": {
            "name": "test_trunc_yields_two_decimals_for_number_with_two_decimals",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestColorCorrelation.test_trunc": {
            "name": "test_trunc",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "f": [],
                "no_of_decimals": []
            }
        }
    },
    "video_reuse_detector-master/tests/test_downsample.py": {
        "TestDownsample.test_downsample_default_parameters": {
            "name": "test_downsample_default_parameters",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "video_reuse_detector-master/tests/test_fingerprint.py": {
        "TestFingerprintComparison.test_comparison": {
            "name": "test_comparison",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFingerprintComparison.test_comparison.is_as_long_as_reference_video": {
            "name": "is_as_long_as_reference_video",
            "location": 57,
            "return": [],
            "arguments": {
                "l": []
            }
        }
    },
    "video_reuse_detector-master/tests/test_image_transformation.py": {
        "TestImageTransformation.test_fold_preserves_shape": {
            "name": "test_fold_preserves_shape",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "image": []
            }
        }
    },
    "video_reuse_detector-master/tests/test_keyframe.py": {
        "TestKeyframe.test_keyframe_creation": {
            "name": "test_keyframe_creation",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "video_reuse_detector-master/tests/test_orb.py": {
        "TestOrb.test_orb_self_similarity": {
            "name": "test_orb_self_similarity",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOrb.test_orb_similarity_rotation": {
            "name": "test_orb_similarity_rotation",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "video_reuse_detector-master/tests/test_segment.py": {
        "TestSegment.test_segment_default_parameters": {
            "name": "test_segment_default_parameters",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "video_reuse_detector-master/tests/test_slice.py": {
        "TestSlice.test_slice": {
            "name": "test_slice",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "video_reuse_detector-master/tests/unit_tests.py": {},
    "video_reuse_detector-master/tests/__init__.py": {},
    "video_reuse_detector-master/video_reuse_detector/color_correlation.py": {
        "empty_histogram": {
            "name": "empty_histogram",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "avg_intensity_per_color_channel": {
            "name": "avg_intensity_per_color_channel",
            "location": 28,
            "return": [],
            "arguments": {
                "block": []
            }
        },
        "color_transformation_and_block_splitting": {
            "name": "color_transformation_and_block_splitting",
            "location": 37,
            "return": [],
            "arguments": {
                "image": [],
                "nr_of_blocks": []
            }
        },
        "trunc": {
            "name": "trunc",
            "location": 78,
            "return": [],
            "arguments": {
                "number": [],
                "significant_decimals": []
            }
        },
        "feature_representation": {
            "name": "feature_representation",
            "location": 93,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "cc_histogram": [
                    "Mapping[(str, int)]"
                ]
            }
        },
        "normalized_color_correlation_histogram": {
            "name": "normalized_color_correlation_histogram",
            "location": 107,
            "return": [
                "Mapping[(str, float)]"
            ],
            "arguments": {
                "image": [
                    "np.ndarray"
                ]
            }
        },
        "color_correlation_histogram": {
            "name": "color_correlation_histogram",
            "location": 155,
            "return": [
                "Mapping[(str, int)]"
            ],
            "arguments": {
                "image": [
                    "np.ndarray"
                ],
                "nr_of_blocks": []
            }
        },
        "histogram_from_number": {
            "name": "histogram_from_number",
            "location": 174,
            "return": [
                "Mapping[(str, int)]"
            ],
            "arguments": {
                "as_number": [
                    "int"
                ]
            }
        },
        "ColorCorrelation.from_image": {
            "name": "from_image",
            "location": 194,
            "return": [
                "'ColorCorrelation'"
            ],
            "arguments": {
                "image": [
                    "np.ndarray"
                ]
            }
        },
        "ColorCorrelation.from_number": {
            "name": "from_number",
            "location": 204,
            "return": [
                "'ColorCorrelation'"
            ],
            "arguments": {
                "as_number": [
                    "int"
                ]
            }
        },
        "ColorCorrelation.similar_to": {
            "name": "similar_to",
            "location": 209,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'ColorCorrelation'"
                ]
            }
        }
    },
    "video_reuse_detector-master/video_reuse_detector/downsample.py": {
        "downsample": {
            "name": "downsample",
            "location": 9,
            "return": [
                "List[Path]"
            ],
            "arguments": {
                "input_video": [
                    "Path"
                ],
                "output_directory": [
                    "Path"
                ],
                "fps": []
            }
        }
    },
    "video_reuse_detector-master/video_reuse_detector/extract_audio.py": {
        "extract": {
            "name": "extract",
            "location": 9,
            "return": [
                "List[Path]"
            ],
            "arguments": {
                "input_video": [
                    "Path"
                ],
                "output_directory": [
                    "Path"
                ],
                "segment_length_in_seconds": []
            }
        }
    },
    "video_reuse_detector-master/video_reuse_detector/ffmpeg.py": {
        "format_outputs": {
            "name": "format_outputs",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "output_paths": [
                    "List[Path]"
                ]
            }
        },
        "extract_outputs": {
            "name": "extract_outputs",
            "location": 24,
            "return": [
                "List[Path]"
            ],
            "arguments": {
                "log_file": [
                    "str"
                ]
            }
        },
        "execute": {
            "name": "execute",
            "location": 42,
            "return": [
                "List[Path]"
            ],
            "arguments": {
                "cmd": [
                    "str"
                ],
                "output_directory": [
                    "Path"
                ],
                "remove_log": []
            }
        },
        "get_video_duration": {
            "name": "get_video_duration",
            "location": 90,
            "return": [
                "float"
            ],
            "arguments": {
                "file_path": [
                    "Path"
                ]
            }
        },
        "slice": {
            "name": "slice",
            "location": 104,
            "return": [
                "Path"
            ],
            "arguments": {
                "file_path": [
                    "Path"
                ],
                "ss": [
                    "str"
                ],
                "duration": [
                    "str"
                ],
                "output_directory": [
                    "Path"
                ],
                "overwrite": []
            }
        },
        "__method__": {
            "name": "__method__",
            "location": 145,
            "return": [],
            "arguments": {}
        },
        "get_output_file_name": {
            "name": "get_output_file_name",
            "location": 151,
            "return": [
                "Path"
            ],
            "arguments": {
                "input_file": [
                    "Path"
                ],
                "video_filter": [
                    "str"
                ],
                "params": []
            }
        },
        "blur": {
            "name": "blur",
            "location": 169,
            "return": [
                "Path"
            ],
            "arguments": {
                "input_file": [
                    "Path"
                ],
                "output_directory": [
                    "Path"
                ],
                "luma_radius": [],
                "chroma_radius": [],
                "luma_power": []
            }
        },
        "get_frame_at_time": {
            "name": "get_frame_at_time",
            "location": 201,
            "return": [
                "Path"
            ],
            "arguments": {
                "input_file": [
                    "Path"
                ],
                "output_directory": [
                    "Path"
                ],
                "timestamp": [
                    "str"
                ]
            }
        },
        "apply_frei0r_filter": {
            "name": "apply_frei0r_filter",
            "location": 211,
            "return": [
                "Path"
            ],
            "arguments": {
                "input_file": [
                    "Path"
                ],
                "output_directory": [
                    "Path"
                ],
                "video_filter": [
                    "str"
                ],
                "overwrite": []
            }
        },
        "softglow": {
            "name": "softglow",
            "location": 234,
            "return": [
                "Path"
            ],
            "arguments": {
                "input_file": [
                    "Path"
                ],
                "output_directory": [
                    "Path"
                ],
                "overwrite": []
            }
        },
        "hflip": {
            "name": "hflip",
            "location": 238,
            "return": [
                "Path"
            ],
            "arguments": {
                "input_file": [
                    "Path"
                ],
                "output_directory": [
                    "Path"
                ],
                "overwrite": []
            }
        },
        "get_video_dimensions": {
            "name": "get_video_dimensions",
            "location": 255,
            "return": [
                "str"
            ],
            "arguments": {
                "file_path": [
                    "Path"
                ]
            }
        },
        "tint": {
            "name": "tint",
            "location": 269,
            "return": [
                "Path"
            ],
            "arguments": {
                "input_file": [
                    "Path"
                ],
                "output_directory": [
                    "Path"
                ],
                "color": [],
                "overwrite": []
            }
        },
        "filters": {
            "name": "filters",
            "location": 295,
            "return": [],
            "arguments": {}
        }
    },
    "video_reuse_detector-master/video_reuse_detector/fingerprint.py": {
        "is_color_image": {
            "name": "is_color_image",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "image": [
                    "np.ndarray"
                ]
            }
        },
        "is_grayscale_image": {
            "name": "is_grayscale_image",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "image": [
                    "np.ndarray"
                ]
            }
        },
        "compare_thumbnails": {
            "name": "compare_thumbnails",
            "location": 71,
            "return": [
                "Tuple[(bool, float)]"
            ],
            "arguments": {
                "query": [
                    "FingerprintCollection"
                ],
                "reference": [
                    "FingerprintCollection"
                ],
                "similarity_threshold": []
            }
        },
        "compare_color_correlation": {
            "name": "compare_color_correlation",
            "location": 80,
            "return": [
                "Tuple[(bool, bool, float)]"
            ],
            "arguments": {
                "query": [
                    "FingerprintCollection"
                ],
                "reference": [
                    "FingerprintCollection"
                ],
                "similarity_threshold": []
            }
        },
        "compare_orb": {
            "name": "compare_orb",
            "location": 105,
            "return": [],
            "arguments": {
                "query": [],
                "reference": [],
                "similarity_threshold": []
            }
        },
        "compare_ssm": {
            "name": "compare_ssm",
            "location": 127,
            "return": [
                "Tuple[(bool, bool, float)]"
            ],
            "arguments": {
                "query": [
                    "FingerprintCollection"
                ],
                "reference": [
                    "FingerprintCollection"
                ]
            }
        },
        "__compare_fingerprints__": {
            "name": "__compare_fingerprints__",
            "location": 148,
            "return": [
                "__FingerprintComparison__"
            ],
            "arguments": {
                "query": [
                    "FingerprintCollection"
                ],
                "reference": [
                    "FingerprintCollection"
                ]
            }
        },
        "segment_id_keyframe_fp_map_to_list": {
            "name": "segment_id_keyframe_fp_map_to_list",
            "location": 308,
            "return": [
                "List[FingerprintCollection]"
            ],
            "arguments": {
                "segment_id_to_keyframe_fp_map": [
                    "Dict[(int, Tuple[(Keyframe, FingerprintCollection)])]"
                ]
            }
        },
        "extract_fingerprint_collection": {
            "name": "extract_fingerprint_collection",
            "location": 329,
            "return": [
                "List[FingerprintCollection]"
            ],
            "arguments": {
                "file_path": [
                    "Path"
                ],
                "root_output_directory": [
                    "Path"
                ]
            }
        },
        "chunks": {
            "name": "chunks",
            "location": 340,
            "return": [],
            "arguments": {
                "lst": [],
                "chunk_size": []
            }
        },
        "extract_fingerprint_collection_with_keyframes": {
            "name": "extract_fingerprint_collection_with_keyframes",
            "location": 346,
            "return": [
                "Dict[(int, Tuple[(Keyframe, FingerprintCollection)])]"
            ],
            "arguments": {
                "file_path": [
                    "Path"
                ],
                "root_output_directory": [
                    "Path"
                ]
            }
        },
        "FingerprintCollection.from_keyframe": {
            "name": "from_keyframe",
            "location": 46,
            "return": [
                "'FingerprintCollection'"
            ],
            "arguments": {
                "keyframe": [
                    "Keyframe"
                ],
                "video_name": [
                    "str"
                ],
                "segment_id": [
                    "int"
                ]
            }
        },
        "FingerprintComparison.compare": {
            "name": "compare",
            "location": 251,
            "return": [
                "'FingerprintComparison'"
            ],
            "arguments": {
                "query_fpc": [
                    "FingerprintCollection"
                ],
                "reference_fpc": [
                    "FingerprintCollection"
                ]
            }
        },
        "FingerprintComparison.compare_all": {
            "name": "compare_all",
            "location": 271,
            "return": [
                "Dict[(int, List['FingerprintComparison'])]"
            ],
            "arguments": {
                "query_fps": [
                    "List[FingerprintCollection]"
                ],
                "reference_fps": [
                    "List[FingerprintCollection]"
                ]
            }
        }
    },
    "video_reuse_detector-master/video_reuse_detector/image_transformation.py": {
        "average": {
            "name": "average",
            "location": 9,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "images": [
                    "List[np.ndarray]"
                ]
            }
        },
        "interpolation_method": {
            "name": "interpolation_method",
            "location": 27,
            "return": [],
            "arguments": {
                "scale_factor": []
            }
        },
        "scale": {
            "name": "scale",
            "location": 33,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "image": [
                    "np.ndarray"
                ],
                "scale_factor": [
                    "float"
                ]
            }
        },
        "grayscale": {
            "name": "grayscale",
            "location": 40,
            "return": [],
            "arguments": {
                "image": []
            }
        },
        "fold": {
            "name": "fold",
            "location": 44,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "image": [
                    "np.ndarray"
                ]
            }
        },
        "__map_over_blocks__": {
            "name": "__map_over_blocks__",
            "location": 76,
            "return": [],
            "arguments": {
                "image": [],
                "f": [],
                "no_of_blocks": []
            }
        },
        "normalized_grayscale": {
            "name": "normalized_grayscale",
            "location": 89,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "image": [
                    "np.ndarray"
                ],
                "no_of_blocks": []
            }
        },
        "normalized_grayscale.zscore": {
            "name": "zscore",
            "location": 90,
            "return": [],
            "arguments": {
                "block": []
            }
        }
    },
    "video_reuse_detector-master/video_reuse_detector/keyframe.py": {
        "average_frames": {
            "name": "average_frames",
            "location": 12,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "frames": [
                    "List[np.ndarray]"
                ]
            }
        },
        "crop_with_central_alignment": {
            "name": "crop_with_central_alignment",
            "location": 20,
            "return": [],
            "arguments": {
                "image": [
                    "np.ndarray"
                ],
                "m": [
                    "int"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "Keyframe.from_frame_paths": {
            "name": "from_frame_paths",
            "location": 38,
            "return": [
                "'Keyframe'"
            ],
            "arguments": {
                "frame_paths": [
                    "List[Path]"
                ]
            }
        },
        "Keyframe.from_frames": {
            "name": "from_frames",
            "location": 43,
            "return": [
                "'Keyframe'"
            ],
            "arguments": {
                "frames": [
                    "List[np.ndarray]"
                ]
            }
        },
        "Keyframe.__hash__": {
            "name": "__hash__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "video_reuse_detector-master/video_reuse_detector/main.py": {
        "list_keyframe_paths": {
            "name": "list_keyframe_paths",
            "location": 15,
            "return": [
                "List[Path]"
            ],
            "arguments": {
                "directory": [
                    "Path"
                ],
                "glob_pattern": [
                    "str"
                ]
            }
        },
        "load_keyframes": {
            "name": "load_keyframes",
            "location": 27,
            "return": [
                "Dict[(int, Keyframe)]"
            ],
            "arguments": {
                "directory": [
                    "Path"
                ]
            }
        },
        "fingerprint_collection_from_directory": {
            "name": "fingerprint_collection_from_directory",
            "location": 39,
            "return": [],
            "arguments": {
                "directory": [
                    "Path"
                ]
            }
        },
        "compute_similarity_between": {
            "name": "compute_similarity_between",
            "location": 54,
            "return": [],
            "arguments": {
                "query_fingerprints_directory": [
                    "Path"
                ],
                "reference_fingerprints_directory": [
                    "Path"
                ]
            }
        }
    },
    "video_reuse_detector-master/video_reuse_detector/orb.py": {
        "flatten": {
            "name": "flatten",
            "location": 13,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "nested_list": [
                    "List[List[T]]"
                ]
            }
        },
        "detect_and_extract": {
            "name": "detect_and_extract",
            "location": 24,
            "return": [],
            "arguments": {
                "image": [
                    "np.ndarray"
                ]
            }
        },
        "ORB.from_image": {
            "name": "from_image",
            "location": 48,
            "return": [
                "'ORB'"
            ],
            "arguments": {
                "image": [
                    "np.ndarray"
                ]
            }
        },
        "ORB.compute_percentage": {
            "name": "compute_percentage",
            "location": 58,
            "return": [],
            "arguments": {
                "no_of_good_matches": [],
                "no_of_possible_matches": []
            }
        },
        "ORB.similar_to": {
            "name": "similar_to",
            "location": 72,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'ORB'"
                ],
                "threshold": []
            }
        }
    },
    "video_reuse_detector-master/video_reuse_detector/profiling.py": {
        "timeit": {
            "name": "timeit",
            "location": 8,
            "return": [],
            "arguments": {
                "func": []
            }
        }
    },
    "video_reuse_detector-master/video_reuse_detector/segment.py": {
        "get_segment_id": {
            "name": "get_segment_id",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "Path"
                ]
            }
        },
        "segment": {
            "name": "segment",
            "location": 19,
            "return": [
                "List[Path]"
            ],
            "arguments": {
                "input_video": [
                    "Path"
                ],
                "output_directory": [
                    "Path"
                ],
                "segment_length_in_seconds": []
            }
        }
    },
    "video_reuse_detector-master/video_reuse_detector/similarity.py": {
        "hamming_distance": {
            "name": "hamming_distance",
            "location": 4,
            "return": [
                "float"
            ],
            "arguments": {
                "n1": [
                    "int"
                ],
                "n2": [
                    "int"
                ]
            }
        },
        "normalized_crossed_correlation": {
            "name": "normalized_crossed_correlation",
            "location": 8,
            "return": [
                "float"
            ],
            "arguments": {
                "qFp": [
                    "np.ndarray"
                ],
                "rFp": [
                    "np.ndarray"
                ]
            }
        },
        "compare_images": {
            "name": "compare_images",
            "location": 19,
            "return": [
                "float"
            ],
            "arguments": {
                "image1": [
                    "np.ndarray"
                ],
                "image2": [
                    "np.ndarray"
                ]
            }
        }
    },
    "video_reuse_detector-master/video_reuse_detector/thumbnail.py": {
        "Thumbnail.from_image": {
            "name": "from_image",
            "location": 15,
            "return": [],
            "arguments": {
                "image": [
                    "np.ndarray"
                ],
                "m": [],
                "no_of_blocks": []
            }
        },
        "Thumbnail.similar_to": {
            "name": "similar_to",
            "location": 30,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'Thumbnail'"
                ]
            }
        }
    },
    "video_reuse_detector-master/video_reuse_detector/util.py": {
        "compute_block_size": {
            "name": "compute_block_size",
            "location": 8,
            "return": [],
            "arguments": {
                "image": [],
                "nr_of_blocks": []
            }
        },
        "segment_id_from_path": {
            "name": "segment_id_from_path",
            "location": 16,
            "return": [
                "int"
            ],
            "arguments": {
                "path_or_str": [
                    "Union[(Path, str)]"
                ]
            }
        },
        "video_name_from_path": {
            "name": "video_name_from_path",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "path_or_str": [
                    "Union[(Path, str)]"
                ]
            }
        },
        "imread": {
            "name": "imread",
            "location": 62,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "path_or_str": [
                    "Union[(Path, str)]"
                ]
            }
        },
        "imwrite": {
            "name": "imwrite",
            "location": 67,
            "return": [],
            "arguments": {
                "path_or_str": [
                    "Union[(Path, str)]"
                ],
                "image": [
                    "np.ndarray"
                ]
            }
        }
    }
}
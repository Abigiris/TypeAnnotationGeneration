{
    "visualbert-master/unsupervised_visualbert/data/gqa/process_raw_data_scripts/process_data.py": {},
    "visualbert-master/unsupervised_visualbert/data/gqa/process_raw_data_scripts/process_data_all.py": {},
    "visualbert-master/unsupervised_visualbert/data/gqa/process_raw_data_scripts/process_submit_data.py": {},
    "visualbert-master/unsupervised_visualbert/data/mscoco_imgfeat/extract_coco_image.py": {
        "load_image_ids": {
            "name": "load_image_ids",
            "location": 42,
            "return": [],
            "arguments": {
                "img_root": [],
                "split_dir": []
            }
        },
        "generate_tsv": {
            "name": "generate_tsv",
            "location": 54,
            "return": [],
            "arguments": {
                "prototxt": [],
                "weights": [],
                "image_ids": [],
                "outfile": []
            }
        },
        "get_detections_from_im": {
            "name": "get_detections_from_im",
            "location": 83,
            "return": [],
            "arguments": {
                "net": [],
                "im_file": [],
                "image_id": [],
                "conf_thresh": []
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 137,
            "return": [],
            "arguments": {}
        }
    },
    "visualbert-master/unsupervised_visualbert/data/nlvr2/nlvr/nlvr2/data/filter_data.py": {
        "filter_examples": {
            "name": "filter_examples",
            "location": 4,
            "return": [],
            "arguments": {
                "filename": [],
                "balanced": []
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/data/nlvr2/nlvr/nlvr2/eval/compute_category_accuracy.py": {},
    "visualbert-master/unsupervised_visualbert/data/nlvr2/nlvr/nlvr2/eval/compute_filtered_accuracy.py": {},
    "visualbert-master/unsupervised_visualbert/data/nlvr2/nlvr/nlvr2/eval/metrics.py": {},
    "visualbert-master/unsupervised_visualbert/data/nlvr2/nlvr/nlvr2/util/download_images.py": {
        "save_image": {
            "name": "save_image",
            "location": 40,
            "return": [],
            "arguments": {
                "filename": [],
                "url": [],
                "img_hash": [],
                "wrong_hash_file": []
            }
        },
        "Timeout.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "sec": []
            }
        },
        "Timeout.__enter__": {
            "name": "__enter__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Timeout.__exit__": {
            "name": "__exit__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Timeout.raise_timeout": {
            "name": "raise_timeout",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/data/nlvr2/process_raw_data_scripts/process_dataset.py": {},
    "visualbert-master/unsupervised_visualbert/data/nlvr2_imgfeat/extract_nlvr2_image.py": {
        "load_image_ids": {
            "name": "load_image_ids",
            "location": 45,
            "return": [],
            "arguments": {
                "img_root": [],
                "split_dir": []
            }
        },
        "generate_tsv": {
            "name": "generate_tsv",
            "location": 69,
            "return": [],
            "arguments": {
                "prototxt": [],
                "weights": [],
                "image_ids": [],
                "outfile": []
            }
        },
        "get_detections_from_im": {
            "name": "get_detections_from_im",
            "location": 98,
            "return": [],
            "arguments": {
                "net": [],
                "im_file": [],
                "image_id": [],
                "conf_thresh": []
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 152,
            "return": [],
            "arguments": {}
        }
    },
    "visualbert-master/unsupervised_visualbert/data/vg_gqa_imgfeat/extract_gqa_image.py": {
        "load_image_ids": {
            "name": "load_image_ids",
            "location": 35,
            "return": [],
            "arguments": {
                "img_root": []
            }
        },
        "generate_tsv": {
            "name": "generate_tsv",
            "location": 45,
            "return": [],
            "arguments": {
                "prototxt": [],
                "weights": [],
                "image_ids": [],
                "outfile": []
            }
        },
        "get_detections_from_im": {
            "name": "get_detections_from_im",
            "location": 74,
            "return": [],
            "arguments": {
                "net": [],
                "im_file": [],
                "image_id": [],
                "conf_thresh": []
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 128,
            "return": [],
            "arguments": {}
        }
    },
    "visualbert-master/unsupervised_visualbert/src/param.py": {
        "get_optimizer": {
            "name": "get_optimizer",
            "location": 13,
            "return": [],
            "arguments": {
                "optim": []
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "parse_args.Unbuffered.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "stream": []
            }
        },
        "parse_args.Unbuffered.write": {
            "name": "write",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "parse_args.Unbuffered.flush": {
            "name": "flush",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/utils.py": {
        "load_obj_tsv": {
            "name": "load_obj_tsv",
            "location": 17,
            "return": [],
            "arguments": {
                "fname": [],
                "topk": []
            }
        },
        "load_obj_tsv_save_to_h5": {
            "name": "load_obj_tsv_save_to_h5",
            "location": 57,
            "return": [],
            "arguments": {
                "fname": [],
                "save_h5_name": [],
                "save_json_name": [],
                "all_examples": []
            }
        },
        "create_slim_h5": {
            "name": "create_slim_h5",
            "location": 115,
            "return": [],
            "arguments": {
                "fname": [],
                "save_h5_name": [],
                "save_json_name": [],
                "all_examples": [],
                "img_ids_to_keep": []
            }
        },
        "load_lxmert_sgg": {
            "name": "load_lxmert_sgg",
            "location": 175,
            "return": [],
            "arguments": {
                "path": [],
                "model": []
            }
        },
        "load_lxmert_sgg_pretrain": {
            "name": "load_lxmert_sgg_pretrain",
            "location": 192,
            "return": [],
            "arguments": {
                "path": [],
                "model": []
            }
        },
        "load_lxmert_to_sgg": {
            "name": "load_lxmert_to_sgg",
            "location": 209,
            "return": [],
            "arguments": {
                "path": [],
                "model": []
            }
        },
        "load_state_dict_flexible": {
            "name": "load_state_dict_flexible",
            "location": 227,
            "return": [],
            "arguments": {
                "model": [],
                "state_dict": []
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/lxrt/entry.py": {
        "get_padding_lengths": {
            "name": "get_padding_lengths",
            "location": 27,
            "return": [],
            "arguments": {
                "list_of_np_array": []
            }
        },
        "pad_np_arrays": {
            "name": "pad_np_arrays",
            "location": 35,
            "return": [],
            "arguments": {
                "list_of_np_array": [],
                "padding_value": [],
                "dtype": [],
                "cuda": []
            }
        },
        "convert_sents_to_features": {
            "name": "convert_sents_to_features",
            "location": 79,
            "return": [],
            "arguments": {
                "sents": [],
                "max_seq_length": [],
                "tokenizer": []
            }
        },
        "convert_sents_to_features_tensors": {
            "name": "convert_sents_to_features_tensors",
            "location": 116,
            "return": [],
            "arguments": {
                "sents": [],
                "max_seq_length": [],
                "tokenizer": []
            }
        },
        "convert_tags_to_tensorts": {
            "name": "convert_tags_to_tensorts",
            "location": 156,
            "return": [],
            "arguments": {
                "tags": [],
                "cuda": []
            }
        },
        "convert_sent_features_to_features": {
            "name": "convert_sent_features_to_features",
            "location": 169,
            "return": [],
            "arguments": {
                "sents": [],
                "max_seq_length": [],
                "tokenizer": []
            }
        },
        "set_visual_config": {
            "name": "set_visual_config",
            "location": 207,
            "return": [],
            "arguments": {
                "args": [],
                "VISUAL_CONFIG": []
            }
        },
        "InputFeatures.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "input_mask": [],
                "segment_ids": []
            }
        },
        "LXRTEncoder.__init__": {
            "name": "__init__",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "max_seq_length": [],
                "mode": []
            }
        },
        "LXRTEncoder.multi_gpu": {
            "name": "multi_gpu",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LXRTEncoder.dim": {
            "name": "dim",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LXRTEncoder.forward": {
            "name": "forward",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "sents": [],
                "feats": [],
                "visual_attention_mask": [],
                "input_already_tokenized": [],
                "visual_feats_seg_ids": []
            }
        },
        "LXRTEncoder.save": {
            "name": "save",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "LXRTEncoder.load": {
            "name": "load",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/lxrt/file_utils.py": {
        "url_to_filename": {
            "name": "url_to_filename",
            "location": 37,
            "return": [],
            "arguments": {
                "url": [],
                "etag": []
            }
        },
        "filename_to_url": {
            "name": "filename_to_url",
            "location": 55,
            "return": [],
            "arguments": {
                "filename": [],
                "cache_dir": []
            }
        },
        "cached_path": {
            "name": "cached_path",
            "location": 81,
            "return": [],
            "arguments": {
                "url_or_filename": [],
                "cache_dir": []
            }
        },
        "split_s3_path": {
            "name": "split_s3_path",
            "location": 111,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "s3_request": {
            "name": "s3_request",
            "location": 124,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "s3_etag": {
            "name": "s3_etag",
            "location": 144,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "s3_get": {
            "name": "s3_get",
            "location": 153,
            "return": [],
            "arguments": {
                "url": [],
                "temp_file": []
            }
        },
        "http_get": {
            "name": "http_get",
            "location": 160,
            "return": [],
            "arguments": {
                "url": [],
                "temp_file": []
            }
        },
        "get_from_cache": {
            "name": "get_from_cache",
            "location": 172,
            "return": [],
            "arguments": {
                "url": [],
                "cache_dir": []
            }
        },
        "read_set_from_file": {
            "name": "read_set_from_file",
            "location": 232,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "get_file_extension": {
            "name": "get_file_extension",
            "location": 244,
            "return": [],
            "arguments": {
                "path": [],
                "dot": [],
                "lower": []
            }
        },
        "s3_request.wrapper": {
            "name": "wrapper",
            "location": 131,
            "return": [],
            "arguments": {
                "url": []
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/lxrt/h5_data.py": {
        "chunks": {
            "name": "chunks",
            "location": 15,
            "return": [],
            "arguments": {
                "lst": [],
                "n": []
            }
        },
        "CustomBatchSampler.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "datasets": [],
                "batch_size": [],
                "upsample_ratios": [],
                "reduce_to_non_batch_sampler": []
            }
        },
        "CustomBatchSampler.prepare_indexes": {
            "name": "prepare_indexes",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomBatchSampler.__iter__": {
            "name": "__iter__",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomBatchSampler.__len__": {
            "name": "__len__",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConcateDataset.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "datasets": []
            }
        },
        "ConcateDataset.__getitem__": {
            "name": "__getitem__",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "ConcateDataset.__len__": {
            "name": "__len__",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConcateH5.__init__": {
            "name": "__init__",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "list_of_h5": []
            }
        },
        "ConcateH5.__getitem__": {
            "name": "__getitem__",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "ConcateH5.__len__": {
            "name": "__len__",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImageFeatureDataset.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "h5_features": [],
                "h5_boxes": [],
                "h5_objects_id": [],
                "h5_objects_conf": [],
                "h5_attrs_id": [],
                "h5_attrs_conf": [],
                "h5_wh": [],
                "ids_to_index": [],
                "h5_num_boxes": [],
                "version_3": []
            }
        },
        "ImageFeatureDataset.__getitem__": {
            "name": "__getitem__",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "img_id": []
            }
        },
        "ImageFeatureDataset.get_everything_except_features": {
            "name": "get_everything_except_features",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "img_id": []
            }
        },
        "ImageFeatureDataset.create": {
            "name": "create",
            "location": 226,
            "return": [],
            "arguments": {
                "cls": [],
                "sources": [],
                "Split2ImgFeatPath_h5": [],
                "load_custom_h5_version2": [],
                "load_custom_h5_version3": [],
                "text_only": [],
                "on_memory": []
            }
        },
        "ImageFeatureDataset.load_custom_h5": {
            "name": "load_custom_h5",
            "location": 292,
            "return": [],
            "arguments": {
                "h5_file_name": [],
                "on_memory": [],
                "text_only": []
            }
        },
        "ImageFeatureDataset.load_custom_h5_version2": {
            "name": "load_custom_h5_version2",
            "location": 318,
            "return": [],
            "arguments": {
                "h5_file_name": [],
                "on_memory": [],
                "text_only": []
            }
        },
        "ImageFeatureDataset.load_custom_h5_version3": {
            "name": "load_custom_h5_version3",
            "location": 362,
            "return": [],
            "arguments": {
                "h5_file_name": [],
                "on_memory": [],
                "keep_top_1": []
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/lxrt/modeling.py": {
        "load_tf_weights_in_bert": {
            "name": "load_tf_weights_in_bert",
            "location": 51,
            "return": [],
            "arguments": {
                "model": [],
                "tf_checkpoint_path": []
            }
        },
        "gelu": {
            "name": "gelu",
            "location": 112,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "swish": {
            "name": "swish",
            "location": 134,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "_cat_with_none": {
            "name": "_cat_with_none",
            "location": 753,
            "return": [],
            "arguments": {
                "feat_1": [],
                "feat_2": [],
                "dim": []
            }
        },
        "_split_with_none": {
            "name": "_split_with_none",
            "location": 760,
            "return": [],
            "arguments": {
                "lang_feats": [],
                "visn_feats": [],
                "joint_feats": []
            }
        },
        "GeLU.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeLU.forward": {
            "name": "forward",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "VisualConfig.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "l_layers": [],
                "x_layers": [],
                "r_layers": []
            }
        },
        "VisualConfig.set_visual_dims": {
            "name": "set_visual_dims",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "feat_dim": [],
                "pos_dim": []
            }
        },
        "BertConfig.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "vocab_size_or_config_json_file": [],
                "hidden_size": [],
                "num_hidden_layers": [],
                "num_attention_heads": [],
                "intermediate_size": [],
                "hidden_act": [],
                "hidden_dropout_prob": [],
                "attention_probs_dropout_prob": [],
                "max_position_embeddings": [],
                "type_vocab_size": [],
                "initializer_range": []
            }
        },
        "BertConfig.from_dict": {
            "name": "from_dict",
            "location": 253,
            "return": [],
            "arguments": {
                "cls": [],
                "json_object": []
            }
        },
        "BertConfig.from_json_file": {
            "name": "from_json_file",
            "location": 261,
            "return": [],
            "arguments": {
                "cls": [],
                "json_file": []
            }
        },
        "BertConfig.__repr__": {
            "name": "__repr__",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BertConfig.to_dict": {
            "name": "to_dict",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BertConfig.to_json_string": {
            "name": "to_json_string",
            "location": 275,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BertEmbeddings.__init__": {
            "name": "__init__",
            "location": 286,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertEmbeddings.forward": {
            "name": "forward",
            "location": 300,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "token_type_ids": [],
                "attribute_ids": [],
                "symbolic_embedding": []
            }
        },
        "BertEmbeddings.special_embedding": {
            "name": "special_embedding",
            "location": 337,
            "return": [],
            "arguments": {
                "self": [],
                "tokenized_words": []
            }
        },
        "BertAttention.__init__": {
            "name": "__init__",
            "location": 350,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "ctx_dim": []
            }
        },
        "BertAttention.transpose_for_scores": {
            "name": "transpose_for_scores",
            "location": 369,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "BertAttention.forward": {
            "name": "forward",
            "location": 374,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": [],
                "context": [],
                "attention_mask": []
            }
        },
        "BertAttOutput.__init__": {
            "name": "__init__",
            "location": 407,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertAttOutput.forward": {
            "name": "forward",
            "location": 413,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": [],
                "input_tensor": []
            }
        },
        "BertCrossattLayer.__init__": {
            "name": "__init__",
            "location": 421,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertCrossattLayer.forward": {
            "name": "forward",
            "location": 426,
            "return": [],
            "arguments": {
                "self": [],
                "input_tensor": [],
                "ctx_tensor": [],
                "ctx_att_mask": []
            }
        },
        "BertSelfattLayer.__init__": {
            "name": "__init__",
            "location": 433,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertSelfattLayer.forward": {
            "name": "forward",
            "location": 438,
            "return": [],
            "arguments": {
                "self": [],
                "input_tensor": [],
                "attention_mask": []
            }
        },
        "BertIntermediate.__init__": {
            "name": "__init__",
            "location": 446,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertIntermediate.forward": {
            "name": "forward",
            "location": 454,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": []
            }
        },
        "BertOutput.__init__": {
            "name": "__init__",
            "location": 461,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertOutput.forward": {
            "name": "forward",
            "location": 467,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": [],
                "input_tensor": []
            }
        },
        "BertLayer.__init__": {
            "name": "__init__",
            "location": 474,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertLayer.forward": {
            "name": "forward",
            "location": 480,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": [],
                "attention_mask": []
            }
        },
        "BertEmbeddingsWithVisualEmbedding.__init__": {
            "name": "__init__",
            "location": 501,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertEmbeddingsWithVisualEmbedding.initialize_visual_position_type_embeddings": {
            "name": "initialize_visual_position_type_embeddings",
            "location": 543,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BertEmbeddingsWithVisualEmbedding.initialize_symbolic_embeddings": {
            "name": "initialize_symbolic_embeddings",
            "location": 550,
            "return": [],
            "arguments": {
                "self": [],
                "tokenized_words": []
            }
        },
        "BertEmbeddingsWithVisualEmbedding.forward": {
            "name": "forward",
            "location": 561,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "token_type_ids": [],
                "visual_embeddings": [],
                "visual_embeddings_type": [],
                "position_embeddings_visual": [],
                "image_text_alignment": [],
                "confidence": [],
                "position_ids": [],
                "boxes": [],
                "visual_tags": [],
                "visual_tags_box": [],
                "visual_tags_type": [],
                "visual_tags_segment_ids": []
            }
        },
        "BertEmbeddingsWithVisualEmbedding.unfreeze_obj_feat": {
            "name": "unfreeze_obj_feat",
            "location": 650,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LXRTXLayer.__init__": {
            "name": "__init__",
            "location": 668,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "LXRTXLayer.cross_att": {
            "name": "cross_att",
            "location": 683,
            "return": [],
            "arguments": {
                "self": [],
                "lang_input": [],
                "lang_attention_mask": [],
                "visn_input": [],
                "visn_attention_mask": []
            }
        },
        "LXRTXLayer.self_att": {
            "name": "self_att",
            "location": 689,
            "return": [],
            "arguments": {
                "self": [],
                "lang_input": [],
                "lang_attention_mask": [],
                "visn_input": [],
                "visn_attention_mask": []
            }
        },
        "LXRTXLayer.output_fc": {
            "name": "output_fc",
            "location": 695,
            "return": [],
            "arguments": {
                "self": [],
                "lang_input": [],
                "visn_input": []
            }
        },
        "LXRTXLayer.forward": {
            "name": "forward",
            "location": 705,
            "return": [],
            "arguments": {
                "self": [],
                "lang_feats": [],
                "lang_attention_mask": [],
                "visn_feats": [],
                "visn_attention_mask": []
            }
        },
        "VisualFeatEncoder.__init__": {
            "name": "__init__",
            "location": 720,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "VisualFeatEncoder.forward": {
            "name": "forward",
            "location": 735,
            "return": [],
            "arguments": {
                "self": [],
                "visn_input": []
            }
        },
        "LXRTEncoder.__init__": {
            "name": "__init__",
            "location": 770,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "LXRTEncoder.forward": {
            "name": "forward",
            "location": 824,
            "return": [],
            "arguments": {
                "self": [],
                "lang_feats": [],
                "lang_attention_mask": [],
                "visn_feats": [],
                "visn_attention_mask": [],
                "bypass_visual_feat": [],
                "bypass_mask": [],
                "layer_limit": []
            }
        },
        "BertPooler.__init__": {
            "name": "__init__",
            "location": 907,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertPooler.forward": {
            "name": "forward",
            "location": 912,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": []
            }
        },
        "BertPredictionHeadTransform.__init__": {
            "name": "__init__",
            "location": 922,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertPredictionHeadTransform.forward": {
            "name": "forward",
            "location": 931,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": []
            }
        },
        "BertLMPredictionHead.__init__": {
            "name": "__init__",
            "location": 938,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "bert_model_embedding_weights": []
            }
        },
        "BertLMPredictionHead.forward": {
            "name": "forward",
            "location": 950,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": []
            }
        },
        "BertVisualAnswerHead.__init__": {
            "name": "__init__",
            "location": 957,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "num_answers": []
            }
        },
        "BertVisualAnswerHead.forward": {
            "name": "forward",
            "location": 967,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": []
            }
        },
        "BertVisualObjHead.__init__": {
            "name": "__init__",
            "location": 972,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "visual_losses": []
            }
        },
        "BertVisualObjHead.forward": {
            "name": "forward",
            "location": 991,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": []
            }
        },
        "BertPreTrainingHeads.__init__": {
            "name": "__init__",
            "location": 1000,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "bert_model_embedding_weights": []
            }
        },
        "BertPreTrainingHeads.forward": {
            "name": "forward",
            "location": 1008,
            "return": [],
            "arguments": {
                "self": [],
                "sequence_output": [],
                "pooled_output": [],
                "calculate_seq_score": []
            }
        },
        "BertPreTrainedModel.__init__": {
            "name": "__init__",
            "location": 1024,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertPreTrainedModel.init_bert_weights": {
            "name": "init_bert_weights",
            "location": 1035,
            "return": [],
            "arguments": {
                "self": [],
                "module": []
            }
        },
        "BertPreTrainedModel.from_pretrained": {
            "name": "from_pretrained",
            "location": 1049,
            "return": [],
            "arguments": {
                "cls": [],
                "pretrained_model_name_or_path": [],
                "state_dict": [],
                "cache_dir": [],
                "from_tf": []
            }
        },
        "LXRTModel.__init__": {
            "name": "__init__",
            "location": 1187,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "LXRTModel.forward": {
            "name": "forward",
            "location": 1197,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "token_type_ids": [],
                "attention_mask": [],
                "visual_feats": [],
                "visual_attention_mask": [],
                "position_embeddings_visual": [],
                "visual_tags": [],
                "visual_tags_mask": [],
                "visual_tags_box": [],
                "visual_tags_type": [],
                "visual_tags_segment_ids": [],
                "visual_feats_seg_ids": []
            }
        },
        "LXRTPretraining.__init__": {
            "name": "__init__",
            "location": 1299,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "args": [],
                "task_mask_lm": [],
                "task_matched": [],
                "task_obj_predict": [],
                "visual_losses": [],
                "task_qa": [],
                "num_answers": []
            }
        },
        "LXRTPretraining.special_initialize_pretraining_head": {
            "name": "special_initialize_pretraining_head",
            "location": 1335,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LXRTPretraining.forward": {
            "name": "forward",
            "location": 1339,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "token_type_ids": [],
                "attention_mask": [],
                "masked_lm_labels": [],
                "visual_feats": [],
                "pos": [],
                "obj_labels": [],
                "matched_label": [],
                "ans": [],
                "visual_tags": [],
                "visual_tags_mask": [],
                "visual_tags_box": [],
                "visual_tags_type": [],
                "visual_tags_objective": [],
                "visual_tags_mismatch": [],
                "visual_tags_segment_ids": [],
                "visual_feats_seg_ids": [],
                "return_cross_relationship_score": []
            }
        },
        "LXRTFeatureExtraction.__init__": {
            "name": "__init__",
            "location": 1472,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "mode": []
            }
        },
        "LXRTFeatureExtraction.forward": {
            "name": "forward",
            "location": 1483,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "token_type_ids": [],
                "attention_mask": [],
                "visual_feats": [],
                "visual_attention_mask": [],
                "return_both": [],
                "visual_feats_seg_ids": []
            }
        },
        "BertPreTrainedModel.from_pretrained.load": {
            "name": "load",
            "location": 1160,
            "return": [],
            "arguments": {
                "module": [],
                "prefix": []
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/lxrt/optimization.py": {
        "warmup_cosine": {
            "name": "warmup_cosine",
            "location": 26,
            "return": [],
            "arguments": {
                "x": [],
                "warmup": []
            }
        },
        "warmup_constant": {
            "name": "warmup_constant",
            "location": 31,
            "return": [],
            "arguments": {
                "x": [],
                "warmup": []
            }
        },
        "warmup_linear": {
            "name": "warmup_linear",
            "location": 38,
            "return": [],
            "arguments": {
                "x": [],
                "warmup": []
            }
        },
        "BertAdam.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "params": [],
                "lr": [],
                "warmup": [],
                "t_total": [],
                "schedule": [],
                "b1": [],
                "b2": [],
                "e": [],
                "weight_decay": [],
                "max_grad_norm": []
            }
        },
        "BertAdam.get_lr": {
            "name": "get_lr",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BertAdam.step": {
            "name": "step",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "closure": []
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/lxrt/symbolic_vocabulary.py": {
        "SymbolicVocab.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [],
            "arguments": {
                "self": [],
                "object_path": [],
                "attribute_path": [],
                "cls_token": [],
                "sep_token": [],
                "mask_token": [],
                "take_fisrt": []
            }
        },
        "SymbolicVocab.__len__": {
            "name": "__len__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SymbolicVocab.obj_id2word": {
            "name": "obj_id2word",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "SymbolicVocab.attr_id2word": {
            "name": "attr_id2word",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "SymbolicVocab.get_symbolic_list": {
            "name": "get_symbolic_list",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "tokenizer": []
            }
        },
        "SymbolicVocab.get_seg_id": {
            "name": "get_seg_id",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "word_id": []
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/lxrt/tokenization.py": {
        "load_vocab": {
            "name": "load_vocab",
            "location": 48,
            "return": [],
            "arguments": {
                "vocab_file": []
            }
        },
        "whitespace_tokenize": {
            "name": "whitespace_tokenize",
            "location": 63,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "_is_whitespace": {
            "name": "_is_whitespace",
            "location": 351,
            "return": [],
            "arguments": {
                "char": []
            }
        },
        "_is_control": {
            "name": "_is_control",
            "location": 363,
            "return": [],
            "arguments": {
                "char": []
            }
        },
        "_is_punctuation": {
            "name": "_is_punctuation",
            "location": 375,
            "return": [],
            "arguments": {
                "char": []
            }
        },
        "BertTokenizer.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "vocab_file": [],
                "do_lower_case": [],
                "max_len": [],
                "do_basic_tokenize": [],
                "never_split": []
            }
        },
        "BertTokenizer.tokenize": {
            "name": "tokenize",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "BertTokenizer.convert_tokens_to_ids": {
            "name": "convert_tokens_to_ids",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": []
            }
        },
        "BertTokenizer.convert_ids_to_tokens": {
            "name": "convert_ids_to_tokens",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "ids": []
            }
        },
        "BertTokenizer.from_pretrained": {
            "name": "from_pretrained",
            "location": 136,
            "return": [],
            "arguments": {
                "cls": [],
                "pretrained_model_name_or_path": [],
                "cache_dir": []
            }
        },
        "BasicTokenizer.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "do_lower_case": [],
                "never_split": []
            }
        },
        "BasicTokenizer.tokenize": {
            "name": "tokenize",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "BasicTokenizer._run_strip_accents": {
            "name": "_run_strip_accents",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "BasicTokenizer._run_split_on_punc": {
            "name": "_run_split_on_punc",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "BasicTokenizer._tokenize_chinese_chars": {
            "name": "_tokenize_chinese_chars",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "BasicTokenizer._is_chinese_char": {
            "name": "_is_chinese_char",
            "location": 255,
            "return": [],
            "arguments": {
                "self": [],
                "cp": []
            }
        },
        "BasicTokenizer._clean_text": {
            "name": "_clean_text",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "WordpieceTokenizer.__init__": {
            "name": "__init__",
            "location": 294,
            "return": [],
            "arguments": {
                "self": [],
                "vocab": [],
                "unk_token": [],
                "max_input_chars_per_word": []
            }
        },
        "WordpieceTokenizer.tokenize": {
            "name": "tokenize",
            "location": 299,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/pretrain/box.py": {
        "heuristic_filter": {
            "name": "heuristic_filter",
            "location": 4,
            "return": [],
            "arguments": {
                "box_a": [],
                "box_b": [],
                "image_size": [],
                "threshhold": []
            }
        },
        "determine_box_position_type": {
            "name": "determine_box_position_type",
            "location": 30,
            "return": [],
            "arguments": {
                "box_a": [],
                "box_b": [],
                "image_size": []
            }
        },
        "add_to_the_left_to_the_right_relation": {
            "name": "add_to_the_left_to_the_right_relation",
            "location": 54,
            "return": [],
            "arguments": {
                "box_a": [],
                "box_b": [],
                "image_size": [],
                "y_overlap_ratio_thresh": [],
                "x_overlap_ratio_thresh": []
            }
        },
        "boxlist_iou": {
            "name": "boxlist_iou",
            "location": 81,
            "return": [],
            "arguments": {
                "boxlist1": [],
                "boxlist2": []
            }
        },
        "bbox_intersections": {
            "name": "bbox_intersections",
            "location": 124,
            "return": [],
            "arguments": {
                "box_a": [],
                "box_b": []
            }
        },
        "bbox_overlaps": {
            "name": "bbox_overlaps",
            "location": 148,
            "return": [],
            "arguments": {
                "box_a": [],
                "box_b": []
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/pretrain/lxmert_data.py": {
        "make_uid": {
            "name": "make_uid",
            "location": 146,
            "return": [],
            "arguments": {
                "img_id": [],
                "dset": [],
                "sent_idx": []
            }
        },
        "load_vocabs": {
            "name": "load_vocabs",
            "location": 150,
            "return": [],
            "arguments": {}
        },
        "random_word": {
            "name": "random_word",
            "location": 170,
            "return": [],
            "arguments": {
                "tokens": [],
                "tokenizer": []
            }
        },
        "InputExample.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "uid": [],
                "sent": [],
                "visual_feats": [],
                "obj_labels": [],
                "attr_labels": [],
                "is_matched": [],
                "label": [],
                "sent_b": [],
                "use_visual_tag_flag": [],
                "mlm_labels": [],
                "token_ids": [],
                "max_seq_len": []
            }
        },
        "InputFeatures.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "input_mask": [],
                "segment_ids": [],
                "lm_label_ids": [],
                "visual_feats": [],
                "obj_labels": [],
                "is_matched": [],
                "ans": [],
                "visual_tags": [],
                "visual_tags_objective": [],
                "visual_tags_mask": [],
                "visual_tags_box": [],
                "visual_tags_mismatch": [],
                "obj_labels_transformed_mismatch": [],
                "visual_tags_box_mismatch": [],
                "use_visual_tag_flag": [],
                "visual_tags_segment_ids": [],
                "visual_feats_seg_ids": []
            }
        },
        "LXMERTDataset.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "splits": [
                    "str"
                ],
                "qa_sets": []
            }
        },
        "LXMERTDataset.__len__": {
            "name": "__len__",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LXMERTTorchDataset.__init__": {
            "name": "__init__",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": [
                    "LXMERTDataset"
                ],
                "topk": [],
                "sgg_dataset": [],
                "image_only": [],
                "text_only": [],
                "use_visual_tag_flag": [],
                "limit_source": [],
                "available_split_for_cc": []
            }
        },
        "LXMERTTorchDataset.compress": {
            "name": "compress",
            "location": 385,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LXMERTTorchDataset.compress_list_of_strings": {
            "name": "compress_list_of_strings",
            "location": 395,
            "return": [],
            "arguments": {
                "self": [],
                "list_of_string": [],
                "name": []
            }
        },
        "LXMERTTorchDataset.decompress_string_index": {
            "name": "decompress_string_index",
            "location": 409,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "shared_array": [],
                "record_position": []
            }
        },
        "LXMERTTorchDataset.decompress_getitem__": {
            "name": "decompress_getitem__",
            "location": 413,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "LXMERTTorchDataset.__len__": {
            "name": "__len__",
            "location": 425,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LXMERTTorchDataset.random_feat": {
            "name": "random_feat",
            "location": 428,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LXMERTTorchDataset.random_tags": {
            "name": "random_tags",
            "location": 445,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LXMERTTorchDataset.__getitem__": {
            "name": "__getitem__",
            "location": 458,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "int"
                ]
            }
        },
        "LXMERTTorchDataset.random_mask_features": {
            "name": "random_mask_features",
            "location": 558,
            "return": [],
            "arguments": {
                "self": [],
                "feats": [],
                "boxes": []
            }
        },
        "LXMERTTorchDataset.convert_example_to_features": {
            "name": "convert_example_to_features",
            "location": 585,
            "return": [],
            "arguments": {
                "self": [],
                "example": [
                    "InputExample"
                ],
                "max_seq_length": [],
                "tokenizer": []
            }
        },
        "LXMERTTorchDataset.create_in_batch_random_feat": {
            "name": "create_in_batch_random_feat",
            "location": 756,
            "return": [],
            "arguments": {
                "self": [],
                "example": [],
                "example_index": [],
                "all_examples": []
            }
        },
        "LXMERTTorchDataset.custom_collact_fn": {
            "name": "custom_collact_fn",
            "location": 773,
            "return": [],
            "arguments": {
                "self": [],
                "examples": []
            }
        },
        "LXMERTEvaluator.__init__": {
            "name": "__init__",
            "location": 893,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": [
                    "LXMERTDataset"
                ]
            }
        },
        "LXMERTEvaluator.evaluate": {
            "name": "evaluate",
            "location": 918,
            "return": [],
            "arguments": {
                "self": [],
                "uid2ans": [
                    "dict"
                ],
                "pprint": []
            }
        },
        "LXMERTEvaluator.dump_result": {
            "name": "dump_result",
            "location": 948,
            "return": [],
            "arguments": {
                "self": [],
                "uid2ans": [
                    "dict"
                ],
                "path": []
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/pretrain/lxmert_pretrain.py": {
        "get_tuple": {
            "name": "get_tuple",
            "location": 57,
            "return": [
                "DataTuple"
            ],
            "arguments": {
                "splits": [
                    "str"
                ],
                "bs": [
                    "int"
                ],
                "shuffle": [],
                "drop_last": [],
                "topk": [],
                "num_workers": [],
                "limit_source": [],
                "restrict_source": []
            }
        },
        "get_tuple_hybrid": {
            "name": "get_tuple_hybrid",
            "location": 86,
            "return": [
                "DataTuple"
            ],
            "arguments": {
                "splits": [
                    "str"
                ],
                "bs": [
                    "int"
                ],
                "shuffle": [],
                "drop_last": [],
                "num_workers": [],
                "topk": [],
                "image_only_splits": [],
                "text_only_splits": [],
                "limit_source": [],
                "restrict_source": []
            }
        },
        "TrainingMeter.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainingMeter.update": {
            "name": "update",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "loss_dict": []
            }
        },
        "TrainingMeter.report": {
            "name": "report",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainingMeter.clean": {
            "name": "clean",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LXMERT.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "max_seq_length": []
            }
        },
        "LXMERT.forward": {
            "name": "forward",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "examples": []
            }
        },
        "LXMERT.train_batch": {
            "name": "train_batch",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "optim": [],
                "batch": []
            }
        },
        "LXMERT.valid_batch": {
            "name": "valid_batch",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "batch": []
            }
        },
        "LXMERT.train": {
            "name": "train",
            "location": 285,
            "return": [],
            "arguments": {
                "self": [],
                "train_tuple": [
                    "DataTuple"
                ],
                "eval_tuple": [
                    "DataTuple"
                ]
            }
        },
        "LXMERT.evaluate_epoch": {
            "name": "evaluate_epoch",
            "location": 379,
            "return": [],
            "arguments": {
                "self": [],
                "eval_tuple": [
                    "DataTuple"
                ],
                "iters": [
                    "int"
                ]
            }
        },
        "LXMERT.evaluate_epoch_text": {
            "name": "evaluate_epoch_text",
            "location": 414,
            "return": [],
            "arguments": {
                "self": [],
                "eval_tuple": [
                    "DataTuple"
                ],
                "iters": [
                    "int"
                ]
            }
        },
        "LXMERT.save": {
            "name": "save",
            "location": 443,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "LXMERT.load": {
            "name": "load",
            "location": 452,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "t_total": []
            }
        },
        "LXMERT.load_lxmert": {
            "name": "load_lxmert",
            "location": 476,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/pretrain/qa_answer_table.py": {
        "load_lxmert_qa": {
            "name": "load_lxmert_qa",
            "location": 88,
            "return": [],
            "arguments": {
                "path": [],
                "model": [],
                "label2ans": []
            }
        },
        "load_lxmert_from_pretrain_noqa": {
            "name": "load_lxmert_from_pretrain_noqa",
            "location": 163,
            "return": [],
            "arguments": {
                "path": [],
                "model": []
            }
        },
        "load_lxmert_for_vcr_finetune_from_vcr_pretrain": {
            "name": "load_lxmert_for_vcr_finetune_from_vcr_pretrain",
            "location": 208,
            "return": [],
            "arguments": {
                "path": [],
                "model": []
            }
        },
        "load_lxmert_from_pretrain_vcr_pretrain": {
            "name": "load_lxmert_from_pretrain_vcr_pretrain",
            "location": 250,
            "return": [],
            "arguments": {
                "path": [],
                "model": []
            }
        },
        "load_lxmert_from_sgg_and_lxmert_pretrain": {
            "name": "load_lxmert_from_sgg_and_lxmert_pretrain",
            "location": 280,
            "return": [],
            "arguments": {
                "path": [],
                "model": [],
                "label2ans": []
            }
        },
        "load_state_dict_flexible": {
            "name": "load_state_dict_flexible",
            "location": 363,
            "return": [],
            "arguments": {
                "model": [],
                "state_dict": []
            }
        },
        "AnswerTable.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "dsets": []
            }
        },
        "AnswerTable.convert_ans": {
            "name": "convert_ans",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "ans": []
            }
        },
        "AnswerTable.ans2id": {
            "name": "ans2id",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "ans": []
            }
        },
        "AnswerTable.id2ans": {
            "name": "id2ans",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "ans_id": []
            }
        },
        "AnswerTable.ans2id_map": {
            "name": "ans2id_map",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnswerTable.id2ans_map": {
            "name": "id2ans_map",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnswerTable.used": {
            "name": "used",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "ans": []
            }
        },
        "AnswerTable.all_answers": {
            "name": "all_answers",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnswerTable.num_answers": {
            "name": "num_answers",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/pretrain/tag_data_utilis.py": {
        "pad_np_arrays": {
            "name": "pad_np_arrays",
            "location": 17,
            "return": [],
            "arguments": {
                "list_of_np_array": [],
                "padding_value": [],
                "dtype": []
            }
        },
        "transfer_object_labels_to_symbolic_ids": {
            "name": "transfer_object_labels_to_symbolic_ids",
            "location": 44,
            "return": [],
            "arguments": {
                "obj_labels": [],
                "attribute_labels": [],
                "symbolic_vocab": [],
                "obj_confs": [],
                "attr_confs": []
            }
        },
        "convert_semantic_objective": {
            "name": "convert_semantic_objective",
            "location": 81,
            "return": [],
            "arguments": {
                "labels": [],
                "symbolic_vocab": [],
                "obj": [],
                "attr": [],
                "tokenizer": []
            }
        },
        "create_tags_pretrain": {
            "name": "create_tags_pretrain",
            "location": 92,
            "return": [],
            "arguments": {
                "obj_labels": [],
                "attr_labels": [],
                "obj_confs": [],
                "attr_confs": [],
                "tokenizer": [],
                "symbolic_vocab": [],
                "visual_tags_box": [],
                "feat_mask": [],
                "use_bert_input": []
            }
        },
        "create_tags": {
            "name": "create_tags",
            "location": 146,
            "return": [],
            "arguments": {
                "obj_labels": [],
                "attr_labels": [],
                "obj_confs": [],
                "attr_confs": [],
                "tokenizer": [],
                "symbolic_vocab": [],
                "visual_tags_box": [],
                "use_bert_input": [],
                "record_index": []
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/pretrain/text_data.py": {
        "string_to_sequence": {
            "name": "string_to_sequence",
            "location": 461,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "dtype": []
            }
        },
        "sequence_to_string": {
            "name": "sequence_to_string",
            "location": 464,
            "return": [
                "str"
            ],
            "arguments": {
                "seq": [
                    "np.ndarray"
                ]
            }
        },
        "GeneralCorpusNP.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "ann_file": [],
                "pretrained_model_name": [],
                "tokenizer": [],
                "seq_len": [],
                "min_seq_len": [],
                "encoding": [],
                "on_memory": []
            }
        },
        "GeneralCorpusNP.load_corpus": {
            "name": "load_corpus",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeneralCorpusNP.load_corpus_with_passages_preprocess": {
            "name": "load_corpus_with_passages_preprocess",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeneralCorpusNP.__len__": {
            "name": "__len__",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeneralCorpusNP.retrieve_a_piece": {
            "name": "retrieve_a_piece",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "seq_len": []
            }
        },
        "GeneralCorpusNP.exhaustively_retrieve_a_piece": {
            "name": "exhaustively_retrieve_a_piece",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "seq_len": []
            }
        },
        "GeneralCorpusNP.presegment_sentence": {
            "name": "presegment_sentence",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeneralCorpusNP.retrieve_a_piece_preseged": {
            "name": "retrieve_a_piece_preseged",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "seq_len": []
            }
        },
        "GeneralCorpusNP.__getitem__": {
            "name": "__getitem__",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "GeneralCorpusNP.convert_example_to_features": {
            "name": "convert_example_to_features",
            "location": 336,
            "return": [],
            "arguments": {
                "self": [],
                "example": [
                    "InputExample"
                ],
                "max_seq_length": [],
                "tokenizer": [],
                "hybrid_num": []
            }
        },
        "GeneralCorpusNP.random_word_wwm": {
            "name": "random_word_wwm",
            "location": 415,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": []
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/tasks/vqa.py": {
        "get_data_tuple": {
            "name": "get_data_tuple",
            "location": 24,
            "return": [
                "DataTuple"
            ],
            "arguments": {
                "splits": [
                    "str"
                ],
                "bs": [
                    "int"
                ],
                "shuffle": [],
                "drop_last": []
            }
        },
        "VQA.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VQA.train": {
            "name": "train",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "train_tuple": [],
                "eval_tuple": []
            }
        },
        "VQA.predict": {
            "name": "predict",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "eval_tuple": [
                    "DataTuple"
                ],
                "dump": []
            }
        },
        "VQA.evaluate": {
            "name": "evaluate",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "eval_tuple": [
                    "DataTuple"
                ],
                "dump": []
            }
        },
        "VQA.oracle_score": {
            "name": "oracle_score",
            "location": 172,
            "return": [],
            "arguments": {
                "data_tuple": []
            }
        },
        "VQA.save": {
            "name": "save",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "VQA.load": {
            "name": "load",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/tasks/vqa_data.py": {
        "VQADataset.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "splits": [
                    "str"
                ]
            }
        },
        "VQADataset.num_answers": {
            "name": "num_answers",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VQADataset.__len__": {
            "name": "__len__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConcateH5.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "list_of_h5": []
            }
        },
        "ConcateH5.__getitem__": {
            "name": "__getitem__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "ConcateH5.__len__": {
            "name": "__len__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VQATorchDataset.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": [
                    "VQADataset"
                ],
                "args": []
            }
        },
        "VQATorchDataset.load_custom_h5": {
            "name": "load_custom_h5",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "h5_file": []
            }
        },
        "VQATorchDataset.__len__": {
            "name": "__len__",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VQATorchDataset.__getitem__": {
            "name": "__getitem__",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "int"
                ]
            }
        },
        "VQAEvaluator.__init__": {
            "name": "__init__",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": [
                    "VQADataset"
                ]
            }
        },
        "VQAEvaluator.evaluate": {
            "name": "evaluate",
            "location": 259,
            "return": [],
            "arguments": {
                "self": [],
                "quesid2ans": [
                    "dict"
                ]
            }
        },
        "VQAEvaluator.dump_result": {
            "name": "dump_result",
            "location": 268,
            "return": [],
            "arguments": {
                "self": [],
                "quesid2ans": [
                    "dict"
                ],
                "path": []
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/tasks/vqa_model.py": {
        "VQAModel.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "num_answers": []
            }
        },
        "VQAModel.multi_gpu": {
            "name": "multi_gpu",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VQAModel.forward": {
            "name": "forward",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "feat": [],
                "pos": [],
                "sent": [],
                "tags": []
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/tools/convert_nlvr2_lxmert_style.py": {},
    "visualbert-master/unsupervised_visualbert/src/tools/convert_tsv_to_h5.py": {},
    "visualbert-master/unsupervised_visualbert/src/tools/create_cc_data_lxmert_style.py": {},
    "visualbert-master/unsupervised_visualbert/src/tools/create_open_image_data_lxmert_style.py": {},
    "visualbert-master/unsupervised_visualbert/src/tools/sharearray.py": {
        "valid_id": {
            "name": "valid_id",
            "location": 38,
            "return": [],
            "arguments": {
                "id": []
            }
        },
        "_memmapped_view": {
            "name": "_memmapped_view",
            "location": 44,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "_build_path": {
            "name": "_build_path",
            "location": 48,
            "return": [],
            "arguments": {
                "id": [],
                "prefix": [],
                "shm_path": []
            }
        },
        "free": {
            "name": "free",
            "location": 54,
            "return": [],
            "arguments": {
                "id": [],
                "shm_path": [],
                "prefix": []
            }
        },
        "cache": {
            "name": "cache",
            "location": 68,
            "return": [],
            "arguments": {
                "id": [],
                "array_or_callback": [],
                "shm_path": [],
                "prefix": [],
                "timeout": [],
                "verbose": [],
                "log_func": []
            }
        },
        "cache_with_delete_previous": {
            "name": "cache_with_delete_previous",
            "location": 225,
            "return": [],
            "arguments": {
                "id": [],
                "array_or_callback": [],
                "shm_path": [],
                "prefix": [],
                "timeout": [],
                "verbose": [],
                "log_func": [],
                "delete": [],
                "wait": []
            }
        },
        "decorator": {
            "name": "decorator",
            "location": 395,
            "return": [],
            "arguments": {
                "id": []
            }
        },
        "decorator.decorate": {
            "name": "decorate",
            "location": 420,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "decorator.decorate.wrapped": {
            "name": "wrapped",
            "location": 422,
            "return": [],
            "arguments": {}
        },
        "cache.print_": {
            "name": "print_",
            "location": 169,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "cache_with_delete_previous.print_": {
            "name": "print_",
            "location": 328,
            "return": [],
            "arguments": {
                "s": []
            }
        }
    },
    "visualbert-master/visualbert/dataloaders/bert_data_utils.py": {
        "parse_npz_img_feat": {
            "name": "parse_npz_img_feat",
            "location": 398,
            "return": [],
            "arguments": {
                "feat": []
            }
        },
        "get_image_feat_reader": {
            "name": "get_image_feat_reader",
            "location": 402,
            "return": [],
            "arguments": {
                "ndim": [],
                "channel_first": [],
                "image_feat": [],
                "max_loc": []
            }
        },
        "compute_answer_scores": {
            "name": "compute_answer_scores",
            "location": 421,
            "return": [],
            "arguments": {
                "answers": [],
                "num_of_answers": [],
                "unk_idx": []
            }
        },
        "read_in_image_feats": {
            "name": "read_in_image_feats",
            "location": 431,
            "return": [],
            "arguments": {
                "image_dirs": [],
                "image_readers": [],
                "image_file_name": []
            }
        },
        "get_one_image_feature": {
            "name": "get_one_image_feature",
            "location": 440,
            "return": [],
            "arguments": {
                "path": [],
                "reader": [],
                "image_feature_cap": []
            }
        },
        "get_one_image_feature_npz_screening_parameters": {
            "name": "get_one_image_feature_npz_screening_parameters",
            "location": 458,
            "return": [],
            "arguments": {
                "path": [],
                "reader": [],
                "image_screening_parameters": [],
                "return_confidence": []
            }
        },
        "screen_feature": {
            "name": "screen_feature",
            "location": 494,
            "return": [],
            "arguments": {
                "image_feat": [],
                "cls_boxes": [],
                "max_conf": [],
                "image_screening_parameters": [],
                "mandatory_keep": []
            }
        },
        "InputExample.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "unique_id": [],
                "text_a": [],
                "text_b": [],
                "is_correct": [],
                "lm_labels": [],
                "max_seq_length": []
            }
        },
        "InputExample.perform_truncate": {
            "name": "perform_truncate",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "max_seq_length": []
            }
        },
        "InputFeatures.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "unique_id": [],
                "tokens": [],
                "input_ids": [],
                "input_mask": [],
                "input_type_ids": [],
                "is_correct": [],
                "lm_label_ids": []
            }
        },
        "InputFeatures.convert_one_example_to_features": {
            "name": "convert_one_example_to_features",
            "location": 85,
            "return": [],
            "arguments": {
                "cls": [],
                "example": [],
                "tokenizer": []
            }
        },
        "InputFeatures.convert_examples_to_features": {
            "name": "convert_examples_to_features",
            "location": 143,
            "return": [],
            "arguments": {
                "cls": [],
                "examples": [],
                "tokenizer": []
            }
        },
        "InputFeatures.convert_one_example_to_features_pretraining": {
            "name": "convert_one_example_to_features_pretraining",
            "location": 168,
            "return": [],
            "arguments": {
                "cls": [],
                "example": [],
                "tokenizer": [],
                "probability": []
            }
        },
        "InputFeatures.convert_to_allennlp_feild": {
            "name": "convert_to_allennlp_feild",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InputFeatures.convert_to_pytorch_tensor": {
            "name": "convert_to_pytorch_tensor",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InputFeatures.insert_field_into_dict": {
            "name": "insert_field_into_dict",
            "location": 278,
            "return": [],
            "arguments": {
                "self": [],
                "instance_dict": []
            }
        },
        "InputFeatures.insert_tensor_into_dict": {
            "name": "insert_tensor_into_dict",
            "location": 288,
            "return": [],
            "arguments": {
                "self": [],
                "instance_dict": []
            }
        },
        "InputFeatures.convert_list_features_to_allennlp_list_feild": {
            "name": "convert_list_features_to_allennlp_list_feild",
            "location": 299,
            "return": [],
            "arguments": {
                "list_features": [],
                "instance_dict": []
            }
        },
        "faster_RCNN_feat_reader.read": {
            "name": "read",
            "location": 334,
            "return": [],
            "arguments": {
                "self": [],
                "image_feat_path": []
            }
        },
        "CHW_feat_reader.read": {
            "name": "read",
            "location": 338,
            "return": [],
            "arguments": {
                "self": [],
                "image_feat_path": []
            }
        },
        "dim_3_reader.read": {
            "name": "read",
            "location": 345,
            "return": [],
            "arguments": {
                "self": [],
                "image_feat_path": []
            }
        },
        "HWC_feat_reader.read": {
            "name": "read",
            "location": 352,
            "return": [],
            "arguments": {
                "self": [],
                "image_feat_path": []
            }
        },
        "padded_faster_RCNN_feat_reader.__init__": {
            "name": "__init__",
            "location": 360,
            "return": [],
            "arguments": {
                "self": [],
                "max_loc": []
            }
        },
        "padded_faster_RCNN_feat_reader.read": {
            "name": "read",
            "location": 363,
            "return": [],
            "arguments": {
                "self": [],
                "image_feat_path": []
            }
        },
        "padded_faster_RCNN_with_bbox_feat_reader.__init__": {
            "name": "__init__",
            "location": 372,
            "return": [],
            "arguments": {
                "self": [],
                "max_loc": []
            }
        },
        "padded_faster_RCNN_with_bbox_feat_reader.read": {
            "name": "read",
            "location": 388,
            "return": [],
            "arguments": {
                "self": [],
                "image_feat_path": []
            }
        }
    },
    "visualbert-master/visualbert/dataloaders/bert_field.py": {
        "BertField.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "List[Token]"
                ],
                "embs": [
                    "numpy.ndarray"
                ],
                "padding_value": [
                    "int"
                ],
                "token_indexers": []
            }
        },
        "BertField.sequence_length": {
            "name": "sequence_length",
            "location": 38,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BertField.get_padding_lengths": {
            "name": "get_padding_lengths",
            "location": 43,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BertField.as_tensor": {
            "name": "as_tensor",
            "location": 47,
            "return": [
                "Dict[(str, torch.Tensor)]"
            ],
            "arguments": {
                "self": [],
                "padding_lengths": [
                    "Dict[(str, int)]"
                ]
            }
        },
        "BertField.empty_field": {
            "name": "empty_field",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BertField.batch_tensors": {
            "name": "batch_tensors",
            "location": 62,
            "return": [
                "Dict[(str, torch.Tensor)]"
            ],
            "arguments": {
                "self": [],
                "tensor_list": [
                    "List[Dict[(str, torch.Tensor)]]"
                ]
            }
        },
        "BertField.__str__": {
            "name": "__str__",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntArrayField.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "array": [
                    "numpy.ndarray"
                ],
                "padding_value": [
                    "int"
                ]
            }
        },
        "IntArrayField.get_padding_lengths": {
            "name": "get_padding_lengths",
            "location": 89,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntArrayField.as_tensor": {
            "name": "as_tensor",
            "location": 94,
            "return": [
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "padding_lengths": [
                    "Dict[(str, int)]"
                ]
            }
        },
        "IntArrayField.empty_field": {
            "name": "empty_field",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntArrayField.__str__": {
            "name": "__str__",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntArrayTensorField.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "array": [],
                "padding_value": [
                    "int"
                ]
            }
        },
        "IntArrayTensorField.get_padding_lengths": {
            "name": "get_padding_lengths",
            "location": 136,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntArrayTensorField.as_tensor": {
            "name": "as_tensor",
            "location": 141,
            "return": [
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "padding_lengths": [
                    "Dict[(str, int)]"
                ]
            }
        },
        "IntArrayTensorField.empty_field": {
            "name": "empty_field",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntArrayTensorField.__str__": {
            "name": "__str__",
            "location": 163,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayTensorField.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "array": [],
                "padding_value": [
                    "int"
                ]
            }
        },
        "ArrayTensorField.get_padding_lengths": {
            "name": "get_padding_lengths",
            "location": 172,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayTensorField.as_tensor": {
            "name": "as_tensor",
            "location": 177,
            "return": [
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "padding_lengths": [
                    "Dict[(str, int)]"
                ]
            }
        },
        "ArrayTensorField.empty_field": {
            "name": "empty_field",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArrayTensorField.__str__": {
            "name": "__str__",
            "location": 200,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "visualbert-master/visualbert/dataloaders/box_utils.py": {
        "load_image": {
            "name": "load_image",
            "location": 12,
            "return": [],
            "arguments": {
                "img_fn": []
            }
        },
        "resize_image": {
            "name": "resize_image",
            "location": 31,
            "return": [],
            "arguments": {
                "image": [],
                "desired_width": [],
                "desired_height": [],
                "random_pad": []
            }
        },
        "to_tensor_and_normalize": {
            "name": "to_tensor_and_normalize",
            "location": 72,
            "return": [],
            "arguments": {
                "image": []
            }
        }
    },
    "visualbert-master/visualbert/dataloaders/coco_dataset.py": {
        "COCODataset.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "visual_genome_chunk": []
            }
        },
        "COCODataset.get_image_features_by_training_index": {
            "name": "get_image_features_by_training_index",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "COCODataset.__len__": {
            "name": "__len__",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "COCODataset.__getitem__": {
            "name": "__getitem__",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "COCODataset.__getitem_detector__": {
            "name": "__getitem_detector__",
            "location": 235,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "COCODataset.splits": {
            "name": "splits",
            "location": 343,
            "return": [],
            "arguments": {
                "cls": [],
                "args": []
            }
        },
        "COCODataset.collate_fn": {
            "name": "collate_fn",
            "location": 447,
            "return": [],
            "arguments": {
                "data": []
            }
        }
    },
    "visualbert-master/visualbert/dataloaders/flickr_dataset.py": {
        "Flickr30kFeatureDataset.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "args": [],
                "dictionary": [],
                "data_root": [],
                "chunk": [],
                "entries": []
            }
        },
        "Flickr30kFeatureDataset.splits": {
            "name": "splits",
            "location": 93,
            "return": [],
            "arguments": {
                "cls": [],
                "args": []
            }
        },
        "Flickr30kFeatureDataset.tokenize": {
            "name": "tokenize",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "max_length": []
            }
        },
        "Flickr30kFeatureDataset.tensorize": {
            "name": "tensorize",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "max_box": [],
                "max_entities": [],
                "max_length": []
            }
        },
        "Flickr30kFeatureDataset.__getitem__": {
            "name": "__getitem__",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "Flickr30kFeatureDataset.__len__": {
            "name": "__len__",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Flickr30kFeatureDataset.collate_fn": {
            "name": "collate_fn",
            "location": 276,
            "return": [],
            "arguments": {
                "data": []
            }
        }
    },
    "visualbert-master/visualbert/dataloaders/mask_utils.py": {
        "_spaced_points": {
            "name": "_spaced_points",
            "location": 7,
            "return": [],
            "arguments": {
                "low": [],
                "high": [],
                "n": []
            }
        },
        "make_mask": {
            "name": "make_mask",
            "location": 12,
            "return": [],
            "arguments": {
                "mask_size": [],
                "box": [],
                "polygons_list": []
            }
        }
    },
    "visualbert-master/visualbert/dataloaders/nlvr_dataset.py": {
        "NLVRDataset.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "NLVRDataset.get_image_features_by_training_index": {
            "name": "get_image_features_by_training_index",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "which_one": []
            }
        },
        "NLVRDataset.__len__": {
            "name": "__len__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NLVRDataset.__getitem__": {
            "name": "__getitem__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "NLVRDataset.splits": {
            "name": "splits",
            "location": 146,
            "return": [],
            "arguments": {
                "cls": [],
                "args": []
            }
        },
        "NLVRDataset.collate_fn": {
            "name": "collate_fn",
            "location": 195,
            "return": [],
            "arguments": {
                "data": []
            }
        }
    },
    "visualbert-master/visualbert/dataloaders/vcr.py": {
        "VCR.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "split": [],
                "mode": [],
                "only_use_relevant_dets": [],
                "add_image_as_a_box": [],
                "conditioned_answer_choice": [],
                "do_lower_case": [],
                "bert_model_name": [],
                "max_seq_length": [],
                "pretraining": [],
                "pretraining_include_qa_and_qar": [],
                "complete_shuffle": [],
                "use_alignment": [],
                "add_all_features": [],
                "answer_labels_path": [],
                "vcr_annots_dir": [],
                "vcr_image_dir": []
            }
        },
        "VCR.is_train": {
            "name": "is_train",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VCR.splits": {
            "name": "splits",
            "location": 176,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "VCR.__len__": {
            "name": "__len__",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VCR._get_dets_to_use": {
            "name": "_get_dets_to_use",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "item": [],
                "only_use_answer": [],
                "only_use_qar": []
            }
        },
        "VCR.__getitem__": {
            "name": "__getitem__",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "VCR.get_alignment_original": {
            "name": "get_alignment_original",
            "location": 387,
            "return": [],
            "arguments": {
                "self": [],
                "raw_text_mixed": [],
                "text_alignment": [],
                "old_det_to_new_ind": [],
                "box_record": [],
                "offset": []
            }
        },
        "VCR.getitem_bert_part": {
            "name": "getitem_bert_part",
            "location": 405,
            "return": [],
            "arguments": {
                "self": [],
                "examples": [],
                "item": [],
                "instance_dict": [],
                "which": []
            }
        },
        "VCR.collate_fn": {
            "name": "collate_fn",
            "location": 434,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "VCRLoader.from_dataset": {
            "name": "from_dataset",
            "location": 464,
            "return": [],
            "arguments": {
                "cls": [],
                "data": [],
                "batch_size": [],
                "num_workers": [],
                "num_gpus": []
            }
        }
    },
    "visualbert-master/visualbert/dataloaders/vcr_data_utils.py": {
        "_fix_tokenization": {
            "name": "_fix_tokenization",
            "location": 14,
            "return": [],
            "arguments": {
                "tokenized_sent": [],
                "obj_to_type": [],
                "det_hist": []
            }
        },
        "fix_item": {
            "name": "fix_item",
            "location": 41,
            "return": [],
            "arguments": {
                "item": [],
                "answer_label": [],
                "rationales": []
            }
        },
        "retokenize_with_alignment": {
            "name": "retokenize_with_alignment",
            "location": 54,
            "return": [],
            "arguments": {
                "span": [],
                "tokenizer": []
            }
        },
        "process_ctx_ans_for_bert": {
            "name": "process_ctx_ans_for_bert",
            "location": 65,
            "return": [],
            "arguments": {
                "ctx_raw": [],
                "ans_raw": [],
                "tokenizer": [],
                "counter": [],
                "endingonly": [],
                "max_seq_length": [],
                "is_correct": []
            }
        },
        "data_iter": {
            "name": "data_iter",
            "location": 108,
            "return": [],
            "arguments": {
                "data_fn": [],
                "tokenizer": [],
                "max_seq_length": [],
                "endingonly": []
            }
        },
        "data_iter_item": {
            "name": "data_iter_item",
            "location": 124,
            "return": [],
            "arguments": {
                "item": [],
                "tokenizer": [],
                "max_seq_length": [],
                "endingonly": [],
                "include_qar": [],
                "only_qar": []
            }
        },
        "data_iter_test": {
            "name": "data_iter_test",
            "location": 149,
            "return": [],
            "arguments": {
                "data_fn": [],
                "tokenizer": [],
                "max_seq_length": [],
                "endingonly": []
            }
        }
    },
    "visualbert-master/visualbert/dataloaders/vqa_dataset.py": {
        "compute_answer_scores": {
            "name": "compute_answer_scores",
            "location": 29,
            "return": [],
            "arguments": {
                "answers": [],
                "num_of_answers": [],
                "unk_idx": []
            }
        },
        "read_in_image_feats": {
            "name": "read_in_image_feats",
            "location": 40,
            "return": [],
            "arguments": {
                "image_dirs": [],
                "image_readers": [],
                "image_file_name": []
            }
        },
        "tokenize": {
            "name": "tokenize",
            "location": 307,
            "return": [],
            "arguments": {
                "sentence": []
            }
        },
        "load_str_list": {
            "name": "load_str_list",
            "location": 316,
            "return": [],
            "arguments": {
                "fname": []
            }
        },
        "VQADataset.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "chunk_train": [],
                "chunk_val": []
            }
        },
        "VQADataset.__len__": {
            "name": "__len__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VQADataset.get_image_features_by_training_index": {
            "name": "get_image_features_by_training_index",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "VQADataset.__getitem__": {
            "name": "__getitem__",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "VQADataset.collate_fn": {
            "name": "collate_fn",
            "location": 238,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "VQADataset.splits": {
            "name": "splits",
            "location": 245,
            "return": [],
            "arguments": {
                "cls": [],
                "args": []
            }
        },
        "VQADataset.generate_test_file": {
            "name": "generate_test_file",
            "location": 290,
            "return": [],
            "arguments": {
                "self": [],
                "logits": [],
                "out_file": []
            }
        },
        "VocabDict.__init__": {
            "name": "__init__",
            "location": 324,
            "return": [],
            "arguments": {
                "self": [],
                "vocab_file": []
            }
        },
        "VocabDict.idx2word": {
            "name": "idx2word",
            "location": 331,
            "return": [],
            "arguments": {
                "self": [],
                "n_w": []
            }
        },
        "VocabDict.word2idx": {
            "name": "word2idx",
            "location": 334,
            "return": [],
            "arguments": {
                "self": [],
                "w": []
            }
        },
        "VocabDict.tokenize_and_index": {
            "name": "tokenize_and_index",
            "location": 343,
            "return": [],
            "arguments": {
                "self": [],
                "sentence": []
            }
        }
    },
    "visualbert-master/visualbert/dataloaders/__init__.py": {},
    "visualbert-master/visualbert/dataloaders/flickr_ban/dataset.py": {
        "is_howmany": {
            "name": "is_howmany",
            "location": 34,
            "return": [],
            "arguments": {
                "q": [],
                "a": [],
                "label2ans": []
            }
        },
        "answer_filter": {
            "name": "answer_filter",
            "location": 47,
            "return": [],
            "arguments": {
                "answers": [],
                "label2ans": [],
                "max_num": []
            }
        },
        "_create_entry": {
            "name": "_create_entry",
            "location": 106,
            "return": [],
            "arguments": {
                "img": [],
                "question": [],
                "answer": []
            }
        },
        "_load_dataset": {
            "name": "_load_dataset",
            "location": 119,
            "return": [],
            "arguments": {
                "dataroot": [],
                "name": [],
                "img_id2val": [],
                "label2ans": []
            }
        },
        "_load_visualgenome": {
            "name": "_load_visualgenome",
            "location": 154,
            "return": [],
            "arguments": {
                "dataroot": [],
                "name": [],
                "img_id2val": [],
                "label2ans": [],
                "adaptive": []
            }
        },
        "_find_coco_id": {
            "name": "_find_coco_id",
            "location": 216,
            "return": [],
            "arguments": {
                "vgv": [],
                "vgv_id": []
            }
        },
        "_load_flickr30k": {
            "name": "_load_flickr30k",
            "location": 223,
            "return": [],
            "arguments": {
                "dataroot": [],
                "img_id2idx": [],
                "bbox": [],
                "pos_boxes": [],
                "limit": [],
                "cache_name": []
            }
        },
        "_load_flickr30k_full_entity": {
            "name": "_load_flickr30k_full_entity",
            "location": 329,
            "return": [],
            "arguments": {
                "dataroot": [],
                "img_id2idx": [],
                "bbox": [],
                "pos_boxes": [],
                "limit": [],
                "cache_name": []
            }
        },
        "_load_flickr30k_our": {
            "name": "_load_flickr30k_our",
            "location": 438,
            "return": [],
            "arguments": {
                "dataroot": [],
                "features": [],
                "limit": []
            }
        },
        "_create_flickr_entry": {
            "name": "_create_flickr_entry",
            "location": 540,
            "return": [],
            "arguments": {
                "img": [],
                "sentence": [],
                "entity_indices": [],
                "target_indices": [],
                "entity_ids": [],
                "entity_types": [],
                "original_target": []
            }
        },
        "tfidf_from_questions": {
            "name": "tfidf_from_questions",
            "location": 558,
            "return": [],
            "arguments": {
                "names": [],
                "dictionary": [],
                "dataroot": [],
                "target": []
            }
        },
        "Dictionary.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "word2idx": [],
                "idx2word": []
            }
        },
        "Dictionary.ntoken": {
            "name": "ntoken",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dictionary.padding_idx": {
            "name": "padding_idx",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dictionary.tokenize": {
            "name": "tokenize",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "sentence": [],
                "add_word": []
            }
        },
        "Dictionary.dump_to_file": {
            "name": "dump_to_file",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "Dictionary.load_from_file": {
            "name": "load_from_file",
            "location": 90,
            "return": [],
            "arguments": {
                "cls": [],
                "path": []
            }
        },
        "Dictionary.add_word": {
            "name": "add_word",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "Dictionary.__len__": {
            "name": "__len__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "tfidf_from_questions.populate": {
            "name": "populate",
            "location": 563,
            "return": [],
            "arguments": {
                "inds": [],
                "df": [],
                "text": []
            }
        },
        "tfidf_from_questions.normalize": {
            "name": "normalize",
            "location": 605,
            "return": [],
            "arguments": {
                "inds": [],
                "vals": []
            }
        }
    },
    "visualbert-master/visualbert/dataloaders/flickr_ban/utils.py": {
        "assert_eq": {
            "name": "assert_eq",
            "location": 26,
            "return": [],
            "arguments": {
                "real": [],
                "expected": []
            }
        },
        "assert_array_eq": {
            "name": "assert_array_eq",
            "location": 30,
            "return": [],
            "arguments": {
                "real": [],
                "expected": []
            }
        },
        "assert_tensor_eq": {
            "name": "assert_tensor_eq",
            "location": 34,
            "return": [],
            "arguments": {
                "real": [],
                "expected": [],
                "eps": []
            }
        },
        "load_folder": {
            "name": "load_folder",
            "location": 39,
            "return": [],
            "arguments": {
                "folder": [],
                "suffix": []
            }
        },
        "load_imageid": {
            "name": "load_imageid",
            "location": 47,
            "return": [],
            "arguments": {
                "folder": []
            }
        },
        "pil_loader": {
            "name": "pil_loader",
            "location": 56,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "weights_init": {
            "name": "weights_init",
            "location": 62,
            "return": [],
            "arguments": {
                "m": []
            }
        },
        "init_net": {
            "name": "init_net",
            "location": 74,
            "return": [],
            "arguments": {
                "net": [],
                "net_file": []
            }
        },
        "create_dir": {
            "name": "create_dir",
            "location": 81,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "print_model": {
            "name": "print_model",
            "location": 90,
            "return": [],
            "arguments": {
                "model": [],
                "logger": []
            }
        },
        "save_model": {
            "name": "save_model",
            "location": 99,
            "return": [],
            "arguments": {
                "path": [],
                "model": [],
                "epoch": [],
                "optimizer": []
            }
        },
        "rho_select": {
            "name": "rho_select",
            "location": 114,
            "return": [],
            "arguments": {
                "pad": [],
                "lengths": []
            }
        },
        "trim_collate": {
            "name": "trim_collate",
            "location": 121,
            "return": [],
            "arguments": {
                "batch": []
            }
        },
        "create_glove_embedding_init": {
            "name": "create_glove_embedding_init",
            "location": 202,
            "return": [],
            "arguments": {
                "idx2word": [],
                "glove_file": []
            }
        },
        "remove_annotations": {
            "name": "remove_annotations",
            "location": 222,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "get_sent_data": {
            "name": "get_sent_data",
            "location": 225,
            "return": [],
            "arguments": {
                "file_path": []
            }
        },
        "find_sublist": {
            "name": "find_sublist",
            "location": 238,
            "return": [],
            "arguments": {
                "arr": [],
                "sub": []
            }
        },
        "find_sublist_full": {
            "name": "find_sublist_full",
            "location": 253,
            "return": [],
            "arguments": {
                "arr": [],
                "sub": []
            }
        },
        "calculate_iou": {
            "name": "calculate_iou",
            "location": 268,
            "return": [],
            "arguments": {
                "obj1": [],
                "obj2": []
            }
        },
        "calculate_area": {
            "name": "calculate_area",
            "location": 275,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_intersection": {
            "name": "get_intersection",
            "location": 278,
            "return": [],
            "arguments": {
                "obj1": [],
                "obj2": []
            }
        },
        "get_match_index": {
            "name": "get_match_index",
            "location": 288,
            "return": [],
            "arguments": {
                "src_bboxes": [],
                "dst_bboxes": []
            }
        },
        "batched_index_select": {
            "name": "batched_index_select",
            "location": 298,
            "return": [],
            "arguments": {
                "t": [],
                "dim": [],
                "inds": []
            }
        },
        "Logger.__init__": {
            "name": "__init__",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "output_name": []
            }
        },
        "Logger.append": {
            "name": "append",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "val": []
            }
        },
        "Logger.log": {
            "name": "log",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "extra_msg": []
            }
        },
        "Logger.write": {
            "name": "write",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        }
    },
    "visualbert-master/visualbert/models/model.py": {
        "VisualBERTDetector.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "vocab": [
                    "Vocabulary"
                ],
                "class_embs": [
                    "bool"
                ],
                "bert_model_name": [
                    "str"
                ],
                "cnn_loss_ratio": [
                    "float"
                ],
                "special_visual_initialize": [
                    "bool"
                ],
                "text_only": [
                    "bool"
                ],
                "visual_embedding_dim": [
                    "int"
                ],
                "hard_cap_seq_len": [
                    "int"
                ],
                "cut_first": [
                    "str"
                ],
                "embedding_strategy": [
                    "str"
                ],
                "random_initialize": [
                    "bool"
                ],
                "training_head_type": [
                    "str"
                ],
                "bypass_transformer": [
                    "bool"
                ],
                "pretrained_detector": [
                    "bool"
                ],
                "output_attention_weights": [
                    "bool"
                ]
            }
        },
        "VisualBERTDetector._collect_obj_reps": {
            "name": "_collect_obj_reps",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "span_tags": [],
                "object_reps": []
            }
        },
        "VisualBERTDetector.embed_span": {
            "name": "embed_span",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "span": [],
                "span_tags": [],
                "span_mask": [],
                "object_reps": []
            }
        },
        "VisualBERTDetector.forward": {
            "name": "forward",
            "location": 101,
            "return": [
                "Dict[(str, torch.Tensor)]"
            ],
            "arguments": {
                "self": [],
                "images": [
                    "torch.Tensor"
                ],
                "objects": [
                    "torch.LongTensor"
                ],
                "segms": [
                    "torch.Tensor"
                ],
                "boxes": [
                    "torch.Tensor"
                ],
                "box_mask": [
                    "torch.LongTensor"
                ],
                "question": [
                    "Dict[(str, torch.Tensor)]"
                ],
                "question_tags": [
                    "torch.LongTensor"
                ],
                "question_mask": [
                    "torch.LongTensor"
                ],
                "answers": [
                    "Dict[(str, torch.Tensor)]"
                ],
                "answer_tags": [
                    "torch.LongTensor"
                ],
                "answer_mask": [
                    "torch.LongTensor"
                ],
                "metadata": [
                    "List[Dict[(str, Any)]]"
                ],
                "label": [
                    "torch.LongTensor"
                ],
                "bert_input_ids": [
                    "torch.LongTensor"
                ],
                "bert_input_mask": [
                    "torch.LongTensor"
                ],
                "bert_input_type_ids": [
                    "torch.LongTensor"
                ],
                "masked_lm_labels": [
                    "torch.LongTensor"
                ],
                "is_random_next": [
                    "torch.LongTensor"
                ],
                "image_text_alignment": [
                    "torch.LongTensor"
                ],
                "output_all_encoded_layers": []
            }
        },
        "VisualBERTDetector.get_metrics": {
            "name": "get_metrics",
            "location": 188,
            "return": [
                "Dict[(str, float)]"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "bool"
                ]
            }
        },
        "VisualBERTFixedImageEmbedding.__init__": {
            "name": "__init__",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "vocab": [
                    "Vocabulary"
                ],
                "class_embs": [
                    "bool"
                ],
                "bert_model_name": [
                    "str"
                ],
                "cnn_loss_ratio": [
                    "float"
                ],
                "special_visual_initialize": [
                    "bool"
                ],
                "text_only": [
                    "bool"
                ],
                "training_head_type": [
                    "str"
                ],
                "visual_embedding_dim": [
                    "int"
                ],
                "hard_cap_seq_len": [
                    "int"
                ],
                "cut_first": [
                    "str"
                ],
                "embedding_strategy": [
                    "str"
                ],
                "random_initialize": [
                    "bool"
                ],
                "bypass_transformer": [
                    "bool"
                ],
                "output_attention_weights": [
                    "bool"
                ]
            }
        },
        "VisualBERTFixedImageEmbedding.forward": {
            "name": "forward",
            "location": 234,
            "return": [
                "Dict[(str, torch.Tensor)]"
            ],
            "arguments": {
                "self": [],
                "bert_input_ids": [],
                "bert_input_mask": [],
                "bert_input_type_ids": [],
                "image_dim_variable": [],
                "image_feat_variable": [],
                "image_text_alignment": [],
                "visual_embeddings_type": [],
                "label": [],
                "flickr_position": [],
                "masked_lm_labels": [],
                "is_random_next": [],
                "output_all_encoded_layers": []
            }
        },
        "VisualBERTFixedImageEmbedding.get_metrics": {
            "name": "get_metrics",
            "location": 303,
            "return": [
                "Dict[(str, float)]"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "bool"
                ]
            }
        },
        "VisualBERTFixedImageEmbedding.compute_score_with_logits": {
            "name": "compute_score_with_logits",
            "location": 309,
            "return": [],
            "arguments": {
                "logits": [],
                "labels": []
            }
        },
        "SimpleReportMetric.__init__": {
            "name": "__init__",
            "location": 319,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleReportMetric.__call__": {
            "name": "__call__",
            "location": 323,
            "return": [],
            "arguments": {
                "self": [],
                "number": []
            }
        },
        "SimpleReportMetric.get_metric": {
            "name": "get_metric",
            "location": 329,
            "return": [],
            "arguments": {
                "self": [],
                "reset": []
            }
        }
    },
    "visualbert-master/visualbert/models/model_wrapper.py": {
        "ModelWrapper.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "train_dataset_length": []
            }
        },
        "ModelWrapper.train": {
            "name": "train",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelWrapper.eval": {
            "name": "eval",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelWrapper.step": {
            "name": "step",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "batch": [],
                "eval_mode": []
            }
        },
        "ModelWrapper.initialize_opimizer": {
            "name": "initialize_opimizer",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "train_dataset_length": []
            }
        },
        "ModelWrapper.initialize_model": {
            "name": "initialize_model",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "ModelWrapper.load_state_dict": {
            "name": "load_state_dict",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "state_dict_to_load": []
            }
        },
        "ModelWrapper.state_dict": {
            "name": "state_dict",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelWrapper.save_checkpoint": {
            "name": "save_checkpoint",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "serialization_dir": [],
                "epoch": [],
                "val_metric_per_epoch": [],
                "is_best": []
            }
        },
        "ModelWrapper.save_checkpoint_step": {
            "name": "save_checkpoint_step",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "serialization_dir": [],
                "step": [],
                "epoch": [],
                "is_best": []
            }
        },
        "ModelWrapper.restore_checkpoint": {
            "name": "restore_checkpoint",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "serialization_dir": [],
                "epoch_to_load": []
            }
        },
        "ModelWrapper.restore_checkpoint_pretrained": {
            "name": "restore_checkpoint_pretrained",
            "location": 201,
            "return": [],
            "arguments": {
                "self": [],
                "restore_bin": []
            }
        },
        "ModelWrapper.freeze_detector": {
            "name": "freeze_detector",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelWrapper.read_and_insert_args": {
            "name": "read_and_insert_args",
            "location": 235,
            "return": [],
            "arguments": {
                "args": [],
                "confg": []
            }
        }
    },
    "visualbert-master/visualbert/models/train.py": {
        "_to_gpu": {
            "name": "_to_gpu",
            "location": 122,
            "return": [],
            "arguments": {
                "td": []
            }
        },
        "_to_fp16": {
            "name": "_to_fp16",
            "location": 133,
            "return": [],
            "arguments": {
                "td": []
            }
        },
        "get_dataset_loader": {
            "name": "get_dataset_loader",
            "location": 148,
            "return": [],
            "arguments": {
                "args": [],
                "dataset_name": []
            }
        },
        "Unbuffered.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "stream": []
            }
        },
        "Unbuffered.write": {
            "name": "write",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Unbuffered.flush": {
            "name": "flush",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "visualbert-master/visualbert/models/__init__.py": {},
    "visualbert-master/visualbert/pytorch_pretrained_bert/file_utils.py": {
        "url_to_filename": {
            "name": "url_to_filename",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "etag": [
                    "str"
                ]
            }
        },
        "filename_to_url": {
            "name": "filename_to_url",
            "location": 48,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "cache_dir": [
                    "Union[(str, Path)]"
                ]
            }
        },
        "cached_path": {
            "name": "cached_path",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "url_or_filename": [
                    "Union[(str, Path)]"
                ],
                "cache_dir": [
                    "Union[(str, Path)]"
                ]
            }
        },
        "split_s3_path": {
            "name": "split_s3_path",
            "location": 104,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "s3_request": {
            "name": "s3_request",
            "location": 117,
            "return": [],
            "arguments": {
                "func": [
                    "Callable"
                ]
            }
        },
        "s3_etag": {
            "name": "s3_etag",
            "location": 137,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "s3_get": {
            "name": "s3_get",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "temp_file": [
                    "IO"
                ]
            }
        },
        "http_get": {
            "name": "http_get",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "temp_file": [
                    "IO"
                ]
            }
        },
        "get_from_cache": {
            "name": "get_from_cache",
            "location": 165,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "cache_dir": [
                    "Union[(str, Path)]"
                ]
            }
        },
        "read_set_from_file": {
            "name": "read_set_from_file",
            "location": 224,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "get_file_extension": {
            "name": "get_file_extension",
            "location": 236,
            "return": [],
            "arguments": {
                "path": [
                    "str"
                ],
                "dot": [],
                "lower": [
                    "bool"
                ]
            }
        },
        "s3_request.wrapper": {
            "name": "wrapper",
            "location": 124,
            "return": [],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        }
    },
    "visualbert-master/visualbert/pytorch_pretrained_bert/fine_tuning.py": {
        "random_word": {
            "name": "random_word",
            "location": 272,
            "return": [],
            "arguments": {
                "tokens": [],
                "tokenizer": [],
                "probability": []
            }
        },
        "convert_example_to_features": {
            "name": "convert_example_to_features",
            "location": 311,
            "return": [],
            "arguments": {
                "example": [],
                "max_seq_length": [],
                "tokenizer": []
            }
        },
        "main": {
            "name": "main",
            "location": 405,
            "return": [],
            "arguments": {}
        },
        "_truncate_seq_pair": {
            "name": "_truncate_seq_pair",
            "location": 624,
            "return": [],
            "arguments": {
                "tokens_a": [],
                "tokens_b": [],
                "max_length": []
            }
        },
        "accuracy": {
            "name": "accuracy",
            "location": 641,
            "return": [],
            "arguments": {
                "out": [],
                "labels": []
            }
        },
        "BERTDataset.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "corpus_path": [],
                "tokenizer": [],
                "seq_len": [],
                "encoding": [],
                "corpus_lines": [],
                "on_memory": []
            }
        },
        "BERTDataset.__len__": {
            "name": "__len__",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BERTDataset.__getitem__": {
            "name": "__getitem__",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "BERTDataset.random_sent": {
            "name": "random_sent",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "BERTDataset.get_corpus_line": {
            "name": "get_corpus_line",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "BERTDataset.get_random_line": {
            "name": "get_random_line",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BERTDataset.get_next_line": {
            "name": "get_next_line",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InputExample.__init__": {
            "name": "__init__",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "guid": [],
                "tokens_a": [],
                "tokens_b": [],
                "is_next": [],
                "lm_labels": []
            }
        },
        "InputFeatures.__init__": {
            "name": "__init__",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "input_mask": [],
                "segment_ids": [],
                "is_next": [],
                "lm_label_ids": []
            }
        }
    },
    "visualbert-master/visualbert/pytorch_pretrained_bert/modeling.py": {
        "gelu": {
            "name": "gelu",
            "location": 56,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "swish": {
            "name": "swish",
            "location": 64,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "compute_score_with_logits_flickr": {
            "name": "compute_score_with_logits_flickr",
            "location": 1648,
            "return": [],
            "arguments": {
                "logits": [],
                "labels": [],
                "recall": []
            }
        },
        "transform_to_batch_sequence": {
            "name": "transform_to_batch_sequence",
            "location": 1678,
            "return": [],
            "arguments": {
                "tensor": []
            }
        },
        "transform_to_batch_sequence_dim": {
            "name": "transform_to_batch_sequence_dim",
            "location": 1688,
            "return": [],
            "arguments": {
                "tensor": []
            }
        },
        "masked_unk_softmax": {
            "name": "masked_unk_softmax",
            "location": 1698,
            "return": [],
            "arguments": {
                "x": [],
                "dim": [],
                "mask_idx": []
            }
        },
        "compute_score_with_logits": {
            "name": "compute_score_with_logits",
            "location": 1705,
            "return": [],
            "arguments": {
                "logits": [],
                "labels": []
            }
        },
        "batched_index_select": {
            "name": "batched_index_select",
            "location": 1713,
            "return": [],
            "arguments": {
                "t": [],
                "dim": [],
                "inds": []
            }
        },
        "BertConfig.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "vocab_size_or_config_json_file": [],
                "hidden_size": [],
                "num_hidden_layers": [],
                "num_attention_heads": [],
                "intermediate_size": [],
                "hidden_act": [],
                "hidden_dropout_prob": [],
                "attention_probs_dropout_prob": [],
                "max_position_embeddings": [],
                "type_vocab_size": [],
                "initializer_range": []
            }
        },
        "BertConfig.from_dict": {
            "name": "from_dict",
            "location": 132,
            "return": [],
            "arguments": {
                "cls": [],
                "json_object": []
            }
        },
        "BertConfig.from_json_file": {
            "name": "from_json_file",
            "location": 140,
            "return": [],
            "arguments": {
                "cls": [],
                "json_file": []
            }
        },
        "BertConfig.__repr__": {
            "name": "__repr__",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BertConfig.to_dict": {
            "name": "to_dict",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BertConfig.to_json_string": {
            "name": "to_json_string",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BertEmbeddings.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertEmbeddings.forward": {
            "name": "forward",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "token_type_ids": []
            }
        },
        "BertSelfAttention.__init__": {
            "name": "__init__",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertSelfAttention.transpose_for_scores": {
            "name": "transpose_for_scores",
            "location": 226,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "BertSelfAttention.forward": {
            "name": "forward",
            "location": 231,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": [],
                "attention_mask": []
            }
        },
        "BertSelfOutput.__init__": {
            "name": "__init__",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertSelfOutput.forward": {
            "name": "forward",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": [],
                "input_tensor": []
            }
        },
        "BertAttention.__init__": {
            "name": "__init__",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertAttention.forward": {
            "name": "forward",
            "location": 284,
            "return": [],
            "arguments": {
                "self": [],
                "input_tensor": [],
                "attention_mask": []
            }
        },
        "BertIntermediate.__init__": {
            "name": "__init__",
            "location": 296,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertIntermediate.forward": {
            "name": "forward",
            "location": 302,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": []
            }
        },
        "BertOutput.__init__": {
            "name": "__init__",
            "location": 309,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertOutput.forward": {
            "name": "forward",
            "location": 315,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": [],
                "input_tensor": []
            }
        },
        "BertLayer.__init__": {
            "name": "__init__",
            "location": 323,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertLayer.forward": {
            "name": "forward",
            "location": 331,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": [],
                "attention_mask": []
            }
        },
        "BertEncoder.__init__": {
            "name": "__init__",
            "location": 345,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertEncoder.forward": {
            "name": "forward",
            "location": 351,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": [],
                "attention_mask": [],
                "output_all_encoded_layers": []
            }
        },
        "BertPooler.__init__": {
            "name": "__init__",
            "location": 375,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertPooler.forward": {
            "name": "forward",
            "location": 380,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": []
            }
        },
        "BertPredictionHeadTransform.__init__": {
            "name": "__init__",
            "location": 390,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertPredictionHeadTransform.forward": {
            "name": "forward",
            "location": 397,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": []
            }
        },
        "BertLMPredictionHead.__init__": {
            "name": "__init__",
            "location": 405,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "bert_model_embedding_weights": []
            }
        },
        "BertLMPredictionHead.forward": {
            "name": "forward",
            "location": 417,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": []
            }
        },
        "BertOnlyMLMHead.__init__": {
            "name": "__init__",
            "location": 424,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "bert_model_embedding_weights": []
            }
        },
        "BertOnlyMLMHead.forward": {
            "name": "forward",
            "location": 428,
            "return": [],
            "arguments": {
                "self": [],
                "sequence_output": []
            }
        },
        "BertOnlyNSPHead.__init__": {
            "name": "__init__",
            "location": 434,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertOnlyNSPHead.forward": {
            "name": "forward",
            "location": 438,
            "return": [],
            "arguments": {
                "self": [],
                "pooled_output": []
            }
        },
        "BertPreTrainingHeads.__init__": {
            "name": "__init__",
            "location": 444,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "bert_model_embedding_weights": []
            }
        },
        "BertPreTrainingHeads.forward": {
            "name": "forward",
            "location": 449,
            "return": [],
            "arguments": {
                "self": [],
                "sequence_output": [],
                "pooled_output": []
            }
        },
        "PreTrainedBertModel.__init__": {
            "name": "__init__",
            "location": 462,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "PreTrainedBertModel.init_bert_weights": {
            "name": "init_bert_weights",
            "location": 473,
            "return": [],
            "arguments": {
                "self": [],
                "module": []
            }
        },
        "PreTrainedBertModel.from_pretrained": {
            "name": "from_pretrained",
            "location": 487,
            "return": [],
            "arguments": {
                "cls": [],
                "pretrained_model_name": [],
                "state_dict": [],
                "cache_dir": [],
                "random_initialize": []
            }
        },
        "BertModel.__init__": {
            "name": "__init__",
            "location": 643,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertModel.forward": {
            "name": "forward",
            "location": 650,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "token_type_ids": [],
                "attention_mask": [],
                "output_all_encoded_layers": []
            }
        },
        "BertForPreTraining.__init__": {
            "name": "__init__",
            "location": 732,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertForPreTraining.forward": {
            "name": "forward",
            "location": 738,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "token_type_ids": [],
                "attention_mask": [],
                "masked_lm_labels": [],
                "next_sentence_label": []
            }
        },
        "BertForMaskedLM.__init__": {
            "name": "__init__",
            "location": 800,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertForMaskedLM.forward": {
            "name": "forward",
            "location": 806,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "token_type_ids": [],
                "attention_mask": [],
                "masked_lm_labels": []
            }
        },
        "BertForNextSentencePrediction.__init__": {
            "name": "__init__",
            "location": 862,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertForNextSentencePrediction.forward": {
            "name": "forward",
            "location": 868,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "token_type_ids": [],
                "attention_mask": [],
                "next_sentence_label": []
            }
        },
        "BertForSequenceClassification.__init__": {
            "name": "__init__",
            "location": 926,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "num_labels": []
            }
        },
        "BertForSequenceClassification.forward": {
            "name": "forward",
            "location": 934,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "token_type_ids": [],
                "attention_mask": [],
                "labels": []
            }
        },
        "BertForMultipleChoice.__init__": {
            "name": "__init__",
            "location": 991,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "num_choices": []
            }
        },
        "BertForMultipleChoice.forward": {
            "name": "forward",
            "location": 999,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "token_type_ids": [],
                "attention_mask": [],
                "labels": []
            }
        },
        "BertForTokenClassification.__init__": {
            "name": "__init__",
            "location": 1061,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "num_labels": []
            }
        },
        "BertForTokenClassification.forward": {
            "name": "forward",
            "location": 1069,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "token_type_ids": [],
                "attention_mask": [],
                "labels": []
            }
        },
        "BertForQuestionAnswering.__init__": {
            "name": "__init__",
            "location": 1129,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertForQuestionAnswering.forward": {
            "name": "forward",
            "location": 1137,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "token_type_ids": [],
                "attention_mask": [],
                "start_positions": [],
                "end_positions": []
            }
        },
        "BertEmbeddingsWithVisualEmbedding.__init__": {
            "name": "__init__",
            "location": 1172,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertEmbeddingsWithVisualEmbedding.special_intialize": {
            "name": "special_intialize",
            "location": 1191,
            "return": [],
            "arguments": {
                "self": [],
                "method_type": []
            }
        },
        "BertEmbeddingsWithVisualEmbedding.forward": {
            "name": "forward",
            "location": 1198,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "token_type_ids": [],
                "visual_embeddings": [],
                "visual_embeddings_type": [],
                "position_embeddings_visual": [],
                "image_text_alignment": [],
                "confidence": []
            }
        },
        "BertVisualModel.__init__": {
            "name": "__init__",
            "location": 1261,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertVisualModel.forward": {
            "name": "forward",
            "location": 1275,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "token_type_ids": [],
                "attention_mask": [],
                "visual_embeddings": [],
                "position_embeddings_visual": [],
                "visual_embeddings_type": [],
                "image_text_alignment": [],
                "confidence": [],
                "output_all_encoded_layers": []
            }
        },
        "TrainVisualBERTObjective.__init__": {
            "name": "__init__",
            "location": 1336,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "training_head_type": [],
                "visual_embedding_dim": [],
                "hard_cap_seq_len": [],
                "cut_first": [],
                "embedding_strategy": [],
                "bypass_transformer": [],
                "output_attention_weights": []
            }
        },
        "TrainVisualBERTObjective.forward": {
            "name": "forward",
            "location": 1373,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "token_type_ids": [],
                "input_mask": [],
                "visual_embeddings": [],
                "position_embeddings_visual": [],
                "image_mask": [],
                "image_text_alignment": [],
                "confidence": [],
                "visual_embeddings_type": [],
                "label": [],
                "flickr_position": [],
                "masked_lm_labels": [],
                "image_lm_lables": [],
                "is_random_next": [],
                "output_all_encoded_layers": []
            }
        },
        "FlickrAttention.__init__": {
            "name": "__init__",
            "location": 1603,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "FlickrAttention.transpose_for_scores": {
            "name": "transpose_for_scores",
            "location": 1619,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "FlickrAttention.forward": {
            "name": "forward",
            "location": 1624,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "key": [],
                "attention_mask": []
            }
        },
        "PreTrainedBertModel.from_pretrained.load": {
            "name": "load",
            "location": 579,
            "return": [],
            "arguments": {
                "module": [],
                "prefix": []
            }
        },
        "BertLayerNorm.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_size": [],
                "eps": []
            }
        },
        "BertLayerNorm.forward": {
            "name": "forward",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "visualbert-master/visualbert/pytorch_pretrained_bert/optimization.py": {
        "_LRSchedule.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "warmup": [],
                "t_total": []
            }
        },
        "_LRSchedule.get_lr": {
            "name": "get_lr",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "step": [],
                "nowarn": []
            }
        },
        "_LRSchedule.get_lr_": {
            "name": "get_lr_",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "progress": []
            }
        },
        "ConstantLR.get_lr_": {
            "name": "get_lr_",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "progress": []
            }
        },
        "WarmupCosineSchedule.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "warmup": [],
                "t_total": [],
                "cycles": []
            }
        },
        "WarmupCosineSchedule.get_lr_": {
            "name": "get_lr_",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "progress": []
            }
        },
        "WarmupCosineWithHardRestartsSchedule.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "warmup": [],
                "t_total": [],
                "cycles": []
            }
        },
        "WarmupCosineWithHardRestartsSchedule.get_lr_": {
            "name": "get_lr_",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "progress": []
            }
        },
        "WarmupCosineWithWarmupRestartsSchedule.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "warmup": [],
                "t_total": [],
                "cycles": []
            }
        },
        "WarmupCosineWithWarmupRestartsSchedule.get_lr_": {
            "name": "get_lr_",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "progress": []
            }
        },
        "WarmupConstantSchedule.get_lr_": {
            "name": "get_lr_",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "progress": []
            }
        },
        "WarmupLinearSchedule.get_lr_": {
            "name": "get_lr_",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "progress": []
            }
        },
        "BertAdam.__init__": {
            "name": "__init__",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "params": [],
                "lr": [],
                "warmup": [],
                "t_total": [],
                "schedule": [],
                "b1": [],
                "b2": [],
                "e": [],
                "weight_decay": [],
                "max_grad_norm": []
            }
        },
        "BertAdam.get_lr": {
            "name": "get_lr",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BertAdam.step": {
            "name": "step",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "closure": []
            }
        }
    },
    "visualbert-master/visualbert/pytorch_pretrained_bert/tokenization.py": {
        "load_vocab": {
            "name": "load_vocab",
            "location": 51,
            "return": [],
            "arguments": {
                "vocab_file": []
            }
        },
        "whitespace_tokenize": {
            "name": "whitespace_tokenize",
            "location": 66,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "_is_whitespace": {
            "name": "_is_whitespace",
            "location": 336,
            "return": [],
            "arguments": {
                "char": []
            }
        },
        "_is_control": {
            "name": "_is_control",
            "location": 348,
            "return": [],
            "arguments": {
                "char": []
            }
        },
        "_is_punctuation": {
            "name": "_is_punctuation",
            "location": 360,
            "return": [],
            "arguments": {
                "char": []
            }
        },
        "BertTokenizer.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "vocab_file": [],
                "do_lower_case": [],
                "max_len": []
            }
        },
        "BertTokenizer.tokenize": {
            "name": "tokenize",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "BertTokenizer.convert_tokens_to_ids": {
            "name": "convert_tokens_to_ids",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": []
            }
        },
        "BertTokenizer.convert_tokens_to_ids_no_warning": {
            "name": "convert_tokens_to_ids_no_warning",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": []
            }
        },
        "BertTokenizer.convert_ids_to_tokens": {
            "name": "convert_ids_to_tokens",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "ids": []
            }
        },
        "BertTokenizer.from_pretrained": {
            "name": "from_pretrained",
            "location": 126,
            "return": [],
            "arguments": {
                "cls": [],
                "pretrained_model_name": [],
                "cache_dir": []
            }
        },
        "BasicTokenizer.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "do_lower_case": []
            }
        },
        "BasicTokenizer.tokenize": {
            "name": "tokenize",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "BasicTokenizer._run_strip_accents": {
            "name": "_run_strip_accents",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "BasicTokenizer._run_split_on_punc": {
            "name": "_run_split_on_punc",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "BasicTokenizer._tokenize_chinese_chars": {
            "name": "_tokenize_chinese_chars",
            "location": 227,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "BasicTokenizer._is_chinese_char": {
            "name": "_is_chinese_char",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "cp": []
            }
        },
        "BasicTokenizer._clean_text": {
            "name": "_clean_text",
            "location": 262,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "WordpieceTokenizer.__init__": {
            "name": "__init__",
            "location": 279,
            "return": [],
            "arguments": {
                "self": [],
                "vocab": [],
                "unk_token": [],
                "max_input_chars_per_word": []
            }
        },
        "WordpieceTokenizer.tokenize": {
            "name": "tokenize",
            "location": 284,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        }
    },
    "visualbert-master/visualbert/pytorch_pretrained_bert/__init__.py": {},
    "visualbert-master/visualbert/pytorch_pretrained_bert/__main__.py": {
        "main": {
            "name": "main",
            "location": 2,
            "return": [],
            "arguments": {}
        }
    },
    "visualbert-master/visualbert/utils/detector.py": {
        "_load_resnet": {
            "name": "_load_resnet",
            "location": 19,
            "return": [],
            "arguments": {
                "pretrained": []
            }
        },
        "_load_resnet_imagenet": {
            "name": "_load_resnet_imagenet",
            "location": 30,
            "return": [],
            "arguments": {
                "pretrained": []
            }
        },
        "SimpleDetector.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "pretrained": [],
                "average_pool": [],
                "semantic": [],
                "final_dim": []
            }
        },
        "SimpleDetector.forward": {
            "name": "forward",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "images": [
                    "torch.Tensor"
                ],
                "boxes": [
                    "torch.Tensor"
                ],
                "box_mask": [
                    "torch.LongTensor"
                ],
                "classes": [
                    "torch.Tensor"
                ],
                "segms": [
                    "torch.Tensor"
                ]
            }
        }
    },
    "visualbert-master/visualbert/utils/pytorch_misc.py": {
        "time_batch": {
            "name": "time_batch",
            "location": 21,
            "return": [],
            "arguments": {
                "gen": [],
                "reset_every": []
            }
        },
        "pad_sequence": {
            "name": "pad_sequence",
            "location": 49,
            "return": [],
            "arguments": {
                "sequence": [],
                "lengths": []
            }
        },
        "extra_leading_dim_in_sequence": {
            "name": "extra_leading_dim_in_sequence",
            "location": 64,
            "return": [],
            "arguments": {
                "f": [],
                "x": [],
                "mask": []
            }
        },
        "clip_grad_norm": {
            "name": "clip_grad_norm",
            "location": 68,
            "return": [],
            "arguments": {
                "named_parameters": [],
                "max_norm": [],
                "clip": [],
                "verbose": []
            }
        },
        "find_latest_checkpoint": {
            "name": "find_latest_checkpoint",
            "location": 110,
            "return": [],
            "arguments": {
                "serialization_dir": [],
                "epoch_to_load": []
            }
        },
        "find_latest_checkpoint_step": {
            "name": "find_latest_checkpoint_step",
            "location": 155,
            "return": [],
            "arguments": {
                "serialization_dir": [],
                "epoch_to_load": []
            }
        },
        "save_checkpoint": {
            "name": "save_checkpoint",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [],
                "optimizer": [],
                "serialization_dir": [],
                "epoch": [],
                "val_metric_per_epoch": [],
                "is_best": [],
                "learning_rate_scheduler": []
            }
        },
        "restore_best_checkpoint": {
            "name": "restore_best_checkpoint",
            "location": 229,
            "return": [],
            "arguments": {
                "model": [],
                "serialization_dir": []
            }
        },
        "restore_checkpoint_flexible": {
            "name": "restore_checkpoint_flexible",
            "location": 238,
            "return": [],
            "arguments": {
                "model": [],
                "fn": []
            }
        },
        "load_state_dict_flexible": {
            "name": "load_state_dict_flexible",
            "location": 246,
            "return": [],
            "arguments": {
                "model": [],
                "state_dict": []
            }
        },
        "restore_checkpoint": {
            "name": "restore_checkpoint",
            "location": 267,
            "return": [],
            "arguments": {
                "model": [],
                "optimizer": [],
                "serialization_dir": [],
                "epoch_to_load": [],
                "learning_rate_scheduler": []
            }
        },
        "detokenize": {
            "name": "detokenize",
            "location": 334,
            "return": [],
            "arguments": {
                "array": [],
                "vocab": []
            }
        },
        "print_para": {
            "name": "print_para",
            "location": 346,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "batch_index_iterator": {
            "name": "batch_index_iterator",
            "location": 373,
            "return": [],
            "arguments": {
                "len_l": [],
                "batch_size": [],
                "skip_end": []
            }
        },
        "batch_iterator": {
            "name": "batch_iterator",
            "location": 391,
            "return": [],
            "arguments": {
                "seq": [],
                "batch_size": [],
                "skip_end": []
            }
        },
        "masked_unk_softmax": {
            "name": "masked_unk_softmax",
            "location": 395,
            "return": [],
            "arguments": {
                "x": [],
                "dim": [],
                "mask_idx": []
            }
        },
        "compute_score_with_logits": {
            "name": "compute_score_with_logits",
            "location": 402,
            "return": [],
            "arguments": {
                "logits": [],
                "labels": []
            }
        },
        "Flattener.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Flattener.forward": {
            "name": "forward",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "visualbert-master/visualbert/utils/__init__.py": {},
    "visualbert-master/visualbert/utils/get_image_features/extract_image_features_nlvr.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "get_detections_from_im": {
            "name": "get_detections_from_im",
            "location": 191,
            "return": [],
            "arguments": {
                "cfg": [],
                "model": [],
                "im": [],
                "image_id": [],
                "feat_blob_name": [],
                "MIN_BOXES": [],
                "MAX_BOXES": [],
                "conf_thresh": [],
                "bboxes": []
            }
        },
        "extract_bboxes": {
            "name": "extract_bboxes",
            "location": 233,
            "return": [],
            "arguments": {
                "bottom_up_csv_file": []
            }
        },
        "recurse_find_image": {
            "name": "recurse_find_image",
            "location": 254,
            "return": [],
            "arguments": {
                "folder": [],
                "image_list": [],
                "image_ext": []
            }
        },
        "main": {
            "name": "main",
            "location": 266,
            "return": [],
            "arguments": {
                "args": []
            }
        }
    },
    "visualbert-master/visualbert/utils/get_image_features/get_mask.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 79,
            "return": [],
            "arguments": {}
        },
        "get_detections_from_im": {
            "name": "get_detections_from_im",
            "location": 187,
            "return": [],
            "arguments": {
                "cfg": [],
                "model": [],
                "im": [],
                "image_id": [],
                "feat_blob_name": [],
                "MIN_BOXES": [],
                "MAX_BOXES": [],
                "conf_thresh": [],
                "bboxes": []
            }
        },
        "extract_bboxes": {
            "name": "extract_bboxes",
            "location": 240,
            "return": [],
            "arguments": {
                "bottom_up_csv_file": []
            }
        },
        "recurse_find_image": {
            "name": "recurse_find_image",
            "location": 261,
            "return": [],
            "arguments": {
                "folder": [],
                "image_list": [],
                "image_ext": []
            }
        },
        "main": {
            "name": "main",
            "location": 273,
            "return": [],
            "arguments": {
                "args": []
            }
        }
    },
    "visualbert-master/visualbert/utils/get_image_features/get_mask_utils.py": {
        "get_model": {
            "name": "get_model",
            "location": 54,
            "return": [],
            "arguments": {
                "use_keypoints": []
            }
        },
        "detect_from_img": {
            "name": "detect_from_img",
            "location": 79,
            "return": [],
            "arguments": {
                "model": [],
                "im": [],
                "dets_pkl_fn": [],
                "dets_json_fn": [],
                "debug_img_fn": []
            }
        },
        "vis_one_image": {
            "name": "vis_one_image",
            "location": 161,
            "return": [],
            "arguments": {
                "im": [],
                "im_name": [],
                "boxes": [],
                "segm_contours": [],
                "obj_names": [],
                "keypoints": [],
                "kp_thresh": [],
                "dpi": [],
                "box_alpha": [],
                "show_class": []
            }
        },
        "convert_detections": {
            "name": "convert_detections",
            "location": 296,
            "return": [],
            "arguments": {
                "im_file": [],
                "dets_pkl_fn": [],
                "dets_json_fn": [],
                "debug_img_fn": []
            }
        }
    }
}
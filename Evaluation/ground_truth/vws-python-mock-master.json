{
    "vws-python-mock-master/setup.py": {
        "_get_dependencies": {
            "name": "_get_dependencies",
            "location": 12,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "requirements_file": [
                    "Path"
                ]
            }
        }
    },
    "vws-python-mock-master/ci/custom_linters.py": {
        "_ci_patterns": {
            "name": "_ci_patterns",
            "location": 13,
            "return": [
                "Set[str]"
            ],
            "arguments": {}
        },
        "_tests_from_pattern": {
            "name": "_tests_from_pattern",
            "location": 27,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "ci_pattern": [
                    "str"
                ]
            }
        },
        "test_ci_patterns_valid": {
            "name": "test_ci_patterns_valid",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tests_collected_once": {
            "name": "test_tests_collected_once",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_init_files": {
            "name": "test_init_files",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "vws-python-mock-master/ci/set_secrets_file.py": {
        "move_secrets_file": {
            "name": "move_secrets_file",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "vws-python-mock-master/docs/source/conf.py": {},
    "vws-python-mock-master/src/mock_vws/database.py": {
        "_random_hex": {
            "name": "_random_hex",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "VuforiaDatabase.to_dict": {
            "name": "to_dict",
            "location": 77,
            "return": [
                "DatabaseDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "VuforiaDatabase.get_target": {
            "name": "get_target",
            "location": 92,
            "return": [
                "Target"
            ],
            "arguments": {
                "self": [],
                "target_id": [
                    "str"
                ]
            }
        },
        "VuforiaDatabase.from_dict": {
            "name": "from_dict",
            "location": 102,
            "return": [
                "VuforiaDatabase"
            ],
            "arguments": {
                "cls": [],
                "database_dict": [
                    "DatabaseDict"
                ]
            }
        },
        "VuforiaDatabase.not_deleted_targets": {
            "name": "not_deleted_targets",
            "location": 120,
            "return": [
                "Set[Target]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VuforiaDatabase.active_targets": {
            "name": "active_targets",
            "location": 127,
            "return": [
                "Set[Target]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VuforiaDatabase.inactive_targets": {
            "name": "inactive_targets",
            "location": 139,
            "return": [
                "Set[Target]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VuforiaDatabase.failed_targets": {
            "name": "failed_targets",
            "location": 151,
            "return": [
                "Set[Target]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VuforiaDatabase.processing_targets": {
            "name": "processing_targets",
            "location": 162,
            "return": [
                "Set[Target]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/states.py": {
        "States.__repr__": {
            "name": "__repr__",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/target.py": {
        "_random_hex": {
            "name": "_random_hex",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "_time_now": {
            "name": "_time_now",
            "location": 46,
            "return": [
                "datetime.datetime"
            ],
            "arguments": {}
        },
        "_random_tracking_rating": {
            "name": "_random_tracking_rating",
            "location": 54,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "Target._post_processing_status": {
            "name": "_post_processing_status",
            "location": 87,
            "return": [
                "TargetStatuses"
            ],
            "arguments": {
                "self": []
            }
        },
        "Target.status": {
            "name": "status",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Target.tracking_rating": {
            "name": "tracking_rating",
            "location": 133,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Target.from_dict": {
            "name": "from_dict",
            "location": 164,
            "return": [
                "Target"
            ],
            "arguments": {
                "cls": [],
                "target_dict": [
                    "TargetDict"
                ]
            }
        },
        "Target.to_dict": {
            "name": "to_dict",
            "location": 207,
            "return": [
                "TargetDict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/target_manager.py": {
        "TargetManager.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TargetManager.remove_database": {
            "name": "remove_database",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "TargetManager.add_database": {
            "name": "add_database",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "TargetManager.databases": {
            "name": "databases",
            "location": 83,
            "return": [
                "Set[VuforiaDatabase]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/_base64_decoding.py": {
        "decode_base64": {
            "name": "decode_base64",
            "location": 10,
            "return": [
                "bytes"
            ],
            "arguments": {
                "encoded_data": [
                    "str"
                ]
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/_constants.py": {},
    "vws-python-mock-master/src/mock_vws/_database_matchers.py": {
        "get_database_matching_client_keys": {
            "name": "get_database_matching_client_keys",
            "location": 14,
            "return": [
                "(VuforiaDatabase | None)"
            ],
            "arguments": {
                "request_headers": [
                    "Dict[(str, str)]"
                ],
                "request_body": [
                    "(bytes | None)"
                ],
                "request_method": [
                    "str"
                ],
                "request_path": [
                    "str"
                ],
                "databases": [
                    "Iterable[VuforiaDatabase]"
                ]
            }
        },
        "get_database_matching_server_keys": {
            "name": "get_database_matching_server_keys",
            "location": 56,
            "return": [
                "(VuforiaDatabase | None)"
            ],
            "arguments": {
                "request_headers": [
                    "Dict[(str, str)]"
                ],
                "request_body": [
                    "(bytes | None)"
                ],
                "request_method": [
                    "str"
                ],
                "request_path": [
                    "str"
                ],
                "databases": [
                    "Iterable[VuforiaDatabase]"
                ]
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/_mock_common.py": {
        "json_dump": {
            "name": "json_dump",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "body": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/_query_tools.py": {
        "get_query_match_response_text": {
            "name": "get_query_match_response_text",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "request_headers": [
                    "Dict[(str, str)]"
                ],
                "request_body": [
                    "bytes"
                ],
                "request_method": [
                    "str"
                ],
                "request_path": [
                    "str"
                ],
                "databases": [
                    "Set[VuforiaDatabase]"
                ],
                "query_processes_deletion_seconds": [
                    "(int | float)"
                ],
                "query_recognizes_deletion_seconds": [
                    "(int | float)"
                ]
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/__init__.py": {},
    "vws-python-mock-master/src/mock_vws/_flask_server/target_manager.py": {
        "delete_database": {
            "name": "delete_database",
            "location": 29,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "database_name": [
                    "str"
                ]
            }
        },
        "get_databases": {
            "name": "get_databases",
            "location": 49,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {}
        },
        "create_database": {
            "name": "create_database",
            "location": 58,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {}
        },
        "create_target": {
            "name": "create_target",
            "location": 136,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "database_name": [
                    "str"
                ]
            }
        },
        "delete_target": {
            "name": "delete_target",
            "location": 165,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "database_name": [
                    "str"
                ],
                "target_id": [
                    "str"
                ]
            }
        },
        "update_target": {
            "name": "update_target",
            "location": 186,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "database_name": [
                    "str"
                ],
                "target_id": [
                    "str"
                ]
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/_flask_server/vwq.py": {
        "get_all_databases": {
            "name": "get_all_databases",
            "location": 31,
            "return": [
                "Set[VuforiaDatabase]"
            ],
            "arguments": {}
        },
        "set_terminate_wsgi_input": {
            "name": "set_terminate_wsgi_input",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "handle_exceptions": {
            "name": "handle_exceptions",
            "location": 80,
            "return": [
                "Response"
            ],
            "arguments": {
                "exc": [
                    "ValidatorException"
                ]
            }
        },
        "query": {
            "name": "query",
            "location": 92,
            "return": [
                "Response"
            ],
            "arguments": {}
        }
    },
    "vws-python-mock-master/src/mock_vws/_flask_server/vws.py": {
        "get_all_databases": {
            "name": "get_all_databases",
            "location": 36,
            "return": [
                "Set[VuforiaDatabase]"
            ],
            "arguments": {}
        },
        "set_terminate_wsgi_input": {
            "name": "set_terminate_wsgi_input",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "validate_request": {
            "name": "validate_request",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "handle_exceptions": {
            "name": "handle_exceptions",
            "location": 100,
            "return": [
                "Response"
            ],
            "arguments": {
                "exc": [
                    "ValidatorException"
                ]
            }
        },
        "add_target": {
            "name": "add_target",
            "location": 112,
            "return": [
                "Response"
            ],
            "arguments": {}
        },
        "get_target": {
            "name": "get_target",
            "location": 178,
            "return": [
                "Response"
            ],
            "arguments": {
                "target_id": [
                    "str"
                ]
            }
        },
        "delete_target": {
            "name": "delete_target",
            "location": 229,
            "return": [
                "Response"
            ],
            "arguments": {
                "target_id": [
                    "str"
                ]
            }
        },
        "database_summary": {
            "name": "database_summary",
            "location": 278,
            "return": [
                "Response"
            ],
            "arguments": {}
        },
        "target_summary": {
            "name": "target_summary",
            "location": 328,
            "return": [
                "Response"
            ],
            "arguments": {
                "target_id": [
                    "str"
                ]
            }
        },
        "get_duplicates": {
            "name": "get_duplicates",
            "location": 376,
            "return": [
                "Response"
            ],
            "arguments": {
                "target_id": [
                    "str"
                ]
            }
        },
        "target_list": {
            "name": "target_list",
            "location": 428,
            "return": [
                "Response"
            ],
            "arguments": {}
        },
        "update_target": {
            "name": "update_target",
            "location": 466,
            "return": [
                "Response"
            ],
            "arguments": {
                "target_id": [
                    "str"
                ]
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/_flask_server/__init__.py": {},
    "vws-python-mock-master/src/mock_vws/_query_validators/accept_header_validators.py": {
        "validate_accept_header": {
            "name": "validate_accept_header",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "request_headers": [
                    "Dict[(str, str)]"
                ]
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/_query_validators/auth_validators.py": {
        "validate_auth_header_exists": {
            "name": "validate_auth_header_exists",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "request_headers": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "validate_auth_header_number_of_parts": {
            "name": "validate_auth_header_number_of_parts",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "request_headers": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "validate_client_key_exists": {
            "name": "validate_client_key_exists",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "request_headers": [
                    "Dict[(str, str)]"
                ],
                "databases": [
                    "Set[VuforiaDatabase]"
                ]
            }
        },
        "validate_auth_header_has_signature": {
            "name": "validate_auth_header_has_signature",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "request_headers": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "validate_authorization": {
            "name": "validate_authorization",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "request_path": [
                    "str"
                ],
                "request_headers": [
                    "Dict[(str, str)]"
                ],
                "request_body": [
                    "bytes"
                ],
                "request_method": [
                    "str"
                ],
                "databases": [
                    "Set[VuforiaDatabase]"
                ]
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/_query_validators/content_length_validators.py": {
        "validate_content_length_header_is_int": {
            "name": "validate_content_length_header_is_int",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "request_headers": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "validate_content_length_header_not_too_large": {
            "name": "validate_content_length_header_not_too_large",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "request_headers": [
                    "Dict[(str, str)]"
                ],
                "request_body": [
                    "bytes"
                ]
            }
        },
        "validate_content_length_header_not_too_small": {
            "name": "validate_content_length_header_not_too_small",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "request_headers": [
                    "Dict[(str, str)]"
                ],
                "request_body": [
                    "bytes"
                ]
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/_query_validators/content_type_validators.py": {
        "validate_content_type_header": {
            "name": "validate_content_type_header",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "request_headers": [
                    "Dict[(str, str)]"
                ],
                "request_body": [
                    "bytes"
                ]
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/_query_validators/date_validators.py": {
        "validate_date_header_given": {
            "name": "validate_date_header_given",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "request_headers": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "_accepted_date_formats": {
            "name": "_accepted_date_formats",
            "location": 32,
            "return": [
                "Set[str]"
            ],
            "arguments": {}
        },
        "validate_date_format": {
            "name": "validate_date_format",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "request_headers": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "validate_date_in_range": {
            "name": "validate_date_in_range",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "request_headers": [
                    "Dict[(str, str)]"
                ]
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/_query_validators/exceptions.py": {
        "DateHeaderNotGiven.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateFormatNotValid.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestTimeTooSkewed.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BadImage.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthenticationFailure.__init__": {
            "name": "__init__",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthenticationFailureGoodFormatting.__init__": {
            "name": "__init__",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageNotGiven.__init__": {
            "name": "__init__",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthHeaderMissing.__init__": {
            "name": "__init__",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MalformedAuthHeader.__init__": {
            "name": "__init__",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnknownParameters.__init__": {
            "name": "__init__",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InactiveProject.__init__": {
            "name": "__init__",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidMaxNumResults.__init__": {
            "name": "__init__",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "given_value": [
                    "str"
                ]
            }
        },
        "MaxNumResultsOutOfRange.__init__": {
            "name": "__init__",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "given_value": [
                    "str"
                ]
            }
        },
        "InvalidIncludeTargetData.__init__": {
            "name": "__init__",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "given_value": [
                    "str"
                ]
            }
        },
        "UnsupportedMediaType.__init__": {
            "name": "__init__",
            "location": 470,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidAcceptHeader.__init__": {
            "name": "__init__",
            "location": 496,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoBoundaryFound.__init__": {
            "name": "__init__",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryOutOfBounds.__init__": {
            "name": "__init__",
            "location": 553,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentLengthHeaderTooLarge.__init__": {
            "name": "__init__",
            "location": 585,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentLengthHeaderNotInt.__init__": {
            "name": "__init__",
            "location": 607,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestEntityTooLarge.__init__": {
            "name": "__init__",
            "location": 629,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeletedTargetMatched.__init__": {
            "name": "__init__",
            "location": 665,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoContentType.__init__": {
            "name": "__init__",
            "location": 704,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/_query_validators/fields_validators.py": {
        "validate_extra_fields": {
            "name": "validate_extra_fields",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "request_headers": [
                    "Dict[(str, str)]"
                ],
                "request_body": [
                    "bytes"
                ]
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/_query_validators/image_validators.py": {
        "validate_image_field_given": {
            "name": "validate_image_field_given",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "request_headers": [
                    "Dict[(str, str)]"
                ],
                "request_body": [
                    "bytes"
                ]
            }
        },
        "validate_image_file_size": {
            "name": "validate_image_file_size",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "request_headers": [
                    "Dict[(str, str)]"
                ],
                "request_body": [
                    "bytes"
                ]
            }
        },
        "validate_image_dimensions": {
            "name": "validate_image_dimensions",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "request_headers": [
                    "Dict[(str, str)]"
                ],
                "request_body": [
                    "bytes"
                ]
            }
        },
        "validate_image_format": {
            "name": "validate_image_format",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "request_headers": [
                    "Dict[(str, str)]"
                ],
                "request_body": [
                    "bytes"
                ]
            }
        },
        "validate_image_is_image": {
            "name": "validate_image_is_image",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "request_headers": [
                    "Dict[(str, str)]"
                ],
                "request_body": [
                    "bytes"
                ]
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/_query_validators/include_target_data_validators.py": {
        "validate_include_target_data": {
            "name": "validate_include_target_data",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "request_headers": [
                    "Dict[(str, str)]"
                ],
                "request_body": [
                    "bytes"
                ]
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/_query_validators/num_results_validators.py": {
        "validate_max_num_results": {
            "name": "validate_max_num_results",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "request_headers": [
                    "Dict[(str, str)]"
                ],
                "request_body": [
                    "bytes"
                ]
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/_query_validators/project_state_validators.py": {
        "validate_project_state": {
            "name": "validate_project_state",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "request_path": [
                    "str"
                ],
                "request_headers": [
                    "Dict[(str, str)]"
                ],
                "request_body": [
                    "bytes"
                ],
                "request_method": [
                    "str"
                ],
                "databases": [
                    "Set[VuforiaDatabase]"
                ]
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/_query_validators/__init__.py": {
        "run_query_validators": {
            "name": "run_query_validators",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "request_path": [
                    "str"
                ],
                "request_headers": [
                    "Dict[(str, str)]"
                ],
                "request_body": [
                    "bytes"
                ],
                "request_method": [
                    "str"
                ],
                "databases": [
                    "Set[VuforiaDatabase]"
                ]
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/_requests_mock_server/decorators.py": {
        "MockVWS.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_vws_url": [
                    "str"
                ],
                "base_vwq_url": [
                    "str"
                ],
                "real_http": [
                    "bool"
                ],
                "processing_time_seconds": [
                    "(int | float)"
                ],
                "query_recognizes_deletion_seconds": [
                    "(int | float)"
                ],
                "query_processes_deletion_seconds": [
                    "(int | float)"
                ]
            }
        },
        "MockVWS.add_database": {
            "name": "add_database",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "MockVWS.__enter__": {
            "name": "__enter__",
            "location": 105,
            "return": [
                "'MockVWS'"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockVWS.__exit__": {
            "name": "__exit__",
            "location": 145,
            "return": [
                "Literal[False]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/_requests_mock_server/mock_web_query_api.py": {
        "route": {
            "name": "route",
            "location": 32,
            "return": [
                "Callable[(..., Callable)]"
            ],
            "arguments": {
                "path_pattern": [
                    "str"
                ],
                "http_methods": [
                    "Set[str]"
                ]
            }
        },
        "route.decorator": {
            "name": "decorator",
            "location": 48,
            "return": [
                "Callable[(..., str)]"
            ],
            "arguments": {
                "method": [
                    "Callable[(..., str)]"
                ]
            }
        },
        "MockVuforiaWebQueryAPI.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_manager": [
                    "TargetManager"
                ],
                "query_recognizes_deletion_seconds": [
                    "(int | float)"
                ],
                "query_processes_deletion_seconds": [
                    "(int | float)"
                ]
            }
        },
        "MockVuforiaWebQueryAPI.query": {
            "name": "query",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "_RequestObjectProxy"
                ],
                "context": [
                    "_Context"
                ]
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/_requests_mock_server/mock_web_services_api.py": {
        "route": {
            "name": "route",
            "location": 44,
            "return": [
                "Callable[(..., Callable)]"
            ],
            "arguments": {
                "path_pattern": [
                    "str"
                ],
                "http_methods": [
                    "Set[str]"
                ]
            }
        },
        "route.decorator": {
            "name": "decorator",
            "location": 60,
            "return": [
                "Callable[(..., str)]"
            ],
            "arguments": {
                "method": [
                    "Callable[(..., str)]"
                ]
            }
        },
        "MockVuforiaWebServicesAPI.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_manager": [
                    "TargetManager"
                ],
                "processing_time_seconds": [
                    "(int | float)"
                ]
            }
        },
        "MockVuforiaWebServicesAPI.add_target": {
            "name": "add_target",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "_RequestObjectProxy"
                ],
                "context": [
                    "_Context"
                ]
            }
        },
        "MockVuforiaWebServicesAPI.delete_target": {
            "name": "delete_target",
            "location": 185,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "_RequestObjectProxy"
                ],
                "context": [
                    "_Context"
                ]
            }
        },
        "MockVuforiaWebServicesAPI.database_summary": {
            "name": "database_summary",
            "location": 249,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "_RequestObjectProxy"
                ],
                "context": [
                    "_Context"
                ]
            }
        },
        "MockVuforiaWebServicesAPI.target_list": {
            "name": "target_list",
            "location": 312,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "_RequestObjectProxy"
                ],
                "context": [
                    "_Context"
                ]
            }
        },
        "MockVuforiaWebServicesAPI.get_target": {
            "name": "get_target",
            "location": 364,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "_RequestObjectProxy"
                ],
                "context": [
                    "_Context"
                ]
            }
        },
        "MockVuforiaWebServicesAPI.get_duplicates": {
            "name": "get_duplicates",
            "location": 429,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "_RequestObjectProxy"
                ],
                "context": [
                    "_Context"
                ]
            }
        },
        "MockVuforiaWebServicesAPI.update_target": {
            "name": "update_target",
            "location": 497,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "_RequestObjectProxy"
                ],
                "context": [
                    "_Context"
                ]
            }
        },
        "MockVuforiaWebServicesAPI.target_summary": {
            "name": "target_summary",
            "location": 608,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "_RequestObjectProxy"
                ],
                "context": [
                    "_Context"
                ]
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/_requests_mock_server/__init__.py": {},
    "vws-python-mock-master/src/mock_vws/_services_validators/active_flag_validators.py": {
        "validate_active_flag": {
            "name": "validate_active_flag",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "request_body": [
                    "bytes"
                ]
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/_services_validators/auth_validators.py": {
        "validate_auth_header_exists": {
            "name": "validate_auth_header_exists",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "request_headers": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "validate_access_key_exists": {
            "name": "validate_access_key_exists",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "request_headers": [
                    "Dict[(str, str)]"
                ],
                "databases": [
                    "Set[VuforiaDatabase]"
                ]
            }
        },
        "validate_auth_header_has_signature": {
            "name": "validate_auth_header_has_signature",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "request_headers": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "validate_authorization": {
            "name": "validate_authorization",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "request_path": [
                    "str"
                ],
                "request_headers": [
                    "Dict[(str, str)]"
                ],
                "request_body": [
                    "bytes"
                ],
                "request_method": [
                    "str"
                ],
                "databases": [
                    "Set[VuforiaDatabase]"
                ]
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/_services_validators/content_length_validators.py": {
        "validate_content_length_header_is_int": {
            "name": "validate_content_length_header_is_int",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "request_headers": [
                    "Dict[(str, str)]"
                ],
                "request_body": [
                    "bytes"
                ]
            }
        },
        "validate_content_length_header_not_too_large": {
            "name": "validate_content_length_header_not_too_large",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "request_headers": [
                    "Dict[(str, str)]"
                ],
                "request_body": [
                    "bytes"
                ]
            }
        },
        "validate_content_length_header_not_too_small": {
            "name": "validate_content_length_header_not_too_small",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "request_headers": [
                    "Dict[(str, str)]"
                ],
                "request_body": [
                    "bytes"
                ]
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/_services_validators/content_type_validators.py": {
        "validate_content_type_header_given": {
            "name": "validate_content_type_header_given",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "request_headers": [
                    "Dict[(str, str)]"
                ],
                "request_method": [
                    "str"
                ]
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/_services_validators/date_validators.py": {
        "validate_date_header_given": {
            "name": "validate_date_header_given",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "request_headers": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "validate_date_format": {
            "name": "validate_date_format",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "request_headers": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "validate_date_in_range": {
            "name": "validate_date_in_range",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "request_headers": [
                    "Dict[(str, str)]"
                ]
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/_services_validators/exceptions.py": {
        "UnknownTarget.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectInactive.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthenticationFailure.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fail.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status_code": [
                    "HTTPStatus"
                ]
            }
        },
        "MetadataTooLarge.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TargetNameExist.__init__": {
            "name": "__init__",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OopsErrorOccurredResponse.__init__": {
            "name": "__init__",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BadImage.__init__": {
            "name": "__init__",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageTooLarge.__init__": {
            "name": "__init__",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestTimeTooSkewed.__init__": {
            "name": "__init__",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentLengthHeaderTooLarge.__init__": {
            "name": "__init__",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentLengthHeaderNotInt.__init__": {
            "name": "__init__",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnnecessaryRequestBody.__init__": {
            "name": "__init__",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TargetStatusNotSuccess.__init__": {
            "name": "__init__",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TargetStatusProcessing.__init__": {
            "name": "__init__",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/_services_validators/image_validators.py": {
        "validate_image_format": {
            "name": "validate_image_format",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "request_body": [
                    "bytes"
                ]
            }
        },
        "validate_image_color_space": {
            "name": "validate_image_color_space",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "request_body": [
                    "bytes"
                ]
            }
        },
        "validate_image_size": {
            "name": "validate_image_size",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "request_body": [
                    "bytes"
                ]
            }
        },
        "validate_image_is_image": {
            "name": "validate_image_is_image",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "request_body": [
                    "bytes"
                ]
            }
        },
        "validate_image_encoding": {
            "name": "validate_image_encoding",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "request_body": [
                    "bytes"
                ]
            }
        },
        "validate_image_data_type": {
            "name": "validate_image_data_type",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "request_body": [
                    "bytes"
                ]
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/_services_validators/json_validators.py": {
        "validate_json": {
            "name": "validate_json",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "request_body": [
                    "bytes"
                ],
                "request_method": [
                    "str"
                ]
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/_services_validators/key_validators.py": {
        "validate_keys": {
            "name": "validate_keys",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "request_body": [
                    "bytes"
                ],
                "request_path": [
                    "str"
                ],
                "request_method": [
                    "str"
                ]
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/_services_validators/metadata_validators.py": {
        "validate_metadata_size": {
            "name": "validate_metadata_size",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "request_body": [
                    "bytes"
                ]
            }
        },
        "validate_metadata_encoding": {
            "name": "validate_metadata_encoding",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "request_body": [
                    "bytes"
                ]
            }
        },
        "validate_metadata_type": {
            "name": "validate_metadata_type",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "request_body": [
                    "bytes"
                ]
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/_services_validators/name_validators.py": {
        "validate_name_characters_in_range": {
            "name": "validate_name_characters_in_range",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "request_body": [
                    "bytes"
                ],
                "request_method": [
                    "str"
                ],
                "request_path": [
                    "str"
                ]
            }
        },
        "validate_name_type": {
            "name": "validate_name_type",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "request_body": [
                    "bytes"
                ]
            }
        },
        "validate_name_length": {
            "name": "validate_name_length",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "request_body": [
                    "bytes"
                ]
            }
        },
        "validate_name_does_not_exist_new_target": {
            "name": "validate_name_does_not_exist_new_target",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "databases": [
                    "Set[VuforiaDatabase]"
                ],
                "request_body": [
                    "bytes"
                ],
                "request_headers": [
                    "Dict[(str, str)]"
                ],
                "request_method": [
                    "str"
                ],
                "request_path": [
                    "str"
                ]
            }
        },
        "validate_name_does_not_exist_existing_target": {
            "name": "validate_name_does_not_exist_existing_target",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "request_headers": [
                    "Dict[(str, str)]"
                ],
                "request_body": [
                    "bytes"
                ],
                "request_method": [
                    "str"
                ],
                "request_path": [
                    "str"
                ],
                "databases": [
                    "Set[VuforiaDatabase]"
                ]
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/_services_validators/project_state_validators.py": {
        "validate_project_state": {
            "name": "validate_project_state",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "request_path": [
                    "str"
                ],
                "request_headers": [
                    "Dict[(str, str)]"
                ],
                "request_body": [
                    "bytes"
                ],
                "request_method": [
                    "str"
                ],
                "databases": [
                    "Set[VuforiaDatabase]"
                ]
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/_services_validators/target_validators.py": {
        "validate_target_id_exists": {
            "name": "validate_target_id_exists",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "request_path": [
                    "str"
                ],
                "request_headers": [
                    "Dict[(str, str)]"
                ],
                "request_body": [
                    "bytes"
                ],
                "request_method": [
                    "str"
                ],
                "databases": [
                    "Set[VuforiaDatabase]"
                ]
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/_services_validators/width_validators.py": {
        "validate_width": {
            "name": "validate_width",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "request_body": [
                    "bytes"
                ]
            }
        }
    },
    "vws-python-mock-master/src/mock_vws/_services_validators/__init__.py": {
        "run_services_validators": {
            "name": "run_services_validators",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "request_path": [
                    "str"
                ],
                "request_headers": [
                    "Dict[(str, str)]"
                ],
                "request_body": [
                    "bytes"
                ],
                "request_method": [
                    "str"
                ],
                "databases": [
                    "Set[VuforiaDatabase]"
                ]
            }
        }
    },
    "vws-python-mock-master/tests/conftest.py": {
        "fixture_vws_client": {
            "name": "fixture_vws_client",
            "location": 25,
            "return": [
                "VWS"
            ],
            "arguments": {
                "vuforia_database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "cloud_reco_client": {
            "name": "cloud_reco_client",
            "location": 36,
            "return": [
                "CloudRecoService"
            ],
            "arguments": {
                "vuforia_database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "fixture_inactive_vws_client": {
            "name": "fixture_inactive_vws_client",
            "location": 47,
            "return": [
                "VWS"
            ],
            "arguments": {
                "inactive_database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "target_id": {
            "name": "target_id",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "image_file_success_state_low_rating": [
                    "io.BytesIO"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "endpoint": {
            "name": "endpoint",
            "location": 89,
            "return": [
                "Endpoint"
            ],
            "arguments": {
                "request": [
                    "SubRequest"
                ]
            }
        },
        "not_base64_encoded_processable": {
            "name": "not_base64_encoded_processable",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "SubRequest"
                ]
            }
        },
        "not_base64_encoded_not_processable": {
            "name": "not_base64_encoded_not_processable",
            "location": 141,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "SubRequest"
                ]
            }
        }
    },
    "vws-python-mock-master/tests/__init__.py": {},
    "vws-python-mock-master/tests/mock_vws/test_add_target.py": {
        "add_target_to_vws": {
            "name": "add_target_to_vws",
            "location": 32,
            "return": [
                "Response"
            ],
            "arguments": {
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "data": [
                    "Dict[(str, Any)]"
                ],
                "content_type": [
                    "str"
                ]
            }
        },
        "_assert_oops_response": {
            "name": "_assert_oops_response",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "Response"
                ]
            }
        },
        "assert_success": {
            "name": "assert_success",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "Response"
                ]
            }
        },
        "TestContentTypes.test_content_types": {
            "name": "test_content_types",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "image_file_failed_state": [
                    "io.BytesIO"
                ],
                "content_type": [
                    "str"
                ]
            }
        },
        "TestContentTypes.test_empty_content_type": {
            "name": "test_empty_content_type",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "image_file_failed_state": [
                    "io.BytesIO"
                ]
            }
        },
        "TestMissingData.test_missing_data": {
            "name": "test_missing_data",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "image_file_failed_state": [
                    "io.BytesIO"
                ],
                "data_to_remove": [
                    "str"
                ]
            }
        },
        "TestWidth.test_width_invalid": {
            "name": "test_width_invalid",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "image_file_failed_state": [
                    "io.BytesIO"
                ],
                "width": [
                    "Any"
                ]
            }
        },
        "TestWidth.test_width_valid": {
            "name": "test_width_valid",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "image_file_failed_state": [
                    "io.BytesIO"
                ]
            }
        },
        "TestTargetName.test_name_valid": {
            "name": "test_name_valid",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "image_file_failed_state": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "TestTargetName.test_name_invalid": {
            "name": "test_name_invalid",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "image_file_failed_state": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "status_code": [
                    "int"
                ]
            }
        },
        "TestTargetName.test_existing_target_name": {
            "name": "test_existing_target_name",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_file_failed_state": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "TestTargetName.test_deleted_existing_target_name": {
            "name": "test_deleted_existing_target_name",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_file_failed_state": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestImage.test_image_valid": {
            "name": "test_image_valid",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "image_files_failed_state": [
                    "io.BytesIO"
                ]
            }
        },
        "TestImage.test_bad_image_format_or_color_space": {
            "name": "test_bad_image_format_or_color_space",
            "location": 512,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bad_image_file": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "TestImage.test_corrupted": {
            "name": "test_corrupted",
            "location": 542,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "corrupted_image_file": [
                    "io.BytesIO"
                ]
            }
        },
        "TestImage.test_image_file_size_too_large": {
            "name": "test_image_file_size_too_large",
            "location": 566,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "TestImage.test_not_base64_encoded_processable": {
            "name": "test_not_base64_encoded_processable",
            "location": 644,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "not_base64_encoded_processable": [
                    "str"
                ]
            }
        },
        "TestImage.test_not_base64_encoded_not_processable": {
            "name": "test_not_base64_encoded_not_processable",
            "location": 672,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "not_base64_encoded_not_processable": [
                    "str"
                ]
            }
        },
        "TestImage.test_not_image": {
            "name": "test_not_image",
            "location": 699,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "TestImage.test_invalid_type": {
            "name": "test_invalid_type",
            "location": 728,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "invalid_type_image": [
                    "Any"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "TestActiveFlag.test_valid": {
            "name": "test_valid",
            "location": 761,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "active_flag": [
                    "(bool | None)"
                ],
                "image_file_failed_state": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "TestActiveFlag.test_invalid": {
            "name": "test_invalid",
            "location": 789,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_file_failed_state": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "TestActiveFlag.test_not_set": {
            "name": "test_not_set",
            "location": 821,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "vws_client": [
                    "VWS"
                ],
                "image_file_failed_state": [
                    "io.BytesIO"
                ]
            }
        },
        "TestActiveFlag.test_set_to_none": {
            "name": "test_set_to_none",
            "location": 848,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "vws_client": [
                    "VWS"
                ],
                "image_file_failed_state": [
                    "io.BytesIO"
                ]
            }
        },
        "TestUnexpectedData.test_invalid_extra_data": {
            "name": "test_invalid_extra_data",
            "location": 883,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "image_file_failed_state": [
                    "io.BytesIO"
                ]
            }
        },
        "TestApplicationMetadata.test_base64_encoded": {
            "name": "test_base64_encoded",
            "location": 929,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "image_file_failed_state": [
                    "io.BytesIO"
                ],
                "metadata": [
                    "bytes"
                ]
            }
        },
        "TestApplicationMetadata.test_null": {
            "name": "test_null",
            "location": 956,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "image_file_failed_state": [
                    "io.BytesIO"
                ]
            }
        },
        "TestApplicationMetadata.test_invalid_type": {
            "name": "test_invalid_type",
            "location": 981,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "image_file_failed_state": [
                    "io.BytesIO"
                ]
            }
        },
        "TestApplicationMetadata.test_not_base64_encoded_processable": {
            "name": "test_not_base64_encoded_processable",
            "location": 1011,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "not_base64_encoded_processable": [
                    "str"
                ]
            }
        },
        "TestApplicationMetadata.test_not_base64_encoded_not_processable": {
            "name": "test_not_base64_encoded_not_processable",
            "location": 1038,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "not_base64_encoded_not_processable": [
                    "str"
                ]
            }
        },
        "TestApplicationMetadata.test_metadata_too_large": {
            "name": "test_metadata_too_large",
            "location": 1069,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "image_file_failed_state": [
                    "io.BytesIO"
                ]
            }
        },
        "TestInactiveProject.test_inactive_project": {
            "name": "test_inactive_project",
            "location": 1108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inactive_database": [
                    "VuforiaDatabase"
                ],
                "image_file_failed_state": [
                    "io.BytesIO"
                ]
            }
        }
    },
    "vws-python-mock-master/tests/mock_vws/test_authorization_header.py": {
        "TestAuthorizationHeader.test_missing": {
            "name": "test_missing",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "Endpoint"
                ]
            }
        },
        "TestMalformed.test_one_part_no_space": {
            "name": "test_one_part_no_space",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "Endpoint"
                ],
                "authorization_string": [
                    "str"
                ]
            }
        },
        "TestMalformed.test_one_part_with_space": {
            "name": "test_one_part_with_space",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "Endpoint"
                ]
            }
        },
        "TestMalformed.test_missing_signature": {
            "name": "test_missing_signature",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "Endpoint"
                ],
                "authorization_string": [
                    "str"
                ]
            }
        },
        "TestBadKey.test_bad_access_key_services": {
            "name": "test_bad_access_key_services",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "TestBadKey.test_bad_access_key_query": {
            "name": "test_bad_access_key_query",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "high_quality_image": [
                    "io.BytesIO"
                ]
            }
        },
        "TestBadKey.test_bad_secret_key_services": {
            "name": "test_bad_secret_key_services",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "TestBadKey.test_bad_secret_key_query": {
            "name": "test_bad_secret_key_query",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "high_quality_image": [
                    "io.BytesIO"
                ]
            }
        }
    },
    "vws-python-mock-master/tests/mock_vws/test_content_length.py": {
        "TestIncorrect.test_not_integer": {
            "name": "test_not_integer",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "Endpoint"
                ]
            }
        },
        "TestIncorrect.test_too_large": {
            "name": "test_too_large",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "Endpoint"
                ]
            }
        },
        "TestIncorrect.test_too_small": {
            "name": "test_too_small",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "Endpoint"
                ]
            }
        }
    },
    "vws-python-mock-master/tests/mock_vws/test_database_summary.py": {
        "_wait_for_image_numbers": {
            "name": "_wait_for_image_numbers",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "vws_client": [
                    "VWS"
                ],
                "active_images": [
                    "int"
                ],
                "inactive_images": [
                    "int"
                ],
                "failed_images": [
                    "int"
                ],
                "processing_images": [
                    "int"
                ]
            }
        },
        "TestDatabaseSummary.test_success": {
            "name": "test_success",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestDatabaseSummary.test_active_images": {
            "name": "test_active_images",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vws_client": [
                    "VWS"
                ],
                "target_id": [
                    "str"
                ]
            }
        },
        "TestDatabaseSummary.test_failed_images": {
            "name": "test_failed_images",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_file_failed_state": [
                    "io.BytesIO"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestDatabaseSummary.test_inactive_images": {
            "name": "test_inactive_images",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vws_client": [
                    "VWS"
                ],
                "image_file_success_state_low_rating": [
                    "io.BytesIO"
                ]
            }
        },
        "TestDatabaseSummary.test_inactive_failed": {
            "name": "test_inactive_failed",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_file_failed_state": [
                    "io.BytesIO"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestDatabaseSummary.test_deleted": {
            "name": "test_deleted",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_file_failed_state": [
                    "io.BytesIO"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestProcessingImages.test_processing_images": {
            "name": "test_processing_images",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_file_success_state_low_rating": [
                    "io.BytesIO"
                ]
            }
        },
        "TestQuotas.test_quotas": {
            "name": "test_quotas",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestRecos.test_query_request": {
            "name": "test_query_request",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cloud_reco_client": [
                    "CloudRecoService"
                ],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestRequestUsage.test_target_request": {
            "name": "test_target_request",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestRequestUsage.test_bad_target_request": {
            "name": "test_bad_target_request",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestRequestUsage.test_query_request": {
            "name": "test_query_request",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cloud_reco_client": [
                    "CloudRecoService"
                ],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestInactiveProject.test_inactive_project": {
            "name": "test_inactive_project",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inactive_vws_client": [
                    "VWS"
                ]
            }
        }
    },
    "vws-python-mock-master/tests/mock_vws/test_date_header.py": {
        "TestMissing.test_no_date_header": {
            "name": "test_no_date_header",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "Endpoint"
                ]
            }
        },
        "TestFormat.test_incorrect_date_format": {
            "name": "test_incorrect_date_format",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "Endpoint"
                ]
            }
        },
        "TestSkewedTime.test_date_out_of_range": {
            "name": "test_date_out_of_range",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "time_multiplier": [
                    "int"
                ],
                "endpoint": [
                    "Endpoint"
                ]
            }
        },
        "TestSkewedTime.test_date_in_range": {
            "name": "test_date_in_range",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "time_multiplier": [
                    "int"
                ],
                "endpoint": [
                    "Endpoint"
                ]
            }
        }
    },
    "vws-python-mock-master/tests/mock_vws/test_delete_target.py": {
        "TestDelete.test_no_wait": {
            "name": "test_no_wait",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_id": [
                    "str"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestDelete.test_processed": {
            "name": "test_processed",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_id": [
                    "str"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestInactiveProject.test_inactive_project": {
            "name": "test_inactive_project",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inactive_vws_client": [
                    "VWS"
                ]
            }
        }
    },
    "vws-python-mock-master/tests/mock_vws/test_docker.py": {
        "fixture_custom_bridge_network": {
            "name": "fixture_custom_bridge_network",
            "location": 22,
            "return": [
                "Iterator[Network]"
            ],
            "arguments": {}
        },
        "test_build_and_run": {
            "name": "test_build_and_run",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "custom_bridge_network": [
                    "Network"
                ]
            }
        }
    },
    "vws-python-mock-master/tests/mock_vws/test_flask_app_usage.py": {
        "enable_requests_mock": {
            "name": "enable_requests_mock",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "MonkeyPatch"
                ],
                "requests_mock": [
                    "Mocker"
                ]
            }
        },
        "TestProcessingTime.test_default": {
            "name": "test_default",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_file_failed_state": [
                    "io.BytesIO"
                ]
            }
        },
        "TestProcessingTime.test_custom": {
            "name": "test_custom",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_file_failed_state": [
                    "io.BytesIO"
                ],
                "monkeypatch": [
                    "MonkeyPatch"
                ]
            }
        },
        "TestCustomQueryRecognizesDeletionSeconds.test_default": {
            "name": "test_default",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ]
            }
        },
        "TestCustomQueryRecognizesDeletionSeconds.test_custom": {
            "name": "test_custom",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "monkeypatch": [
                    "MonkeyPatch"
                ]
            }
        },
        "TestCustomQueryProcessDeletionSeconds.test_default": {
            "name": "test_default",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ]
            }
        },
        "TestCustomQueryProcessDeletionSeconds.test_custom": {
            "name": "test_custom",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "monkeypatch": [
                    "MonkeyPatch"
                ]
            }
        },
        "TestAddDatabase.test_duplicate_keys": {
            "name": "test_duplicate_keys",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddDatabase.test_give_no_details": {
            "name": "test_give_no_details",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ]
            }
        },
        "TestDeleteDatabase.test_not_found": {
            "name": "test_not_found",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeleteDatabase.test_delete_database": {
            "name": "test_delete_database",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vws-python-mock-master/tests/mock_vws/test_get_duplicates.py": {
        "TestDuplicates.test_duplicates": {
            "name": "test_duplicates",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "image_file_success_state_low_rating": [
                    "io.BytesIO"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestDuplicates.test_status": {
            "name": "test_status",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_file_failed_state": [
                    "io.BytesIO"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestActiveFlag.test_active_flag": {
            "name": "test_active_flag",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestProcessing.test_processing": {
            "name": "test_processing",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestInactiveProject.test_inactive_project": {
            "name": "test_inactive_project",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inactive_vws_client": [
                    "VWS"
                ]
            }
        }
    },
    "vws-python-mock-master/tests/mock_vws/test_get_target.py": {
        "TestGetRecord.test_get_vws_target": {
            "name": "test_get_vws_target",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vws_client": [
                    "VWS"
                ],
                "image_file_failed_state": [
                    "io.BytesIO"
                ]
            }
        },
        "TestGetRecord.test_fail_status": {
            "name": "test_fail_status",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vws_client": [
                    "VWS"
                ],
                "image_file_failed_state": [
                    "io.BytesIO"
                ]
            }
        },
        "TestGetRecord.test_success_status": {
            "name": "test_success_status",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_file_success_state_low_rating": [
                    "io.BytesIO"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestInactiveProject.test_inactive_project": {
            "name": "test_inactive_project",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inactive_vws_client": [
                    "VWS"
                ]
            }
        }
    },
    "vws-python-mock-master/tests/mock_vws/test_invalid_given_id.py": {
        "TestInvalidGivenID.test_not_real_id": {
            "name": "test_not_real_id",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vws_client": [
                    "VWS"
                ],
                "endpoint": [
                    "Endpoint"
                ],
                "target_id": [
                    "str"
                ]
            }
        }
    },
    "vws-python-mock-master/tests/mock_vws/test_invalid_json.py": {
        "TestInvalidJSON.test_invalid_json": {
            "name": "test_invalid_json",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "Endpoint"
                ],
                "date_skew_minutes": [
                    "int"
                ]
            }
        }
    },
    "vws-python-mock-master/tests/mock_vws/test_query.py": {
        "query": {
            "name": "query",
            "location": 85,
            "return": [
                "Response"
            ],
            "arguments": {
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "body": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "add_and_wait_for_targets": {
            "name": "add_and_wait_for_targets",
            "location": 848,
            "return": [
                "None"
            ],
            "arguments": {
                "image": [
                    "io.BytesIO"
                ],
                "vws_client": [
                    "VWS"
                ],
                "num_targets": [
                    "int"
                ]
            }
        },
        "TestContentType.test_incorrect_no_boundary": {
            "name": "test_incorrect_no_boundary",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "content_type": [
                    "str"
                ],
                "resp_status_code": [
                    "int"
                ],
                "resp_content_type": [
                    "(str | None)"
                ],
                "resp_cache_control": [
                    "(str | None)"
                ],
                "resp_text": [
                    "str"
                ]
            }
        },
        "TestContentType.test_incorrect_with_boundary": {
            "name": "test_incorrect_with_boundary",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "TestContentType.test_no_boundary": {
            "name": "test_no_boundary",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "content_type": [
                    "str"
                ]
            }
        },
        "TestContentType.test_bogus_boundary": {
            "name": "test_bogus_boundary",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "TestContentType.test_extra_section": {
            "name": "test_extra_section",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "TestSuccess.test_no_results": {
            "name": "test_no_results",
            "location": 476,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "TestSuccess.test_match": {
            "name": "test_match",
            "location": 493,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestSuccess.test_not_base64_encoded_processable": {
            "name": "test_not_base64_encoded_processable",
            "location": 539,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "vws_client": [
                    "VWS"
                ],
                "not_base64_encoded_processable": [
                    "str"
                ]
            }
        },
        "TestIncorrectFields.test_missing_image": {
            "name": "test_missing_image",
            "location": 598,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "TestIncorrectFields.test_extra_fields": {
            "name": "test_extra_fields",
            "location": 617,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "TestIncorrectFields.test_missing_image_and_extra_fields": {
            "name": "test_missing_image_and_extra_fields",
            "location": 643,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "TestMaxNumResults.test_default": {
            "name": "test_default",
            "location": 676,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestMaxNumResults.test_valid_accepted": {
            "name": "test_valid_accepted",
            "location": 714,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "num_results": [
                    "(int | bytes)"
                ]
            }
        },
        "TestMaxNumResults.test_valid_works": {
            "name": "test_valid_works",
            "location": 744,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestMaxNumResults.test_out_of_range": {
            "name": "test_out_of_range",
            "location": 771,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "num_results": [
                    "int"
                ]
            }
        },
        "TestMaxNumResults.test_invalid_type": {
            "name": "test_invalid_type",
            "location": 812,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "num_results": [
                    "bytes"
                ]
            }
        },
        "TestIncludeTargetData.test_default": {
            "name": "test_default",
            "location": 877,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vws_client": [
                    "VWS"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "TestIncludeTargetData.test_top": {
            "name": "test_top",
            "location": 905,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "include_target_data": [
                    "str"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestIncludeTargetData.test_none": {
            "name": "test_none",
            "location": 936,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "include_target_data": [
                    "str"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestIncludeTargetData.test_all": {
            "name": "test_all",
            "location": 967,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "include_target_data": [
                    "str"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestIncludeTargetData.test_invalid_value": {
            "name": "test_invalid_value",
            "location": 998,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "include_target_data": [
                    "Any"
                ]
            }
        },
        "TestAcceptHeader.test_valid": {
            "name": "test_valid",
            "location": 1047,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "extra_headers": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "TestAcceptHeader.test_invalid": {
            "name": "test_invalid",
            "location": 1094,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "TestActiveFlag.test_inactive": {
            "name": "test_inactive",
            "location": 1155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestBadImage.test_corrupted": {
            "name": "test_corrupted",
            "location": 1188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "corrupted_image_file": [
                    "io.BytesIO"
                ]
            }
        },
        "TestBadImage.test_not_image": {
            "name": "test_not_image",
            "location": 1205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "TestMaximumImageFileSize.test_png": {
            "name": "test_png",
            "location": 1248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "TestMaximumImageFileSize.test_jpeg": {
            "name": "test_jpeg",
            "location": 1322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "TestMaximumImageDimensions.test_max_height": {
            "name": "test_max_height",
            "location": 1404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "TestMaximumImageDimensions.test_max_width": {
            "name": "test_max_width",
            "location": 1463,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "TestImageFormats.test_supported": {
            "name": "test_supported",
            "location": 1530,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "file_format": [
                    "str"
                ]
            }
        },
        "TestImageFormats.test_unsupported": {
            "name": "test_unsupported",
            "location": 1551,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "TestProcessing.test_processing": {
            "name": "test_processing",
            "location": 1603,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "active_flag": [
                    "bool"
                ],
                "vws_client": [
                    "VWS"
                ],
                "cloud_reco_client": [
                    "CloudRecoService"
                ]
            }
        },
        "TestUpdate.test_updated_target": {
            "name": "test_updated_target",
            "location": 1647,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "different_high_quality_image": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestDeleted.test_deleted": {
            "name": "test_deleted",
            "location": 1736,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestDeleted.test_deleted_and_wait": {
            "name": "test_deleted_and_wait",
            "location": 1779,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestDeleted.test_deleted_inactive": {
            "name": "test_deleted_inactive",
            "location": 1847,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestTargetStatusFailed.test_status_failed": {
            "name": "test_status_failed",
            "location": 1882,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_file_failed_state": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestDateFormats.test_date_formats": {
            "name": "test_date_formats",
            "location": 1934,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "datetime_format": [
                    "str"
                ],
                "include_tz": [
                    "bool"
                ]
            }
        },
        "TestInactiveProject.test_inactive_project": {
            "name": "test_inactive_project",
            "location": 1997,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inactive_database": [
                    "VuforiaDatabase"
                ],
                "high_quality_image": [
                    "io.BytesIO"
                ]
            }
        }
    },
    "vws-python-mock-master/tests/mock_vws/test_requests_mock_usage.py": {
        "request_unmocked_address": {
            "name": "request_unmocked_address",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "request_mocked_address": {
            "name": "request_mocked_address",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestRealHTTP.test_default": {
            "name": "test_default",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRealHTTP.test_real_http": {
            "name": "test_real_http",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessingTime.test_default": {
            "name": "test_default",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_file_failed_state": [
                    "io.BytesIO"
                ]
            }
        },
        "TestProcessingTime.test_custom": {
            "name": "test_custom",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_file_failed_state": [
                    "io.BytesIO"
                ]
            }
        },
        "TestDatabaseName.test_default": {
            "name": "test_default",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatabaseName.test_custom_name": {
            "name": "test_custom_name",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomBaseURLs.test_custom_base_vws_url": {
            "name": "test_custom_base_vws_url",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomBaseURLs.test_custom_base_vwq_url": {
            "name": "test_custom_base_vwq_url",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomBaseURLs.test_no_scheme": {
            "name": "test_no_scheme",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomQueryRecognizesDeletionSeconds.test_default": {
            "name": "test_default",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ]
            }
        },
        "TestCustomQueryRecognizesDeletionSeconds.test_with_no_processing_time": {
            "name": "test_with_no_processing_time",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ]
            }
        },
        "TestCustomQueryRecognizesDeletionSeconds.test_custom": {
            "name": "test_custom",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ]
            }
        },
        "TestCustomQueryProcessDeletionSeconds.test_default": {
            "name": "test_default",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ]
            }
        },
        "TestCustomQueryProcessDeletionSeconds.test_custom": {
            "name": "test_custom",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ]
            }
        },
        "TestStates.test_repr": {
            "name": "test_repr",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTargets.test_to_dict": {
            "name": "test_to_dict",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ]
            }
        },
        "TestTargets.test_to_dict_deleted": {
            "name": "test_to_dict_deleted",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ]
            }
        },
        "TestDatabaseToDict.test_to_dict": {
            "name": "test_to_dict",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "high_quality_image": [
                    "io.BytesIO"
                ]
            }
        },
        "TestDateHeader.test_date_changes": {
            "name": "test_date_changes",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddDatabase.test_duplicate_keys": {
            "name": "test_duplicate_keys",
            "location": 483,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vws-python-mock-master/tests/mock_vws/test_target_list.py": {
        "TestTargetList.test_includes_targets": {
            "name": "test_includes_targets",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vws_client": [
                    "VWS"
                ],
                "target_id": [
                    "str"
                ]
            }
        },
        "TestTargetList.test_deleted": {
            "name": "test_deleted",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vws_client": [
                    "VWS"
                ],
                "target_id": [
                    "str"
                ]
            }
        },
        "TestInactiveProject.test_inactive_project": {
            "name": "test_inactive_project",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inactive_vws_client": [
                    "VWS"
                ]
            }
        }
    },
    "vws-python-mock-master/tests/mock_vws/test_target_summary.py": {
        "TestTargetSummary.test_target_summary": {
            "name": "test_target_summary",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vws_client": [
                    "VWS"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "image_file_failed_state": [
                    "io.BytesIO"
                ],
                "active_flag": [
                    "bool"
                ]
            }
        },
        "TestTargetSummary.test_after_processing": {
            "name": "test_after_processing",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vws_client": [
                    "VWS"
                ],
                "request": [
                    "SubRequest"
                ],
                "image_fixture_name": [
                    "str"
                ],
                "expected_status": [
                    "TargetStatuses"
                ]
            }
        },
        "TestRecognitionCounts.test_recognition": {
            "name": "test_recognition",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vws_client": [
                    "VWS"
                ],
                "cloud_reco_client": [
                    "CloudRecoService"
                ],
                "high_quality_image": [
                    "io.BytesIO"
                ]
            }
        },
        "TestInactiveProject.test_inactive_project": {
            "name": "test_inactive_project",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inactive_vws_client": [
                    "VWS"
                ]
            }
        }
    },
    "vws-python-mock-master/tests/mock_vws/test_unexpected_json.py": {
        "TestUnexpectedJSON.test_does_not_take_data": {
            "name": "test_does_not_take_data",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "Endpoint"
                ]
            }
        }
    },
    "vws-python-mock-master/tests/mock_vws/test_update_target.py": {
        "update_target": {
            "name": "update_target",
            "location": 33,
            "return": [
                "Response"
            ],
            "arguments": {
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "data": [
                    "Dict[(str, Any)]"
                ],
                "target_id": [
                    "str"
                ],
                "content_type": [
                    "str"
                ]
            }
        },
        "TestUpdate.test_content_types": {
            "name": "test_content_types",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "vws_client": [
                    "VWS"
                ],
                "image_file_failed_state": [
                    "io.BytesIO"
                ],
                "content_type": [
                    "str"
                ]
            }
        },
        "TestUpdate.test_empty_content_type": {
            "name": "test_empty_content_type",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "vws_client": [
                    "VWS"
                ],
                "image_file_failed_state": [
                    "io.BytesIO"
                ]
            }
        },
        "TestUpdate.test_no_fields_given": {
            "name": "test_no_fields_given",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "vws_client": [
                    "VWS"
                ],
                "target_id": [
                    "str"
                ]
            }
        },
        "TestUnexpectedData.test_invalid_extra_data": {
            "name": "test_invalid_extra_data",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "vws_client": [
                    "VWS"
                ],
                "target_id": [
                    "str"
                ]
            }
        },
        "TestWidth.test_width_invalid": {
            "name": "test_width_invalid",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "vws_client": [
                    "VWS"
                ],
                "width": [
                    "Any"
                ],
                "target_id": [
                    "str"
                ]
            }
        },
        "TestWidth.test_width_valid": {
            "name": "test_width_valid",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vws_client": [
                    "VWS"
                ],
                "target_id": [
                    "str"
                ]
            }
        },
        "TestActiveFlag.test_active_flag": {
            "name": "test_active_flag",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vws_client": [
                    "VWS"
                ],
                "image_file_success_state_low_rating": [
                    "io.BytesIO"
                ],
                "initial_active_flag": [
                    "bool"
                ],
                "desired_active_flag": [
                    "bool"
                ]
            }
        },
        "TestActiveFlag.test_invalid": {
            "name": "test_invalid",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "vws_client": [
                    "VWS"
                ],
                "target_id": [
                    "str"
                ],
                "desired_active_flag": [
                    "(str | None)"
                ]
            }
        },
        "TestApplicationMetadata.test_base64_encoded": {
            "name": "test_base64_encoded",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_id": [
                    "str"
                ],
                "metadata": [
                    "bytes"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestApplicationMetadata.test_invalid_type": {
            "name": "test_invalid_type",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "vws_client": [
                    "VWS"
                ],
                "target_id": [
                    "str"
                ],
                "invalid_metadata": [
                    "(int | None)"
                ]
            }
        },
        "TestApplicationMetadata.test_not_base64_encoded_processable": {
            "name": "test_not_base64_encoded_processable",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "vws_client": [
                    "VWS"
                ],
                "target_id": [
                    "str"
                ],
                "not_base64_encoded_processable": [
                    "str"
                ]
            }
        },
        "TestApplicationMetadata.test_not_base64_encoded_not_processable": {
            "name": "test_not_base64_encoded_not_processable",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "vws_client": [
                    "VWS"
                ],
                "target_id": [
                    "str"
                ],
                "not_base64_encoded_not_processable": [
                    "str"
                ]
            }
        },
        "TestApplicationMetadata.test_metadata_too_large": {
            "name": "test_metadata_too_large",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "vws_client": [
                    "VWS"
                ],
                "target_id": [
                    "str"
                ]
            }
        },
        "TestTargetName.test_name_valid": {
            "name": "test_name_valid",
            "location": 497,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "target_id": [
                    "str"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestTargetName.test_name_invalid": {
            "name": "test_name_invalid",
            "location": 545,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "target_id": [
                    "str"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "vws_client": [
                    "VWS"
                ],
                "status_code": [
                    "int"
                ],
                "result_code": [
                    "ResultCodes"
                ]
            }
        },
        "TestTargetName.test_existing_target_name": {
            "name": "test_existing_target_name",
            "location": 571,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_file_success_state_low_rating": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestTargetName.test_same_name_given": {
            "name": "test_same_name_given",
            "location": 614,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_file_success_state_low_rating": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestImage.test_image_valid": {
            "name": "test_image_valid",
            "location": 660,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "image_files_failed_state": [
                    "io.BytesIO"
                ],
                "target_id": [
                    "str"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestImage.test_bad_image_format_or_color_space": {
            "name": "test_bad_image_format_or_color_space",
            "location": 688,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bad_image_file": [
                    "io.BytesIO"
                ],
                "target_id": [
                    "str"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestImage.test_corrupted": {
            "name": "test_corrupted",
            "location": 706,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vws_client": [
                    "VWS"
                ],
                "corrupted_image_file": [
                    "io.BytesIO"
                ],
                "target_id": [
                    "str"
                ]
            }
        },
        "TestImage.test_image_too_large": {
            "name": "test_image_too_large",
            "location": 721,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "target_id": [
                    "str"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestImage.test_not_base64_encoded_processable": {
            "name": "test_not_base64_encoded_processable",
            "location": 799,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "target_id": [
                    "str"
                ],
                "not_base64_encoded_processable": [
                    "str"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestImage.test_not_base64_encoded_not_processable": {
            "name": "test_not_base64_encoded_not_processable",
            "location": 826,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "vws_client": [
                    "VWS"
                ],
                "target_id": [
                    "str"
                ],
                "not_base64_encoded_not_processable": [
                    "str"
                ]
            }
        },
        "TestImage.test_not_image": {
            "name": "test_not_image",
            "location": 852,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "target_id": [
                    "str"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestImage.test_invalid_type": {
            "name": "test_invalid_type",
            "location": 880,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "invalid_type_image": [
                    "(int | None)"
                ],
                "target_id": [
                    "str"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestImage.test_rating_can_change": {
            "name": "test_rating_can_change",
            "location": 904,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_file_success_state_low_rating": [
                    "io.BytesIO"
                ],
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "TestInactiveProject.test_inactive_project": {
            "name": "test_inactive_project",
            "location": 960,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inactive_vws_client": [
                    "VWS"
                ]
            }
        }
    },
    "vws-python-mock-master/tests/mock_vws/__init__.py": {},
    "vws-python-mock-master/tests/mock_vws/fixtures/credentials.py": {
        "vuforia_database": {
            "name": "vuforia_database",
            "location": 14,
            "return": [
                "VuforiaDatabase"
            ],
            "arguments": {}
        },
        "inactive_database": {
            "name": "inactive_database",
            "location": 30,
            "return": [
                "VuforiaDatabase"
            ],
            "arguments": {}
        }
    },
    "vws-python-mock-master/tests/mock_vws/fixtures/prepared_requests.py": {
        "_add_target": {
            "name": "_add_target",
            "location": 28,
            "return": [
                "Endpoint"
            ],
            "arguments": {
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "image_file_failed_state": [
                    "io.BytesIO"
                ]
            }
        },
        "_delete_target": {
            "name": "_delete_target",
            "location": 86,
            "return": [
                "Endpoint"
            ],
            "arguments": {
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "target_id": [
                    "str"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "_database_summary": {
            "name": "_database_summary",
            "location": 135,
            "return": [
                "Endpoint"
            ],
            "arguments": {
                "vuforia_database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "_get_duplicates": {
            "name": "_get_duplicates",
            "location": 181,
            "return": [
                "Endpoint"
            ],
            "arguments": {
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "target_id": [
                    "str"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "_get_target": {
            "name": "_get_target",
            "location": 233,
            "return": [
                "Endpoint"
            ],
            "arguments": {
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "target_id": [
                    "str"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "_target_list": {
            "name": "_target_list",
            "location": 284,
            "return": [
                "Endpoint"
            ],
            "arguments": {
                "vuforia_database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "_target_summary": {
            "name": "_target_summary",
            "location": 330,
            "return": [
                "Endpoint"
            ],
            "arguments": {
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "target_id": [
                    "str"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "_update_target": {
            "name": "_update_target",
            "location": 381,
            "return": [
                "Endpoint"
            ],
            "arguments": {
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "target_id": [
                    "str"
                ],
                "vws_client": [
                    "VWS"
                ]
            }
        },
        "_query": {
            "name": "_query",
            "location": 435,
            "return": [
                "Endpoint"
            ],
            "arguments": {
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "high_quality_image": [
                    "io.BytesIO"
                ]
            }
        }
    },
    "vws-python-mock-master/tests/mock_vws/fixtures/vuforia_backends.py": {
        "_delete_all_targets": {
            "name": "_delete_all_targets",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "database_keys": [
                    "VuforiaDatabase"
                ]
            }
        },
        "_enable_use_real_vuforia": {
            "name": "_enable_use_real_vuforia",
            "location": 57,
            "return": [
                "Generator"
            ],
            "arguments": {
                "working_database": [
                    "VuforiaDatabase"
                ],
                "inactive_database": [
                    "VuforiaDatabase"
                ],
                "monkeypatch": [
                    "MonkeyPatch"
                ]
            }
        },
        "_enable_use_mock_vuforia": {
            "name": "_enable_use_mock_vuforia",
            "location": 68,
            "return": [
                "Generator"
            ],
            "arguments": {
                "working_database": [
                    "VuforiaDatabase"
                ],
                "inactive_database": [
                    "VuforiaDatabase"
                ],
                "monkeypatch": [
                    "MonkeyPatch"
                ]
            }
        },
        "_enable_use_docker_in_memory": {
            "name": "_enable_use_docker_in_memory",
            "location": 97,
            "return": [
                "Generator"
            ],
            "arguments": {
                "working_database": [
                    "VuforiaDatabase"
                ],
                "inactive_database": [
                    "VuforiaDatabase"
                ],
                "monkeypatch": [
                    "MonkeyPatch"
                ]
            }
        },
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Parser"
                ]
            }
        },
        "verify_mock_vuforia": {
            "name": "verify_mock_vuforia",
            "location": 182,
            "return": [
                "Generator"
            ],
            "arguments": {
                "request": [
                    "SubRequest"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "inactive_database": [
                    "VuforiaDatabase"
                ],
                "monkeypatch": [
                    "MonkeyPatch"
                ]
            }
        }
    },
    "vws-python-mock-master/tests/mock_vws/fixtures/__init__.py": {},
    "vws-python-mock-master/tests/mock_vws/utils/assertions.py": {
        "assert_vws_failure": {
            "name": "assert_vws_failure",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "Response"
                ],
                "status_code": [
                    "int"
                ],
                "result_code": [
                    "ResultCodes"
                ]
            }
        },
        "assert_valid_date_header": {
            "name": "assert_valid_date_header",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "Response"
                ]
            }
        },
        "assert_valid_transaction_id": {
            "name": "assert_valid_transaction_id",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "Response"
                ]
            }
        },
        "assert_json_separators": {
            "name": "assert_json_separators",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "Response"
                ]
            }
        },
        "assert_vws_response": {
            "name": "assert_vws_response",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "Response"
                ],
                "status_code": [
                    "int"
                ],
                "result_code": [
                    "ResultCodes"
                ]
            }
        },
        "assert_query_success": {
            "name": "assert_query_success",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "Response"
                ]
            }
        },
        "assert_vwq_failure": {
            "name": "assert_vwq_failure",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "Response"
                ],
                "status_code": [
                    "int"
                ],
                "content_type": [
                    "(str | None)"
                ],
                "cache_control": [
                    "(str | None)"
                ],
                "www_authenticate": [
                    "(str | None)"
                ],
                "connection": [
                    "str"
                ]
            }
        }
    },
    "vws-python-mock-master/tests/mock_vws/utils/usage_test_helpers.py": {
        "_add_and_delete_target": {
            "name": "_add_and_delete_target",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "image": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "processing_time_seconds": {
            "name": "processing_time_seconds",
            "location": 39,
            "return": [
                "float"
            ],
            "arguments": {
                "vuforia_database": [
                    "VuforiaDatabase"
                ],
                "image": [
                    "io.BytesIO"
                ]
            }
        },
        "_wait_for_deletion_recognized": {
            "name": "_wait_for_deletion_recognized",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "image": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "_wait_for_deletion_processed": {
            "name": "_wait_for_deletion_processed",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "image": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "recognize_deletion_seconds": {
            "name": "recognize_deletion_seconds",
            "location": 123,
            "return": [
                "float"
            ],
            "arguments": {
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ]
            }
        },
        "process_deletion_seconds": {
            "name": "process_deletion_seconds",
            "location": 147,
            "return": [
                "float"
            ],
            "arguments": {
                "high_quality_image": [
                    "io.BytesIO"
                ],
                "vuforia_database": [
                    "VuforiaDatabase"
                ]
            }
        }
    },
    "vws-python-mock-master/tests/mock_vws/utils/__init__.py": {
        "make_image_file": {
            "name": "make_image_file",
            "location": 67,
            "return": [
                "io.BytesIO"
            ],
            "arguments": {
                "file_format": [
                    "str"
                ],
                "color_space": [
                    "str"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ]
            }
        },
        "Endpoint.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepared_request": [
                    "requests.PreparedRequest"
                ],
                "successful_headers_result_code": [
                    "ResultCodes"
                ],
                "successful_headers_status_code": [
                    "int"
                ],
                "access_key": [
                    "str"
                ],
                "secret_key": [
                    "str"
                ]
            }
        }
    }
}
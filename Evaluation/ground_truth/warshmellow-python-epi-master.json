{
    "warshmellow-python-epi-master/arraysepi.py": {
        "dutch": {
            "name": "dutch",
            "location": 4,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "pivot_index": [
                    "int"
                ],
                "nums": [
                    "List[int]"
                ]
            }
        },
        "mod_three_sort": {
            "name": "mod_three_sort",
            "location": 24,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "nums": [
                    "List[int]"
                ]
            }
        },
        "mod_two_stable_sort": {
            "name": "mod_two_stable_sort",
            "location": 74,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "nums": [
                    "List[int]"
                ]
            }
        },
        "add_two_bin_str": {
            "name": "add_two_bin_str",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "a": [],
                "b": [
                    "str"
                ]
            }
        },
        "multiply_two_list": {
            "name": "multiply_two_list",
            "location": 135,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "num1": [],
                "num2": [
                    "List[int]"
                ]
            }
        },
        "dedup_sorted": {
            "name": "dedup_sorted",
            "location": 158,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "a": [
                    "List[int]"
                ]
            }
        },
        "remove_key_and_shift": {
            "name": "remove_key_and_shift",
            "location": 177,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "a": [
                    "List[int]"
                ],
                "key": [
                    "int"
                ]
            }
        },
        "overwrite_limit_sorted": {
            "name": "overwrite_limit_sorted",
            "location": 203,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "a": [
                    "List[int]"
                ],
                "limit": [
                    "int"
                ]
            }
        }
    },
    "warshmellow-python-epi-master/arraysepi_test.py": {
        "TestArraysEpi.test_dutch": {
            "name": "test_dutch",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "nums": [
                    "List[int]"
                ]
            }
        },
        "TestArraysEpi.test_mod_three_sort": {
            "name": "test_mod_three_sort",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "nums": [
                    "List[int]"
                ]
            }
        },
        "TestArraysEpi.test_mod_two_stable_sort": {
            "name": "test_mod_two_stable_sort",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "nums": [
                    "List[int]"
                ]
            }
        },
        "TestArraysEpi.test_two_bin_str": {
            "name": "test_two_bin_str",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "a": [
                    "List[str]"
                ],
                "b": [
                    "List[str]"
                ]
            }
        },
        "TestArraysEpi.test_multiply_two_list": {
            "name": "test_multiply_two_list",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "a": [
                    "List[int]"
                ],
                "b": [
                    "List[int]"
                ]
            }
        },
        "TestArraysEpi.test_dedup_sorted": {
            "name": "test_dedup_sorted",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "a": [
                    "List[int]"
                ]
            }
        },
        "TestArraysEpi.test_remove_key_and_shift": {
            "name": "test_remove_key_and_shift",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "a": [
                    "List[int]"
                ]
            }
        },
        "TestArraysEpi.test_overwrite_limit_sorted": {
            "name": "test_overwrite_limit_sorted",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "a": [
                    "List[int]"
                ]
            }
        }
    },
    "warshmellow-python-epi-master/bintreesepi.py": {
        "BinTree.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [],
            "arguments": {
                "self": [],
                "item": [],
                "left": [],
                "right": [],
                "parent": []
            }
        },
        "BinTree.inorder": {
            "name": "inorder",
            "location": 9,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "BinTree.preorder": {
            "name": "preorder",
            "location": 20,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "BinTree.postorder": {
            "name": "postorder",
            "location": 31,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "BinTree.height": {
            "name": "height",
            "location": 42,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "BinTree.is_height_balanced": {
            "name": "is_height_balanced",
            "location": 49,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "BinTree.reconstruct": {
            "name": "reconstruct",
            "location": 68,
            "return": [],
            "arguments": {
                "cls": [],
                "inorder": [],
                "preorder": []
            }
        },
        "BinTree.reconstruct_with_marker": {
            "name": "reconstruct_with_marker",
            "location": 87,
            "return": [],
            "arguments": {
                "cls": [],
                "preorder_with_marker": []
            }
        },
        "BinTree.reconstruct_from_postorder": {
            "name": "reconstruct_from_postorder",
            "location": 104,
            "return": [],
            "arguments": {
                "cls": [],
                "po": []
            }
        },
        "BinTree.reconstruct_with_marker.helper": {
            "name": "helper",
            "location": 88,
            "return": [],
            "arguments": {
                "preorder_iter": []
            }
        },
        "BinTree.reconstruct_from_postorder.helper": {
            "name": "helper",
            "location": 105,
            "return": [],
            "arguments": {
                "postorder_iter": []
            }
        }
    },
    "warshmellow-python-epi-master/bintreesepi_test.py": {
        "TestBinTreesEpi.test_is_height_balanced": {
            "name": "test_is_height_balanced",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinTreesEpi.test_reconstruct": {
            "name": "test_reconstruct",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinTreesEpi.test_reconstruct_with_marker": {
            "name": "test_reconstruct_with_marker",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinTreesEpi.test_reconstruct_from_postorder": {
            "name": "test_reconstruct_from_postorder",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "warshmellow-python-epi-master/bstsepi_test.py": {
        "TestBinTreesEpi.test_is_bst": {
            "name": "test_is_bst",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "warshmellow-python-epi-master/hashtablesepi.py": {
        "can_form_palindrome": {
            "name": "can_form_palindrome",
            "location": 5,
            "return": [],
            "arguments": {
                "a": [
                    "str"
                ]
            }
        },
        "is_letter_constructible": {
            "name": "is_letter_constructible",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "letter_text": [],
                "magazine_text": [
                    "str"
                ]
            }
        },
        "lca": {
            "name": "lca",
            "location": 62,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "nearest_repeated": {
            "name": "nearest_repeated",
            "location": 78,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "smallest_cover": {
            "name": "smallest_cover",
            "location": 91,
            "return": [],
            "arguments": {
                "s": [],
                "query": []
            }
        },
        "smallest_cover_lin": {
            "name": "smallest_cover_lin",
            "location": 107,
            "return": [],
            "arguments": {
                "s": [],
                "query": []
            }
        },
        "len_longest_contained_interval": {
            "name": "len_longest_contained_interval",
            "location": 143,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "LRUCache.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "LRUCache.__len__": {
            "name": "__len__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LRUCache.size": {
            "name": "size",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LRUCache._remove_lru": {
            "name": "_remove_lru",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LRUCache.insert": {
            "name": "insert",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": [],
                "time": []
            }
        },
        "LRUCache.get": {
            "name": "get",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "time": []
            }
        },
        "LRUCache.remove": {
            "name": "remove",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "lca.path_to_root": {
            "name": "path_to_root",
            "location": 63,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "smallest_cover.list_contains": {
            "name": "list_contains",
            "location": 92,
            "return": [],
            "arguments": {
                "subarray": [],
                "keywords": []
            }
        },
        "smallest_cover_lin.counter_contains": {
            "name": "counter_contains",
            "location": 108,
            "return": [],
            "arguments": {
                "bigger": [],
                "smaller": []
            }
        },
        "LRUCache._remove_lru.mins": {
            "name": "mins",
            "location": 26,
            "return": [],
            "arguments": {
                "table": []
            }
        }
    },
    "warshmellow-python-epi-master/hashtablesepi_test.py": {
        "TestHashTablesEpi.test_can_form_palindrome": {
            "name": "test_can_form_palindrome",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "a": [
                    "str"
                ]
            }
        },
        "TestHashTablesEpi.test_is_letter_constructible": {
            "name": "test_is_letter_constructible",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "letter_text": [],
                "magazine_text": []
            }
        },
        "TestHashTablesEpi.test_lru_cache": {
            "name": "test_lru_cache",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHashTablesEpi.test_lca": {
            "name": "test_lca",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHashTablesEpi.test_nearest_repeated": {
            "name": "test_nearest_repeated",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHashTablesEpi.test_smallest_cover": {
            "name": "test_smallest_cover",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHashTablesEpi.test_len_longest_contained_interval": {
            "name": "test_len_longest_contained_interval",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "warshmellow-python-epi-master/honorsclass.py": {
        "halve": {
            "name": "halve",
            "location": 1,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ]
            }
        },
        "is_odd": {
            "name": "is_odd",
            "location": 5,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "int"
                ]
            }
        },
        "is_even": {
            "name": "is_even",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "int"
                ]
            }
        },
        "bin_gcd": {
            "name": "bin_gcd",
            "location": 13,
            "return": [
                "int"
            ],
            "arguments": {
                "u": [],
                "v": [
                    "int"
                ]
            }
        }
    },
    "warshmellow-python-epi-master/honorsclass_test.py": {
        "TestHonorsClass.test_bin_gcd": {
            "name": "test_bin_gcd",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": []
            }
        }
    }
}
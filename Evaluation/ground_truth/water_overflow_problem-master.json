{
    "water_overflow_problem-master/run.py": {
        "solveWaterOverFlowFor": {
            "name": "solveWaterOverFlowFor",
            "location": 19,
            "return": [
                "float"
            ],
            "arguments": {
                "jth_glass": [
                    "int"
                ],
                "ith_row": [
                    "int"
                ],
                "k_liter": [
                    "float"
                ]
            }
        }
    },
    "water_overflow_problem-master/stacks.py": {
        "WaterStack.pour": {
            "name": "pour",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "n_liters": [
                    "float"
                ]
            }
        },
        "WaterStack.get_water_at": {
            "name": "get_water_at",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "row": [
                    "int"
                ],
                "column": [
                    "int"
                ]
            }
        },
        "OverflowException.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "WaterNotFilledException.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "TriangularStack.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "size": [
                    "int"
                ],
                "unit_capacity": [
                    "float"
                ]
            }
        },
        "TriangularStack.max_sum": {
            "name": "max_sum",
            "location": 58,
            "return": [
                "float"
            ],
            "arguments": {
                "unit_capacity": [
                    "float"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "TriangularStack.pour": {
            "name": "pour",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "water_volume": [
                    "float"
                ]
            }
        },
        "TriangularStack.get_water_at": {
            "name": "get_water_at",
            "location": 93,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "int"
                ],
                "_column": [
                    "int"
                ]
            }
        }
    },
    "water_overflow_problem-master/tests/testStacks.py": {
        "TriangularStackTests.setUp": {
            "name": "setUp",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TriangularStackTests.test_triangular_stack_initialized_properly": {
            "name": "test_triangular_stack_initialized_properly",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TriangularStackTests.test_pouring_water_in_stack_when_capacity_is_higher": {
            "name": "test_pouring_water_in_stack_when_capacity_is_higher",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "size": [],
                "k_liter_water": []
            }
        },
        "TriangularStackTests.test_maximun_capacity_of_stack": {
            "name": "test_maximun_capacity_of_stack",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "size": [],
                "capacity": [],
                "max_size": []
            }
        },
        "TriangularStackTests.test_pouring_water_in_stack_when_capcity_is_lower_and_overflows": {
            "name": "test_pouring_water_in_stack_when_capcity_is_lower_and_overflows",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "size": [],
                "k_liter_water": []
            }
        },
        "TriangularStackTests.test_query_water_in_stack_insufficent_water_poured": {
            "name": "test_query_water_in_stack_insufficent_water_poured",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "size": [],
                "k_liters_to_be_poured": [],
                "row_column_tests": []
            }
        },
        "TriangularStackTests.test_query_water_in_stack": {
            "name": "test_query_water_in_stack",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "size": [],
                "k_liters_to_be_poured": [],
                "row_column_tests": []
            }
        },
        "TriangularStackTests.test_query_water_in_stack_with_wrong_index": {
            "name": "test_query_water_in_stack_with_wrong_index",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "size": [],
                "k_liters_to_be_poured": [],
                "row_column_tests": []
            }
        }
    }
}
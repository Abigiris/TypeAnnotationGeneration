{
    "wire-protocol-master/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "get_long_description": {
            "name": "get_long_description",
            "location": 27,
            "return": [],
            "arguments": {}
        }
    },
    "wire-protocol-master/adbwp/consts.py": {},
    "wire-protocol-master/adbwp/enums.py": {
        "CommandResponse.__str__": {
            "name": "__str__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SystemType.__str__": {
            "name": "__str__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "wire-protocol-master/adbwp/exceptions.py": {},
    "wire-protocol-master/adbwp/header.py": {
        "new": {
            "name": "new",
            "location": 125,
            "return": [
                "Header"
            ],
            "arguments": {
                "command": [
                    "hints.Command"
                ],
                "arg0": [
                    "hints.Int"
                ],
                "arg1": [
                    "hints.Int"
                ],
                "data_length": [
                    "hints.Int"
                ],
                "data_checksum": [
                    "hints.Int"
                ],
                "magic": [
                    "hints.Int"
                ]
            }
        },
        "magic": {
            "name": "magic",
            "location": 149,
            "return": [
                "hints.Int"
            ],
            "arguments": {
                "command": [
                    "hints.Command"
                ]
            }
        },
        "to_bytes": {
            "name": "to_bytes",
            "location": 161,
            "return": [
                "hints.Bytes"
            ],
            "arguments": {
                "header": [
                    "Header"
                ]
            }
        },
        "from_bytes": {
            "name": "from_bytes",
            "location": 177,
            "return": [
                "Header"
            ],
            "arguments": {
                "header": [
                    "hints.Bytes"
                ]
            }
        },
        "Header.connect": {
            "name": "connect",
            "location": 34,
            "return": [
                "hints.Bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Header.auth": {
            "name": "auth",
            "location": 44,
            "return": [
                "hints.Bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Header.open": {
            "name": "open",
            "location": 54,
            "return": [
                "hints.Bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Header.ready": {
            "name": "ready",
            "location": 64,
            "return": [
                "hints.Bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Header.write": {
            "name": "write",
            "location": 74,
            "return": [
                "hints.Bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Header.close": {
            "name": "close",
            "location": 84,
            "return": [
                "hints.Bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Header.sync": {
            "name": "sync",
            "location": 94,
            "return": [
                "hints.Bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Header.okay": {
            "name": "okay",
            "location": 104,
            "return": [
                "hints.Bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Header.fail": {
            "name": "fail",
            "location": 114,
            "return": [
                "hints.Bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "wire-protocol-master/adbwp/hints.py": {},
    "wire-protocol-master/adbwp/message.py": {
        "new": {
            "name": "new",
            "location": 33,
            "return": [
                "Message"
            ],
            "arguments": {
                "command": [
                    "hints.Command"
                ],
                "arg0": [
                    "hints.Int"
                ],
                "arg1": [
                    "hints.Int"
                ],
                "data": [
                    "hints.Buffer"
                ]
            }
        },
        "from_header": {
            "name": "from_header",
            "location": 53,
            "return": [
                "Message"
            ],
            "arguments": {
                "header": [
                    "header.Header"
                ],
                "data": [
                    "hints.Buffer"
                ]
            }
        },
        "connect": {
            "name": "connect",
            "location": 79,
            "return": [
                "Message"
            ],
            "arguments": {
                "serial": [
                    "hints.Str"
                ],
                "banner": [
                    "hints.Str"
                ],
                "system_type": [
                    "hints.SystemType"
                ]
            }
        },
        "auth_signature": {
            "name": "auth_signature",
            "location": 97,
            "return": [
                "Message"
            ],
            "arguments": {
                "signature": [
                    "hints.Bytes"
                ]
            }
        },
        "auth_rsa_public_key": {
            "name": "auth_rsa_public_key",
            "location": 111,
            "return": [
                "Message"
            ],
            "arguments": {
                "public_key": [
                    "hints.Bytes"
                ]
            }
        },
        "open": {
            "name": "open",
            "location": 125,
            "return": [
                "Message"
            ],
            "arguments": {
                "local_id": [
                    "hints.Int"
                ],
                "destination": [
                    "hints.Str"
                ]
            }
        },
        "ready": {
            "name": "ready",
            "location": 144,
            "return": [
                "Message"
            ],
            "arguments": {
                "local_id": [
                    "hints.Int"
                ],
                "remote_id": [
                    "hints.Int"
                ]
            }
        },
        "write": {
            "name": "write",
            "location": 166,
            "return": [
                "Message"
            ],
            "arguments": {
                "local_id": [
                    "hints.Int"
                ],
                "remote_id": [
                    "hints.Int"
                ],
                "data": [
                    "hints.Buffer"
                ]
            }
        },
        "close": {
            "name": "close",
            "location": 187,
            "return": [
                "Message"
            ],
            "arguments": {
                "local_id": [
                    "hints.Int"
                ],
                "remote_id": [
                    "hints.Int"
                ]
            }
        }
    },
    "wire-protocol-master/adbwp/payload.py": {
        "checksum": {
            "name": "checksum",
            "location": 10,
            "return": [
                "hints.Int"
            ],
            "arguments": {
                "data": [
                    "hints.Buffer"
                ]
            }
        },
        "null_terminate": {
            "name": "null_terminate",
            "location": 22,
            "return": [
                "hints.Bytes"
            ],
            "arguments": {
                "data": [
                    "hints.Buffer"
                ]
            }
        },
        "as_bytes": {
            "name": "as_bytes",
            "location": 34,
            "return": [
                "hints.Bytes"
            ],
            "arguments": {
                "data": [
                    "hints.Buffer"
                ],
                "encoding": [
                    "hints.Str"
                ],
                "errors": [
                    "hints.Str"
                ]
            }
        },
        "system_identity_string": {
            "name": "system_identity_string",
            "location": 58,
            "return": [],
            "arguments": {
                "system_type": [
                    "hints.SystemType"
                ],
                "serial": [
                    "hints.Str"
                ],
                "banner": [
                    "hints.Str"
                ]
            }
        }
    },
    "wire-protocol-master/adbwp/__init__.py": {},
    "wire-protocol-master/docs/conf.py": {},
    "wire-protocol-master/tests/conftest.py": {
        "command_type": {
            "name": "command_type",
            "location": 18,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "system_type": {
            "name": "system_type",
            "location": 26,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "auth_type": {
            "name": "auth_type",
            "location": 34,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "valid_payload": {
            "name": "valid_payload",
            "location": 53,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "valid_payload_bytes": {
            "name": "valid_payload_bytes",
            "location": 61,
            "return": [],
            "arguments": {
                "valid_payload": []
            }
        },
        "invalid_payload_type": {
            "name": "invalid_payload_type",
            "location": 75,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "bytes_larger_than_maxdata": {
            "name": "bytes_larger_than_maxdata",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "bytes_larger_than_connect_auth_max_data": {
            "name": "bytes_larger_than_connect_auth_max_data",
            "location": 91,
            "return": [],
            "arguments": {}
        },
        "str_larger_than_connect_auth_max_data": {
            "name": "str_larger_than_connect_auth_max_data",
            "location": 99,
            "return": [],
            "arguments": {}
        },
        "random_header": {
            "name": "random_header",
            "location": 107,
            "return": [],
            "arguments": {
                "command_type": [],
                "random_arg0": [],
                "random_arg1": [],
                "random_data_length": [],
                "random_data_checksum": [],
                "command_type_magic": []
            }
        },
        "random_header_bytes": {
            "name": "random_header_bytes",
            "location": 118,
            "return": [],
            "arguments": {
                "random_header": []
            }
        },
        "command_type_magic": {
            "name": "command_type_magic",
            "location": 126,
            "return": [],
            "arguments": {
                "command_type": []
            }
        },
        "random_arg0": {
            "name": "random_arg0",
            "location": 134,
            "return": [],
            "arguments": {}
        },
        "random_arg1": {
            "name": "random_arg1",
            "location": 142,
            "return": [],
            "arguments": {}
        },
        "random_data_length": {
            "name": "random_data_length",
            "location": 150,
            "return": [],
            "arguments": {}
        },
        "random_data_checksum": {
            "name": "random_data_checksum",
            "location": 158,
            "return": [],
            "arguments": {}
        },
        "random_serial": {
            "name": "random_serial",
            "location": 166,
            "return": [],
            "arguments": {}
        },
        "random_banner": {
            "name": "random_banner",
            "location": 174,
            "return": [],
            "arguments": {}
        },
        "random_signature": {
            "name": "random_signature",
            "location": 190,
            "return": [],
            "arguments": {}
        },
        "random_rsa_public_key": {
            "name": "random_rsa_public_key",
            "location": 198,
            "return": [],
            "arguments": {}
        },
        "random_local_id": {
            "name": "random_local_id",
            "location": 206,
            "return": [],
            "arguments": {}
        },
        "random_remote_id": {
            "name": "random_remote_id",
            "location": 214,
            "return": [],
            "arguments": {}
        },
        "random_destination": {
            "name": "random_destination",
            "location": 222,
            "return": [],
            "arguments": {}
        },
        "random_bytes": {
            "name": "random_bytes",
            "location": 229,
            "return": [],
            "arguments": {
                "length": []
            }
        },
        "random_hex_str": {
            "name": "random_hex_str",
            "location": 236,
            "return": [],
            "arguments": {
                "length": []
            }
        },
        "random_str": {
            "name": "random_str",
            "location": 243,
            "return": [],
            "arguments": {
                "length": [],
                "alphabet": []
            }
        },
        "random_int": {
            "name": "random_int",
            "location": 250,
            "return": [],
            "arguments": {
                "low": [],
                "high": []
            }
        }
    },
    "wire-protocol-master/tests/test_enums.py": {
        "test_command_values_unchanged": {
            "name": "test_command_values_unchanged",
            "location": 15,
            "return": [],
            "arguments": {
                "enum_value": [],
                "int_value": []
            }
        },
        "test_auth_type_values_unchanged": {
            "name": "test_auth_type_values_unchanged",
            "location": 24,
            "return": [],
            "arguments": {
                "enum_value": [],
                "int_value": []
            }
        },
        "test_command_response_str_returns_value": {
            "name": "test_command_response_str_returns_value",
            "location": 33,
            "return": [],
            "arguments": {
                "enum_value": [],
                "str_value": []
            }
        },
        "test_system_type_str_returns_value": {
            "name": "test_system_type_str_returns_value",
            "location": 42,
            "return": [],
            "arguments": {
                "enum_value": [],
                "str_value": []
            }
        }
    },
    "wire-protocol-master/tests/test_header.py": {
        "property_name_with_command": {
            "name": "property_name_with_command",
            "location": 26,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "property_name_with_command_response": {
            "name": "property_name_with_command_response",
            "location": 35,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "invalid_field_value": {
            "name": "invalid_field_value",
            "location": 51,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "invalid_bytes_too_few": {
            "name": "invalid_bytes_too_few",
            "location": 60,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "invalid_bytes_too_many": {
            "name": "invalid_bytes_too_many",
            "location": 68,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_header_property_check_matches_command_type": {
            "name": "test_header_property_check_matches_command_type",
            "location": 75,
            "return": [],
            "arguments": {
                "property_name_with_command": []
            }
        },
        "test_header_property_check_matches_command_response_type": {
            "name": "test_header_property_check_matches_command_response_type",
            "location": 85,
            "return": [],
            "arguments": {
                "property_name_with_command_response": []
            }
        },
        "test_header_new_supports_default_values": {
            "name": "test_header_new_supports_default_values",
            "location": 95,
            "return": [],
            "arguments": {
                "command_type": []
            }
        },
        "test_header_new_assigns_fields": {
            "name": "test_header_new_assigns_fields",
            "location": 108,
            "return": [],
            "arguments": {
                "command_type": [],
                "random_arg0": [],
                "random_arg1": [],
                "random_data_length": [],
                "random_data_checksum": []
            }
        },
        "test_header_magic_computes_command_xor": {
            "name": "test_header_magic_computes_command_xor",
            "location": 121,
            "return": [],
            "arguments": {
                "command_type": []
            }
        },
        "test_header_to_bytes_returns_24_bytes": {
            "name": "test_header_to_bytes_returns_24_bytes",
            "location": 128,
            "return": [],
            "arguments": {
                "random_header": []
            }
        },
        "test_header_to_bytes_raises_on_header_with_invalid_field_type": {
            "name": "test_header_to_bytes_raises_on_header_with_invalid_field_type",
            "location": 137,
            "return": [],
            "arguments": {
                "command_type": [],
                "invalid_field_value": []
            }
        },
        "test_header_to_bytes_raises_on_header_with_integer_overflow": {
            "name": "test_header_to_bytes_raises_on_header_with_integer_overflow",
            "location": 146,
            "return": [],
            "arguments": {
                "command_type": []
            }
        },
        "test_header_from_bytes_raises_on_less_than_24_bytes": {
            "name": "test_header_from_bytes_raises_on_less_than_24_bytes",
            "location": 155,
            "return": [],
            "arguments": {
                "invalid_bytes_too_few": []
            }
        },
        "test_header_from_bytes_raises_on_more_than_24_bytes": {
            "name": "test_header_from_bytes_raises_on_more_than_24_bytes",
            "location": 164,
            "return": [],
            "arguments": {
                "invalid_bytes_too_many": []
            }
        },
        "test_header_from_bytes_converts_command_to_enum": {
            "name": "test_header_from_bytes_converts_command_to_enum",
            "location": 173,
            "return": [],
            "arguments": {
                "random_header_bytes": []
            }
        },
        "test_header_converts_to_from_bytes": {
            "name": "test_header_converts_to_from_bytes",
            "location": 182,
            "return": [],
            "arguments": {
                "random_header": [],
                "random_header_bytes": []
            }
        }
    },
    "wire-protocol-master/tests/test_message.py": {
        "test_new_computes_header_data_length_based_on_data_payload": {
            "name": "test_new_computes_header_data_length_based_on_data_payload",
            "location": 12,
            "return": [],
            "arguments": {
                "command_type": [],
                "valid_payload_bytes": []
            }
        },
        "test_new_computes_header_data_checksum_based_on_data_payload": {
            "name": "test_new_computes_header_data_checksum_based_on_data_payload",
            "location": 21,
            "return": [],
            "arguments": {
                "command_type": [],
                "valid_payload_bytes": []
            }
        },
        "test_new_computes_header_magic_based_on_data_payload": {
            "name": "test_new_computes_header_magic_based_on_data_payload",
            "location": 30,
            "return": [],
            "arguments": {
                "command_type": []
            }
        },
        "test_new_supports_default_values": {
            "name": "test_new_supports_default_values",
            "location": 39,
            "return": [],
            "arguments": {
                "command_type": []
            }
        },
        "test_new_assigns_field_values": {
            "name": "test_new_assigns_field_values",
            "location": 51,
            "return": [],
            "arguments": {
                "command_type": [],
                "random_arg0": [],
                "random_arg1": [],
                "valid_payload_bytes": []
            }
        },
        "test_new_raises_on_incorrect_payload_type": {
            "name": "test_new_raises_on_incorrect_payload_type",
            "location": 66,
            "return": [],
            "arguments": {
                "command_type": [],
                "invalid_payload_type": []
            }
        },
        "test_new_raises_on_data_payload_too_large": {
            "name": "test_new_raises_on_data_payload_too_large",
            "location": 75,
            "return": [],
            "arguments": {
                "command_type": [],
                "bytes_larger_than_maxdata": []
            }
        },
        "test_from_header_assigns_header": {
            "name": "test_from_header_assigns_header",
            "location": 84,
            "return": [],
            "arguments": {
                "command_type": [],
                "random_arg0": [],
                "random_arg1": []
            }
        },
        "test_from_header_raises_on_header_with_incorrect_payload_type": {
            "name": "test_from_header_raises_on_header_with_incorrect_payload_type",
            "location": 95,
            "return": [],
            "arguments": {
                "command_type": [],
                "invalid_payload_type": []
            }
        },
        "test_from_header_raises_on_data_payload_too_large": {
            "name": "test_from_header_raises_on_data_payload_too_large",
            "location": 104,
            "return": [],
            "arguments": {
                "command_type": [],
                "bytes_larger_than_maxdata": []
            }
        },
        "test_connect_assigns_correct_header_field_values": {
            "name": "test_connect_assigns_correct_header_field_values",
            "location": 113,
            "return": [],
            "arguments": {}
        },
        "test_connect_sets_system_identity_string_data_payload": {
            "name": "test_connect_sets_system_identity_string_data_payload",
            "location": 124,
            "return": [],
            "arguments": {
                "random_serial": [],
                "random_banner": [],
                "system_type": []
            }
        },
        "test_connect_raises_on_system_identity_too_large": {
            "name": "test_connect_raises_on_system_identity_too_large",
            "location": 137,
            "return": [],
            "arguments": {
                "random_serial": [],
                "system_type": [],
                "str_larger_than_connect_auth_max_data": []
            }
        },
        "test_auth_signature_assigns_correct_header_field_values": {
            "name": "test_auth_signature_assigns_correct_header_field_values",
            "location": 147,
            "return": [],
            "arguments": {}
        },
        "test_auth_signature_sets_signature_data_payload": {
            "name": "test_auth_signature_sets_signature_data_payload",
            "location": 158,
            "return": [],
            "arguments": {
                "random_signature": []
            }
        },
        "test_auth_signature_raises_on_signature_too_large": {
            "name": "test_auth_signature_raises_on_signature_too_large",
            "location": 171,
            "return": [],
            "arguments": {
                "bytes_larger_than_connect_auth_max_data": []
            }
        },
        "test_auth_rsa_public_key_assigns_correct_header_field_values": {
            "name": "test_auth_rsa_public_key_assigns_correct_header_field_values",
            "location": 180,
            "return": [],
            "arguments": {}
        },
        "test_auth_rsa_public_key_sets_public_key_data_payload": {
            "name": "test_auth_rsa_public_key_sets_public_key_data_payload",
            "location": 191,
            "return": [],
            "arguments": {
                "random_rsa_public_key": []
            }
        },
        "test_auth_rsa_public_key_raises_on_public_key_too_large": {
            "name": "test_auth_rsa_public_key_raises_on_public_key_too_large",
            "location": 204,
            "return": [],
            "arguments": {
                "bytes_larger_than_connect_auth_max_data": []
            }
        },
        "test_open_assigns_correct_header_field_values": {
            "name": "test_open_assigns_correct_header_field_values",
            "location": 213,
            "return": [],
            "arguments": {
                "random_local_id": []
            }
        },
        "test_open_sets_destination_data_payload": {
            "name": "test_open_sets_destination_data_payload",
            "location": 224,
            "return": [],
            "arguments": {
                "random_local_id": [],
                "random_destination": []
            }
        },
        "test_open_raises_on_zero_local_id": {
            "name": "test_open_raises_on_zero_local_id",
            "location": 237,
            "return": [],
            "arguments": {
                "random_destination": []
            }
        },
        "test_open_raises_on_destination_too_large": {
            "name": "test_open_raises_on_destination_too_large",
            "location": 246,
            "return": [],
            "arguments": {
                "random_local_id": [],
                "bytes_larger_than_maxdata": []
            }
        },
        "test_ready_assigns_correct_header_field_values": {
            "name": "test_ready_assigns_correct_header_field_values",
            "location": 255,
            "return": [],
            "arguments": {
                "random_local_id": [],
                "random_remote_id": []
            }
        },
        "test_ready_assigns_empty_data_payload": {
            "name": "test_ready_assigns_empty_data_payload",
            "location": 266,
            "return": [],
            "arguments": {
                "random_local_id": [],
                "random_remote_id": []
            }
        },
        "test_ready_raises_on_zero_local_id": {
            "name": "test_ready_raises_on_zero_local_id",
            "location": 279,
            "return": [],
            "arguments": {
                "random_remote_id": []
            }
        },
        "test_ready_raises_on_zero_remote_id": {
            "name": "test_ready_raises_on_zero_remote_id",
            "location": 288,
            "return": [],
            "arguments": {
                "random_local_id": []
            }
        },
        "test_write_assigns_correct_header_field_values": {
            "name": "test_write_assigns_correct_header_field_values",
            "location": 297,
            "return": [],
            "arguments": {
                "random_local_id": [],
                "random_remote_id": [],
                "valid_payload": []
            }
        },
        "test_write_assigns_given_data_payload": {
            "name": "test_write_assigns_given_data_payload",
            "location": 308,
            "return": [],
            "arguments": {
                "random_local_id": [],
                "random_remote_id": [],
                "valid_payload": [],
                "valid_payload_bytes": []
            }
        },
        "test_write_raises_on_empty_data_payload": {
            "name": "test_write_raises_on_empty_data_payload",
            "location": 320,
            "return": [],
            "arguments": {
                "random_local_id": [],
                "random_remote_id": []
            }
        },
        "test_write_raises_on_data_payload_too_large": {
            "name": "test_write_raises_on_data_payload_too_large",
            "location": 329,
            "return": [],
            "arguments": {
                "random_local_id": [],
                "random_remote_id": [],
                "bytes_larger_than_maxdata": []
            }
        },
        "test_close_assigns_correct_header_field_values": {
            "name": "test_close_assigns_correct_header_field_values",
            "location": 338,
            "return": [],
            "arguments": {
                "random_local_id": [],
                "random_remote_id": []
            }
        },
        "test_close_assigns_no_data_payload": {
            "name": "test_close_assigns_no_data_payload",
            "location": 349,
            "return": [],
            "arguments": {
                "random_local_id": [],
                "random_remote_id": []
            }
        },
        "test_close_raises_on_zero_remote_id": {
            "name": "test_close_raises_on_zero_remote_id",
            "location": 362,
            "return": [],
            "arguments": {
                "random_local_id": []
            }
        }
    },
    "wire-protocol-master/tests/test_payload.py": {
        "test_checksum_computes_sum_bitwse_and_mask": {
            "name": "test_checksum_computes_sum_bitwse_and_mask",
            "location": 12,
            "return": [],
            "arguments": {
                "valid_payload_bytes": []
            }
        },
        "test_null_terminate_adds_zero_byte": {
            "name": "test_null_terminate_adds_zero_byte",
            "location": 19,
            "return": [],
            "arguments": {
                "valid_payload": [],
                "valid_payload_bytes": []
            }
        },
        "test_null_terminate_raises_on_incorrect_payload_type": {
            "name": "test_null_terminate_raises_on_incorrect_payload_type",
            "location": 26,
            "return": [],
            "arguments": {
                "invalid_payload_type": []
            }
        },
        "test_as_bytes_converts_supported_types_to_bytes": {
            "name": "test_as_bytes_converts_supported_types_to_bytes",
            "location": 35,
            "return": [],
            "arguments": {
                "valid_payload": []
            }
        },
        "test_as_bytes_raises_on_incorrect_payload_type": {
            "name": "test_as_bytes_raises_on_incorrect_payload_type",
            "location": 42,
            "return": [],
            "arguments": {
                "invalid_payload_type": []
            }
        },
        "test_system_identity_string_colon_delimites_values": {
            "name": "test_system_identity_string_colon_delimites_values",
            "location": 51,
            "return": [],
            "arguments": {
                "system_type": [],
                "random_serial": [],
                "random_banner": []
            }
        },
        "test_system_identity_string_null_terminates": {
            "name": "test_system_identity_string_null_terminates",
            "location": 59,
            "return": [],
            "arguments": {
                "system_type": [],
                "random_serial": [],
                "random_banner": []
            }
        }
    }
}
{
    "wrapitup-master/setup.py": {},
    "wrapitup-master/docs/conf.py": {},
    "wrapitup-master/tests/test_catch_signals.py": {
        "TestCatchSignals.setUp": {
            "name": "setUp",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCatchSignals.tearDown": {
            "name": "tearDown",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCatchSignals.handler": {
            "name": "handler",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "signum": [],
                "stack_frame": []
            }
        },
        "TestCatchSignals.catch_signals": {
            "name": "catch_signals",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "TestCatchSignals.suicide": {
            "name": "suicide",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "signal": []
            }
        },
        "TestCatchSignals.assert_logging": {
            "name": "assert_logging",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "msgs": [],
                "default_callback": []
            }
        },
        "TestCatchSignals.test_signals_list_empty": {
            "name": "test_signals_list_empty",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCatchSignals.test_windows_unsupported_signals": {
            "name": "test_windows_unsupported_signals",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCatchSignals.test_signals_as_iterable_of_numbers_or_names": {
            "name": "test_signals_as_iterable_of_numbers_or_names",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCatchSignals.test_bad_signals": {
            "name": "test_bad_signals",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCatchSignals.test_not_main_thread": {
            "name": "test_not_main_thread",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCatchSignals.get_handlers": {
            "name": "get_handlers",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCatchSignals.test_default_shutdown_signals": {
            "name": "test_default_shutdown_signals",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCatchSignals.test_context_manager_installs_default_handlers": {
            "name": "test_context_manager_installs_default_handlers",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCatchSignals.test_catch_both_signals_forward": {
            "name": "test_catch_both_signals_forward",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCatchSignals.test_catch_both_signals_backward": {
            "name": "test_catch_both_signals_backward",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCatchSignals.assert_context_manager_callbacks": {
            "name": "assert_context_manager_callbacks",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "error": [
                    "bool"
                ]
            }
        },
        "TestCatchSignals.test_context_manager_installs_custom_callbacks": {
            "name": "test_context_manager_installs_custom_callbacks",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCatchSignals.test_context_manager_installs_callback_error": {
            "name": "test_context_manager_installs_callback_error",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCatchSignals.test_bad_callbacks": {
            "name": "test_bad_callbacks",
            "location": 244,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCatchSignals.test_context_manager_resets_handlers": {
            "name": "test_context_manager_resets_handlers",
            "location": 275,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCatchSignals.test_handler_reset_after_its_own_signal": {
            "name": "test_handler_reset_after_its_own_signal",
            "location": 281,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCatchSignals.test_handler_reset_after_other_signals": {
            "name": "test_handler_reset_after_other_signals",
            "location": 292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCatchSignals.test_handler_restored_after_nested_catch_signals": {
            "name": "test_handler_restored_after_nested_catch_signals",
            "location": 303,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCatchSignals.test_handler_reset_is_idempotent": {
            "name": "test_handler_reset_is_idempotent",
            "location": 330,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCatchSignals.test_catch_signals_resets_requests": {
            "name": "test_catch_signals_resets_requests",
            "location": 347,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCatchSignals.test_special_sigint_message": {
            "name": "test_special_sigint_message",
            "location": 366,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCatchSignals.test_not_main_thread.subthread": {
            "name": "subthread",
            "location": 125,
            "return": [],
            "arguments": {}
        },
        "TestCatchSignals.assert_context_manager_callbacks.callback": {
            "name": "callback",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "signum": [
                    "signal.Signals"
                ],
                "stack_frame": [
                    "types.FrameType"
                ]
            }
        },
        "TestCatchSignals.assert_context_manager_callbacks.callback_star_args": {
            "name": "callback_star_args",
            "location": 204,
            "return": [],
            "arguments": {}
        },
        "TestCatchSignals.assert_context_manager_callbacks.callback_args_defaults": {
            "name": "callback_args_defaults",
            "location": 207,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": []
            }
        },
        "TestCatchSignals.assert_context_manager_callbacks.callback_args_partial": {
            "name": "callback_args_partial",
            "location": 210,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "TestCatchSignals.test_bad_callbacks.one": {
            "name": "one",
            "location": 247,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "TestCatchSignals.test_bad_callbacks.three": {
            "name": "three",
            "location": 250,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": []
            }
        },
        "TestCatchSignals.test_bad_callbacks.kwargs_only1": {
            "name": "kwargs_only1",
            "location": 253,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "TestCatchSignals.test_bad_callbacks.kwargs_only2": {
            "name": "kwargs_only2",
            "location": 256,
            "return": [],
            "arguments": {}
        },
        "TestCatchSignals.test_bad_callbacks.kwargs_only3": {
            "name": "kwargs_only3",
            "location": 259,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "TestCatchSignals.test_bad_callbacks.kwargs_double_star": {
            "name": "kwargs_double_star",
            "location": 262,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        }
    },
    "wrapitup-master/tests/test_requests.py": {
        "TestRequest.test_request": {
            "name": "test_request",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "wrapitup-master/tests/test_timer.py": {
        "TestTimer.test_wrapitup_timer": {
            "name": "test_wrapitup_timer",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTimer.test_bad_time_limit": {
            "name": "test_bad_time_limit",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTimer.test_default_no_time_limit": {
            "name": "test_default_no_time_limit",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTimer.test_time_limit": {
            "name": "test_time_limit",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTimer.test_stop": {
            "name": "test_stop",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTimer.test_remaining": {
            "name": "test_remaining",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTimer.test_alarm": {
            "name": "test_alarm",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTimer.test_alarm.handler": {
            "name": "handler",
            "location": 114,
            "return": [],
            "arguments": {
                "signum": [],
                "stack_frame": []
            }
        }
    },
    "wrapitup-master/tests/test_version.py": {
        "TestVersion.test_version": {
            "name": "test_version",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "wrapitup-master/tests/__init__.py": {},
    "wrapitup-master/wrapitup/_catch_signals.py": {
        "_two_pos_args": {
            "name": "_two_pos_args",
            "location": 29,
            "return": [
                "typing.Union[(int, float)]"
            ],
            "arguments": {
                "f": [
                    "typing.Callable"
                ]
            }
        },
        "catch_signals.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "signals": [
                    "typing.Iterable[typing.Union[(signal.Signals, int, str)]]"
                ],
                "callback": [
                    "typing.Optional[typing.Callable[([signal.Signals, typing.Optional[FrameType]], None)]]"
                ]
            }
        },
        "catch_signals.__enter__": {
            "name": "__enter__",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "catch_signals.__exit__": {
            "name": "__exit__",
            "location": 206,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "typing.Optional[typing.Type[_ExcType]]"
                ],
                "exc_value": [
                    "typing.Optional[_ExcType]"
                ],
                "traceback": [
                    "typing.Optional[TracebackType]"
                ]
            }
        },
        "catch_signals._clear_signal_handlers": {
            "name": "_clear_signal_handlers",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "catch_signals._install_handler": {
            "name": "_install_handler",
            "location": 235,
            "return": [
                "_HandlerType"
            ],
            "arguments": {
                "self": [],
                "intended_signal": [
                    "signal.Signals"
                ],
                "callback": [
                    "typing.Callable[([signal.Signals, FrameType], None)]"
                ]
            }
        },
        "catch_signals._default_callback": {
            "name": "_default_callback",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signum": [
                    "signal.Signals"
                ],
                "stack_frame": [
                    "typing.Optional[FrameType]"
                ]
            }
        },
        "catch_signals._install_handler.handler": {
            "name": "handler",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "signum": [
                    "signal.Signals"
                ],
                "stack_frame": [
                    "FrameType"
                ]
            }
        }
    },
    "wrapitup-master/wrapitup/_requests.py": {
        "request": {
            "name": "request",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "reset": {
            "name": "reset",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "requested": {
            "name": "requested",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "wrapitup-master/wrapitup/_timer.py": {
        "Timer.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "limit": [
                    "float"
                ]
            }
        },
        "Timer.start": {
            "name": "start",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "float"
                ]
            }
        },
        "Timer.stop": {
            "name": "stop",
            "location": 63,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.remaining": {
            "name": "remaining",
            "location": 77,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.expired": {
            "name": "expired",
            "location": 94,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.alarm": {
            "name": "alarm",
            "location": 115,
            "return": [
                "typing.Tuple[(float, float)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "wrapitup-master/wrapitup/_version.py": {},
    "wrapitup-master/wrapitup/__init__.py": {}
}
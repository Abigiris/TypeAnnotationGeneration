{
    "xpectacle-master/setup.py": {
        "read": {
            "name": "read",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "find_version": {
            "name": "find_version",
            "location": 18,
            "return": [],
            "arguments": {}
        }
    },
    "xpectacle-master/tasks.py": {
        "lint": {
            "name": "lint",
            "location": 8,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "typecheck": {
            "name": "typecheck",
            "location": 13,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "validate": {
            "name": "validate",
            "location": 18,
            "return": [],
            "arguments": {
                "c": []
            }
        }
    },
    "xpectacle-master/demos/apply.py": {},
    "xpectacle-master/demos/replace.py": {},
    "xpectacle-master/demos/tiles.py": {},
    "xpectacle-master/demos/__init__.py": {},
    "xpectacle-master/study/python_get_window.py": {
        "DisplayWrapper.create": {
            "name": "create",
            "location": 16,
            "return": [
                "'DisplayWrapper'"
            ],
            "arguments": {
                "cls": []
            }
        },
        "DisplayWrapper.find_property": {
            "name": "find_property",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([str], bool)]"
                ]
            }
        },
        "DisplayWrapper.get_root_window": {
            "name": "get_root_window",
            "location": 24,
            "return": [
                "Xlib.xobject.drawable.Window"
            ],
            "arguments": {
                "self": []
            }
        },
        "DisplayWrapper.get_all_properties": {
            "name": "get_all_properties",
            "location": 27,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DisplayWrapper.get_property": {
            "name": "get_property",
            "location": 33,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "DisplayWrapper.list_properties": {
            "name": "list_properties",
            "location": 39,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DisplayWrapper.get_work_area": {
            "name": "get_work_area",
            "location": 45,
            "return": [
                "Geometry"
            ],
            "arguments": {
                "self": []
            }
        },
        "DisplayWrapper.get_active_window": {
            "name": "get_active_window",
            "location": 51,
            "return": [
                "'WindowWrapper'"
            ],
            "arguments": {
                "self": []
            }
        },
        "DisplayWrapper.get_active_window_resource": {
            "name": "get_active_window_resource",
            "location": 54,
            "return": [
                "Xlib.xobject.drawable.Window"
            ],
            "arguments": {
                "self": []
            }
        },
        "DisplayWrapper.get_active_window_id": {
            "name": "get_active_window_id",
            "location": 57,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowWrapper.create": {
            "name": "create",
            "location": 67,
            "return": [
                "'WindowWrapper'"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowWrapper.find_property": {
            "name": "find_property",
            "location": 70,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([str], bool)]"
                ]
            }
        },
        "WindowWrapper.get_sub_root_window": {
            "name": "get_sub_root_window",
            "location": 78,
            "return": [
                "'WindowWrapper'"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowWrapper.get_all_properties": {
            "name": "get_all_properties",
            "location": 88,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowWrapper.get_property": {
            "name": "get_property",
            "location": 94,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "WindowWrapper.list_properties": {
            "name": "list_properties",
            "location": 100,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowWrapper.get_frame_extents": {
            "name": "get_frame_extents",
            "location": 106,
            "return": [
                "SimpleNamespace"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowWrapper.get_bounding_client_geometry": {
            "name": "get_bounding_client_geometry",
            "location": 116,
            "return": [
                "Geometry"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "xpectacle-master/xpectacle/active_window.py": {
        "ActiveWindow.apply": {
            "name": "apply",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActiveWindow.map": {
            "name": "map",
            "location": 15,
            "return": [
                "'ActiveWindow'"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([Geometry, Geometry], Geometry)]"
                ]
            }
        },
        "ActiveWindow.center": {
            "name": "center",
            "location": 20,
            "return": [
                "'ActiveWindow'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActiveWindow.center_x": {
            "name": "center_x",
            "location": 23,
            "return": [
                "'ActiveWindow'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActiveWindow.center_y": {
            "name": "center_y",
            "location": 26,
            "return": [
                "'ActiveWindow'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActiveWindow.move": {
            "name": "move",
            "location": 29,
            "return": [
                "'ActiveWindow'"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "absolute": [
                    "Optional[bool]"
                ]
            }
        },
        "ActiveWindow.resize": {
            "name": "resize",
            "location": 39,
            "return": [
                "'ActiveWindow'"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ]
            }
        },
        "ActiveWindow.tile": {
            "name": "tile",
            "location": 48,
            "return": [
                "'ActiveWindow'"
            ],
            "arguments": {
                "self": [],
                "rows": [
                    "int"
                ],
                "columns": [
                    "int"
                ],
                "position": [
                    "int"
                ],
                "grid_width": [
                    "Optional[int]"
                ],
                "grid_height": [
                    "Optional[int]"
                ]
            }
        },
        "ActiveWindow.corner": {
            "name": "corner",
            "location": 69,
            "return": [
                "'ActiveWindow'"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "ActiveWindow.tile.mapper": {
            "name": "mapper",
            "location": 56,
            "return": [],
            "arguments": {
                "vp": [],
                "win": []
            }
        },
        "ActiveWindow.corner.mapper": {
            "name": "mapper",
            "location": 73,
            "return": [],
            "arguments": {
                "vp": [],
                "win": []
            }
        }
    },
    "xpectacle-master/xpectacle/core.py": {
        "get_workarea": {
            "name": "get_workarea",
            "location": 15,
            "return": [
                "Geometry"
            ],
            "arguments": {}
        },
        "get_window": {
            "name": "get_window",
            "location": 24,
            "return": [
                "Geometry"
            ],
            "arguments": {}
        },
        "set_window": {
            "name": "set_window",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "geometry": [
                    "Geometry"
                ],
                "workarea": [
                    "Optional[Geometry]"
                ],
                "window": [
                    "Optional[Geometry]"
                ]
            }
        }
    },
    "xpectacle-master/xpectacle/ewmh_util.py": {
        "get_active_sub_root_window": {
            "name": "get_active_sub_root_window",
            "location": 5,
            "return": [
                "Window"
            ],
            "arguments": {
                "ewmh": [
                    "EWMH"
                ]
            }
        }
    },
    "xpectacle-master/xpectacle/geometry.py": {
        "Geometry.__iter__": {
            "name": "__iter__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Geometry.align_to": {
            "name": "align_to",
            "location": 20,
            "return": [
                "'Geometry'"
            ],
            "arguments": {
                "self": [],
                "reference": [
                    "'Geometry'"
                ]
            }
        }
    },
    "xpectacle-master/xpectacle/sh.py": {
        "run": {
            "name": "run",
            "location": 4,
            "return": [],
            "arguments": {
                "command": []
            }
        },
        "lines": {
            "name": "lines",
            "location": 8,
            "return": [],
            "arguments": {
                "command": []
            }
        },
        "output": {
            "name": "output",
            "location": 12,
            "return": [],
            "arguments": {
                "command": []
            }
        }
    },
    "xpectacle-master/xpectacle/__init__.py": {}
}
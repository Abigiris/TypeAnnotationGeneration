{
    "ytcc-master/setup.py": {},
    "ytcc-master/ytcc.py": {},
    "ytcc-master/scripts/make_doc.py": {
        "main": {
            "name": "main",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "BlankUsageFormatter.write_usage": {
            "name": "write_usage",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "prog": [],
                "args": [],
                "prefix": []
            }
        }
    },
    "ytcc-master/scripts/migrate.py": {
        "error": {
            "name": "error",
            "location": 29,
            "return": [],
            "arguments": {
                "message": [
                    "str"
                ]
            }
        },
        "usage": {
            "name": "usage",
            "location": 33,
            "return": [],
            "arguments": {}
        }
    },
    "ytcc-master/test/conftest.py": {
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 19,
            "return": [],
            "arguments": {
                "config": []
            }
        }
    },
    "ytcc-master/test/test_cli.py": {
        "cli_runner": {
            "name": "cli_runner",
            "location": 59,
            "return": [
                "Callable[(..., Result)]"
            ],
            "arguments": {}
        },
        "test_bug_report_command": {
            "name": "test_bug_report_command",
            "location": 82,
            "return": [],
            "arguments": {
                "cli_runner": []
            }
        },
        "test_subscribe": {
            "name": "test_subscribe",
            "location": 93,
            "return": [],
            "arguments": {
                "cli_runner": []
            }
        },
        "test_subscribe_duplicate": {
            "name": "test_subscribe_duplicate",
            "location": 103,
            "return": [],
            "arguments": {
                "cli_runner": []
            }
        },
        "test_subscribe_bad_url": {
            "name": "test_subscribe_bad_url",
            "location": 114,
            "return": [],
            "arguments": {
                "cli_runner": [],
                "caplog": []
            }
        },
        "test_unsubscribe": {
            "name": "test_unsubscribe",
            "location": 122,
            "return": [],
            "arguments": {
                "cli_runner": []
            }
        },
        "test_rename": {
            "name": "test_rename",
            "location": 131,
            "return": [],
            "arguments": {
                "cli_runner": []
            }
        },
        "test_import": {
            "name": "test_import",
            "location": 144,
            "return": [],
            "arguments": {
                "cli_runner": []
            }
        },
        "test_import_duplicate": {
            "name": "test_import_duplicate",
            "location": 155,
            "return": [],
            "arguments": {
                "cli_runner": [],
                "caplog": []
            }
        },
        "test_import_broken": {
            "name": "test_import_broken",
            "location": 165,
            "return": [],
            "arguments": {
                "cli_runner": []
            }
        },
        "test_tag": {
            "name": "test_tag",
            "location": 172,
            "return": [],
            "arguments": {
                "cli_runner": []
            }
        },
        "test_update": {
            "name": "test_update",
            "location": 185,
            "return": [],
            "arguments": {
                "cli_runner": [],
                "caplog": []
            }
        },
        "test_comma_list_error": {
            "name": "test_comma_list_error",
            "location": 196,
            "return": [],
            "arguments": {
                "cli_runner": []
            }
        },
        "test_bad_id": {
            "name": "test_bad_id",
            "location": 203,
            "return": [],
            "arguments": {
                "cli_runner": [],
                "caplog": []
            }
        },
        "test_cleanup": {
            "name": "test_cleanup",
            "location": 210,
            "return": [],
            "arguments": {
                "cli_runner": []
            }
        },
        "test_download": {
            "name": "test_download",
            "location": 227,
            "return": [],
            "arguments": {
                "cli_runner": []
            }
        },
        "test_pipe_mark": {
            "name": "test_pipe_mark",
            "location": 249,
            "return": [],
            "arguments": {
                "cli_runner": []
            }
        },
        "test_play_video": {
            "name": "test_play_video",
            "location": 258,
            "return": [],
            "arguments": {
                "cli_runner": []
            }
        },
        "test_play_video_empty": {
            "name": "test_play_video_empty",
            "location": 268,
            "return": [],
            "arguments": {
                "cli_runner": [],
                "caplog": []
            }
        },
        "test_no_command": {
            "name": "test_no_command",
            "location": 278,
            "return": [],
            "arguments": {
                "cli_runner": []
            }
        },
        "YtccRunner.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "conf_file": [],
                "db_file": [],
                "download_dir": []
            }
        },
        "YtccRunner.__call__": {
            "name": "__call__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "cli_runner.context": {
            "name": "context",
            "location": 61,
            "return": [
                "YtccRunner"
            ],
            "arguments": {}
        }
    },
    "ytcc-master/test/test_database.py": {
        "empty_database": {
            "name": "empty_database",
            "location": 31,
            "return": [
                "Callable[(..., Database)]"
            ],
            "arguments": {}
        },
        "filled_database": {
            "name": "filled_database",
            "location": 43,
            "return": [
                "Callable[(..., Database)]"
            ],
            "arguments": {}
        },
        "_check_playlist": {
            "name": "_check_playlist",
            "location": 112,
            "return": [],
            "arguments": {
                "db": [],
                "name": [
                    "str"
                ],
                "expected": [
                    "Optional[MappedPlaylist]"
                ]
            }
        },
        "test_extractor_fail_count": {
            "name": "test_extractor_fail_count",
            "location": 118,
            "return": [],
            "arguments": {
                "empty_database": []
            }
        },
        "test_add_playlist": {
            "name": "test_add_playlist",
            "location": 147,
            "return": [],
            "arguments": {
                "empty_database": []
            }
        },
        "test_delete_playlist": {
            "name": "test_delete_playlist",
            "location": 165,
            "return": [],
            "arguments": {
                "filled_database": []
            }
        },
        "test_rename_playlist": {
            "name": "test_rename_playlist",
            "location": 186,
            "return": [],
            "arguments": {
                "filled_database": []
            }
        },
        "test_reverse_playlist": {
            "name": "test_reverse_playlist",
            "location": 199,
            "return": [],
            "arguments": {
                "filled_database": []
            }
        },
        "test_list_playlist": {
            "name": "test_list_playlist",
            "location": 213,
            "return": [],
            "arguments": {
                "filled_database": []
            }
        },
        "test_tag_playlist": {
            "name": "test_tag_playlist",
            "location": 223,
            "return": [],
            "arguments": {
                "filled_database": []
            }
        },
        "test_list_tags": {
            "name": "test_list_tags",
            "location": 243,
            "return": [],
            "arguments": {
                "filled_database": []
            }
        },
        "test_add_videos": {
            "name": "test_add_videos",
            "location": 254,
            "return": [],
            "arguments": {
                "filled_database": []
            }
        },
        "test_marked_watched": {
            "name": "test_marked_watched",
            "location": 290,
            "return": [],
            "arguments": {
                "filled_database": []
            }
        },
        "test_marked_unwatched": {
            "name": "test_marked_unwatched",
            "location": 311,
            "return": [],
            "arguments": {
                "filled_database": []
            }
        },
        "test_list_videos": {
            "name": "test_list_videos",
            "location": 321,
            "return": [],
            "arguments": {
                "filled_database": []
            }
        },
        "test_cleanup": {
            "name": "test_cleanup",
            "location": 337,
            "return": [],
            "arguments": {
                "filled_database": []
            }
        },
        "empty_database.context": {
            "name": "context",
            "location": 33,
            "return": [
                "Iterator[Database]"
            ],
            "arguments": {}
        },
        "filled_database.context": {
            "name": "context",
            "location": 45,
            "return": [
                "Iterator[Database]"
            ],
            "arguments": {}
        },
        "test_list_videos.check_result": {
            "name": "check_result",
            "location": 322,
            "return": [],
            "arguments": {
                "result": [
                    "Iterable[MappedVideo]"
                ],
                "expected_ids": [
                    "List[int]"
                ]
            }
        }
    },
    "ytcc-master/test/__init__.py": {},
    "ytcc-master/ytcc/cli.py": {
        "_load_completion_conf": {
            "name": "_load_completion_conf",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "click.Context"
                ]
            }
        },
        "ids_completion": {
            "name": "ids_completion",
            "location": 115,
            "return": [],
            "arguments": {
                "watched": [
                    "bool"
                ]
            }
        },
        "playlist_completion": {
            "name": "playlist_completion",
            "location": 135,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "ctx": [
                    "click.Context"
                ],
                "param": [
                    "click.Parameter"
                ],
                "incomplete": [
                    "str"
                ]
            }
        },
        "playlists_completion": {
            "name": "playlists_completion",
            "location": 150,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "ctx": [
                    "click.Context"
                ],
                "param": [
                    "click.Parameter"
                ],
                "incomplete": [
                    "str"
                ]
            }
        },
        "tags_completion": {
            "name": "tags_completion",
            "location": 156,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "ctx": [
                    "click.Context"
                ],
                "param": [
                    "click.Parameter"
                ],
                "incomplete": [
                    "str"
                ]
            }
        },
        "cli": {
            "name": "cli",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "click.Context"
                ],
                "conf": [
                    "Path"
                ],
                "loglevel": [
                    "str"
                ],
                "output": [
                    "str"
                ],
                "separator": [
                    "str"
                ],
                "truncate": [
                    "Union[(None, str, int)]"
                ]
            }
        },
        "subscribe": {
            "name": "subscribe",
            "location": 241,
            "return": [],
            "arguments": {
                "ytcc": [
                    "core.Ytcc"
                ],
                "name": [
                    "str"
                ],
                "url": [
                    "str"
                ],
                "reverse": [
                    "bool"
                ]
            }
        },
        "unsubscribe": {
            "name": "unsubscribe",
            "location": 265,
            "return": [],
            "arguments": {
                "ytcc": [
                    "core.Ytcc"
                ],
                "names": [
                    "Iterable[str]"
                ]
            }
        },
        "rename": {
            "name": "rename",
            "location": 286,
            "return": [],
            "arguments": {
                "ytcc": [
                    "core.Ytcc"
                ],
                "old": [
                    "str"
                ],
                "new": [
                    "str"
                ]
            }
        },
        "reverse_playlist": {
            "name": "reverse_playlist",
            "location": 301,
            "return": [],
            "arguments": {
                "ytcc": [
                    "core.Ytcc"
                ],
                "playlists": [
                    "Tuple[(str, ...)]"
                ]
            }
        },
        "subscriptions": {
            "name": "subscriptions",
            "location": 321,
            "return": [],
            "arguments": {
                "ytcc": [
                    "core.Ytcc"
                ],
                "attributes": [
                    "List[PlaylistAttr]"
                ]
            }
        },
        "tag": {
            "name": "tag",
            "location": 334,
            "return": [],
            "arguments": {
                "ytcc": [
                    "core.Ytcc"
                ],
                "name": [
                    "str"
                ],
                "tags": [
                    "Tuple[(str, ...)]"
                ]
            }
        },
        "update": {
            "name": "update",
            "location": 349,
            "return": [],
            "arguments": {
                "ytcc": [
                    "core.Ytcc"
                ],
                "max_fail": [
                    "Optional[int]"
                ],
                "max_backlog": [
                    "Optional[int]"
                ]
            }
        },
        "apply_filters": {
            "name": "apply_filters",
            "location": 385,
            "return": [],
            "arguments": {
                "ytcc": [
                    "core.Ytcc"
                ],
                "tags": [
                    "Optional[List[str]]"
                ],
                "since": [
                    "Optional[datetime]"
                ],
                "till": [
                    "Optional[datetime]"
                ],
                "playlists": [
                    "Optional[List[str]]"
                ],
                "ids": [
                    "Optional[List[int]]"
                ],
                "watched": [
                    "bool"
                ],
                "unwatched": [
                    "bool"
                ]
            }
        },
        "set_order": {
            "name": "set_order",
            "location": 410,
            "return": [],
            "arguments": {
                "ytcc": [
                    "core.Ytcc"
                ],
                "order_by": [
                    "ClickOrderBy"
                ]
            }
        },
        "list_videos_impl": {
            "name": "list_videos_impl",
            "location": 429,
            "return": [],
            "arguments": {
                "ytcc": [
                    "core.Ytcc"
                ],
                "tags": [
                    "Optional[List[str]]"
                ],
                "since": [
                    "Optional[datetime]"
                ],
                "till": [
                    "Optional[datetime]"
                ],
                "playlists": [
                    "Optional[List[str]]"
                ],
                "ids": [
                    "Optional[List[int]]"
                ],
                "attributes": [
                    "Optional[List[str]]"
                ],
                "watched": [
                    "bool"
                ],
                "unwatched": [
                    "bool"
                ],
                "order_by": [
                    "ClickOrderBy"
                ]
            }
        },
        "list_videos": {
            "name": "list_videos",
            "location": 457,
            "return": [],
            "arguments": {
                "ytcc": [
                    "core.Ytcc"
                ],
                "tags": [
                    "Optional[List[str]]"
                ],
                "since": [
                    "Optional[datetime]"
                ],
                "till": [
                    "Optional[datetime]"
                ],
                "playlists": [
                    "Optional[List[str]]"
                ],
                "ids": [
                    "Optional[List[int]]"
                ],
                "attributes": [
                    "Optional[List[str]]"
                ],
                "watched": [
                    "bool"
                ],
                "unwatched": [
                    "bool"
                ],
                "order_by": [
                    "ClickOrderBy"
                ]
            }
        },
        "list_ids": {
            "name": "list_ids",
            "location": 479,
            "return": [],
            "arguments": {
                "ytcc": [
                    "core.Ytcc"
                ],
                "tags": [
                    "Optional[List[str]]"
                ],
                "since": [
                    "Optional[datetime]"
                ],
                "till": [
                    "Optional[datetime]"
                ],
                "playlists": [
                    "Optional[List[str]]"
                ],
                "ids": [
                    "Optional[List[int]]"
                ],
                "watched": [
                    "bool"
                ],
                "unwatched": [
                    "bool"
                ],
                "order_by": [
                    "ClickOrderBy"
                ]
            }
        },
        "tui": {
            "name": "tui",
            "location": 502,
            "return": [],
            "arguments": {
                "ytcc": [
                    "core.Ytcc"
                ],
                "tags": [
                    "Optional[List[str]]"
                ],
                "since": [
                    "Optional[datetime]"
                ],
                "till": [
                    "Optional[datetime]"
                ],
                "playlists": [
                    "Optional[List[str]]"
                ],
                "ids": [
                    "Optional[List[int]]"
                ],
                "watched": [
                    "bool"
                ],
                "unwatched": [
                    "bool"
                ],
                "order_by": [
                    "ClickOrderBy"
                ]
            }
        },
        "_get_ids": {
            "name": "_get_ids",
            "location": 524,
            "return": [
                "Iterable[int]"
            ],
            "arguments": {
                "ids": [
                    "List[int]"
                ]
            }
        },
        "_get_videos": {
            "name": "_get_videos",
            "location": 538,
            "return": [
                "Iterable[MappedVideo]"
            ],
            "arguments": {
                "ytcc": [
                    "core.Ytcc"
                ],
                "ids": [
                    "List[int]"
                ]
            }
        },
        "play": {
            "name": "play",
            "location": 557,
            "return": [],
            "arguments": {
                "ytcc": [
                    "core.Ytcc"
                ],
                "ids": [
                    "Tuple[(int, ...)]"
                ],
                "audio_only": [
                    "bool"
                ],
                "no_meta": [
                    "bool"
                ],
                "no_mark": [
                    "bool"
                ]
            }
        },
        "mark": {
            "name": "mark",
            "location": 584,
            "return": [],
            "arguments": {
                "ytcc": [
                    "core.Ytcc"
                ],
                "ids": [
                    "Tuple[(int, ...)]"
                ]
            }
        },
        "unmark": {
            "name": "unmark",
            "location": 599,
            "return": [],
            "arguments": {
                "ytcc": [
                    "core.Ytcc"
                ],
                "ids": [
                    "Tuple[(int, ...)]"
                ]
            }
        },
        "download": {
            "name": "download",
            "location": 622,
            "return": [],
            "arguments": {
                "ytcc": [
                    "core.Ytcc"
                ],
                "ids": [
                    "Tuple[(int, ...)]"
                ],
                "path": [
                    "Path"
                ],
                "audio_only": [
                    "bool"
                ],
                "no_mark": [
                    "bool"
                ],
                "subdirs": [
                    "Optional[bool]"
                ]
            }
        },
        "cleanup": {
            "name": "cleanup",
            "location": 649,
            "return": [],
            "arguments": {
                "ytcc": [
                    "core.Ytcc"
                ],
                "keep": [
                    "Optional[int]"
                ]
            }
        },
        "import_": {
            "name": "import_",
            "location": 666,
            "return": [],
            "arguments": {
                "ytcc": [
                    "core.Ytcc"
                ],
                "format": [
                    "str"
                ],
                "file": [
                    "Path"
                ]
            }
        },
        "bug_report": {
            "name": "bug_report",
            "location": 685,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 737,
            "return": [],
            "arguments": {}
        },
        "CommaList.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "validator": [
                    "Callable[([str], T)]"
                ]
            }
        },
        "CommaList.convert": {
            "name": "convert",
            "location": 52,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "param": [],
                "ctx": []
            }
        },
        "TruncateVals.convert": {
            "name": "convert",
            "location": 62,
            "return": [
                "Union[(None, str, int)]"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "param": [],
                "ctx": []
            }
        },
        "TruncateVals.shell_complete": {
            "name": "shell_complete",
            "location": 72,
            "return": [
                "List[CompletionItem]"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "click.Context"
                ],
                "param": [
                    "click.Parameter"
                ],
                "incomplete": [
                    "str"
                ]
            }
        },
        "_load_completion_conf.find_config": {
            "name": "find_config",
            "location": 99,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "ids_completion.complete": {
            "name": "complete",
            "location": 116,
            "return": [
                "List[CompletionItem]"
            ],
            "arguments": {
                "ctx": [
                    "click.Context"
                ],
                "param": [
                    "click.Parameter"
                ],
                "incomplete": [
                    "str"
                ]
            }
        }
    },
    "ytcc-master/ytcc/config.py": {
        "_get_config": {
            "name": "_get_config",
            "location": 181,
            "return": [
                "configparser.ConfigParser"
            ],
            "arguments": {
                "override_cfg_file": [
                    "Optional[str]"
                ]
            }
        },
        "load": {
            "name": "load",
            "location": 227,
            "return": [],
            "arguments": {
                "override_cfg_file": [
                    "Optional[str]"
                ]
            }
        },
        "dumps": {
            "name": "dumps",
            "location": 289,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "dump": {
            "name": "dump",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "txt_io": [
                    "TextIO"
                ]
            }
        },
        "get_type_args": {
            "name": "get_type_args",
            "location": 38,
            "return": [],
            "arguments": {
                "typ": []
            }
        },
        "get_type_origin": {
            "name": "get_type_origin",
            "location": 44,
            "return": [],
            "arguments": {
                "typ": []
            }
        },
        "Color.__new__": {
            "name": "__new__",
            "location": 55,
            "return": [],
            "arguments": {
                "cls": [],
                "val": []
            }
        },
        "VideoAttr.from_str": {
            "name": "from_str",
            "location": 84,
            "return": [
                "'VideoAttr'"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "PlaylistAttr.from_str": {
            "name": "from_str",
            "location": 98,
            "return": [
                "'PlaylistAttr'"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "DateFormatStr.__new__": {
            "name": "__new__",
            "location": 111,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "BaseConfig.__setattr__": {
            "name": "__setattr__",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "load.enum_from_str": {
            "name": "enum_from_str",
            "location": 230,
            "return": [
                "Enum"
            ],
            "arguments": {
                "e_class": [
                    "EnumMeta"
                ],
                "str_val": [
                    "str"
                ]
            }
        },
        "load.bool_from_str": {
            "name": "bool_from_str",
            "location": 240,
            "return": [
                "bool"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "load.list_from_str": {
            "name": "list_from_str",
            "location": 246,
            "return": [
                "List[Any]"
            ],
            "arguments": {
                "elem_type": [
                    "Type"
                ],
                "list_str": [
                    "str"
                ]
            }
        },
        "load.tuple_from_str": {
            "name": "tuple_from_str",
            "location": 249,
            "return": [
                "Tuple"
            ],
            "arguments": {
                "types": [
                    "Sequence[Type]"
                ],
                "tuple_str": []
            }
        },
        "load._convert": {
            "name": "_convert",
            "location": 256,
            "return": [
                "Any"
            ],
            "arguments": {
                "typ": [
                    "Type[Any]"
                ],
                "string": [
                    "str"
                ]
            }
        },
        "dumps._serialize": {
            "name": "_serialize",
            "location": 293,
            "return": [],
            "arguments": {
                "val": []
            }
        }
    },
    "ytcc-master/ytcc/core.py": {
        "Ytcc.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ytcc.__enter__": {
            "name": "__enter__",
            "location": 65,
            "return": [
                "'Ytcc'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ytcc.__exit__": {
            "name": "__exit__",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Any"
                ],
                "exc_val": [
                    "Any"
                ],
                "exc_tb": [
                    "Any"
                ]
            }
        },
        "Ytcc.database": {
            "name": "database",
            "location": 73,
            "return": [
                "Database"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ytcc.close": {
            "name": "close",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ytcc.set_playlist_filter": {
            "name": "set_playlist_filter",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "playlists": [
                    "Optional[List[str]]"
                ]
            }
        },
        "Ytcc.set_date_begin_filter": {
            "name": "set_date_begin_filter",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "begin": [
                    "Optional[datetime.datetime]"
                ]
            }
        },
        "Ytcc.set_date_end_filter": {
            "name": "set_date_end_filter",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "end": [
                    "Optional[datetime.datetime]"
                ]
            }
        },
        "Ytcc.set_watched_filter": {
            "name": "set_watched_filter",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "enabled": [
                    "Optional[bool]"
                ]
            }
        },
        "Ytcc.set_video_id_filter": {
            "name": "set_video_id_filter",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "Optional[List[int]]"
                ]
            }
        },
        "Ytcc.set_tags_filter": {
            "name": "set_tags_filter",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "Optional[List[str]]"
                ]
            }
        },
        "Ytcc.set_listing_order": {
            "name": "set_listing_order",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "order_by": [
                    "List[Tuple[(VideoAttr, Direction)]]"
                ]
            }
        },
        "Ytcc.update": {
            "name": "update",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "max_fail": [
                    "Optional[int]"
                ],
                "max_backlog": [
                    "Optional[int]"
                ]
            }
        },
        "Ytcc.play_video": {
            "name": "play_video",
            "location": 155,
            "return": [
                "bool"
            ],
            "arguments": {
                "video": [
                    "Video"
                ],
                "audio_only": [
                    "bool"
                ]
            }
        },
        "Ytcc.download_video": {
            "name": "download_video",
            "location": 189,
            "return": [
                "bool"
            ],
            "arguments": {
                "video": [
                    "MappedVideo"
                ],
                "path": [
                    "str"
                ],
                "audio_only": [
                    "bool"
                ],
                "subdirs": [
                    "Optional[bool]"
                ]
            }
        },
        "Ytcc._ydl_opts": {
            "name": "_ydl_opts",
            "location": 263,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "download_dir": [
                    "str"
                ],
                "subdir": [
                    "str"
                ],
                "audio_only": [
                    "bool"
                ]
            }
        },
        "Ytcc._is_playlist_reverse": {
            "name": "_is_playlist_reverse",
            "location": 299,
            "return": [
                "bool"
            ],
            "arguments": {
                "items": [
                    "List[Video]"
                ]
            }
        },
        "Ytcc.add_playlist": {
            "name": "add_playlist",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "url": [
                    "str"
                ],
                "reverse": [
                    "bool"
                ],
                "skip_update_check": [
                    "bool"
                ]
            }
        },
        "Ytcc.list_videos": {
            "name": "list_videos",
            "location": 374,
            "return": [
                "Iterable[MappedVideo]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ytcc.mark_watched": {
            "name": "mark_watched",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "video": [
                    "Union[(List[int], int, MappedVideo)]"
                ]
            }
        },
        "Ytcc.mark_unwatched": {
            "name": "mark_unwatched",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "video": [
                    "Union[(List[int], int, MappedVideo)]"
                ]
            }
        },
        "Ytcc.unmark_recent": {
            "name": "unmark_recent",
            "location": 395,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ytcc.delete_playlist": {
            "name": "delete_playlist",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Ytcc.rename_playlist": {
            "name": "rename_playlist",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "oldname": [
                    "str"
                ],
                "newname": [
                    "str"
                ]
            }
        },
        "Ytcc.reverse_playlist": {
            "name": "reverse_playlist",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "playlist": [
                    "str"
                ]
            }
        },
        "Ytcc.list_playlists": {
            "name": "list_playlists",
            "location": 419,
            "return": [
                "Iterable[MappedPlaylist]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ytcc.tag_playlist": {
            "name": "tag_playlist",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "tags": [
                    "List[str]"
                ]
            }
        },
        "Ytcc.list_tags": {
            "name": "list_tags",
            "location": 425,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ytcc.cleanup": {
            "name": "cleanup",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keep": [
                    "int"
                ]
            }
        },
        "Ytcc.import_yt_opml": {
            "name": "import_yt_opml",
            "location": 436,
            "return": [],
            "arguments": {
                "self": [],
                "file": [
                    "Path"
                ]
            }
        },
        "Ytcc.import_yt_csv": {
            "name": "import_yt_csv",
            "location": 463,
            "return": [],
            "arguments": {
                "self": [],
                "file": [
                    "Path"
                ]
            }
        },
        "Ytcc._bulk_subscribe": {
            "name": "_bulk_subscribe",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subscriptions": [
                    "Iterable[Tuple[(str, str)]]"
                ]
            }
        },
        "Ytcc.import_yt_opml._from_xml_element": {
            "name": "_from_xml_element",
            "location": 437,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "elem": [
                    "ET.Element"
                ]
            }
        },
        "Ytcc.download_video.GetFilenameProcessor.__init__": {
            "name": "__init__",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ytcc.download_video.GetFilenameProcessor.run": {
            "name": "run",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "information": []
            }
        },
        "Ytcc.download_video.GetFilenameProcessor.report_progress": {
            "name": "report_progress",
            "location": 210,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ytcc-master/ytcc/database.py": {
        "logging_cb": {
            "name": "logging_cb",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "querystr": [
                    "str"
                ]
            }
        },
        "_placeholder": {
            "name": "_placeholder",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "elements": [
                    "List[Any]"
                ]
            }
        },
        "Video.watched": {
            "name": "watched",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Database.__enter__": {
            "name": "__enter__",
            "location": 110,
            "return": [
                "'Database'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.__exit__": {
            "name": "__exit__",
            "location": 113,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Any"
                ],
                "exc_val": [
                    "Any"
                ],
                "exc_tb": [
                    "Any"
                ]
            }
        },
        "Database._populate": {
            "name": "_populate",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Database.get_extractor_fail_count": {
            "name": "get_extractor_fail_count",
            "location": 165,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "e_hash": []
            }
        },
        "Database.increase_extractor_fail_count": {
            "name": "increase_extractor_fail_count",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e_hash": [],
                "max_fail": []
            }
        },
        "Database.close": {
            "name": "close",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.add_playlist": {
            "name": "add_playlist",
            "location": 203,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "url": [
                    "str"
                ],
                "reverse": [
                    "bool"
                ]
            }
        },
        "Database.delete_playlist": {
            "name": "delete_playlist",
            "location": 217,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Database.rename_playlist": {
            "name": "rename_playlist",
            "location": 231,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "oldname": [
                    "str"
                ],
                "newname": [
                    "str"
                ]
            }
        },
        "Database.reverse_playlist": {
            "name": "reverse_playlist",
            "location": 247,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "playlist": [
                    "str"
                ]
            }
        },
        "Database.list_playlists": {
            "name": "list_playlists",
            "location": 260,
            "return": [
                "Iterable[MappedPlaylist]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.tag_playlist": {
            "name": "tag_playlist",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "playlist": [
                    "str"
                ],
                "tags": [
                    "List[str]"
                ]
            }
        },
        "Database.list_tags": {
            "name": "list_tags",
            "location": 301,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.add_videos": {
            "name": "add_videos",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "videos": [
                    "Iterable[Video]"
                ],
                "playlist": [
                    "Playlist"
                ]
            }
        },
        "Database.mark_watched": {
            "name": "mark_watched",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "video": [
                    "Any"
                ]
            }
        },
        "Database.mark_unwatched": {
            "name": "mark_unwatched",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "video": [
                    "Any"
                ]
            }
        },
        "Database._mark": {
            "name": "_mark",
            "location": 382,
            "return": [],
            "arguments": {
                "self": [],
                "video": [
                    "Any"
                ],
                "val": [
                    "Optional[float]"
                ]
            }
        },
        "Database._make_order_by_clause": {
            "name": "_make_order_by_clause",
            "location": 397,
            "return": [
                "str"
            ],
            "arguments": {
                "order_by": [
                    "Optional[List[Tuple[(VideoAttr, Direction)]]]"
                ]
            }
        },
        "Database.list_videos": {
            "name": "list_videos",
            "location": 422,
            "return": [
                "Iterable[MappedVideo]"
            ],
            "arguments": {
                "self": [],
                "since": [
                    "Optional[float]"
                ],
                "till": [
                    "Optional[float]"
                ],
                "watched": [
                    "Optional[bool]"
                ],
                "tags": [
                    "Optional[List[str]]"
                ],
                "playlists": [
                    "Optional[List[str]]"
                ],
                "ids": [
                    "Optional[List[int]]"
                ],
                "order_by": [
                    "Optional[List[Tuple[(VideoAttr, Direction)]]]"
                ]
            }
        },
        "Database.cleanup": {
            "name": "cleanup",
            "location": 523,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keep": [
                    "int"
                ]
            }
        },
        "Database._make_order_by_clause.directions": {
            "name": "directions",
            "location": 398,
            "return": [
                "Iterable[Tuple[(str, str)]]"
            ],
            "arguments": {}
        }
    },
    "ytcc-master/ytcc/exceptions.py": {},
    "ytcc-master/ytcc/migration.py": {
        "migrate": {
            "name": "migrate",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "old_version": [
                    "int"
                ],
                "new_version": [
                    "int"
                ],
                "db_conn": [
                    "sqlite3.Connection"
                ]
            }
        }
    },
    "ytcc-master/ytcc/printer.py": {
        "Table.apply_filter": {
            "name": "apply_filter",
            "location": 41,
            "return": [
                "'Table'"
            ],
            "arguments": {
                "self": [],
                "column_names": [
                    "List[str]"
                ]
            }
        },
        "TableData.table": {
            "name": "table",
            "location": 57,
            "return": [
                "Table"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictData.data": {
            "name": "data",
            "location": 63,
            "return": [
                "Iterable[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoPrintable.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "videos": [
                    "Iterable[MappedVideo]"
                ]
            }
        },
        "VideoPrintable._format_duration": {
            "name": "_format_duration",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "duration": [
                    "float"
                ]
            }
        },
        "VideoPrintable._format_date": {
            "name": "_format_date",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "timestamp": [
                    "float"
                ]
            }
        },
        "VideoPrintable.data": {
            "name": "data",
            "location": 86,
            "return": [
                "Iterable[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoPrintable.table": {
            "name": "table",
            "location": 93,
            "return": [
                "Table"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlaylistPrintable.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "playlists": [
                    "Iterable[MappedPlaylist]"
                ]
            }
        },
        "PlaylistPrintable.data": {
            "name": "data",
            "location": 120,
            "return": [
                "Iterable[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlaylistPrintable.table": {
            "name": "table",
            "location": 124,
            "return": [
                "Table"
            ],
            "arguments": {
                "self": []
            }
        },
        "Printer.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Printer.filter": {
            "name": "filter",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "fields": [
                    "List[Any]"
                ]
            }
        },
        "Printer.print": {
            "name": "print",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Printable"
                ]
            }
        },
        "TablePrinter.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "truncate": [
                    "Union[(None, str, int)]"
                ]
            }
        },
        "TablePrinter.print": {
            "name": "print",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "TableData"
                ]
            }
        },
        "TablePrinter.print_col": {
            "name": "print_col",
            "location": 171,
            "return": [],
            "arguments": {
                "text": [
                    "str"
                ],
                "width": [
                    "int"
                ],
                "background": [
                    "Optional[int]"
                ],
                "bold": [
                    "bool"
                ]
            }
        },
        "TablePrinter.wc_truncate": {
            "name": "wc_truncate",
            "location": 178,
            "return": [],
            "arguments": {
                "text": [],
                "max_len": []
            }
        },
        "TablePrinter.print_row": {
            "name": "print_row",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "columns": [
                    "List[str]"
                ],
                "widths": [
                    "List[int]"
                ],
                "bold": [
                    "bool"
                ],
                "background": [
                    "Optional[int]"
                ]
            }
        },
        "TablePrinter.table_print": {
            "name": "table_print",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "Table"
                ]
            }
        },
        "XSVPrinter.__init__": {
            "name": "__init__",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "separator": [
                    "str"
                ]
            }
        },
        "XSVPrinter.escape": {
            "name": "escape",
            "location": 239,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ]
            }
        },
        "XSVPrinter.print": {
            "name": "print",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "TableData"
                ]
            }
        },
        "JSONPrinter.print": {
            "name": "print",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "DictData"
                ]
            }
        },
        "RSSPrinter.print": {
            "name": "print",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Printable"
                ]
            }
        }
    },
    "ytcc-master/ytcc/terminal.py": {
        "getkey": {
            "name": "getkey",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "clear_screen": {
            "name": "clear_screen",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "printtln": {
            "name": "printtln",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "printt": {
            "name": "printt",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_terminal_width": {
            "name": "get_terminal_width",
            "location": 168,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "ytcc-master/ytcc/tui.py": {
        "print_meta": {
            "name": "print_meta",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "video": [
                    "MappedVideo"
                ],
                "stream": [
                    "TextIO"
                ]
            }
        },
        "Action.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "hotkey": [
                    "str"
                ],
                "color": [
                    "Callable[([], int)]"
                ]
            }
        },
        "Action.from_config": {
            "name": "from_config",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "VideoSelection.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "alphabet": [
                    "str"
                ],
                "videos": [
                    "List[MappedVideo]"
                ]
            }
        },
        "VideoSelection._prefix_codes": {
            "name": "_prefix_codes",
            "location": 67,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "alphabet": [
                    "FrozenSet[str]"
                ],
                "count": [
                    "int"
                ]
            }
        },
        "VideoSelection.table": {
            "name": "table",
            "location": 91,
            "return": [
                "Table"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interactive.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "core": [
                    "Ytcc"
                ]
            }
        },
        "Interactive.set_action": {
            "name": "set_action",
            "location": 110,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "Action"
                ]
            }
        },
        "Interactive.get_prompt_text": {
            "name": "get_prompt_text",
            "location": 115,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interactive.get_prompt_color": {
            "name": "get_prompt_color",
            "location": 118,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interactive.command_line": {
            "name": "command_line",
            "location": 121,
            "return": [
                "Tuple[(str, bool)]"
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "List[str]"
                ]
            }
        },
        "Interactive.run": {
            "name": "run",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interactive.play": {
            "name": "play",
            "location": 225,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "video": [
                    "MappedVideo"
                ],
                "audio_only": [
                    "bool"
                ]
            }
        },
        "Interactive.download_video": {
            "name": "download_video",
            "location": 235,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "video": [
                    "MappedVideo"
                ],
                "audio_only": [
                    "bool"
                ]
            }
        },
        "StdOutOverride.__init__": {
            "name": "__init__",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "stream": []
            }
        },
        "StdOutOverride.__enter__": {
            "name": "__enter__",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StdOutOverride.__exit__": {
            "name": "__exit__",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "Interactive.__init__.makef": {
            "name": "makef",
            "location": 105,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "Interactive.command_line.print_prompt": {
            "name": "print_prompt",
            "location": 122,
            "return": [],
            "arguments": {}
        },
        "print_meta.print_separator": {
            "name": "print_separator",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [
                    "Optional[str]"
                ],
                "fat": [
                    "bool"
                ]
            }
        }
    },
    "ytcc-master/ytcc/updater.py": {
        "make_archive_id": {
            "name": "make_archive_id",
            "location": 47,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "ydl": [
                    "'YoutubeDL'"
                ],
                "entry": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Fetcher.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "max_backlog": []
            }
        },
        "Fetcher._process_ie": {
            "name": "_process_ie",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "entry": []
            }
        },
        "Fetcher._get_highest_res_thumbnail": {
            "name": "_get_highest_res_thumbnail",
            "location": 160,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "thumbnails": [
                    "List[Dict[(str, Any)]]"
                ]
            }
        },
        "Updater.__init__": {
            "name": "__init__",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "db_path": [
                    "str"
                ],
                "max_backlog": [],
                "max_fail": []
            }
        },
        "Updater.__enter__": {
            "name": "__enter__",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Updater.__exit__": {
            "name": "__exit__",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "Updater.update": {
            "name": "update",
            "location": 216,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fetcher._get_highest_res_thumbnail._max_res": {
            "name": "_max_res",
            "location": 161,
            "return": [
                "int"
            ],
            "arguments": {
                "thumb": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "ytcc-master/ytcc/utils.py": {
        "take": {
            "name": "take",
            "location": 26,
            "return": [
                "Iterable[T]"
            ],
            "arguments": {
                "amount": [
                    "int"
                ],
                "iterable": [
                    "Iterable[T]"
                ]
            }
        },
        "lazy_import": {
            "name": "lazy_import",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "fullname": [
                    "str"
                ],
                "fallback": [
                    "Optional[str]"
                ]
            }
        },
        "lazy_import._LazyLoader.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "lazy_import._LazyLoader.__getattr__": {
            "name": "__getattr__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        }
    },
    "ytcc-master/ytcc/__init__.py": {}
}
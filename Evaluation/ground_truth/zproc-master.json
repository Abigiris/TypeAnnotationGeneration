{
    "zproc-master/setup.py": {
        "UploadCommand.status": {
            "name": "status",
            "location": 60,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "UploadCommand.initialize_options": {
            "name": "initialize_options",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UploadCommand.finalize_options": {
            "name": "finalize_options",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UploadCommand.run": {
            "name": "run",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "zproc-master/benchmarks/mapper.py": {
        "sq": {
            "name": "sq",
            "location": 10,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "zproc-master/benchmarks/multiprocessing_vs_zproc.py": {
        "test123": {
            "name": "test123",
            "location": 10,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "zproc-master/benchmarks/webpage_downloader.py": {
        "print_result": {
            "name": "print_result",
            "location": 49,
            "return": [],
            "arguments": {
                "results": []
            }
        },
        "save": {
            "name": "save",
            "location": 65,
            "return": [],
            "arguments": {
                "snap": [],
                "size": [],
                "url": []
            }
        },
        "downloader": {
            "name": "downloader",
            "location": 71,
            "return": [],
            "arguments": {
                "state": [],
                "url": []
            }
        },
        "map_downloader": {
            "name": "map_downloader",
            "location": 97,
            "return": [],
            "arguments": {
                "url": []
            }
        }
    },
    "zproc-master/docs/conf.py": {},
    "zproc-master/docs/user/spec.py": {
        "my_proc": {
            "name": "my_proc",
            "location": 6,
            "return": [],
            "arguments": {
                "ctx": []
            }
        }
    },
    "zproc-master/examples/atomicity.py": {
        "increment": {
            "name": "increment",
            "location": 28,
            "return": [],
            "arguments": {
                "snap": []
            }
        },
        "child1": {
            "name": "child1",
            "location": 37,
            "return": [],
            "arguments": {
                "state": []
            }
        }
    },
    "zproc-master/examples/chain_reaction.py": {
        "child1": {
            "name": "child1",
            "location": 21,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "child2": {
            "name": "child2",
            "location": 31,
            "return": [],
            "arguments": {
                "state": []
            }
        }
    },
    "zproc-master/examples/cookie_eater.py": {
        "eat_cookie": {
            "name": "eat_cookie",
            "location": 20,
            "return": [],
            "arguments": {
                "snap": []
            }
        },
        "bake_cookie": {
            "name": "bake_cookie",
            "location": 27,
            "return": [],
            "arguments": {
                "snap": []
            }
        },
        "cookie_eater": {
            "name": "cookie_eater",
            "location": 39,
            "return": [],
            "arguments": {
                "ctx": []
            }
        }
    },
    "zproc-master/examples/cookie_eater_extreme.py": {
        "decrement": {
            "name": "decrement",
            "location": 16,
            "return": [],
            "arguments": {
                "state": [],
                "key": []
            }
        },
        "increment": {
            "name": "increment",
            "location": 21,
            "return": [],
            "arguments": {
                "state": [],
                "key": []
            }
        },
        "cookie_eater": {
            "name": "cookie_eater",
            "location": 30,
            "return": [],
            "arguments": {
                "ctx": []
            }
        }
    },
    "zproc-master/examples/luck_test.py": {
        "num_listener": {
            "name": "num_listener",
            "location": 23,
            "return": [],
            "arguments": {
                "state": [],
                "low": [],
                "high": []
            }
        }
    },
    "zproc-master/examples/nested_procs.py": {
        "child1": {
            "name": "child1",
            "location": 13,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "child1.child2": {
            "name": "child2",
            "location": 20,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "child1.child2.child3": {
            "name": "child3",
            "location": 27,
            "return": [],
            "arguments": {
                "state": []
            }
        }
    },
    "zproc-master/examples/peanut_processor.py": {
        "inc_peanuts": {
            "name": "inc_peanuts",
            "location": 125,
            "return": [],
            "arguments": {
                "snap": []
            }
        },
        "peanut_gen": {
            "name": "peanut_gen",
            "location": 131,
            "return": [],
            "arguments": {
                "state": []
            }
        }
    },
    "zproc-master/examples/remote_exceptions.py": {
        "my_process": {
            "name": "my_process",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "zproc-master/examples/state_watchers.py": {
        "child1": {
            "name": "child1",
            "location": 23,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "child2": {
            "name": "child2",
            "location": 28,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "child3": {
            "name": "child3",
            "location": 33,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "child4": {
            "name": "child4",
            "location": 38,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "child5": {
            "name": "child5",
            "location": 43,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "child6": {
            "name": "child6",
            "location": 48,
            "return": [],
            "arguments": {
                "state": []
            }
        }
    },
    "zproc-master/tests/test_atomic_contract.py": {
        "ctx": {
            "name": "ctx",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "state": {
            "name": "state",
            "location": 16,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "test_exception_contract": {
            "name": "test_exception_contract",
            "location": 20,
            "return": [],
            "arguments": {
                "ctx": [],
                "state": []
            }
        },
        "test_signal_contract": {
            "name": "test_signal_contract",
            "location": 32,
            "return": [],
            "arguments": {
                "ctx": [],
                "state": []
            }
        },
        "test_exception_contract.mutator": {
            "name": "mutator",
            "location": 22,
            "return": [],
            "arguments": {
                "snap": []
            }
        },
        "test_signal_contract.atomic_fn": {
            "name": "atomic_fn",
            "location": 34,
            "return": [],
            "arguments": {
                "snap": []
            }
        },
        "test_signal_contract.p": {
            "name": "p",
            "location": 41,
            "return": [],
            "arguments": {}
        }
    },
    "zproc-master/tests/test_dict_api.py": {
        "ctx": {
            "name": "ctx",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "pydict": {
            "name": "pydict",
            "location": 15,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "state": {
            "name": "state",
            "location": 20,
            "return": [
                "zproc.State"
            ],
            "arguments": {
                "pydict": [],
                "ctx": []
            }
        },
        "test_update": {
            "name": "test_update",
            "location": 24,
            "return": [],
            "arguments": {
                "state": [],
                "pydict": []
            }
        },
        "test__contains__": {
            "name": "test__contains__",
            "location": 31,
            "return": [],
            "arguments": {
                "state": [],
                "pydict": []
            }
        },
        "test__delitem__": {
            "name": "test__delitem__",
            "location": 36,
            "return": [],
            "arguments": {
                "state": [],
                "pydict": []
            }
        },
        "test__eq__": {
            "name": "test__eq__",
            "location": 43,
            "return": [],
            "arguments": {
                "state": [],
                "pydict": []
            }
        },
        "test__getitem__": {
            "name": "test__getitem__",
            "location": 47,
            "return": [],
            "arguments": {
                "state": [],
                "pydict": []
            }
        },
        "test__iter__": {
            "name": "test__iter__",
            "location": 51,
            "return": [],
            "arguments": {
                "state": [],
                "pydict": []
            }
        },
        "test__len__": {
            "name": "test__len__",
            "location": 56,
            "return": [],
            "arguments": {
                "state": [],
                "pydict": []
            }
        },
        "test__ne__": {
            "name": "test__ne__",
            "location": 60,
            "return": [],
            "arguments": {
                "state": [],
                "pydict": []
            }
        },
        "test__setitem__": {
            "name": "test__setitem__",
            "location": 64,
            "return": [],
            "arguments": {
                "state": [],
                "pydict": []
            }
        },
        "test_clear": {
            "name": "test_clear",
            "location": 70,
            "return": [],
            "arguments": {
                "state": [],
                "pydict": []
            }
        },
        "test_dict_inbuilt": {
            "name": "test_dict_inbuilt",
            "location": 76,
            "return": [],
            "arguments": {
                "state": [],
                "pydict": []
            }
        },
        "test_copy": {
            "name": "test_copy",
            "location": 80,
            "return": [],
            "arguments": {
                "state": [],
                "pydict": []
            }
        },
        "test_get": {
            "name": "test_get",
            "location": 84,
            "return": [],
            "arguments": {
                "state": [],
                "pydict": []
            }
        },
        "test_items": {
            "name": "test_items",
            "location": 89,
            "return": [],
            "arguments": {
                "state": [],
                "pydict": []
            }
        },
        "test_values": {
            "name": "test_values",
            "location": 94,
            "return": [],
            "arguments": {
                "state": [],
                "pydict": []
            }
        },
        "test_keys": {
            "name": "test_keys",
            "location": 99,
            "return": [],
            "arguments": {
                "state": [],
                "pydict": []
            }
        },
        "test_setdefault": {
            "name": "test_setdefault",
            "location": 104,
            "return": [],
            "arguments": {
                "state": [],
                "pydict": []
            }
        },
        "test_pop": {
            "name": "test_pop",
            "location": 111,
            "return": [],
            "arguments": {
                "state": [],
                "pydict": []
            }
        },
        "test_popitem": {
            "name": "test_popitem",
            "location": 116,
            "return": [],
            "arguments": {
                "state": [],
                "pydict": []
            }
        }
    },
    "zproc-master/tests/test_liveness.py": {
        "state": {
            "name": "state",
            "location": 9,
            "return": [
                "zproc.State"
            ],
            "arguments": {}
        },
        "test_not_live": {
            "name": "test_not_live",
            "location": 23,
            "return": [],
            "arguments": {
                "state": [
                    "zproc.State"
                ]
            }
        },
        "test_live": {
            "name": "test_live",
            "location": 29,
            "return": [],
            "arguments": {
                "state": [
                    "zproc.State"
                ]
            }
        },
        "state.mutator": {
            "name": "mutator",
            "location": 13,
            "return": [],
            "arguments": {
                "ctx": [
                    "zproc.Context"
                ]
            }
        }
    },
    "zproc-master/tests/test_maps.py": {
        "ctx": {
            "name": "ctx",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "swarm": {
            "name": "swarm",
            "location": 12,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "test_regular": {
            "name": "test_regular",
            "location": 16,
            "return": [],
            "arguments": {
                "swarm": []
            }
        },
        "test_lazy": {
            "name": "test_lazy",
            "location": 23,
            "return": [],
            "arguments": {
                "swarm": []
            }
        },
        "test_nested_map": {
            "name": "test_nested_map",
            "location": 31,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "test_remote_result": {
            "name": "test_remote_result",
            "location": 40,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "test_nested_map.p1": {
            "name": "p1",
            "location": 33,
            "return": [],
            "arguments": {
                "ctx": [
                    "zproc.Context"
                ]
            }
        },
        "test_remote_result.p2": {
            "name": "p2",
            "location": 42,
            "return": [],
            "arguments": {
                "ctx": [
                    "zproc.Context"
                ]
            }
        }
    },
    "zproc-master/tests/test_namespaces.py": {
        "test_namespaces": {
            "name": "test_namespaces",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "zproc-master/tests/test_ping.py": {
        "ctx": {
            "name": "ctx",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "state": {
            "name": "state",
            "location": 15,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "test_ping": {
            "name": "test_ping",
            "location": 19,
            "return": [],
            "arguments": {
                "ctx": [],
                "state": []
            }
        },
        "test_timeout": {
            "name": "test_timeout",
            "location": 26,
            "return": [],
            "arguments": {
                "ctx": [],
                "state": []
            }
        },
        "test_timeout_error": {
            "name": "test_timeout_error",
            "location": 33,
            "return": [],
            "arguments": {
                "ctx": [],
                "state": []
            }
        },
        "test_ping_after_close": {
            "name": "test_ping_after_close",
            "location": 44,
            "return": [],
            "arguments": {
                "ctx": [],
                "state": []
            }
        }
    },
    "zproc-master/tests/test_process_kwargs.py": {
        "ctx": {
            "name": "ctx",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_not_pass_ctx": {
            "name": "test_not_pass_ctx",
            "location": 11,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "test_pass_ctx": {
            "name": "test_pass_ctx",
            "location": 19,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "test_not_pass_ctx.my_process": {
            "name": "my_process",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_pass_ctx.my_process": {
            "name": "my_process",
            "location": 21,
            "return": [],
            "arguments": {
                "ctx": []
            }
        }
    },
    "zproc-master/tests/test_process_wait.py": {
        "ctx": {
            "name": "ctx",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_timeout_accuracy": {
            "name": "test_timeout_accuracy",
            "location": 15,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "test_timeout_accuracy_parallel": {
            "name": "test_timeout_accuracy_parallel",
            "location": 32,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "test_timeout1": {
            "name": "test_timeout1",
            "location": 53,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "test_timeout2": {
            "name": "test_timeout2",
            "location": 62,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "test_wait_timeout": {
            "name": "test_wait_timeout",
            "location": 71,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "test_wait_timeout_dumb": {
            "name": "test_wait_timeout_dumb",
            "location": 85,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "test_wait_error": {
            "name": "test_wait_error",
            "location": 99,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "test_exit": {
            "name": "test_exit",
            "location": 111,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "test_timeout_accuracy.test": {
            "name": "test",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_timeout_accuracy_parallel.test1": {
            "name": "test1",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "test_timeout_accuracy_parallel.test2": {
            "name": "test2",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_timeout1.test": {
            "name": "test",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "test_timeout2.test": {
            "name": "test",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "test_wait_timeout.test1": {
            "name": "test1",
            "location": 73,
            "return": [],
            "arguments": {}
        },
        "test_wait_timeout.test2": {
            "name": "test2",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "test_wait_timeout_dumb.test1": {
            "name": "test1",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "test_wait_timeout_dumb.test2": {
            "name": "test2",
            "location": 91,
            "return": [],
            "arguments": {}
        },
        "test_wait_error.test": {
            "name": "test",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "test_exit.test": {
            "name": "test",
            "location": 113,
            "return": [],
            "arguments": {}
        }
    },
    "zproc-master/tests/test_retries.py": {
        "ctx": {
            "name": "ctx",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "state": {
            "name": "state",
            "location": 12,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "test_retry": {
            "name": "test_retry",
            "location": 16,
            "return": [],
            "arguments": {
                "ctx": [],
                "state": []
            }
        },
        "test_infinite_retry": {
            "name": "test_infinite_retry",
            "location": 30,
            "return": [],
            "arguments": {
                "ctx": [],
                "state": []
            }
        },
        "test_retry.p": {
            "name": "p",
            "location": 18,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "test_infinite_retry.p": {
            "name": "p",
            "location": 32,
            "return": [],
            "arguments": {
                "ctx": []
            }
        }
    },
    "zproc-master/tests/test_server_address.py": {
        "test_random_addr": {
            "name": "test_random_addr",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_static_addr": {
            "name": "test_static_addr",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "test_start_server": {
            "name": "test_start_server",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "test_not_start_server": {
            "name": "test_not_start_server",
            "location": 49,
            "return": [],
            "arguments": {}
        }
    },
    "zproc-master/tests/test_state_watchers.py": {
        "state": {
            "name": "state",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_when_change": {
            "name": "test_when_change",
            "location": 29,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "test_when": {
            "name": "test_when",
            "location": 37,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "test_when_equal": {
            "name": "test_when_equal",
            "location": 45,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "test_when_not_equal": {
            "name": "test_when_not_equal",
            "location": 53,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "test_when_none": {
            "name": "test_when_none",
            "location": 61,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "test_when_not_none": {
            "name": "test_when_not_none",
            "location": 69,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "test_when_avail": {
            "name": "test_when_avail",
            "location": 77,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "state.updater": {
            "name": "updater",
            "location": 13,
            "return": [],
            "arguments": {
                "ctx": []
            }
        }
    },
    "zproc-master/tests/resillience_tests/nested_process.py": {
        "p1": {
            "name": "p1",
            "location": 10,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "p1.p2": {
            "name": "p2",
            "location": 12,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "p1.p2.p3": {
            "name": "p3",
            "location": 14,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "p1.p2.p3.p4": {
            "name": "p4",
            "location": 16,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "p1.p2.p3.p4.pn": {
            "name": "pn",
            "location": 18,
            "return": [],
            "arguments": {}
        }
    },
    "zproc-master/tests/resillience_tests/process_wait.py": {
        "my_process": {
            "name": "my_process",
            "location": 8,
            "return": [],
            "arguments": {
                "ctx": []
            }
        }
    },
    "zproc-master/tests/resillience_tests/start_server.py": {},
    "zproc-master/tests/resillience_tests/state_watchers.py": {
        "inc": {
            "name": "inc",
            "location": 14,
            "return": [],
            "arguments": {
                "snap": []
            }
        },
        "generator": {
            "name": "generator",
            "location": 19,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "test_process": {
            "name": "test_process",
            "location": 47,
            "return": [],
            "arguments": {
                "ctx": []
            }
        }
    },
    "zproc-master/tests/resillience_tests/swarm.py": {},
    "zproc-master/zproc/child.py": {
        "ChildProcess.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChildProcess._handle_exc": {
            "name": "_handle_exc",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "e": [
                    "Exception"
                ]
            }
        },
        "ChildProcess.main": {
            "name": "main",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChildProcess.main.target_wrapper": {
            "name": "target_wrapper",
            "location": 61,
            "return": [],
            "arguments": {}
        }
    },
    "zproc-master/zproc/consts.py": {},
    "zproc-master/zproc/context.py": {
        "ProcessList.__str__": {
            "name": "__str__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProcessList.__repr__": {
            "name": "__repr__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProcessList._wait_or_catch_exc": {
            "name": "_wait_or_catch_exc",
            "location": 26,
            "return": [
                "Union[(Exception, Any)]"
            ],
            "arguments": {
                "process": [
                    "Process"
                ],
                "timeout": [
                    "Union[(int, float)]"
                ]
            }
        },
        "ProcessList.wait": {
            "name": "wait",
            "location": 34,
            "return": [
                "List[Union[(Any, Exception)]]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "Union[(int, float)]"
                ],
                "safe": [
                    "bool"
                ]
            }
        },
        "ProcessList.start": {
            "name": "start",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProcessList.stop": {
            "name": "stop",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_address": [
                    "str"
                ]
            }
        },
        "Context.__str__": {
            "name": "__str__",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.__repr__": {
            "name": "__repr__",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.create_state": {
            "name": "create_state",
            "location": 201,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "dict"
                ]
            }
        },
        "Context.create_swarm": {
            "name": "create_swarm",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "count": [
                    "int"
                ]
            }
        },
        "Context.start_server": {
            "name": "start_server",
            "location": 225,
            "return": [
                "Tuple[(multiprocessing.Process, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context._process": {
            "name": "_process",
            "location": 230,
            "return": [
                "Union[(Process, Callable)]"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Callable"
                ]
            }
        },
        "Context.spawn": {
            "name": "spawn",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.spawn_map": {
            "name": "spawn_map",
            "location": 305,
            "return": [],
            "arguments": {
                "self": [],
                "target": [
                    "Callable"
                ],
                "map_iter": [
                    "Sequence[Any]"
                ]
            }
        },
        "Context.wait": {
            "name": "wait",
            "location": 329,
            "return": [
                "List[Union[(Any, Exception)]]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "Union[(int, float)]"
                ],
                "safe": [
                    "bool"
                ]
            }
        },
        "Context.start_all": {
            "name": "start_all",
            "location": 337,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.stop_all": {
            "name": "stop_all",
            "location": 343,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.ping": {
            "name": "ping",
            "location": 349,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.spawn.wrapper": {
            "name": "wrapper",
            "location": 291,
            "return": [],
            "arguments": {
                "target": [
                    "Callable"
                ]
            }
        }
    },
    "zproc-master/zproc/exceptions.py": {
        "_sig_exc_handler": {
            "name": "_sig_exc_handler",
            "location": 59,
            "return": [],
            "arguments": {
                "sig": [],
                "frame": []
            }
        },
        "signal_to_exception": {
            "name": "signal_to_exception",
            "location": 63,
            "return": [
                "SignalException"
            ],
            "arguments": {
                "sig": [
                    "signal.Signals"
                ]
            }
        },
        "exception_to_signal": {
            "name": "exception_to_signal",
            "location": 86,
            "return": [],
            "arguments": {
                "sig": [
                    "Union[(SignalException, signal.Signals)]"
                ]
            }
        },
        "send_signal": {
            "name": "send_signal",
            "location": 97,
            "return": [],
            "arguments": {
                "sig": [
                    "Union[(SignalException, signal.Signals)]"
                ],
                "pid": [
                    "int"
                ]
            }
        },
        "ProcessWaitError.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "exitcode": [],
                "process": []
            }
        },
        "ProcessWaitError.__str__": {
            "name": "__str__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RemoteException.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "exc_info": []
            }
        },
        "RemoteException._from_pickled_state": {
            "name": "_from_pickled_state",
            "location": 28,
            "return": [],
            "arguments": {
                "cls": [],
                "exc_type": [],
                "value": [],
                "pickled_tb": []
            }
        },
        "RemoteException.__reduce__": {
            "name": "__reduce__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RemoteException.reraise": {
            "name": "reraise",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RemoteException.__str__": {
            "name": "__str__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RemoteException.__repr__": {
            "name": "__repr__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignalException.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "signum": [
                    "int"
                ],
                "frame": []
            }
        },
        "SignalException.__str__": {
            "name": "__str__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignalException.__repr__": {
            "name": "__repr__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProcessExit.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "exitcode": []
            }
        }
    },
    "zproc-master/zproc/process.py": {
        "Process.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_address": [
                    "str"
                ],
                "target": [
                    "Callable"
                ]
            }
        },
        "Process.__str__": {
            "name": "__str__",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.__repr__": {
            "name": "__repr__",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.start": {
            "name": "start",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process._cleanup": {
            "name": "_cleanup",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.stop": {
            "name": "stop",
            "location": 232,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.wait": {
            "name": "wait",
            "location": 244,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": [
                    "Union[(int, float)]"
                ]
            }
        },
        "Process.is_alive": {
            "name": "is_alive",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.pid": {
            "name": "pid",
            "location": 313,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.exitcode": {
            "name": "exitcode",
            "location": 322,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "zproc-master/zproc/serializer.py": {
        "dumps": {
            "name": "dumps",
            "location": 9,
            "return": [
                "bytes"
            ],
            "arguments": {
                "obj": [
                    "Any"
                ]
            }
        },
        "loads": {
            "name": "loads",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {
                "bytes_obj": [
                    "bytes"
                ]
            }
        },
        "_get_fn_hash": {
            "name": "_get_fn_hash",
            "location": 20,
            "return": [],
            "arguments": {
                "fn": [
                    "Callable"
                ]
            }
        },
        "dumps_fn": {
            "name": "dumps_fn",
            "location": 30,
            "return": [
                "bytes"
            ],
            "arguments": {
                "fn": [
                    "Callable"
                ]
            }
        },
        "loads_fn": {
            "name": "loads_fn",
            "location": 43,
            "return": [
                "Callable"
            ],
            "arguments": {
                "fn_bytes": [
                    "bytes"
                ]
            }
        }
    },
    "zproc-master/zproc/util.py": {
        "create_ipc_address": {
            "name": "create_ipc_address",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "get_server_meta": {
            "name": "get_server_meta",
            "location": 41,
            "return": [
                "ServerMeta"
            ],
            "arguments": {
                "zmq_ctx": [
                    "zmq.Context"
                ],
                "server_address": [
                    "str"
                ]
            }
        },
        "req_server_meta": {
            "name": "req_server_meta",
            "location": 52,
            "return": [
                "ServerMeta"
            ],
            "arguments": {
                "dealer": [
                    "zmq.Socket"
                ]
            }
        },
        "to_catchable_exc": {
            "name": "to_catchable_exc",
            "location": 64,
            "return": [
                "Generator[(Type[BaseException], None, None)]"
            ],
            "arguments": {
                "retry_for": [
                    "Iterable[Union[(signal.Signals, Type[BaseException])]]"
                ]
            }
        },
        "bind_to_random_ipc": {
            "name": "bind_to_random_ipc",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "sock": [
                    "zmq.Socket"
                ]
            }
        },
        "bind_to_random_tcp": {
            "name": "bind_to_random_tcp",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "sock": [
                    "zmq.Socket"
                ]
            }
        },
        "bind_to_random_address": {
            "name": "bind_to_random_address",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "sock": [
                    "zmq.Socket"
                ]
            }
        },
        "close_zmq_ctx": {
            "name": "close_zmq_ctx",
            "location": 104,
            "return": [],
            "arguments": {
                "ctx": [
                    "zmq.Context"
                ]
            }
        },
        "clean_process_tree": {
            "name": "clean_process_tree",
            "location": 109,
            "return": [],
            "arguments": {}
        },
        "make_chunks": {
            "name": "make_chunks",
            "location": 132,
            "return": [],
            "arguments": {
                "seq": [
                    "Optional[Sequence]"
                ],
                "length": [
                    "int"
                ],
                "num_chunks": [
                    "int"
                ]
            }
        },
        "is_main_thread": {
            "name": "is_main_thread",
            "location": 139,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "create_zmq_ctx": {
            "name": "create_zmq_ctx",
            "location": 143,
            "return": [
                "zmq.Context"
            ],
            "arguments": {}
        },
        "enclose_in_brackets": {
            "name": "enclose_in_brackets",
            "location": 150,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "callable_repr": {
            "name": "callable_repr",
            "location": 154,
            "return": [
                "str"
            ],
            "arguments": {
                "c": [
                    "Callable"
                ]
            }
        },
        "generate_task_id": {
            "name": "generate_task_id",
            "location": 158,
            "return": [
                "bytes"
            ],
            "arguments": {
                "task_info": [
                    "Tuple[(int, int, int)]"
                ]
            }
        },
        "deconstruct_task_id": {
            "name": "deconstruct_task_id",
            "location": 165,
            "return": [
                "Optional[tuple]"
            ],
            "arguments": {
                "task_id": [
                    "bytes"
                ]
            }
        },
        "encode_chunk_id": {
            "name": "encode_chunk_id",
            "location": 172,
            "return": [
                "bytes"
            ],
            "arguments": {
                "task_id": [
                    "bytes"
                ],
                "index": [
                    "int"
                ]
            }
        },
        "decode_chunk_id": {
            "name": "decode_chunk_id",
            "location": 176,
            "return": [
                "Tuple[(bytes, int)]"
            ],
            "arguments": {
                "chunk": [
                    "bytes"
                ]
            }
        },
        "log_internal_crash": {
            "name": "log_internal_crash",
            "location": 183,
            "return": [],
            "arguments": {
                "subsystem": [
                    "str"
                ]
            }
        },
        "socket_factory": {
            "name": "socket_factory",
            "location": 191,
            "return": [],
            "arguments": {}
        },
        "perf_counter": {
            "name": "perf_counter",
            "location": 199,
            "return": [],
            "arguments": {}
        },
        "consume": {
            "name": "consume",
            "location": 209,
            "return": [],
            "arguments": {
                "iterator": [],
                "n": []
            }
        },
        "strict_request_reply": {
            "name": "strict_request_reply",
            "location": 220,
            "return": [],
            "arguments": {
                "msg": [],
                "send": [
                    "Callable"
                ],
                "recv": [
                    "Callable"
                ]
            }
        }
    },
    "zproc-master/zproc/__init__.py": {
        "increase": {
            "name": "increase",
            "location": 21,
            "return": [],
            "arguments": {
                "state": [],
                "key": [],
                "step": []
            }
        },
        "decrease": {
            "name": "decrease",
            "location": 26,
            "return": [],
            "arguments": {
                "state": [],
                "key": [],
                "step": []
            }
        },
        "append": {
            "name": "append",
            "location": 31,
            "return": [],
            "arguments": {
                "state": [],
                "key": [],
                "item": []
            }
        }
    },
    "zproc-master/zproc/__version__.py": {},
    "zproc-master/zproc/server/main.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [],
            "arguments": {
                "server_address": [
                    "str"
                ],
                "send_conn": []
            }
        }
    },
    "zproc-master/zproc/server/tools.py": {
        "start_server": {
            "name": "start_server",
            "location": 14,
            "return": [
                "Tuple[(multiprocessing.Process, str)]"
            ],
            "arguments": {
                "server_address": [
                    "str"
                ]
            }
        },
        "ping": {
            "name": "ping",
            "location": 52,
            "return": [
                "int"
            ],
            "arguments": {
                "server_address": [
                    "str"
                ]
            }
        }
    },
    "zproc-master/zproc/server/__init__.py": {},
    "zproc-master/zproc/state/server.py": {
        "StateServer.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state_router": [
                    "zmq.Socket"
                ],
                "watch_router": [
                    "zmq.Socket"
                ],
                "server_meta": [
                    "ServerMeta"
                ]
            }
        },
        "StateServer.send_state": {
            "name": "send_state",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "_": []
            }
        },
        "StateServer.get_server_meta": {
            "name": "get_server_meta",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "_": []
            }
        },
        "StateServer.ping": {
            "name": "ping",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "StateServer.time": {
            "name": "time",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "_": []
            }
        },
        "StateServer.set_state": {
            "name": "set_state",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "StateServer.run_dict_method": {
            "name": "run_dict_method",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "StateServer.run_fn_atomically": {
            "name": "run_fn_atomically",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "StateServer.recv_request": {
            "name": "recv_request",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StateServer.reply": {
            "name": "reply",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "StateServer.mutate_safely": {
            "name": "mutate_safely",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StateServer.resolve_watcher": {
            "name": "resolve_watcher",
            "location": 127,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "w_ident": [
                    "bytes"
                ],
                "s_ident": [
                    "bytes"
                ],
                "namespace": [
                    "bytes"
                ],
                "identical_not_okay": [
                    "bool"
                ],
                "only_after": [
                    "float"
                ]
            }
        },
        "StateServer.resolve_pending": {
            "name": "resolve_pending",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StateServer.recv_watcher": {
            "name": "recv_watcher",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StateServer.reset_internal_state": {
            "name": "reset_internal_state",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StateServer.tick": {
            "name": "tick",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "zproc-master/zproc/state/state.py": {
        "_dummy_callback": {
            "name": "_dummy_callback",
            "location": 31,
            "return": [],
            "arguments": {
                "_": []
            }
        },
        "atomic": {
            "name": "atomic",
            "location": 522,
            "return": [
                "Callable"
            ],
            "arguments": {
                "fn": [
                    "Callable"
                ]
            }
        },
        "StateWatcher.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "'State'"
                ],
                "live": [
                    "bool"
                ],
                "timeout": [
                    "float"
                ],
                "identical_okay": [
                    "bool"
                ],
                "start_time": [
                    "bool"
                ],
                "count": [
                    "int"
                ],
                "callback": [
                    "Callable[([StateUpdate], Any)]"
                ]
            }
        },
        "StateWatcher._settimeout": {
            "name": "_settimeout",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StateWatcher._request_reply": {
            "name": "_request_reply",
            "location": 74,
            "return": [
                "StateUpdate"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateWatcher.go_live": {
            "name": "go_live",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StateWatcher.__next__": {
            "name": "__next__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StateWatcher.__iter__": {
            "name": "__iter__",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StateWatcher.consume": {
            "name": "consume",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_address": [
                    "str"
                ]
            }
        },
        "State.__str__": {
            "name": "__str__",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.__repr__": {
            "name": "__repr__",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.fork": {
            "name": "fork",
            "location": 183,
            "return": [
                "'State'"
            ],
            "arguments": {
                "self": [],
                "server_address": [
                    "str"
                ]
            }
        },
        "State.namespace": {
            "name": "namespace",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "namespace": [
                    "str"
                ]
            }
        },
        "State._create_s_dealer": {
            "name": "_create_s_dealer",
            "location": 238,
            "return": [
                "zmq.Socket"
            ],
            "arguments": {
                "self": []
            }
        },
        "State._s_request_reply": {
            "name": "_s_request_reply",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[(int, Any)]"
                ]
            }
        },
        "State.set": {
            "name": "set",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "dict"
                ]
            }
        },
        "State.copy": {
            "name": "copy",
            "location": 267,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.keys": {
            "name": "keys",
            "location": 275,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.values": {
            "name": "values",
            "location": 278,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.items": {
            "name": "items",
            "location": 281,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.ping": {
            "name": "ping",
            "location": 284,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.time": {
            "name": "time",
            "location": 297,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "State._create_w_dealer": {
            "name": "_create_w_dealer",
            "location": 300,
            "return": [
                "zmq.Socket"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.when_change_raw": {
            "name": "when_change_raw",
            "location": 305,
            "return": [
                "StateWatcher"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.when_change": {
            "name": "when_change",
            "location": 329,
            "return": [
                "StateWatcher"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.when": {
            "name": "when",
            "location": 384,
            "return": [
                "StateWatcher"
            ],
            "arguments": {
                "self": [],
                "test_fn": []
            }
        },
        "State.when_truthy": {
            "name": "when_truthy",
            "location": 427,
            "return": [
                "StateWatcher"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Hashable"
                ]
            }
        },
        "State.when_falsy": {
            "name": "when_falsy",
            "location": 436,
            "return": [
                "StateWatcher"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Hashable"
                ]
            }
        },
        "State.when_equal": {
            "name": "when_equal",
            "location": 445,
            "return": [
                "StateWatcher"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Hashable"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "State.when_not_equal": {
            "name": "when_not_equal",
            "location": 460,
            "return": [
                "StateWatcher"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Hashable"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "State.when_none": {
            "name": "when_none",
            "location": 475,
            "return": [
                "StateWatcher"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Hashable"
                ]
            }
        },
        "State.when_not_none": {
            "name": "when_not_none",
            "location": 490,
            "return": [
                "StateWatcher"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Hashable"
                ]
            }
        },
        "State.when_available": {
            "name": "when_available",
            "location": 505,
            "return": [
                "StateWatcher"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Hashable"
                ]
            }
        },
        "State.__del__": {
            "name": "__del__",
            "location": 513,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "atomic.wrapper": {
            "name": "wrapper",
            "location": 570,
            "return": [],
            "arguments": {
                "state": [
                    "State"
                ]
            }
        },
        "State.when.callback": {
            "name": "callback",
            "location": 411,
            "return": [
                "dict"
            ],
            "arguments": {
                "update": [
                    "StateUpdate"
                ]
            }
        },
        "State.when_truthy._": {
            "name": "_",
            "location": 428,
            "return": [],
            "arguments": {
                "snapshot": []
            }
        },
        "State.when_falsy._": {
            "name": "_",
            "location": 437,
            "return": [],
            "arguments": {
                "snapshot": []
            }
        },
        "State.when_equal._": {
            "name": "_",
            "location": 452,
            "return": [],
            "arguments": {
                "snapshot": []
            }
        },
        "State.when_not_equal._": {
            "name": "_",
            "location": 467,
            "return": [],
            "arguments": {
                "snapshot": []
            }
        },
        "State.when_none._": {
            "name": "_",
            "location": 482,
            "return": [],
            "arguments": {
                "snapshot": []
            }
        },
        "State.when_not_none._": {
            "name": "_",
            "location": 497,
            "return": [],
            "arguments": {
                "snapshot": []
            }
        },
        "State.when_change.callback": {
            "name": "callback",
            "location": 365,
            "return": [
                "dict"
            ],
            "arguments": {
                "update": [
                    "StateUpdate"
                ]
            }
        },
        "State.when_change.select": {
            "name": "select",
            "location": 358,
            "return": [],
            "arguments": {
                "before": [],
                "after": []
            }
        }
    },
    "zproc-master/zproc/state/_type.py": {
        "_create_remote_dict_method": {
            "name": "_create_remote_dict_method",
            "location": 21,
            "return": [],
            "arguments": {
                "dict_method_name": [
                    "str"
                ]
            }
        },
        "_create_remote_dict_method.remote_method": {
            "name": "remote_method",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StateType.__new__": {
            "name": "__new__",
            "location": 45,
            "return": [],
            "arguments": {
                "mcs": []
            }
        }
    },
    "zproc-master/zproc/state/__init__.py": {},
    "zproc-master/zproc/task/map_plus.py": {
        "map_plus": {
            "name": "map_plus",
            "location": 4,
            "return": [],
            "arguments": {
                "target": [
                    "Callable"
                ],
                "mi": [],
                "ma": [],
                "a": [],
                "mk": [],
                "k": []
            }
        }
    },
    "zproc-master/zproc/task/result.py": {
        "_TaskResultBase.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "server_address": [
                    "str"
                ],
                "task_id": [
                    "bytes"
                ]
            }
        },
        "_TaskResultBase._create_dealer": {
            "name": "_create_dealer",
            "location": 15,
            "return": [
                "zmq.Socket"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TaskResultBase._get_chunk": {
            "name": "_get_chunk",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "_TaskResultBase.__del__": {
            "name": "__del__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleTaskResult.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "server_address": [
                    "str"
                ],
                "task_id": [
                    "bytes"
                ]
            }
        },
        "SimpleTaskResult.value": {
            "name": "value",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceTaskResult.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "server_address": [
                    "str"
                ],
                "task_id": [
                    "bytes"
                ]
            }
        },
        "SequenceTaskResult._get_next_chunk": {
            "name": "_get_next_chunk",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceTaskResult.as_list": {
            "name": "as_list",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceTaskResult.__len__": {
            "name": "__len__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceTaskResult.__iter__": {
            "name": "__iter__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceTaskResult.__next__": {
            "name": "__next__",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "zproc-master/zproc/task/server.py": {
        "_task_server": {
            "name": "_task_server",
            "location": 72,
            "return": [],
            "arguments": {
                "send_conn": [],
                "_bind": [
                    "Callable"
                ]
            }
        },
        "_task_proxy": {
            "name": "_task_proxy",
            "location": 101,
            "return": [],
            "arguments": {
                "send_conn": [],
                "_bind": [
                    "Callable"
                ]
            }
        },
        "_start_server": {
            "name": "_start_server",
            "location": 121,
            "return": [],
            "arguments": {
                "fn": [],
                "_bind": [
                    "Callable"
                ]
            }
        },
        "start_task_server": {
            "name": "start_task_server",
            "location": 128,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "_bind": [
                    "Callable"
                ]
            }
        },
        "start_task_proxy": {
            "name": "start_task_proxy",
            "location": 132,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "_bind": [
                    "Callable"
                ]
            }
        },
        "TaskResultServer.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "router": [
                    "zmq.Socket"
                ],
                "result_pull": [
                    "zmq.Socket"
                ]
            }
        },
        "TaskResultServer.recv_request": {
            "name": "recv_request",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TaskResultServer.resolve_pending": {
            "name": "resolve_pending",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "chunk_id": [
                    "bytes"
                ],
                "chunk_result": [
                    "bytes"
                ]
            }
        },
        "TaskResultServer.recv_chunk_result": {
            "name": "recv_chunk_result",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TaskResultServer.tick": {
            "name": "tick",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "zproc-master/zproc/task/swarm.py": {
        "Swarm.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "server_address": [
                    "str"
                ]
            }
        },
        "Swarm.ping": {
            "name": "ping",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Swarm.count": {
            "name": "count",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "Swarm.start": {
            "name": "start",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "count": [
                    "int"
                ]
            }
        },
        "Swarm.stop": {
            "name": "stop",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "force": [
                    "bool"
                ]
            }
        },
        "Swarm.run": {
            "name": "run",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "target": [
                    "Callable"
                ],
                "args": [
                    "Sequence"
                ],
                "kwargs": [
                    "Mapping"
                ]
            }
        },
        "Swarm.map_lazy": {
            "name": "map_lazy",
            "location": 109,
            "return": [
                "SequenceTaskResult"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Callable"
                ],
                "map_iter": [
                    "Sequence[Any]"
                ]
            }
        },
        "Swarm.map": {
            "name": "map",
            "location": 245,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Swarm.__del__": {
            "name": "__del__",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Swarm.run.wrapper": {
            "name": "wrapper",
            "location": 87,
            "return": [],
            "arguments": {}
        }
    },
    "zproc-master/zproc/task/worker.py": {
        "run_task": {
            "name": "run_task",
            "location": 13,
            "return": [
                "Union[(list, RemoteException)]"
            ],
            "arguments": {
                "target": [
                    "Callable"
                ],
                "task": [
                    "Iterable"
                ],
                "state": [
                    "State"
                ]
            }
        },
        "worker_process": {
            "name": "worker_process",
            "location": 28,
            "return": [],
            "arguments": {
                "server_address": [
                    "str"
                ],
                "send_conn": []
            }
        },
        "run_task.target_with_state": {
            "name": "target_with_state",
            "location": 20,
            "return": [],
            "arguments": {}
        }
    },
    "zproc-master/zproc/task/__init__.py": {}
}
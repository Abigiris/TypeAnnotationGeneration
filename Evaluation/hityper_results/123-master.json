{
    "123-master/conftest.py": {
        "pytest_runtest_setup": {
            "name": "pytest_runtest_setup",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "item": [
                    "int",
                    "dict[str, typing.Any]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "pytest_runtest_teardown": {
            "name": "pytest_runtest_teardown",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "item": [
                    "int",
                    "dict[str, typing.Any]",
                    "None",
                    "list[str]"
                ],
                "nextitem": [
                    "int",
                    "dict[str, typing.Any]",
                    "None",
                    "list[str]"
                ]
            }
        }
    },
    "123-master/setup.py": {
        "version": {
            "name": "version",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "requirements": {
            "name": "requirements",
            "location": 20,
            "return": [],
            "arguments": {}
        }
    },
    "123-master/docs/conf.py": {
        "get_version": {
            "name": "get_version",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "Mock.__getattr__": {
            "name": "__getattr__",
            "location": 25,
            "return": [
                "MagicMock"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Type",
                    "bool"
                ],
                "name": [
                    "str",
                    "typing.Type",
                    "bool"
                ]
            }
        }
    },
    "123-master/examples/aggregation.py": {
        "Tournament.__str__": {
            "name": "__str__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Event.__str__": {
            "name": "__str__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Team.__str__": {
            "name": "__str__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "123-master/examples/basic.py": {
        "Event.__str__": {
            "name": "__str__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "123-master/examples/basic_comments.py": {
        "Event.__str__": {
            "name": "__str__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "123-master/examples/complex_filtering.py": {
        "Tournament.__str__": {
            "name": "__str__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Event.__str__": {
            "name": "__str__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Team.__str__": {
            "name": "__str__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "123-master/examples/complex_prefetching.py": {
        "Tournament.__str__": {
            "name": "__str__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Event.__str__": {
            "name": "__str__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Team.__str__": {
            "name": "__str__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "123-master/examples/postgres.py": {
        "Report.__str__": {
            "name": "__str__",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "123-master/examples/relations.py": {
        "Tournament.__str__": {
            "name": "__str__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Event.__str__": {
            "name": "__str__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Team.__str__": {
            "name": "__str__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "123-master/examples/schema_create.py": {
        "generate_token": {
            "name": "generate_token",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "Tournament.__str__": {
            "name": "__str__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Event.__str__": {
            "name": "__str__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Team.__str__": {
            "name": "__str__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "123-master/examples/transactions.py": {
        "Event.__str__": {
            "name": "__str__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "123-master/examples/two_databases.py": {
        "Tournament.__str__": {
            "name": "__str__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Event.__str__": {
            "name": "__str__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Team.__str__": {
            "name": "__str__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "123-master/examples/__init__.py": {},
    "123-master/examples/quart/main.py": {},
    "123-master/examples/quart/models.py": {
        "Users.__str__": {
            "name": "__str__",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Workers.__str__": {
            "name": "__str__",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "123-master/examples/quart/__init__.py": {},
    "123-master/tortoise/aggregation.py": {
        "Aggregate.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "int",
                    "list[int]",
                    "dict[, ]",
                    "str",
                    "frozenset",
                    "typing.AbstractSet"
                ]
            }
        },
        "Aggregate._resolve_field_for_model": {
            "name": "_resolve_field_for_model",
            "location": 20,
            "return": [
                "dict[typing.Text, list[tuple[typing.Union[Table,str]]]]"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ],
                "model": [
                    "str",
                    "tuple[typing.Type]",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "Aggregate.resolve": {
            "name": "resolve",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "model": [
                    "int",
                    "list[dict[str, typing.Any]]",
                    "dict[, ]"
                ]
            }
        }
    },
    "123-master/tortoise/exceptions.py": {},
    "123-master/tortoise/fields.py": {
        "Field.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "None"
                ],
                "source_field": [
                    "None"
                ],
                "generated": [
                    "bool"
                ],
                "pk": [
                    "bool"
                ],
                "null": [
                    "bool"
                ],
                "default": [
                    "None"
                ],
                "unique": [
                    "bool"
                ],
                "index": [
                    "bool"
                ],
                "reference": [
                    "None"
                ],
                "model": [
                    "None"
                ],
                "description": [
                    "None"
                ]
            }
        },
        "Field.to_db_value": {
            "name": "to_db_value",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "instance": []
            }
        },
        "Field.to_python_value": {
            "name": "to_python_value",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Field.required": {
            "name": "required",
            "location": 88,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntField.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pk": [
                    "bool"
                ]
            }
        },
        "BigIntField.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pk": [
                    "bool"
                ]
            }
        },
        "SmallIntField.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharField.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_length": []
            }
        },
        "TextField.__init__": {
            "name": "__init__",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BooleanField.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecimalField.__init__": {
            "name": "__init__",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_digits": [],
                "decimal_places": []
            }
        },
        "DatetimeField.__init__": {
            "name": "__init__",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auto_now": [
                    "bool"
                ],
                "auto_now_add": [
                    "bool"
                ]
            }
        },
        "DatetimeField.to_python_value": {
            "name": "to_python_value",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "DatetimeField.to_db_value": {
            "name": "to_db_value",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "instance": []
            }
        },
        "DateField.__init__": {
            "name": "__init__",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateField.to_python_value": {
            "name": "to_python_value",
            "location": 247,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "TimeDeltaField.__init__": {
            "name": "__init__",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeDeltaField.to_python_value": {
            "name": "to_python_value",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "TimeDeltaField.to_db_value": {
            "name": "to_db_value",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "instance": []
            }
        },
        "FloatField.__init__": {
            "name": "__init__",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONField.__init__": {
            "name": "__init__",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoder": [],
                "decoder": []
            }
        },
        "JSONField.to_db_value": {
            "name": "to_db_value",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "instance": []
            }
        },
        "JSONField.to_python_value": {
            "name": "to_python_value",
            "location": 309,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "UUIDField.__init__": {
            "name": "__init__",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UUIDField.to_db_value": {
            "name": "to_db_value",
            "location": 332,
            "return": [
                "None",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "instance": []
            }
        },
        "UUIDField.to_python_value": {
            "name": "to_python_value",
            "location": 337,
            "return": [
                "UUID"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ForeignKeyField.__init__": {
            "name": "__init__",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_name": [],
                "related_name": [
                    "None"
                ],
                "on_delete": [
                    "typing.Text"
                ]
            }
        },
        "ManyToManyField.__init__": {
            "name": "__init__",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_name": [],
                "through": [
                    "None"
                ],
                "forward_key": [
                    "None"
                ],
                "backward_key": [
                    "typing.Text"
                ],
                "related_name": [
                    "typing.Text"
                ]
            }
        },
        "BackwardFKRelation.__init__": {
            "name": "__init__",
            "location": 451,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [],
                "relation_field": []
            }
        },
        "RelationQueryContainer.__init__": {
            "name": "__init__",
            "location": 470,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "relation_field": [],
                "instance": []
            }
        },
        "RelationQueryContainer._query": {
            "name": "_query",
            "location": 479,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelationQueryContainer.__contains__": {
            "name": "__contains__",
            "location": 486,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "RelationQueryContainer.__iter__": {
            "name": "__iter__",
            "location": 493,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelationQueryContainer.__len__": {
            "name": "__len__",
            "location": 500,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelationQueryContainer.__bool__": {
            "name": "__bool__",
            "location": 507,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelationQueryContainer.__getitem__": {
            "name": "__getitem__",
            "location": 514,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "RelationQueryContainer.__await__": {
            "name": "__await__",
            "location": 521,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelationQueryContainer.__aiter__": {
            "name": "__aiter__",
            "location": 524,
            "return": [
                "QueryAsyncIterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelationQueryContainer.filter": {
            "name": "filter",
            "location": 531,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelationQueryContainer.all": {
            "name": "all",
            "location": 537,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelationQueryContainer.order_by": {
            "name": "order_by",
            "location": 543,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelationQueryContainer.limit": {
            "name": "limit",
            "location": 549,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelationQueryContainer.offset": {
            "name": "offset",
            "location": 555,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelationQueryContainer._set_result_for_query": {
            "name": "_set_result_for_query",
            "location": 561,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sequence": []
            }
        },
        "ManyToManyRelationManager.__init__": {
            "name": "__init__",
            "location": 573,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "instance": [],
                "m2m_field": []
            }
        }
    },
    "123-master/tortoise/filters.py": {
        "list_encoder": {
            "name": "list_encoder",
            "location": 12,
            "return": [
                "list[]"
            ],
            "arguments": {
                "values": [],
                "instance": [
                    "typing.Iterable[typing.Any]",
                    "typing.Sequence[str]",
                    "bool"
                ],
                "field": [
                    "typing.Iterable[typing.Any]",
                    "typing.Sequence[str]",
                    "bool"
                ]
            }
        },
        "related_list_encoder": {
            "name": "related_list_encoder",
            "location": 17,
            "return": [
                "list[]"
            ],
            "arguments": {
                "values": [],
                "instance": [
                    "typing.Iterable[typing.Any]",
                    "typing.Sequence[str]",
                    "typing.Type"
                ],
                "field": [
                    "typing.Iterable[typing.Any]",
                    "typing.Sequence[str]",
                    "typing.Type"
                ]
            }
        },
        "bool_encoder": {
            "name": "bool_encoder",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "typing.Iterable[typing.Any]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "string_encoder": {
            "name": "string_encoder",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "float",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "is_in": {
            "name": "is_in",
            "location": 32,
            "return": [],
            "arguments": {
                "field": [],
                "value": [
                    "str",
                    "dict[, ]",
                    "list[tuple[typing.Union[str,str]]]"
                ]
            }
        },
        "not_in": {
            "name": "not_in",
            "location": 36,
            "return": [],
            "arguments": {
                "field": [],
                "value": [
                    "typing.Sequence[str]",
                    "str"
                ]
            }
        },
        "not_equal": {
            "name": "not_equal",
            "location": 40,
            "return": [],
            "arguments": {
                "field": [],
                "value": [
                    "str",
                    "typing.Sequence[str]",
                    "bool"
                ]
            }
        },
        "is_null": {
            "name": "is_null",
            "location": 44,
            "return": [],
            "arguments": {
                "field": [],
                "value": [
                    "int",
                    "str",
                    "dict[str, typing.Any]",
                    "list[]",
                    "typing.Pattern"
                ]
            }
        },
        "not_null": {
            "name": "not_null",
            "location": 51,
            "return": [],
            "arguments": {
                "field": [],
                "value": [
                    "str",
                    "bool",
                    "list[]",
                    "list[list[]]"
                ]
            }
        },
        "contains": {
            "name": "contains",
            "location": 58,
            "return": [],
            "arguments": {
                "field": [
                    "str",
                    "typing.Match",
                    "list[str]",
                    "float"
                ],
                "value": [
                    "str",
                    "typing.Match",
                    "list[str]",
                    "float"
                ]
            }
        },
        "starts_with": {
            "name": "starts_with",
            "location": 62,
            "return": [],
            "arguments": {
                "field": [
                    "str",
                    "list[str]"
                ],
                "value": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "ends_with": {
            "name": "ends_with",
            "location": 66,
            "return": [],
            "arguments": {
                "field": [
                    "str",
                    "typing.Match",
                    "list[str]",
                    "float"
                ],
                "value": [
                    "str",
                    "typing.Match",
                    "list[str]",
                    "float"
                ]
            }
        },
        "insensitive_contains": {
            "name": "insensitive_contains",
            "location": 70,
            "return": [],
            "arguments": {
                "field": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "insensitive_starts_with": {
            "name": "insensitive_starts_with",
            "location": 76,
            "return": [],
            "arguments": {
                "field": [
                    "str",
                    "int",
                    "float"
                ],
                "value": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "insensitive_ends_with": {
            "name": "insensitive_ends_with",
            "location": 82,
            "return": [],
            "arguments": {
                "field": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "get_m2m_filters": {
            "name": "get_m2m_filters",
            "location": 88,
            "return": [
                "dict[typing.Union[str,int,None,dict[, ]], dict[typing.Text, Table]]"
            ],
            "arguments": {
                "field_name": [
                    "str",
                    "int",
                    "None",
                    "dict[, ]"
                ],
                "field": [
                    "str"
                ]
            }
        },
        "get_backward_fk_filters": {
            "name": "get_backward_fk_filters",
            "location": 122,
            "return": [
                "dict[str, dict[typing.Text, typing.Union[typing.Text,Table]]]"
            ],
            "arguments": {
                "field_name": [
                    "str"
                ],
                "field": [
                    "str",
                    "typing.Sequence[str]",
                    "None"
                ]
            }
        },
        "get_filters_for_field": {
            "name": "get_filters_for_field",
            "location": 156,
            "return": [
                "dict[str, dict[typing.Text, typing.Union[str,None,Exception]]]"
            ],
            "arguments": {
                "field_name": [
                    "str"
                ],
                "field": [
                    "None",
                    "str",
                    "typing.Iterable[]"
                ],
                "source_field": [
                    "str",
                    "None",
                    "Exception"
                ]
            }
        }
    },
    "123-master/tortoise/models.py": {
        "get_unique_together": {
            "name": "get_unique_together",
            "location": 23,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "meta": []
            }
        },
        "MetaInfo.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "meta": []
            }
        },
        "MetaInfo.add_field": {
            "name": "add_field",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "MetaInfo.db": {
            "name": "db",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MetaInfo.get_filter": {
            "name": "get_filter",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "MetaInfo.finalise_pk": {
            "name": "finalise_pk",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaInfo.finalise_model": {
            "name": "finalise_model",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaInfo.finalise_fields": {
            "name": "finalise_fields",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaInfo._generate_filters": {
            "name": "_generate_filters",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelMeta.__new__": {
            "name": "__new__",
            "location": 162,
            "return": [],
            "arguments": {
                "mcs": [],
                "name": [],
                "bases": [],
                "attrs": []
            }
        },
        "Model.__init__": {
            "name": "__init__",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model._init_from_db": {
            "name": "_init_from_db",
            "location": 306,
            "return": [
                "Model"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Model._init_lazy_fkm2m": {
            "name": "_init_lazy_fkm2m",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model._set_field_values": {
            "name": "_set_field_values",
            "location": 344,
            "return": [
                "set[str]"
            ],
            "arguments": {
                "self": [],
                "values_map": []
            }
        },
        "Model.__str__": {
            "name": "__str__",
            "location": 382,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.__repr__": {
            "name": "__repr__",
            "location": 385,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.__hash__": {
            "name": "__hash__",
            "location": 390,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.__eq__": {
            "name": "__eq__",
            "location": 395,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Model._get_pk_val": {
            "name": "_get_pk_val",
            "location": 401,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model._set_pk_val": {
            "name": "_set_pk_val",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Model.first": {
            "name": "first",
            "location": 514,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Model.filter": {
            "name": "filter",
            "location": 521,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Model.exclude": {
            "name": "exclude",
            "location": 528,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Model.annotate": {
            "name": "annotate",
            "location": 535,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Model.all": {
            "name": "all",
            "location": 539,
            "return": [
                "QuerySet"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Model.get": {
            "name": "get",
            "location": 546,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Model.check": {
            "name": "check",
            "location": 565,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Model._check_unique_together": {
            "name": "_check_unique_together",
            "location": 574,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ModelMeta.__new__.__search_for_field_attributes": {
            "name": "__search_for_field_attributes",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "base": [],
                "attrs": []
            }
        }
    },
    "123-master/tortoise/queryset.py": {
        "AwaitableQuery.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "AwaitableQuery.resolve_filters": {
            "name": "resolve_filters",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "q_objects": [],
                "annotations": [],
                "custom_filters": []
            }
        },
        "AwaitableQuery._join_table_by_field": {
            "name": "_join_table_by_field",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [],
                "related_field_name": [],
                "related_field": []
            }
        },
        "AwaitableQuery.resolve_ordering": {
            "name": "resolve_ordering",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "orderings": [],
                "annotations": []
            }
        },
        "AwaitableQuery._make_query": {
            "name": "_make_query",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AwaitableQuery.__await__": {
            "name": "__await__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AwaitableQuery.__aiter__": {
            "name": "__aiter__",
            "location": 84,
            "return": [
                "QueryAsyncIterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "QuerySet._clone": {
            "name": "_clone",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet._filter_or_exclude": {
            "name": "_filter_or_exclude",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.filter": {
            "name": "filter",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.exclude": {
            "name": "exclude",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.order_by": {
            "name": "order_by",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.limit": {
            "name": "limit",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "limit": []
            }
        },
        "QuerySet.offset": {
            "name": "offset",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "offset": []
            }
        },
        "QuerySet.distinct": {
            "name": "distinct",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.annotate": {
            "name": "annotate",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.values_list": {
            "name": "values_list",
            "location": 264,
            "return": [
                "ValuesListQuery"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.values": {
            "name": "values",
            "location": 285,
            "return": [
                "ValuesQuery"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.delete": {
            "name": "delete",
            "location": 313,
            "return": [
                "DeleteQuery"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.update": {
            "name": "update",
            "location": 325,
            "return": [
                "UpdateQuery"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.count": {
            "name": "count",
            "location": 338,
            "return": [
                "CountQuery"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.all": {
            "name": "all",
            "location": 350,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.first": {
            "name": "first",
            "location": 357,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.get": {
            "name": "get",
            "location": 366,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.prefetch_related": {
            "name": "prefetch_related",
            "location": 375,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.using_db": {
            "name": "using_db",
            "location": 421,
            "return": [],
            "arguments": {
                "self": [],
                "_db": []
            }
        },
        "QuerySet._resolve_annotate": {
            "name": "_resolve_annotate",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuerySet._make_query": {
            "name": "_make_query",
            "location": 441,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UpdateQuery.__init__": {
            "name": "__init__",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "update_kwargs": [],
                "db": [],
                "q_objects": [],
                "annotations": [],
                "custom_filters": []
            }
        },
        "UpdateQuery._make_query": {
            "name": "_make_query",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeleteQuery.__init__": {
            "name": "__init__",
            "location": 520,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "db": [],
                "q_objects": [],
                "annotations": [],
                "custom_filters": []
            }
        },
        "DeleteQuery._make_query": {
            "name": "_make_query",
            "location": 527,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CountQuery.__init__": {
            "name": "__init__",
            "location": 544,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "db": [],
                "q_objects": [],
                "annotations": [],
                "custom_filters": []
            }
        },
        "CountQuery._make_query": {
            "name": "_make_query",
            "location": 551,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldSelectQuery._join_table_with_forwarded_fields": {
            "name": "_join_table_with_forwarded_fields",
            "location": 570,
            "return": [
                "tuple[Table]"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "field": [],
                "forwarded_fields": []
            }
        },
        "FieldSelectQuery.add_field_to_select_query": {
            "name": "add_field_to_select_query",
            "location": 600,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [],
                "return_as": []
            }
        },
        "FieldSelectQuery.resolve_to_python_value": {
            "name": "resolve_to_python_value",
            "location": 623,
            "return": [
                "typing.Callable[, ]"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "field": []
            }
        },
        "ValuesListQuery.__init__": {
            "name": "__init__",
            "location": 653,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "db": [],
                "q_objects": [],
                "fields_for_select_list": [],
                "limit": [],
                "offset": [],
                "distinct": [],
                "orderings": [],
                "flat": [],
                "annotations": [],
                "custom_filters": []
            }
        },
        "ValuesListQuery._make_query": {
            "name": "_make_query",
            "location": 684,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValuesQuery.__init__": {
            "name": "__init__",
            "location": 727,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "db": [],
                "q_objects": [],
                "fields_for_select": [],
                "limit": [],
                "offset": [],
                "distinct": [],
                "orderings": [],
                "annotations": [],
                "custom_filters": []
            }
        },
        "ValuesQuery._make_query": {
            "name": "_make_query",
            "location": 751,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "123-master/tortoise/query_utils.py": {
        "_process_filter_kwarg": {
            "name": "_process_filter_kwarg",
            "location": 11,
            "return": [
                "tuple[typing.Optional[tuple[bool]]]"
            ],
            "arguments": {
                "model": [],
                "key": [],
                "value": []
            }
        },
        "_get_joins_for_related_field": {
            "name": "_get_joins_for_related_field",
            "location": 41,
            "return": [
                "list[tuple[typing.Union[Table,bool]]]"
            ],
            "arguments": {
                "table": [],
                "related_field": [],
                "related_field_name": []
            }
        },
        "_and": {
            "name": "_and",
            "location": 100,
            "return": [],
            "arguments": {
                "left": [],
                "right": []
            }
        },
        "_or": {
            "name": "_or",
            "location": 106,
            "return": [],
            "arguments": {
                "left": [],
                "right": []
            }
        },
        "EmptyCriterion.__or__": {
            "name": "__or__",
            "location": 86,
            "return": [
                "EmptyCriterion"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "EmptyCriterion.__and__": {
            "name": "__and__",
            "location": 91,
            "return": [
                "EmptyCriterion"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "EmptyCriterion.__bool__": {
            "name": "__bool__",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryModifier.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "where_criterion": [
                    "None"
                ],
                "joins": [
                    "None"
                ],
                "having_criterion": [
                    "None"
                ]
            }
        },
        "QueryModifier.__and__": {
            "name": "__and__",
            "location": 123,
            "return": [
                "QueryModifier"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "QueryModifier.__or__": {
            "name": "__or__",
            "location": 130,
            "return": [
                "QueryModifier"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "QueryModifier.__invert__": {
            "name": "__invert__",
            "location": 144,
            "return": [
                "QueryModifier"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryModifier.get_query_modifiers": {
            "name": "get_query_modifiers",
            "location": 154,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Q.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Q.__and__": {
            "name": "__and__",
            "location": 185,
            "return": [
                "Q"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Q.__or__": {
            "name": "__or__",
            "location": 190,
            "return": [
                "Q"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Q.__invert__": {
            "name": "__invert__",
            "location": 195,
            "return": [
                "Q"
            ],
            "arguments": {
                "self": []
            }
        },
        "Q.negate": {
            "name": "negate",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Q._resolve_nested_filter": {
            "name": "_resolve_nested_filter",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "key": [],
                "value": []
            }
        },
        "Q._resolve_custom_kwarg": {
            "name": "_resolve_custom_kwarg",
            "location": 217,
            "return": [
                "QueryModifier"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "key": [],
                "value": []
            }
        },
        "Q._resolve_regular_kwarg": {
            "name": "_resolve_regular_kwarg",
            "location": 229,
            "return": [
                "QueryModifier"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "key": [],
                "value": []
            }
        },
        "Q._get_actual_filter_params": {
            "name": "_get_actual_filter_params",
            "location": 238,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "key": [],
                "value": []
            }
        },
        "Q._resolve_kwargs": {
            "name": "_resolve_kwargs",
            "location": 268,
            "return": [
                "QueryModifier",
                "int"
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "Q._resolve_children": {
            "name": "_resolve_children",
            "location": 285,
            "return": [
                "QueryModifier",
                "int"
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "Q.resolve": {
            "name": "resolve",
            "location": 298,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "annotations": [],
                "custom_filters": []
            }
        },
        "Prefetch.__init__": {
            "name": "__init__",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "relation": [],
                "queryset": []
            }
        },
        "Prefetch.resolve_for_queryset": {
            "name": "resolve_for_queryset",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "queryset": []
            }
        }
    },
    "123-master/tortoise/transactions.py": {
        "_get_connection": {
            "name": "_get_connection",
            "location": 10,
            "return": [
                "dict[, ]",
                "str"
            ],
            "arguments": {
                "connection_name": [
                    "str",
                    "None",
                    "list[str]",
                    "list[]"
                ]
            }
        },
        "in_transaction": {
            "name": "in_transaction",
            "location": 25,
            "return": [],
            "arguments": {
                "connection_name": [
                    "None",
                    "str",
                    "list[str]"
                ]
            }
        },
        "atomic": {
            "name": "atomic",
            "location": 39,
            "return": [],
            "arguments": {
                "connection_name": [
                    "None",
                    "str",
                    "list[str]",
                    "typing.Any",
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "atomic.wrapper": {
            "name": "wrapper",
            "location": 50,
            "return": [],
            "arguments": {
                "func": []
            }
        }
    },
    "123-master/tortoise/utils.py": {
        "get_schema_sql": {
            "name": "get_schema_sql",
            "location": 28,
            "return": [],
            "arguments": {
                "client": [],
                "safe": [
                    "bool",
                    "str"
                ]
            }
        },
        "generate_post_table_sql": {
            "name": "generate_post_table_sql",
            "location": 33,
            "return": [],
            "arguments": {
                "client": [],
                "safe": [
                    "bool",
                    "str",
                    "typing.Mapping",
                    "dict[, ]"
                ]
            }
        },
        "get_escape_translation_table": {
            "name": "get_escape_translation_table",
            "location": 46,
            "return": [
                "list[str]"
            ],
            "arguments": {}
        },
        "QueryAsyncIterator.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "int",
                    "None",
                    "str"
                ],
                "callback": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "QueryAsyncIterator.__aiter__": {
            "name": "__aiter__",
            "location": 13,
            "return": [
                "QueryAsyncIterator"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "123-master/tortoise/__init__.py": {
        "run_async": {
            "name": "run_async",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "coro": []
            }
        },
        "Tortoise.get_connection": {
            "name": "get_connection",
            "location": 35,
            "return": [],
            "arguments": {
                "cls": [],
                "connection_name": []
            }
        },
        "Tortoise._init_relations": {
            "name": "_init_relations",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Tortoise._discover_client_class": {
            "name": "_discover_client_class",
            "location": 184,
            "return": [],
            "arguments": {
                "cls": [],
                "engine": []
            }
        },
        "Tortoise._discover_models": {
            "name": "_discover_models",
            "location": 197,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [],
                "models_path": [],
                "app_label": []
            }
        },
        "Tortoise._init_apps": {
            "name": "_init_apps",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "apps_config": []
            }
        },
        "Tortoise._get_config_from_config_file": {
            "name": "_get_config_from_config_file",
            "location": 261,
            "return": [],
            "arguments": {
                "cls": [],
                "config_file": []
            }
        },
        "Tortoise._build_initial_querysets": {
            "name": "_build_initial_querysets",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Tortoise._init_relations.get_related_model": {
            "name": "get_related_model",
            "location": 45,
            "return": [],
            "arguments": {
                "related_app_name": [],
                "related_model_name": []
            }
        },
        "Tortoise._init_relations.split_reference": {
            "name": "split_reference",
            "location": 64,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "reference": []
            }
        }
    },
    "123-master/tortoise/backends/__init__.py": {},
    "123-master/tortoise/backends/asyncpg/client.py": {
        "retry_connection": {
            "name": "retry_connection",
            "location": 26,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "translate_exceptions": {
            "name": "translate_exceptions",
            "location": 59,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "AsyncpgDBClient.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "password": [],
                "database": [],
                "host": [],
                "port": []
            }
        },
        "AsyncpgDBClient.acquire_connection": {
            "name": "acquire_connection",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AsyncpgDBClient._in_transaction": {
            "name": "_in_transaction",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransactionWrapper.__init__": {
            "name": "__init__",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "connection": []
            }
        },
        "TransactionWrapper.release": {
            "name": "release",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "123-master/tortoise/backends/asyncpg/executor.py": {
        "AsyncpgExecutor._prepare_insert_statement": {
            "name": "_prepare_insert_statement",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "columns": []
            }
        }
    },
    "123-master/tortoise/backends/asyncpg/schema_generator.py": {
        "AsyncpgSchemaGenerator.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncpgSchemaGenerator._get_primary_key_create_string": {
            "name": "_get_primary_key_create_string",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "AsyncpgSchemaGenerator._escape_comment": {
            "name": "_escape_comment",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "comment": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "AsyncpgSchemaGenerator._table_comment_generator": {
            "name": "_table_comment_generator",
            "location": 23,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str",
                    "dict[, ]",
                    "list[tuple[typing.Union[str,str]]]",
                    "bool"
                ],
                "comments_array": [
                    "list[]"
                ]
            }
        },
        "AsyncpgSchemaGenerator._column_comment_generator": {
            "name": "_column_comment_generator",
            "location": 32,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str",
                    "dict[, ]",
                    "Exception",
                    "typing.Type"
                ],
                "field": [
                    "str",
                    "typing.Sequence[typing.Any]",
                    "dict[, ]"
                ],
                "comments_array": [
                    "list[]",
                    "list[str]",
                    "typing.Callable[[], None]",
                    "str"
                ]
            }
        },
        "AsyncpgSchemaGenerator._post_table_hook": {
            "name": "_post_table_hook",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "123-master/tortoise/backends/asyncpg/__init__.py": {},
    "123-master/tortoise/backends/base/client.py": {
        "Capabilities.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dialect": [
                    "bool",
                    "typing.Callable[, ]",
                    "float",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Capabilities.__setattr__": {
            "name": "__setattr__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "Capabilities.__str__": {
            "name": "__str__",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDBAsyncClient.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection_name": [
                    "str"
                ],
                "fetch_inserted": [
                    "bool"
                ]
            }
        },
        "BaseDBAsyncClient.acquire_connection": {
            "name": "acquire_connection",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDBAsyncClient._in_transaction": {
            "name": "_in_transaction",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionWrapper.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "int",
                    "float"
                ],
                "lock": [
                    "int",
                    "float"
                ]
            }
        },
        "BaseTransactionWrapper.release": {
            "name": "release",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "123-master/tortoise/backends/base/config_generator.py": {
        "expand_db_url": {
            "name": "expand_db_url",
            "location": 62,
            "return": [],
            "arguments": {
                "db_url": [
                    "bool",
                    "str"
                ],
                "testing": [
                    "bool"
                ]
            }
        },
        "generate_config": {
            "name": "generate_config",
            "location": 116,
            "return": [
                "dict[typing.Text, typing.Union[dict[typing.Union[None,str,list[str]], ],dict[tuple[typing.Union[str,list[str]]], dict[typing.Text, typing.Union[tuple[typing.Union[str,list[str]]],None,str,list[str]]]]]]"
            ],
            "arguments": {
                "db_url": [
                    "str",
                    "dict[str, list[str]]",
                    "bool",
                    "list[str]"
                ],
                "app_modules": [
                    "dict[str, list[str]]"
                ],
                "connection_label": [
                    "None",
                    "str",
                    "list[str]"
                ],
                "testing": [
                    "bool"
                ]
            }
        }
    },
    "123-master/tortoise/backends/base/executor.py": {
        "BaseExecutor.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "db": [
                    "None"
                ],
                "prefetch_map": [
                    "None"
                ],
                "prefetch_queries": [
                    "None"
                ]
            }
        },
        "BaseExecutor._prepare_insert_columns": {
            "name": "_prepare_insert_columns",
            "location": 62,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseExecutor._field_to_db": {
            "name": "_field_to_db",
            "location": 72,
            "return": [],
            "arguments": {
                "cls": [],
                "field_object": [],
                "attr": [],
                "instance": []
            }
        },
        "BaseExecutor._prepare_insert_statement": {
            "name": "_prepare_insert_statement",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "columns": []
            }
        },
        "BaseExecutor._make_prefetch_queries": {
            "name": "_make_prefetch_queries",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseExecutor.get_overridden_filter_func": {
            "name": "get_overridden_filter_func",
            "location": 290,
            "return": [],
            "arguments": {
                "cls": [],
                "filter_func": []
            }
        }
    },
    "123-master/tortoise/backends/base/schema_generator.py": {
        "BaseSchemaGenerator.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "BaseSchemaGenerator._create_string": {
            "name": "_create_string",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "db_field": [],
                "field_type": [],
                "nullable": [],
                "unique": [],
                "is_pk": [],
                "comment": []
            }
        },
        "BaseSchemaGenerator._get_primary_key_create_string": {
            "name": "_get_primary_key_create_string",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field_name": []
            }
        },
        "BaseSchemaGenerator._table_comment_generator": {
            "name": "_table_comment_generator",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "comments_array": []
            }
        },
        "BaseSchemaGenerator._column_comment_generator": {
            "name": "_column_comment_generator",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "field": [],
                "comments_array": []
            }
        },
        "BaseSchemaGenerator._post_table_hook": {
            "name": "_post_table_hook",
            "location": 76,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSchemaGenerator._escape_comment": {
            "name": "_escape_comment",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "comment": []
            }
        },
        "BaseSchemaGenerator._make_hash": {
            "name": "_make_hash",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "BaseSchemaGenerator._generate_index_name": {
            "name": "_generate_index_name",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "field_names": []
            }
        },
        "BaseSchemaGenerator._get_index_sql": {
            "name": "_get_index_sql",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "field_names": [],
                "safe": []
            }
        },
        "BaseSchemaGenerator._get_unique_constraint_sql": {
            "name": "_get_unique_constraint_sql",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "field_names": []
            }
        },
        "BaseSchemaGenerator._get_field_type": {
            "name": "_get_field_type",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "field_object": []
            }
        },
        "BaseSchemaGenerator._get_table_sql": {
            "name": "_get_table_sql",
            "location": 133,
            "return": [
                "dict[typing.Text, typing.Union[str,set[],list[]]]"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "safe": [
                    "bool"
                ]
            }
        },
        "BaseSchemaGenerator._get_models_to_create": {
            "name": "_get_models_to_create",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "models_to_create": []
            }
        },
        "BaseSchemaGenerator.get_create_schema_sql": {
            "name": "get_create_schema_sql",
            "location": 260,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "safe": [
                    "bool"
                ]
            }
        },
        "BaseSchemaGenerator.generate_post_table_hook_sql": {
            "name": "generate_post_table_hook_sql",
            "location": 293,
            "return": [],
            "arguments": {
                "self": [],
                "safe": [
                    "bool"
                ]
            }
        }
    },
    "123-master/tortoise/backends/base/__init__.py": {},
    "123-master/tortoise/backends/mysql/client.py": {
        "retry_connection": {
            "name": "retry_connection",
            "location": 27,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "translate_exceptions": {
            "name": "translate_exceptions",
            "location": 59,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "MySQLClient.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MySQLClient.acquire_connection": {
            "name": "acquire_connection",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MySQLClient._in_transaction": {
            "name": "_in_transaction",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransactionWrapper.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "connection": []
            }
        },
        "TransactionWrapper.release": {
            "name": "release",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "123-master/tortoise/backends/mysql/executor.py": {
        "mysql_contains": {
            "name": "mysql_contains",
            "location": 19,
            "return": [],
            "arguments": {
                "field": [
                    "str",
                    "typing.Match",
                    "list[str]",
                    "float"
                ],
                "value": [
                    "str",
                    "typing.Match",
                    "list[str]",
                    "float"
                ]
            }
        },
        "mysql_starts_with": {
            "name": "mysql_starts_with",
            "location": 23,
            "return": [],
            "arguments": {
                "field": [
                    "str",
                    "typing.Match",
                    "list[str]"
                ],
                "value": [
                    "str",
                    "typing.Match",
                    "list[str]"
                ]
            }
        },
        "mysql_ends_with": {
            "name": "mysql_ends_with",
            "location": 27,
            "return": [],
            "arguments": {
                "field": [
                    "str",
                    "typing.Match",
                    "list[str]",
                    "float"
                ],
                "value": [
                    "str",
                    "typing.Match",
                    "list[str]",
                    "float"
                ]
            }
        },
        "mysql_insensitive_contains": {
            "name": "mysql_insensitive_contains",
            "location": 31,
            "return": [],
            "arguments": {
                "field": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "mysql_insensitive_starts_with": {
            "name": "mysql_insensitive_starts_with",
            "location": 37,
            "return": [],
            "arguments": {
                "field": [
                    "str",
                    "typing.Callable[, ]",
                    "float",
                    "list[str]"
                ],
                "value": [
                    "str",
                    "typing.Callable[, ]",
                    "float",
                    "list[str]"
                ]
            }
        },
        "mysql_insensitive_ends_with": {
            "name": "mysql_insensitive_ends_with",
            "location": 43,
            "return": [],
            "arguments": {
                "field": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "MySQLExecutor._prepare_insert_statement": {
            "name": "_prepare_insert_statement",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "columns": []
            }
        }
    },
    "123-master/tortoise/backends/mysql/schema_generator.py": {
        "MySQLSchemaGenerator.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MySQLSchemaGenerator._get_primary_key_create_string": {
            "name": "_get_primary_key_create_string",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "MySQLSchemaGenerator._table_comment_generator": {
            "name": "_table_comment_generator",
            "location": 35,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str",
                    "None"
                ],
                "comments_array": [
                    "None",
                    "list[]",
                    "str",
                    "bool",
                    "list[dict[str, typing.Any]]",
                    "list[str]"
                ]
            }
        },
        "MySQLSchemaGenerator._column_comment_generator": {
            "name": "_column_comment_generator",
            "location": 41,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "list[]",
                    "list[str]",
                    "bool"
                ],
                "field": [
                    "str",
                    "typing.Container",
                    "int",
                    "None",
                    "dict[, ]"
                ],
                "comments_array": [
                    "list[]",
                    "list[str]",
                    "bool"
                ]
            }
        }
    },
    "123-master/tortoise/backends/mysql/__init__.py": {},
    "123-master/tortoise/backends/sqlite/client.py": {
        "translate_exceptions": {
            "name": "translate_exceptions",
            "location": 22,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "SqliteClient.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "SqliteClient.acquire_connection": {
            "name": "acquire_connection",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SqliteClient._in_transaction": {
            "name": "_in_transaction",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransactionWrapper.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "connection_name": [],
                "connection": [],
                "lock": [],
                "fetch_inserted": []
            }
        },
        "TransactionWrapper.release": {
            "name": "release",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "123-master/tortoise/backends/sqlite/executor.py": {
        "to_db_bool": {
            "name": "to_db_bool",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "instance": []
            }
        },
        "to_db_decimal": {
            "name": "to_db_decimal",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "instance": []
            }
        },
        "to_db_datetime": {
            "name": "to_db_datetime",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "instance": []
            }
        },
        "SqliteExecutor._prepare_insert_statement": {
            "name": "_prepare_insert_statement",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "columns": []
            }
        }
    },
    "123-master/tortoise/backends/sqlite/schema_generator.py": {
        "SqliteSchemaGenerator.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqliteSchemaGenerator._get_primary_key_create_string": {
            "name": "_get_primary_key_create_string",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "SqliteSchemaGenerator._table_comment_generator": {
            "name": "_table_comment_generator",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str",
                    "dict[, ]",
                    "None"
                ],
                "comments_array": [
                    "list[]",
                    "str",
                    "bool",
                    "list[dict[str, typing.Any]]",
                    "list[str]"
                ]
            }
        },
        "SqliteSchemaGenerator._column_comment_generator": {
            "name": "_column_comment_generator",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "list[]",
                    "list[str]",
                    "bool"
                ],
                "field": [
                    "list[str]",
                    "dict[, ]",
                    "str"
                ],
                "comments_array": [
                    "list[]",
                    "list[str]",
                    "bool"
                ]
            }
        }
    },
    "123-master/tortoise/backends/sqlite/__init__.py": {},
    "123-master/tortoise/contrib/__init__.py": {},
    "123-master/tortoise/contrib/pylint/__init__.py": {
        "register": {
            "name": "register",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "linter": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "is_model": {
            "name": "is_model",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": []
            }
        },
        "transform_model": {
            "name": "transform_model",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "is_model_field": {
            "name": "is_model_field",
            "location": 98,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "typing.Type",
                    "list[str]"
                ]
            }
        },
        "apply_type_shim": {
            "name": "apply_type_shim",
            "location": 105,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Type"
                ],
                "_context": [
                    "None",
                    "typing.Type",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "123-master/tortoise/contrib/quart/__init__.py": {
        "register_tortoise": {
            "name": "register_tortoise",
            "location": 13,
            "return": [],
            "arguments": {
                "app": [],
                "config": [],
                "config_file": [],
                "db_url": [],
                "modules": [],
                "generate_schemas": []
            }
        },
        "register_tortoise.generate_schemas": {
            "name": "generate_schemas",
            "location": 93,
            "return": [],
            "arguments": {}
        }
    },
    "123-master/tortoise/contrib/test/nose2.py": {
        "TortoisePlugin.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TortoisePlugin.handleArgs": {
            "name": "handleArgs",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict[str, typing.Any]",
                    "list[str]",
                    "list[dict[, ]]",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "TortoisePlugin.startTestRun": {
            "name": "startTestRun",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "None",
                    "str"
                ]
            }
        },
        "TortoisePlugin.stopTestRun": {
            "name": "stopTestRun",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "list[]"
                ]
            }
        }
    },
    "123-master/tortoise/contrib/test/__init__.py": {
        "getDBConfig": {
            "name": "getDBConfig",
            "location": 48,
            "return": [],
            "arguments": {
                "app_label": [
                    "str",
                    "list[str]",
                    "bool",
                    "None"
                ],
                "modules": [
                    "str",
                    "list[str]",
                    "bool",
                    "None"
                ]
            }
        },
        "_restore_default": {
            "name": "_restore_default",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "initializer": {
            "name": "initializer",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "modules": [
                    "str",
                    "dict[, ]",
                    "None"
                ],
                "db_url": [
                    "None",
                    "str",
                    "tuple[typing.Union[list[str],typing.Any,None]]",
                    "int",
                    "dict[, ]"
                ],
                "loop": [
                    "None",
                    "set[str]",
                    "int"
                ]
            }
        },
        "finalizer": {
            "name": "finalizer",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "env_initializer": {
            "name": "env_initializer",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "requireCapability": {
            "name": "requireCapability",
            "location": 247,
            "return": [],
            "arguments": {
                "connection_name": [
                    "typing.Text"
                ]
            }
        },
        "SimpleTestCase._init_loop": {
            "name": "_init_loop",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleTestCase._setUp": {
            "name": "_setUp",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleTestCase._tearDown": {
            "name": "_tearDown",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "requireCapability.decorator": {
            "name": "decorator",
            "location": 266,
            "return": [],
            "arguments": {
                "test_item": []
            }
        },
        "requireCapability.decorator.skip_wrapper": {
            "name": "skip_wrapper",
            "location": 268,
            "return": [],
            "arguments": {}
        }
    },
    "123-master/tortoise/tests/models_cyclic.py": {},
    "123-master/tortoise/tests/models_dup1.py": {},
    "123-master/tortoise/tests/models_dup2.py": {},
    "123-master/tortoise/tests/models_fk_1.py": {},
    "123-master/tortoise/tests/models_fk_2.py": {},
    "123-master/tortoise/tests/models_fk_3.py": {},
    "123-master/tortoise/tests/models_m2m_1.py": {},
    "123-master/tortoise/tests/model_bad_rel1.py": {},
    "123-master/tortoise/tests/model_bad_rel2.py": {},
    "123-master/tortoise/tests/model_bad_rel3.py": {},
    "123-master/tortoise/tests/model_bad_rel4.py": {},
    "123-master/tortoise/tests/testfields.py": {
        "EnumField.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "enum_type": [
                    "str"
                ]
            }
        },
        "EnumField.to_db_value": {
            "name": "to_db_value",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "None",
                    "typing.Pattern"
                ],
                "instance": [
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "EnumField.to_python_value": {
            "name": "to_python_value",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Exception",
                    "None"
                ]
            }
        }
    },
    "123-master/tortoise/tests/testmodels.py": {
        "generate_token": {
            "name": "generate_token",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "Tournament.__str__": {
            "name": "__str__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Reporter.__str__": {
            "name": "__str__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Event.__str__": {
            "name": "__str__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Team.__str__": {
            "name": "__str__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EventTwo.__str__": {
            "name": "__str__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TeamTwo.__str__": {
            "name": "__str__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "123-master/tortoise/tests/test_aggregation.py": {},
    "123-master/tortoise/tests/test_bad_relation_reference.py": {},
    "123-master/tortoise/tests/test_basic.py": {},
    "123-master/tortoise/tests/test_bulk.py": {},
    "123-master/tortoise/tests/test_capabilities.py": {
        "TestCapabilities.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCapabilities.test_str": {
            "name": "test_str",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCapabilities.test_immutability_1": {
            "name": "test_immutability_1",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCapabilities.test_connection_name": {
            "name": "test_connection_name",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCapabilities.test_actually_runs": {
            "name": "test_actually_runs",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCapabilities.test_attribute_error": {
            "name": "test_attribute_error",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCapabilities.test_dialect_sqlite": {
            "name": "test_dialect_sqlite",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCapabilities.test_dialect_mysql": {
            "name": "test_dialect_mysql",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCapabilities.test_dialect_postgres": {
            "name": "test_dialect_postgres",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "123-master/tortoise/tests/test_concurrency.py": {},
    "123-master/tortoise/tests/test_connection_params.py": {},
    "123-master/tortoise/tests/test_db_url.py": {
        "TestConfigGenerator.test_unknown_scheme": {
            "name": "test_unknown_scheme",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigGenerator.test_sqlite_basic": {
            "name": "test_sqlite_basic",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigGenerator.test_sqlite_relative": {
            "name": "test_sqlite_relative",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigGenerator.test_sqlite_relative_with_subdir": {
            "name": "test_sqlite_relative_with_subdir",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigGenerator.test_sqlite_testing": {
            "name": "test_sqlite_testing",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigGenerator.test_sqlite_params": {
            "name": "test_sqlite_params",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigGenerator.test_sqlite_invalid": {
            "name": "test_sqlite_invalid",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigGenerator.test_postgres_basic": {
            "name": "test_postgres_basic",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigGenerator.test_postgres_no_port": {
            "name": "test_postgres_no_port",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigGenerator.test_postgres_nonint_port": {
            "name": "test_postgres_nonint_port",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigGenerator.test_postgres_testing": {
            "name": "test_postgres_testing",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigGenerator.test_postgres_params": {
            "name": "test_postgres_params",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigGenerator.test_mysql_basic": {
            "name": "test_mysql_basic",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigGenerator.test_mysql_no_port": {
            "name": "test_mysql_no_port",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigGenerator.test_mysql_nonint_port": {
            "name": "test_mysql_nonint_port",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigGenerator.test_mysql_testing": {
            "name": "test_mysql_testing",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigGenerator.test_mysql_params": {
            "name": "test_mysql_params",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigGenerator.test_generate_config_basic": {
            "name": "test_generate_config_basic",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigGenerator.test_generate_config_explicit": {
            "name": "test_generate_config_explicit",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigGenerator.test_generate_config_many_apps": {
            "name": "test_generate_config_many_apps",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "123-master/tortoise/tests/test_explain.py": {},
    "123-master/tortoise/tests/test_field_subclass.py": {},
    "123-master/tortoise/tests/test_filtering.py": {},
    "123-master/tortoise/tests/test_filters.py": {},
    "123-master/tortoise/tests/test_generate_schema.py": {
        "TestGenerateSchema.get_sql": {
            "name": "get_sql",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "TestGenerateSchema.get_post_sql": {
            "name": "get_post_sql",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "TestGenerateSchema.continue_if_safe_indexes": {
            "name": "continue_if_safe_indexes",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "supported": []
            }
        }
    },
    "123-master/tortoise/tests/test_inheritence.py": {},
    "123-master/tortoise/tests/test_init.py": {},
    "123-master/tortoise/tests/test_model_methods.py": {
        "TestModelMethods.test_str": {
            "name": "test_str",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModelMethods.test_repr": {
            "name": "test_repr",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModelMethods.test_hash": {
            "name": "test_hash",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModelMethodsNoID.test_str": {
            "name": "test_str",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModelMethodsNoID.test_repr": {
            "name": "test_repr",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "123-master/tortoise/tests/test_order_by.py": {},
    "123-master/tortoise/tests/test_prefetching.py": {},
    "123-master/tortoise/tests/test_primary_key.py": {},
    "123-master/tortoise/tests/test_q.py": {
        "TestQ.test_q_basic": {
            "name": "test_q_basic",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQ.test_q_compound": {
            "name": "test_q_compound",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQ.test_q_compound_or": {
            "name": "test_q_compound_or",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQ.test_q_compound_and": {
            "name": "test_q_compound_and",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQ.test_q_compound_or_notq": {
            "name": "test_q_compound_or_notq",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQ.test_q_compound_and_notq": {
            "name": "test_q_compound_and_notq",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQ.test_q_both": {
            "name": "test_q_both",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQ.test_q_notq": {
            "name": "test_q_notq",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQ.test_q_bad_join_type": {
            "name": "test_q_bad_join_type",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "123-master/tortoise/tests/test_queryset.py": {},
    "123-master/tortoise/tests/test_reconnect.py": {},
    "123-master/tortoise/tests/test_relations.py": {},
    "123-master/tortoise/tests/test_run_async.py": {
        "TestRunAsync.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRunAsync.test_run_async": {
            "name": "test_run_async",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRunAsync.test_run_async_raised": {
            "name": "test_run_async_raised",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "123-master/tortoise/tests/test_schema_create.py": {},
    "123-master/tortoise/tests/test_tester.py": {
        "TestTesterSync.setUp": {
            "name": "setUp",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTesterSync.tearDown": {
            "name": "tearDown",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTesterSync.test_skip": {
            "name": "test_skip",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTesterSync.test_fail": {
            "name": "test_fail",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTesterSync.test_moo": {
            "name": "test_moo",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "123-master/tortoise/tests/test_transactions.py": {},
    "123-master/tortoise/tests/test_two_databases.py": {},
    "123-master/tortoise/tests/test_unique_together.py": {},
    "123-master/tortoise/tests/test_update.py": {},
    "123-master/tortoise/tests/test__models__.py": {
        "TestGenerateSchema.get_sql": {
            "name": "get_sql",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "TestGenerateSchema.get_post_sql": {
            "name": "get_post_sql",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "123-master/tortoise/tests/test__models__bad.py": {
        "BadTournament.__str__": {
            "name": "__str__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GoodTournament.__str__": {
            "name": "__str__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tmp.InAClassTournament.__str__": {
            "name": "__str__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "123-master/tortoise/tests/test__models__good.py": {
        "BadTournament.__str__": {
            "name": "__str__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GoodTournament.__str__": {
            "name": "__str__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tmp.InAClassTournament.__str__": {
            "name": "__str__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "123-master/tortoise/tests/__init__.py": {},
    "123-master/tortoise/tests/fields/test_bool.py": {},
    "123-master/tortoise/tests/fields/test_char.py": {
        "TestCharFields.test_max_length_missing": {
            "name": "test_max_length_missing",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCharFields.test_max_length_bad": {
            "name": "test_max_length_bad",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "123-master/tortoise/tests/fields/test_common.py": {},
    "123-master/tortoise/tests/fields/test_decimal.py": {
        "TestDecimalFields.test_max_digits_empty": {
            "name": "test_max_digits_empty",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecimalFields.test_decimal_places_empty": {
            "name": "test_decimal_places_empty",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecimalFields.test_max_fields_bad": {
            "name": "test_max_fields_bad",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecimalFields.test_decimal_places_bad": {
            "name": "test_decimal_places_bad",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "123-master/tortoise/tests/fields/test_fk.py": {},
    "123-master/tortoise/tests/fields/test_float.py": {},
    "123-master/tortoise/tests/fields/test_int.py": {},
    "123-master/tortoise/tests/fields/test_json.py": {},
    "123-master/tortoise/tests/fields/test_m2m.py": {},
    "123-master/tortoise/tests/fields/test_time.py": {
        "TestDatetimeFields.test_both_auto_bad": {
            "name": "test_both_auto_bad",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "123-master/tortoise/tests/fields/test_uuid.py": {},
    "123-master/tortoise/tests/fields/__init__.py": {}
}
{
    "ALNS-master/alns/ALNS.py": {
        "ALNS.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rnd_state": []
            }
        },
        "ALNS.destroy_operators": {
            "name": "destroy_operators",
            "location": 62,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ALNS.repair_operators": {
            "name": "repair_operators",
            "location": 74,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ALNS.add_destroy_operator": {
            "name": "add_destroy_operator",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "op": [],
                "name": [
                    "None"
                ]
            }
        },
        "ALNS.add_repair_operator": {
            "name": "add_repair_operator",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "op": [],
                "name": [
                    "None"
                ]
            }
        },
        "ALNS._compute_op_coupling": {
            "name": "_compute_op_coupling",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ALNS.iterate": {
            "name": "iterate",
            "location": 162,
            "return": [
                "Result"
            ],
            "arguments": {
                "self": [],
                "initial_solution": [],
                "weight_scheme": [],
                "crit": [],
                "stop": []
            }
        },
        "ALNS.on_best": {
            "name": "on_best",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "ALNS._eval_cand": {
            "name": "_eval_cand",
            "location": 270,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "self": [],
                "crit": [],
                "best": [],
                "curr": [],
                "cand": []
            }
        }
    },
    "ALNS-master/alns/Result.py": {
        "Result.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "best": [
                    "int",
                    "float"
                ],
                "statistics": [
                    "int",
                    "float"
                ]
            }
        },
        "Result.best_state": {
            "name": "best_state",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.statistics": {
            "name": "statistics",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.plot_objectives": {
            "name": "plot_objectives",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ax": [
                    "None",
                    "complex"
                ],
                "title": [
                    "None",
                    "str"
                ]
            }
        },
        "Result.plot_operator_counts": {
            "name": "plot_operator_counts",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fig": [
                    "None",
                    "str",
                    "int",
                    "float"
                ],
                "title": [
                    "None",
                    "str",
                    "int",
                    "float"
                ],
                "legend": [
                    "None",
                    "int",
                    "list[int]"
                ]
            }
        },
        "Result._plot_op_counts": {
            "name": "_plot_op_counts",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "ax": [],
                "operator_counts": [],
                "title": [
                    "str",
                    "bool"
                ],
                "num_types": [
                    "int",
                    "tuple[str]"
                ]
            }
        }
    },
    "ALNS-master/alns/State.py": {
        "State.objective": {
            "name": "objective",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ALNS-master/alns/Statistics.py": {
        "Statistics.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Statistics.objectives": {
            "name": "objectives",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Statistics.start_time": {
            "name": "start_time",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Statistics.total_runtime": {
            "name": "total_runtime",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Statistics.runtimes": {
            "name": "runtimes",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Statistics.destroy_operator_counts": {
            "name": "destroy_operator_counts",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Statistics.repair_operator_counts": {
            "name": "repair_operator_counts",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Statistics.collect_objective": {
            "name": "collect_objective",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "objective": [
                    "int",
                    "str"
                ]
            }
        },
        "Statistics.collect_runtime": {
            "name": "collect_runtime",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "time": [
                    "float",
                    "int",
                    "list[typing.Union[int,float]]",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "Statistics.collect_destroy_operator": {
            "name": "collect_destroy_operator",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "operator_name": [
                    "str",
                    "int"
                ],
                "s_idx": [
                    "str",
                    "int"
                ]
            }
        },
        "Statistics.collect_repair_operator": {
            "name": "collect_repair_operator",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "operator_name": [
                    "str",
                    "int"
                ],
                "s_idx": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "ALNS-master/alns/__init__.py": {},
    "ALNS-master/alns/accept/AcceptanceCriterion.py": {
        "AcceptanceCriterion.__call__": {
            "name": "__call__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "rnd": [
                    "bool",
                    "tuple[typing.Union[float,float]]",
                    "None"
                ],
                "best": [
                    "bool",
                    "tuple[typing.Union[float,float]]",
                    "None"
                ],
                "current": [
                    "bool",
                    "tuple[typing.Union[float,float]]",
                    "None"
                ],
                "candidate": [
                    "bool",
                    "tuple[typing.Union[float,float]]",
                    "None"
                ]
            }
        }
    },
    "ALNS-master/alns/accept/GreatDeluge.py": {
        "GreatDeluge.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alpha": [],
                "beta": []
            }
        },
        "GreatDeluge.alpha": {
            "name": "alpha",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GreatDeluge.beta": {
            "name": "beta",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GreatDeluge.__call__": {
            "name": "__call__",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "rnd": [],
                "best": [],
                "current": [],
                "candidate": []
            }
        }
    },
    "ALNS-master/alns/accept/HillClimbing.py": {
        "HillClimbing.__call__": {
            "name": "__call__",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "rnd": [
                    "bool",
                    "tuple[typing.Union[float,float]]"
                ],
                "best": [
                    "bool",
                    "tuple[typing.Union[float,float]]"
                ],
                "current": [],
                "candidate": []
            }
        }
    },
    "ALNS-master/alns/accept/LateAcceptanceHillClimbing.py": {
        "LateAcceptanceHillClimbing.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lookback_period": [
                    "int",
                    "float"
                ],
                "greedy": [
                    "bool"
                ],
                "better_history": [
                    "bool"
                ]
            }
        },
        "LateAcceptanceHillClimbing.lookback_period": {
            "name": "lookback_period",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LateAcceptanceHillClimbing.greedy": {
            "name": "greedy",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LateAcceptanceHillClimbing.better_history": {
            "name": "better_history",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LateAcceptanceHillClimbing.__call__": {
            "name": "__call__",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "rnd": [
                    "bool",
                    "tuple[typing.Union[float,float]]"
                ],
                "best": [
                    "bool",
                    "tuple[typing.Union[float,float]]"
                ],
                "current": [],
                "candidate": []
            }
        }
    },
    "ALNS-master/alns/accept/NonLinearGreatDeluge.py": {
        "NonLinearGreatDeluge.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alpha": [],
                "beta": [],
                "gamma": [],
                "delta": []
            }
        },
        "NonLinearGreatDeluge.gamma": {
            "name": "gamma",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NonLinearGreatDeluge.delta": {
            "name": "delta",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NonLinearGreatDeluge.__call__": {
            "name": "__call__",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "rnd": [],
                "best": [],
                "current": [],
                "candidate": []
            }
        },
        "NonLinearGreatDeluge._compute_threshold": {
            "name": "_compute_threshold",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "best": [],
                "curr": [],
                "cand": []
            }
        }
    },
    "ALNS-master/alns/accept/RandomWalk.py": {
        "RandomWalk.__call__": {
            "name": "__call__",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "rnd": [
                    "bool",
                    "tuple[typing.Union[float,float]]"
                ],
                "best": [
                    "bool",
                    "tuple[typing.Union[float,float]]"
                ],
                "current": [
                    "bool",
                    "tuple[typing.Union[float,float]]"
                ],
                "candidate": [
                    "bool",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        }
    },
    "ALNS-master/alns/accept/RecordToRecordTravel.py": {
        "RecordToRecordTravel.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start_threshold": [],
                "end_threshold": [],
                "step": [],
                "method": [
                    "typing.Text"
                ],
                "cmp_best": [
                    "bool"
                ]
            }
        },
        "RecordToRecordTravel.start_threshold": {
            "name": "start_threshold",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecordToRecordTravel.end_threshold": {
            "name": "end_threshold",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecordToRecordTravel.step": {
            "name": "step",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecordToRecordTravel.method": {
            "name": "method",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecordToRecordTravel.__call__": {
            "name": "__call__",
            "location": 97,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "rnd": [],
                "best": [],
                "current": [],
                "candidate": []
            }
        },
        "RecordToRecordTravel.autofit": {
            "name": "autofit",
            "location": 109,
            "return": [],
            "arguments": {
                "cls": [],
                "init_obj": [],
                "start_gap": [],
                "end_gap": [],
                "num_iters": [],
                "method": [
                    "typing.Text"
                ]
            }
        }
    },
    "ALNS-master/alns/accept/SimulatedAnnealing.py": {
        "SimulatedAnnealing.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start_temperature": [],
                "end_temperature": [],
                "step": [],
                "method": [
                    "typing.Text"
                ]
            }
        },
        "SimulatedAnnealing.start_temperature": {
            "name": "start_temperature",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimulatedAnnealing.end_temperature": {
            "name": "end_temperature",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimulatedAnnealing.step": {
            "name": "step",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimulatedAnnealing.method": {
            "name": "method",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimulatedAnnealing.__call__": {
            "name": "__call__",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "rnd": [],
                "best": [],
                "current": [],
                "candidate": []
            }
        },
        "SimulatedAnnealing.autofit": {
            "name": "autofit",
            "location": 104,
            "return": [],
            "arguments": {
                "cls": [],
                "init_obj": [],
                "worse": [],
                "accept_prob": [],
                "num_iters": []
            }
        }
    },
    "ALNS-master/alns/accept/update.py": {
        "update": {
            "name": "update",
            "location": 1,
            "return": [
                "int"
            ],
            "arguments": {
                "current": [
                    "int"
                ],
                "step": [
                    "int"
                ],
                "method": [
                    "str"
                ]
            }
        }
    },
    "ALNS-master/alns/accept/WorseAccept.py": {
        "WorseAccept.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start_prob": [
                    "int"
                ],
                "end_prob": [
                    "int"
                ],
                "step": [
                    "int"
                ],
                "method": [
                    "typing.Text"
                ]
            }
        },
        "WorseAccept.start_prob": {
            "name": "start_prob",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorseAccept.end_prob": {
            "name": "end_prob",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorseAccept.step": {
            "name": "step",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorseAccept.method": {
            "name": "method",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorseAccept.__call__": {
            "name": "__call__",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "rnd": [],
                "best": [
                    "bool",
                    "tuple[typing.Union[float,float]]"
                ],
                "current": [],
                "candidate": []
            }
        }
    },
    "ALNS-master/alns/accept/__init__.py": {},
    "ALNS-master/alns/accept/tests/test_great_deluge.py": {
        "test_raise_invalid_parameters": {
            "name": "test_raise_invalid_parameters",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "alpha": [],
                "beta": []
            }
        },
        "test_no_raise_valid_parameters": {
            "name": "test_no_raise_valid_parameters",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "alpha": [
                    "bool",
                    "dict[, ]"
                ],
                "beta": [
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "test_alpha": {
            "name": "test_alpha",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "alpha": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_beta": {
            "name": "test_beta",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "beta": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_accepts_below_threshold": {
            "name": "test_accepts_below_threshold",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rejects_above_threshold": {
            "name": "test_rejects_above_threshold",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rejects_equal_threshold": {
            "name": "test_rejects_equal_threshold",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_evaluate_consecutive_solutions": {
            "name": "test_evaluate_consecutive_solutions",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ALNS-master/alns/accept/tests/test_hill_climbing.py": {
        "test_accepts_better": {
            "name": "test_accepts_better",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rejects_worse": {
            "name": "test_rejects_worse",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_accepts_equal": {
            "name": "test_accepts_equal",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ALNS-master/alns/accept/tests/test_late_acceptance_hill_climbing.py": {
        "test_raises_invalid_lookback_period": {
            "name": "test_raises_invalid_lookback_period",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "lookback_period": [
                    "str",
                    "float"
                ]
            }
        },
        "test_properties": {
            "name": "test_properties",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "lookback_period": [
                    "dict[str, typing.Any]",
                    "str"
                ],
                "greedy": [
                    "dict[str, typing.Any]",
                    "str"
                ],
                "better_history": [
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "test_zero_lookback_period": {
            "name": "test_zero_lookback_period",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "greedy": [
                    "str",
                    "float"
                ],
                "better_history": [
                    "str",
                    "float"
                ]
            }
        },
        "test_accept": {
            "name": "test_accept",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "lookback_period": [
                    "str"
                ]
            }
        },
        "test_reject": {
            "name": "test_reject",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "lookback_period": [
                    "str"
                ]
            }
        },
        "test_greedy_accept": {
            "name": "test_greedy_accept",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "lookback_period": [
                    "set[]"
                ]
            }
        },
        "test_better_history_small_example": {
            "name": "test_better_history_small_example",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_better_history_reject": {
            "name": "test_better_history_reject",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "lookback_period": [
                    "bool",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "test_full_example": {
            "name": "test_full_example",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ALNS-master/alns/accept/tests/test_non_linear_great_deluge.py": {
        "test_raise_invalid_parameters": {
            "name": "test_raise_invalid_parameters",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "alpha": [],
                "beta": [],
                "gamma": [],
                "delta": []
            }
        },
        "test_no_raise_valid_parameters": {
            "name": "test_no_raise_valid_parameters",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "alpha": [
                    "bool",
                    "dict[, ]"
                ],
                "beta": [
                    "bool",
                    "dict[, ]"
                ],
                "gamma": [
                    "bool",
                    "dict[, ]"
                ],
                "delta": [
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "test_properties": {
            "name": "test_properties",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "alpha": [
                    "dict[str, typing.Any]",
                    "str"
                ],
                "beta": [
                    "dict[str, typing.Any]",
                    "str"
                ],
                "gamma": [
                    "dict[str, typing.Any]",
                    "str"
                ],
                "delta": [
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "test_raise_zero_best": {
            "name": "test_raise_zero_best",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_accepts_below_threshold": {
            "name": "test_accepts_below_threshold",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rejects_above_threshold": {
            "name": "test_rejects_above_threshold",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rejects_equal_threshold": {
            "name": "test_rejects_equal_threshold",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_accepts_improving_current": {
            "name": "test_accepts_improving_current",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_evaluate_consecutive_solutions": {
            "name": "test_evaluate_consecutive_solutions",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ALNS-master/alns/accept/tests/test_random_walk.py": {
        "test_accepts_better": {
            "name": "test_accepts_better",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_accepts_worse": {
            "name": "test_accepts_worse",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_accepts_equal": {
            "name": "test_accepts_equal",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ALNS-master/alns/accept/tests/test_record_to_record_travel.py": {
        "test_raises_invalid_parameters": {
            "name": "test_raises_invalid_parameters",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "start": [
                    "int",
                    "None",
                    "bytes"
                ],
                "end": [
                    "int",
                    "None",
                    "bytes"
                ],
                "step": [
                    "int",
                    "None",
                    "bytes"
                ],
                "method": [
                    "int",
                    "None",
                    "bytes"
                ]
            }
        },
        "test_no_raise_valid_parameters": {
            "name": "test_no_raise_valid_parameters",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "start": [
                    "int",
                    "None",
                    "float"
                ],
                "end": [
                    "int",
                    "None",
                    "float"
                ],
                "step": [
                    "int",
                    "None",
                    "float"
                ],
                "method": [
                    "int",
                    "None",
                    "float"
                ]
            }
        },
        "test_properties": {
            "name": "test_properties",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "start": [
                    "int",
                    "None"
                ],
                "end": [
                    "int",
                    "None"
                ],
                "step": [
                    "int",
                    "float",
                    "None"
                ],
                "method": [
                    "int",
                    "str"
                ]
            }
        },
        "test_accepts_better": {
            "name": "test_accepts_better",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rejects_worse": {
            "name": "test_rejects_worse",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_accepts_equal": {
            "name": "test_accepts_equal",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_linear_threshold_update": {
            "name": "test_linear_threshold_update",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_exponential_threshold_update": {
            "name": "test_exponential_threshold_update",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_autofit_raises_for_invalid_inputs": {
            "name": "test_autofit_raises_for_invalid_inputs",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "init_obj": [
                    "int",
                    "tuple[typing.Union[int,...]]",
                    "None",
                    "str",
                    "typing.Sequence[int]"
                ],
                "start_gap": [
                    "int",
                    "tuple[typing.Union[int,...]]",
                    "None",
                    "str",
                    "typing.Sequence[int]"
                ],
                "end_gap": [
                    "int",
                    "tuple[typing.Union[int,...]]",
                    "None",
                    "str",
                    "typing.Sequence[int]"
                ],
                "n_iters": [
                    "int",
                    "tuple[typing.Union[int,...]]",
                    "None",
                    "str",
                    "typing.Sequence[int]"
                ],
                "method": [
                    "int",
                    "tuple[typing.Union[int,...]]",
                    "None",
                    "str",
                    "typing.Sequence[int]"
                ]
            }
        },
        "test_autofit_on_several_examples": {
            "name": "test_autofit_on_several_examples",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "init_obj": [
                    "int",
                    "tuple[typing.Union[int,...]]",
                    "None",
                    "float"
                ],
                "start_gap": [
                    "int",
                    "tuple[typing.Union[int,...]]",
                    "None",
                    "float"
                ],
                "end_gap": [
                    "int",
                    "tuple[typing.Union[int,...]]",
                    "None",
                    "float"
                ],
                "n_iters": [
                    "int",
                    "tuple[typing.Union[int,...]]",
                    "None",
                    "float"
                ],
                "method": [
                    "bool",
                    "float",
                    "typing.Sequence[int]"
                ],
                "exp_start": [
                    "int",
                    "list[float]",
                    "float",
                    "str"
                ],
                "exp_end": [
                    "int",
                    "str",
                    "None",
                    "float"
                ],
                "exp_step": [
                    "int"
                ]
            }
        }
    },
    "ALNS-master/alns/accept/tests/test_simulated_annealing.py": {
        "test_raises_negative_parameters": {
            "name": "test_raises_negative_parameters",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "start": [
                    "int",
                    "str",
                    "set[]"
                ],
                "end": [
                    "int",
                    "str",
                    "set[]"
                ],
                "step": [
                    "int",
                    "str",
                    "set[]"
                ]
            }
        },
        "test_raises_explosive_step": {
            "name": "test_raises_explosive_step",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_temperature_boundary": {
            "name": "test_temperature_boundary",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_raises_start_smaller_than_end": {
            "name": "test_raises_start_smaller_than_end",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_does_not_raise": {
            "name": "test_does_not_raise",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_step": {
            "name": "test_step",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "step": []
            }
        },
        "test_start_temperature": {
            "name": "test_start_temperature",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "start": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "test_end_temperature": {
            "name": "test_end_temperature",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "end": [
                    "str"
                ]
            }
        },
        "test_accepts_better": {
            "name": "test_accepts_better",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_accepts_equal": {
            "name": "test_accepts_equal",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_linear_random_solutions": {
            "name": "test_linear_random_solutions",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_exponential_random_solutions": {
            "name": "test_exponential_random_solutions",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_accepts_generator_and_random_state": {
            "name": "test_accepts_generator_and_random_state",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_autofit_raises_for_invalid_inputs": {
            "name": "test_autofit_raises_for_invalid_inputs",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "worse": [],
                "accept_prob": [],
                "iters": []
            }
        },
        "test_autofit_on_several_examples": {
            "name": "test_autofit_on_several_examples",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "init_obj": [
                    "typing.Callable[, ]"
                ],
                "worse": [],
                "accept_prob": [
                    "typing.Callable[, ]"
                ],
                "iters": [
                    "bool"
                ]
            }
        },
        "test_accepts_generator_and_random_state.Old.random_sample": {
            "name": "random_sample",
            "location": 151,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_accepts_generator_and_random_state.New.random": {
            "name": "random",
            "location": 158,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ALNS-master/alns/accept/tests/test_threshold_accept.py": {
        "test_accepts_better": {
            "name": "test_accepts_better",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rejects_worse": {
            "name": "test_rejects_worse",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_accepts_equal": {
            "name": "test_accepts_equal",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_linear_threshold_update": {
            "name": "test_linear_threshold_update",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_exponential_threshold_update": {
            "name": "test_exponential_threshold_update",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ALNS-master/alns/accept/tests/test_update.py": {
        "test_raises_unknown_method": {
            "name": "test_raises_unknown_method",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_accepts_any_case_method": {
            "name": "test_accepts_any_case_method",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "lc": [
                    "str"
                ],
                "uc": [
                    "str"
                ]
            }
        },
        "test_update": {
            "name": "test_update",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "curr": [
                    "int",
                    "typing.Iterable[]"
                ],
                "step": [
                    "int",
                    "typing.Iterable[]"
                ],
                "method": [
                    "int",
                    "typing.Iterable[]"
                ],
                "expected": [
                    "int",
                    "typing.Iterable[]"
                ]
            }
        }
    },
    "ALNS-master/alns/accept/tests/test_worse_accept.py": {
        "test_raises_invalid_parameters": {
            "name": "test_raises_invalid_parameters",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "start": [
                    "int",
                    "None",
                    "bytes"
                ],
                "end": [
                    "int",
                    "None",
                    "bytes"
                ],
                "step": [
                    "int",
                    "None",
                    "bytes"
                ],
                "method": [
                    "int",
                    "None",
                    "bytes"
                ]
            }
        },
        "test_no_raise_valid_parameters": {
            "name": "test_no_raise_valid_parameters",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "start": [
                    "int",
                    "None",
                    "list[str]"
                ],
                "end": [
                    "int",
                    "None",
                    "list[str]"
                ],
                "step": [
                    "int",
                    "None",
                    "list[str]"
                ],
                "method": [
                    "int",
                    "None",
                    "list[str]"
                ]
            }
        },
        "test_properties": {
            "name": "test_properties",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "start": [
                    "int"
                ],
                "end": [
                    "int",
                    "None"
                ],
                "step": [
                    "int",
                    "float",
                    "None"
                ],
                "method": [
                    "int",
                    "str",
                    "float",
                    "None"
                ]
            }
        },
        "test_zero_prob_accepts_better": {
            "name": "test_zero_prob_accepts_better",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_zero_prob_never_accept_worse": {
            "name": "test_zero_prob_never_accept_worse",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_one_prob_always_accept": {
            "name": "test_one_prob_always_accept",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_linear_consecutive_solutions": {
            "name": "test_linear_consecutive_solutions",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_exponential_consecutive_solutions": {
            "name": "test_exponential_consecutive_solutions",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ALNS-master/alns/accept/tests/__init__.py": {},
    "ALNS-master/alns/stop/MaxIterations.py": {
        "MaxIterations.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_iterations": [
                    "int",
                    "float"
                ]
            }
        },
        "MaxIterations.max_iterations": {
            "name": "max_iterations",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MaxIterations.__call__": {
            "name": "__call__",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "rnd": [
                    "dict[, ]"
                ],
                "best": [
                    "dict[, ]"
                ],
                "current": [
                    "dict[, ]"
                ]
            }
        }
    },
    "ALNS-master/alns/stop/MaxRuntime.py": {
        "MaxRuntime.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_runtime": [
                    "int",
                    "float"
                ]
            }
        },
        "MaxRuntime.max_runtime": {
            "name": "max_runtime",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MaxRuntime.__call__": {
            "name": "__call__",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "rnd": [
                    "dict[, ]"
                ],
                "best": [
                    "dict[, ]"
                ],
                "current": [
                    "dict[, ]"
                ]
            }
        }
    },
    "ALNS-master/alns/stop/NoImprovement.py": {
        "NoImprovement.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_iterations": [
                    "int",
                    "float"
                ]
            }
        },
        "NoImprovement.max_iterations": {
            "name": "max_iterations",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NoImprovement.__call__": {
            "name": "__call__",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "rnd": [
                    "dict[, ]"
                ],
                "best": [],
                "current": [
                    "dict[, ]"
                ]
            }
        }
    },
    "ALNS-master/alns/stop/StoppingCriterion.py": {
        "StoppingCriterion.__call__": {
            "name": "__call__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "rnd": [
                    "dict[, ]"
                ],
                "best": [
                    "dict[, ]"
                ],
                "current": [
                    "dict[, ]"
                ]
            }
        }
    },
    "ALNS-master/alns/stop/__init__.py": {},
    "ALNS-master/alns/stop/tests/test_max_iterations.py": {
        "test_raise_negative_parameters": {
            "name": "test_raise_negative_parameters",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "max_iterations": [
                    "int",
                    "str"
                ]
            }
        },
        "test_does_not_raise": {
            "name": "test_does_not_raise",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "max_iterations": [
                    "int",
                    "str",
                    "list[int]"
                ]
            }
        },
        "test_max_iterations": {
            "name": "test_max_iterations",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "max_iterations": [
                    "int",
                    "list[int]",
                    "str"
                ]
            }
        },
        "test_before_max_iterations": {
            "name": "test_before_max_iterations",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_after_max_iterations": {
            "name": "test_after_max_iterations",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ALNS-master/alns/stop/tests/test_max_runtime.py": {
        "sleep": {
            "name": "sleep",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "duration": [
                    "str"
                ],
                "get_now": []
            }
        },
        "test_raise_negative_parameters": {
            "name": "test_raise_negative_parameters",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "max_runtime": [
                    "int",
                    "str"
                ]
            }
        },
        "test_valid_parameters": {
            "name": "test_valid_parameters",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "max_runtime": [
                    "int",
                    "str"
                ]
            }
        },
        "test_max_runtime": {
            "name": "test_max_runtime",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "max_runtime": [
                    "int",
                    "list[int]",
                    "str"
                ]
            }
        },
        "test_before_max_runtime": {
            "name": "test_before_max_runtime",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "max_runtime": [
                    "int",
                    "str",
                    "list[int]"
                ]
            }
        },
        "test_after_max_runtime": {
            "name": "test_after_max_runtime",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "max_runtime": [
                    "int",
                    "str",
                    "list[dict[str, typing.Any]]"
                ]
            }
        }
    },
    "ALNS-master/alns/stop/tests/test_no_improvement.py": {
        "test_raise_negative_parameters": {
            "name": "test_raise_negative_parameters",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "max_iterations": [
                    "int",
                    "str",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "test_max_iterations": {
            "name": "test_max_iterations",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "max_iterations": [
                    "int",
                    "list[dict[str, typing.Any]]",
                    "str"
                ]
            }
        },
        "test_zero_max_iterations": {
            "name": "test_zero_max_iterations",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_one_max_iterations": {
            "name": "test_one_max_iterations",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_n_max_iterations_non_improving": {
            "name": "test_n_max_iterations_non_improving",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "test_n_max_iterations_with_single_improvement": {
            "name": "test_n_max_iterations_with_single_improvement",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "n": [
                    "int",
                    "str"
                ],
                "k": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "ALNS-master/alns/stop/tests/__init__.py": {},
    "ALNS-master/alns/tests/conftest.py": {
        "auto_close_all_figures": {
            "name": "auto_close_all_figures",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "ALNS-master/alns/tests/states.py": {
        "VarObj.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "float"
                ]
            }
        },
        "VarObj.objective": {
            "name": "objective",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ALNS-master/alns/tests/test_alns.py": {
        "get_alns_instance": {
            "name": "get_alns_instance",
            "location": 21,
            "return": [
                "ALNS"
            ],
            "arguments": {
                "repair_operators": [
                    "None",
                    "str"
                ],
                "destroy_operators": [
                    "None",
                    "str"
                ],
                "seed": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "get_repair_operators": {
            "name": "get_repair_operators",
            "location": 52,
            "return": [
                "list[typing.Callable[, ]]"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "get_destroy_operators": {
            "name": "get_destroy_operators",
            "location": 66,
            "return": [
                "list[typing.Callable[, ]]"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "test_on_best_is_called": {
            "name": "test_on_best_is_called",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_destroy_operator": {
            "name": "test_add_destroy_operator",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_destroy_operator_name": {
            "name": "test_add_destroy_operator_name",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_repair_operator": {
            "name": "test_add_repair_operator",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_repair_operator_name": {
            "name": "test_add_repair_operator_name",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compute_op_coupling": {
            "name": "test_compute_op_coupling",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compute_op_coupling_only_after": {
            "name": "test_compute_op_coupling_only_after",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_raise_uncoupled_destroy_op": {
            "name": "test_raise_uncoupled_destroy_op",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_raises_missing_destroy_operator": {
            "name": "test_raises_missing_destroy_operator",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_raises_missing_repair_operator": {
            "name": "test_raises_missing_repair_operator",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_zero_max_iterations": {
            "name": "test_zero_max_iterations",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_zero_max_runtime": {
            "name": "test_zero_max_runtime",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iterate_kwargs_are_correctly_passed_to_operators": {
            "name": "test_iterate_kwargs_are_correctly_passed_to_operators",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bugfix_pass_kwargs_to_on_best": {
            "name": "test_bugfix_pass_kwargs_to_on_best",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_trivial_example": {
            "name": "test_trivial_example",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fixed_seed_outcomes": {
            "name": "test_fixed_seed_outcomes",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "seed": [],
                "desired": [
                    "float",
                    "int",
                    "typing.Iterable[int]",
                    "str"
                ]
            }
        },
        "test_nonnegative_max_iterations": {
            "name": "test_nonnegative_max_iterations",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "max_iterations": [
                    "int"
                ]
            }
        },
        "test_nonnegative_max_runtime": {
            "name": "test_nonnegative_max_runtime",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "max_runtime": [
                    "list[numpy.ndarray]",
                    "float",
                    "str"
                ]
            }
        },
        "ValueState.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "ValueState.objective": {
            "name": "objective",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_add_destroy_operator_name.destroy_operator": {
            "name": "destroy_operator",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_repair_operator_name.repair_operator": {
            "name": "repair_operator",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iterate_kwargs_are_correctly_passed_to_operators.test_operator": {
            "name": "test_operator",
            "location": 298,
            "return": [],
            "arguments": {
                "state": [],
                "rnd": [],
                "item": []
            }
        },
        "test_bugfix_pass_kwargs_to_on_best.test_operator": {
            "name": "test_operator",
            "location": 319,
            "return": [],
            "arguments": {
                "state": [],
                "rnd": [],
                "item": []
            }
        }
    },
    "ALNS-master/alns/tests/test_result.py": {
        "get_result": {
            "name": "get_result",
            "location": 21,
            "return": [
                "Result"
            ],
            "arguments": {
                "state": [
                    "dict[, ]"
                ]
            }
        },
        "get_statistics": {
            "name": "get_statistics",
            "location": 28,
            "return": [
                "Statistics"
            ],
            "arguments": {}
        },
        "get_objective_plot": {
            "name": "get_objective_plot",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "ax": [],
                "data": [
                    "dict[, ]",
                    "typing.Mapping",
                    "bool"
                ]
            }
        },
        "get_operator_plot": {
            "name": "get_operator_plot",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "figure": [],
                "destroy": [
                    "str",
                    "bool"
                ],
                "repair": [
                    "str",
                    "bool"
                ],
                "legend": [
                    "None",
                    "str"
                ],
                "suptitle": [
                    "None",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "test_result_state": {
            "name": "test_result_state",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_plot_objectives": {
            "name": "test_plot_objectives",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "fig_test": [],
                "fig_ref": []
            }
        },
        "test_plot_objectives_kwargs": {
            "name": "test_plot_objectives_kwargs",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "fig_test": [],
                "fig_ref": []
            }
        },
        "test_plot_objectives_default_axes": {
            "name": "test_plot_objectives_default_axes",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_plot_operator_counts": {
            "name": "test_plot_operator_counts",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "fig_test": [
                    "int",
                    "float"
                ],
                "fig_ref": [
                    "str",
                    "typing.Iterable[tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "test_plot_operator_counts_title": {
            "name": "test_plot_operator_counts_title",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "fig_test": [
                    "int",
                    "float"
                ],
                "fig_ref": [
                    "set[]",
                    "bool"
                ]
            }
        },
        "test_plot_operator_counts_default_figure": {
            "name": "test_plot_operator_counts_default_figure",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_plot_operator_counts_kwargs": {
            "name": "test_plot_operator_counts_kwargs",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "fig_test": [
                    "int"
                ],
                "fig_ref": [
                    "set[]",
                    "bool"
                ]
            }
        },
        "test_plot_operator_counts_legend_length": {
            "name": "test_plot_operator_counts_legend_length",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "fig_test": [
                    "int",
                    "float"
                ],
                "fig_ref": [
                    "set[]",
                    "bool"
                ]
            }
        },
        "get_operator_plot._helper": {
            "name": "_helper",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "ax": [],
                "operator_counts": [],
                "title": []
            }
        },
        "check_figures_equal": {
            "name": "check_figures_equal",
            "location": 14,
            "return": [],
            "arguments": {}
        }
    },
    "ALNS-master/alns/tests/test_statistics.py": {
        "test_empty_new_statistics": {
            "name": "test_empty_new_statistics",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_collect_objectives": {
            "name": "test_collect_objectives",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_collect_runtimes": {
            "name": "test_collect_runtimes",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_start_time": {
            "name": "test_start_time",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_total_runtime": {
            "name": "test_total_runtime",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_collect_destroy_counts_example": {
            "name": "test_collect_destroy_counts_example",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_collect_repair_counts_example": {
            "name": "test_collect_repair_counts_example",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ALNS-master/alns/tests/__init__.py": {},
    "ALNS-master/alns/weights/SegmentedWeights.py": {
        "SegmentedWeights.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scores": [
                    "int"
                ],
                "num_destroy": [
                    "int"
                ],
                "num_repair": [
                    "int"
                ],
                "seg_decay": [
                    "int"
                ],
                "seg_length": [
                    "int"
                ]
            }
        },
        "SegmentedWeights.select_operators": {
            "name": "select_operators",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "rnd_state": [
                    "None"
                ],
                "op_coupling": [
                    "None"
                ]
            }
        },
        "SegmentedWeights.update_weights": {
            "name": "update_weights",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d_idx": [
                    "int",
                    "None"
                ],
                "r_idx": [
                    "int",
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]"
                ],
                "s_idx": [
                    "float",
                    "list[int]",
                    "bool"
                ]
            }
        },
        "SegmentedWeights._reset_segment_weights": {
            "name": "_reset_segment_weights",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ALNS-master/alns/weights/SimpleWeights.py": {
        "SimpleWeights.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scores": [
                    "int",
                    "list[int]"
                ],
                "num_destroy": [
                    "int",
                    "list[int]"
                ],
                "num_repair": [
                    "int",
                    "list[int]"
                ],
                "op_decay": [
                    "bool"
                ]
            }
        },
        "SimpleWeights.update_weights": {
            "name": "update_weights",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d_idx": [
                    "list[]",
                    "bool"
                ],
                "r_idx": [
                    "bool",
                    "typing.Mapping",
                    "None"
                ],
                "s_idx": [
                    "bool",
                    "float",
                    "str"
                ]
            }
        }
    },
    "ALNS-master/alns/weights/WeightScheme.py": {
        "WeightScheme.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scores": [
                    "int"
                ],
                "num_destroy": [
                    "int",
                    "None",
                    "float",
                    "str"
                ],
                "num_repair": [
                    "int",
                    "None",
                    "str",
                    "float"
                ]
            }
        },
        "WeightScheme.destroy_weights": {
            "name": "destroy_weights",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WeightScheme.repair_weights": {
            "name": "repair_weights",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WeightScheme.select_operators": {
            "name": "select_operators",
            "location": 40,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "rnd_state": [
                    "dict[str, typing.Any]",
                    "list[dict[str, typing.Any]]",
                    "bool",
                    "list[str]"
                ],
                "op_coupling": [
                    "dict[str, str]",
                    "bytes",
                    "int"
                ]
            }
        },
        "WeightScheme.update_weights": {
            "name": "update_weights",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "d_idx": [
                    "dict[str, typing.Any]",
                    "None",
                    "typing.Any",
                    "bool",
                    "str",
                    "typing.Sequence[str]"
                ],
                "r_idx": [
                    "dict[str, typing.Any]",
                    "None",
                    "typing.Any",
                    "bool",
                    "str",
                    "typing.Sequence[str]"
                ],
                "s_idx": [
                    "dict[str, typing.Any]",
                    "None",
                    "typing.Any",
                    "bool",
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "WeightScheme._validate_arguments": {
            "name": "_validate_arguments",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "scores": [],
                "num_destroy": [
                    "int"
                ],
                "num_repair": [
                    "int"
                ]
            }
        },
        "WeightScheme.select_operators.select": {
            "name": "select",
            "location": 63,
            "return": [],
            "arguments": {
                "op_weights": []
            }
        }
    },
    "ALNS-master/alns/weights/__init__.py": {},
    "ALNS-master/alns/weights/tests/test_segmented_weights.py": {
        "test_raises_invalid_seg_decay": {
            "name": "test_raises_invalid_seg_decay",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "seg_decay": [
                    "str",
                    "float"
                ]
            }
        },
        "test_does_not_raise_valid_seg_decay": {
            "name": "test_does_not_raise_valid_seg_decay",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "seg_decay": [
                    "typing.Iterable[numpy.dtype]"
                ]
            }
        },
        "test_update_weights": {
            "name": "test_update_weights",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "scores": [
                    "int",
                    "str",
                    "float",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "seg_decay": [
                    "int",
                    "str",
                    "float",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "test_raises_invalid_arguments": {
            "name": "test_raises_invalid_arguments",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "scores": [
                    "int",
                    "None",
                    "str",
                    "bytes"
                ],
                "num_destroy": [
                    "int",
                    "None",
                    "str",
                    "bytes"
                ],
                "num_repair": [
                    "int",
                    "None",
                    "str",
                    "bytes"
                ],
                "seg_decay": [
                    "int",
                    "None",
                    "str",
                    "bytes"
                ],
                "seg_length": [
                    "int",
                    "None",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "ALNS-master/alns/weights/tests/test_simple_weights.py": {
        "test_raises_invalid_op_decay": {
            "name": "test_raises_invalid_op_decay",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "op_decay": []
            }
        },
        "test_does_not_raise_valid_op_decay": {
            "name": "test_does_not_raise_valid_op_decay",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "op_decay": []
            }
        },
        "test_update_weights": {
            "name": "test_update_weights",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "scores": [
                    "str",
                    "int",
                    "list[numpy.array]",
                    "list[int]"
                ],
                "op_decay": [
                    "str",
                    "int",
                    "list[numpy.array]",
                    "list[int]"
                ],
                "expected": []
            }
        },
        "test_select_operators": {
            "name": "test_select_operators",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "op_coupling": [
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        }
    },
    "ALNS-master/alns/weights/tests/__init__.py": {}
}